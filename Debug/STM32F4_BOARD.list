
STM32F4_BOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000261e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000055d8  08026370  08026370  00036370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b948  0802b948  00040208  2**0
                  CONTENTS
  4 .ARM          00000008  0802b948  0802b948  0003b948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b950  0802b950  00040208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b950  0802b950  0003b950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b954  0802b954  0003b954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0802b958  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040208  2**0
                  CONTENTS
 10 .bss          0001354c  20000208  20000208  00040208  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20013754  20013754  00040208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040208  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00040238  2**0
                  CONTENTS, READONLY
 14 .debug_info   00046b52  00000000  00000000  0004027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a920  00000000  00000000  00086dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000033e8  00000000  00000000  000916f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002a3f  00000000  00000000  00094ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00038d34  00000000  00000000  00097517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004cc21  00000000  00000000  000d024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fcfb0  00000000  00000000  0011ce6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000eb24  00000000  00000000  00219e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00228940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08026358 	.word	0x08026358

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	08026358 	.word	0x08026358

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bdc:	f000 b984 	b.w	8000ee8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f81a 	bl	8000c20 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__popcountsi2>:
 8000bf8:	0843      	lsrs	r3, r0, #1
 8000bfa:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000bfe:	1ac0      	subs	r0, r0, r3
 8000c00:	0883      	lsrs	r3, r0, #2
 8000c02:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000c06:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000c0a:	4418      	add	r0, r3
 8000c0c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000c10:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000c14:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000c18:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000c1c:	0e00      	lsrs	r0, r0, #24
 8000c1e:	4770      	bx	lr

08000c20 <__udivmoddi4>:
 8000c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c24:	9e08      	ldr	r6, [sp, #32]
 8000c26:	460d      	mov	r5, r1
 8000c28:	4604      	mov	r4, r0
 8000c2a:	460f      	mov	r7, r1
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d14a      	bne.n	8000cc6 <__udivmoddi4+0xa6>
 8000c30:	428a      	cmp	r2, r1
 8000c32:	4694      	mov	ip, r2
 8000c34:	d965      	bls.n	8000d02 <__udivmoddi4+0xe2>
 8000c36:	fab2 f382 	clz	r3, r2
 8000c3a:	b143      	cbz	r3, 8000c4e <__udivmoddi4+0x2e>
 8000c3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c40:	f1c3 0220 	rsb	r2, r3, #32
 8000c44:	409f      	lsls	r7, r3
 8000c46:	fa20 f202 	lsr.w	r2, r0, r2
 8000c4a:	4317      	orrs	r7, r2
 8000c4c:	409c      	lsls	r4, r3
 8000c4e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c52:	fa1f f58c 	uxth.w	r5, ip
 8000c56:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c5a:	0c22      	lsrs	r2, r4, #16
 8000c5c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c60:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c64:	fb01 f005 	mul.w	r0, r1, r5
 8000c68:	4290      	cmp	r0, r2
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x62>
 8000c6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c70:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c74:	f080 811c 	bcs.w	8000eb0 <__udivmoddi4+0x290>
 8000c78:	4290      	cmp	r0, r2
 8000c7a:	f240 8119 	bls.w	8000eb0 <__udivmoddi4+0x290>
 8000c7e:	3902      	subs	r1, #2
 8000c80:	4462      	add	r2, ip
 8000c82:	1a12      	subs	r2, r2, r0
 8000c84:	b2a4      	uxth	r4, r4
 8000c86:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c8e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c92:	fb00 f505 	mul.w	r5, r0, r5
 8000c96:	42a5      	cmp	r5, r4
 8000c98:	d90a      	bls.n	8000cb0 <__udivmoddi4+0x90>
 8000c9a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ca2:	f080 8107 	bcs.w	8000eb4 <__udivmoddi4+0x294>
 8000ca6:	42a5      	cmp	r5, r4
 8000ca8:	f240 8104 	bls.w	8000eb4 <__udivmoddi4+0x294>
 8000cac:	4464      	add	r4, ip
 8000cae:	3802      	subs	r0, #2
 8000cb0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb4:	1b64      	subs	r4, r4, r5
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	b11e      	cbz	r6, 8000cc2 <__udivmoddi4+0xa2>
 8000cba:	40dc      	lsrs	r4, r3
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	e9c6 4300 	strd	r4, r3, [r6]
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0xbc>
 8000cca:	2e00      	cmp	r6, #0
 8000ccc:	f000 80ed 	beq.w	8000eaa <__udivmoddi4+0x28a>
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	e9c6 0500 	strd	r0, r5, [r6]
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cdc:	fab3 f183 	clz	r1, r3
 8000ce0:	2900      	cmp	r1, #0
 8000ce2:	d149      	bne.n	8000d78 <__udivmoddi4+0x158>
 8000ce4:	42ab      	cmp	r3, r5
 8000ce6:	d302      	bcc.n	8000cee <__udivmoddi4+0xce>
 8000ce8:	4282      	cmp	r2, r0
 8000cea:	f200 80f8 	bhi.w	8000ede <__udivmoddi4+0x2be>
 8000cee:	1a84      	subs	r4, r0, r2
 8000cf0:	eb65 0203 	sbc.w	r2, r5, r3
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	4617      	mov	r7, r2
 8000cf8:	2e00      	cmp	r6, #0
 8000cfa:	d0e2      	beq.n	8000cc2 <__udivmoddi4+0xa2>
 8000cfc:	e9c6 4700 	strd	r4, r7, [r6]
 8000d00:	e7df      	b.n	8000cc2 <__udivmoddi4+0xa2>
 8000d02:	b902      	cbnz	r2, 8000d06 <__udivmoddi4+0xe6>
 8000d04:	deff      	udf	#255	; 0xff
 8000d06:	fab2 f382 	clz	r3, r2
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f040 8090 	bne.w	8000e30 <__udivmoddi4+0x210>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d20:	fb07 2015 	mls	r0, r7, r5, r2
 8000d24:	0c22      	lsrs	r2, r4, #16
 8000d26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d2a:	fb0e f005 	mul.w	r0, lr, r5
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x124>
 8000d32:	eb1c 0202 	adds.w	r2, ip, r2
 8000d36:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x122>
 8000d3c:	4290      	cmp	r0, r2
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2b8>
 8000d42:	4645      	mov	r5, r8
 8000d44:	1a12      	subs	r2, r2, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d4c:	fb07 2210 	mls	r2, r7, r0, r2
 8000d50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x14e>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x14c>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2c2>
 8000d6c:	4610      	mov	r0, r2
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d76:	e79f      	b.n	8000cb8 <__udivmoddi4+0x98>
 8000d78:	f1c1 0720 	rsb	r7, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa05 f401 	lsl.w	r4, r5, r1
 8000d8a:	fa20 f307 	lsr.w	r3, r0, r7
 8000d8e:	40fd      	lsrs	r5, r7
 8000d90:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d94:	4323      	orrs	r3, r4
 8000d96:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d9a:	fa1f fe8c 	uxth.w	lr, ip
 8000d9e:	fb09 5518 	mls	r5, r9, r8, r5
 8000da2:	0c1c      	lsrs	r4, r3, #16
 8000da4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da8:	fb08 f50e 	mul.w	r5, r8, lr
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	fa00 f001 	lsl.w	r0, r0, r1
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b0>
 8000db8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2b4>
 8000dc4:	42a5      	cmp	r5, r4
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2b4>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4464      	add	r4, ip
 8000dd0:	1b64      	subs	r4, r4, r5
 8000dd2:	b29d      	uxth	r5, r3
 8000dd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000ddc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000de4:	45a6      	cmp	lr, r4
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1da>
 8000de8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2ac>
 8000df2:	45a6      	cmp	lr, r4
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2ac>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	4464      	add	r4, ip
 8000dfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dfe:	fba3 9502 	umull	r9, r5, r3, r2
 8000e02:	eba4 040e 	sub.w	r4, r4, lr
 8000e06:	42ac      	cmp	r4, r5
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46ae      	mov	lr, r5
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x29c>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x298>
 8000e10:	b156      	cbz	r6, 8000e28 <__udivmoddi4+0x208>
 8000e12:	ebb0 0208 	subs.w	r2, r0, r8
 8000e16:	eb64 040e 	sbc.w	r4, r4, lr
 8000e1a:	fa04 f707 	lsl.w	r7, r4, r7
 8000e1e:	40ca      	lsrs	r2, r1
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	4317      	orrs	r7, r2
 8000e24:	e9c6 7400 	strd	r7, r4, [r6]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	f1c3 0120 	rsb	r1, r3, #32
 8000e34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e38:	fa20 f201 	lsr.w	r2, r0, r1
 8000e3c:	fa25 f101 	lsr.w	r1, r5, r1
 8000e40:	409d      	lsls	r5, r3
 8000e42:	432a      	orrs	r2, r5
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e50:	fb07 1510 	mls	r5, r7, r0, r1
 8000e54:	0c11      	lsrs	r1, r2, #16
 8000e56:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e5a:	fb00 f50e 	mul.w	r5, r0, lr
 8000e5e:	428d      	cmp	r5, r1
 8000e60:	fa04 f403 	lsl.w	r4, r4, r3
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x258>
 8000e66:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b0>
 8000e70:	428d      	cmp	r5, r1
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b0>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4461      	add	r1, ip
 8000e78:	1b49      	subs	r1, r1, r5
 8000e7a:	b292      	uxth	r2, r2
 8000e7c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e80:	fb07 1115 	mls	r1, r7, r5, r1
 8000e84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e88:	fb05 f10e 	mul.w	r1, r5, lr
 8000e8c:	4291      	cmp	r1, r2
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x282>
 8000e90:	eb1c 0202 	adds.w	r2, ip, r2
 8000e94:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2a8>
 8000e9a:	4291      	cmp	r1, r2
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2a8>
 8000e9e:	3d02      	subs	r5, #2
 8000ea0:	4462      	add	r2, ip
 8000ea2:	1a52      	subs	r2, r2, r1
 8000ea4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0xfc>
 8000eaa:	4631      	mov	r1, r6
 8000eac:	4630      	mov	r0, r6
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xa2>
 8000eb0:	4639      	mov	r1, r7
 8000eb2:	e6e6      	b.n	8000c82 <__udivmoddi4+0x62>
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	e6fb      	b.n	8000cb0 <__udivmoddi4+0x90>
 8000eb8:	4548      	cmp	r0, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f0>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f0>
 8000ec8:	4645      	mov	r5, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x282>
 8000ecc:	462b      	mov	r3, r5
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1da>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x258>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b0>
 8000ed8:	3d02      	subs	r5, #2
 8000eda:	4462      	add	r2, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x124>
 8000ede:	4608      	mov	r0, r1
 8000ee0:	e70a      	b.n	8000cf8 <__udivmoddi4+0xd8>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x14e>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <AdapterSSD1306_Init>:
void AdapterSSD1306_SetDisplayColor(bool dark_mode);



void AdapterSSD1306_Init()
{
 8000eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eee:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000ef2:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8000ef4:	f021 fc16 	bl	8022724 <ssd1306_Init>
    AdapterSSD1306_SetDisplayColor(darkMode);
 8000ef8:	4b42      	ldr	r3, [pc, #264]	; (8001004 <AdapterSSD1306_Init+0x118>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f983 	bl	8001208 <AdapterSSD1306_SetDisplayColor>

    MenuData_t menuItems[NUM_MENU_PAGES] =
 8000f02:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000f06:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f240 2337 	movw	r3, #567	; 0x237
 8000f10:	461a      	mov	r2, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	f023 fa24 	bl	8024360 <memset>
 8000f18:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000f1c:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000f20:	4a39      	ldr	r2, [pc, #228]	; (8001008 <AdapterSSD1306_Init+0x11c>)
 8000f22:	461c      	mov	r4, r3
 8000f24:	4615      	mov	r5, r2
 8000f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f2e:	6020      	str	r0, [r4, #0]
 8000f30:	3404      	adds	r4, #4
 8000f32:	7021      	strb	r1, [r4, #0]
 8000f34:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000f38:	f5a3 750e 	sub.w	r5, r3, #568	; 0x238
 8000f3c:	4b33      	ldr	r3, [pc, #204]	; (800100c <AdapterSSD1306_Init+0x120>)
 8000f3e:	f105 0415 	add.w	r4, r5, #21
 8000f42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000f44:	6020      	str	r0, [r4, #0]
 8000f46:	6061      	str	r1, [r4, #4]
 8000f48:	60a2      	str	r2, [r4, #8]
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	81a3      	strh	r3, [r4, #12]
 8000f4e:	f105 0323 	add.w	r3, r5, #35	; 0x23
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	f8c3 2003 	str.w	r2, [r3, #3]
 8000f5a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000f5e:	f5a3 760e 	sub.w	r6, r3, #568	; 0x238
 8000f62:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <AdapterSSD1306_Init+0x124>)
 8000f64:	f106 042a 	add.w	r4, r6, #42	; 0x2a
 8000f68:	461d      	mov	r5, r3
 8000f6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f6c:	6020      	str	r0, [r4, #0]
 8000f6e:	6061      	str	r1, [r4, #4]
 8000f70:	60a2      	str	r2, [r4, #8]
 8000f72:	60e3      	str	r3, [r4, #12]
 8000f74:	f106 033a 	add.w	r3, r6, #58	; 0x3a
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	711a      	strb	r2, [r3, #4]
 8000f7e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000f82:	f5a3 750e 	sub.w	r5, r3, #568	; 0x238
 8000f86:	4b23      	ldr	r3, [pc, #140]	; (8001014 <AdapterSSD1306_Init+0x128>)
 8000f88:	f105 04bd 	add.w	r4, r5, #189	; 0xbd
 8000f8c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000f8e:	6020      	str	r0, [r4, #0]
 8000f90:	6061      	str	r1, [r4, #4]
 8000f92:	60a2      	str	r2, [r4, #8]
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	81a3      	strh	r3, [r4, #12]
 8000f98:	f105 03cb 	add.w	r3, r5, #203	; 0xcb
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	f8c3 2003 	str.w	r2, [r3, #3]
 8000fa4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000fa8:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000fac:	4a1a      	ldr	r2, [pc, #104]	; (8001018 <AdapterSSD1306_Init+0x12c>)
 8000fae:	f103 05d2 	add.w	r5, r3, #210	; 0xd2
 8000fb2:	4614      	mov	r4, r2
 8000fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb6:	6028      	str	r0, [r5, #0]
 8000fb8:	6069      	str	r1, [r5, #4]
 8000fba:	60aa      	str	r2, [r5, #8]
 8000fbc:	60eb      	str	r3, [r5, #12]
 8000fbe:	6820      	ldr	r0, [r4, #0]
 8000fc0:	6128      	str	r0, [r5, #16]
 8000fc2:	7923      	ldrb	r3, [r4, #4]
 8000fc4:	752b      	strb	r3, [r5, #20]
 8000fc6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000fca:	f5a3 760e 	sub.w	r6, r3, #568	; 0x238
 8000fce:	4b13      	ldr	r3, [pc, #76]	; (800101c <AdapterSSD1306_Init+0x130>)
 8000fd0:	f106 05e7 	add.w	r5, r6, #231	; 0xe7
 8000fd4:	461c      	mov	r4, r3
 8000fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd8:	6028      	str	r0, [r5, #0]
 8000fda:	6069      	str	r1, [r5, #4]
 8000fdc:	60aa      	str	r2, [r5, #8]
 8000fde:	60eb      	str	r3, [r5, #12]
 8000fe0:	8823      	ldrh	r3, [r4, #0]
 8000fe2:	822b      	strh	r3, [r5, #16]
 8000fe4:	f106 03f9 	add.w	r3, r6, #249	; 0xf9
 8000fe8:	2200      	movs	r2, #0
 8000fea:	801a      	strh	r2, [r3, #0]
 8000fec:	709a      	strb	r2, [r3, #2]
        {{"CFG:DC Port:0", "ROT:DC SUP:DC FAB:DC", "MODBUS_DRIVER 1.0"}} // Menu 2
        // Adicione mais menus aqui, se necessário
    };

    // Escreve as informações do menu no display
    AdapterSSD1306_WriteMenu( menuItems);
 8000fee:	463b      	mov	r3, r7
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 f957 	bl	80012a4 <AdapterSSD1306_WriteMenu>

    // Inicializa a tarefa de atualização do display
    AdapterSSD1306_InitUpdateTask();
 8000ff6:	f000 fad9 	bl	80015ac <AdapterSSD1306_InitUpdateTask>
}
 8000ffa:	bf00      	nop
 8000ffc:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 8001000:	46bd      	mov	sp, r7
 8001002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001004:	20000000 	.word	0x20000000
 8001008:	08026370 	.word	0x08026370
 800100c:	08026388 	.word	0x08026388
 8001010:	080263a0 	.word	0x080263a0
 8001014:	080263b8 	.word	0x080263b8
 8001018:	080263d0 	.word	0x080263d0
 800101c:	080263e8 	.word	0x080263e8

08001020 <AdapterSSD1306_LoadMenus>:


void AdapterSSD1306_LoadMenus()
{
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8001026:	af00      	add	r7, sp, #0

	AdapterSSD1306_SetDisplayColor(darkMode);
 8001028:	4b6c      	ldr	r3, [pc, #432]	; (80011dc <AdapterSSD1306_LoadMenus+0x1bc>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f000 f8eb 	bl	8001208 <AdapterSSD1306_SetDisplayColor>
  // Definição dos itens do menu
	MenuData_t menuItems[NUM_MENU_PAGES] =
 8001032:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001036:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800103a:	4618      	mov	r0, r3
 800103c:	f240 2337 	movw	r3, #567	; 0x237
 8001040:	461a      	mov	r2, r3
 8001042:	2100      	movs	r1, #0
 8001044:	f023 f98c 	bl	8024360 <memset>
 8001048:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800104c:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 8001050:	4b63      	ldr	r3, [pc, #396]	; (80011e0 <AdapterSSD1306_LoadMenus+0x1c0>)
 8001052:	462c      	mov	r4, r5
 8001054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001056:	c407      	stmia	r4!, {r0, r1, r2}
 8001058:	7023      	strb	r3, [r4, #0]
 800105a:	f105 030d 	add.w	r3, r5, #13
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001068:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 800106c:	4b5d      	ldr	r3, [pc, #372]	; (80011e4 <AdapterSSD1306_LoadMenus+0x1c4>)
 800106e:	f105 0415 	add.w	r4, r5, #21
 8001072:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001074:	6020      	str	r0, [r4, #0]
 8001076:	6061      	str	r1, [r4, #4]
 8001078:	60a2      	str	r2, [r4, #8]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	7323      	strb	r3, [r4, #12]
 800107e:	f105 0322 	add.w	r3, r5, #34	; 0x22
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800108c:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 8001090:	4b55      	ldr	r3, [pc, #340]	; (80011e8 <AdapterSSD1306_LoadMenus+0x1c8>)
 8001092:	f105 042a 	add.w	r4, r5, #42	; 0x2a
 8001096:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001098:	6020      	str	r0, [r4, #0]
 800109a:	6061      	str	r1, [r4, #4]
 800109c:	60a2      	str	r2, [r4, #8]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	7323      	strb	r3, [r4, #12]
 80010a2:	f105 0337 	add.w	r3, r5, #55	; 0x37
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80010b0:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 80010b4:	4b4d      	ldr	r3, [pc, #308]	; (80011ec <AdapterSSD1306_LoadMenus+0x1cc>)
 80010b6:	f105 04bd 	add.w	r4, r5, #189	; 0xbd
 80010ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 80010bc:	6020      	str	r0, [r4, #0]
 80010be:	6061      	str	r1, [r4, #4]
 80010c0:	60a2      	str	r2, [r4, #8]
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	81a3      	strh	r3, [r4, #12]
 80010c6:	f105 03cb 	add.w	r3, r5, #203	; 0xcb
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	f8c3 2003 	str.w	r2, [r3, #3]
 80010d2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80010d6:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 80010da:	4b45      	ldr	r3, [pc, #276]	; (80011f0 <AdapterSSD1306_LoadMenus+0x1d0>)
 80010dc:	f105 04d2 	add.w	r4, r5, #210	; 0xd2
 80010e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80010e2:	6020      	str	r0, [r4, #0]
 80010e4:	6061      	str	r1, [r4, #4]
 80010e6:	60a2      	str	r2, [r4, #8]
 80010e8:	f105 03de 	add.w	r3, r5, #222	; 0xde
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	721a      	strb	r2, [r3, #8]
 80010f4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80010f8:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 80010fc:	4b3d      	ldr	r3, [pc, #244]	; (80011f4 <AdapterSSD1306_LoadMenus+0x1d4>)
 80010fe:	f105 04e7 	add.w	r4, r5, #231	; 0xe7
 8001102:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001104:	6020      	str	r0, [r4, #0]
 8001106:	6061      	str	r1, [r4, #4]
 8001108:	60a2      	str	r2, [r4, #8]
 800110a:	f105 03f3 	add.w	r3, r5, #243	; 0xf3
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	721a      	strb	r2, [r3, #8]
 8001116:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800111a:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 800111e:	4b36      	ldr	r3, [pc, #216]	; (80011f8 <AdapterSSD1306_LoadMenus+0x1d8>)
 8001120:	f505 74bd 	add.w	r4, r5, #378	; 0x17a
 8001124:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001126:	6020      	str	r0, [r4, #0]
 8001128:	6061      	str	r1, [r4, #4]
 800112a:	60a2      	str	r2, [r4, #8]
 800112c:	881a      	ldrh	r2, [r3, #0]
 800112e:	789b      	ldrb	r3, [r3, #2]
 8001130:	81a2      	strh	r2, [r4, #12]
 8001132:	73a3      	strb	r3, [r4, #14]
 8001134:	f205 1389 	addw	r3, r5, #393	; 0x189
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	809a      	strh	r2, [r3, #4]
 800113e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001142:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 8001146:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <AdapterSSD1306_LoadMenus+0x1dc>)
 8001148:	f205 148f 	addw	r4, r5, #399	; 0x18f
 800114c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800114e:	6020      	str	r0, [r4, #0]
 8001150:	6061      	str	r1, [r4, #4]
 8001152:	60a2      	str	r2, [r4, #8]
 8001154:	881a      	ldrh	r2, [r3, #0]
 8001156:	789b      	ldrb	r3, [r3, #2]
 8001158:	81a2      	strh	r2, [r4, #12]
 800115a:	73a3      	strb	r3, [r4, #14]
 800115c:	f505 73cf 	add.w	r3, r5, #414	; 0x19e
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	809a      	strh	r2, [r3, #4]
 8001166:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800116a:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 800116e:	4b24      	ldr	r3, [pc, #144]	; (8001200 <AdapterSSD1306_LoadMenus+0x1e0>)
 8001170:	f505 74d2 	add.w	r4, r5, #420	; 0x1a4
 8001174:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001176:	c407      	stmia	r4!, {r0, r1, r2}
 8001178:	8023      	strh	r3, [r4, #0]
 800117a:	3402      	adds	r4, #2
 800117c:	0c1b      	lsrs	r3, r3, #16
 800117e:	7023      	strb	r3, [r4, #0]
 8001180:	f205 13b3 	addw	r3, r5, #435	; 0x1b3
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	809a      	strh	r2, [r3, #4]
		{{"ROT:Port:22000","SUP:Port:22001", "FAB:Port:22002"}}// Menu 2
		// Adicione mais menus aqui, se necessário
	};

	// Copiar os itens definidos para a estrutura menuDisplay
	for (int page = 0; page < NUM_MENU_PAGES; ++page)
 800118a:	2300      	movs	r3, #0
 800118c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8001190:	e018      	b.n	80011c4 <AdapterSSD1306_LoadMenus+0x1a4>
	{
		memcpy(menuDisplay.items[page], menuItems[page].items, sizeof(menuItems[page].items));
 8001192:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8001196:	4613      	mov	r3, r2
 8001198:	019b      	lsls	r3, r3, #6
 800119a:	1a9b      	subs	r3, r3, r2
 800119c:	4a19      	ldr	r2, [pc, #100]	; (8001204 <AdapterSSD1306_LoadMenus+0x1e4>)
 800119e:	1898      	adds	r0, r3, r2
 80011a0:	1d39      	adds	r1, r7, #4
 80011a2:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80011a6:	4613      	mov	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	4413      	add	r3, r2
 80011ac:	019a      	lsls	r2, r3, #6
 80011ae:	1ad2      	subs	r2, r2, r3
 80011b0:	188b      	adds	r3, r1, r2
 80011b2:	22bd      	movs	r2, #189	; 0xbd
 80011b4:	4619      	mov	r1, r3
 80011b6:	f023 f9f8 	bl	80245aa <memcpy>
	for (int page = 0; page < NUM_MENU_PAGES; ++page)
 80011ba:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80011be:	3301      	adds	r3, #1
 80011c0:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 80011c4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	dde2      	ble.n	8001192 <AdapterSSD1306_LoadMenus+0x172>
	}

	// Escreve as informações do menu no display
	AdapterSSD1306_WriteMenu(&menuDisplay);
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <AdapterSSD1306_LoadMenus+0x1e4>)
 80011ce:	f000 f869 	bl	80012a4 <AdapterSSD1306_WriteMenu>
}
 80011d2:	bf00      	nop
 80011d4:	f507 7710 	add.w	r7, r7, #576	; 0x240
 80011d8:	46bd      	mov	sp, r7
 80011da:	bdb0      	pop	{r4, r5, r7, pc}
 80011dc:	20000000 	.word	0x20000000
 80011e0:	08026400 	.word	0x08026400
 80011e4:	08026418 	.word	0x08026418
 80011e8:	08026430 	.word	0x08026430
 80011ec:	08026448 	.word	0x08026448
 80011f0:	08026460 	.word	0x08026460
 80011f4:	08026478 	.word	0x08026478
 80011f8:	08026490 	.word	0x08026490
 80011fc:	080264a8 	.word	0x080264a8
 8001200:	080264c0 	.word	0x080264c0
 8001204:	2000022c 	.word	0x2000022c

08001208 <AdapterSSD1306_SetDisplayColor>:




void AdapterSSD1306_SetDisplayColor(bool dark_mode)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
    darkMode = dark_mode;
 8001212:	4a0a      	ldr	r2, [pc, #40]	; (800123c <AdapterSSD1306_SetDisplayColor+0x34>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	7013      	strb	r3, [r2, #0]
    if (darkMode)
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <AdapterSSD1306_SetDisplayColor+0x34>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <AdapterSSD1306_SetDisplayColor+0x20>
    {
        ssd1306_Fill(Black);
 8001220:	2000      	movs	r0, #0
 8001222:	f021 fae7 	bl	80227f4 <ssd1306_Fill>
 8001226:	e002      	b.n	800122e <AdapterSSD1306_SetDisplayColor+0x26>
    }
    else
    {
        ssd1306_Fill(White);
 8001228:	2001      	movs	r0, #1
 800122a:	f021 fae3 	bl	80227f4 <ssd1306_Fill>
    }
    osDelay(50);
 800122e:	2032      	movs	r0, #50	; 0x32
 8001230:	f007 fcb6 	bl	8008ba0 <osDelay>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000000 	.word	0x20000000

08001240 <AdapterSSD1306_Refresh>:

void AdapterSSD1306_Refresh(uint16_t page, uint16_t line)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b0b2      	sub	sp, #200	; 0xc8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	460a      	mov	r2, r1
 800124a:	80fb      	strh	r3, [r7, #6]
 800124c:	4613      	mov	r3, r2
 800124e:	80bb      	strh	r3, [r7, #4]

	MenuData_t menu = { 0 };
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	22bd      	movs	r2, #189	; 0xbd
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f023 f881 	bl	8024360 <memset>

	snprintf(menu.items[page][line], sizeof(menu.items[page][line]),"                    ");
 800125e:	88f9      	ldrh	r1, [r7, #6]
 8001260:	88ba      	ldrh	r2, [r7, #4]
 8001262:	f107 0008 	add.w	r0, r7, #8
 8001266:	4613      	mov	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4413      	add	r3, r2
 800126c:	00da      	lsls	r2, r3, #3
 800126e:	1ad2      	subs	r2, r2, r3
 8001270:	460b      	mov	r3, r1
 8001272:	019b      	lsls	r3, r3, #6
 8001274:	1a5b      	subs	r3, r3, r1
 8001276:	4413      	add	r3, r2
 8001278:	4403      	add	r3, r0
 800127a:	4a09      	ldr	r2, [pc, #36]	; (80012a0 <AdapterSSD1306_Refresh+0x60>)
 800127c:	2115      	movs	r1, #21
 800127e:	4618      	mov	r0, r3
 8001280:	f022 ff18 	bl	80240b4 <sniprintf>

	portENTER_CRITICAL();
 8001284:	f00a fcae 	bl	800bbe4 <vPortEnterCritical>
	AdapterSSD1306_WriteMenu(&menu);
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	4618      	mov	r0, r3
 800128e:	f000 f809 	bl	80012a4 <AdapterSSD1306_WriteMenu>
	portEXIT_CRITICAL();
 8001292:	f00a fcd7 	bl	800bc44 <vPortExitCritical>
}
 8001296:	bf00      	nop
 8001298:	37c8      	adds	r7, #200	; 0xc8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	080264d8 	.word	0x080264d8

080012a4 <AdapterSSD1306_WriteMenu>:


void AdapterSSD1306_WriteMenu(const MenuData_t *menu_data)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
    // Limpa o display antes de escrever as novas informações
    // clear_display();

    // Escreve cada linha do menu no display
    int start_index = current_page * MENU_ITEMS_PER_PAGE;
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <AdapterSSD1306_WriteMenu+0x64>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
    int end_index = start_index + MENU_ITEMS_PER_PAGE;
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	3303      	adds	r3, #3
 80012bc:	60fb      	str	r3, [r7, #12]

    for (int i = start_index; i < end_index; i++)
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	e018      	b.n	80012f6 <AdapterSSD1306_WriteMenu+0x52>
    {
        AdapterSSD1306_WriteLine(menu_data->items[current_page][i - start_index], i - start_index);
 80012c4:	4b10      	ldr	r3, [pc, #64]	; (8001308 <AdapterSSD1306_WriteMenu+0x64>)
 80012c6:	6819      	ldr	r1, [r3, #0]
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad2      	subs	r2, r2, r3
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	00da      	lsls	r2, r3, #3
 80012d6:	1ad2      	subs	r2, r2, r3
 80012d8:	460b      	mov	r3, r1
 80012da:	019b      	lsls	r3, r3, #6
 80012dc:	1a5b      	subs	r3, r3, r1
 80012de:	4413      	add	r3, r2
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	18d0      	adds	r0, r2, r3
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	4619      	mov	r1, r3
 80012ec:	f000 f80e 	bl	800130c <AdapterSSD1306_WriteLine>
    for (int i = start_index; i < end_index; i++)
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3301      	adds	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dbe2      	blt.n	80012c4 <AdapterSSD1306_WriteMenu+0x20>
    }
    // Atualiza o display
    //update_display();
}
 80012fe:	bf00      	nop
 8001300:	bf00      	nop
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000224 	.word	0x20000224

0800130c <AdapterSSD1306_WriteLine>:

// Função para escrever uma linha do menu no display
void AdapterSSD1306_WriteLine(const char *text, int line_number)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
    // Define a posição vertical da linha baseada no número da linha
    int vertical_position = 2 + line_number * 10; // Ajuste conforme necessário
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	3302      	adds	r3, #2
 8001322:	60fb      	str	r3, [r7, #12]
    ssd1306_SetCursor(1, vertical_position);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	4619      	mov	r1, r3
 800132a:	2001      	movs	r0, #1
 800132c:	f021 fba4 	bl	8022a78 <ssd1306_SetCursor>

    if (darkMode)
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <AdapterSSD1306_WriteLine+0x54>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <AdapterSSD1306_WriteLine+0x3a>
    {
        ssd1306_WriteString(text, Font_6x8, White);
 8001338:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <AdapterSSD1306_WriteLine+0x58>)
 800133a:	2301      	movs	r3, #1
 800133c:	ca06      	ldmia	r2, {r1, r2}
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f021 fb74 	bl	8022a2c <ssd1306_WriteString>
 8001344:	e005      	b.n	8001352 <AdapterSSD1306_WriteLine+0x46>
    }
    else
    {
        ssd1306_WriteString(text, Font_6x8, Black);
 8001346:	4a07      	ldr	r2, [pc, #28]	; (8001364 <AdapterSSD1306_WriteLine+0x58>)
 8001348:	2300      	movs	r3, #0
 800134a:	ca06      	ldmia	r2, {r1, r2}
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f021 fb6d 	bl	8022a2c <ssd1306_WriteString>
    }

    ssd1306_UpdateScreen();
 8001352:	f021 fa67 	bl	8022824 <ssd1306_UpdateScreen>
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000000 	.word	0x20000000
 8001364:	20000038 	.word	0x20000038

08001368 <AdapterSSD1306_NextPage>:

void AdapterSSD1306_NextPage()
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
    current_page = (current_page + 1) % NUM_MENU_PAGES;
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <AdapterSSD1306_NextPage+0x34>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	1c59      	adds	r1, r3, #1
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <AdapterSSD1306_NextPage+0x38>)
 8001374:	fb83 3201 	smull	r3, r2, r3, r1
 8001378:	17cb      	asrs	r3, r1, #31
 800137a:	1ad2      	subs	r2, r2, r3
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	1aca      	subs	r2, r1, r3
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <AdapterSSD1306_NextPage+0x34>)
 8001386:	601a      	str	r2, [r3, #0]
    AdapterSSD1306_SetDisplayColor(darkMode);
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <AdapterSSD1306_NextPage+0x3c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff3b 	bl	8001208 <AdapterSSD1306_SetDisplayColor>
    AdapterSSD1306_WriteMenu(&menuDisplay);
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <AdapterSSD1306_NextPage+0x40>)
 8001394:	f7ff ff86 	bl	80012a4 <AdapterSSD1306_WriteMenu>
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000224 	.word	0x20000224
 80013a0:	55555556 	.word	0x55555556
 80013a4:	20000000 	.word	0x20000000
 80013a8:	2000022c 	.word	0x2000022c

080013ac <AdapterSSD1306_PreviousPage>:

void AdapterSSD1306_PreviousPage()
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
    current_page = (current_page - 1 + NUM_MENU_PAGES) % NUM_MENU_PAGES;
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <AdapterSSD1306_PreviousPage+0x34>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	1c99      	adds	r1, r3, #2
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <AdapterSSD1306_PreviousPage+0x38>)
 80013b8:	fb83 3201 	smull	r3, r2, r3, r1
 80013bc:	17cb      	asrs	r3, r1, #31
 80013be:	1ad2      	subs	r2, r2, r3
 80013c0:	4613      	mov	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4413      	add	r3, r2
 80013c6:	1aca      	subs	r2, r1, r3
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <AdapterSSD1306_PreviousPage+0x34>)
 80013ca:	601a      	str	r2, [r3, #0]
    AdapterSSD1306_SetDisplayColor(darkMode);
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <AdapterSSD1306_PreviousPage+0x3c>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff19 	bl	8001208 <AdapterSSD1306_SetDisplayColor>
    AdapterSSD1306_WriteMenu(&menuDisplay);
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <AdapterSSD1306_PreviousPage+0x40>)
 80013d8:	f7ff ff64 	bl	80012a4 <AdapterSSD1306_WriteMenu>
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000224 	.word	0x20000224
 80013e4:	55555556 	.word	0x55555556
 80013e8:	20000000 	.word	0x20000000
 80013ec:	2000022c 	.word	0x2000022c

080013f0 <AdapterSSD1306_DarkMode>:

void AdapterSSD1306_DarkMode(bool enable)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
    AdapterSSD1306_SetDisplayColor(enable);
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff03 	bl	8001208 <AdapterSSD1306_SetDisplayColor>
    AdapterSSD1306_WriteMenu(&menuDisplay);
 8001402:	4803      	ldr	r0, [pc, #12]	; (8001410 <AdapterSSD1306_DarkMode+0x20>)
 8001404:	f7ff ff4e 	bl	80012a4 <AdapterSSD1306_WriteMenu>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	2000022c 	.word	0x2000022c

08001414 <AdapterSSD1306_UpdateTask>:


void AdapterSSD1306_UpdateTask(void const *argument)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b0b2      	sub	sp, #200	; 0xc8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

	osDelay(2000);
 800141c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001420:	f007 fbbe 	bl	8008ba0 <osDelay>

	AdapterSSD1306_LoadMenus();
 8001424:	f7ff fdfc 	bl	8001020 <AdapterSSD1306_LoadMenus>
    MenuData_t receivedMenu = {0};
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	22bd      	movs	r2, #189	; 0xbd
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f022 ff95 	bl	8024360 <memset>

    while (1)
    {
        if (xQueueReceive(menuQueueHandle, &receivedMenu, portMAX_DELAY) == pdPASS)
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <AdapterSSD1306_UpdateTask+0x68>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f107 0108 	add.w	r1, r7, #8
 800143e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001442:	4618      	mov	r0, r3
 8001444:	f008 fa8c 	bl	8009960 <xQueueReceive>
 8001448:	4603      	mov	r3, r0
 800144a:	2b01      	cmp	r3, #1
 800144c:	d112      	bne.n	8001474 <AdapterSSD1306_UpdateTask+0x60>
        {
            if (AdapterSSD1306_RefreshDisplay(&receivedMenu, &menuDisplay))
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	490b      	ldr	r1, [pc, #44]	; (8001480 <AdapterSSD1306_UpdateTask+0x6c>)
 8001454:	4618      	mov	r0, r3
 8001456:	f000 f815 	bl	8001484 <AdapterSSD1306_RefreshDisplay>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d002      	beq.n	8001466 <AdapterSSD1306_UpdateTask+0x52>
            {
                AdapterSSD1306_WriteMenu(&menuDisplay);
 8001460:	4807      	ldr	r0, [pc, #28]	; (8001480 <AdapterSSD1306_UpdateTask+0x6c>)
 8001462:	f7ff ff1f 	bl	80012a4 <AdapterSSD1306_WriteMenu>
            }
            memset(&receivedMenu, 0, sizeof(MenuData_t));
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	22bd      	movs	r2, #189	; 0xbd
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f022 ff76 	bl	8024360 <memset>
        }
        osDelay(10);
 8001474:	200a      	movs	r0, #10
 8001476:	f007 fb93 	bl	8008ba0 <osDelay>
        if (xQueueReceive(menuQueueHandle, &receivedMenu, portMAX_DELAY) == pdPASS)
 800147a:	e7dc      	b.n	8001436 <AdapterSSD1306_UpdateTask+0x22>
 800147c:	20001190 	.word	0x20001190
 8001480:	2000022c 	.word	0x2000022c

08001484 <AdapterSSD1306_RefreshDisplay>:
    }
}

bool AdapterSSD1306_RefreshDisplay(MenuData_t *receivedMenu, MenuData_t *menuDisplay)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
    bool ret = false;
 800148e:	2300      	movs	r3, #0
 8001490:	75fb      	strb	r3, [r7, #23]
    // Verificar se receivedMenu e menuDisplay são válidos
    if (receivedMenu == NULL || menuDisplay == NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <AdapterSSD1306_RefreshDisplay+0x1a>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <AdapterSSD1306_RefreshDisplay+0x1e>
    {
        return ret; // Retorna sem fazer nada se algum deles for nulo
 800149e:	7dfb      	ldrb	r3, [r7, #23]
 80014a0:	e067      	b.n	8001572 <AdapterSSD1306_RefreshDisplay+0xee>
    }

    // Iterar sobre todas as páginas e itens do menu
    for (int i = 0; i < NUM_MENU_PAGES; ++i)
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	e060      	b.n	800156a <AdapterSSD1306_RefreshDisplay+0xe6>
    {
        for (int j = 0; j < MENU_ITEMS_PER_PAGE; ++j)
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	e057      	b.n	800155e <AdapterSSD1306_RefreshDisplay+0xda>
        {
            // Verificar se o índice está dentro dos limites do array
            if (i < NUM_MENU_PAGES && j < MENU_ITEMS_PER_PAGE)
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	dc51      	bgt.n	8001558 <AdapterSSD1306_RefreshDisplay+0xd4>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	dc4e      	bgt.n	8001558 <AdapterSSD1306_RefreshDisplay+0xd4>
            {
                // Verificar se o item atual difere do item recebido
                if (strcmp(menuDisplay->items[i][j], receivedMenu->items[i][j]) != 0)
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	4613      	mov	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	00da      	lsls	r2, r3, #3
 80014c4:	1ad2      	subs	r2, r2, r3
 80014c6:	6939      	ldr	r1, [r7, #16]
 80014c8:	460b      	mov	r3, r1
 80014ca:	019b      	lsls	r3, r3, #6
 80014cc:	1a5b      	subs	r3, r3, r1
 80014ce:	4413      	add	r3, r2
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	18d0      	adds	r0, r2, r3
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	4613      	mov	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4413      	add	r3, r2
 80014dc:	00da      	lsls	r2, r3, #3
 80014de:	1ad2      	subs	r2, r2, r3
 80014e0:	6939      	ldr	r1, [r7, #16]
 80014e2:	460b      	mov	r3, r1
 80014e4:	019b      	lsls	r3, r3, #6
 80014e6:	1a5b      	subs	r3, r3, r1
 80014e8:	4413      	add	r3, r2
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	f7fe fe6e 	bl	80001d0 <strcmp>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d02e      	beq.n	8001558 <AdapterSSD1306_RefreshDisplay+0xd4>
                {
                    // Se houver diferença, copiar o novo item para o menuDisplay
                    if (strcmp(receivedMenu->items[i][j], "") != 0)
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	00da      	lsls	r2, r3, #3
 8001504:	1ad2      	subs	r2, r2, r3
 8001506:	6939      	ldr	r1, [r7, #16]
 8001508:	460b      	mov	r3, r1
 800150a:	019b      	lsls	r3, r3, #6
 800150c:	1a5b      	subs	r3, r3, r1
 800150e:	4413      	add	r3, r2
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	4413      	add	r3, r2
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d01e      	beq.n	8001558 <AdapterSSD1306_RefreshDisplay+0xd4>
                    {
                        strcpy(menuDisplay->items[i][j], receivedMenu->items[i][j]);
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	00da      	lsls	r2, r3, #3
 8001524:	1ad2      	subs	r2, r2, r3
 8001526:	6939      	ldr	r1, [r7, #16]
 8001528:	460b      	mov	r3, r1
 800152a:	019b      	lsls	r3, r3, #6
 800152c:	1a5b      	subs	r3, r3, r1
 800152e:	4413      	add	r3, r2
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	18d0      	adds	r0, r2, r3
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	4613      	mov	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4413      	add	r3, r2
 800153c:	00da      	lsls	r2, r3, #3
 800153e:	1ad2      	subs	r2, r2, r3
 8001540:	6939      	ldr	r1, [r7, #16]
 8001542:	460b      	mov	r3, r1
 8001544:	019b      	lsls	r3, r3, #6
 8001546:	1a5b      	subs	r3, r3, r1
 8001548:	4413      	add	r3, r2
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f023 f823 	bl	802459a <strcpy>
                        ret = true;
 8001554:	2301      	movs	r3, #1
 8001556:	75fb      	strb	r3, [r7, #23]
        for (int j = 0; j < MENU_ITEMS_PER_PAGE; ++j)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	3301      	adds	r3, #1
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2b02      	cmp	r3, #2
 8001562:	dda4      	ble.n	80014ae <AdapterSSD1306_RefreshDisplay+0x2a>
    for (int i = 0; i < NUM_MENU_PAGES; ++i)
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	3301      	adds	r3, #1
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	2b02      	cmp	r3, #2
 800156e:	dd9b      	ble.n	80014a8 <AdapterSSD1306_RefreshDisplay+0x24>
                    }
                }
            }
        }
    }
    return ret;
 8001570:	7dfb      	ldrb	r3, [r7, #23]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <AdapterSSD1306_SendDataToMenuQueueUpdate>:

void AdapterSSD1306_SendDataToMenuQueueUpdate(const MenuData_t *menu_data)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
    // Tenta enviar os dados para a fila, aguardando até que haja espaço na fila
    if (xQueueSend(menuQueueHandle, menu_data, portMAX_DELAY) != pdPASS)
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <AdapterSSD1306_SendDataToMenuQueueUpdate+0x2c>)
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	2300      	movs	r3, #0
 800158a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	f007 ffc0 	bl	8009514 <xQueueGenericSend>
 8001594:	4603      	mov	r3, r0
 8001596:	2b01      	cmp	r3, #1
 8001598:	d002      	beq.n	80015a0 <AdapterSSD1306_SendDataToMenuQueueUpdate+0x24>
    {
        vTaskDelay(pdMS_TO_TICKS(50));
 800159a:	2032      	movs	r0, #50	; 0x32
 800159c:	f009 f806 	bl	800a5ac <vTaskDelay>
    }
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20001190 	.word	0x20001190

080015ac <AdapterSSD1306_InitUpdateTask>:

void AdapterSSD1306_InitUpdateTask()
{
 80015ac:	b5b0      	push	{r4, r5, r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
    /* definition and creation of tcpServerTask */
    osThreadDef(updateDisplayTask, AdapterSSD1306_UpdateTask, osPriorityBelowNormal, 0, UPDATE_DISPLAY_TASK_STACK_SIZE);
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <AdapterSSD1306_InitUpdateTask+0x30>)
 80015b4:	1d3c      	adds	r4, r7, #4
 80015b6:	461d      	mov	r5, r3
 80015b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    updateDisplayTaskHandle = osThreadCreate(osThread(updateDisplayTask), NULL);
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f007 fa9d 	bl	8008b08 <osThreadCreate>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4a03      	ldr	r2, [pc, #12]	; (80015e0 <AdapterSSD1306_InitUpdateTask+0x34>)
 80015d2:	6013      	str	r3, [r2, #0]
}
 80015d4:	bf00      	nop
 80015d6:	3720      	adds	r7, #32
 80015d8:	46bd      	mov	sp, r7
 80015da:	bdb0      	pop	{r4, r5, r7, pc}
 80015dc:	08026504 	.word	0x08026504
 80015e0:	20000228 	.word	0x20000228

080015e4 <FileSystemInit>:
 *         - Criação de diretórios;
 *         - Leitura do arquivo de configurações;
 * @retval Nonecfg
 */
int FileSystemInit()
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0

	  LOG2("Iniciando sistema de arquivos ... ");
 80015ea:	4838      	ldr	r0, [pc, #224]	; (80016cc <FileSystemInit+0xe8>)
 80015ec:	f022 fd5a 	bl	80240a4 <puts>

	  int status = lfs_storage_init(&cfg);
 80015f0:	4837      	ldr	r0, [pc, #220]	; (80016d0 <FileSystemInit+0xec>)
 80015f2:	f001 f9ff 	bl	80029f4 <lfs_storage_init>
 80015f6:	6078      	str	r0, [r7, #4]

	  if (!status)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d105      	bne.n	800160a <FileSystemInit+0x26>
	  {
		  LOG2( "erro: %i", status);
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	4834      	ldr	r0, [pc, #208]	; (80016d4 <FileSystemInit+0xf0>)
 8001602:	f022 fce9 	bl	8023fd8 <iprintf>
	    return status;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	e05c      	b.n	80016c4 <FileSystemInit+0xe0>
	  }

	  LOG2("File system start.");
 800160a:	4833      	ldr	r0, [pc, #204]	; (80016d8 <FileSystemInit+0xf4>)
 800160c:	f022 fd4a 	bl	80240a4 <puts>

  lfs_get_default_config(&cfg);
 8001610:	482f      	ldr	r0, [pc, #188]	; (80016d0 <FileSystemInit+0xec>)
 8001612:	f001 f9d9 	bl	80029c8 <lfs_get_default_config>

  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 8001616:	2300      	movs	r3, #0
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	e016      	b.n	800164a <FileSystemInit+0x66>
  {
    openFile[i].number = 0;
 800161c:	4a2f      	ldr	r2, [pc, #188]	; (80016dc <FileSystemInit+0xf8>)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	2158      	movs	r1, #88	; 0x58
 8001622:	fb01 f303 	mul.w	r3, r1, r3
 8001626:	4413      	add	r3, r2
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
    memset(&openFile[i].file, 0, sizeof(openFile[i].file));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	2258      	movs	r2, #88	; 0x58
 8001630:	fb02 f303 	mul.w	r3, r2, r3
 8001634:	4a29      	ldr	r2, [pc, #164]	; (80016dc <FileSystemInit+0xf8>)
 8001636:	4413      	add	r3, r2
 8001638:	3304      	adds	r3, #4
 800163a:	2254      	movs	r2, #84	; 0x54
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f022 fe8e 	bl	8024360 <memset>
  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	2b03      	cmp	r3, #3
 800164e:	dde5      	ble.n	800161c <FileSystemInit+0x38>
  }


  LOG2("Mount file system  ... ");
 8001650:	4823      	ldr	r0, [pc, #140]	; (80016e0 <FileSystemInit+0xfc>)
 8001652:	f022 fd27 	bl	80240a4 <puts>

  status = lfs_mount(&lfs, &cfg);
 8001656:	491e      	ldr	r1, [pc, #120]	; (80016d0 <FileSystemInit+0xec>)
 8001658:	4822      	ldr	r0, [pc, #136]	; (80016e4 <FileSystemInit+0x100>)
 800165a:	f010 fe81 	bl	8012360 <lfs_mount>
 800165e:	6078      	str	r0, [r7, #4]
  if (status)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d016      	beq.n	8001694 <FileSystemInit+0xb0>
  {
	  LOG2("erro: %i", status);
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	481a      	ldr	r0, [pc, #104]	; (80016d4 <FileSystemInit+0xf0>)
 800166a:	f022 fcb5 	bl	8023fd8 <iprintf>
    // Se sistema de arquivos corrompido
    if (status == LFS_ERR_CORRUPT)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8001674:	d10e      	bne.n	8001694 <FileSystemInit+0xb0>
    {
      // Formata o sistema de arquivos
    	LOG2("Format file system ... ");
 8001676:	481c      	ldr	r0, [pc, #112]	; (80016e8 <FileSystemInit+0x104>)
 8001678:	f022 fd14 	bl	80240a4 <puts>
      status = lfs_format(&lfs, &cfg);
 800167c:	4914      	ldr	r1, [pc, #80]	; (80016d0 <FileSystemInit+0xec>)
 800167e:	4819      	ldr	r0, [pc, #100]	; (80016e4 <FileSystemInit+0x100>)
 8001680:	f010 fe58 	bl	8012334 <lfs_format>
 8001684:	6078      	str	r0, [r7, #4]
      if (status)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <FileSystemInit+0xb0>
      {
    	  LOG2("erro: %d", status);
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	4817      	ldr	r0, [pc, #92]	; (80016ec <FileSystemInit+0x108>)
 8001690:	f022 fca2 	bl	8023fd8 <iprintf>
      }
    }
  }

  if (status == LFS_ERR_OK)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d113      	bne.n	80016c2 <FileSystemInit+0xde>
  {
	  LOG2("OK");
 800169a:	4815      	ldr	r0, [pc, #84]	; (80016f0 <FileSystemInit+0x10c>)
 800169c:	f022 fd02 	bl	80240a4 <puts>
    lfs_mounted = 1;
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <FileSystemInit+0x110>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	601a      	str	r2, [r3, #0]

    // Cria diretório de configurações
    lfs_mkdir(&lfs, FILESYSTEM_FOLDER_MAP);
 80016a6:	4914      	ldr	r1, [pc, #80]	; (80016f8 <FileSystemInit+0x114>)
 80016a8:	480e      	ldr	r0, [pc, #56]	; (80016e4 <FileSystemInit+0x100>)
 80016aa:	f010 ff77 	bl	801259c <lfs_mkdir>
    lfs_mkdir(&lfs, FILESYSTEM_FOLDER_CONFIG);
 80016ae:	4913      	ldr	r1, [pc, #76]	; (80016fc <FileSystemInit+0x118>)
 80016b0:	480c      	ldr	r0, [pc, #48]	; (80016e4 <FileSystemInit+0x100>)
 80016b2:	f010 ff73 	bl	801259c <lfs_mkdir>
    lfs_mkdir(&lfs,  FILESYSTEM_FOLDER_BOOTLOADER);
 80016b6:	4912      	ldr	r1, [pc, #72]	; (8001700 <FileSystemInit+0x11c>)
 80016b8:	480a      	ldr	r0, [pc, #40]	; (80016e4 <FileSystemInit+0x100>)
 80016ba:	f010 ff6f 	bl	801259c <lfs_mkdir>
    list_dir();
 80016be:	f000 f9f3 	bl	8001aa8 <list_dir>

  }

  return status;
 80016c2:	687b      	ldr	r3, [r7, #4]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	08026520 	.word	0x08026520
 80016d0:	2000fa28 	.word	0x2000fa28
 80016d4:	08026544 	.word	0x08026544
 80016d8:	08026550 	.word	0x08026550
 80016dc:	200002ec 	.word	0x200002ec
 80016e0:	08026564 	.word	0x08026564
 80016e4:	2000f9b0 	.word	0x2000f9b0
 80016e8:	08026580 	.word	0x08026580
 80016ec:	0802659c 	.word	0x0802659c
 80016f0:	080265a8 	.word	0x080265a8
 80016f4:	2000f9ac 	.word	0x2000f9ac
 80016f8:	080265ac 	.word	0x080265ac
 80016fc:	080265b0 	.word	0x080265b0
 8001700:	080265b4 	.word	0x080265b4

08001704 <__sflags>:
 * Return the (stdio) flags for a given mode.
 * Based on https://android.googlesource.com/platform/bionic/+/ics-mr0/libc/stdio/flags.c
 * Return 0 on error.
 */
static int __sflags(const char *mode)
{
 8001704:	b480      	push	{r7}
 8001706:	b087      	sub	sp, #28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  int ret, m, o;
  switch (*mode++)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b77      	cmp	r3, #119	; 0x77
 8001716:	d00a      	beq.n	800172e <__sflags+0x2a>
 8001718:	2b77      	cmp	r3, #119	; 0x77
 800171a:	dc14      	bgt.n	8001746 <__sflags+0x42>
 800171c:	2b61      	cmp	r3, #97	; 0x61
 800171e:	d00c      	beq.n	800173a <__sflags+0x36>
 8001720:	2b72      	cmp	r3, #114	; 0x72
 8001722:	d110      	bne.n	8001746 <__sflags+0x42>
  {
    case 'r': /* open for reading */
      m = LFS_O_RDONLY;
 8001724:	2301      	movs	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
      o = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
      break;
 800172c:	e010      	b.n	8001750 <__sflags+0x4c>
    case 'w': /* open for writing */
      m = LFS_O_WRONLY;
 800172e:	2302      	movs	r3, #2
 8001730:	617b      	str	r3, [r7, #20]
      o = LFS_O_CREAT | LFS_O_TRUNC;
 8001732:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001736:	613b      	str	r3, [r7, #16]
      break;
 8001738:	e00a      	b.n	8001750 <__sflags+0x4c>
    case 'a': /* open for appending */
      m = LFS_O_WRONLY;
 800173a:	2302      	movs	r3, #2
 800173c:	617b      	str	r3, [r7, #20]
      o = LFS_O_CREAT | LFS_O_APPEND;
 800173e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001742:	613b      	str	r3, [r7, #16]
      break;
 8001744:	e004      	b.n	8001750 <__sflags+0x4c>
    default: /* illegal mode */
      errno = EINVAL;
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <__sflags+0x80>)
 8001748:	2216      	movs	r2, #22
 800174a:	601a      	str	r2, [r3, #0]
      return (0);
 800174c:	2300      	movs	r3, #0
 800174e:	e013      	b.n	8001778 <__sflags+0x74>
  }
  /* [rwa]\+ or [rwa]b\+ means read and write */
  if (*mode == '+' || (*mode == 'b' && mode[1] == '+'))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b2b      	cmp	r3, #43	; 0x2b
 8001756:	d008      	beq.n	800176a <__sflags+0x66>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b62      	cmp	r3, #98	; 0x62
 800175e:	d106      	bne.n	800176e <__sflags+0x6a>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3301      	adds	r3, #1
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b2b      	cmp	r3, #43	; 0x2b
 8001768:	d101      	bne.n	800176e <__sflags+0x6a>
  {
    m = LFS_O_RDWR;
 800176a:	2303      	movs	r3, #3
 800176c:	617b      	str	r3, [r7, #20]
  }
  ret = m | o;
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
  return (ret);
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	371c      	adds	r7, #28
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	2001374c 	.word	0x2001374c

08001788 <file_open>:
 * @param  path  Ponteiro para a string contendo o path do arquivo
 * @param  mode  C string contendo o modo de acesso do arquivo
 * @retval file  Ponteiro para o struct de controle do arquivo
 */
FILE_POINTER file_open(const char *path, const char *mode)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  int flags;
  int count = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]

  if (openFilesCount >= MAX_OPEN_FILES)
 8001796:	4b3b      	ldr	r3, [pc, #236]	; (8001884 <file_open+0xfc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b03      	cmp	r3, #3
 800179c:	dd01      	ble.n	80017a2 <file_open+0x1a>
    return NULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	e06c      	b.n	800187c <file_open+0xf4>

  if ((flags = __sflags(mode)) == 0)
 80017a2:	6838      	ldr	r0, [r7, #0]
 80017a4:	f7ff ffae 	bl	8001704 <__sflags>
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <file_open+0x2c>
    return (NULL);
 80017b0:	2300      	movs	r3, #0
 80017b2:	e063      	b.n	800187c <file_open+0xf4>

  // Remove line feed and carriage return from path
  char *pchar = (char*)path;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	613b      	str	r3, [r7, #16]
  while (*pchar != 0)
 80017b8:	e00d      	b.n	80017d6 <file_open+0x4e>
  {
    if ((*pchar == '\r') || (*pchar == '\n'))
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b0d      	cmp	r3, #13
 80017c0:	d003      	beq.n	80017ca <file_open+0x42>
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b0a      	cmp	r3, #10
 80017c8:	d102      	bne.n	80017d0 <file_open+0x48>
      *pchar = 0;
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
    pchar++;
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	3301      	adds	r3, #1
 80017d4:	613b      	str	r3, [r7, #16]
  while (*pchar != 0)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1ed      	bne.n	80017ba <file_open+0x32>
  }

  // Create a entry for the file in openFile structure
  for (count = 0; count < MAX_OPEN_FILES; ++count)
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	e018      	b.n	8001816 <file_open+0x8e>
  {
    if (openFile[count].number == 0)
 80017e4:	4a28      	ldr	r2, [pc, #160]	; (8001888 <file_open+0x100>)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	2158      	movs	r1, #88	; 0x58
 80017ea:	fb01 f303 	mul.w	r3, r1, r3
 80017ee:	4413      	add	r3, r2
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10c      	bne.n	8001810 <file_open+0x88>
    {
      openFile[count].number = openFilesCount++;
 80017f6:	4b23      	ldr	r3, [pc, #140]	; (8001884 <file_open+0xfc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	4921      	ldr	r1, [pc, #132]	; (8001884 <file_open+0xfc>)
 80017fe:	600a      	str	r2, [r1, #0]
 8001800:	4921      	ldr	r1, [pc, #132]	; (8001888 <file_open+0x100>)
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	2058      	movs	r0, #88	; 0x58
 8001806:	fb00 f202 	mul.w	r2, r0, r2
 800180a:	440a      	add	r2, r1
 800180c:	6013      	str	r3, [r2, #0]
      break;
 800180e:	e005      	b.n	800181c <file_open+0x94>
  for (count = 0; count < MAX_OPEN_FILES; ++count)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	3301      	adds	r3, #1
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	2b03      	cmp	r3, #3
 800181a:	dde3      	ble.n	80017e4 <file_open+0x5c>
    }
  }

  int status = lfs_file_open(&lfs, &(openFile[count].file), path, flags);
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	2258      	movs	r2, #88	; 0x58
 8001820:	fb02 f303 	mul.w	r3, r2, r3
 8001824:	4a18      	ldr	r2, [pc, #96]	; (8001888 <file_open+0x100>)
 8001826:	4413      	add	r3, r2
 8001828:	1d19      	adds	r1, r3, #4
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	4817      	ldr	r0, [pc, #92]	; (800188c <file_open+0x104>)
 8001830:	f010 fdc4 	bl	80123bc <lfs_file_open>
 8001834:	60b8      	str	r0, [r7, #8]

  if (status != LFS_ERR_OK)
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d013      	beq.n	8001864 <file_open+0xdc>
  {
    openFile[count].number = 0;
 800183c:	4a12      	ldr	r2, [pc, #72]	; (8001888 <file_open+0x100>)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	2158      	movs	r1, #88	; 0x58
 8001842:	fb01 f303 	mul.w	r3, r1, r3
 8001846:	4413      	add	r3, r2
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
    openFilesCount--;
 800184c:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <file_open+0xfc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	3b01      	subs	r3, #1
 8001852:	4a0c      	ldr	r2, [pc, #48]	; (8001884 <file_open+0xfc>)
 8001854:	6013      	str	r3, [r2, #0]
    LOG2("Error lfs_file_open - file %s - ret = %i", path, status);
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	480d      	ldr	r0, [pc, #52]	; (8001890 <file_open+0x108>)
 800185c:	f022 fbbc 	bl	8023fd8 <iprintf>
    return NULL;
 8001860:	2300      	movs	r3, #0
 8001862:	e00b      	b.n	800187c <file_open+0xf4>
  }

  LOG2("lfs_file_open - file %s - ret = %i", path, status);
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	480a      	ldr	r0, [pc, #40]	; (8001894 <file_open+0x10c>)
 800186a:	f022 fbb5 	bl	8023fd8 <iprintf>
  return &openFile[count].file;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2258      	movs	r2, #88	; 0x58
 8001872:	fb02 f303 	mul.w	r3, r2, r3
 8001876:	4a04      	ldr	r2, [pc, #16]	; (8001888 <file_open+0x100>)
 8001878:	4413      	add	r3, r2
 800187a:	3304      	adds	r3, #4
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	2000044c 	.word	0x2000044c
 8001888:	200002ec 	.word	0x200002ec
 800188c:	2000f9b0 	.word	0x2000f9b0
 8001890:	080266f8 	.word	0x080266f8
 8001894:	08026724 	.word	0x08026724

08001898 <file_close>:
 * @brief  Função de fechamento do arquivo
 * @param  file Ponteiro para o struct de controle do arquivo
 * @retval int  Status da operação
 */
int file_close(FILE_POINTER file)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  //***FS_Flush(lfs, file);
  int status = lfs_file_close(&lfs, file);
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4821      	ldr	r0, [pc, #132]	; (8001928 <file_close+0x90>)
 80018a4:	f010 fdbe 	bl	8012424 <lfs_file_close>
 80018a8:	60b8      	str	r0, [r7, #8]

  // Delete the entry assigned to file in openFile structure
  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	e021      	b.n	80018f4 <file_close+0x5c>
  {
    if (&(openFile[i].file) == file)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2258      	movs	r2, #88	; 0x58
 80018b4:	fb02 f303 	mul.w	r3, r2, r3
 80018b8:	4a1c      	ldr	r2, [pc, #112]	; (800192c <file_close+0x94>)
 80018ba:	4413      	add	r3, r2
 80018bc:	3304      	adds	r3, #4
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d114      	bne.n	80018ee <file_close+0x56>
    {
      openFile[i].number = 0;
 80018c4:	4a19      	ldr	r2, [pc, #100]	; (800192c <file_close+0x94>)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2158      	movs	r1, #88	; 0x58
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
      memset(&openFile[i].file, 0, sizeof(openFile[i].file));
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2258      	movs	r2, #88	; 0x58
 80018d8:	fb02 f303 	mul.w	r3, r2, r3
 80018dc:	4a13      	ldr	r2, [pc, #76]	; (800192c <file_close+0x94>)
 80018de:	4413      	add	r3, r2
 80018e0:	3304      	adds	r3, #4
 80018e2:	2254      	movs	r2, #84	; 0x54
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f022 fd3a 	bl	8024360 <memset>
      break;
 80018ec:	e005      	b.n	80018fa <file_close+0x62>
  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3301      	adds	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	ddda      	ble.n	80018b0 <file_close+0x18>
    }
  }

  if (status != LFS_ERR_OK)
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <file_close+0x74>
  {
	  LOG2("Erro lfs_file_close - ret = %i", status);
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	480b      	ldr	r0, [pc, #44]	; (8001930 <file_close+0x98>)
 8001904:	f022 fb68 	bl	8023fd8 <iprintf>
    return status;
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	e009      	b.n	8001920 <file_close+0x88>
  }

  openFilesCount--;
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <file_close+0x9c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	3b01      	subs	r3, #1
 8001912:	4a08      	ldr	r2, [pc, #32]	; (8001934 <file_close+0x9c>)
 8001914:	6013      	str	r3, [r2, #0]
  LOG2("lfs_file_close - ret = %i",
 8001916:	68b9      	ldr	r1, [r7, #8]
 8001918:	4807      	ldr	r0, [pc, #28]	; (8001938 <file_close+0xa0>)
 800191a:	f022 fb5d 	bl	8023fd8 <iprintf>
            status);
  return status;
 800191e:	68bb      	ldr	r3, [r7, #8]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	2000f9b0 	.word	0x2000f9b0
 800192c:	200002ec 	.word	0x200002ec
 8001930:	0802674c 	.word	0x0802674c
 8001934:	2000044c 	.word	0x2000044c
 8001938:	08026770 	.word	0x08026770

0800193c <file_read>:
 * @param  size Quantidade de bytes solicitados para leitura
 * @param  count Quantidade de leituras
 * @retval int  Quantidade de bytes lidos
 */
size_t file_read(void *ptr, size_t size, size_t count, FILE_POINTER file)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	603b      	str	r3, [r7, #0]
  lfs_ssize_t qtdBytes = lfs_file_read(&lfs, file, ptr, size * count);
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	fb02 f303 	mul.w	r3, r2, r3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	6839      	ldr	r1, [r7, #0]
 8001956:	480f      	ldr	r0, [pc, #60]	; (8001994 <file_read+0x58>)
 8001958:	f010 fd90 	bl	801247c <lfs_file_read>
 800195c:	6178      	str	r0, [r7, #20]
  if (qtdBytes < 0)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2b00      	cmp	r3, #0
 8001962:	da05      	bge.n	8001970 <file_read+0x34>
  {
	  LOG2("Erro lfs_file_read - ret = %li", qtdBytes);
 8001964:	6979      	ldr	r1, [r7, #20]
 8001966:	480c      	ldr	r0, [pc, #48]	; (8001998 <file_read+0x5c>)
 8001968:	f022 fb36 	bl	8023fd8 <iprintf>
    return 0;
 800196c:	2300      	movs	r3, #0
 800196e:	e00c      	b.n	800198a <file_read+0x4e>

  }
  if (qtdBytes != (size * count))
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	fb03 f202 	mul.w	r2, r3, r2
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	429a      	cmp	r2, r3
 800197c:	d004      	beq.n	8001988 <file_read+0x4c>
  {
	  LOG2("Erro lfs_file_read - Quantidade de bytes lidos (%li) diferente do solicitado (%li)", qtdBytes, size);
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	6979      	ldr	r1, [r7, #20]
 8001982:	4806      	ldr	r0, [pc, #24]	; (800199c <file_read+0x60>)
 8001984:	f022 fb28 	bl	8023fd8 <iprintf>
  }
  return qtdBytes;
 8001988:	697b      	ldr	r3, [r7, #20]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2000f9b0 	.word	0x2000f9b0
 8001998:	0802678c 	.word	0x0802678c
 800199c:	080267b0 	.word	0x080267b0

080019a0 <file_write>:
 * @param  path Ponteiro para o buffer que receberá os dados escritos
 * @param  size Quantidade de bytes solicitados para escrita
 * @retval int  Quantidade de bytes escritos
 */
size_t file_write(const void *ptr, lfs_size_t size, size_t count, FILE_POINTER file)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	603b      	str	r3, [r7, #0]
  lfs_ssize_t qtdBytes = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  if (file->flags & (LFS_O_RDWR | LFS_O_APPEND | LFS_O_WRONLY))     // Verifica o status da flag do arquivo aberto
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019b6:	f640 0303 	movw	r3, #2051	; 0x803
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d01f      	beq.n	8001a00 <file_write+0x60>
  {
    qtdBytes = lfs_file_write(&lfs, file, ptr, size * count);
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	fb02 f303 	mul.w	r3, r2, r3
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	6839      	ldr	r1, [r7, #0]
 80019cc:	4813      	ldr	r0, [pc, #76]	; (8001a1c <file_write+0x7c>)
 80019ce:	f010 fd85 	bl	80124dc <lfs_file_write>
 80019d2:	6178      	str	r0, [r7, #20]
    if (qtdBytes < 0)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	da05      	bge.n	80019e6 <file_write+0x46>
    {
    	LOG2("Erro lfs_file_write - ret = %li", qtdBytes);
 80019da:	6979      	ldr	r1, [r7, #20]
 80019dc:	4810      	ldr	r0, [pc, #64]	; (8001a20 <file_write+0x80>)
 80019de:	f022 fafb 	bl	8023fd8 <iprintf>
      return 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e016      	b.n	8001a14 <file_write+0x74>
    }
    if (qtdBytes != (size * count))
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	fb03 f202 	mul.w	r2, r3, r2
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d00b      	beq.n	8001a0c <file_write+0x6c>
    {
    	LOG2("Erro lfs_file_write - Quantidade de bytes escritos (%li) diferente do solicitado (%li)",
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	6979      	ldr	r1, [r7, #20]
 80019f8:	480a      	ldr	r0, [pc, #40]	; (8001a24 <file_write+0x84>)
 80019fa:	f022 faed 	bl	8023fd8 <iprintf>
 80019fe:	e005      	b.n	8001a0c <file_write+0x6c>
    }
  }
  else
  {
    // Caso o arquivo não seja compativel com a operação requerida, apenas informa que não foi executado
	  LOG2("Arquivo não alterado, flag do file [ 0x%lx ]", file->flags);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	4619      	mov	r1, r3
 8001a06:	4808      	ldr	r0, [pc, #32]	; (8001a28 <file_write+0x88>)
 8001a08:	f022 fae6 	bl	8023fd8 <iprintf>
  }
  return (size_t)(qtdBytes / size);
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	2000f9b0 	.word	0x2000f9b0
 8001a20:	08026808 	.word	0x08026808
 8001a24:	0802682c 	.word	0x0802682c
 8001a28:	08026888 	.word	0x08026888

08001a2c <file_exists>:
 * @brief verifica a existencia do path de arquivo ou diretório
 * @param path  Ponteiro para a string contendo o path do arquivo ou diretório
 * @return int  Status da operação
 */
int file_exists(const char *path)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b0c6      	sub	sp, #280	; 0x118
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a36:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a3a:	6018      	str	r0, [r3, #0]
  struct lfs_info info;

  // Remove line feed and carriage return from path
  char *pchar = (char*)path;
 8001a3c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a40:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  while (*pchar != 0)
 8001a4a:	e012      	b.n	8001a72 <file_exists+0x46>
  {
    if ((*pchar == '\r') || (*pchar == '\n'))
 8001a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b0d      	cmp	r3, #13
 8001a54:	d004      	beq.n	8001a60 <file_exists+0x34>
 8001a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b0a      	cmp	r3, #10
 8001a5e:	d103      	bne.n	8001a68 <file_exists+0x3c>
      *pchar = 0;
 8001a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
    pchar++;
 8001a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  while (*pchar != 0)
 8001a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1e7      	bne.n	8001a4c <file_exists+0x20>
  }

  int status = lfs_stat(&lfs, path, &info);
 8001a7c:	f107 0208 	add.w	r2, r7, #8
 8001a80:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a84:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a88:	6819      	ldr	r1, [r3, #0]
 8001a8a:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <file_exists+0x78>)
 8001a8c:	f010 fc7e 	bl	801238c <lfs_stat>
 8001a90:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  return status;
 8001a94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	2000f9b0 	.word	0x2000f9b0

08001aa8 <list_dir>:



int list_dir()

{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b0d2      	sub	sp, #328	; 0x148
 8001aac:	af00      	add	r7, sp, #0
	lfs_dir_t dir;
	struct lfs_info info;
	const char *path = "/"; // O caminho do diretório raiz ou outro caminho que deseja listar
 8001aae:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <list_dir+0x88>)
 8001ab0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

	// Abra o diretório
	int err = lfs_dir_open(&lfs, &dir, path);
 8001ab4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001ab8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001abc:	4619      	mov	r1, r3
 8001abe:	481d      	ldr	r0, [pc, #116]	; (8001b34 <list_dir+0x8c>)
 8001ac0:	f010 fd82 	bl	80125c8 <lfs_dir_open>
 8001ac4:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
	if (err)
 8001ac8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <list_dir+0x34>
	{
		printf("Erro ao abrir o diretório: %d\r\n", err);
 8001ad0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001ad4:	4818      	ldr	r0, [pc, #96]	; (8001b38 <list_dir+0x90>)
 8001ad6:	f022 fa7f 	bl	8023fd8 <iprintf>
 8001ada:	e022      	b.n	8001b22 <list_dir+0x7a>
	}
	else
	{
		printf("Listando diretórios em: %s \r\n", path);
 8001adc:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001ae0:	4816      	ldr	r0, [pc, #88]	; (8001b3c <list_dir+0x94>)
 8001ae2:	f022 fa79 	bl	8023fd8 <iprintf>

		// Leia as entradas no diretório
		while (lfs_dir_read(&lfs, &dir, &info) > 0)
 8001ae6:	e00c      	b.n	8001b02 <list_dir+0x5a>
		{
			if (info.type == LFS_TYPE_DIR)
 8001ae8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001aec:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d105      	bne.n	8001b02 <list_dir+0x5a>
			{
				printf("%s \r\n", info.name);
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	3308      	adds	r3, #8
 8001afa:	4619      	mov	r1, r3
 8001afc:	4810      	ldr	r0, [pc, #64]	; (8001b40 <list_dir+0x98>)
 8001afe:	f022 fa6b 	bl	8023fd8 <iprintf>
		while (lfs_dir_read(&lfs, &dir, &info) > 0)
 8001b02:	1d3a      	adds	r2, r7, #4
 8001b04:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001b08:	4619      	mov	r1, r3
 8001b0a:	480a      	ldr	r0, [pc, #40]	; (8001b34 <list_dir+0x8c>)
 8001b0c:	f010 fda4 	bl	8012658 <lfs_dir_read>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	dce8      	bgt.n	8001ae8 <list_dir+0x40>
			}
		}

		// Feche o diretório
		// Feche o diretório
		lfs_dir_close(&lfs, &dir);
 8001b16:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4805      	ldr	r0, [pc, #20]	; (8001b34 <list_dir+0x8c>)
 8001b1e:	f010 fd85 	bl	801262c <lfs_dir_close>
	}

}
 8001b22:	bf00      	nop
 8001b24:	4618      	mov	r0, r3
 8001b26:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	080268b8 	.word	0x080268b8
 8001b34:	2000f9b0 	.word	0x2000f9b0
 8001b38:	080268bc 	.word	0x080268bc
 8001b3c:	080268e0 	.word	0x080268e0
 8001b40:	08026900 	.word	0x08026900

08001b44 <file_size>:
 * @brief return file size
 * @param file  point to file
 * @return  file size or error (negative value)
 */
int file_size(FILE_POINTER file)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  int status;
  if ((status = lfs_file_seek(&lfs, file, 0, LFS_SEEK_CUR)) < 0)
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	2200      	movs	r2, #0
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4811      	ldr	r0, [pc, #68]	; (8001b98 <file_size+0x54>)
 8001b54:	f010 fcf2 	bl	801253c <lfs_file_seek>
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	da01      	bge.n	8001b64 <file_size+0x20>
    return status;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	e014      	b.n	8001b8e <file_size+0x4a>
  int currentPosition = status;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	60bb      	str	r3, [r7, #8]
  if ((status = lfs_file_seek(&lfs, file, 0, LFS_SEEK_END)) < 0)
 8001b68:	2302      	movs	r3, #2
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	480a      	ldr	r0, [pc, #40]	; (8001b98 <file_size+0x54>)
 8001b70:	f010 fce4 	bl	801253c <lfs_file_seek>
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	da01      	bge.n	8001b80 <file_size+0x3c>
    return status;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	e006      	b.n	8001b8e <file_size+0x4a>
  lfs_file_seek(&lfs, file, currentPosition, LFS_SEEK_SET);
 8001b80:	2300      	movs	r3, #0
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4804      	ldr	r0, [pc, #16]	; (8001b98 <file_size+0x54>)
 8001b88:	f010 fcd8 	bl	801253c <lfs_file_seek>
  return status;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	2000f9b0 	.word	0x2000f9b0

08001b9c <CfgFiles_getBuffer>:
 * @fn uint8_t *CfgFiles_getBuffer()
 * @brief function to get a buffer address to be used
 * @return return the buffer pointer to be used
 */
uint8_t *CfgFiles_getBuffer()
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
  for (int count = 0; count < sizeof(Cfg_buffers) / sizeof(Cfg_buffers[0]); count++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	e02b      	b.n	8001c00 <CfgFiles_getBuffer+0x64>
  {
    if (!Cfg_buffers[count].busy)
 8001ba8:	4919      	ldr	r1, [pc, #100]	; (8001c10 <CfgFiles_getBuffer+0x74>)
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	02db      	lsls	r3, r3, #11
 8001bb0:	4413      	add	r3, r2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	f083 0301 	eor.w	r3, r3, #1
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d01c      	beq.n	8001bfa <CfgFiles_getBuffer+0x5e>
    {
      Cfg_buffers[count].busy = true;
 8001bc0:	4913      	ldr	r1, [pc, #76]	; (8001c10 <CfgFiles_getBuffer+0x74>)
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	02db      	lsls	r3, r3, #11
 8001bc8:	4413      	add	r3, r2
 8001bca:	440b      	add	r3, r1
 8001bcc:	2201      	movs	r2, #1
 8001bce:	701a      	strb	r2, [r3, #0]
      memset(Cfg_buffers[count].buffer, 0, sizeof(Cfg_buffers[count].buffer)/sizeof(Cfg_buffers[count].buffer[0]));
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	02db      	lsls	r3, r3, #11
 8001bd6:	4413      	add	r3, r2
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	; (8001c10 <CfgFiles_getBuffer+0x74>)
 8001bda:	4413      	add	r3, r2
 8001bdc:	3301      	adds	r3, #1
 8001bde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f022 fbbb 	bl	8024360 <memset>
      return Cfg_buffers[count].buffer;
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	02db      	lsls	r3, r3, #11
 8001bf0:	4413      	add	r3, r2
 8001bf2:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <CfgFiles_getBuffer+0x74>)
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	e006      	b.n	8001c08 <CfgFiles_getBuffer+0x6c>
  for (int count = 0; count < sizeof(Cfg_buffers) / sizeof(Cfg_buffers[0]); count++)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0d0      	beq.n	8001ba8 <CfgFiles_getBuffer+0xc>
    }
  }
  return NULL;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	200008cc 	.word	0x200008cc

08001c14 <CfgFiles_freeBuffer>:
 * @fn void CfgFiles_freeBuffer(uint8_t *)
 * @brief free a specific buffer to be used latter
 * @param buf buffer pointer to be freed
 */
void CfgFiles_freeBuffer(uint8_t *buf)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  for (int count = 0;count < sizeof(Cfg_buffers)/sizeof(Cfg_buffers[0]); count++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	e015      	b.n	8001c4e <CfgFiles_freeBuffer+0x3a>
  {
    if (buf == &(Cfg_buffers[count].buffer[0]))
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4613      	mov	r3, r2
 8001c26:	02db      	lsls	r3, r3, #11
 8001c28:	4413      	add	r3, r2
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <CfgFiles_freeBuffer+0x50>)
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3301      	adds	r3, #1
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d108      	bne.n	8001c48 <CfgFiles_freeBuffer+0x34>
    {
      Cfg_buffers[count].busy = false;
 8001c36:	490b      	ldr	r1, [pc, #44]	; (8001c64 <CfgFiles_freeBuffer+0x50>)
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	02db      	lsls	r3, r3, #11
 8001c3e:	4413      	add	r3, r2
 8001c40:	440b      	add	r3, r1
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
      break;
 8001c46:	e006      	b.n	8001c56 <CfgFiles_freeBuffer+0x42>
  for (int count = 0;count < sizeof(Cfg_buffers)/sizeof(Cfg_buffers[0]); count++)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0e6      	beq.n	8001c22 <CfgFiles_freeBuffer+0xe>
    }
  }
}
 8001c54:	bf00      	nop
 8001c56:	bf00      	nop
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	200008cc 	.word	0x200008cc

08001c68 <CfgFiles_cleanBuffers>:
/**
 * @fn void CfgFiles_cleanBuffers()
 * @brief clean all buffers that are used for read/write on file
 */
void CfgFiles_cleanBuffers()
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
  for (int count = 0;count < sizeof(Cfg_buffers)/sizeof(Cfg_buffers[0]); count++)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	e017      	b.n	8001ca4 <CfgFiles_cleanBuffers+0x3c>
  {
    Cfg_buffers[count].busy = false;
 8001c74:	490f      	ldr	r1, [pc, #60]	; (8001cb4 <CfgFiles_cleanBuffers+0x4c>)
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	02db      	lsls	r3, r3, #11
 8001c7c:	4413      	add	r3, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
    memset(Cfg_buffers[count].buffer, 0, sizeof(Cfg_buffers[count].buffer)/sizeof(Cfg_buffers[count].buffer[0]));
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	02db      	lsls	r3, r3, #11
 8001c8a:	4413      	add	r3, r2
 8001c8c:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <CfgFiles_cleanBuffers+0x4c>)
 8001c8e:	4413      	add	r3, r2
 8001c90:	3301      	adds	r3, #1
 8001c92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f022 fb61 	bl	8024360 <memset>
  for (int count = 0;count < sizeof(Cfg_buffers)/sizeof(Cfg_buffers[0]); count++)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0e4      	beq.n	8001c74 <CfgFiles_cleanBuffers+0xc>
  }
}
 8001caa:	bf00      	nop
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	200008cc 	.word	0x200008cc

08001cb8 <CfgFilesGeFilePathByIndex>:
 * @param  fileName Pointer to file name output
 * @retval  True: Success
 * @retval  False: Fail
 */
bool CfgFilesGeFilePathByIndex(uint16_t fileIndex, char *fileName)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	80fb      	strh	r3, [r7, #6]
  if ((fileIndex < TOTAL_CFG_FILES) && (fileName))
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d81c      	bhi.n	8001d04 <CfgFilesGeFilePathByIndex+0x4c>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d019      	beq.n	8001d04 <CfgFilesGeFilePathByIndex+0x4c>
  {
    strcat (fileName,(char*) &listCfgFiles[fileIndex].dirPath);
 8001cd0:	88fa      	ldrh	r2, [r7, #6]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	1a9b      	subs	r3, r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	3328      	adds	r3, #40	; 0x28
 8001cdc:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <CfgFilesGeFilePathByIndex+0x58>)
 8001cde:	4413      	add	r3, r2
 8001ce0:	3305      	adds	r3, #5
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	6838      	ldr	r0, [r7, #0]
 8001ce6:	f022 fb43 	bl	8024370 <strcat>
    strcat(fileName, (char*) &listCfgFiles [fileIndex].name);
 8001cea:	88fa      	ldrh	r2, [r7, #6]
 8001cec:	4613      	mov	r3, r2
 8001cee:	011b      	lsls	r3, r3, #4
 8001cf0:	1a9b      	subs	r3, r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4a06      	ldr	r2, [pc, #24]	; (8001d10 <CfgFilesGeFilePathByIndex+0x58>)
 8001cf6:	4413      	add	r3, r2
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	6838      	ldr	r0, [r7, #0]
 8001cfc:	f022 fb38 	bl	8024370 <strcat>
    return (true);
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <CfgFilesGeFilePathByIndex+0x4e>
  }
  return (false);
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200010d0 	.word	0x200010d0

08001d14 <SetListCfgFile>:


static void SetListCfgFile(int fileIndex, const char *fileName, const char *dirName, void *fileMessage)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	603b      	str	r3, [r7, #0]
  strcpy(listCfgFiles [fileIndex].name, fileName);
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4613      	mov	r3, r2
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	1a9b      	subs	r3, r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4a11      	ldr	r2, [pc, #68]	; (8001d74 <SetListCfgFile+0x60>)
 8001d2e:	4413      	add	r3, r2
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f022 fc31 	bl	802459a <strcpy>
  strcpy(listCfgFiles [fileIndex].dirPath, dirName);
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	1a9b      	subs	r3, r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	3328      	adds	r3, #40	; 0x28
 8001d44:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <SetListCfgFile+0x60>)
 8001d46:	4413      	add	r3, r2
 8001d48:	3305      	adds	r3, #5
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f022 fc24 	bl	802459a <strcpy>

  if (fileMessage)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d009      	beq.n	8001d6c <SetListCfgFile+0x58>
  {
    listCfgFiles [fileIndex].fileContent = fileMessage;
 8001d58:	4906      	ldr	r1, [pc, #24]	; (8001d74 <SetListCfgFile+0x60>)
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	1a9b      	subs	r3, r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	3338      	adds	r3, #56	; 0x38
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	601a      	str	r2, [r3, #0]

  }
}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	200010d0 	.word	0x200010d0

08001d78 <CfgFilesDecodeFiles>:




static void CfgFilesDecodeFiles(uint16_t fileIndex, void *fileDataBuffer, size_t fileSize, bool isInitialDecode)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
 8001d82:	461a      	mov	r2, r3
 8001d84:	4603      	mov	r3, r0
 8001d86:	81fb      	strh	r3, [r7, #14]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	737b      	strb	r3, [r7, #13]
  void *file = NULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  size_t size = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	613b      	str	r3, [r7, #16]

  switch (fileIndex)
 8001d94:	89fb      	ldrh	r3, [r7, #14]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d013      	beq.n	8001dc2 <CfgFilesDecodeFiles+0x4a>
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	dc13      	bgt.n	8001dc6 <CfgFilesDecodeFiles+0x4e>
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <CfgFilesDecodeFiles+0x30>
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d011      	beq.n	8001dca <CfgFilesDecodeFiles+0x52>
    case BOOT_FILE_IDX:
      // Implementação para BOOT_FILE_IDX
      break;

    default:
      break;
 8001da6:	e00e      	b.n	8001dc6 <CfgFilesDecodeFiles+0x4e>
      size = sizeof(TModbusMap);
 8001da8:	f240 437a 	movw	r3, #1146	; 0x47a
 8001dac:	613b      	str	r3, [r7, #16]
      file = pvPortMalloc(size);
 8001dae:	6938      	ldr	r0, [r7, #16]
 8001db0:	f00a f83a 	bl	800be28 <pvPortMalloc>
 8001db4:	6178      	str	r0, [r7, #20]
      memcpy(file, fileDataBuffer, size);
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	6978      	ldr	r0, [r7, #20]
 8001dbc:	f022 fbf5 	bl	80245aa <memcpy>
      break;
 8001dc0:	e004      	b.n	8001dcc <CfgFilesDecodeFiles+0x54>
      break;
 8001dc2:	bf00      	nop
 8001dc4:	e002      	b.n	8001dcc <CfgFilesDecodeFiles+0x54>
      break;
 8001dc6:	bf00      	nop
 8001dc8:	e000      	b.n	8001dcc <CfgFilesDecodeFiles+0x54>
      break;
 8001dca:	bf00      	nop
  }



  if (file)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d042      	beq.n	8001e58 <CfgFilesDecodeFiles+0xe0>
  {
    if (size > 0)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d03a      	beq.n	8001e4e <CfgFilesDecodeFiles+0xd6>
    {
      if (isInitialDecode)
 8001dd8:	7b7b      	ldrb	r3, [r7, #13]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00e      	beq.n	8001dfc <CfgFilesDecodeFiles+0x84>
      {
        // Fill file message with decoded data
        memcpy(listCfgFiles [fileIndex].fileContent, file, size);
 8001dde:	89fa      	ldrh	r2, [r7, #14]
 8001de0:	491f      	ldr	r1, [pc, #124]	; (8001e60 <CfgFilesDecodeFiles+0xe8>)
 8001de2:	4613      	mov	r3, r2
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	1a9b      	subs	r3, r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	3338      	adds	r3, #56	; 0x38
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	6979      	ldr	r1, [r7, #20]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f022 fbd8 	bl	80245aa <memcpy>
 8001dfa:	e028      	b.n	8001e4e <CfgFilesDecodeFiles+0xd6>
      }
      else
      {
        // Compares current message to the new decoded message
        if (memcmp(listCfgFiles [fileIndex].fileContent, file, size) != 0)
 8001dfc:	89fa      	ldrh	r2, [r7, #14]
 8001dfe:	4918      	ldr	r1, [pc, #96]	; (8001e60 <CfgFilesDecodeFiles+0xe8>)
 8001e00:	4613      	mov	r3, r2
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	1a9b      	subs	r3, r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	3338      	adds	r3, #56	; 0x38
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	6979      	ldr	r1, [r7, #20]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f022 fa7a 	bl	802430c <memcmp>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d017      	beq.n	8001e4e <CfgFilesDecodeFiles+0xd6>
        {
          // Cfg File has changed; update file message
          memcpy(listCfgFiles [fileIndex].fileContent, file, size);
 8001e1e:	89fa      	ldrh	r2, [r7, #14]
 8001e20:	490f      	ldr	r1, [pc, #60]	; (8001e60 <CfgFilesDecodeFiles+0xe8>)
 8001e22:	4613      	mov	r3, r2
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	1a9b      	subs	r3, r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	3338      	adds	r3, #56	; 0x38
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	6979      	ldr	r1, [r7, #20]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f022 fbb8 	bl	80245aa <memcpy>
          listCfgFiles [fileIndex].changed = true;
 8001e3a:	89fa      	ldrh	r2, [r7, #14]
 8001e3c:	4908      	ldr	r1, [pc, #32]	; (8001e60 <CfgFilesDecodeFiles+0xe8>)
 8001e3e:	4613      	mov	r3, r2
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	1a9b      	subs	r3, r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	3324      	adds	r3, #36	; 0x24
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
        }
      }
    }

    vPortFree(file);
 8001e4e:	6978      	ldr	r0, [r7, #20]
 8001e50:	f00a f8b6 	bl	800bfc0 <vPortFree>
    file = NULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
  }

}
 8001e58:	bf00      	nop
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	200010d0 	.word	0x200010d0

08001e64 <CfgFilesEncode>:


static bool CfgFilesEncode(uint16_t fileIndex, void *fileDataBuffer, size_t *fileSize, bool setDefaultValues)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4603      	mov	r3, r0
 8001e72:	81fb      	strh	r3, [r7, #14]
 8001e74:	4613      	mov	r3, r2
 8001e76:	737b      	strb	r3, [r7, #13]

  switch (fileIndex)
 8001e78:	89fb      	ldrh	r3, [r7, #14]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d023      	beq.n	8001ec6 <CfgFilesEncode+0x62>
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	dc22      	bgt.n	8001ec8 <CfgFilesEncode+0x64>
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <CfgFilesEncode+0x26>
 8001e86:	2b01      	cmp	r3, #1

      break;

    case COMM_FILE_IDX:

      break;
 8001e88:	e01e      	b.n	8001ec8 <CfgFilesEncode+0x64>
      TModbusMap *modbusFile = (TModbusMap *) listCfgFiles[fileIndex].fileContent;
 8001e8a:	89fa      	ldrh	r2, [r7, #14]
 8001e8c:	4911      	ldr	r1, [pc, #68]	; (8001ed4 <CfgFilesEncode+0x70>)
 8001e8e:	4613      	mov	r3, r2
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	1a9b      	subs	r3, r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	3338      	adds	r3, #56	; 0x38
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	617b      	str	r3, [r7, #20]
       if (setDefaultValues)
 8001e9e:	7b7b      	ldrb	r3, [r7, #13]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d004      	beq.n	8001eae <CfgFilesEncode+0x4a>
         CreateDefaultModbusMap(fileDataBuffer, modbusFile);
 8001ea4:	6979      	ldr	r1, [r7, #20]
 8001ea6:	68b8      	ldr	r0, [r7, #8]
 8001ea8:	f020 fba8 	bl	80225fc <CreateDefaultModbusMap>
 8001eac:	e005      	b.n	8001eba <CfgFilesEncode+0x56>
         memcpy(fileDataBuffer, modbusFile, sizeof(TModbusMap));
 8001eae:	f240 427a 	movw	r2, #1146	; 0x47a
 8001eb2:	6979      	ldr	r1, [r7, #20]
 8001eb4:	68b8      	ldr	r0, [r7, #8]
 8001eb6:	f022 fb78 	bl	80245aa <memcpy>
       *fileSize = sizeof(TModbusMap);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f240 427a 	movw	r2, #1146	; 0x47a
 8001ec0:	601a      	str	r2, [r3, #0]
       return true;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e001      	b.n	8001eca <CfgFilesEncode+0x66>

    case BOOT_FILE_IDX:

      break;
 8001ec6:	bf00      	nop

    default:

  }

 return false;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200010d0 	.word	0x200010d0

08001ed8 <CfgFilesInit>:
 * @fn void CfgFilesInit()
 * @brief  Initializes control struct list for Configuration Files Management
 * @retval None
 */
void CfgFilesInit()
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	f5ad 6d03 	sub.w	sp, sp, #2096	; 0x830
 8001ede:	af00      	add	r7, sp, #0

  /*Initialize all buffer to read/write on files*/
  CfgFiles_cleanBuffers();
 8001ee0:	f7ff fec2 	bl	8001c68 <CfgFiles_cleanBuffers>

  //------------------------------------------------------------------------------------
  //                    Fill List of Configuration Files
  //------------------------------------------------------------------------------------
  //             FILE_INDEX     FILE_NAME              DIR_NAME        TYPE_TIPE
  SetListCfgFile(MAP_FILE_IDX,  MODBUS_MAP_FILE_PATH,  MAP_DIR_PATH,   &modbusMapFile);
 8001ee4:	4b9b      	ldr	r3, [pc, #620]	; (8002154 <CfgFilesInit+0x27c>)
 8001ee6:	4a9c      	ldr	r2, [pc, #624]	; (8002158 <CfgFilesInit+0x280>)
 8001ee8:	499c      	ldr	r1, [pc, #624]	; (800215c <CfgFilesInit+0x284>)
 8001eea:	2000      	movs	r0, #0
 8001eec:	f7ff ff12 	bl	8001d14 <SetListCfgFile>
  SetListCfgFile(COMM_FILE_IDX, COMM_FILE,             CFG_DIR_PATH,   NULL);
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	4a9b      	ldr	r2, [pc, #620]	; (8002160 <CfgFilesInit+0x288>)
 8001ef4:	499b      	ldr	r1, [pc, #620]	; (8002164 <CfgFilesInit+0x28c>)
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	f7ff ff0c 	bl	8001d14 <SetListCfgFile>
  SetListCfgFile(BOOT_FILE_IDX, BOOT_FILE,             BOOT_DIR_PATH,  NULL);
 8001efc:	2300      	movs	r3, #0
 8001efe:	4a9a      	ldr	r2, [pc, #616]	; (8002168 <CfgFilesInit+0x290>)
 8001f00:	499a      	ldr	r1, [pc, #616]	; (800216c <CfgFilesInit+0x294>)
 8001f02:	2002      	movs	r0, #2
 8001f04:	f7ff ff06 	bl	8001d14 <SetListCfgFile>
  //------------------------------------------------------------------------------------

  for (int i = 0; i < TOTAL_CFG_FILES; i ++)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 8001f0e:	e116      	b.n	800213e <CfgFilesInit+0x266>
  {
    // Print Remote File Paths
    char fileName[32] = { 0 };
 8001f10:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8001f14:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	611a      	str	r2, [r3, #16]
 8001f2a:	615a      	str	r2, [r3, #20]
 8001f2c:	619a      	str	r2, [r3, #24]

    if (CfgFilesGeFilePathByIndex(i, fileName))
 8001f2e:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	1d3a      	adds	r2, r7, #4
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff febd 	bl	8001cb8 <CfgFilesGeFilePathByIndex>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d007      	beq.n	8001f54 <CfgFilesInit+0x7c>
    {
      LOG("index = %d file path: %s", i, fileName);
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	461a      	mov	r2, r3
 8001f48:	f8d7 182c 	ldr.w	r1, [r7, #2092]	; 0x82c
 8001f4c:	4888      	ldr	r0, [pc, #544]	; (8002170 <CfgFilesInit+0x298>)
 8001f4e:	f022 f843 	bl	8023fd8 <iprintf>
 8001f52:	e006      	b.n	8001f62 <CfgFilesInit+0x8a>
    }
    else
    {
      LOG("index = %d erro to get file path: %s", i, fileName);
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	461a      	mov	r2, r3
 8001f58:	f8d7 182c 	ldr.w	r1, [r7, #2092]	; 0x82c
 8001f5c:	4885      	ldr	r0, [pc, #532]	; (8002174 <CfgFilesInit+0x29c>)
 8001f5e:	f022 f83b 	bl	8023fd8 <iprintf>

    }
    // Open/Create file
    uint8_t fileDataBuffer [1024 * 2 /*LPBDRIVER_OUT_BUFFER_SIZE*/] = { 0 };
 8001f62:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8001f66:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	3304      	adds	r3, #4
 8001f70:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f022 f9f2 	bl	8024360 <memset>
    size_t fileSize = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
    FILE_POINTER file = NULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828

    /*verify if file exists in file system*/
    if (file_exists((char*)fileName) == LFS_ERR_OK)
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fd4e 	bl	8001a2c <file_exists>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d106      	bne.n	8001fa4 <CfgFilesInit+0xcc>
    {
      file = file_open((char*) fileName, "r"); //read-only
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	4977      	ldr	r1, [pc, #476]	; (8002178 <CfgFilesInit+0x2a0>)
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fbf4 	bl	8001788 <file_open>
 8001fa0:	f8c7 0828 	str.w	r0, [r7, #2088]	; 0x828
    }

    /*if have a file*/
    if (file)
 8001fa4:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d006      	beq.n	8001fba <CfgFilesInit+0xe2>
    {
      fileSize = file_size(file);
 8001fac:	f8d7 0828 	ldr.w	r0, [r7, #2088]	; 0x828
 8001fb0:	f7ff fdc8 	bl	8001b44 <file_size>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
    }

    if (fileSize == 0) // File is empty or is a new file
 8001fba:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d178      	bne.n	80020b4 <CfgFilesInit+0x1dc>
    {
      //------------------------------------
      if (file != NULL)
 8001fc2:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <CfgFilesInit+0xfa>
      {
        file_close(file);
 8001fca:	f8d7 0828 	ldr.w	r0, [r7, #2088]	; 0x828
 8001fce:	f7ff fc63 	bl	8001898 <file_close>
      }

      file = file_open((char*) fileName, "w");  // Open file as "write-only"
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	4969      	ldr	r1, [pc, #420]	; (800217c <CfgFilesInit+0x2a4>)
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fbd6 	bl	8001788 <file_open>
 8001fdc:	f8c7 0828 	str.w	r0, [r7, #2088]	; 0x828

      if (!file)
 8001fe0:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10e      	bne.n	8002006 <CfgFilesInit+0x12e>
      {
        LOG("New File - Error: file not opened for writing; File Index = %03d; File Name: %s", i, listCfgFiles [i].name);
 8001fe8:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 8001fec:	4613      	mov	r3, r2
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4a62      	ldr	r2, [pc, #392]	; (8002180 <CfgFilesInit+0x2a8>)
 8001ff6:	4413      	add	r3, r2
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	f8d7 182c 	ldr.w	r1, [r7, #2092]	; 0x82c
 8001ffe:	4861      	ldr	r0, [pc, #388]	; (8002184 <CfgFilesInit+0x2ac>)
 8002000:	f021 ffea 	bl	8023fd8 <iprintf>
        continue;
 8002004:	e096      	b.n	8002134 <CfgFilesInit+0x25c>
      }

      if (!CfgFilesEncode(i, fileDataBuffer, &fileSize, true))
 8002006:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 800200a:	b298      	uxth	r0, r3
 800200c:	f607 0224 	addw	r2, r7, #2084	; 0x824
 8002010:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002014:	2301      	movs	r3, #1
 8002016:	f7ff ff25 	bl	8001e64 <CfgFilesEncode>
 800201a:	4603      	mov	r3, r0
 800201c:	f083 0301 	eor.w	r3, r3, #1
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d004      	beq.n	8002030 <CfgFilesInit+0x158>
      {
        file_close(file); // error to encode data; close file and continue
 8002026:	f8d7 0828 	ldr.w	r0, [r7, #2088]	; 0x828
 800202a:	f7ff fc35 	bl	8001898 <file_close>
        continue;
 800202e:	e081      	b.n	8002134 <CfgFilesInit+0x25c>
      }

      // Write file content
       listCfgFiles[i].size = file_write(fileDataBuffer, 1, fileSize, file);
 8002030:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 8002034:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002038:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 800203c:	2101      	movs	r1, #1
 800203e:	f7ff fcaf 	bl	80019a0 <file_write>
 8002042:	4601      	mov	r1, r0
 8002044:	484e      	ldr	r0, [pc, #312]	; (8002180 <CfgFilesInit+0x2a8>)
 8002046:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 800204a:	4613      	mov	r3, r2
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4403      	add	r3, r0
 8002054:	3320      	adds	r3, #32
 8002056:	6019      	str	r1, [r3, #0]

       if (listCfgFiles[i].size != fileSize)
 8002058:	4949      	ldr	r1, [pc, #292]	; (8002180 <CfgFilesInit+0x2a8>)
 800205a:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 800205e:	4613      	mov	r3, r2
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	3320      	adds	r3, #32
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8002070:	429a      	cmp	r2, r3
 8002072:	d00f      	beq.n	8002094 <CfgFilesInit+0x1bc>
       {
         LOG("Data size written in file differs from the size requested; written = %lu bytes | requested = %d bytes", listCfgFiles[i].size, fileSize);
 8002074:	4942      	ldr	r1, [pc, #264]	; (8002180 <CfgFilesInit+0x2a8>)
 8002076:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 800207a:	4613      	mov	r3, r2
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	1a9b      	subs	r3, r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	3320      	adds	r3, #32
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 800208c:	4619      	mov	r1, r3
 800208e:	483e      	ldr	r0, [pc, #248]	; (8002188 <CfgFilesInit+0x2b0>)
 8002090:	f021 ffa2 	bl	8023fd8 <iprintf>

       }
       // New file, set as "changed"
      listCfgFiles[i].changed = true;
 8002094:	493a      	ldr	r1, [pc, #232]	; (8002180 <CfgFilesInit+0x2a8>)
 8002096:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 800209a:	4613      	mov	r3, r2
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	1a9b      	subs	r3, r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	3324      	adds	r3, #36	; 0x24
 80020a6:	2201      	movs	r2, #1
 80020a8:	701a      	strb	r2, [r3, #0]

      file_close(file);
 80020aa:	f8d7 0828 	ldr.w	r0, [r7, #2088]	; 0x828
 80020ae:	f7ff fbf3 	bl	8001898 <file_close>
 80020b2:	e03f      	b.n	8002134 <CfgFilesInit+0x25c>
    }
    else
    {
      // Read file content
      listCfgFiles [i].size = file_read(fileDataBuffer, 1, fileSize, file);
 80020b4:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 80020b8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80020bc:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 80020c0:	2101      	movs	r1, #1
 80020c2:	f7ff fc3b 	bl	800193c <file_read>
 80020c6:	4601      	mov	r1, r0
 80020c8:	482d      	ldr	r0, [pc, #180]	; (8002180 <CfgFilesInit+0x2a8>)
 80020ca:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 80020ce:	4613      	mov	r3, r2
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4403      	add	r3, r0
 80020d8:	3320      	adds	r3, #32
 80020da:	6019      	str	r1, [r3, #0]

      if (listCfgFiles [i].size != fileSize)
 80020dc:	4928      	ldr	r1, [pc, #160]	; (8002180 <CfgFilesInit+0x2a8>)
 80020de:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 80020e2:	4613      	mov	r3, r2
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	1a9b      	subs	r3, r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	3320      	adds	r3, #32
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d00f      	beq.n	8002118 <CfgFilesInit+0x240>
      {
        LOG("Data size read from file differs from the size requested; read = %lu bytes | requested = %d bytes", listCfgFiles [i].size, fileSize);
 80020f8:	4921      	ldr	r1, [pc, #132]	; (8002180 <CfgFilesInit+0x2a8>)
 80020fa:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 80020fe:	4613      	mov	r3, r2
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	1a9b      	subs	r3, r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	3320      	adds	r3, #32
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 8002110:	4619      	mov	r1, r3
 8002112:	481e      	ldr	r0, [pc, #120]	; (800218c <CfgFilesInit+0x2b4>)
 8002114:	f021 ff60 	bl	8023fd8 <iprintf>
      }

      CfgFilesDecodeFiles(i, fileDataBuffer, fileSize, true /* sempre true na inicialização */);
 8002118:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 800211c:	b298      	uxth	r0, r3
 800211e:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 8002122:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002126:	2301      	movs	r3, #1
 8002128:	f7ff fe26 	bl	8001d78 <CfgFilesDecodeFiles>
      file_close(file);
 800212c:	f8d7 0828 	ldr.w	r0, [r7, #2088]	; 0x828
 8002130:	f7ff fbb2 	bl	8001898 <file_close>
  for (int i = 0; i < TOTAL_CFG_FILES; i ++)
 8002134:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8002138:	3301      	adds	r3, #1
 800213a:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 800213e:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8002142:	2b02      	cmp	r3, #2
 8002144:	f77f aee4 	ble.w	8001f10 <CfgFilesInit+0x38>
    }

  }

}
 8002148:	bf00      	nop
 800214a:	bf00      	nop
 800214c:	f507 6703 	add.w	r7, r7, #2096	; 0x830
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000450 	.word	0x20000450
 8002158:	08026970 	.word	0x08026970
 800215c:	08026978 	.word	0x08026978
 8002160:	08026984 	.word	0x08026984
 8002164:	0802698c 	.word	0x0802698c
 8002168:	08026998 	.word	0x08026998
 800216c:	080269a0 	.word	0x080269a0
 8002170:	080269ac 	.word	0x080269ac
 8002174:	080269c8 	.word	0x080269c8
 8002178:	080269f0 	.word	0x080269f0
 800217c:	080269f4 	.word	0x080269f4
 8002180:	200010d0 	.word	0x200010d0
 8002184:	080269f8 	.word	0x080269f8
 8002188:	08026a4c 	.word	0x08026a4c
 800218c:	08026ab4 	.word	0x08026ab4

08002190 <CfgFiles_UpdateCfgFileByIndex>:

bool CfgFiles_UpdateCfgFileByIndex(uint16_t fileIndex, bool setDefaultValues)

{
 8002190:	b590      	push	{r4, r7, lr}
 8002192:	b08f      	sub	sp, #60	; 0x3c
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	460a      	mov	r2, r1
 800219a:	80fb      	strh	r3, [r7, #6]
 800219c:	4613      	mov	r3, r2
 800219e:	717b      	strb	r3, [r7, #5]
  // Print Remote File Paths
  char fileName [32] = { 0 };
 80021a0:	2300      	movs	r3, #0
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
 80021b4:	615a      	str	r2, [r3, #20]
 80021b6:	619a      	str	r2, [r3, #24]

  if (!CfgFilesGeFilePathByIndex(fileIndex, fileName))
 80021b8:	f107 0210 	add.w	r2, r7, #16
 80021bc:	88fb      	ldrh	r3, [r7, #6]
 80021be:	4611      	mov	r1, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fd79 	bl	8001cb8 <CfgFilesGeFilePathByIndex>
 80021c6:	4603      	mov	r3, r0
 80021c8:	f083 0301 	eor.w	r3, r3, #1
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <CfgFiles_UpdateCfgFileByIndex+0x46>
  {
    return false;
 80021d2:	2300      	movs	r3, #0
 80021d4:	e061      	b.n	800229a <CfgFiles_UpdateCfgFileByIndex+0x10a>
  }

  LOG("Updating config file; File Index = %d; File Name: %s", fileIndex, fileName);
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	f107 0210 	add.w	r2, r7, #16
 80021dc:	4619      	mov	r1, r3
 80021de:	4831      	ldr	r0, [pc, #196]	; (80022a4 <CfgFiles_UpdateCfgFileByIndex+0x114>)
 80021e0:	f021 fefa 	bl	8023fd8 <iprintf>

  // Open/Create file
  uint8_t *fileDataBuffer = CfgFiles_getBuffer();
 80021e4:	f7ff fcda 	bl	8001b9c <CfgFiles_getBuffer>
 80021e8:	6378      	str	r0, [r7, #52]	; 0x34
  if (!fileDataBuffer)
 80021ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <CfgFiles_UpdateCfgFileByIndex+0x64>
  {
    return false;
 80021f0:	2300      	movs	r3, #0
 80021f2:	e052      	b.n	800229a <CfgFiles_UpdateCfgFileByIndex+0x10a>
  }

  size_t fileSize = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]
  FILE_POINTER file = NULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	633b      	str	r3, [r7, #48]	; 0x30
  file = file_open((char*) fileName, "w"); //write-only
 80021fc:	f107 0310 	add.w	r3, r7, #16
 8002200:	4929      	ldr	r1, [pc, #164]	; (80022a8 <CfgFiles_UpdateCfgFileByIndex+0x118>)
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fac0 	bl	8001788 <file_open>
 8002208:	6338      	str	r0, [r7, #48]	; 0x30
  fileSize = file_size(file);
 800220a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800220c:	f7ff fc9a 	bl	8001b44 <file_size>
 8002210:	4603      	mov	r3, r0
 8002212:	60fb      	str	r3, [r7, #12]

  if (!CfgFilesEncode(fileIndex, fileDataBuffer, &fileSize, setDefaultValues))
 8002214:	797b      	ldrb	r3, [r7, #5]
 8002216:	f107 020c 	add.w	r2, r7, #12
 800221a:	88f8      	ldrh	r0, [r7, #6]
 800221c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800221e:	f7ff fe21 	bl	8001e64 <CfgFilesEncode>
 8002222:	4603      	mov	r3, r0
 8002224:	f083 0301 	eor.w	r3, r3, #1
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d004      	beq.n	8002238 <CfgFiles_UpdateCfgFileByIndex+0xa8>
  {
    file_close(file); // error to encode data; close file and continue
 800222e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002230:	f7ff fb32 	bl	8001898 <file_close>
    return false;
 8002234:	2300      	movs	r3, #0
 8002236:	e030      	b.n	800229a <CfgFiles_UpdateCfgFileByIndex+0x10a>
  }

  // Write file content
  listCfgFiles [fileIndex].size = file_write(fileDataBuffer, 1, fileSize, file);
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	88fc      	ldrh	r4, [r7, #6]
 800223c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223e:	2101      	movs	r1, #1
 8002240:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002242:	f7ff fbad 	bl	80019a0 <file_write>
 8002246:	4602      	mov	r2, r0
 8002248:	4918      	ldr	r1, [pc, #96]	; (80022ac <CfgFiles_UpdateCfgFileByIndex+0x11c>)
 800224a:	4623      	mov	r3, r4
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	1b1b      	subs	r3, r3, r4
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	3320      	adds	r3, #32
 8002256:	601a      	str	r2, [r3, #0]

  if (listCfgFiles [fileIndex].size != fileSize)
 8002258:	88fa      	ldrh	r2, [r7, #6]
 800225a:	4914      	ldr	r1, [pc, #80]	; (80022ac <CfgFiles_UpdateCfgFileByIndex+0x11c>)
 800225c:	4613      	mov	r3, r2
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	1a9b      	subs	r3, r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	3320      	adds	r3, #32
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	429a      	cmp	r2, r3
 800226e:	d00d      	beq.n	800228c <CfgFiles_UpdateCfgFileByIndex+0xfc>
  {

    LOG("Data size written in file differs from the size requested; written = %lu bytes | requested = %d bytes", listCfgFiles [fileIndex].size, fileSize);
 8002270:	88fa      	ldrh	r2, [r7, #6]
 8002272:	490e      	ldr	r1, [pc, #56]	; (80022ac <CfgFiles_UpdateCfgFileByIndex+0x11c>)
 8002274:	4613      	mov	r3, r2
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	3320      	adds	r3, #32
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4619      	mov	r1, r3
 8002286:	480a      	ldr	r0, [pc, #40]	; (80022b0 <CfgFiles_UpdateCfgFileByIndex+0x120>)
 8002288:	f021 fea6 	bl	8023fd8 <iprintf>
  }

  file_close(file);
 800228c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800228e:	f7ff fb03 	bl	8001898 <file_close>
  CfgFiles_freeBuffer(fileDataBuffer);
 8002292:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002294:	f7ff fcbe 	bl	8001c14 <CfgFiles_freeBuffer>
  return true;
 8002298:	2301      	movs	r3, #1

}
 800229a:	4618      	mov	r0, r3
 800229c:	373c      	adds	r7, #60	; 0x3c
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd90      	pop	{r4, r7, pc}
 80022a2:	bf00      	nop
 80022a4:	08026b18 	.word	0x08026b18
 80022a8:	080269f4 	.word	0x080269f4
 80022ac:	200010d0 	.word	0x200010d0
 80022b0:	08026a4c 	.word	0x08026a4c

080022b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4a07      	ldr	r2, [pc, #28]	; (80022e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80022c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	4a06      	ldr	r2, [pc, #24]	; (80022e4 <vApplicationGetIdleTaskMemory+0x30>)
 80022ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2280      	movs	r2, #128	; 0x80
 80022d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20001194 	.word	0x20001194
 80022e4:	20001234 	.word	0x20001234

080022e8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4a07      	ldr	r2, [pc, #28]	; (8002314 <vApplicationGetTimerTaskMemory+0x2c>)
 80022f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	4a06      	ldr	r2, [pc, #24]	; (8002318 <vApplicationGetTimerTaskMemory+0x30>)
 80022fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002306:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	20001434 	.word	0x20001434
 8002318:	200014d4 	.word	0x200014d4

0800231c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800231c:	b5b0      	push	{r4, r5, r7, lr}
 800231e:	b09a      	sub	sp, #104	; 0x68
 8002320:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of menuQueue */
  osMessageQDef(menuQueue, 6, MenuData_t);
 8002322:	4b29      	ldr	r3, [pc, #164]	; (80023c8 <MX_FREERTOS_Init+0xac>)
 8002324:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002328:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800232a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  menuQueueHandle = osMessageCreate(osMessageQ(menuQueue), NULL);
 800232e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002332:	2100      	movs	r1, #0
 8002334:	4618      	mov	r0, r3
 8002336:	f006 fdac 	bl	8008e92 <osMessageCreate>
 800233a:	4603      	mov	r3, r0
 800233c:	4a23      	ldr	r2, [pc, #140]	; (80023cc <MX_FREERTOS_Init+0xb0>)
 800233e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ethernetStatusT */
  osThreadDef(ethernetStatusT, EthernetStatusTask, osPriorityNormal, 0, 1024);
 8002340:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <MX_FREERTOS_Init+0xb4>)
 8002342:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002346:	461d      	mov	r5, r3
 8002348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800234a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800234c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002350:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ethernetStatusTHandle = osThreadCreate(osThread(ethernetStatusT), NULL);
 8002354:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f006 fbd4 	bl	8008b08 <osThreadCreate>
 8002360:	4603      	mov	r3, r0
 8002362:	4a1c      	ldr	r2, [pc, #112]	; (80023d4 <MX_FREERTOS_Init+0xb8>)
 8002364:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonsTask */
  osThreadDef(buttonsTask, ButtonsTask, osPriorityBelowNormal, 0, 1024);
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <MX_FREERTOS_Init+0xbc>)
 8002368:	f107 0420 	add.w	r4, r7, #32
 800236c:	461d      	mov	r5, r3
 800236e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002372:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002376:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonsTaskHandle = osThreadCreate(osThread(buttonsTask), NULL);
 800237a:	f107 0320 	add.w	r3, r7, #32
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f006 fbc1 	bl	8008b08 <osThreadCreate>
 8002386:	4603      	mov	r3, r0
 8002388:	4a14      	ldr	r2, [pc, #80]	; (80023dc <MX_FREERTOS_Init+0xc0>)
 800238a:	6013      	str	r3, [r2, #0]



  /* definition and creation of ledsTask */
  osThreadDef(ledsTask, LedsTask, osPriorityIdle, 0, 512);
 800238c:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <MX_FREERTOS_Init+0xc4>)
 800238e:	1d3c      	adds	r4, r7, #4
 8002390:	461d      	mov	r5, r3
 8002392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002396:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800239a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledsTaskHandle = osThreadCreate(osThread(ledsTask),(void*) operationMode);
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <MX_FREERTOS_Init+0xc8>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f006 fbad 	bl	8008b08 <osThreadCreate>
 80023ae:	4603      	mov	r3, r0
 80023b0:	4a0d      	ldr	r2, [pc, #52]	; (80023e8 <MX_FREERTOS_Init+0xcc>)
 80023b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  HorusOperationMode(operationMode);
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <MX_FREERTOS_Init+0xc8>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 fbc9 	bl	8002b50 <HorusOperationMode>


  /* USER CODE END RTOS_THREADS */

}
 80023be:	bf00      	nop
 80023c0:	3768      	adds	r7, #104	; 0x68
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bdb0      	pop	{r4, r5, r7, pc}
 80023c6:	bf00      	nop
 80023c8:	08026b50 	.word	0x08026b50
 80023cc:	20001190 	.word	0x20001190
 80023d0:	08026b70 	.word	0x08026b70
 80023d4:	20001184 	.word	0x20001184
 80023d8:	08026b98 	.word	0x08026b98
 80023dc:	20001188 	.word	0x20001188
 80023e0:	08026bc0 	.word	0x08026bc0
 80023e4:	20001974 	.word	0x20001974
 80023e8:	2000118c 	.word	0x2000118c

080023ec <EthernetStatusTask>:
  * @param  argument: Not used
  * @retval None
 */
/* USER CODE END Header_EthernetStatusTask */
void EthernetStatusTask(void const * argument)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b0c4      	sub	sp, #272	; 0x110
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023fa:	6018      	str	r0, [r3, #0]
  /* init code for LWIP */
  MX_LWIP_Init();
 80023fc:	f005 fe30 	bl	8008060 <MX_LWIP_Init>
  /* USER CODE BEGIN EthernetStatusTask */
	MenuData_t menu_data = {0};
 8002400:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002404:	22bd      	movs	r2, #189	; 0xbd
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f021 ffa9 	bl	8024360 <memset>
	char ipad[21] = {0};
 800240e:	2300      	movs	r3, #0
 8002410:	63bb      	str	r3, [r7, #56]	; 0x38
 8002412:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]
 800241e:	60da      	str	r2, [r3, #12]
 8002420:	741a      	strb	r2, [r3, #16]
	char mask[21] = {0};
 8002422:	2300      	movs	r3, #0
 8002424:	623b      	str	r3, [r7, #32]
 8002426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]
 8002434:	741a      	strb	r2, [r3, #16]
	char gway[21] = {0};
 8002436:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800243a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	3304      	adds	r3, #4
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	741a      	strb	r2, [r3, #16]


	/* Infinite loop */
	for (;;)
	{
		if (netif_is_up(&gnetif))
 8002450:	4b37      	ldr	r3, [pc, #220]	; (8002530 <EthernetStatusTask+0x144>)
 8002452:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d062      	beq.n	8002526 <EthernetStatusTask+0x13a>
		{
			sprintf(ipad, "IPAD:%s", ip4addr_ntoa(netif_ip4_addr(&gnetif)));
 8002460:	4834      	ldr	r0, [pc, #208]	; (8002534 <EthernetStatusTask+0x148>)
 8002462:	f01e fc51 	bl	8020d08 <ip4addr_ntoa>
 8002466:	4602      	mov	r2, r0
 8002468:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800246c:	4932      	ldr	r1, [pc, #200]	; (8002538 <EthernetStatusTask+0x14c>)
 800246e:	4618      	mov	r0, r3
 8002470:	f021 fe54 	bl	802411c <siprintf>
			sprintf(mask, "MASK:%s", ip4addr_ntoa(netif_ip4_netmask(&gnetif)));
 8002474:	4831      	ldr	r0, [pc, #196]	; (800253c <EthernetStatusTask+0x150>)
 8002476:	f01e fc47 	bl	8020d08 <ip4addr_ntoa>
 800247a:	4602      	mov	r2, r0
 800247c:	f107 0320 	add.w	r3, r7, #32
 8002480:	492f      	ldr	r1, [pc, #188]	; (8002540 <EthernetStatusTask+0x154>)
 8002482:	4618      	mov	r0, r3
 8002484:	f021 fe4a 	bl	802411c <siprintf>
			sprintf(gway, "GWAY:%s", ip4addr_ntoa(netif_ip4_gw(&gnetif)));
 8002488:	482e      	ldr	r0, [pc, #184]	; (8002544 <EthernetStatusTask+0x158>)
 800248a:	f01e fc3d 	bl	8020d08 <ip4addr_ntoa>
 800248e:	4602      	mov	r2, r0
 8002490:	f107 0308 	add.w	r3, r7, #8
 8002494:	492c      	ldr	r1, [pc, #176]	; (8002548 <EthernetStatusTask+0x15c>)
 8002496:	4618      	mov	r0, r3
 8002498:	f021 fe40 	bl	802411c <siprintf>

			if (strcmp(menu_data.items[PAGE_0][LINE_0], ipad) != 0 ||
 800249c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fd fe92 	bl	80001d0 <strcmp>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d117      	bne.n	80024e2 <EthernetStatusTask+0xf6>
				strcmp(menu_data.items[PAGE_0][LINE_1], mask) != 0 ||
 80024b2:	f107 0220 	add.w	r2, r7, #32
 80024b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024ba:	3315      	adds	r3, #21
 80024bc:	4611      	mov	r1, r2
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fd fe86 	bl	80001d0 <strcmp>
 80024c4:	4603      	mov	r3, r0
			if (strcmp(menu_data.items[PAGE_0][LINE_0], ipad) != 0 ||
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10b      	bne.n	80024e2 <EthernetStatusTask+0xf6>
				strcmp(menu_data.items[PAGE_0][LINE_2], gway) != 0)
 80024ca:	f107 0208 	add.w	r2, r7, #8
 80024ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024d2:	332a      	adds	r3, #42	; 0x2a
 80024d4:	4611      	mov	r1, r2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fd fe7a 	bl	80001d0 <strcmp>
 80024dc:	4603      	mov	r3, r0
				strcmp(menu_data.items[PAGE_0][LINE_1], mask) != 0 ||
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d021      	beq.n	8002526 <EthernetStatusTask+0x13a>
			{
				strcpy(menu_data.items[PAGE_0][LINE_0], ipad);
 80024e2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f022 f854 	bl	802459a <strcpy>
				strcpy(menu_data.items[PAGE_0][LINE_1], mask);
 80024f2:	f107 0220 	add.w	r2, r7, #32
 80024f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024fa:	3315      	adds	r3, #21
 80024fc:	4611      	mov	r1, r2
 80024fe:	4618      	mov	r0, r3
 8002500:	f022 f84b 	bl	802459a <strcpy>
				strcpy(menu_data.items[PAGE_0][LINE_2], gway);
 8002504:	f107 0208 	add.w	r2, r7, #8
 8002508:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800250c:	332a      	adds	r3, #42	; 0x2a
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f022 f842 	bl	802459a <strcpy>
				AdapterSSD1306_SendDataToMenuQueueUpdate(&menu_data);
 8002516:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff f82e 	bl	800157c <AdapterSSD1306_SendDataToMenuQueueUpdate>
				osDelay(100);
 8002520:	2064      	movs	r0, #100	; 0x64
 8002522:	f006 fb3d 	bl	8008ba0 <osDelay>
			}
		}

		osDelay(100);
 8002526:	2064      	movs	r0, #100	; 0x64
 8002528:	f006 fb3a 	bl	8008ba0 <osDelay>
		if (netif_is_up(&gnetif))
 800252c:	e790      	b.n	8002450 <EthernetStatusTask+0x64>
 800252e:	bf00      	nop
 8002530:	20001a74 	.word	0x20001a74
 8002534:	20001a78 	.word	0x20001a78
 8002538:	08026bdc 	.word	0x08026bdc
 800253c:	20001a7c 	.word	0x20001a7c
 8002540:	08026be4 	.word	0x08026be4
 8002544:	20001a80 	.word	0x20001a80
 8002548:	08026bec 	.word	0x08026bec

0800254c <ButtonsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ButtonsTask */
void ButtonsTask(void const * argument)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ButtonsTask */
	/* Infinite loop */

	bool activeDarkMode = false;
 8002554:	2300      	movs	r3, #0
 8002556:	73fb      	strb	r3, [r7, #15]
	for (;;)
	{
		if (HAL_GPIO_ReadPin(BT_SW1_GPIO_Port, BT_SW1_Pin) == RESET)
 8002558:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800255c:	4822      	ldr	r0, [pc, #136]	; (80025e8 <ButtonsTask+0x9c>)
 800255e:	f002 ff77 	bl	8005450 <HAL_GPIO_ReadPin>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d109      	bne.n	800257c <ButtonsTask+0x30>
		{

			AdapterSSD1306_NextPage();
 8002568:	f7fe fefe 	bl	8001368 <AdapterSSD1306_NextPage>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800256c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002570:	481d      	ldr	r0, [pc, #116]	; (80025e8 <ButtonsTask+0x9c>)
 8002572:	f002 ff9e 	bl	80054b2 <HAL_GPIO_TogglePin>

			osDelay(250);
 8002576:	20fa      	movs	r0, #250	; 0xfa
 8002578:	f006 fb12 	bl	8008ba0 <osDelay>
		}

		if (HAL_GPIO_ReadPin(BT_SW2_GPIO_Port, BT_SW2_Pin) == RESET)
 800257c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002580:	4819      	ldr	r0, [pc, #100]	; (80025e8 <ButtonsTask+0x9c>)
 8002582:	f002 ff65 	bl	8005450 <HAL_GPIO_ReadPin>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d109      	bne.n	80025a0 <ButtonsTask+0x54>
		{

			AdapterSSD1306_PreviousPage();
 800258c:	f7fe ff0e 	bl	80013ac <AdapterSSD1306_PreviousPage>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002590:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002594:	4814      	ldr	r0, [pc, #80]	; (80025e8 <ButtonsTask+0x9c>)
 8002596:	f002 ff8c 	bl	80054b2 <HAL_GPIO_TogglePin>

			osDelay(250);
 800259a:	20fa      	movs	r0, #250	; 0xfa
 800259c:	f006 fb00 	bl	8008ba0 <osDelay>
		}

		if (HAL_GPIO_ReadPin(BT_SW3_GPIO_Port, BT_SW3_Pin) == RESET)
 80025a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025a4:	4810      	ldr	r0, [pc, #64]	; (80025e8 <ButtonsTask+0x9c>)
 80025a6:	f002 ff53 	bl	8005450 <HAL_GPIO_ReadPin>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d117      	bne.n	80025e0 <ButtonsTask+0x94>
		{

			if (activeDarkMode)
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d006      	beq.n	80025c4 <ButtonsTask+0x78>
			{
				AdapterSSD1306_DarkMode(activeDarkMode);
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe ff19 	bl	80013f0 <AdapterSSD1306_DarkMode>
				activeDarkMode = false;
 80025be:	2300      	movs	r3, #0
 80025c0:	73fb      	strb	r3, [r7, #15]
 80025c2:	e005      	b.n	80025d0 <ButtonsTask+0x84>

			}
			else
			{
				AdapterSSD1306_DarkMode(activeDarkMode);
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe ff12 	bl	80013f0 <AdapterSSD1306_DarkMode>
				activeDarkMode = true;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]

			}

		    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED3_Pin);
 80025d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025d4:	4804      	ldr	r0, [pc, #16]	; (80025e8 <ButtonsTask+0x9c>)
 80025d6:	f002 ff6c 	bl	80054b2 <HAL_GPIO_TogglePin>
			osDelay(250);
 80025da:	20fa      	movs	r0, #250	; 0xfa
 80025dc:	f006 fae0 	bl	8008ba0 <osDelay>
		}

		osDelay(10);
 80025e0:	200a      	movs	r0, #10
 80025e2:	f006 fadd 	bl	8008ba0 <osDelay>
		if (HAL_GPIO_ReadPin(BT_SW1_GPIO_Port, BT_SW1_Pin) == RESET)
 80025e6:	e7b7      	b.n	8002558 <ButtonsTask+0xc>
 80025e8:	40021000 	.word	0x40021000

080025ec <LedsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LedsTask */
void LedsTask(void const *argument)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedsTask */

  /* Infinite loop */

  TOperationMode operationMode = (TOperationMode) argument;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	73fb      	strb	r3, [r7, #15]

  for (;;)
  {

	switch (operationMode)
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d030      	beq.n	8002660 <LedsTask+0x74>
 80025fe:	2b02      	cmp	r3, #2
 8002600:	dc4e      	bgt.n	80026a0 <LedsTask+0xb4>
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <LedsTask+0x20>
 8002606:	2b01      	cmp	r3, #1
 8002608:	d00a      	beq.n	8002620 <LedsTask+0x34>
	  osDelay(1000);
	  break;

	default:

	  break;
 800260a:	e049      	b.n	80026a0 <LedsTask+0xb4>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800260c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002610:	4824      	ldr	r0, [pc, #144]	; (80026a4 <LedsTask+0xb8>)
 8002612:	f002 ff4e 	bl	80054b2 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8002616:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800261a:	f006 fac1 	bl	8008ba0 <osDelay>
	  break;
 800261e:	e040      	b.n	80026a2 <LedsTask+0xb6>
	  for (int i = 0; i < 2; i++)
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	e014      	b.n	8002650 <LedsTask+0x64>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8002626:	2200      	movs	r2, #0
 8002628:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800262c:	481d      	ldr	r0, [pc, #116]	; (80026a4 <LedsTask+0xb8>)
 800262e:	f002 ff27 	bl	8005480 <HAL_GPIO_WritePin>
		osDelay(250);
 8002632:	20fa      	movs	r0, #250	; 0xfa
 8002634:	f006 fab4 	bl	8008ba0 <osDelay>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8002638:	2201      	movs	r2, #1
 800263a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800263e:	4819      	ldr	r0, [pc, #100]	; (80026a4 <LedsTask+0xb8>)
 8002640:	f002 ff1e 	bl	8005480 <HAL_GPIO_WritePin>
		osDelay(250);
 8002644:	20fa      	movs	r0, #250	; 0xfa
 8002646:	f006 faab 	bl	8008ba0 <osDelay>
	  for (int i = 0; i < 2; i++)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	3301      	adds	r3, #1
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2b01      	cmp	r3, #1
 8002654:	dde7      	ble.n	8002626 <LedsTask+0x3a>
	  osDelay(1000);
 8002656:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800265a:	f006 faa1 	bl	8008ba0 <osDelay>
	  break;
 800265e:	e020      	b.n	80026a2 <LedsTask+0xb6>
	  for (int i = 0; i < 3; i++)
 8002660:	2300      	movs	r3, #0
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	e014      	b.n	8002690 <LedsTask+0xa4>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8002666:	2200      	movs	r2, #0
 8002668:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800266c:	480d      	ldr	r0, [pc, #52]	; (80026a4 <LedsTask+0xb8>)
 800266e:	f002 ff07 	bl	8005480 <HAL_GPIO_WritePin>
		osDelay(250);
 8002672:	20fa      	movs	r0, #250	; 0xfa
 8002674:	f006 fa94 	bl	8008ba0 <osDelay>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8002678:	2201      	movs	r2, #1
 800267a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800267e:	4809      	ldr	r0, [pc, #36]	; (80026a4 <LedsTask+0xb8>)
 8002680:	f002 fefe 	bl	8005480 <HAL_GPIO_WritePin>
		osDelay(250);
 8002684:	20fa      	movs	r0, #250	; 0xfa
 8002686:	f006 fa8b 	bl	8008ba0 <osDelay>
	  for (int i = 0; i < 3; i++)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	3301      	adds	r3, #1
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	2b02      	cmp	r3, #2
 8002694:	dde7      	ble.n	8002666 <LedsTask+0x7a>
	  osDelay(1000);
 8002696:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800269a:	f006 fa81 	bl	8008ba0 <osDelay>
	  break;
 800269e:	e000      	b.n	80026a2 <LedsTask+0xb6>
	  break;
 80026a0:	bf00      	nop
	switch (operationMode)
 80026a2:	e7a9      	b.n	80025f8 <LedsTask+0xc>
 80026a4:	40021000 	.word	0x40021000

080026a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ae:	f107 0314 	add.w	r3, r7, #20
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	605a      	str	r2, [r3, #4]
 80026b8:	609a      	str	r2, [r3, #8]
 80026ba:	60da      	str	r2, [r3, #12]
 80026bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	4b41      	ldr	r3, [pc, #260]	; (80027c8 <MX_GPIO_Init+0x120>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	4a40      	ldr	r2, [pc, #256]	; (80027c8 <MX_GPIO_Init+0x120>)
 80026c8:	f043 0310 	orr.w	r3, r3, #16
 80026cc:	6313      	str	r3, [r2, #48]	; 0x30
 80026ce:	4b3e      	ldr	r3, [pc, #248]	; (80027c8 <MX_GPIO_Init+0x120>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	4b3a      	ldr	r3, [pc, #232]	; (80027c8 <MX_GPIO_Init+0x120>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	4a39      	ldr	r2, [pc, #228]	; (80027c8 <MX_GPIO_Init+0x120>)
 80026e4:	f043 0304 	orr.w	r3, r3, #4
 80026e8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ea:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <MX_GPIO_Init+0x120>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	4b33      	ldr	r3, [pc, #204]	; (80027c8 <MX_GPIO_Init+0x120>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	4a32      	ldr	r2, [pc, #200]	; (80027c8 <MX_GPIO_Init+0x120>)
 8002700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002704:	6313      	str	r3, [r2, #48]	; 0x30
 8002706:	4b30      	ldr	r3, [pc, #192]	; (80027c8 <MX_GPIO_Init+0x120>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	4b2c      	ldr	r3, [pc, #176]	; (80027c8 <MX_GPIO_Init+0x120>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4a2b      	ldr	r2, [pc, #172]	; (80027c8 <MX_GPIO_Init+0x120>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6313      	str	r3, [r2, #48]	; 0x30
 8002722:	4b29      	ldr	r3, [pc, #164]	; (80027c8 <MX_GPIO_Init+0x120>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	607b      	str	r3, [r7, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	603b      	str	r3, [r7, #0]
 8002732:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <MX_GPIO_Init+0x120>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	4a24      	ldr	r2, [pc, #144]	; (80027c8 <MX_GPIO_Init+0x120>)
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	6313      	str	r3, [r2, #48]	; 0x30
 800273e:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <MX_GPIO_Init+0x120>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI2_FLASH_CS_Pin|SPI2_NRF_CS_Pin, GPIO_PIN_RESET);
 800274a:	2200      	movs	r2, #0
 800274c:	f44f 7184 	mov.w	r1, #264	; 0x108
 8002750:	481e      	ldr	r0, [pc, #120]	; (80027cc <MX_GPIO_Init+0x124>)
 8002752:	f002 fe95 	bl	8005480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_DC_Pin|SPI1_RESET_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8002756:	2200      	movs	r2, #0
 8002758:	2119      	movs	r1, #25
 800275a:	481d      	ldr	r0, [pc, #116]	; (80027d0 <MX_GPIO_Init+0x128>)
 800275c:	f002 fe90 	bl	8005480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 8002760:	2201      	movs	r2, #1
 8002762:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002766:	4819      	ldr	r0, [pc, #100]	; (80027cc <MX_GPIO_Init+0x124>)
 8002768:	f002 fe8a 	bl	8005480 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SPI2_FLASH_CS_Pin|SPI2_NRF_CS_Pin|LED1_Pin|LED2_Pin
 800276c:	f24e 1308 	movw	r3, #57608	; 0xe108
 8002770:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002772:	2301      	movs	r3, #1
 8002774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277a:	2300      	movs	r3, #0
 800277c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800277e:	f107 0314 	add.w	r3, r7, #20
 8002782:	4619      	mov	r1, r3
 8002784:	4811      	ldr	r0, [pc, #68]	; (80027cc <MX_GPIO_Init+0x124>)
 8002786:	f002 fcc7 	bl	8005118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin|SPI1_RESET_Pin|SPI1_CS_Pin;
 800278a:	2319      	movs	r3, #25
 800278c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278e:	2301      	movs	r3, #1
 8002790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002796:	2300      	movs	r3, #0
 8002798:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279a:	f107 0314 	add.w	r3, r7, #20
 800279e:	4619      	mov	r1, r3
 80027a0:	480b      	ldr	r0, [pc, #44]	; (80027d0 <MX_GPIO_Init+0x128>)
 80027a2:	f002 fcb9 	bl	8005118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = BT_SW1_Pin|BT_SW2_Pin|BT_SW3_Pin;
 80027a6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80027aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	4619      	mov	r1, r3
 80027ba:	4804      	ldr	r0, [pc, #16]	; (80027cc <MX_GPIO_Init+0x124>)
 80027bc:	f002 fcac 	bl	8005118 <HAL_GPIO_Init>

}
 80027c0:	bf00      	nop
 80027c2:	3728      	adds	r7, #40	; 0x28
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40020000 	.word	0x40020000

080027d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <MX_I2C1_Init+0x50>)
 80027da:	4a13      	ldr	r2, [pc, #76]	; (8002828 <MX_I2C1_Init+0x54>)
 80027dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80027de:	4b11      	ldr	r3, [pc, #68]	; (8002824 <MX_I2C1_Init+0x50>)
 80027e0:	4a12      	ldr	r2, [pc, #72]	; (800282c <MX_I2C1_Init+0x58>)
 80027e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027e4:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <MX_I2C1_Init+0x50>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <MX_I2C1_Init+0x50>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <MX_I2C1_Init+0x50>)
 80027f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027f8:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <MX_I2C1_Init+0x50>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <MX_I2C1_Init+0x50>)
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002804:	4b07      	ldr	r3, [pc, #28]	; (8002824 <MX_I2C1_Init+0x50>)
 8002806:	2200      	movs	r2, #0
 8002808:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <MX_I2C1_Init+0x50>)
 800280c:	2200      	movs	r2, #0
 800280e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002810:	4804      	ldr	r0, [pc, #16]	; (8002824 <MX_I2C1_Init+0x50>)
 8002812:	f002 fe69 	bl	80054e8 <HAL_I2C_Init>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800281c:	f000 fa3c 	bl	8002c98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}
 8002824:	200018d4 	.word	0x200018d4
 8002828:	40005400 	.word	0x40005400
 800282c:	00061a80 	.word	0x00061a80

08002830 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a19      	ldr	r2, [pc, #100]	; (80028b4 <HAL_I2C_MspInit+0x84>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d12c      	bne.n	80028ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	4b18      	ldr	r3, [pc, #96]	; (80028b8 <HAL_I2C_MspInit+0x88>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	4a17      	ldr	r2, [pc, #92]	; (80028b8 <HAL_I2C_MspInit+0x88>)
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	6313      	str	r3, [r2, #48]	; 0x30
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <HAL_I2C_MspInit+0x88>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800286e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002874:	2312      	movs	r3, #18
 8002876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287c:	2303      	movs	r3, #3
 800287e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002880:	2304      	movs	r3, #4
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002884:	f107 0314 	add.w	r3, r7, #20
 8002888:	4619      	mov	r1, r3
 800288a:	480c      	ldr	r0, [pc, #48]	; (80028bc <HAL_I2C_MspInit+0x8c>)
 800288c:	f002 fc44 	bl	8005118 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <HAL_I2C_MspInit+0x88>)
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	4a07      	ldr	r2, [pc, #28]	; (80028b8 <HAL_I2C_MspInit+0x88>)
 800289a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800289e:	6413      	str	r3, [r2, #64]	; 0x40
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_I2C_MspInit+0x88>)
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80028ac:	bf00      	nop
 80028ae:	3728      	adds	r7, #40	; 0x28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40005400 	.word	0x40005400
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40020400 	.word	0x40020400

080028c0 <lfs_w25qflash_config_init>:



void lfs_w25qflash_config_init ()

{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0

littlefs_config.read = lfs_w25qflash_read;
 80028c4:	4b16      	ldr	r3, [pc, #88]	; (8002920 <lfs_w25qflash_config_init+0x60>)
 80028c6:	4a17      	ldr	r2, [pc, #92]	; (8002924 <lfs_w25qflash_config_init+0x64>)
 80028c8:	605a      	str	r2, [r3, #4]
littlefs_config.prog = lfs_w25qflash_prog;
 80028ca:	4b15      	ldr	r3, [pc, #84]	; (8002920 <lfs_w25qflash_config_init+0x60>)
 80028cc:	4a16      	ldr	r2, [pc, #88]	; (8002928 <lfs_w25qflash_config_init+0x68>)
 80028ce:	609a      	str	r2, [r3, #8]
littlefs_config.erase = lfs_w25qflash_erase;
 80028d0:	4b13      	ldr	r3, [pc, #76]	; (8002920 <lfs_w25qflash_config_init+0x60>)
 80028d2:	4a16      	ldr	r2, [pc, #88]	; (800292c <lfs_w25qflash_config_init+0x6c>)
 80028d4:	60da      	str	r2, [r3, #12]
littlefs_config.sync = lfs_w25qflash_sync;
 80028d6:	4b12      	ldr	r3, [pc, #72]	; (8002920 <lfs_w25qflash_config_init+0x60>)
 80028d8:	4a15      	ldr	r2, [pc, #84]	; (8002930 <lfs_w25qflash_config_init+0x70>)
 80028da:	611a      	str	r2, [r3, #16]
#ifdef LFS_THREADSAFE
littlefs_config.lock = lfs_lock;
littlefs_config.unlock = lfs_unlock;
#endif

 littlefs_config.read_size = w25qxx.PageSize;
 80028dc:	4b15      	ldr	r3, [pc, #84]	; (8002934 <lfs_w25qflash_config_init+0x74>)
 80028de:	895b      	ldrh	r3, [r3, #10]
 80028e0:	461a      	mov	r2, r3
 80028e2:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <lfs_w25qflash_config_init+0x60>)
 80028e4:	615a      	str	r2, [r3, #20]
 littlefs_config.prog_size = w25qxx.PageSize;
 80028e6:	4b13      	ldr	r3, [pc, #76]	; (8002934 <lfs_w25qflash_config_init+0x74>)
 80028e8:	895b      	ldrh	r3, [r3, #10]
 80028ea:	461a      	mov	r2, r3
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <lfs_w25qflash_config_init+0x60>)
 80028ee:	619a      	str	r2, [r3, #24]
 littlefs_config.block_size = w25qxx.SectorSize;
 80028f0:	4b10      	ldr	r3, [pc, #64]	; (8002934 <lfs_w25qflash_config_init+0x74>)
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <lfs_w25qflash_config_init+0x60>)
 80028f6:	61d3      	str	r3, [r2, #28]
 littlefs_config.block_count = w25qxx.SectorCount;
 80028f8:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <lfs_w25qflash_config_init+0x74>)
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	4a08      	ldr	r2, [pc, #32]	; (8002920 <lfs_w25qflash_config_init+0x60>)
 80028fe:	6213      	str	r3, [r2, #32]
 littlefs_config.block_cycles = 100;
 8002900:	4b07      	ldr	r3, [pc, #28]	; (8002920 <lfs_w25qflash_config_init+0x60>)
 8002902:	2264      	movs	r2, #100	; 0x64
 8002904:	625a      	str	r2, [r3, #36]	; 0x24
 littlefs_config.cache_size = LITTLEFS_CACHE_SIZE;
 8002906:	4b06      	ldr	r3, [pc, #24]	; (8002920 <lfs_w25qflash_config_init+0x60>)
 8002908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800290c:	629a      	str	r2, [r3, #40]	; 0x28
 littlefs_config.lookahead_size = LITTLEFS_LOOKAHEAD_SIZE;
 800290e:	4b04      	ldr	r3, [pc, #16]	; (8002920 <lfs_w25qflash_config_init+0x60>)
 8002910:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002914:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002916:	bf00      	nop
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	20001928 	.word	0x20001928
 8002924:	08002939 	.word	0x08002939
 8002928:	08002969 	.word	0x08002969
 800292c:	08002999 	.word	0x08002999
 8002930:	080029b3 	.word	0x080029b3
 8002934:	200135e0 	.word	0x200135e0

08002938 <lfs_w25qflash_read>:


/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de leitura
 */
int lfs_w25qflash_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]

	if (W25qxx_ReadSector((uint8_t*) buffer, block, off, size)) {
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	6838      	ldr	r0, [r7, #0]
 800294e:	f020 fc8d 	bl	802326c <W25qxx_ReadSector>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <lfs_w25qflash_read+0x24>

		LOG2("Leitura da flash no  - bloco %lu - off %lu - %lu bytes lidos\r\n", block, off, size);

		return LFS_ERR_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	e001      	b.n	8002960 <lfs_w25qflash_read+0x28>

	} else {

	  return LFS_ERR_CORRUPT;
 800295c:	f06f 0353 	mvn.w	r3, #83	; 0x53
	}
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <lfs_w25qflash_prog>:

/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de escrita
 */

int lfs_w25qflash_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size) {
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]

	if (W25qxx_WriteSector((uint8_t*) buffer, block, off, size)) {
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	68b9      	ldr	r1, [r7, #8]
 800297c:	6838      	ldr	r0, [r7, #0]
 800297e:	f020 fb93 	bl	80230a8 <W25qxx_WriteSector>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <lfs_w25qflash_prog+0x24>

		LOG2("Escrita da flash no - bloco %lu - off %lu  - %lu bytes escritos\r\n", block, off, size);

		return LFS_ERR_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	e001      	b.n	8002990 <lfs_w25qflash_prog+0x28>

	} else {

		return LFS_ERR_CORRUPT;
 800298c:	f06f 0353 	mvn.w	r3, #83	; 0x53
	}
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <lfs_w25qflash_erase>:

/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de apagamento (erase)
 */
int lfs_w25qflash_erase(const struct lfs_config *c, lfs_block_t block) {
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]

  	 W25qxx_EraseSector(block);
 80029a2:	6838      	ldr	r0, [r7, #0]
 80029a4:	f020 fa8c 	bl	8022ec0 <W25qxx_EraseSector>
	return LFS_ERR_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <lfs_w25qflash_sync>:
/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de sincronismo
 * 		  (para a Flash NAND esta função não é necessária, apenas retorna OK)
 */

int lfs_w25qflash_sync(const struct lfs_config *c) {
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]

	return LFS_ERR_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <lfs_get_default_config>:


int lfs_get_default_config(struct lfs_config *lfsc)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]

	lfs_w25qflash_config_init();
 80029d0:	f7ff ff76 	bl	80028c0 <lfs_w25qflash_config_init>

    *lfsc = littlefs_config; /* copy pre-initialized lfs config structure */
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a06      	ldr	r2, [pc, #24]	; (80029f0 <lfs_get_default_config+0x28>)
 80029d8:	4618      	mov	r0, r3
 80029da:	4611      	mov	r1, r2
 80029dc:	234c      	movs	r3, #76	; 0x4c
 80029de:	461a      	mov	r2, r3
 80029e0:	f021 fde3 	bl	80245aa <memcpy>
    return 0;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20001928 	.word	0x20001928

080029f4 <lfs_storage_init>:

int lfs_storage_init(const struct lfs_config *lfsc)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
    uint16_t status;

    /* initialize mflash */
    status = W25qxx_Init();
 80029fc:	f020 f98e 	bl	8022d1c <W25qxx_Init>
 8002a00:	4603      	mov	r3, r0
 8002a02:	81fb      	strh	r3, [r7, #14]

    return status;
 8002a04:	89fb      	ldrh	r3, [r7, #14]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a12:	f000 ffdd 	bl	80039d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a16:	f000 f817 	bl	8002a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a1a:	f7ff fe45 	bl	80026a8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8002a1e:	f000 fb8f 	bl	8003140 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8002a22:	f000 fdd9 	bl	80035d8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002a26:	f7ff fed5 	bl	80027d4 <MX_I2C1_Init>


  /* USER CODE BEGIN 2 */
  HorusIhmInit();
 8002a2a:	f000 f8ad 	bl	8002b88 <HorusIhmInit>
  FileSystemInit();
 8002a2e:	f7fe fdd9 	bl	80015e4 <FileSystemInit>
  CfgFilesInit();
 8002a32:	f7ff fa51 	bl	8001ed8 <CfgFilesInit>
  ModbusInit();
 8002a36:	f01f fe2d 	bl	8022694 <ModbusInit>
  AdapterSSD1306_Init();
 8002a3a:	f7fe fa57 	bl	8000eec <AdapterSSD1306_Init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002a3e:	f7ff fc6d 	bl	800231c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002a42:	f006 f84a 	bl	8008ada <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002a46:	e7fe      	b.n	8002a46 <main+0x38>

08002a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b094      	sub	sp, #80	; 0x50
 8002a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a4e:	f107 0320 	add.w	r3, r7, #32
 8002a52:	2230      	movs	r2, #48	; 0x30
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f021 fc82 	bl	8024360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a5c:	f107 030c 	add.w	r3, r7, #12
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	4b28      	ldr	r3, [pc, #160]	; (8002b14 <SystemClock_Config+0xcc>)
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	4a27      	ldr	r2, [pc, #156]	; (8002b14 <SystemClock_Config+0xcc>)
 8002a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7c:	4b25      	ldr	r3, [pc, #148]	; (8002b14 <SystemClock_Config+0xcc>)
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a88:	2300      	movs	r3, #0
 8002a8a:	607b      	str	r3, [r7, #4]
 8002a8c:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <SystemClock_Config+0xd0>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a21      	ldr	r2, [pc, #132]	; (8002b18 <SystemClock_Config+0xd0>)
 8002a92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	4b1f      	ldr	r3, [pc, #124]	; (8002b18 <SystemClock_Config+0xd0>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa0:	607b      	str	r3, [r7, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ab2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002ab8:	2319      	movs	r3, #25
 8002aba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002abc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002ac0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002ac6:	2304      	movs	r3, #4
 8002ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aca:	f107 0320 	add.w	r3, r7, #32
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f003 f9b8 	bl	8005e44 <HAL_RCC_OscConfig>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002ada:	f000 f8dd 	bl	8002c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ade:	230f      	movs	r3, #15
 8002ae0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002aea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002aee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002af4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002af6:	f107 030c 	add.w	r3, r7, #12
 8002afa:	2105      	movs	r1, #5
 8002afc:	4618      	mov	r0, r3
 8002afe:	f003 fc19 	bl	8006334 <HAL_RCC_ClockConfig>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002b08:	f000 f8c6 	bl	8002c98 <Error_Handler>
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	3750      	adds	r7, #80	; 0x50
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40007000 	.word	0x40007000

08002b1c <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
//	return ITM_SendChar(ch);
  unsigned char byte = ch;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	73fb      	strb	r3, [r7, #15]
  if (HAL_UART_Transmit(&huart1, &byte, 1, 100) != HAL_OK)
 8002b2a:	f107 010f 	add.w	r1, r7, #15
 8002b2e:	2364      	movs	r3, #100	; 0x64
 8002b30:	2201      	movs	r2, #1
 8002b32:	4806      	ldr	r0, [pc, #24]	; (8002b4c <__io_putchar+0x30>)
 8002b34:	f004 fed8 	bl	80078e8 <HAL_UART_Transmit>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <__io_putchar+0x26>
  {

    return 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e000      	b.n	8002b44 <__io_putchar+0x28>
  }
  return ch;
 8002b42:	687b      	ldr	r3, [r7, #4]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20001a28 	.word	0x20001a28

08002b50 <HorusOperationMode>:

void HorusOperationMode(TOperationMode operationMode)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
  switch (operationMode)
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d009      	beq.n	8002b74 <HorusOperationMode+0x24>
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	dc09      	bgt.n	8002b78 <HorusOperationMode+0x28>
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d009      	beq.n	8002b7c <HorusOperationMode+0x2c>
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d000      	beq.n	8002b6e <HorusOperationMode+0x1e>

	break;

  default:

	break;
 8002b6c:	e004      	b.n	8002b78 <HorusOperationMode+0x28>
	ModbusServerInit();
 8002b6e:	f000 facb 	bl	8003108 <ModbusServerInit>
	break;
 8002b72:	e004      	b.n	8002b7e <HorusOperationMode+0x2e>
	break;
 8002b74:	bf00      	nop
 8002b76:	e002      	b.n	8002b7e <HorusOperationMode+0x2e>
	break;
 8002b78:	bf00      	nop
 8002b7a:	e000      	b.n	8002b7e <HorusOperationMode+0x2e>
	break;
 8002b7c:	bf00      	nop
  }

}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <HorusIhmInit>:


void HorusIhmInit()
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0

  while (initTimeou < 100)
 8002b8c:	e00d      	b.n	8002baa <HorusIhmInit+0x22>
  {
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8002b8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b92:	4835      	ldr	r0, [pc, #212]	; (8002c68 <HorusIhmInit+0xe0>)
 8002b94:	f002 fc8d 	bl	80054b2 <HAL_GPIO_TogglePin>
	HAL_Delay(30);
 8002b98:	201e      	movs	r0, #30
 8002b9a:	f000 ff5b 	bl	8003a54 <HAL_Delay>
	initTimeou++;
 8002b9e:	4b33      	ldr	r3, [pc, #204]	; (8002c6c <HorusIhmInit+0xe4>)
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	4b31      	ldr	r3, [pc, #196]	; (8002c6c <HorusIhmInit+0xe4>)
 8002ba8:	801a      	strh	r2, [r3, #0]
  while (initTimeou < 100)
 8002baa:	4b30      	ldr	r3, [pc, #192]	; (8002c6c <HorusIhmInit+0xe4>)
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	2b63      	cmp	r3, #99	; 0x63
 8002bb0:	d9ed      	bls.n	8002b8e <HorusIhmInit+0x6>
  }

  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bb8:	482b      	ldr	r0, [pc, #172]	; (8002c68 <HorusIhmInit+0xe0>)
 8002bba:	f002 fc61 	bl	8005480 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bc4:	4828      	ldr	r0, [pc, #160]	; (8002c68 <HorusIhmInit+0xe0>)
 8002bc6:	f002 fc5b 	bl	8005480 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bd0:	4825      	ldr	r0, [pc, #148]	; (8002c68 <HorusIhmInit+0xe0>)
 8002bd2:	f002 fc55 	bl	8005480 <HAL_GPIO_WritePin>

  initTimeou = 0;
 8002bd6:	4b25      	ldr	r3, [pc, #148]	; (8002c6c <HorusIhmInit+0xe4>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	801a      	strh	r2, [r3, #0]

  while (initTimeou < 20)
 8002bdc:	e02c      	b.n	8002c38 <HorusIhmInit+0xb0>
  {

	if (HAL_GPIO_ReadPin(BT_SW3_GPIO_Port, BT_SW3_Pin) == 0)
 8002bde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002be2:	4821      	ldr	r0, [pc, #132]	; (8002c68 <HorusIhmInit+0xe0>)
 8002be4:	f002 fc34 	bl	8005450 <HAL_GPIO_ReadPin>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d103      	bne.n	8002bf6 <HorusIhmInit+0x6e>
	{
	  operationMode = NET_MODE;
 8002bee:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <HorusIhmInit+0xe8>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]

	  break;
 8002bf4:	e024      	b.n	8002c40 <HorusIhmInit+0xb8>
	}

	if (HAL_GPIO_ReadPin(BT_SW2_GPIO_Port, BT_SW2_Pin) == 0)
 8002bf6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bfa:	481b      	ldr	r0, [pc, #108]	; (8002c68 <HorusIhmInit+0xe0>)
 8002bfc:	f002 fc28 	bl	8005450 <HAL_GPIO_ReadPin>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d103      	bne.n	8002c0e <HorusIhmInit+0x86>
	{
	  operationMode = CFG_MODE;
 8002c06:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <HorusIhmInit+0xe8>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	701a      	strb	r2, [r3, #0]

	  break;
 8002c0c:	e018      	b.n	8002c40 <HorusIhmInit+0xb8>

	}

	if (HAL_GPIO_ReadPin(BT_SW1_GPIO_Port, BT_SW1_Pin) == 0)
 8002c0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c12:	4815      	ldr	r0, [pc, #84]	; (8002c68 <HorusIhmInit+0xe0>)
 8002c14:	f002 fc1c 	bl	8005450 <HAL_GPIO_ReadPin>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d103      	bne.n	8002c26 <HorusIhmInit+0x9e>
	{
	  operationMode = BOOT_MODE;
 8002c1e:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <HorusIhmInit+0xe8>)
 8002c20:	2202      	movs	r2, #2
 8002c22:	701a      	strb	r2, [r3, #0]
	  break;
 8002c24:	e00c      	b.n	8002c40 <HorusIhmInit+0xb8>
	}

	initTimeou++;
 8002c26:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <HorusIhmInit+0xe4>)
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <HorusIhmInit+0xe4>)
 8002c30:	801a      	strh	r2, [r3, #0]
	HAL_Delay(100);
 8002c32:	2064      	movs	r0, #100	; 0x64
 8002c34:	f000 ff0e 	bl	8003a54 <HAL_Delay>
  while (initTimeou < 20)
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <HorusIhmInit+0xe4>)
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	2b13      	cmp	r3, #19
 8002c3e:	d9ce      	bls.n	8002bde <HorusIhmInit+0x56>
  }

  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8002c40:	2201      	movs	r2, #1
 8002c42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c46:	4808      	ldr	r0, [pc, #32]	; (8002c68 <HorusIhmInit+0xe0>)
 8002c48:	f002 fc1a 	bl	8005480 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c52:	4805      	ldr	r0, [pc, #20]	; (8002c68 <HorusIhmInit+0xe0>)
 8002c54:	f002 fc14 	bl	8005480 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c5e:	4802      	ldr	r0, [pc, #8]	; (8002c68 <HorusIhmInit+0xe0>)
 8002c60:	f002 fc0e 	bl	8005480 <HAL_GPIO_WritePin>

}
 8002c64:	bf00      	nop
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	20001976 	.word	0x20001976
 8002c70:	20001974 	.word	0x20001974

08002c74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d101      	bne.n	8002c8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c86:	f000 fec5 	bl	8003a14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40002000 	.word	0x40002000

08002c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c9c:	b672      	cpsid	i
}
 8002c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ca0:	e7fe      	b.n	8002ca0 <Error_Handler+0x8>
	...

08002ca4 <ModbusStatusInfo>:
//#define LOG2(...)
#define LOG2 LOG


static void ModbusStatusInfo(bool open)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b0b2      	sub	sp, #200	; 0xc8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	71fb      	strb	r3, [r7, #7]
	MenuData_t menu = {0};
 8002cae:	f107 0308 	add.w	r3, r7, #8
 8002cb2:	22bd      	movs	r2, #189	; 0xbd
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f021 fb52 	bl	8024360 <memset>
	if (open)
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <ModbusStatusInfo+0x32>
	{

		sprintf(menu.items[PAGE_1][LINE_0], "CFG:CN:PORT:%d",MODBUS_SERVER_TCP_PORT);
 8002cc2:	f107 0308 	add.w	r3, r7, #8
 8002cc6:	333f      	adds	r3, #63	; 0x3f
 8002cc8:	f245 52f0 	movw	r2, #22000	; 0x55f0
 8002ccc:	490b      	ldr	r1, [pc, #44]	; (8002cfc <ModbusStatusInfo+0x58>)
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f021 fa24 	bl	802411c <siprintf>
 8002cd4:	e008      	b.n	8002ce8 <ModbusStatusInfo+0x44>
	}
	else
	{
		sprintf(menu.items[PAGE_1][LINE_0], "CFG:DC:PORT:%d",MODBUS_SERVER_TCP_PORT);
 8002cd6:	f107 0308 	add.w	r3, r7, #8
 8002cda:	333f      	adds	r3, #63	; 0x3f
 8002cdc:	f245 52f0 	movw	r2, #22000	; 0x55f0
 8002ce0:	4907      	ldr	r1, [pc, #28]	; (8002d00 <ModbusStatusInfo+0x5c>)
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f021 fa1a 	bl	802411c <siprintf>
	}

	AdapterSSD1306_SendDataToMenuQueueUpdate(&menu);
 8002ce8:	f107 0308 	add.w	r3, r7, #8
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fe fc45 	bl	800157c <AdapterSSD1306_SendDataToMenuQueueUpdate>
}
 8002cf2:	bf00      	nop
 8002cf4:	37c8      	adds	r7, #200	; 0xc8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	08026bf4 	.word	0x08026bf4
 8002d00:	08026c04 	.word	0x08026c04

08002d04 <formatBytes>:




static void formatBytes(uint32_t bytes, char *str)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]

	if (bytes >= MB_THRESHOLD)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d14:	d313      	bcc.n	8002d3e <formatBytes+0x3a>
	{
		sprintf(str, "%.2f MBYTES", bytes / (float) MB_THRESHOLD);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	ee07 3a90 	vmov	s15, r3
 8002d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d20:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002d80 <formatBytes+0x7c>
 8002d24:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002d28:	ee16 0a90 	vmov	r0, s13
 8002d2c:	f7fd fc1c 	bl	8000568 <__aeabi_f2d>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4913      	ldr	r1, [pc, #76]	; (8002d84 <formatBytes+0x80>)
 8002d36:	6838      	ldr	r0, [r7, #0]
 8002d38:	f021 f9f0 	bl	802411c <siprintf>
	}
	else
	{
		sprintf(str, "%lu BYTES", bytes);
	}
}
 8002d3c:	e01c      	b.n	8002d78 <formatBytes+0x74>
	else if (bytes >= KB_THRESHOLD)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d44:	d313      	bcc.n	8002d6e <formatBytes+0x6a>
		sprintf(str, "%.2f KBYTES", bytes / (float) KB_THRESHOLD);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	ee07 3a90 	vmov	s15, r3
 8002d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d50:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002d88 <formatBytes+0x84>
 8002d54:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002d58:	ee16 0a90 	vmov	r0, s13
 8002d5c:	f7fd fc04 	bl	8000568 <__aeabi_f2d>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4909      	ldr	r1, [pc, #36]	; (8002d8c <formatBytes+0x88>)
 8002d66:	6838      	ldr	r0, [r7, #0]
 8002d68:	f021 f9d8 	bl	802411c <siprintf>
}
 8002d6c:	e004      	b.n	8002d78 <formatBytes+0x74>
		sprintf(str, "%lu BYTES", bytes);
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	4907      	ldr	r1, [pc, #28]	; (8002d90 <formatBytes+0x8c>)
 8002d72:	6838      	ldr	r0, [r7, #0]
 8002d74:	f021 f9d2 	bl	802411c <siprintf>
}
 8002d78:	bf00      	nop
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	49800000 	.word	0x49800000
 8002d84:	08026c14 	.word	0x08026c14
 8002d88:	44800000 	.word	0x44800000
 8002d8c:	08026c20 	.word	0x08026c20
 8002d90:	08026c2c 	.word	0x08026c2c

08002d94 <Modbus_infoPacket>:

static void Modbus_infoPacket()
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b0ba      	sub	sp, #232	; 0xe8
 8002d98:	af00      	add	r7, sp, #0
	MenuData_t menu = { 0 };
 8002d9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d9e:	22bd      	movs	r2, #189	; 0xbd
 8002da0:	2100      	movs	r1, #0
 8002da2:	4618      	mov	r0, r3
 8002da4:	f021 fadc 	bl	8024360 <memset>
	char rx_str[17], tx_str[17];

	formatBytes(bytesRx, rx_str);
 8002da8:	4b16      	ldr	r3, [pc, #88]	; (8002e04 <Modbus_infoPacket+0x70>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f107 0214 	add.w	r2, r7, #20
 8002db0:	4611      	mov	r1, r2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff ffa6 	bl	8002d04 <formatBytes>
	formatBytes(bytesTx, tx_str);
 8002db8:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <Modbus_infoPacket+0x74>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	463a      	mov	r2, r7
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff ff9f 	bl	8002d04 <formatBytes>

	snprintf(menu.items[PAGE_1][LINE_1], sizeof(menu.items[PAGE_1][LINE_1]), "RX: %s", rx_str);
 8002dc6:	f107 0214 	add.w	r2, r7, #20
 8002dca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dce:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	4a0d      	ldr	r2, [pc, #52]	; (8002e0c <Modbus_infoPacket+0x78>)
 8002dd6:	2115      	movs	r1, #21
 8002dd8:	f021 f96c 	bl	80240b4 <sniprintf>
	snprintf(menu.items[PAGE_1][LINE_2], sizeof(menu.items[PAGE_1][LINE_2]), "TX: %s", tx_str);
 8002ddc:	463a      	mov	r2, r7
 8002dde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002de2:	f103 0069 	add.w	r0, r3, #105	; 0x69
 8002de6:	4613      	mov	r3, r2
 8002de8:	4a09      	ldr	r2, [pc, #36]	; (8002e10 <Modbus_infoPacket+0x7c>)
 8002dea:	2115      	movs	r1, #21
 8002dec:	f021 f962 	bl	80240b4 <sniprintf>

	AdapterSSD1306_SendDataToMenuQueueUpdate(&menu);
 8002df0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fe fbc1 	bl	800157c <AdapterSSD1306_SendDataToMenuQueueUpdate>
}
 8002dfa:	bf00      	nop
 8002dfc:	37e8      	adds	r7, #232	; 0xe8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20001980 	.word	0x20001980
 8002e08:	2000197c 	.word	0x2000197c
 8002e0c:	08026c38 	.word	0x08026c38
 8002e10:	08026c40 	.word	0x08026c40

08002e14 <ModbusHandleConnection>:



static uint8_t ModbusHandleConnection(struct netconn *connfd)

{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8002e1a:	af02      	add	r7, sp, #8
 8002e1c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002e20:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8002e24:	6018      	str	r0, [r3, #0]
	unsigned char recvBuffer[MODBUS_SERVER_BUF_SIZE];

	const int RECEIVE_TIMEOUT_MS = 1; // 1 segundo
 8002e26:	2301      	movs	r3, #1
 8002e28:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

	netconn_set_recvtimeout(connfd, RECEIVE_TIMEOUT_MS);
 8002e2c:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8002e30:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002e34:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	61da      	str	r2, [r3, #28]
	do
	{
		// Receber dados do cliente com um tempo limite
		struct netbuf *inbuf;

		err_t err = netconn_recv(connfd, &inbuf);
 8002e3c:	f107 0208 	add.w	r2, r7, #8
 8002e40:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002e44:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8002e48:	4611      	mov	r1, r2
 8002e4a:	6818      	ldr	r0, [r3, #0]
 8002e4c:	f00f ffba 	bl	8012dc4 <netconn_recv>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213

		if (err == ERR_OK)
 8002e56:	f997 3213 	ldrsb.w	r3, [r7, #531]	; 0x213
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d160      	bne.n	8002f20 <ModbusHandleConnection+0x10c>
		{
			if (netconn_err(connfd) == ERR_OK)
 8002e5e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002e62:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8002e66:	6818      	ldr	r0, [r3, #0]
 8002e68:	f010 f935 	bl	80130d6 <netconn_err>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d15d      	bne.n	8002f2e <ModbusHandleConnection+0x11a>
			{
				/* Process received data */
				netbuf_copy(inbuf, recvBuffer, sizeof(recvBuffer));
 8002e72:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002e76:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	f107 010c 	add.w	r1, r7, #12
 8002e82:	2300      	movs	r3, #0
 8002e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e88:	f013 fd06 	bl	8016898 <pbuf_copy_partial>
				uint16_t buffer_len = netbuf_len(inbuf);
 8002e8c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002e90:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	891b      	ldrh	r3, [r3, #8]
 8002e9a:	f8a7 3210 	strh.w	r3, [r7, #528]	; 0x210

				LOG("Received %u bytes", buffer_len);
 8002e9e:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4827      	ldr	r0, [pc, #156]	; (8002f44 <ModbusHandleConnection+0x130>)
 8002ea6:	f021 f897 	bl	8023fd8 <iprintf>

				bytesRx = bytesRx + buffer_len;
 8002eaa:	f8b7 2210 	ldrh.w	r2, [r7, #528]	; 0x210
 8002eae:	4b26      	ldr	r3, [pc, #152]	; (8002f48 <ModbusHandleConnection+0x134>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	4a24      	ldr	r2, [pc, #144]	; (8002f48 <ModbusHandleConnection+0x134>)
 8002eb6:	6013      	str	r3, [r2, #0]

				uint16_t response_len = InterpreterMODBUS(recvBuffer, buffer_len);
 8002eb8:	f8b7 2210 	ldrh.w	r2, [r7, #528]	; 0x210
 8002ebc:	f107 030c 	add.w	r3, r7, #12
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f01f fa2e 	bl	8022324 <InterpreterMODBUS>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
				netconn_write(connfd, recvBuffer, response_len, NETCONN_COPY);
 8002ece:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8002ed2:	f107 010c 	add.w	r1, r7, #12
 8002ed6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002eda:	f5a3 7005 	sub.w	r0, r3, #532	; 0x214
 8002ede:	2300      	movs	r3, #0
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	6800      	ldr	r0, [r0, #0]
 8002ee6:	f00f ffe7 	bl	8012eb8 <netconn_write_partly>

			    LOG("Send %u bytes", response_len);
 8002eea:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4816      	ldr	r0, [pc, #88]	; (8002f4c <ModbusHandleConnection+0x138>)
 8002ef2:	f021 f871 	bl	8023fd8 <iprintf>

				bytesTx = bytesTx + response_len;
 8002ef6:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8002efa:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <ModbusHandleConnection+0x13c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4413      	add	r3, r2
 8002f00:	4a13      	ldr	r2, [pc, #76]	; (8002f50 <ModbusHandleConnection+0x13c>)
 8002f02:	6013      	str	r3, [r2, #0]

				Modbus_infoPacket();
 8002f04:	f7ff ff46 	bl	8002d94 <Modbus_infoPacket>

				netbuf_delete(inbuf);
 8002f08:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002f0c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f011 fce4 	bl	80148e0 <netbuf_delete>

			    osDelay(100);
 8002f18:	2064      	movs	r0, #100	; 0x64
 8002f1a:	f005 fe41 	bl	8008ba0 <osDelay>
				continue;
 8002f1e:	e00b      	b.n	8002f38 <ModbusHandleConnection+0x124>
			}
		}
		else if(err == ERR_TIMEOUT)
 8002f20:	f997 3213 	ldrsb.w	r3, [r7, #531]	; 0x213
 8002f24:	f113 0f03 	cmn.w	r3, #3
 8002f28:	d005      	beq.n	8002f36 <ModbusHandleConnection+0x122>

		osDelay(10);

	} while (1);

	return 1;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e005      	b.n	8002f3a <ModbusHandleConnection+0x126>
		osDelay(10);
 8002f2e:	200a      	movs	r0, #10
 8002f30:	f005 fe36 	bl	8008ba0 <osDelay>
 8002f34:	e782      	b.n	8002e3c <ModbusHandleConnection+0x28>
			continue;
 8002f36:	bf00      	nop
	{
 8002f38:	e780      	b.n	8002e3c <ModbusHandleConnection+0x28>
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	08026c48 	.word	0x08026c48
 8002f48:	20001980 	.word	0x20001980
 8002f4c:	08026c5c 	.word	0x08026c5c
 8002f50:	2000197c 	.word	0x2000197c

08002f54 <Modbus_activateTcpKeepAlive>:


void Modbus_activateTcpKeepAlive(struct netconn *connfd, int idleTime, int interval, int count) {
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
 8002f60:	603b      	str	r3, [r7, #0]

    if (connfd == NULL || connfd->type != NETCONN_TCP || connfd->pcb.tcp == NULL) {
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d030      	beq.n	8002fca <Modbus_activateTcpKeepAlive+0x76>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d12c      	bne.n	8002fca <Modbus_activateTcpKeepAlive+0x76>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d028      	beq.n	8002fca <Modbus_activateTcpKeepAlive+0x76>
        return;
    }
    struct tcp_pcb *pcb = connfd->pcb.tcp;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	617b      	str	r3, [r7, #20]

    LOCK_TCPIP_CORE();
 8002f7e:	4815      	ldr	r0, [pc, #84]	; (8002fd4 <Modbus_activateTcpKeepAlive+0x80>)
 8002f80:	f01e ffe8 	bl	8021f54 <sys_mutex_lock>
    ip_set_option(connfd->pcb.ip, SO_KEEPALIVE);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	7a5a      	ldrb	r2, [r3, #9]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f042 0208 	orr.w	r2, r2, #8
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	725a      	strb	r2, [r3, #9]
    pcb->keep_idle = idleTime * 1000;    // Tempo de ociosidade em milissegundos
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f9c:	fb02 f303 	mul.w	r3, r2, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->keep_intvl = interval * 1000;   // Intervalo entre as tentativas em milissegundos
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fae:	fb02 f303 	mul.w	r3, r2, r3
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    pcb->keep_cnt = count;               // Número de tentativas
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    UNLOCK_TCPIP_CORE();
 8002fc2:	4804      	ldr	r0, [pc, #16]	; (8002fd4 <Modbus_activateTcpKeepAlive+0x80>)
 8002fc4:	f01e ffd5 	bl	8021f72 <sys_mutex_unlock>
 8002fc8:	e000      	b.n	8002fcc <Modbus_activateTcpKeepAlive+0x78>
        return;
 8002fca:	bf00      	nop
}
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	2000fa80 	.word	0x2000fa80

08002fd8 <ModbusTcpSeverTask>:

void ModbusTcpSeverTask(void const *argument)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN TcpSeverTask */
	struct netconn *conn, *newconn;
	uint8_t i = MODBUS_CLOSED;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	75fb      	strb	r3, [r7, #23]


	/* Create a new TCP connection handle. */
	conn = netconn_new(NETCONN_TCP);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	2010      	movs	r0, #16
 8002fea:	f00f fba9 	bl	8012740 <netconn_new_with_proto_and_callback>
 8002fee:	6138      	str	r0, [r7, #16]

	/* Check if the connection handle was created successfully */
	if (conn == NULL)
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d103      	bne.n	8002ffe <ModbusTcpSeverTask+0x26>
	{
		/* Handle error */
	    LOG("Failed to create TCP connection handle");
 8002ff6:	483c      	ldr	r0, [pc, #240]	; (80030e8 <ModbusTcpSeverTask+0x110>)
 8002ff8:	f021 f854 	bl	80240a4 <puts>
		return;
 8002ffc:	e070      	b.n	80030e0 <ModbusTcpSeverTask+0x108>
	}

	/* Bind the connection to the specified port. */
	if (netconn_bind(conn, IP_ADDR_ANY, MODBUS_SERVER_TCP_PORT) != ERR_OK)
 8002ffe:	f245 52f0 	movw	r2, #22000	; 0x55f0
 8003002:	493a      	ldr	r1, [pc, #232]	; (80030ec <ModbusTcpSeverTask+0x114>)
 8003004:	6938      	ldr	r0, [r7, #16]
 8003006:	f00f fc55 	bl	80128b4 <netconn_bind>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <ModbusTcpSeverTask+0x4a>
	{
		/* Handle error */
	    LOG("Failed to bind to port %d", MODBUS_SERVER_TCP_PORT);
 8003010:	f245 51f0 	movw	r1, #22000	; 0x55f0
 8003014:	4836      	ldr	r0, [pc, #216]	; (80030f0 <ModbusTcpSeverTask+0x118>)
 8003016:	f020 ffdf 	bl	8023fd8 <iprintf>
		netconn_delete(conn);
 800301a:	6938      	ldr	r0, [r7, #16]
 800301c:	f00f fc2e 	bl	801287c <netconn_delete>
		return;
 8003020:	e05e      	b.n	80030e0 <ModbusTcpSeverTask+0x108>
	}

	/* Put the connection into LISTEN state. */
	if (netconn_listen(conn) != ERR_OK)
 8003022:	21ff      	movs	r1, #255	; 0xff
 8003024:	6938      	ldr	r0, [r7, #16]
 8003026:	f00f fc7d 	bl	8012924 <netconn_listen_with_backlog>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d006      	beq.n	800303e <ModbusTcpSeverTask+0x66>
	{
		/* Handle error */
	    LOG("Failed to put the connection into LISTEN state");
 8003030:	4830      	ldr	r0, [pc, #192]	; (80030f4 <ModbusTcpSeverTask+0x11c>)
 8003032:	f021 f837 	bl	80240a4 <puts>
		netconn_delete(conn);
 8003036:	6938      	ldr	r0, [r7, #16]
 8003038:	f00f fc20 	bl	801287c <netconn_delete>
		return;
 800303c:	e050      	b.n	80030e0 <ModbusTcpSeverTask+0x108>
	}

	 LOG("TCP server listening on port %d", MODBUS_SERVER_TCP_PORT);
 800303e:	f245 51f0 	movw	r1, #22000	; 0x55f0
 8003042:	482d      	ldr	r0, [pc, #180]	; (80030f8 <ModbusTcpSeverTask+0x120>)
 8003044:	f020 ffc8 	bl	8023fd8 <iprintf>

	 ModbusStatusInfo(MODBUS_CLOSED);
 8003048:	2000      	movs	r0, #0
 800304a:	f7ff fe2b 	bl	8002ca4 <ModbusStatusInfo>


	/* Infinite loop */
	for (;;)
	{
		if (i == MODBUS_CLOSED)
 800304e:	7dfb      	ldrb	r3, [r7, #23]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d117      	bne.n	8003084 <ModbusTcpSeverTask+0xac>
		{
			if (netconn_accept(conn, &newconn) == ERR_OK)
 8003054:	f107 030c 	add.w	r3, r7, #12
 8003058:	4619      	mov	r1, r3
 800305a:	6938      	ldr	r0, [r7, #16]
 800305c:	f00f fc8e 	bl	801297c <netconn_accept>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d138      	bne.n	80030d8 <ModbusTcpSeverTask+0x100>
			{
				if (newconn != NULL)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d035      	beq.n	80030d8 <ModbusTcpSeverTask+0x100>
				{
					i = MODBUS_OPEN;
 800306c:	2301      	movs	r3, #1
 800306e:	75fb      	strb	r3, [r7, #23]

					 ModbusStatusInfo(MODBUS_OPEN);
 8003070:	2001      	movs	r0, #1
 8003072:	f7ff fe17 	bl	8002ca4 <ModbusStatusInfo>
					/* Set keepalive options if enabled */
					if (MODBUS_SERVER_KEEP_ALIVE)
					{
						Modbus_activateTcpKeepAlive(newconn, keepidle,keepintvl, keepcnt);
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	2305      	movs	r3, #5
 800307a:	2205      	movs	r2, #5
 800307c:	2105      	movs	r1, #5
 800307e:	f7ff ff69 	bl	8002f54 <Modbus_activateTcpKeepAlive>
 8003082:	e029      	b.n	80030d8 <ModbusTcpSeverTask+0x100>
				}
			}
		}
		else
		{
			if (newconn != NULL && ModbusHandleConnection(newconn))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d026      	beq.n	80030d8 <ModbusTcpSeverTask+0x100>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff fec1 	bl	8002e14 <ModbusHandleConnection>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01f      	beq.n	80030d8 <ModbusTcpSeverTask+0x100>
			{
				i = MODBUS_CLOSED;
 8003098:	2300      	movs	r3, #0
 800309a:	75fb      	strb	r3, [r7, #23]
				netconn_close(newconn);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4618      	mov	r0, r3
 80030a0:	f010 f80c 	bl	80130bc <netconn_close>
				netconn_delete(newconn);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f00f fbe8 	bl	801287c <netconn_delete>
				bytesRx = 0;
 80030ac:	4b13      	ldr	r3, [pc, #76]	; (80030fc <ModbusTcpSeverTask+0x124>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
				bytesTx = 0;
 80030b2:	4b13      	ldr	r3, [pc, #76]	; (8003100 <ModbusTcpSeverTask+0x128>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
				AdapterSSD1306_Refresh(PAGE_1, LINE_1);
 80030b8:	2101      	movs	r1, #1
 80030ba:	2001      	movs	r0, #1
 80030bc:	f7fe f8c0 	bl	8001240 <AdapterSSD1306_Refresh>
				AdapterSSD1306_Refresh(PAGE_1, LINE_2);
 80030c0:	2102      	movs	r1, #2
 80030c2:	2001      	movs	r0, #1
 80030c4:	f7fe f8bc 	bl	8001240 <AdapterSSD1306_Refresh>
				ModbusStatusInfo(MODBUS_CLOSED);
 80030c8:	2000      	movs	r0, #0
 80030ca:	f7ff fdeb 	bl	8002ca4 <ModbusStatusInfo>
				Modbus_infoPacket();
 80030ce:	f7ff fe61 	bl	8002d94 <Modbus_infoPacket>
				LOG("Connection closed");
 80030d2:	480c      	ldr	r0, [pc, #48]	; (8003104 <ModbusTcpSeverTask+0x12c>)
 80030d4:	f020 ffe6 	bl	80240a4 <puts>
			}
		}

		/* Delay for a short period */
		osDelay(100);
 80030d8:	2064      	movs	r0, #100	; 0x64
 80030da:	f005 fd61 	bl	8008ba0 <osDelay>
		if (i == MODBUS_CLOSED)
 80030de:	e7b6      	b.n	800304e <ModbusTcpSeverTask+0x76>
	}
}
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	08026c6c 	.word	0x08026c6c
 80030ec:	0802af70 	.word	0x0802af70
 80030f0:	08026c94 	.word	0x08026c94
 80030f4:	08026cb0 	.word	0x08026cb0
 80030f8:	08026ce0 	.word	0x08026ce0
 80030fc:	20001980 	.word	0x20001980
 8003100:	2000197c 	.word	0x2000197c
 8003104:	08026d04 	.word	0x08026d04

08003108 <ModbusServerInit>:



void ModbusServerInit()
{
 8003108:	b5b0      	push	{r4, r5, r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af00      	add	r7, sp, #0
	/* definition and creation of tcpServerTask */
	osThreadDef(tcpServerTask, ModbusTcpSeverTask, osPriorityBelowNormal, 0, MODBUS_SERVER_TASK_STACK_SIZE);
 800310e:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <ModbusServerInit+0x30>)
 8003110:	1d3c      	adds	r4, r7, #4
 8003112:	461d      	mov	r5, r3
 8003114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003118:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800311c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	modbusTcpServerTaskHandle = osThreadCreate(osThread(tcpServerTask), NULL);
 8003120:	1d3b      	adds	r3, r7, #4
 8003122:	2100      	movs	r1, #0
 8003124:	4618      	mov	r0, r3
 8003126:	f005 fcef 	bl	8008b08 <osThreadCreate>
 800312a:	4603      	mov	r3, r0
 800312c:	4a03      	ldr	r2, [pc, #12]	; (800313c <ModbusServerInit+0x34>)
 800312e:	6013      	str	r3, [r2, #0]
}
 8003130:	bf00      	nop
 8003132:	3720      	adds	r7, #32
 8003134:	46bd      	mov	sp, r7
 8003136:	bdb0      	pop	{r4, r5, r7, pc}
 8003138:	08026d28 	.word	0x08026d28
 800313c:	20001978 	.word	0x20001978

08003140 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003144:	4b17      	ldr	r3, [pc, #92]	; (80031a4 <MX_SPI2_Init+0x64>)
 8003146:	4a18      	ldr	r2, [pc, #96]	; (80031a8 <MX_SPI2_Init+0x68>)
 8003148:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800314a:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <MX_SPI2_Init+0x64>)
 800314c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003150:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003152:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <MX_SPI2_Init+0x64>)
 8003154:	2200      	movs	r2, #0
 8003156:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003158:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <MX_SPI2_Init+0x64>)
 800315a:	2200      	movs	r2, #0
 800315c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800315e:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <MX_SPI2_Init+0x64>)
 8003160:	2200      	movs	r2, #0
 8003162:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003164:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <MX_SPI2_Init+0x64>)
 8003166:	2200      	movs	r2, #0
 8003168:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800316a:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <MX_SPI2_Init+0x64>)
 800316c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003170:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003172:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <MX_SPI2_Init+0x64>)
 8003174:	2200      	movs	r2, #0
 8003176:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003178:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <MX_SPI2_Init+0x64>)
 800317a:	2200      	movs	r2, #0
 800317c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800317e:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <MX_SPI2_Init+0x64>)
 8003180:	2200      	movs	r2, #0
 8003182:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003184:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <MX_SPI2_Init+0x64>)
 8003186:	2200      	movs	r2, #0
 8003188:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <MX_SPI2_Init+0x64>)
 800318c:	220a      	movs	r2, #10
 800318e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003190:	4804      	ldr	r0, [pc, #16]	; (80031a4 <MX_SPI2_Init+0x64>)
 8003192:	f003 fae1 	bl	8006758 <HAL_SPI_Init>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800319c:	f7ff fd7c 	bl	8002c98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80031a0:	bf00      	nop
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20001984 	.word	0x20001984
 80031a8:	40003800 	.word	0x40003800

080031ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08a      	sub	sp, #40	; 0x28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b4:	f107 0314 	add.w	r3, r7, #20
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	60da      	str	r2, [r3, #12]
 80031c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a28      	ldr	r2, [pc, #160]	; (800326c <HAL_SPI_MspInit+0xc0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d14a      	bne.n	8003264 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	4b27      	ldr	r3, [pc, #156]	; (8003270 <HAL_SPI_MspInit+0xc4>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	4a26      	ldr	r2, [pc, #152]	; (8003270 <HAL_SPI_MspInit+0xc4>)
 80031d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031dc:	6413      	str	r3, [r2, #64]	; 0x40
 80031de:	4b24      	ldr	r3, [pc, #144]	; (8003270 <HAL_SPI_MspInit+0xc4>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	4b20      	ldr	r3, [pc, #128]	; (8003270 <HAL_SPI_MspInit+0xc4>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	4a1f      	ldr	r2, [pc, #124]	; (8003270 <HAL_SPI_MspInit+0xc4>)
 80031f4:	f043 0304 	orr.w	r3, r3, #4
 80031f8:	6313      	str	r3, [r2, #48]	; 0x30
 80031fa:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <HAL_SPI_MspInit+0xc4>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_SPI_MspInit+0xc4>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	4a18      	ldr	r2, [pc, #96]	; (8003270 <HAL_SPI_MspInit+0xc4>)
 8003210:	f043 0302 	orr.w	r3, r3, #2
 8003214:	6313      	str	r3, [r2, #48]	; 0x30
 8003216:	4b16      	ldr	r3, [pc, #88]	; (8003270 <HAL_SPI_MspInit+0xc4>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003222:	230c      	movs	r3, #12
 8003224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003226:	2302      	movs	r3, #2
 8003228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	2300      	movs	r3, #0
 800322c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800322e:	2303      	movs	r3, #3
 8003230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003232:	2305      	movs	r3, #5
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003236:	f107 0314 	add.w	r3, r7, #20
 800323a:	4619      	mov	r1, r3
 800323c:	480d      	ldr	r0, [pc, #52]	; (8003274 <HAL_SPI_MspInit+0xc8>)
 800323e:	f001 ff6b 	bl	8005118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003248:	2302      	movs	r3, #2
 800324a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324c:	2300      	movs	r3, #0
 800324e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003250:	2303      	movs	r3, #3
 8003252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003254:	2305      	movs	r3, #5
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003258:	f107 0314 	add.w	r3, r7, #20
 800325c:	4619      	mov	r1, r3
 800325e:	4806      	ldr	r0, [pc, #24]	; (8003278 <HAL_SPI_MspInit+0xcc>)
 8003260:	f001 ff5a 	bl	8005118 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003264:	bf00      	nop
 8003266:	3728      	adds	r7, #40	; 0x28
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40003800 	.word	0x40003800
 8003270:	40023800 	.word	0x40023800
 8003274:	40020800 	.word	0x40020800
 8003278:	40020400 	.word	0x40020400

0800327c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	607b      	str	r3, [r7, #4]
 8003286:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <HAL_MspInit+0x54>)
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	4a11      	ldr	r2, [pc, #68]	; (80032d0 <HAL_MspInit+0x54>)
 800328c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003290:	6453      	str	r3, [r2, #68]	; 0x44
 8003292:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <HAL_MspInit+0x54>)
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329a:	607b      	str	r3, [r7, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	603b      	str	r3, [r7, #0]
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_MspInit+0x54>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <HAL_MspInit+0x54>)
 80032a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ac:	6413      	str	r3, [r2, #64]	; 0x40
 80032ae:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <HAL_MspInit+0x54>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b6:	603b      	str	r3, [r7, #0]
 80032b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80032ba:	2200      	movs	r2, #0
 80032bc:	210f      	movs	r1, #15
 80032be:	f06f 0001 	mvn.w	r0, #1
 80032c2:	f000 fca3 	bl	8003c0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800

080032d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08e      	sub	sp, #56	; 0x38
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	4b33      	ldr	r3, [pc, #204]	; (80033b8 <HAL_InitTick+0xe4>)
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	4a32      	ldr	r2, [pc, #200]	; (80033b8 <HAL_InitTick+0xe4>)
 80032ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f2:	6413      	str	r3, [r2, #64]	; 0x40
 80032f4:	4b30      	ldr	r3, [pc, #192]	; (80033b8 <HAL_InitTick+0xe4>)
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003300:	f107 0210 	add.w	r2, r7, #16
 8003304:	f107 0314 	add.w	r3, r7, #20
 8003308:	4611      	mov	r1, r2
 800330a:	4618      	mov	r0, r3
 800330c:	f003 f9f2 	bl	80066f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003316:	2b00      	cmp	r3, #0
 8003318:	d103      	bne.n	8003322 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800331a:	f003 f9c3 	bl	80066a4 <HAL_RCC_GetPCLK1Freq>
 800331e:	6378      	str	r0, [r7, #52]	; 0x34
 8003320:	e004      	b.n	800332c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003322:	f003 f9bf 	bl	80066a4 <HAL_RCC_GetPCLK1Freq>
 8003326:	4603      	mov	r3, r0
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800332c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800332e:	4a23      	ldr	r2, [pc, #140]	; (80033bc <HAL_InitTick+0xe8>)
 8003330:	fba2 2303 	umull	r2, r3, r2, r3
 8003334:	0c9b      	lsrs	r3, r3, #18
 8003336:	3b01      	subs	r3, #1
 8003338:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800333a:	4b21      	ldr	r3, [pc, #132]	; (80033c0 <HAL_InitTick+0xec>)
 800333c:	4a21      	ldr	r2, [pc, #132]	; (80033c4 <HAL_InitTick+0xf0>)
 800333e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8003340:	4b1f      	ldr	r3, [pc, #124]	; (80033c0 <HAL_InitTick+0xec>)
 8003342:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003346:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8003348:	4a1d      	ldr	r2, [pc, #116]	; (80033c0 <HAL_InitTick+0xec>)
 800334a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800334e:	4b1c      	ldr	r3, [pc, #112]	; (80033c0 <HAL_InitTick+0xec>)
 8003350:	2200      	movs	r2, #0
 8003352:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003354:	4b1a      	ldr	r3, [pc, #104]	; (80033c0 <HAL_InitTick+0xec>)
 8003356:	2200      	movs	r2, #0
 8003358:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800335a:	4b19      	ldr	r3, [pc, #100]	; (80033c0 <HAL_InitTick+0xec>)
 800335c:	2200      	movs	r2, #0
 800335e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8003360:	4817      	ldr	r0, [pc, #92]	; (80033c0 <HAL_InitTick+0xec>)
 8003362:	f003 ffcf 	bl	8007304 <HAL_TIM_Base_Init>
 8003366:	4603      	mov	r3, r0
 8003368:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800336c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003370:	2b00      	cmp	r3, #0
 8003372:	d11b      	bne.n	80033ac <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8003374:	4812      	ldr	r0, [pc, #72]	; (80033c0 <HAL_InitTick+0xec>)
 8003376:	f004 f81f 	bl	80073b8 <HAL_TIM_Base_Start_IT>
 800337a:	4603      	mov	r3, r0
 800337c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003380:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003384:	2b00      	cmp	r3, #0
 8003386:	d111      	bne.n	80033ac <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003388:	202d      	movs	r0, #45	; 0x2d
 800338a:	f000 fc5b 	bl	8003c44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b0f      	cmp	r3, #15
 8003392:	d808      	bhi.n	80033a6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8003394:	2200      	movs	r2, #0
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	202d      	movs	r0, #45	; 0x2d
 800339a:	f000 fc37 	bl	8003c0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800339e:	4a0a      	ldr	r2, [pc, #40]	; (80033c8 <HAL_InitTick+0xf4>)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	e002      	b.n	80033ac <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80033ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3738      	adds	r7, #56	; 0x38
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40023800 	.word	0x40023800
 80033bc:	431bde83 	.word	0x431bde83
 80033c0:	200019dc 	.word	0x200019dc
 80033c4:	40002000 	.word	0x40002000
 80033c8:	20000008 	.word	0x20000008

080033cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033d0:	e7fe      	b.n	80033d0 <NMI_Handler+0x4>

080033d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033d2:	b480      	push	{r7}
 80033d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033d6:	e7fe      	b.n	80033d6 <HardFault_Handler+0x4>

080033d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033dc:	e7fe      	b.n	80033dc <MemManage_Handler+0x4>

080033de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033de:	b480      	push	{r7}
 80033e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033e2:	e7fe      	b.n	80033e2 <BusFault_Handler+0x4>

080033e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033e8:	e7fe      	b.n	80033e8 <UsageFault_Handler+0x4>

080033ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033ea:	b480      	push	{r7}
 80033ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80033fc:	4802      	ldr	r0, [pc, #8]	; (8003408 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80033fe:	f004 f84b 	bl	8007498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	200019dc 	.word	0x200019dc

0800340c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003410:	4802      	ldr	r0, [pc, #8]	; (800341c <ETH_IRQHandler+0x10>)
 8003412:	f000 ffab 	bl	800436c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	2000658c 	.word	0x2000658c

08003420 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return 1;
 8003424:	2301      	movs	r3, #1
}
 8003426:	4618      	mov	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <_kill>:

int _kill(int pid, int sig)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800343a:	4b05      	ldr	r3, [pc, #20]	; (8003450 <_kill+0x20>)
 800343c:	2216      	movs	r2, #22
 800343e:	601a      	str	r2, [r3, #0]
  return -1;
 8003440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003444:	4618      	mov	r0, r3
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	2001374c 	.word	0x2001374c

08003454 <_exit>:

void _exit (int status)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800345c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff ffe5 	bl	8003430 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003466:	e7fe      	b.n	8003466 <_exit+0x12>

08003468 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	e00a      	b.n	8003490 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800347a:	f3af 8000 	nop.w
 800347e:	4601      	mov	r1, r0
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	60ba      	str	r2, [r7, #8]
 8003486:	b2ca      	uxtb	r2, r1
 8003488:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	3301      	adds	r3, #1
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	429a      	cmp	r2, r3
 8003496:	dbf0      	blt.n	800347a <_read+0x12>
  }

  return len;
 8003498:	687b      	ldr	r3, [r7, #4]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b086      	sub	sp, #24
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	e009      	b.n	80034c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	60ba      	str	r2, [r7, #8]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fb2d 	bl	8002b1c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	3301      	adds	r3, #1
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	dbf1      	blt.n	80034b4 <_write+0x12>
  }
  return len;
 80034d0:	687b      	ldr	r3, [r7, #4]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <_close>:

int _close(int file)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003502:	605a      	str	r2, [r3, #4]
  return 0;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <_isatty>:

int _isatty(int file)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800351a:	2301      	movs	r3, #1
}
 800351c:	4618      	mov	r0, r3
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
	...

08003544 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800354c:	4a14      	ldr	r2, [pc, #80]	; (80035a0 <_sbrk+0x5c>)
 800354e:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <_sbrk+0x60>)
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003558:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <_sbrk+0x64>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d102      	bne.n	8003566 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003560:	4b11      	ldr	r3, [pc, #68]	; (80035a8 <_sbrk+0x64>)
 8003562:	4a12      	ldr	r2, [pc, #72]	; (80035ac <_sbrk+0x68>)
 8003564:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003566:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <_sbrk+0x64>)
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4413      	add	r3, r2
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	429a      	cmp	r2, r3
 8003572:	d205      	bcs.n	8003580 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003574:	4b0e      	ldr	r3, [pc, #56]	; (80035b0 <_sbrk+0x6c>)
 8003576:	220c      	movs	r2, #12
 8003578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800357a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800357e:	e009      	b.n	8003594 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003580:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <_sbrk+0x64>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003586:	4b08      	ldr	r3, [pc, #32]	; (80035a8 <_sbrk+0x64>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4413      	add	r3, r2
 800358e:	4a06      	ldr	r2, [pc, #24]	; (80035a8 <_sbrk+0x64>)
 8003590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003592:	68fb      	ldr	r3, [r7, #12]
}
 8003594:	4618      	mov	r0, r3
 8003596:	371c      	adds	r7, #28
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	20020000 	.word	0x20020000
 80035a4:	00000400 	.word	0x00000400
 80035a8:	20001a24 	.word	0x20001a24
 80035ac:	20013758 	.word	0x20013758
 80035b0:	2001374c 	.word	0x2001374c

080035b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <SystemInit+0x20>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	4a05      	ldr	r2, [pc, #20]	; (80035d4 <SystemInit+0x20>)
 80035c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035c8:	bf00      	nop
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80035dc:	4b11      	ldr	r3, [pc, #68]	; (8003624 <MX_USART1_UART_Init+0x4c>)
 80035de:	4a12      	ldr	r2, [pc, #72]	; (8003628 <MX_USART1_UART_Init+0x50>)
 80035e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80035e2:	4b10      	ldr	r3, [pc, #64]	; (8003624 <MX_USART1_UART_Init+0x4c>)
 80035e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80035e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80035ea:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <MX_USART1_UART_Init+0x4c>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80035f0:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <MX_USART1_UART_Init+0x4c>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80035f6:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <MX_USART1_UART_Init+0x4c>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80035fc:	4b09      	ldr	r3, [pc, #36]	; (8003624 <MX_USART1_UART_Init+0x4c>)
 80035fe:	220c      	movs	r2, #12
 8003600:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003602:	4b08      	ldr	r3, [pc, #32]	; (8003624 <MX_USART1_UART_Init+0x4c>)
 8003604:	2200      	movs	r2, #0
 8003606:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <MX_USART1_UART_Init+0x4c>)
 800360a:	2200      	movs	r2, #0
 800360c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800360e:	4805      	ldr	r0, [pc, #20]	; (8003624 <MX_USART1_UART_Init+0x4c>)
 8003610:	f004 f91a 	bl	8007848 <HAL_UART_Init>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800361a:	f7ff fb3d 	bl	8002c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20001a28 	.word	0x20001a28
 8003628:	40011000 	.word	0x40011000

0800362c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08a      	sub	sp, #40	; 0x28
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003634:	f107 0314 	add.w	r3, r7, #20
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	60da      	str	r2, [r3, #12]
 8003642:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a19      	ldr	r2, [pc, #100]	; (80036b0 <HAL_UART_MspInit+0x84>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d12c      	bne.n	80036a8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	4b18      	ldr	r3, [pc, #96]	; (80036b4 <HAL_UART_MspInit+0x88>)
 8003654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003656:	4a17      	ldr	r2, [pc, #92]	; (80036b4 <HAL_UART_MspInit+0x88>)
 8003658:	f043 0310 	orr.w	r3, r3, #16
 800365c:	6453      	str	r3, [r2, #68]	; 0x44
 800365e:	4b15      	ldr	r3, [pc, #84]	; (80036b4 <HAL_UART_MspInit+0x88>)
 8003660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <HAL_UART_MspInit+0x88>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	4a10      	ldr	r2, [pc, #64]	; (80036b4 <HAL_UART_MspInit+0x88>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	6313      	str	r3, [r2, #48]	; 0x30
 800367a:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <HAL_UART_MspInit+0x88>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003686:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800368a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368c:	2302      	movs	r3, #2
 800368e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	2300      	movs	r3, #0
 8003692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003694:	2303      	movs	r3, #3
 8003696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003698:	2307      	movs	r3, #7
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800369c:	f107 0314 	add.w	r3, r7, #20
 80036a0:	4619      	mov	r1, r3
 80036a2:	4805      	ldr	r0, [pc, #20]	; (80036b8 <HAL_UART_MspInit+0x8c>)
 80036a4:	f001 fd38 	bl	8005118 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80036a8:	bf00      	nop
 80036aa:	3728      	adds	r7, #40	; 0x28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40011000 	.word	0x40011000
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40020000 	.word	0x40020000

080036bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80036bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80036c0:	f7ff ff78 	bl	80035b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036c4:	480c      	ldr	r0, [pc, #48]	; (80036f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036c6:	490d      	ldr	r1, [pc, #52]	; (80036fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036c8:	4a0d      	ldr	r2, [pc, #52]	; (8003700 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036cc:	e002      	b.n	80036d4 <LoopCopyDataInit>

080036ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036d2:	3304      	adds	r3, #4

080036d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036d8:	d3f9      	bcc.n	80036ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036da:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036dc:	4c0a      	ldr	r4, [pc, #40]	; (8003708 <LoopFillZerobss+0x22>)
  movs r3, #0
 80036de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036e0:	e001      	b.n	80036e6 <LoopFillZerobss>

080036e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036e4:	3204      	adds	r2, #4

080036e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036e8:	d3fb      	bcc.n	80036e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036ea:	f020 ff2f 	bl	802454c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036ee:	f7ff f98e 	bl	8002a0e <main>
  bx  lr    
 80036f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80036f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036fc:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8003700:	0802b958 	.word	0x0802b958
  ldr r2, =_sbss
 8003704:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8003708:	20013754 	.word	0x20013754

0800370c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800370c:	e7fe      	b.n	800370c <ADC_IRQHandler>

0800370e <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00b      	beq.n	8003736 <DP83848_RegisterBusIO+0x28>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d007      	beq.n	8003736 <DP83848_RegisterBusIO+0x28>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <DP83848_RegisterBusIO+0x28>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d102      	bne.n	800373c <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8003736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800373a:	e014      	b.n	8003766 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8003772:	b580      	push	{r7, lr}
 8003774:	b086      	sub	sp, #24
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	2300      	movs	r3, #0
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d17c      	bne.n	800388c <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	e01c      	b.n	80037e6 <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f107 0208 	add.w	r2, r7, #8
 80037b4:	2119      	movs	r1, #25
 80037b6:	6978      	ldr	r0, [r7, #20]
 80037b8:	4798      	blx	r3
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	da03      	bge.n	80037c8 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 80037c0:	f06f 0304 	mvn.w	r3, #4
 80037c4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80037c6:	e00b      	b.n	80037e0 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d105      	bne.n	80037e0 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	613b      	str	r3, [r7, #16]
         break;
 80037de:	e005      	b.n	80037ec <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	3301      	adds	r3, #1
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b1f      	cmp	r3, #31
 80037ea:	d9df      	bls.n	80037ac <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b1f      	cmp	r3, #31
 80037f2:	d902      	bls.n	80037fa <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 80037f4:	f06f 0302 	mvn.w	r3, #2
 80037f8:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d145      	bne.n	800388c <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6810      	ldr	r0, [r2, #0]
 8003808:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800380c:	2100      	movs	r1, #0
 800380e:	4798      	blx	r3
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	db37      	blt.n	8003886 <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6810      	ldr	r0, [r2, #0]
 800381e:	f107 0208 	add.w	r2, r7, #8
 8003822:	2100      	movs	r1, #0
 8003824:	4798      	blx	r3
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	db28      	blt.n	800387e <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	4798      	blx	r3
 8003832:	4603      	mov	r3, r0
 8003834:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8003836:	e01c      	b.n	8003872 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	4798      	blx	r3
 800383e:	4603      	mov	r3, r0
 8003840:	461a      	mov	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800384a:	d80e      	bhi.n	800386a <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6810      	ldr	r0, [r2, #0]
 8003854:	f107 0208 	add.w	r2, r7, #8
 8003858:	2100      	movs	r1, #0
 800385a:	4798      	blx	r3
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	da07      	bge.n	8003872 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8003862:	f06f 0304 	mvn.w	r3, #4
 8003866:	613b      	str	r3, [r7, #16]
                 break;
 8003868:	e010      	b.n	800388c <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 800386a:	f06f 0301 	mvn.w	r3, #1
 800386e:	613b      	str	r3, [r7, #16]
               break;
 8003870:	e00c      	b.n	800388c <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1dd      	bne.n	8003838 <DP83848_Init+0xc6>
 800387c:	e006      	b.n	800388c <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 800387e:	f06f 0304 	mvn.w	r3, #4
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	e002      	b.n	800388c <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8003886:	f06f 0303 	mvn.w	r3, #3
 800388a:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d112      	bne.n	80038b8 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	4798      	blx	r3
 8003898:	4603      	mov	r3, r0
 800389a:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 800389c:	bf00      	nop
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	4798      	blx	r3
 80038a4:	4603      	mov	r3, r0
 80038a6:	461a      	mov	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80038b0:	d9f5      	bls.n	800389e <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	605a      	str	r2, [r3, #4]
   }

   return status;
 80038b8:	693b      	ldr	r3, [r7, #16]
 }
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b084      	sub	sp, #16
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6810      	ldr	r0, [r2, #0]
 80038d6:	f107 020c 	add.w	r2, r7, #12
 80038da:	2101      	movs	r1, #1
 80038dc:	4798      	blx	r3
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	da02      	bge.n	80038ea <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 80038e4:	f06f 0304 	mvn.w	r3, #4
 80038e8:	e06e      	b.n	80039c8 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6810      	ldr	r0, [r2, #0]
 80038f2:	f107 020c 	add.w	r2, r7, #12
 80038f6:	2101      	movs	r1, #1
 80038f8:	4798      	blx	r3
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	da02      	bge.n	8003906 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8003900:	f06f 0304 	mvn.w	r3, #4
 8003904:	e060      	b.n	80039c8 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8003910:	2301      	movs	r3, #1
 8003912:	e059      	b.n	80039c8 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6810      	ldr	r0, [r2, #0]
 800391c:	f107 020c 	add.w	r2, r7, #12
 8003920:	2100      	movs	r1, #0
 8003922:	4798      	blx	r3
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	da02      	bge.n	8003930 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 800392a:	f06f 0304 	mvn.w	r3, #4
 800392e:	e04b      	b.n	80039c8 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d11b      	bne.n	8003972 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d006      	beq.n	8003952 <DP83848_GetLinkState+0x90>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 800394e:	2302      	movs	r3, #2
 8003950:	e03a      	b.n	80039c8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 800395c:	2303      	movs	r3, #3
 800395e:	e033      	b.n	80039c8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800396a:	2304      	movs	r3, #4
 800396c:	e02c      	b.n	80039c8 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 800396e:	2305      	movs	r3, #5
 8003970:	e02a      	b.n	80039c8 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6810      	ldr	r0, [r2, #0]
 800397a:	f107 020c 	add.w	r2, r7, #12
 800397e:	2110      	movs	r1, #16
 8003980:	4798      	blx	r3
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	da02      	bge.n	800398e <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8003988:	f06f 0304 	mvn.w	r3, #4
 800398c:	e01c      	b.n	80039c8 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8003998:	2306      	movs	r3, #6
 800399a:	e015      	b.n	80039c8 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f003 0306 	and.w	r3, r3, #6
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d101      	bne.n	80039aa <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80039a6:	2302      	movs	r3, #2
 80039a8:	e00e      	b.n	80039c8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 0306 	and.w	r3, r3, #6
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e007      	b.n	80039c8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 0306 	and.w	r3, r3, #6
 80039be:	2b06      	cmp	r3, #6
 80039c0:	d101      	bne.n	80039c6 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80039c2:	2304      	movs	r3, #4
 80039c4:	e000      	b.n	80039c8 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80039c6:	2305      	movs	r3, #5
    }
  }
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039d4:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <HAL_Init+0x40>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a0d      	ldr	r2, [pc, #52]	; (8003a10 <HAL_Init+0x40>)
 80039da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <HAL_Init+0x40>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a0a      	ldr	r2, [pc, #40]	; (8003a10 <HAL_Init+0x40>)
 80039e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039ec:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <HAL_Init+0x40>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a07      	ldr	r2, [pc, #28]	; (8003a10 <HAL_Init+0x40>)
 80039f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039f8:	2003      	movs	r0, #3
 80039fa:	f000 f8fc 	bl	8003bf6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039fe:	200f      	movs	r0, #15
 8003a00:	f7ff fc68 	bl	80032d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a04:	f7ff fc3a 	bl	800327c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40023c00 	.word	0x40023c00

08003a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a18:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_IncTick+0x20>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <HAL_IncTick+0x24>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4413      	add	r3, r2
 8003a24:	4a04      	ldr	r2, [pc, #16]	; (8003a38 <HAL_IncTick+0x24>)
 8003a26:	6013      	str	r3, [r2, #0]
}
 8003a28:	bf00      	nop
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	2000000c 	.word	0x2000000c
 8003a38:	20001a70 	.word	0x20001a70

08003a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a40:	4b03      	ldr	r3, [pc, #12]	; (8003a50 <HAL_GetTick+0x14>)
 8003a42:	681b      	ldr	r3, [r3, #0]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	20001a70 	.word	0x20001a70

08003a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a5c:	f7ff ffee 	bl	8003a3c <HAL_GetTick>
 8003a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a6c:	d005      	beq.n	8003a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a6e:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <HAL_Delay+0x44>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4413      	add	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a7a:	bf00      	nop
 8003a7c:	f7ff ffde 	bl	8003a3c <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d8f7      	bhi.n	8003a7c <HAL_Delay+0x28>
  {
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	bf00      	nop
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	2000000c 	.word	0x2000000c

08003a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aac:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ab8:	4013      	ands	r3, r2
 8003aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ace:	4a04      	ldr	r2, [pc, #16]	; (8003ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	60d3      	str	r3, [r2, #12]
}
 8003ad4:	bf00      	nop
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	e000ed00 	.word	0xe000ed00

08003ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ae8:	4b04      	ldr	r3, [pc, #16]	; (8003afc <__NVIC_GetPriorityGrouping+0x18>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	0a1b      	lsrs	r3, r3, #8
 8003aee:	f003 0307 	and.w	r3, r3, #7
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	e000ed00 	.word	0xe000ed00

08003b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	db0b      	blt.n	8003b2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	f003 021f 	and.w	r2, r3, #31
 8003b18:	4907      	ldr	r1, [pc, #28]	; (8003b38 <__NVIC_EnableIRQ+0x38>)
 8003b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	2001      	movs	r0, #1
 8003b22:	fa00 f202 	lsl.w	r2, r0, r2
 8003b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	e000e100 	.word	0xe000e100

08003b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	6039      	str	r1, [r7, #0]
 8003b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	db0a      	blt.n	8003b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	490c      	ldr	r1, [pc, #48]	; (8003b88 <__NVIC_SetPriority+0x4c>)
 8003b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5a:	0112      	lsls	r2, r2, #4
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	440b      	add	r3, r1
 8003b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b64:	e00a      	b.n	8003b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	4908      	ldr	r1, [pc, #32]	; (8003b8c <__NVIC_SetPriority+0x50>)
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	3b04      	subs	r3, #4
 8003b74:	0112      	lsls	r2, r2, #4
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	440b      	add	r3, r1
 8003b7a:	761a      	strb	r2, [r3, #24]
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	e000e100 	.word	0xe000e100
 8003b8c:	e000ed00 	.word	0xe000ed00

08003b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b089      	sub	sp, #36	; 0x24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f1c3 0307 	rsb	r3, r3, #7
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	bf28      	it	cs
 8003bae:	2304      	movcs	r3, #4
 8003bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	2b06      	cmp	r3, #6
 8003bb8:	d902      	bls.n	8003bc0 <NVIC_EncodePriority+0x30>
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	3b03      	subs	r3, #3
 8003bbe:	e000      	b.n	8003bc2 <NVIC_EncodePriority+0x32>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43da      	mvns	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	fa01 f303 	lsl.w	r3, r1, r3
 8003be2:	43d9      	mvns	r1, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be8:	4313      	orrs	r3, r2
         );
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3724      	adds	r7, #36	; 0x24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b082      	sub	sp, #8
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7ff ff4c 	bl	8003a9c <__NVIC_SetPriorityGrouping>
}
 8003c04:	bf00      	nop
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c1e:	f7ff ff61 	bl	8003ae4 <__NVIC_GetPriorityGrouping>
 8003c22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	68b9      	ldr	r1, [r7, #8]
 8003c28:	6978      	ldr	r0, [r7, #20]
 8003c2a:	f7ff ffb1 	bl	8003b90 <NVIC_EncodePriority>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c34:	4611      	mov	r1, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff ff80 	bl	8003b3c <__NVIC_SetPriority>
}
 8003c3c:	bf00      	nop
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff ff54 	bl	8003b00 <__NVIC_EnableIRQ>
}
 8003c58:	bf00      	nop
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e06c      	b.n	8003d4c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d106      	bne.n	8003c8a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2223      	movs	r2, #35	; 0x23
 8003c80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f004 fcf9 	bl	800867c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	4b31      	ldr	r3, [pc, #196]	; (8003d54 <HAL_ETH_Init+0xf4>)
 8003c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c92:	4a30      	ldr	r2, [pc, #192]	; (8003d54 <HAL_ETH_Init+0xf4>)
 8003c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c98:	6453      	str	r3, [r2, #68]	; 0x44
 8003c9a:	4b2e      	ldr	r3, [pc, #184]	; (8003d54 <HAL_ETH_Init+0xf4>)
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003ca6:	4b2c      	ldr	r3, [pc, #176]	; (8003d58 <HAL_ETH_Init+0xf8>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	4a2b      	ldr	r2, [pc, #172]	; (8003d58 <HAL_ETH_Init+0xf8>)
 8003cac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003cb0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003cb2:	4b29      	ldr	r3, [pc, #164]	; (8003d58 <HAL_ETH_Init+0xf8>)
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	4927      	ldr	r1, [pc, #156]	; (8003d58 <HAL_ETH_Init+0xf8>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003cc0:	4b25      	ldr	r3, [pc, #148]	; (8003d58 <HAL_ETH_Init+0xf8>)
 8003cc2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6812      	ldr	r2, [r2, #0]
 8003cd2:	f043 0301 	orr.w	r3, r3, #1
 8003cd6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003cda:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cdc:	f7ff feae 	bl	8003a3c <HAL_GetTick>
 8003ce0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003ce2:	e011      	b.n	8003d08 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003ce4:	f7ff feaa 	bl	8003a3c <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003cf2:	d909      	bls.n	8003d08 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	22e0      	movs	r2, #224	; 0xe0
 8003d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e021      	b.n	8003d4c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1e4      	bne.n	8003ce4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 ff56 	bl	8004bcc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 fffd 	bl	8004d20 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f001 f853 	bl	8004dd2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	461a      	mov	r2, r3
 8003d32:	2100      	movs	r1, #0
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 ffbb 	bl	8004cb0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2210      	movs	r2, #16
 8003d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40023800 	.word	0x40023800
 8003d58:	40013800 	.word	0x40013800

08003d5c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d6a:	2b10      	cmp	r3, #16
 8003d6c:	d17f      	bne.n	8003e6e <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2223      	movs	r2, #35	; 0x23
 8003d72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8003d8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003da0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8003db4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2204      	movs	r2, #4
 8003dbc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f9f8 	bl	80041b4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0208 	orr.w	r2, r2, #8
 8003dd2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ddc:	2001      	movs	r0, #1
 8003dde:	f7ff fe39 	bl	8003a54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f042 0204 	orr.w	r2, r2, #4
 8003df8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e02:	2001      	movs	r0, #1
 8003e04:	f7ff fe26 	bl	8003a54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 fd7c 	bl	800490e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e2c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	f043 0302 	orr.w	r3, r3, #2
 8003e40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e44:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8003e58:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8003e5c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e60:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2223      	movs	r2, #35	; 0x23
 8003e66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	e000      	b.n	8003e70 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
  }
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e86:	2b23      	cmp	r3, #35	; 0x23
 8003e88:	d170      	bne.n	8003f6c <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2223      	movs	r2, #35	; 0x23
 8003e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8003ea4:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8003ea8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003eac:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ec0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ec4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	f023 0302 	bic.w	r3, r3, #2
 8003ed8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003edc:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0204 	bic.w	r2, r2, #4
 8003eec:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ef6:	2001      	movs	r0, #1
 8003ef8:	f7ff fdac 	bl	8003a54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fd02 	bl	800490e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0208 	bic.w	r2, r2, #8
 8003f18:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f22:	2001      	movs	r0, #1
 8003f24:	f7ff fd96 	bl	8003a54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	e00e      	b.n	8003f54 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	3212      	adds	r2, #18
 8003f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f40:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	3301      	adds	r3, #1
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d9ed      	bls.n	8003f36 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2210      	movs	r2, #16
 8003f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e000      	b.n	8003f6e <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
  }
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8c:	f043 0201 	orr.w	r2, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e045      	b.n	8004026 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa0:	2b23      	cmp	r3, #35	; 0x23
 8003fa2:	d13f      	bne.n	8004024 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003fac:	2201      	movs	r2, #1
 8003fae:	6839      	ldr	r1, [r7, #0]
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 ff7b 	bl	8004eac <ETH_Prepare_Tx_Descriptors>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d009      	beq.n	8003fd0 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc2:	f043 0202 	orr.w	r2, r3, #2
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e02a      	b.n	8004026 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8003fd0:	f3bf 8f4f 	dsb	sy
}
 8003fd4:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	629a      	str	r2, [r3, #40]	; 0x28
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d904      	bls.n	8003ff2 <HAL_ETH_Transmit_IT+0x7c>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	1f1a      	subs	r2, r3, #4
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00d      	beq.n	8004020 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800400c:	461a      	mov	r2, r3
 800400e:	2304      	movs	r3, #4
 8004010:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800401a:	461a      	mov	r2, r3
 800401c:	2300      	movs	r3, #0
 800401e:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	e000      	b.n	8004026 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
  }
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b088      	sub	sp, #32
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d109      	bne.n	800405a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404c:	f043 0201 	orr.w	r2, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e0a8      	b.n	80041ac <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004060:	2b23      	cmp	r3, #35	; 0x23
 8004062:	d001      	beq.n	8004068 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0a1      	b.n	80041ac <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	3212      	adds	r2, #18
 8004074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004078:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800407e:	f1c3 0304 	rsb	r3, r3, #4
 8004082:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004084:	e06a      	b.n	800415c <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	69da      	ldr	r2, [r3, #28]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d103      	bne.n	80040b6 <HAL_ETH_ReadData+0x88>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d040      	beq.n	8004138 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00c      	beq.n	80040fa <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	0c1b      	lsrs	r3, r3, #16
 80040e6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80040ea:	3b04      	subs	r3, #4
 80040ec:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004112:	461a      	mov	r2, r3
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	b29b      	uxth	r3, r3
 8004118:	f004 fc6a 	bl	80089f0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	441a      	add	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	2200      	movs	r2, #0
 8004136:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	3301      	adds	r3, #1
 800413c:	61fb      	str	r3, [r7, #28]
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	2b03      	cmp	r3, #3
 8004142:	d902      	bls.n	800414a <HAL_ETH_ReadData+0x11c>
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	3b04      	subs	r3, #4
 8004148:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69fa      	ldr	r2, [r7, #28]
 800414e:	3212      	adds	r2, #18
 8004150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004154:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	3301      	adds	r3, #1
 800415a:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8004160:	2b00      	cmp	r3, #0
 8004162:	db06      	blt.n	8004172 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	429a      	cmp	r2, r3
 800416a:	d202      	bcs.n	8004172 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d089      	beq.n	8004086 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	441a      	add	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f814 	bl	80041b4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69fa      	ldr	r2, [r7, #28]
 8004190:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d108      	bne.n	80041aa <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	e000      	b.n	80041ac <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3720      	adds	r7, #32
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80041bc:	2300      	movs	r3, #0
 80041be:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80041c0:	2301      	movs	r3, #1
 80041c2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041c8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69fa      	ldr	r2, [r7, #28]
 80041ce:	3212      	adds	r2, #18
 80041d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041da:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80041dc:	e03d      	b.n	800425a <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d112      	bne.n	800420c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80041e6:	f107 0308 	add.w	r3, r7, #8
 80041ea:	4618      	mov	r0, r3
 80041ec:	f004 fbd0 	bl	8008990 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d102      	bne.n	80041fc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	74fb      	strb	r3, [r7, #19]
 80041fa:	e007      	b.n	800420c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	461a      	mov	r2, r3
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	461a      	mov	r2, r3
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800420c:	7cfb      	ldrb	r3, [r7, #19]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d023      	beq.n	800425a <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004216:	2b00      	cmp	r3, #0
 8004218:	d103      	bne.n	8004222 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	4a24      	ldr	r2, [pc, #144]	; (80042b0 <ETH_UpdateDescriptor+0xfc>)
 800421e:	605a      	str	r2, [r3, #4]
 8004220:	e003      	b.n	800422a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004228:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	3301      	adds	r3, #1
 800423a:	61fb      	str	r3, [r7, #28]
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	2b03      	cmp	r3, #3
 8004240:	d902      	bls.n	8004248 <ETH_UpdateDescriptor+0x94>
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	3b04      	subs	r3, #4
 8004246:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	3212      	adds	r2, #18
 800424e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004252:	617b      	str	r3, [r7, #20]
      desccount--;
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	3b01      	subs	r3, #1
 8004258:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <ETH_UpdateDescriptor+0xb2>
 8004260:	7cfb      	ldrb	r3, [r7, #19]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1bb      	bne.n	80041de <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	429a      	cmp	r2, r3
 800426e:	d01a      	beq.n	80042a6 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	3301      	adds	r3, #1
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800427a:	f3bf 8f5f 	dmb	sy
}
 800427e:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6919      	ldr	r1, [r3, #16]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4613      	mov	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	18ca      	adds	r2, r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004298:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80042a6:	bf00      	nop
 80042a8:	3720      	adds	r7, #32
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	80004600 	.word	0x80004600

080042b4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3318      	adds	r3, #24
 80042c0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80042ce:	2301      	movs	r3, #1
 80042d0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80042d2:	e03f      	b.n	8004354 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80042d4:	2301      	movs	r3, #1
 80042d6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	3b01      	subs	r3, #1
 80042dc:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	3304      	adds	r3, #4
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	3301      	adds	r3, #1
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80042fc:	7bbb      	ldrb	r3, [r7, #14]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d028      	beq.n	8004354 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68d9      	ldr	r1, [r3, #12]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	440b      	add	r3, r1
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	db1b      	blt.n	8004350 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	3304      	adds	r3, #4
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	4618      	mov	r0, r3
 8004326:	f004 fba3 	bl	8008a70 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	3304      	adds	r3, #4
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	2200      	movs	r2, #0
 8004336:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	3301      	adds	r3, #1
 800433c:	f003 0303 	and.w	r3, r3, #3
 8004340:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	62da      	str	r2, [r3, #44]	; 0x2c
 800434e:	e001      	b.n	8004354 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004350:	2300      	movs	r3, #0
 8004352:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <HAL_ETH_ReleaseTxPacket+0xac>
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1b9      	bne.n	80042d4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004382:	2b40      	cmp	r3, #64	; 0x40
 8004384:	d112      	bne.n	80043ac <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004394:	2b40      	cmp	r3, #64	; 0x40
 8004396:	d109      	bne.n	80043ac <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a0:	461a      	mov	r2, r3
 80043a2:	4b50      	ldr	r3, [pc, #320]	; (80044e4 <HAL_ETH_IRQHandler+0x178>)
 80043a4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f003 feb0 	bl	800810c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d113      	bne.n	80043e6 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d10a      	bne.n	80043e6 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d8:	461a      	mov	r2, r3
 80043da:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80043de:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f003 fea3 	bl	800812c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043f8:	d14c      	bne.n	8004494 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800440c:	d142      	bne.n	8004494 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004414:	f043 0208 	orr.w	r2, r3, #8
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800442c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004430:	d11a      	bne.n	8004468 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800443a:	695a      	ldr	r2, [r3, #20]
 800443c:	4b2a      	ldr	r3, [pc, #168]	; (80044e8 <HAL_ETH_IRQHandler+0x17c>)
 800443e:	4013      	ands	r3, r2
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6812      	ldr	r2, [r2, #0]
 8004454:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8004458:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800445c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	22e0      	movs	r2, #224	; 0xe0
 8004462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004466:	e012      	b.n	800448e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004470:	695a      	ldr	r2, [r3, #20]
 8004472:	f248 6380 	movw	r3, #34432	; 0x8680
 8004476:	4013      	ands	r3, r2
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004486:	461a      	mov	r2, r3
 8004488:	f248 6380 	movw	r3, #34432	; 0x8680
 800448c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f003 fe5c 	bl	800814c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d10e      	bne.n	80044c0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f81c 	bl	80044f0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80044c0:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <HAL_ETH_IRQHandler+0x180>)
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d006      	beq.n	80044da <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80044cc:	4b07      	ldr	r3, [pc, #28]	; (80044ec <HAL_ETH_IRQHandler+0x180>)
 80044ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80044d2:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f815 	bl	8004504 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80044da:	bf00      	nop
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	00010040 	.word	0x00010040
 80044e8:	007e2000 	.word	0x007e2000
 80044ec:	40013c00 	.word	0x40013c00

080044f0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f003 031c 	and.w	r3, r3, #28
 8004534:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	02db      	lsls	r3, r3, #11
 800453a:	b29b      	uxth	r3, r3
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	019b      	lsls	r3, r3, #6
 8004546:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	4313      	orrs	r3, r2
 800454e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f023 0302 	bic.w	r3, r3, #2
 8004556:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004568:	f7ff fa68 	bl	8003a3c <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800456e:	e00d      	b.n	800458c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004570:	f7ff fa64 	bl	8003a3c <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800457e:	d301      	bcc.n	8004584 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e010      	b.n	80045a6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1ec      	bne.n	8004570 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	b29b      	uxth	r3, r3
 800459e:	461a      	mov	r2, r3
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b086      	sub	sp, #24
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	607a      	str	r2, [r7, #4]
 80045ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f003 031c 	and.w	r3, r3, #28
 80045ca:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	02db      	lsls	r3, r3, #11
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	019b      	lsls	r3, r3, #6
 80045dc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f043 0302 	orr.w	r3, r3, #2
 80045ec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f043 0301 	orr.w	r3, r3, #1
 80045f4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004608:	f7ff fa18 	bl	8003a3c <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800460e:	e00d      	b.n	800462c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004610:	f7ff fa14 	bl	8003a3c <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800461e:	d301      	bcc.n	8004624 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e009      	b.n	8004638 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1ec      	bne.n	8004610 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e0d9      	b.n	8004808 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0310 	and.w	r3, r3, #16
 800465e:	2b00      	cmp	r3, #0
 8004660:	bf14      	ite	ne
 8004662:	2301      	movne	r3, #1
 8004664:	2300      	moveq	r3, #0
 8004666:	b2db      	uxtb	r3, r3
 8004668:	461a      	mov	r2, r3
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004688:	2b00      	cmp	r3, #0
 800468a:	bf0c      	ite	eq
 800468c:	2301      	moveq	r3, #1
 800468e:	2300      	movne	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	461a      	mov	r2, r3
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	bf14      	ite	ne
 80046a8:	2301      	movne	r3, #1
 80046aa:	2300      	moveq	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	bf0c      	ite	eq
 80046c2:	2301      	moveq	r3, #1
 80046c4:	2300      	movne	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	bf14      	ite	ne
 80046dc:	2301      	movne	r3, #1
 80046de:	2300      	moveq	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	461a      	mov	r2, r3
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800470e:	2b00      	cmp	r3, #0
 8004710:	bf0c      	ite	eq
 8004712:	2301      	moveq	r3, #1
 8004714:	2300      	movne	r3, #0
 8004716:	b2db      	uxtb	r3, r3
 8004718:	461a      	mov	r2, r3
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004728:	2b00      	cmp	r3, #0
 800472a:	bf0c      	ite	eq
 800472c:	2301      	moveq	r3, #1
 800472e:	2300      	movne	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	461a      	mov	r2, r3
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004742:	2b00      	cmp	r3, #0
 8004744:	bf14      	ite	ne
 8004746:	2301      	movne	r3, #1
 8004748:	2300      	moveq	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800476a:	2b00      	cmp	r3, #0
 800476c:	bf14      	ite	ne
 800476e:	2301      	movne	r3, #1
 8004770:	2300      	moveq	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	461a      	mov	r2, r3
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	bf14      	ite	ne
 8004788:	2301      	movne	r3, #1
 800478a:	2300      	moveq	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	461a      	mov	r2, r3
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	bf0c      	ite	eq
 80047a4:	2301      	moveq	r3, #1
 80047a6:	2300      	movne	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	461a      	mov	r2, r3
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	0c1b      	lsrs	r3, r3, #16
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	bf14      	ite	ne
 80047dc:	2301      	movne	r3, #1
 80047de:	2300      	moveq	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	bf14      	ite	ne
 80047f8:	2301      	movne	r3, #1
 80047fa:	2300      	moveq	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e00b      	b.n	8004840 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800482e:	2b10      	cmp	r3, #16
 8004830:	d105      	bne.n	800483e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004832:	6839      	ldr	r1, [r7, #0]
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f88f 	bl	8004958 <ETH_SetMACConfig>

    return HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	e000      	b.n	8004840 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
  }
}
 8004840:	4618      	mov	r0, r3
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 031c 	bic.w	r3, r3, #28
 800485e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004860:	f001 ff14 	bl	800668c <HAL_RCC_GetHCLKFreq>
 8004864:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	4a1d      	ldr	r2, [pc, #116]	; (80048e0 <HAL_ETH_SetMDIOClockRange+0x98>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d908      	bls.n	8004880 <HAL_ETH_SetMDIOClockRange+0x38>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4a1c      	ldr	r2, [pc, #112]	; (80048e4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d804      	bhi.n	8004880 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f043 0308 	orr.w	r3, r3, #8
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	e027      	b.n	80048d0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	4a18      	ldr	r2, [pc, #96]	; (80048e4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d908      	bls.n	800489a <HAL_ETH_SetMDIOClockRange+0x52>
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4a17      	ldr	r2, [pc, #92]	; (80048e8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d204      	bcs.n	800489a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f043 030c 	orr.w	r3, r3, #12
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	e01a      	b.n	80048d0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4a12      	ldr	r2, [pc, #72]	; (80048e8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d303      	bcc.n	80048aa <HAL_ETH_SetMDIOClockRange+0x62>
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	4a11      	ldr	r2, [pc, #68]	; (80048ec <HAL_ETH_SetMDIOClockRange+0xa4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d911      	bls.n	80048ce <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	4a0f      	ldr	r2, [pc, #60]	; (80048ec <HAL_ETH_SetMDIOClockRange+0xa4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d908      	bls.n	80048c4 <HAL_ETH_SetMDIOClockRange+0x7c>
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	4a0e      	ldr	r2, [pc, #56]	; (80048f0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d804      	bhi.n	80048c4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f043 0304 	orr.w	r3, r3, #4
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	e005      	b.n	80048d0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f043 0310 	orr.w	r3, r3, #16
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	e000      	b.n	80048d0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80048ce:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	611a      	str	r2, [r3, #16]
}
 80048d8:	bf00      	nop
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	01312cff 	.word	0x01312cff
 80048e4:	02160ebf 	.word	0x02160ebf
 80048e8:	03938700 	.word	0x03938700
 80048ec:	05f5e0ff 	.word	0x05f5e0ff
 80048f0:	08f0d17f 	.word	0x08f0d17f

080048f4 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8004902:	4618      	mov	r0, r3
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b084      	sub	sp, #16
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004916:	2300      	movs	r3, #0
 8004918:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6812      	ldr	r2, [r2, #0]
 8004928:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800492c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004930:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800493e:	2001      	movs	r0, #1
 8004940:	f7ff f888 	bl	8003a54 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800494e:	6193      	str	r3, [r2, #24]
}
 8004950:	bf00      	nop
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4b51      	ldr	r3, [pc, #324]	; (8004ab4 <ETH_SetMACConfig+0x15c>)
 800496e:	4013      	ands	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	7c1b      	ldrb	r3, [r3, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d102      	bne.n	8004980 <ETH_SetMACConfig+0x28>
 800497a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800497e:	e000      	b.n	8004982 <ETH_SetMACConfig+0x2a>
 8004980:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	7c5b      	ldrb	r3, [r3, #17]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d102      	bne.n	8004990 <ETH_SetMACConfig+0x38>
 800498a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800498e:	e000      	b.n	8004992 <ETH_SetMACConfig+0x3a>
 8004990:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004992:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004998:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	7fdb      	ldrb	r3, [r3, #31]
 800499e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80049a0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80049a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	7f92      	ldrb	r2, [r2, #30]
 80049ac:	2a00      	cmp	r2, #0
 80049ae:	d102      	bne.n	80049b6 <ETH_SetMACConfig+0x5e>
 80049b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049b4:	e000      	b.n	80049b8 <ETH_SetMACConfig+0x60>
 80049b6:	2200      	movs	r2, #0
                        macconf->Speed |
 80049b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	7f1b      	ldrb	r3, [r3, #28]
 80049be:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80049c0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80049c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	791b      	ldrb	r3, [r3, #4]
 80049cc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80049ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80049d6:	2a00      	cmp	r2, #0
 80049d8:	d102      	bne.n	80049e0 <ETH_SetMACConfig+0x88>
 80049da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049de:	e000      	b.n	80049e2 <ETH_SetMACConfig+0x8a>
 80049e0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80049e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	7bdb      	ldrb	r3, [r3, #15]
 80049e8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80049ea:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80049f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049f8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80049fa:	4313      	orrs	r3, r2
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a12:	2001      	movs	r0, #1
 8004a14:	f7ff f81e 	bl	8003a54 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004a2e:	4013      	ands	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a36:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004a3e:	2a00      	cmp	r2, #0
 8004a40:	d101      	bne.n	8004a46 <ETH_SetMACConfig+0xee>
 8004a42:	2280      	movs	r2, #128	; 0x80
 8004a44:	e000      	b.n	8004a48 <ETH_SetMACConfig+0xf0>
 8004a46:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a48:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004a4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004a56:	2a01      	cmp	r2, #1
 8004a58:	d101      	bne.n	8004a5e <ETH_SetMACConfig+0x106>
 8004a5a:	2208      	movs	r2, #8
 8004a5c:	e000      	b.n	8004a60 <ETH_SetMACConfig+0x108>
 8004a5e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004a60:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004a68:	2a01      	cmp	r2, #1
 8004a6a:	d101      	bne.n	8004a70 <ETH_SetMACConfig+0x118>
 8004a6c:	2204      	movs	r2, #4
 8004a6e:	e000      	b.n	8004a72 <ETH_SetMACConfig+0x11a>
 8004a70:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004a72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004a7a:	2a01      	cmp	r2, #1
 8004a7c:	d101      	bne.n	8004a82 <ETH_SetMACConfig+0x12a>
 8004a7e:	2202      	movs	r2, #2
 8004a80:	e000      	b.n	8004a84 <ETH_SetMACConfig+0x12c>
 8004a82:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a84:	4313      	orrs	r3, r2
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a9c:	2001      	movs	r0, #1
 8004a9e:	f7fe ffd9 	bl	8003a54 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	619a      	str	r2, [r3, #24]
}
 8004aaa:	bf00      	nop
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	ff20810f 	.word	0xff20810f

08004ab8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4b3d      	ldr	r3, [pc, #244]	; (8004bc8 <ETH_SetDMAConfig+0x110>)
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	7b1b      	ldrb	r3, [r3, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d102      	bne.n	8004ae4 <ETH_SetDMAConfig+0x2c>
 8004ade:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004ae2:	e000      	b.n	8004ae6 <ETH_SetDMAConfig+0x2e>
 8004ae4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	7b5b      	ldrb	r3, [r3, #13]
 8004aea:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004aec:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	7f52      	ldrb	r2, [r2, #29]
 8004af2:	2a00      	cmp	r2, #0
 8004af4:	d102      	bne.n	8004afc <ETH_SetDMAConfig+0x44>
 8004af6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004afa:	e000      	b.n	8004afe <ETH_SetDMAConfig+0x46>
 8004afc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004afe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	7b9b      	ldrb	r3, [r3, #14]
 8004b04:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004b06:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004b0c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	7f1b      	ldrb	r3, [r3, #28]
 8004b12:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004b14:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	7f9b      	ldrb	r3, [r3, #30]
 8004b1a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004b1c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004b22:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b2a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b4e:	2001      	movs	r0, #1
 8004b50:	f7fe ff80 	bl	8003a54 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	791b      	ldrb	r3, [r3, #4]
 8004b66:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b6c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004b72:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004b78:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b80:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004b82:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004b8a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004b90:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6812      	ldr	r2, [r2, #0]
 8004b96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b9e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004bac:	2001      	movs	r0, #1
 8004bae:	f7fe ff51 	bl	8003a54 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bba:	461a      	mov	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6013      	str	r3, [r2, #0]
}
 8004bc0:	bf00      	nop
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	f8de3f23 	.word	0xf8de3f23

08004bcc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b0a6      	sub	sp, #152	; 0x98
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004be0:	2300      	movs	r3, #0
 8004be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004be4:	2300      	movs	r3, #0
 8004be6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004bea:	2301      	movs	r3, #1
 8004bec:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004c02:	2300      	movs	r3, #0
 8004c04:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004c16:	2300      	movs	r3, #0
 8004c18:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004c22:	2300      	movs	r3, #0
 8004c24:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004c2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c32:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004c34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c38:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004c40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c44:	4619      	mov	r1, r3
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7ff fe86 	bl	8004958 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004c50:	2301      	movs	r3, #1
 8004c52:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004c54:	2301      	movs	r3, #1
 8004c56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004c62:	2300      	movs	r3, #0
 8004c64:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004c72:	2301      	movs	r3, #1
 8004c74:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004c7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c80:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004c82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c86:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004c88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c8c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004c9c:	f107 0308 	add.w	r3, r7, #8
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff ff08 	bl	8004ab8 <ETH_SetDMAConfig>
}
 8004ca8:	bf00      	nop
 8004caa:	3798      	adds	r7, #152	; 0x98
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3305      	adds	r3, #5
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	021b      	lsls	r3, r3, #8
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	3204      	adds	r2, #4
 8004cc8:	7812      	ldrb	r2, [r2, #0]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <ETH_MACAddressConfig+0x68>)
 8004cd2:	4413      	add	r3, r2
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	3303      	adds	r3, #3
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	061a      	lsls	r2, r3, #24
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	3302      	adds	r3, #2
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	041b      	lsls	r3, r3, #16
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	021b      	lsls	r3, r3, #8
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	7812      	ldrb	r2, [r2, #0]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <ETH_MACAddressConfig+0x6c>)
 8004d02:	4413      	add	r3, r2
 8004d04:	461a      	mov	r2, r3
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	6013      	str	r3, [r2, #0]
}
 8004d0a:	bf00      	nop
 8004d0c:	371c      	adds	r7, #28
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40028040 	.word	0x40028040
 8004d1c:	40028044 	.word	0x40028044

08004d20 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	e03e      	b.n	8004dac <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68d9      	ldr	r1, [r3, #12]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	4613      	mov	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	440b      	add	r3, r1
 8004d3e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2200      	movs	r2, #0
 8004d56:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004d58:	68b9      	ldr	r1, [r7, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	3206      	adds	r2, #6
 8004d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d80c      	bhi.n	8004d90 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68d9      	ldr	r1, [r3, #12]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	440b      	add	r3, r1
 8004d88:	461a      	mov	r2, r3
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	60da      	str	r2, [r3, #12]
 8004d8e:	e004      	b.n	8004d9a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	461a      	mov	r2, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	3301      	adds	r3, #1
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d9bd      	bls.n	8004d2e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc4:	611a      	str	r2, [r3, #16]
}
 8004dc6:	bf00      	nop
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b085      	sub	sp, #20
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	e046      	b.n	8004e6e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6919      	ldr	r1, [r3, #16]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	440b      	add	r3, r1
 8004df0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2200      	movs	r2, #0
 8004e02:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2200      	movs	r2, #0
 8004e08:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2200      	movs	r2, #0
 8004e14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004e1c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004e24:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004e32:	68b9      	ldr	r1, [r7, #8]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	3212      	adds	r2, #18
 8004e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d80c      	bhi.n	8004e5e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6919      	ldr	r1, [r3, #16]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	440b      	add	r3, r1
 8004e56:	461a      	mov	r2, r3
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	60da      	str	r2, [r3, #12]
 8004e5c:	e004      	b.n	8004e68 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	461a      	mov	r2, r3
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b03      	cmp	r3, #3
 8004e72:	d9b5      	bls.n	8004de0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691a      	ldr	r2, [r3, #16]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e9e:	60da      	str	r2, [r3, #12]
}
 8004ea0:	bf00      	nop
 8004ea2:	3714      	adds	r7, #20
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b08d      	sub	sp, #52	; 0x34
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3318      	adds	r3, #24
 8004ebc:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eee:	d007      	beq.n	8004f00 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004f00:	2302      	movs	r3, #2
 8004f02:	e103      	b.n	800510c <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	3301      	adds	r3, #1
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8004f1c:	f023 031f 	bic.w	r3, r3, #31
 8004f20:	69fa      	ldr	r2, [r7, #28]
 8004f22:	6852      	ldr	r2, [r2, #4]
 8004f24:	431a      	orrs	r2, r3
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d008      	beq.n	8004f48 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	431a      	orrs	r2, r3
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0320 	and.w	r3, r3, #32
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d008      	beq.n	8004f66 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	431a      	orrs	r2, r3
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d005      	beq.n	8004f7e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8004f8a:	f3bf 8f5f 	dmb	sy
}
 8004f8e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004f9c:	e084      	b.n	80050a8 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d006      	beq.n	8004fbe <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	e005      	b.n	8004fca <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fcc:	3301      	adds	r3, #1
 8004fce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d902      	bls.n	8004fdc <ETH_Prepare_Tx_Descriptors+0x130>
 8004fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd8:	3b04      	subs	r3, #4
 8004fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ffa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ffe:	d007      	beq.n	8005010 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005004:	3304      	adds	r3, #4
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d029      	beq.n	8005064 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800501c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800501e:	2300      	movs	r3, #0
 8005020:	62bb      	str	r3, [r7, #40]	; 0x28
 8005022:	e019      	b.n	8005058 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8005024:	f3bf 8f5f 	dmb	sy
}
 8005028:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005038:	3301      	adds	r3, #1
 800503a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800503c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503e:	2b03      	cmp	r3, #3
 8005040:	d902      	bls.n	8005048 <ETH_Prepare_Tx_Descriptors+0x19c>
 8005042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005044:	3b04      	subs	r3, #4
 8005046:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800504c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005050:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8005052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005054:	3301      	adds	r3, #1
 8005056:	62bb      	str	r3, [r7, #40]	; 0x28
 8005058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	429a      	cmp	r2, r3
 800505e:	d3e1      	bcc.n	8005024 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8005060:	2302      	movs	r3, #2
 8005062:	e053      	b.n	800510c <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	3301      	adds	r3, #1
 8005068:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	461a      	mov	r2, r3
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8005082:	f023 031f 	bic.w	r3, r3, #31
 8005086:	69fa      	ldr	r2, [r7, #28]
 8005088:	6852      	ldr	r2, [r2, #4]
 800508a:	431a      	orrs	r2, r3
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	3301      	adds	r3, #1
 8005094:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8005096:	f3bf 8f5f 	dmb	sy
}
 800509a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f47f af76 	bne.w	8004f9e <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d006      	beq.n	80050c6 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	e005      	b.n	80050d2 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050e2:	6979      	ldr	r1, [r7, #20]
 80050e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e6:	3304      	adds	r3, #4
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	440b      	add	r3, r1
 80050ec:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050f2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80050f4:	b672      	cpsid	i
}
 80050f6:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	4413      	add	r3, r2
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8005106:	b662      	cpsie	i
}
 8005108:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3734      	adds	r7, #52	; 0x34
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005118:	b480      	push	{r7}
 800511a:	b089      	sub	sp, #36	; 0x24
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005126:	2300      	movs	r3, #0
 8005128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800512a:	2300      	movs	r3, #0
 800512c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]
 8005132:	e16b      	b.n	800540c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005134:	2201      	movs	r2, #1
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4013      	ands	r3, r2
 8005146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	429a      	cmp	r2, r3
 800514e:	f040 815a 	bne.w	8005406 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	2b01      	cmp	r3, #1
 800515c:	d005      	beq.n	800516a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005166:	2b02      	cmp	r3, #2
 8005168:	d130      	bne.n	80051cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	2203      	movs	r2, #3
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	43db      	mvns	r3, r3
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	4013      	ands	r3, r2
 8005180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	fa02 f303 	lsl.w	r3, r2, r3
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	4313      	orrs	r3, r2
 8005192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051a0:	2201      	movs	r2, #1
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	43db      	mvns	r3, r3
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	4013      	ands	r3, r2
 80051ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	091b      	lsrs	r3, r3, #4
 80051b6:	f003 0201 	and.w	r2, r3, #1
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f003 0303 	and.w	r3, r3, #3
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d017      	beq.n	8005208 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	2203      	movs	r2, #3
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	43db      	mvns	r3, r3
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	4013      	ands	r3, r2
 80051ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	4313      	orrs	r3, r2
 8005200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f003 0303 	and.w	r3, r3, #3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d123      	bne.n	800525c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	08da      	lsrs	r2, r3, #3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3208      	adds	r2, #8
 800521c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	220f      	movs	r2, #15
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	43db      	mvns	r3, r3
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	4013      	ands	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	691a      	ldr	r2, [r3, #16]
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	fa02 f303 	lsl.w	r3, r2, r3
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	4313      	orrs	r3, r2
 800524c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	08da      	lsrs	r2, r3, #3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3208      	adds	r2, #8
 8005256:	69b9      	ldr	r1, [r7, #24]
 8005258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	2203      	movs	r2, #3
 8005268:	fa02 f303 	lsl.w	r3, r2, r3
 800526c:	43db      	mvns	r3, r3
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	4013      	ands	r3, r2
 8005272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f003 0203 	and.w	r2, r3, #3
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	4313      	orrs	r3, r2
 8005288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 80b4 	beq.w	8005406 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	4b60      	ldr	r3, [pc, #384]	; (8005424 <HAL_GPIO_Init+0x30c>)
 80052a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a6:	4a5f      	ldr	r2, [pc, #380]	; (8005424 <HAL_GPIO_Init+0x30c>)
 80052a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052ac:	6453      	str	r3, [r2, #68]	; 0x44
 80052ae:	4b5d      	ldr	r3, [pc, #372]	; (8005424 <HAL_GPIO_Init+0x30c>)
 80052b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052ba:	4a5b      	ldr	r2, [pc, #364]	; (8005428 <HAL_GPIO_Init+0x310>)
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	089b      	lsrs	r3, r3, #2
 80052c0:	3302      	adds	r3, #2
 80052c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	220f      	movs	r2, #15
 80052d2:	fa02 f303 	lsl.w	r3, r2, r3
 80052d6:	43db      	mvns	r3, r3
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	4013      	ands	r3, r2
 80052dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a52      	ldr	r2, [pc, #328]	; (800542c <HAL_GPIO_Init+0x314>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d02b      	beq.n	800533e <HAL_GPIO_Init+0x226>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a51      	ldr	r2, [pc, #324]	; (8005430 <HAL_GPIO_Init+0x318>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d025      	beq.n	800533a <HAL_GPIO_Init+0x222>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a50      	ldr	r2, [pc, #320]	; (8005434 <HAL_GPIO_Init+0x31c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d01f      	beq.n	8005336 <HAL_GPIO_Init+0x21e>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a4f      	ldr	r2, [pc, #316]	; (8005438 <HAL_GPIO_Init+0x320>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d019      	beq.n	8005332 <HAL_GPIO_Init+0x21a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a4e      	ldr	r2, [pc, #312]	; (800543c <HAL_GPIO_Init+0x324>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d013      	beq.n	800532e <HAL_GPIO_Init+0x216>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a4d      	ldr	r2, [pc, #308]	; (8005440 <HAL_GPIO_Init+0x328>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00d      	beq.n	800532a <HAL_GPIO_Init+0x212>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a4c      	ldr	r2, [pc, #304]	; (8005444 <HAL_GPIO_Init+0x32c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d007      	beq.n	8005326 <HAL_GPIO_Init+0x20e>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a4b      	ldr	r2, [pc, #300]	; (8005448 <HAL_GPIO_Init+0x330>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d101      	bne.n	8005322 <HAL_GPIO_Init+0x20a>
 800531e:	2307      	movs	r3, #7
 8005320:	e00e      	b.n	8005340 <HAL_GPIO_Init+0x228>
 8005322:	2308      	movs	r3, #8
 8005324:	e00c      	b.n	8005340 <HAL_GPIO_Init+0x228>
 8005326:	2306      	movs	r3, #6
 8005328:	e00a      	b.n	8005340 <HAL_GPIO_Init+0x228>
 800532a:	2305      	movs	r3, #5
 800532c:	e008      	b.n	8005340 <HAL_GPIO_Init+0x228>
 800532e:	2304      	movs	r3, #4
 8005330:	e006      	b.n	8005340 <HAL_GPIO_Init+0x228>
 8005332:	2303      	movs	r3, #3
 8005334:	e004      	b.n	8005340 <HAL_GPIO_Init+0x228>
 8005336:	2302      	movs	r3, #2
 8005338:	e002      	b.n	8005340 <HAL_GPIO_Init+0x228>
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <HAL_GPIO_Init+0x228>
 800533e:	2300      	movs	r3, #0
 8005340:	69fa      	ldr	r2, [r7, #28]
 8005342:	f002 0203 	and.w	r2, r2, #3
 8005346:	0092      	lsls	r2, r2, #2
 8005348:	4093      	lsls	r3, r2
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	4313      	orrs	r3, r2
 800534e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005350:	4935      	ldr	r1, [pc, #212]	; (8005428 <HAL_GPIO_Init+0x310>)
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	089b      	lsrs	r3, r3, #2
 8005356:	3302      	adds	r3, #2
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800535e:	4b3b      	ldr	r3, [pc, #236]	; (800544c <HAL_GPIO_Init+0x334>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	43db      	mvns	r3, r3
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	4013      	ands	r3, r2
 800536c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005382:	4a32      	ldr	r2, [pc, #200]	; (800544c <HAL_GPIO_Init+0x334>)
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005388:	4b30      	ldr	r3, [pc, #192]	; (800544c <HAL_GPIO_Init+0x334>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	43db      	mvns	r3, r3
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	4013      	ands	r3, r2
 8005396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053ac:	4a27      	ldr	r2, [pc, #156]	; (800544c <HAL_GPIO_Init+0x334>)
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053b2:	4b26      	ldr	r3, [pc, #152]	; (800544c <HAL_GPIO_Init+0x334>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	43db      	mvns	r3, r3
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	4013      	ands	r3, r2
 80053c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053d6:	4a1d      	ldr	r2, [pc, #116]	; (800544c <HAL_GPIO_Init+0x334>)
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053dc:	4b1b      	ldr	r3, [pc, #108]	; (800544c <HAL_GPIO_Init+0x334>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	43db      	mvns	r3, r3
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	4013      	ands	r3, r2
 80053ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005400:	4a12      	ldr	r2, [pc, #72]	; (800544c <HAL_GPIO_Init+0x334>)
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	3301      	adds	r3, #1
 800540a:	61fb      	str	r3, [r7, #28]
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	2b0f      	cmp	r3, #15
 8005410:	f67f ae90 	bls.w	8005134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005414:	bf00      	nop
 8005416:	bf00      	nop
 8005418:	3724      	adds	r7, #36	; 0x24
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	40023800 	.word	0x40023800
 8005428:	40013800 	.word	0x40013800
 800542c:	40020000 	.word	0x40020000
 8005430:	40020400 	.word	0x40020400
 8005434:	40020800 	.word	0x40020800
 8005438:	40020c00 	.word	0x40020c00
 800543c:	40021000 	.word	0x40021000
 8005440:	40021400 	.word	0x40021400
 8005444:	40021800 	.word	0x40021800
 8005448:	40021c00 	.word	0x40021c00
 800544c:	40013c00 	.word	0x40013c00

08005450 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	460b      	mov	r3, r1
 800545a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691a      	ldr	r2, [r3, #16]
 8005460:	887b      	ldrh	r3, [r7, #2]
 8005462:	4013      	ands	r3, r2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005468:	2301      	movs	r3, #1
 800546a:	73fb      	strb	r3, [r7, #15]
 800546c:	e001      	b.n	8005472 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800546e:	2300      	movs	r3, #0
 8005470:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005472:	7bfb      	ldrb	r3, [r7, #15]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	460b      	mov	r3, r1
 800548a:	807b      	strh	r3, [r7, #2]
 800548c:	4613      	mov	r3, r2
 800548e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005490:	787b      	ldrb	r3, [r7, #1]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005496:	887a      	ldrh	r2, [r7, #2]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800549c:	e003      	b.n	80054a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800549e:	887b      	ldrh	r3, [r7, #2]
 80054a0:	041a      	lsls	r2, r3, #16
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	619a      	str	r2, [r3, #24]
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	460b      	mov	r3, r1
 80054bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054c4:	887a      	ldrh	r2, [r7, #2]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4013      	ands	r3, r2
 80054ca:	041a      	lsls	r2, r3, #16
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	43d9      	mvns	r1, r3
 80054d0:	887b      	ldrh	r3, [r7, #2]
 80054d2:	400b      	ands	r3, r1
 80054d4:	431a      	orrs	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	619a      	str	r2, [r3, #24]
}
 80054da:	bf00      	nop
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e12b      	b.n	8005752 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7fd f98e 	bl	8002830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2224      	movs	r2, #36	; 0x24
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0201 	bic.w	r2, r2, #1
 800552a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800553a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800554a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800554c:	f001 f8aa 	bl	80066a4 <HAL_RCC_GetPCLK1Freq>
 8005550:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	4a81      	ldr	r2, [pc, #516]	; (800575c <HAL_I2C_Init+0x274>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d807      	bhi.n	800556c <HAL_I2C_Init+0x84>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4a80      	ldr	r2, [pc, #512]	; (8005760 <HAL_I2C_Init+0x278>)
 8005560:	4293      	cmp	r3, r2
 8005562:	bf94      	ite	ls
 8005564:	2301      	movls	r3, #1
 8005566:	2300      	movhi	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	e006      	b.n	800557a <HAL_I2C_Init+0x92>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4a7d      	ldr	r2, [pc, #500]	; (8005764 <HAL_I2C_Init+0x27c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	bf94      	ite	ls
 8005574:	2301      	movls	r3, #1
 8005576:	2300      	movhi	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e0e7      	b.n	8005752 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4a78      	ldr	r2, [pc, #480]	; (8005768 <HAL_I2C_Init+0x280>)
 8005586:	fba2 2303 	umull	r2, r3, r2, r3
 800558a:	0c9b      	lsrs	r3, r3, #18
 800558c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	430a      	orrs	r2, r1
 80055a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	4a6a      	ldr	r2, [pc, #424]	; (800575c <HAL_I2C_Init+0x274>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d802      	bhi.n	80055bc <HAL_I2C_Init+0xd4>
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	3301      	adds	r3, #1
 80055ba:	e009      	b.n	80055d0 <HAL_I2C_Init+0xe8>
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80055c2:	fb02 f303 	mul.w	r3, r2, r3
 80055c6:	4a69      	ldr	r2, [pc, #420]	; (800576c <HAL_I2C_Init+0x284>)
 80055c8:	fba2 2303 	umull	r2, r3, r2, r3
 80055cc:	099b      	lsrs	r3, r3, #6
 80055ce:	3301      	adds	r3, #1
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6812      	ldr	r2, [r2, #0]
 80055d4:	430b      	orrs	r3, r1
 80055d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80055e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	495c      	ldr	r1, [pc, #368]	; (800575c <HAL_I2C_Init+0x274>)
 80055ec:	428b      	cmp	r3, r1
 80055ee:	d819      	bhi.n	8005624 <HAL_I2C_Init+0x13c>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	1e59      	subs	r1, r3, #1
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80055fe:	1c59      	adds	r1, r3, #1
 8005600:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005604:	400b      	ands	r3, r1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <HAL_I2C_Init+0x138>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1e59      	subs	r1, r3, #1
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	fbb1 f3f3 	udiv	r3, r1, r3
 8005618:	3301      	adds	r3, #1
 800561a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800561e:	e051      	b.n	80056c4 <HAL_I2C_Init+0x1dc>
 8005620:	2304      	movs	r3, #4
 8005622:	e04f      	b.n	80056c4 <HAL_I2C_Init+0x1dc>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d111      	bne.n	8005650 <HAL_I2C_Init+0x168>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	1e58      	subs	r0, r3, #1
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6859      	ldr	r1, [r3, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	440b      	add	r3, r1
 800563a:	fbb0 f3f3 	udiv	r3, r0, r3
 800563e:	3301      	adds	r3, #1
 8005640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005644:	2b00      	cmp	r3, #0
 8005646:	bf0c      	ite	eq
 8005648:	2301      	moveq	r3, #1
 800564a:	2300      	movne	r3, #0
 800564c:	b2db      	uxtb	r3, r3
 800564e:	e012      	b.n	8005676 <HAL_I2C_Init+0x18e>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	1e58      	subs	r0, r3, #1
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6859      	ldr	r1, [r3, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	440b      	add	r3, r1
 800565e:	0099      	lsls	r1, r3, #2
 8005660:	440b      	add	r3, r1
 8005662:	fbb0 f3f3 	udiv	r3, r0, r3
 8005666:	3301      	adds	r3, #1
 8005668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800566c:	2b00      	cmp	r3, #0
 800566e:	bf0c      	ite	eq
 8005670:	2301      	moveq	r3, #1
 8005672:	2300      	movne	r3, #0
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <HAL_I2C_Init+0x196>
 800567a:	2301      	movs	r3, #1
 800567c:	e022      	b.n	80056c4 <HAL_I2C_Init+0x1dc>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10e      	bne.n	80056a4 <HAL_I2C_Init+0x1bc>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	1e58      	subs	r0, r3, #1
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6859      	ldr	r1, [r3, #4]
 800568e:	460b      	mov	r3, r1
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	440b      	add	r3, r1
 8005694:	fbb0 f3f3 	udiv	r3, r0, r3
 8005698:	3301      	adds	r3, #1
 800569a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800569e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056a2:	e00f      	b.n	80056c4 <HAL_I2C_Init+0x1dc>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	1e58      	subs	r0, r3, #1
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6859      	ldr	r1, [r3, #4]
 80056ac:	460b      	mov	r3, r1
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	0099      	lsls	r1, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80056ba:	3301      	adds	r3, #1
 80056bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	6809      	ldr	r1, [r1, #0]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	69da      	ldr	r2, [r3, #28]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80056f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6911      	ldr	r1, [r2, #16]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	68d2      	ldr	r2, [r2, #12]
 80056fe:	4311      	orrs	r1, r2
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6812      	ldr	r2, [r2, #0]
 8005704:	430b      	orrs	r3, r1
 8005706:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	695a      	ldr	r2, [r3, #20]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0201 	orr.w	r2, r2, #1
 8005732:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2220      	movs	r2, #32
 800573e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	000186a0 	.word	0x000186a0
 8005760:	001e847f 	.word	0x001e847f
 8005764:	003d08ff 	.word	0x003d08ff
 8005768:	431bde83 	.word	0x431bde83
 800576c:	10624dd3 	.word	0x10624dd3

08005770 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af02      	add	r7, sp, #8
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	4608      	mov	r0, r1
 800577a:	4611      	mov	r1, r2
 800577c:	461a      	mov	r2, r3
 800577e:	4603      	mov	r3, r0
 8005780:	817b      	strh	r3, [r7, #10]
 8005782:	460b      	mov	r3, r1
 8005784:	813b      	strh	r3, [r7, #8]
 8005786:	4613      	mov	r3, r2
 8005788:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800578a:	f7fe f957 	bl	8003a3c <HAL_GetTick>
 800578e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b20      	cmp	r3, #32
 800579a:	f040 80d9 	bne.w	8005950 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	2319      	movs	r3, #25
 80057a4:	2201      	movs	r2, #1
 80057a6:	496d      	ldr	r1, [pc, #436]	; (800595c <HAL_I2C_Mem_Write+0x1ec>)
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 f971 	bl	8005a90 <I2C_WaitOnFlagUntilTimeout>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80057b4:	2302      	movs	r3, #2
 80057b6:	e0cc      	b.n	8005952 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d101      	bne.n	80057c6 <HAL_I2C_Mem_Write+0x56>
 80057c2:	2302      	movs	r3, #2
 80057c4:	e0c5      	b.n	8005952 <HAL_I2C_Mem_Write+0x1e2>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d007      	beq.n	80057ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0201 	orr.w	r2, r2, #1
 80057ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2221      	movs	r2, #33	; 0x21
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2240      	movs	r2, #64	; 0x40
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6a3a      	ldr	r2, [r7, #32]
 8005816:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800581c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005822:	b29a      	uxth	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4a4d      	ldr	r2, [pc, #308]	; (8005960 <HAL_I2C_Mem_Write+0x1f0>)
 800582c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800582e:	88f8      	ldrh	r0, [r7, #6]
 8005830:	893a      	ldrh	r2, [r7, #8]
 8005832:	8979      	ldrh	r1, [r7, #10]
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	9301      	str	r3, [sp, #4]
 8005838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	4603      	mov	r3, r0
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 f890 	bl	8005964 <I2C_RequestMemoryWrite>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d052      	beq.n	80058f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e081      	b.n	8005952 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 fa36 	bl	8005cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00d      	beq.n	800587a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	2b04      	cmp	r3, #4
 8005864:	d107      	bne.n	8005876 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005874:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e06b      	b.n	8005952 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	781a      	ldrb	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005894:	3b01      	subs	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	f003 0304 	and.w	r3, r3, #4
 80058b4:	2b04      	cmp	r3, #4
 80058b6:	d11b      	bne.n	80058f0 <HAL_I2C_Mem_Write+0x180>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d017      	beq.n	80058f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	781a      	ldrb	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	1c5a      	adds	r2, r3, #1
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058da:	3b01      	subs	r3, #1
 80058dc:	b29a      	uxth	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1aa      	bne.n	800584e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 fa29 	bl	8005d54 <I2C_WaitOnBTFFlagUntilTimeout>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00d      	beq.n	8005924 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590c:	2b04      	cmp	r3, #4
 800590e:	d107      	bne.n	8005920 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800591e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e016      	b.n	8005952 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005932:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2220      	movs	r2, #32
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800594c:	2300      	movs	r3, #0
 800594e:	e000      	b.n	8005952 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005950:	2302      	movs	r3, #2
  }
}
 8005952:	4618      	mov	r0, r3
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	00100002 	.word	0x00100002
 8005960:	ffff0000 	.word	0xffff0000

08005964 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b088      	sub	sp, #32
 8005968:	af02      	add	r7, sp, #8
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	4608      	mov	r0, r1
 800596e:	4611      	mov	r1, r2
 8005970:	461a      	mov	r2, r3
 8005972:	4603      	mov	r3, r0
 8005974:	817b      	strh	r3, [r7, #10]
 8005976:	460b      	mov	r3, r1
 8005978:	813b      	strh	r3, [r7, #8]
 800597a:	4613      	mov	r3, r2
 800597c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800598c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	2200      	movs	r2, #0
 8005996:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 f878 	bl	8005a90 <I2C_WaitOnFlagUntilTimeout>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00d      	beq.n	80059c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059b4:	d103      	bne.n	80059be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e05f      	b.n	8005a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059c2:	897b      	ldrh	r3, [r7, #10]
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	461a      	mov	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	6a3a      	ldr	r2, [r7, #32]
 80059d6:	492d      	ldr	r1, [pc, #180]	; (8005a8c <I2C_RequestMemoryWrite+0x128>)
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 f8d3 	bl	8005b84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e04c      	b.n	8005a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059e8:	2300      	movs	r3, #0
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	617b      	str	r3, [r7, #20]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a00:	6a39      	ldr	r1, [r7, #32]
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 f95e 	bl	8005cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00d      	beq.n	8005a2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d107      	bne.n	8005a26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e02b      	b.n	8005a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a2a:	88fb      	ldrh	r3, [r7, #6]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d105      	bne.n	8005a3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a30:	893b      	ldrh	r3, [r7, #8]
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	611a      	str	r2, [r3, #16]
 8005a3a:	e021      	b.n	8005a80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a3c:	893b      	ldrh	r3, [r7, #8]
 8005a3e:	0a1b      	lsrs	r3, r3, #8
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a4c:	6a39      	ldr	r1, [r7, #32]
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 f938 	bl	8005cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00d      	beq.n	8005a76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d107      	bne.n	8005a72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e005      	b.n	8005a82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a76:	893b      	ldrh	r3, [r7, #8]
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	00010002 	.word	0x00010002

08005a90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	603b      	str	r3, [r7, #0]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005aa0:	e048      	b.n	8005b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aa8:	d044      	beq.n	8005b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aaa:	f7fd ffc7 	bl	8003a3c <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d302      	bcc.n	8005ac0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d139      	bne.n	8005b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	0c1b      	lsrs	r3, r3, #16
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d10d      	bne.n	8005ae6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	43da      	mvns	r2, r3
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	bf0c      	ite	eq
 8005adc:	2301      	moveq	r3, #1
 8005ade:	2300      	movne	r3, #0
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	e00c      	b.n	8005b00 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	43da      	mvns	r2, r3
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	4013      	ands	r3, r2
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	bf0c      	ite	eq
 8005af8:	2301      	moveq	r3, #1
 8005afa:	2300      	movne	r3, #0
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	461a      	mov	r2, r3
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d116      	bne.n	8005b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b20:	f043 0220 	orr.w	r2, r3, #32
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e023      	b.n	8005b7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	0c1b      	lsrs	r3, r3, #16
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d10d      	bne.n	8005b5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	43da      	mvns	r2, r3
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	bf0c      	ite	eq
 8005b50:	2301      	moveq	r3, #1
 8005b52:	2300      	movne	r3, #0
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	461a      	mov	r2, r3
 8005b58:	e00c      	b.n	8005b74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	43da      	mvns	r2, r3
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	4013      	ands	r3, r2
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	bf0c      	ite	eq
 8005b6c:	2301      	moveq	r3, #1
 8005b6e:	2300      	movne	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	461a      	mov	r2, r3
 8005b74:	79fb      	ldrb	r3, [r7, #7]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d093      	beq.n	8005aa2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b92:	e071      	b.n	8005c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba2:	d123      	bne.n	8005bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bb2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	f043 0204 	orr.w	r2, r3, #4
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e067      	b.n	8005cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bf2:	d041      	beq.n	8005c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bf4:	f7fd ff22 	bl	8003a3c <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d302      	bcc.n	8005c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d136      	bne.n	8005c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	0c1b      	lsrs	r3, r3, #16
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d10c      	bne.n	8005c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	43da      	mvns	r2, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	bf14      	ite	ne
 8005c26:	2301      	movne	r3, #1
 8005c28:	2300      	moveq	r3, #0
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	e00b      	b.n	8005c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	43da      	mvns	r2, r3
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	4013      	ands	r3, r2
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	bf14      	ite	ne
 8005c40:	2301      	movne	r3, #1
 8005c42:	2300      	moveq	r3, #0
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d016      	beq.n	8005c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c64:	f043 0220 	orr.w	r2, r3, #32
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e021      	b.n	8005cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	0c1b      	lsrs	r3, r3, #16
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d10c      	bne.n	8005c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	43da      	mvns	r2, r3
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	bf14      	ite	ne
 8005c94:	2301      	movne	r3, #1
 8005c96:	2300      	moveq	r3, #0
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	e00b      	b.n	8005cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	43da      	mvns	r2, r3
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	bf14      	ite	ne
 8005cae:	2301      	movne	r3, #1
 8005cb0:	2300      	moveq	r3, #0
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f47f af6d 	bne.w	8005b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cd0:	e034      	b.n	8005d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 f886 	bl	8005de4 <I2C_IsAcknowledgeFailed>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e034      	b.n	8005d4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ce8:	d028      	beq.n	8005d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cea:	f7fd fea7 	bl	8003a3c <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d302      	bcc.n	8005d00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d11d      	bne.n	8005d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d0a:	2b80      	cmp	r3, #128	; 0x80
 8005d0c:	d016      	beq.n	8005d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	f043 0220 	orr.w	r2, r3, #32
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e007      	b.n	8005d4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d46:	2b80      	cmp	r3, #128	; 0x80
 8005d48:	d1c3      	bne.n	8005cd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d60:	e034      	b.n	8005dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 f83e 	bl	8005de4 <I2C_IsAcknowledgeFailed>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e034      	b.n	8005ddc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d78:	d028      	beq.n	8005dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d7a:	f7fd fe5f 	bl	8003a3c <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d302      	bcc.n	8005d90 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d11d      	bne.n	8005dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	f003 0304 	and.w	r3, r3, #4
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d016      	beq.n	8005dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2220      	movs	r2, #32
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db8:	f043 0220 	orr.w	r2, r3, #32
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e007      	b.n	8005ddc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	f003 0304 	and.w	r3, r3, #4
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	d1c3      	bne.n	8005d62 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dfa:	d11b      	bne.n	8005e34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e20:	f043 0204 	orr.w	r2, r3, #4
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e000      	b.n	8005e36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
	...

08005e44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e267      	b.n	8006326 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d075      	beq.n	8005f4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e62:	4b88      	ldr	r3, [pc, #544]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 030c 	and.w	r3, r3, #12
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d00c      	beq.n	8005e88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e6e:	4b85      	ldr	r3, [pc, #532]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e76:	2b08      	cmp	r3, #8
 8005e78:	d112      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e7a:	4b82      	ldr	r3, [pc, #520]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e86:	d10b      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e88:	4b7e      	ldr	r3, [pc, #504]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d05b      	beq.n	8005f4c <HAL_RCC_OscConfig+0x108>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d157      	bne.n	8005f4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e242      	b.n	8006326 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea8:	d106      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x74>
 8005eaa:	4b76      	ldr	r3, [pc, #472]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a75      	ldr	r2, [pc, #468]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	e01d      	b.n	8005ef4 <HAL_RCC_OscConfig+0xb0>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ec0:	d10c      	bne.n	8005edc <HAL_RCC_OscConfig+0x98>
 8005ec2:	4b70      	ldr	r3, [pc, #448]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a6f      	ldr	r2, [pc, #444]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ecc:	6013      	str	r3, [r2, #0]
 8005ece:	4b6d      	ldr	r3, [pc, #436]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a6c      	ldr	r2, [pc, #432]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ed8:	6013      	str	r3, [r2, #0]
 8005eda:	e00b      	b.n	8005ef4 <HAL_RCC_OscConfig+0xb0>
 8005edc:	4b69      	ldr	r3, [pc, #420]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a68      	ldr	r2, [pc, #416]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ee6:	6013      	str	r3, [r2, #0]
 8005ee8:	4b66      	ldr	r3, [pc, #408]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a65      	ldr	r2, [pc, #404]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d013      	beq.n	8005f24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005efc:	f7fd fd9e 	bl	8003a3c <HAL_GetTick>
 8005f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f04:	f7fd fd9a 	bl	8003a3c <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b64      	cmp	r3, #100	; 0x64
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e207      	b.n	8006326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f16:	4b5b      	ldr	r3, [pc, #364]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0f0      	beq.n	8005f04 <HAL_RCC_OscConfig+0xc0>
 8005f22:	e014      	b.n	8005f4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f24:	f7fd fd8a 	bl	8003a3c <HAL_GetTick>
 8005f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f2a:	e008      	b.n	8005f3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f2c:	f7fd fd86 	bl	8003a3c <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b64      	cmp	r3, #100	; 0x64
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e1f3      	b.n	8006326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f3e:	4b51      	ldr	r3, [pc, #324]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1f0      	bne.n	8005f2c <HAL_RCC_OscConfig+0xe8>
 8005f4a:	e000      	b.n	8005f4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d063      	beq.n	8006022 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f5a:	4b4a      	ldr	r3, [pc, #296]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f003 030c 	and.w	r3, r3, #12
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00b      	beq.n	8005f7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f66:	4b47      	ldr	r3, [pc, #284]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f6e:	2b08      	cmp	r3, #8
 8005f70:	d11c      	bne.n	8005fac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f72:	4b44      	ldr	r3, [pc, #272]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d116      	bne.n	8005fac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f7e:	4b41      	ldr	r3, [pc, #260]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d005      	beq.n	8005f96 <HAL_RCC_OscConfig+0x152>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d001      	beq.n	8005f96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e1c7      	b.n	8006326 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f96:	4b3b      	ldr	r3, [pc, #236]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	00db      	lsls	r3, r3, #3
 8005fa4:	4937      	ldr	r1, [pc, #220]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005faa:	e03a      	b.n	8006022 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d020      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fb4:	4b34      	ldr	r3, [pc, #208]	; (8006088 <HAL_RCC_OscConfig+0x244>)
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fba:	f7fd fd3f 	bl	8003a3c <HAL_GetTick>
 8005fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fc0:	e008      	b.n	8005fd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fc2:	f7fd fd3b 	bl	8003a3c <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d901      	bls.n	8005fd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e1a8      	b.n	8006326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fd4:	4b2b      	ldr	r3, [pc, #172]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0f0      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe0:	4b28      	ldr	r3, [pc, #160]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	4925      	ldr	r1, [pc, #148]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	600b      	str	r3, [r1, #0]
 8005ff4:	e015      	b.n	8006022 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ff6:	4b24      	ldr	r3, [pc, #144]	; (8006088 <HAL_RCC_OscConfig+0x244>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ffc:	f7fd fd1e 	bl	8003a3c <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006004:	f7fd fd1a 	bl	8003a3c <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b02      	cmp	r3, #2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e187      	b.n	8006326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006016:	4b1b      	ldr	r3, [pc, #108]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1f0      	bne.n	8006004 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0308 	and.w	r3, r3, #8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d036      	beq.n	800609c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d016      	beq.n	8006064 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006036:	4b15      	ldr	r3, [pc, #84]	; (800608c <HAL_RCC_OscConfig+0x248>)
 8006038:	2201      	movs	r2, #1
 800603a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800603c:	f7fd fcfe 	bl	8003a3c <HAL_GetTick>
 8006040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006042:	e008      	b.n	8006056 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006044:	f7fd fcfa 	bl	8003a3c <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b02      	cmp	r3, #2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e167      	b.n	8006326 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006056:	4b0b      	ldr	r3, [pc, #44]	; (8006084 <HAL_RCC_OscConfig+0x240>)
 8006058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d0f0      	beq.n	8006044 <HAL_RCC_OscConfig+0x200>
 8006062:	e01b      	b.n	800609c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006064:	4b09      	ldr	r3, [pc, #36]	; (800608c <HAL_RCC_OscConfig+0x248>)
 8006066:	2200      	movs	r2, #0
 8006068:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800606a:	f7fd fce7 	bl	8003a3c <HAL_GetTick>
 800606e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006070:	e00e      	b.n	8006090 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006072:	f7fd fce3 	bl	8003a3c <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b02      	cmp	r3, #2
 800607e:	d907      	bls.n	8006090 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e150      	b.n	8006326 <HAL_RCC_OscConfig+0x4e2>
 8006084:	40023800 	.word	0x40023800
 8006088:	42470000 	.word	0x42470000
 800608c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006090:	4b88      	ldr	r3, [pc, #544]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 8006092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1ea      	bne.n	8006072 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 8097 	beq.w	80061d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060aa:	2300      	movs	r3, #0
 80060ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060ae:	4b81      	ldr	r3, [pc, #516]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 80060b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10f      	bne.n	80060da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060ba:	2300      	movs	r3, #0
 80060bc:	60bb      	str	r3, [r7, #8]
 80060be:	4b7d      	ldr	r3, [pc, #500]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 80060c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c2:	4a7c      	ldr	r2, [pc, #496]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 80060c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060c8:	6413      	str	r3, [r2, #64]	; 0x40
 80060ca:	4b7a      	ldr	r3, [pc, #488]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060d2:	60bb      	str	r3, [r7, #8]
 80060d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060d6:	2301      	movs	r3, #1
 80060d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060da:	4b77      	ldr	r3, [pc, #476]	; (80062b8 <HAL_RCC_OscConfig+0x474>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d118      	bne.n	8006118 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060e6:	4b74      	ldr	r3, [pc, #464]	; (80062b8 <HAL_RCC_OscConfig+0x474>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a73      	ldr	r2, [pc, #460]	; (80062b8 <HAL_RCC_OscConfig+0x474>)
 80060ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060f2:	f7fd fca3 	bl	8003a3c <HAL_GetTick>
 80060f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060f8:	e008      	b.n	800610c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060fa:	f7fd fc9f 	bl	8003a3c <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d901      	bls.n	800610c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e10c      	b.n	8006326 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800610c:	4b6a      	ldr	r3, [pc, #424]	; (80062b8 <HAL_RCC_OscConfig+0x474>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006114:	2b00      	cmp	r3, #0
 8006116:	d0f0      	beq.n	80060fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d106      	bne.n	800612e <HAL_RCC_OscConfig+0x2ea>
 8006120:	4b64      	ldr	r3, [pc, #400]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 8006122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006124:	4a63      	ldr	r2, [pc, #396]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 8006126:	f043 0301 	orr.w	r3, r3, #1
 800612a:	6713      	str	r3, [r2, #112]	; 0x70
 800612c:	e01c      	b.n	8006168 <HAL_RCC_OscConfig+0x324>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	2b05      	cmp	r3, #5
 8006134:	d10c      	bne.n	8006150 <HAL_RCC_OscConfig+0x30c>
 8006136:	4b5f      	ldr	r3, [pc, #380]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 8006138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613a:	4a5e      	ldr	r2, [pc, #376]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 800613c:	f043 0304 	orr.w	r3, r3, #4
 8006140:	6713      	str	r3, [r2, #112]	; 0x70
 8006142:	4b5c      	ldr	r3, [pc, #368]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 8006144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006146:	4a5b      	ldr	r2, [pc, #364]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 8006148:	f043 0301 	orr.w	r3, r3, #1
 800614c:	6713      	str	r3, [r2, #112]	; 0x70
 800614e:	e00b      	b.n	8006168 <HAL_RCC_OscConfig+0x324>
 8006150:	4b58      	ldr	r3, [pc, #352]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 8006152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006154:	4a57      	ldr	r2, [pc, #348]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 8006156:	f023 0301 	bic.w	r3, r3, #1
 800615a:	6713      	str	r3, [r2, #112]	; 0x70
 800615c:	4b55      	ldr	r3, [pc, #340]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 800615e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006160:	4a54      	ldr	r2, [pc, #336]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 8006162:	f023 0304 	bic.w	r3, r3, #4
 8006166:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d015      	beq.n	800619c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006170:	f7fd fc64 	bl	8003a3c <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006176:	e00a      	b.n	800618e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006178:	f7fd fc60 	bl	8003a3c <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	f241 3288 	movw	r2, #5000	; 0x1388
 8006186:	4293      	cmp	r3, r2
 8006188:	d901      	bls.n	800618e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e0cb      	b.n	8006326 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800618e:	4b49      	ldr	r3, [pc, #292]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 8006190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d0ee      	beq.n	8006178 <HAL_RCC_OscConfig+0x334>
 800619a:	e014      	b.n	80061c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800619c:	f7fd fc4e 	bl	8003a3c <HAL_GetTick>
 80061a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061a2:	e00a      	b.n	80061ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061a4:	f7fd fc4a 	bl	8003a3c <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e0b5      	b.n	8006326 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061ba:	4b3e      	ldr	r3, [pc, #248]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 80061bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1ee      	bne.n	80061a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061c6:	7dfb      	ldrb	r3, [r7, #23]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d105      	bne.n	80061d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061cc:	4b39      	ldr	r3, [pc, #228]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 80061ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d0:	4a38      	ldr	r2, [pc, #224]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 80061d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 80a1 	beq.w	8006324 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061e2:	4b34      	ldr	r3, [pc, #208]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 030c 	and.w	r3, r3, #12
 80061ea:	2b08      	cmp	r3, #8
 80061ec:	d05c      	beq.n	80062a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d141      	bne.n	800627a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061f6:	4b31      	ldr	r3, [pc, #196]	; (80062bc <HAL_RCC_OscConfig+0x478>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061fc:	f7fd fc1e 	bl	8003a3c <HAL_GetTick>
 8006200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006202:	e008      	b.n	8006216 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006204:	f7fd fc1a 	bl	8003a3c <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e087      	b.n	8006326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006216:	4b27      	ldr	r3, [pc, #156]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1f0      	bne.n	8006204 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69da      	ldr	r2, [r3, #28]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	019b      	lsls	r3, r3, #6
 8006232:	431a      	orrs	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006238:	085b      	lsrs	r3, r3, #1
 800623a:	3b01      	subs	r3, #1
 800623c:	041b      	lsls	r3, r3, #16
 800623e:	431a      	orrs	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006244:	061b      	lsls	r3, r3, #24
 8006246:	491b      	ldr	r1, [pc, #108]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 8006248:	4313      	orrs	r3, r2
 800624a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800624c:	4b1b      	ldr	r3, [pc, #108]	; (80062bc <HAL_RCC_OscConfig+0x478>)
 800624e:	2201      	movs	r2, #1
 8006250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006252:	f7fd fbf3 	bl	8003a3c <HAL_GetTick>
 8006256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006258:	e008      	b.n	800626c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800625a:	f7fd fbef 	bl	8003a3c <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d901      	bls.n	800626c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e05c      	b.n	8006326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800626c:	4b11      	ldr	r3, [pc, #68]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0f0      	beq.n	800625a <HAL_RCC_OscConfig+0x416>
 8006278:	e054      	b.n	8006324 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800627a:	4b10      	ldr	r3, [pc, #64]	; (80062bc <HAL_RCC_OscConfig+0x478>)
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006280:	f7fd fbdc 	bl	8003a3c <HAL_GetTick>
 8006284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006286:	e008      	b.n	800629a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006288:	f7fd fbd8 	bl	8003a3c <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b02      	cmp	r3, #2
 8006294:	d901      	bls.n	800629a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e045      	b.n	8006326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800629a:	4b06      	ldr	r3, [pc, #24]	; (80062b4 <HAL_RCC_OscConfig+0x470>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1f0      	bne.n	8006288 <HAL_RCC_OscConfig+0x444>
 80062a6:	e03d      	b.n	8006324 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d107      	bne.n	80062c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e038      	b.n	8006326 <HAL_RCC_OscConfig+0x4e2>
 80062b4:	40023800 	.word	0x40023800
 80062b8:	40007000 	.word	0x40007000
 80062bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062c0:	4b1b      	ldr	r3, [pc, #108]	; (8006330 <HAL_RCC_OscConfig+0x4ec>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d028      	beq.n	8006320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062d8:	429a      	cmp	r2, r3
 80062da:	d121      	bne.n	8006320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d11a      	bne.n	8006320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062f0:	4013      	ands	r3, r2
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d111      	bne.n	8006320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006306:	085b      	lsrs	r3, r3, #1
 8006308:	3b01      	subs	r3, #1
 800630a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800630c:	429a      	cmp	r2, r3
 800630e:	d107      	bne.n	8006320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800631c:	429a      	cmp	r2, r3
 800631e:	d001      	beq.n	8006324 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e000      	b.n	8006326 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	40023800 	.word	0x40023800

08006334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e0cc      	b.n	80064e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006348:	4b68      	ldr	r3, [pc, #416]	; (80064ec <HAL_RCC_ClockConfig+0x1b8>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0307 	and.w	r3, r3, #7
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	429a      	cmp	r2, r3
 8006354:	d90c      	bls.n	8006370 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006356:	4b65      	ldr	r3, [pc, #404]	; (80064ec <HAL_RCC_ClockConfig+0x1b8>)
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800635e:	4b63      	ldr	r3, [pc, #396]	; (80064ec <HAL_RCC_ClockConfig+0x1b8>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0307 	and.w	r3, r3, #7
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	429a      	cmp	r2, r3
 800636a:	d001      	beq.n	8006370 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e0b8      	b.n	80064e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0302 	and.w	r3, r3, #2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d020      	beq.n	80063be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b00      	cmp	r3, #0
 8006386:	d005      	beq.n	8006394 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006388:	4b59      	ldr	r3, [pc, #356]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	4a58      	ldr	r2, [pc, #352]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 800638e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006392:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0308 	and.w	r3, r3, #8
 800639c:	2b00      	cmp	r3, #0
 800639e:	d005      	beq.n	80063ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063a0:	4b53      	ldr	r3, [pc, #332]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	4a52      	ldr	r2, [pc, #328]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80063aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063ac:	4b50      	ldr	r3, [pc, #320]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	494d      	ldr	r1, [pc, #308]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d044      	beq.n	8006454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d107      	bne.n	80063e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063d2:	4b47      	ldr	r3, [pc, #284]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d119      	bne.n	8006412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e07f      	b.n	80064e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d003      	beq.n	80063f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d107      	bne.n	8006402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063f2:	4b3f      	ldr	r3, [pc, #252]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d109      	bne.n	8006412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e06f      	b.n	80064e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006402:	4b3b      	ldr	r3, [pc, #236]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e067      	b.n	80064e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006412:	4b37      	ldr	r3, [pc, #220]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f023 0203 	bic.w	r2, r3, #3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	4934      	ldr	r1, [pc, #208]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006420:	4313      	orrs	r3, r2
 8006422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006424:	f7fd fb0a 	bl	8003a3c <HAL_GetTick>
 8006428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800642a:	e00a      	b.n	8006442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800642c:	f7fd fb06 	bl	8003a3c <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	f241 3288 	movw	r2, #5000	; 0x1388
 800643a:	4293      	cmp	r3, r2
 800643c:	d901      	bls.n	8006442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e04f      	b.n	80064e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006442:	4b2b      	ldr	r3, [pc, #172]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f003 020c 	and.w	r2, r3, #12
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	429a      	cmp	r2, r3
 8006452:	d1eb      	bne.n	800642c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006454:	4b25      	ldr	r3, [pc, #148]	; (80064ec <HAL_RCC_ClockConfig+0x1b8>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0307 	and.w	r3, r3, #7
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d20c      	bcs.n	800647c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006462:	4b22      	ldr	r3, [pc, #136]	; (80064ec <HAL_RCC_ClockConfig+0x1b8>)
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	b2d2      	uxtb	r2, r2
 8006468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800646a:	4b20      	ldr	r3, [pc, #128]	; (80064ec <HAL_RCC_ClockConfig+0x1b8>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0307 	and.w	r3, r3, #7
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	429a      	cmp	r2, r3
 8006476:	d001      	beq.n	800647c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e032      	b.n	80064e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	d008      	beq.n	800649a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006488:	4b19      	ldr	r3, [pc, #100]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	4916      	ldr	r1, [pc, #88]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006496:	4313      	orrs	r3, r2
 8006498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d009      	beq.n	80064ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064a6:	4b12      	ldr	r3, [pc, #72]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	00db      	lsls	r3, r3, #3
 80064b4:	490e      	ldr	r1, [pc, #56]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064ba:	f000 f821 	bl	8006500 <HAL_RCC_GetSysClockFreq>
 80064be:	4602      	mov	r2, r0
 80064c0:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	091b      	lsrs	r3, r3, #4
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	490a      	ldr	r1, [pc, #40]	; (80064f4 <HAL_RCC_ClockConfig+0x1c0>)
 80064cc:	5ccb      	ldrb	r3, [r1, r3]
 80064ce:	fa22 f303 	lsr.w	r3, r2, r3
 80064d2:	4a09      	ldr	r2, [pc, #36]	; (80064f8 <HAL_RCC_ClockConfig+0x1c4>)
 80064d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064d6:	4b09      	ldr	r3, [pc, #36]	; (80064fc <HAL_RCC_ClockConfig+0x1c8>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fc fefa 	bl	80032d4 <HAL_InitTick>

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	40023c00 	.word	0x40023c00
 80064f0:	40023800 	.word	0x40023800
 80064f4:	0802acd0 	.word	0x0802acd0
 80064f8:	20000004 	.word	0x20000004
 80064fc:	20000008 	.word	0x20000008

08006500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006504:	b090      	sub	sp, #64	; 0x40
 8006506:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006508:	2300      	movs	r3, #0
 800650a:	637b      	str	r3, [r7, #52]	; 0x34
 800650c:	2300      	movs	r3, #0
 800650e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006510:	2300      	movs	r3, #0
 8006512:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006518:	4b59      	ldr	r3, [pc, #356]	; (8006680 <HAL_RCC_GetSysClockFreq+0x180>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f003 030c 	and.w	r3, r3, #12
 8006520:	2b08      	cmp	r3, #8
 8006522:	d00d      	beq.n	8006540 <HAL_RCC_GetSysClockFreq+0x40>
 8006524:	2b08      	cmp	r3, #8
 8006526:	f200 80a1 	bhi.w	800666c <HAL_RCC_GetSysClockFreq+0x16c>
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <HAL_RCC_GetSysClockFreq+0x34>
 800652e:	2b04      	cmp	r3, #4
 8006530:	d003      	beq.n	800653a <HAL_RCC_GetSysClockFreq+0x3a>
 8006532:	e09b      	b.n	800666c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006534:	4b53      	ldr	r3, [pc, #332]	; (8006684 <HAL_RCC_GetSysClockFreq+0x184>)
 8006536:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006538:	e09b      	b.n	8006672 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800653a:	4b53      	ldr	r3, [pc, #332]	; (8006688 <HAL_RCC_GetSysClockFreq+0x188>)
 800653c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800653e:	e098      	b.n	8006672 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006540:	4b4f      	ldr	r3, [pc, #316]	; (8006680 <HAL_RCC_GetSysClockFreq+0x180>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006548:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800654a:	4b4d      	ldr	r3, [pc, #308]	; (8006680 <HAL_RCC_GetSysClockFreq+0x180>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d028      	beq.n	80065a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006556:	4b4a      	ldr	r3, [pc, #296]	; (8006680 <HAL_RCC_GetSysClockFreq+0x180>)
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	099b      	lsrs	r3, r3, #6
 800655c:	2200      	movs	r2, #0
 800655e:	623b      	str	r3, [r7, #32]
 8006560:	627a      	str	r2, [r7, #36]	; 0x24
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006568:	2100      	movs	r1, #0
 800656a:	4b47      	ldr	r3, [pc, #284]	; (8006688 <HAL_RCC_GetSysClockFreq+0x188>)
 800656c:	fb03 f201 	mul.w	r2, r3, r1
 8006570:	2300      	movs	r3, #0
 8006572:	fb00 f303 	mul.w	r3, r0, r3
 8006576:	4413      	add	r3, r2
 8006578:	4a43      	ldr	r2, [pc, #268]	; (8006688 <HAL_RCC_GetSysClockFreq+0x188>)
 800657a:	fba0 1202 	umull	r1, r2, r0, r2
 800657e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006580:	460a      	mov	r2, r1
 8006582:	62ba      	str	r2, [r7, #40]	; 0x28
 8006584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006586:	4413      	add	r3, r2
 8006588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658c:	2200      	movs	r2, #0
 800658e:	61bb      	str	r3, [r7, #24]
 8006590:	61fa      	str	r2, [r7, #28]
 8006592:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006596:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800659a:	f7fa fb15 	bl	8000bc8 <__aeabi_uldivmod>
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	4613      	mov	r3, r2
 80065a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065a6:	e053      	b.n	8006650 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065a8:	4b35      	ldr	r3, [pc, #212]	; (8006680 <HAL_RCC_GetSysClockFreq+0x180>)
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	099b      	lsrs	r3, r3, #6
 80065ae:	2200      	movs	r2, #0
 80065b0:	613b      	str	r3, [r7, #16]
 80065b2:	617a      	str	r2, [r7, #20]
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80065ba:	f04f 0b00 	mov.w	fp, #0
 80065be:	4652      	mov	r2, sl
 80065c0:	465b      	mov	r3, fp
 80065c2:	f04f 0000 	mov.w	r0, #0
 80065c6:	f04f 0100 	mov.w	r1, #0
 80065ca:	0159      	lsls	r1, r3, #5
 80065cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065d0:	0150      	lsls	r0, r2, #5
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	ebb2 080a 	subs.w	r8, r2, sl
 80065da:	eb63 090b 	sbc.w	r9, r3, fp
 80065de:	f04f 0200 	mov.w	r2, #0
 80065e2:	f04f 0300 	mov.w	r3, #0
 80065e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80065ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80065ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80065f2:	ebb2 0408 	subs.w	r4, r2, r8
 80065f6:	eb63 0509 	sbc.w	r5, r3, r9
 80065fa:	f04f 0200 	mov.w	r2, #0
 80065fe:	f04f 0300 	mov.w	r3, #0
 8006602:	00eb      	lsls	r3, r5, #3
 8006604:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006608:	00e2      	lsls	r2, r4, #3
 800660a:	4614      	mov	r4, r2
 800660c:	461d      	mov	r5, r3
 800660e:	eb14 030a 	adds.w	r3, r4, sl
 8006612:	603b      	str	r3, [r7, #0]
 8006614:	eb45 030b 	adc.w	r3, r5, fp
 8006618:	607b      	str	r3, [r7, #4]
 800661a:	f04f 0200 	mov.w	r2, #0
 800661e:	f04f 0300 	mov.w	r3, #0
 8006622:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006626:	4629      	mov	r1, r5
 8006628:	028b      	lsls	r3, r1, #10
 800662a:	4621      	mov	r1, r4
 800662c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006630:	4621      	mov	r1, r4
 8006632:	028a      	lsls	r2, r1, #10
 8006634:	4610      	mov	r0, r2
 8006636:	4619      	mov	r1, r3
 8006638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800663a:	2200      	movs	r2, #0
 800663c:	60bb      	str	r3, [r7, #8]
 800663e:	60fa      	str	r2, [r7, #12]
 8006640:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006644:	f7fa fac0 	bl	8000bc8 <__aeabi_uldivmod>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	4613      	mov	r3, r2
 800664e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006650:	4b0b      	ldr	r3, [pc, #44]	; (8006680 <HAL_RCC_GetSysClockFreq+0x180>)
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	0c1b      	lsrs	r3, r3, #16
 8006656:	f003 0303 	and.w	r3, r3, #3
 800665a:	3301      	adds	r3, #1
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006660:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006664:	fbb2 f3f3 	udiv	r3, r2, r3
 8006668:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800666a:	e002      	b.n	8006672 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800666c:	4b05      	ldr	r3, [pc, #20]	; (8006684 <HAL_RCC_GetSysClockFreq+0x184>)
 800666e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006674:	4618      	mov	r0, r3
 8006676:	3740      	adds	r7, #64	; 0x40
 8006678:	46bd      	mov	sp, r7
 800667a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800667e:	bf00      	nop
 8006680:	40023800 	.word	0x40023800
 8006684:	00f42400 	.word	0x00f42400
 8006688:	017d7840 	.word	0x017d7840

0800668c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800668c:	b480      	push	{r7}
 800668e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006690:	4b03      	ldr	r3, [pc, #12]	; (80066a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006692:	681b      	ldr	r3, [r3, #0]
}
 8006694:	4618      	mov	r0, r3
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	20000004 	.word	0x20000004

080066a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066a8:	f7ff fff0 	bl	800668c <HAL_RCC_GetHCLKFreq>
 80066ac:	4602      	mov	r2, r0
 80066ae:	4b05      	ldr	r3, [pc, #20]	; (80066c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	0a9b      	lsrs	r3, r3, #10
 80066b4:	f003 0307 	and.w	r3, r3, #7
 80066b8:	4903      	ldr	r1, [pc, #12]	; (80066c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066ba:	5ccb      	ldrb	r3, [r1, r3]
 80066bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	40023800 	.word	0x40023800
 80066c8:	0802ace0 	.word	0x0802ace0

080066cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066d0:	f7ff ffdc 	bl	800668c <HAL_RCC_GetHCLKFreq>
 80066d4:	4602      	mov	r2, r0
 80066d6:	4b05      	ldr	r3, [pc, #20]	; (80066ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	0b5b      	lsrs	r3, r3, #13
 80066dc:	f003 0307 	and.w	r3, r3, #7
 80066e0:	4903      	ldr	r1, [pc, #12]	; (80066f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066e2:	5ccb      	ldrb	r3, [r1, r3]
 80066e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	40023800 	.word	0x40023800
 80066f0:	0802ace0 	.word	0x0802ace0

080066f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	220f      	movs	r2, #15
 8006702:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006704:	4b12      	ldr	r3, [pc, #72]	; (8006750 <HAL_RCC_GetClockConfig+0x5c>)
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f003 0203 	and.w	r2, r3, #3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006710:	4b0f      	ldr	r3, [pc, #60]	; (8006750 <HAL_RCC_GetClockConfig+0x5c>)
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800671c:	4b0c      	ldr	r3, [pc, #48]	; (8006750 <HAL_RCC_GetClockConfig+0x5c>)
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006728:	4b09      	ldr	r3, [pc, #36]	; (8006750 <HAL_RCC_GetClockConfig+0x5c>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	08db      	lsrs	r3, r3, #3
 800672e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006736:	4b07      	ldr	r3, [pc, #28]	; (8006754 <HAL_RCC_GetClockConfig+0x60>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0207 	and.w	r2, r3, #7
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	601a      	str	r2, [r3, #0]
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	40023800 	.word	0x40023800
 8006754:	40023c00 	.word	0x40023c00

08006758 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e07b      	b.n	8006862 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	2b00      	cmp	r3, #0
 8006770:	d108      	bne.n	8006784 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800677a:	d009      	beq.n	8006790 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	61da      	str	r2, [r3, #28]
 8006782:	e005      	b.n	8006790 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d106      	bne.n	80067b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7fc fcfe 	bl	80031ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80067d8:	431a      	orrs	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067e2:	431a      	orrs	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	431a      	orrs	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006800:	431a      	orrs	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800680a:	431a      	orrs	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006814:	ea42 0103 	orr.w	r1, r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	430a      	orrs	r2, r1
 8006826:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	0c1b      	lsrs	r3, r3, #16
 800682e:	f003 0104 	and.w	r1, r3, #4
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	f003 0210 	and.w	r2, r3, #16
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	69da      	ldr	r2, [r3, #28]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006850:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b088      	sub	sp, #32
 800686e:	af00      	add	r7, sp, #0
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	603b      	str	r3, [r7, #0]
 8006876:	4613      	mov	r3, r2
 8006878:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006884:	2b01      	cmp	r3, #1
 8006886:	d101      	bne.n	800688c <HAL_SPI_Transmit+0x22>
 8006888:	2302      	movs	r3, #2
 800688a:	e12d      	b.n	8006ae8 <HAL_SPI_Transmit+0x27e>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006894:	f7fd f8d2 	bl	8003a3c <HAL_GetTick>
 8006898:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800689a:	88fb      	ldrh	r3, [r7, #6]
 800689c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d002      	beq.n	80068b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80068aa:	2302      	movs	r3, #2
 80068ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068ae:	e116      	b.n	8006ade <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <HAL_SPI_Transmit+0x52>
 80068b6:	88fb      	ldrh	r3, [r7, #6]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d102      	bne.n	80068c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068c0:	e10d      	b.n	8006ade <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2203      	movs	r2, #3
 80068c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	88fa      	ldrh	r2, [r7, #6]
 80068da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	88fa      	ldrh	r2, [r7, #6]
 80068e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006908:	d10f      	bne.n	800692a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006918:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006928:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006934:	2b40      	cmp	r3, #64	; 0x40
 8006936:	d007      	beq.n	8006948 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006946:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006950:	d14f      	bne.n	80069f2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <HAL_SPI_Transmit+0xf6>
 800695a:	8afb      	ldrh	r3, [r7, #22]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d142      	bne.n	80069e6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006964:	881a      	ldrh	r2, [r3, #0]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006970:	1c9a      	adds	r2, r3, #2
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800697a:	b29b      	uxth	r3, r3
 800697c:	3b01      	subs	r3, #1
 800697e:	b29a      	uxth	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006984:	e02f      	b.n	80069e6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b02      	cmp	r3, #2
 8006992:	d112      	bne.n	80069ba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006998:	881a      	ldrh	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a4:	1c9a      	adds	r2, r3, #2
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	3b01      	subs	r3, #1
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80069b8:	e015      	b.n	80069e6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069ba:	f7fd f83f 	bl	8003a3c <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d803      	bhi.n	80069d2 <HAL_SPI_Transmit+0x168>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069d0:	d102      	bne.n	80069d8 <HAL_SPI_Transmit+0x16e>
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d106      	bne.n	80069e6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80069e4:	e07b      	b.n	8006ade <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1ca      	bne.n	8006986 <HAL_SPI_Transmit+0x11c>
 80069f0:	e050      	b.n	8006a94 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <HAL_SPI_Transmit+0x196>
 80069fa:	8afb      	ldrh	r3, [r7, #22]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d144      	bne.n	8006a8a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	330c      	adds	r3, #12
 8006a0a:	7812      	ldrb	r2, [r2, #0]
 8006a0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006a26:	e030      	b.n	8006a8a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d113      	bne.n	8006a5e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	330c      	adds	r3, #12
 8006a40:	7812      	ldrb	r2, [r2, #0]
 8006a42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a48:	1c5a      	adds	r2, r3, #1
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a5c:	e015      	b.n	8006a8a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a5e:	f7fc ffed 	bl	8003a3c <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	683a      	ldr	r2, [r7, #0]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d803      	bhi.n	8006a76 <HAL_SPI_Transmit+0x20c>
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a74:	d102      	bne.n	8006a7c <HAL_SPI_Transmit+0x212>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d106      	bne.n	8006a8a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006a88:	e029      	b.n	8006ade <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1c9      	bne.n	8006a28 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a94:	69ba      	ldr	r2, [r7, #24]
 8006a96:	6839      	ldr	r1, [r7, #0]
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 fbdf 	bl	800725c <SPI_EndRxTxTransaction>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d002      	beq.n	8006aaa <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10a      	bne.n	8006ac8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	613b      	str	r3, [r7, #16]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	613b      	str	r3, [r7, #16]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	613b      	str	r3, [r7, #16]
 8006ac6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	77fb      	strb	r3, [r7, #31]
 8006ad4:	e003      	b.n	8006ade <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ae6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3720      	adds	r7, #32
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b088      	sub	sp, #32
 8006af4:	af02      	add	r7, sp, #8
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	603b      	str	r3, [r7, #0]
 8006afc:	4613      	mov	r3, r2
 8006afe:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d002      	beq.n	8006b16 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006b10:	2302      	movs	r3, #2
 8006b12:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b14:	e0fb      	b.n	8006d0e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b1e:	d112      	bne.n	8006b46 <HAL_SPI_Receive+0x56>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10e      	bne.n	8006b46 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2204      	movs	r2, #4
 8006b2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006b30:	88fa      	ldrh	r2, [r7, #6]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	4613      	mov	r3, r2
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	68b9      	ldr	r1, [r7, #8]
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f000 f8ef 	bl	8006d20 <HAL_SPI_TransmitReceive>
 8006b42:	4603      	mov	r3, r0
 8006b44:	e0e8      	b.n	8006d18 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d101      	bne.n	8006b54 <HAL_SPI_Receive+0x64>
 8006b50:	2302      	movs	r3, #2
 8006b52:	e0e1      	b.n	8006d18 <HAL_SPI_Receive+0x228>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b5c:	f7fc ff6e 	bl	8003a3c <HAL_GetTick>
 8006b60:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d002      	beq.n	8006b6e <HAL_SPI_Receive+0x7e>
 8006b68:	88fb      	ldrh	r3, [r7, #6]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d102      	bne.n	8006b74 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b72:	e0cc      	b.n	8006d0e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2204      	movs	r2, #4
 8006b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	88fa      	ldrh	r2, [r7, #6]
 8006b8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	88fa      	ldrh	r2, [r7, #6]
 8006b92:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bba:	d10f      	bne.n	8006bdc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006bda:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be6:	2b40      	cmp	r3, #64	; 0x40
 8006be8:	d007      	beq.n	8006bfa <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bf8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d16a      	bne.n	8006cd8 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006c02:	e032      	b.n	8006c6a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d115      	bne.n	8006c3e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f103 020c 	add.w	r2, r3, #12
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1e:	7812      	ldrb	r2, [r2, #0]
 8006c20:	b2d2      	uxtb	r2, r2
 8006c22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c28:	1c5a      	adds	r2, r3, #1
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	3b01      	subs	r3, #1
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c3c:	e015      	b.n	8006c6a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c3e:	f7fc fefd 	bl	8003a3c <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	683a      	ldr	r2, [r7, #0]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d803      	bhi.n	8006c56 <HAL_SPI_Receive+0x166>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c54:	d102      	bne.n	8006c5c <HAL_SPI_Receive+0x16c>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d106      	bne.n	8006c6a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006c68:	e051      	b.n	8006d0e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1c7      	bne.n	8006c04 <HAL_SPI_Receive+0x114>
 8006c74:	e035      	b.n	8006ce2 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d113      	bne.n	8006cac <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8e:	b292      	uxth	r2, r2
 8006c90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c96:	1c9a      	adds	r2, r3, #2
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006caa:	e015      	b.n	8006cd8 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cac:	f7fc fec6 	bl	8003a3c <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d803      	bhi.n	8006cc4 <HAL_SPI_Receive+0x1d4>
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cc2:	d102      	bne.n	8006cca <HAL_SPI_Receive+0x1da>
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d106      	bne.n	8006cd8 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006cd6:	e01a      	b.n	8006d0e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1c9      	bne.n	8006c76 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 fa52 	bl	8007190 <SPI_EndRxTransaction>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d002      	beq.n	8006cf8 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	75fb      	strb	r3, [r7, #23]
 8006d04:	e003      	b.n	8006d0e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3718      	adds	r7, #24
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08c      	sub	sp, #48	; 0x30
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
 8006d2c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d101      	bne.n	8006d46 <HAL_SPI_TransmitReceive+0x26>
 8006d42:	2302      	movs	r3, #2
 8006d44:	e198      	b.n	8007078 <HAL_SPI_TransmitReceive+0x358>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d4e:	f7fc fe75 	bl	8003a3c <HAL_GetTick>
 8006d52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006d64:	887b      	ldrh	r3, [r7, #2]
 8006d66:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d00f      	beq.n	8006d90 <HAL_SPI_TransmitReceive+0x70>
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d76:	d107      	bne.n	8006d88 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d103      	bne.n	8006d88 <HAL_SPI_TransmitReceive+0x68>
 8006d80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	d003      	beq.n	8006d90 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006d88:	2302      	movs	r3, #2
 8006d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006d8e:	e16d      	b.n	800706c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d005      	beq.n	8006da2 <HAL_SPI_TransmitReceive+0x82>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <HAL_SPI_TransmitReceive+0x82>
 8006d9c:	887b      	ldrh	r3, [r7, #2]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d103      	bne.n	8006daa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006da8:	e160      	b.n	800706c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	d003      	beq.n	8006dbe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2205      	movs	r2, #5
 8006dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	887a      	ldrh	r2, [r7, #2]
 8006dce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	887a      	ldrh	r2, [r7, #2]
 8006dd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	887a      	ldrh	r2, [r7, #2]
 8006de0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	887a      	ldrh	r2, [r7, #2]
 8006de6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfe:	2b40      	cmp	r3, #64	; 0x40
 8006e00:	d007      	beq.n	8006e12 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e1a:	d17c      	bne.n	8006f16 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <HAL_SPI_TransmitReceive+0x10a>
 8006e24:	8b7b      	ldrh	r3, [r7, #26]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d16a      	bne.n	8006f00 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2e:	881a      	ldrh	r2, [r3, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3a:	1c9a      	adds	r2, r3, #2
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	3b01      	subs	r3, #1
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e4e:	e057      	b.n	8006f00 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f003 0302 	and.w	r3, r3, #2
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d11b      	bne.n	8006e96 <HAL_SPI_TransmitReceive+0x176>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d016      	beq.n	8006e96 <HAL_SPI_TransmitReceive+0x176>
 8006e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d113      	bne.n	8006e96 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e72:	881a      	ldrh	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7e:	1c9a      	adds	r2, r3, #2
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d119      	bne.n	8006ed8 <HAL_SPI_TransmitReceive+0x1b8>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d014      	beq.n	8006ed8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68da      	ldr	r2, [r3, #12]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb8:	b292      	uxth	r2, r2
 8006eba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	1c9a      	adds	r2, r3, #2
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ed8:	f7fc fdb0 	bl	8003a3c <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d80b      	bhi.n	8006f00 <HAL_SPI_TransmitReceive+0x1e0>
 8006ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eee:	d007      	beq.n	8006f00 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006efe:	e0b5      	b.n	800706c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1a2      	bne.n	8006e50 <HAL_SPI_TransmitReceive+0x130>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d19d      	bne.n	8006e50 <HAL_SPI_TransmitReceive+0x130>
 8006f14:	e080      	b.n	8007018 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <HAL_SPI_TransmitReceive+0x204>
 8006f1e:	8b7b      	ldrh	r3, [r7, #26]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d16f      	bne.n	8007004 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	330c      	adds	r3, #12
 8006f2e:	7812      	ldrb	r2, [r2, #0]
 8006f30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f4a:	e05b      	b.n	8007004 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f003 0302 	and.w	r3, r3, #2
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d11c      	bne.n	8006f94 <HAL_SPI_TransmitReceive+0x274>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d017      	beq.n	8006f94 <HAL_SPI_TransmitReceive+0x274>
 8006f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d114      	bne.n	8006f94 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	330c      	adds	r3, #12
 8006f74:	7812      	ldrb	r2, [r2, #0]
 8006f76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7c:	1c5a      	adds	r2, r3, #1
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d119      	bne.n	8006fd6 <HAL_SPI_TransmitReceive+0x2b6>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d014      	beq.n	8006fd6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68da      	ldr	r2, [r3, #12]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb6:	b2d2      	uxtb	r2, r2
 8006fb8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	1c5a      	adds	r2, r3, #1
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006fd6:	f7fc fd31 	bl	8003a3c <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d803      	bhi.n	8006fee <HAL_SPI_TransmitReceive+0x2ce>
 8006fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fec:	d102      	bne.n	8006ff4 <HAL_SPI_TransmitReceive+0x2d4>
 8006fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d107      	bne.n	8007004 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8007002:	e033      	b.n	800706c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007008:	b29b      	uxth	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d19e      	bne.n	8006f4c <HAL_SPI_TransmitReceive+0x22c>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007012:	b29b      	uxth	r3, r3
 8007014:	2b00      	cmp	r3, #0
 8007016:	d199      	bne.n	8006f4c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800701a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 f91d 	bl	800725c <SPI_EndRxTxTransaction>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d006      	beq.n	8007036 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2220      	movs	r2, #32
 8007032:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007034:	e01a      	b.n	800706c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10a      	bne.n	8007054 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800703e:	2300      	movs	r3, #0
 8007040:	617b      	str	r3, [r7, #20]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	617b      	str	r3, [r7, #20]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	617b      	str	r3, [r7, #20]
 8007052:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007058:	2b00      	cmp	r3, #0
 800705a:	d003      	beq.n	8007064 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007062:	e003      	b.n	800706c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007074:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007078:	4618      	mov	r0, r3
 800707a:	3730      	adds	r7, #48	; 0x30
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b088      	sub	sp, #32
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	603b      	str	r3, [r7, #0]
 800708c:	4613      	mov	r3, r2
 800708e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007090:	f7fc fcd4 	bl	8003a3c <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007098:	1a9b      	subs	r3, r3, r2
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	4413      	add	r3, r2
 800709e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80070a0:	f7fc fccc 	bl	8003a3c <HAL_GetTick>
 80070a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80070a6:	4b39      	ldr	r3, [pc, #228]	; (800718c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	015b      	lsls	r3, r3, #5
 80070ac:	0d1b      	lsrs	r3, r3, #20
 80070ae:	69fa      	ldr	r2, [r7, #28]
 80070b0:	fb02 f303 	mul.w	r3, r2, r3
 80070b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070b6:	e054      	b.n	8007162 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070be:	d050      	beq.n	8007162 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070c0:	f7fc fcbc 	bl	8003a3c <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	69fa      	ldr	r2, [r7, #28]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d902      	bls.n	80070d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d13d      	bne.n	8007152 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80070e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070ee:	d111      	bne.n	8007114 <SPI_WaitFlagStateUntilTimeout+0x94>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070f8:	d004      	beq.n	8007104 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007102:	d107      	bne.n	8007114 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007112:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800711c:	d10f      	bne.n	800713e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800713c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e017      	b.n	8007182 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d101      	bne.n	800715c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	3b01      	subs	r3, #1
 8007160:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	4013      	ands	r3, r2
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	429a      	cmp	r2, r3
 8007170:	bf0c      	ite	eq
 8007172:	2301      	moveq	r3, #1
 8007174:	2300      	movne	r3, #0
 8007176:	b2db      	uxtb	r3, r3
 8007178:	461a      	mov	r2, r3
 800717a:	79fb      	ldrb	r3, [r7, #7]
 800717c:	429a      	cmp	r2, r3
 800717e:	d19b      	bne.n	80070b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3720      	adds	r7, #32
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20000004 	.word	0x20000004

08007190 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af02      	add	r7, sp, #8
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071a4:	d111      	bne.n	80071ca <SPI_EndRxTransaction+0x3a>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071ae:	d004      	beq.n	80071ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071b8:	d107      	bne.n	80071ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071c8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071d2:	d12a      	bne.n	800722a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071dc:	d012      	beq.n	8007204 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	2200      	movs	r2, #0
 80071e6:	2180      	movs	r1, #128	; 0x80
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f7ff ff49 	bl	8007080 <SPI_WaitFlagStateUntilTimeout>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d02d      	beq.n	8007250 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f8:	f043 0220 	orr.w	r2, r3, #32
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e026      	b.n	8007252 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2200      	movs	r2, #0
 800720c:	2101      	movs	r1, #1
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f7ff ff36 	bl	8007080 <SPI_WaitFlagStateUntilTimeout>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d01a      	beq.n	8007250 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721e:	f043 0220 	orr.w	r2, r3, #32
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e013      	b.n	8007252 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2200      	movs	r2, #0
 8007232:	2101      	movs	r1, #1
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f7ff ff23 	bl	8007080 <SPI_WaitFlagStateUntilTimeout>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d007      	beq.n	8007250 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007244:	f043 0220 	orr.w	r2, r3, #32
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e000      	b.n	8007252 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
	...

0800725c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b088      	sub	sp, #32
 8007260:	af02      	add	r7, sp, #8
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2201      	movs	r2, #1
 8007270:	2102      	movs	r1, #2
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f7ff ff04 	bl	8007080 <SPI_WaitFlagStateUntilTimeout>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d007      	beq.n	800728e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007282:	f043 0220 	orr.w	r2, r3, #32
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e032      	b.n	80072f4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800728e:	4b1b      	ldr	r3, [pc, #108]	; (80072fc <SPI_EndRxTxTransaction+0xa0>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a1b      	ldr	r2, [pc, #108]	; (8007300 <SPI_EndRxTxTransaction+0xa4>)
 8007294:	fba2 2303 	umull	r2, r3, r2, r3
 8007298:	0d5b      	lsrs	r3, r3, #21
 800729a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800729e:	fb02 f303 	mul.w	r3, r2, r3
 80072a2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072ac:	d112      	bne.n	80072d4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	2200      	movs	r2, #0
 80072b6:	2180      	movs	r1, #128	; 0x80
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f7ff fee1 	bl	8007080 <SPI_WaitFlagStateUntilTimeout>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d016      	beq.n	80072f2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c8:	f043 0220 	orr.w	r2, r3, #32
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e00f      	b.n	80072f4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00a      	beq.n	80072f0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	3b01      	subs	r3, #1
 80072de:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ea:	2b80      	cmp	r3, #128	; 0x80
 80072ec:	d0f2      	beq.n	80072d4 <SPI_EndRxTxTransaction+0x78>
 80072ee:	e000      	b.n	80072f2 <SPI_EndRxTxTransaction+0x96>
        break;
 80072f0:	bf00      	nop
  }

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	20000004 	.word	0x20000004
 8007300:	165e9f81 	.word	0x165e9f81

08007304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e041      	b.n	800739a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d106      	bne.n	8007330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f839 	bl	80073a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3304      	adds	r3, #4
 8007340:	4619      	mov	r1, r3
 8007342:	4610      	mov	r0, r2
 8007344:	f000 f9c0 	bl	80076c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b083      	sub	sp, #12
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80073aa:	bf00      	nop
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
	...

080073b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d001      	beq.n	80073d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e04e      	b.n	800746e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2202      	movs	r2, #2
 80073d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68da      	ldr	r2, [r3, #12]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f042 0201 	orr.w	r2, r2, #1
 80073e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a23      	ldr	r2, [pc, #140]	; (800747c <HAL_TIM_Base_Start_IT+0xc4>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d022      	beq.n	8007438 <HAL_TIM_Base_Start_IT+0x80>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073fa:	d01d      	beq.n	8007438 <HAL_TIM_Base_Start_IT+0x80>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a1f      	ldr	r2, [pc, #124]	; (8007480 <HAL_TIM_Base_Start_IT+0xc8>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d018      	beq.n	8007438 <HAL_TIM_Base_Start_IT+0x80>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a1e      	ldr	r2, [pc, #120]	; (8007484 <HAL_TIM_Base_Start_IT+0xcc>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d013      	beq.n	8007438 <HAL_TIM_Base_Start_IT+0x80>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a1c      	ldr	r2, [pc, #112]	; (8007488 <HAL_TIM_Base_Start_IT+0xd0>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d00e      	beq.n	8007438 <HAL_TIM_Base_Start_IT+0x80>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a1b      	ldr	r2, [pc, #108]	; (800748c <HAL_TIM_Base_Start_IT+0xd4>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d009      	beq.n	8007438 <HAL_TIM_Base_Start_IT+0x80>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a19      	ldr	r2, [pc, #100]	; (8007490 <HAL_TIM_Base_Start_IT+0xd8>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d004      	beq.n	8007438 <HAL_TIM_Base_Start_IT+0x80>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a18      	ldr	r2, [pc, #96]	; (8007494 <HAL_TIM_Base_Start_IT+0xdc>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d111      	bne.n	800745c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f003 0307 	and.w	r3, r3, #7
 8007442:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2b06      	cmp	r3, #6
 8007448:	d010      	beq.n	800746c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f042 0201 	orr.w	r2, r2, #1
 8007458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800745a:	e007      	b.n	800746c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f042 0201 	orr.w	r2, r2, #1
 800746a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	40010000 	.word	0x40010000
 8007480:	40000400 	.word	0x40000400
 8007484:	40000800 	.word	0x40000800
 8007488:	40000c00 	.word	0x40000c00
 800748c:	40010400 	.word	0x40010400
 8007490:	40014000 	.word	0x40014000
 8007494:	40001800 	.word	0x40001800

08007498 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f003 0302 	and.w	r3, r3, #2
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d020      	beq.n	80074fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f003 0302 	and.w	r3, r3, #2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d01b      	beq.n	80074fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f06f 0202 	mvn.w	r2, #2
 80074cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	f003 0303 	and.w	r3, r3, #3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f8d2 	bl	800768c <HAL_TIM_IC_CaptureCallback>
 80074e8:	e005      	b.n	80074f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f8c4 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f8d5 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	f003 0304 	and.w	r3, r3, #4
 8007502:	2b00      	cmp	r3, #0
 8007504:	d020      	beq.n	8007548 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f003 0304 	and.w	r3, r3, #4
 800750c:	2b00      	cmp	r3, #0
 800750e:	d01b      	beq.n	8007548 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f06f 0204 	mvn.w	r2, #4
 8007518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2202      	movs	r2, #2
 800751e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f8ac 	bl	800768c <HAL_TIM_IC_CaptureCallback>
 8007534:	e005      	b.n	8007542 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f89e 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f8af 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	f003 0308 	and.w	r3, r3, #8
 800754e:	2b00      	cmp	r3, #0
 8007550:	d020      	beq.n	8007594 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f003 0308 	and.w	r3, r3, #8
 8007558:	2b00      	cmp	r3, #0
 800755a:	d01b      	beq.n	8007594 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f06f 0208 	mvn.w	r2, #8
 8007564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2204      	movs	r2, #4
 800756a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	69db      	ldr	r3, [r3, #28]
 8007572:	f003 0303 	and.w	r3, r3, #3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f886 	bl	800768c <HAL_TIM_IC_CaptureCallback>
 8007580:	e005      	b.n	800758e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f878 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f889 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	f003 0310 	and.w	r3, r3, #16
 800759a:	2b00      	cmp	r3, #0
 800759c:	d020      	beq.n	80075e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f003 0310 	and.w	r3, r3, #16
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d01b      	beq.n	80075e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f06f 0210 	mvn.w	r2, #16
 80075b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2208      	movs	r2, #8
 80075b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	69db      	ldr	r3, [r3, #28]
 80075be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d003      	beq.n	80075ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f860 	bl	800768c <HAL_TIM_IC_CaptureCallback>
 80075cc:	e005      	b.n	80075da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f852 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f863 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00c      	beq.n	8007604 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f003 0301 	and.w	r3, r3, #1
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d007      	beq.n	8007604 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f06f 0201 	mvn.w	r2, #1
 80075fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7fb fb38 	bl	8002c74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00c      	beq.n	8007628 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007614:	2b00      	cmp	r3, #0
 8007616:	d007      	beq.n	8007628 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f906 	bl	8007834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00c      	beq.n	800764c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007638:	2b00      	cmp	r3, #0
 800763a:	d007      	beq.n	800764c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f834 	bl	80076b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	f003 0320 	and.w	r3, r3, #32
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00c      	beq.n	8007670 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f003 0320 	and.w	r3, r3, #32
 800765c:	2b00      	cmp	r3, #0
 800765e:	d007      	beq.n	8007670 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f06f 0220 	mvn.w	r2, #32
 8007668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f8d8 	bl	8007820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007670:	bf00      	nop
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a46      	ldr	r2, [pc, #280]	; (80077f4 <TIM_Base_SetConfig+0x12c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d013      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e6:	d00f      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a43      	ldr	r2, [pc, #268]	; (80077f8 <TIM_Base_SetConfig+0x130>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d00b      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a42      	ldr	r2, [pc, #264]	; (80077fc <TIM_Base_SetConfig+0x134>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d007      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a41      	ldr	r2, [pc, #260]	; (8007800 <TIM_Base_SetConfig+0x138>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d003      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a40      	ldr	r2, [pc, #256]	; (8007804 <TIM_Base_SetConfig+0x13c>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d108      	bne.n	800771a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4313      	orrs	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a35      	ldr	r2, [pc, #212]	; (80077f4 <TIM_Base_SetConfig+0x12c>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d02b      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007728:	d027      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a32      	ldr	r2, [pc, #200]	; (80077f8 <TIM_Base_SetConfig+0x130>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d023      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a31      	ldr	r2, [pc, #196]	; (80077fc <TIM_Base_SetConfig+0x134>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d01f      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a30      	ldr	r2, [pc, #192]	; (8007800 <TIM_Base_SetConfig+0x138>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d01b      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a2f      	ldr	r2, [pc, #188]	; (8007804 <TIM_Base_SetConfig+0x13c>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d017      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a2e      	ldr	r2, [pc, #184]	; (8007808 <TIM_Base_SetConfig+0x140>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d013      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a2d      	ldr	r2, [pc, #180]	; (800780c <TIM_Base_SetConfig+0x144>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d00f      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a2c      	ldr	r2, [pc, #176]	; (8007810 <TIM_Base_SetConfig+0x148>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00b      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a2b      	ldr	r2, [pc, #172]	; (8007814 <TIM_Base_SetConfig+0x14c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d007      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a2a      	ldr	r2, [pc, #168]	; (8007818 <TIM_Base_SetConfig+0x150>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d003      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a29      	ldr	r2, [pc, #164]	; (800781c <TIM_Base_SetConfig+0x154>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d108      	bne.n	800778c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	4313      	orrs	r3, r2
 800778a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	4313      	orrs	r3, r2
 8007798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	689a      	ldr	r2, [r3, #8]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a10      	ldr	r2, [pc, #64]	; (80077f4 <TIM_Base_SetConfig+0x12c>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d003      	beq.n	80077c0 <TIM_Base_SetConfig+0xf8>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a12      	ldr	r2, [pc, #72]	; (8007804 <TIM_Base_SetConfig+0x13c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d103      	bne.n	80077c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	691a      	ldr	r2, [r3, #16]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d105      	bne.n	80077e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	f023 0201 	bic.w	r2, r3, #1
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	611a      	str	r2, [r3, #16]
  }
}
 80077e6:	bf00      	nop
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	40010000 	.word	0x40010000
 80077f8:	40000400 	.word	0x40000400
 80077fc:	40000800 	.word	0x40000800
 8007800:	40000c00 	.word	0x40000c00
 8007804:	40010400 	.word	0x40010400
 8007808:	40014000 	.word	0x40014000
 800780c:	40014400 	.word	0x40014400
 8007810:	40014800 	.word	0x40014800
 8007814:	40001800 	.word	0x40001800
 8007818:	40001c00 	.word	0x40001c00
 800781c:	40002000 	.word	0x40002000

08007820 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e042      	b.n	80078e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d106      	bne.n	8007874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f7fb fedc 	bl	800362c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2224      	movs	r2, #36	; 0x24
 8007878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68da      	ldr	r2, [r3, #12]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800788a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f973 	bl	8007b78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	691a      	ldr	r2, [r3, #16]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	695a      	ldr	r2, [r3, #20]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68da      	ldr	r2, [r3, #12]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2220      	movs	r2, #32
 80078d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b08a      	sub	sp, #40	; 0x28
 80078ec:	af02      	add	r7, sp, #8
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	603b      	str	r3, [r7, #0]
 80078f4:	4613      	mov	r3, r2
 80078f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80078f8:	2300      	movs	r3, #0
 80078fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b20      	cmp	r3, #32
 8007906:	d175      	bne.n	80079f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d002      	beq.n	8007914 <HAL_UART_Transmit+0x2c>
 800790e:	88fb      	ldrh	r3, [r7, #6]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e06e      	b.n	80079f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2200      	movs	r2, #0
 800791c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2221      	movs	r2, #33	; 0x21
 8007922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007926:	f7fc f889 	bl	8003a3c <HAL_GetTick>
 800792a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	88fa      	ldrh	r2, [r7, #6]
 8007930:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	88fa      	ldrh	r2, [r7, #6]
 8007936:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007940:	d108      	bne.n	8007954 <HAL_UART_Transmit+0x6c>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d104      	bne.n	8007954 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800794a:	2300      	movs	r3, #0
 800794c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	61bb      	str	r3, [r7, #24]
 8007952:	e003      	b.n	800795c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007958:	2300      	movs	r3, #0
 800795a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800795c:	e02e      	b.n	80079bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	2200      	movs	r2, #0
 8007966:	2180      	movs	r1, #128	; 0x80
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f000 f848 	bl	80079fe <UART_WaitOnFlagUntilTimeout>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d005      	beq.n	8007980 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2220      	movs	r2, #32
 8007978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e03a      	b.n	80079f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10b      	bne.n	800799e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	461a      	mov	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007994:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	3302      	adds	r3, #2
 800799a:	61bb      	str	r3, [r7, #24]
 800799c:	e007      	b.n	80079ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	781a      	ldrb	r2, [r3, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	3301      	adds	r3, #1
 80079ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	3b01      	subs	r3, #1
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1cb      	bne.n	800795e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2200      	movs	r2, #0
 80079ce:	2140      	movs	r1, #64	; 0x40
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f000 f814 	bl	80079fe <UART_WaitOnFlagUntilTimeout>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d005      	beq.n	80079e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2220      	movs	r2, #32
 80079e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e006      	b.n	80079f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2220      	movs	r2, #32
 80079ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	e000      	b.n	80079f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80079f4:	2302      	movs	r3, #2
  }
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3720      	adds	r7, #32
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b086      	sub	sp, #24
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	60f8      	str	r0, [r7, #12]
 8007a06:	60b9      	str	r1, [r7, #8]
 8007a08:	603b      	str	r3, [r7, #0]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a0e:	e03b      	b.n	8007a88 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a16:	d037      	beq.n	8007a88 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a18:	f7fc f810 	bl	8003a3c <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	6a3a      	ldr	r2, [r7, #32]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d302      	bcc.n	8007a2e <UART_WaitOnFlagUntilTimeout+0x30>
 8007a28:	6a3b      	ldr	r3, [r7, #32]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e03a      	b.n	8007aa8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	f003 0304 	and.w	r3, r3, #4
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d023      	beq.n	8007a88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	2b80      	cmp	r3, #128	; 0x80
 8007a44:	d020      	beq.n	8007a88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	2b40      	cmp	r3, #64	; 0x40
 8007a4a:	d01d      	beq.n	8007a88 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0308 	and.w	r3, r3, #8
 8007a56:	2b08      	cmp	r3, #8
 8007a58:	d116      	bne.n	8007a88 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	617b      	str	r3, [r7, #20]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	617b      	str	r3, [r7, #20]
 8007a6e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 f81d 	bl	8007ab0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2208      	movs	r2, #8
 8007a7a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e00f      	b.n	8007aa8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	4013      	ands	r3, r2
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	bf0c      	ite	eq
 8007a98:	2301      	moveq	r3, #1
 8007a9a:	2300      	movne	r3, #0
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	79fb      	ldrb	r3, [r7, #7]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d0b4      	beq.n	8007a10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b095      	sub	sp, #84	; 0x54
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	330c      	adds	r3, #12
 8007abe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac2:	e853 3f00 	ldrex	r3, [r3]
 8007ac6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	330c      	adds	r3, #12
 8007ad6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ad8:	643a      	str	r2, [r7, #64]	; 0x40
 8007ada:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007adc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ade:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ae0:	e841 2300 	strex	r3, r2, [r1]
 8007ae4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1e5      	bne.n	8007ab8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3314      	adds	r3, #20
 8007af2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	e853 3f00 	ldrex	r3, [r3]
 8007afa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	f023 0301 	bic.w	r3, r3, #1
 8007b02:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3314      	adds	r3, #20
 8007b0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b14:	e841 2300 	strex	r3, r2, [r1]
 8007b18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e5      	bne.n	8007aec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d119      	bne.n	8007b5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	330c      	adds	r3, #12
 8007b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	e853 3f00 	ldrex	r3, [r3]
 8007b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	f023 0310 	bic.w	r3, r3, #16
 8007b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	330c      	adds	r3, #12
 8007b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b48:	61ba      	str	r2, [r7, #24]
 8007b4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4c:	6979      	ldr	r1, [r7, #20]
 8007b4e:	69ba      	ldr	r2, [r7, #24]
 8007b50:	e841 2300 	strex	r3, r2, [r1]
 8007b54:	613b      	str	r3, [r7, #16]
   return(result);
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1e5      	bne.n	8007b28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007b6a:	bf00      	nop
 8007b6c:	3754      	adds	r7, #84	; 0x54
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
	...

08007b78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b7c:	b0c0      	sub	sp, #256	; 0x100
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b94:	68d9      	ldr	r1, [r3, #12]
 8007b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	ea40 0301 	orr.w	r3, r0, r1
 8007ba0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba6:	689a      	ldr	r2, [r3, #8]
 8007ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bbc:	69db      	ldr	r3, [r3, #28]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007bd0:	f021 010c 	bic.w	r1, r1, #12
 8007bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bde:	430b      	orrs	r3, r1
 8007be0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf2:	6999      	ldr	r1, [r3, #24]
 8007bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	ea40 0301 	orr.w	r3, r0, r1
 8007bfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	4b8f      	ldr	r3, [pc, #572]	; (8007e44 <UART_SetConfig+0x2cc>)
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d005      	beq.n	8007c18 <UART_SetConfig+0xa0>
 8007c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	4b8d      	ldr	r3, [pc, #564]	; (8007e48 <UART_SetConfig+0x2d0>)
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d104      	bne.n	8007c22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c18:	f7fe fd58 	bl	80066cc <HAL_RCC_GetPCLK2Freq>
 8007c1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007c20:	e003      	b.n	8007c2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c22:	f7fe fd3f 	bl	80066a4 <HAL_RCC_GetPCLK1Freq>
 8007c26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c2e:	69db      	ldr	r3, [r3, #28]
 8007c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c34:	f040 810c 	bne.w	8007e50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007c46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007c4a:	4622      	mov	r2, r4
 8007c4c:	462b      	mov	r3, r5
 8007c4e:	1891      	adds	r1, r2, r2
 8007c50:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c52:	415b      	adcs	r3, r3
 8007c54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c5a:	4621      	mov	r1, r4
 8007c5c:	eb12 0801 	adds.w	r8, r2, r1
 8007c60:	4629      	mov	r1, r5
 8007c62:	eb43 0901 	adc.w	r9, r3, r1
 8007c66:	f04f 0200 	mov.w	r2, #0
 8007c6a:	f04f 0300 	mov.w	r3, #0
 8007c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c7a:	4690      	mov	r8, r2
 8007c7c:	4699      	mov	r9, r3
 8007c7e:	4623      	mov	r3, r4
 8007c80:	eb18 0303 	adds.w	r3, r8, r3
 8007c84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c88:	462b      	mov	r3, r5
 8007c8a:	eb49 0303 	adc.w	r3, r9, r3
 8007c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007ca2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	18db      	adds	r3, r3, r3
 8007caa:	653b      	str	r3, [r7, #80]	; 0x50
 8007cac:	4613      	mov	r3, r2
 8007cae:	eb42 0303 	adc.w	r3, r2, r3
 8007cb2:	657b      	str	r3, [r7, #84]	; 0x54
 8007cb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007cb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007cbc:	f7f8 ff84 	bl	8000bc8 <__aeabi_uldivmod>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4b61      	ldr	r3, [pc, #388]	; (8007e4c <UART_SetConfig+0x2d4>)
 8007cc6:	fba3 2302 	umull	r2, r3, r3, r2
 8007cca:	095b      	lsrs	r3, r3, #5
 8007ccc:	011c      	lsls	r4, r3, #4
 8007cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007cdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007ce0:	4642      	mov	r2, r8
 8007ce2:	464b      	mov	r3, r9
 8007ce4:	1891      	adds	r1, r2, r2
 8007ce6:	64b9      	str	r1, [r7, #72]	; 0x48
 8007ce8:	415b      	adcs	r3, r3
 8007cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007cf0:	4641      	mov	r1, r8
 8007cf2:	eb12 0a01 	adds.w	sl, r2, r1
 8007cf6:	4649      	mov	r1, r9
 8007cf8:	eb43 0b01 	adc.w	fp, r3, r1
 8007cfc:	f04f 0200 	mov.w	r2, #0
 8007d00:	f04f 0300 	mov.w	r3, #0
 8007d04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d10:	4692      	mov	sl, r2
 8007d12:	469b      	mov	fp, r3
 8007d14:	4643      	mov	r3, r8
 8007d16:	eb1a 0303 	adds.w	r3, sl, r3
 8007d1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d1e:	464b      	mov	r3, r9
 8007d20:	eb4b 0303 	adc.w	r3, fp, r3
 8007d24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007d38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	18db      	adds	r3, r3, r3
 8007d40:	643b      	str	r3, [r7, #64]	; 0x40
 8007d42:	4613      	mov	r3, r2
 8007d44:	eb42 0303 	adc.w	r3, r2, r3
 8007d48:	647b      	str	r3, [r7, #68]	; 0x44
 8007d4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007d52:	f7f8 ff39 	bl	8000bc8 <__aeabi_uldivmod>
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	4611      	mov	r1, r2
 8007d5c:	4b3b      	ldr	r3, [pc, #236]	; (8007e4c <UART_SetConfig+0x2d4>)
 8007d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8007d62:	095b      	lsrs	r3, r3, #5
 8007d64:	2264      	movs	r2, #100	; 0x64
 8007d66:	fb02 f303 	mul.w	r3, r2, r3
 8007d6a:	1acb      	subs	r3, r1, r3
 8007d6c:	00db      	lsls	r3, r3, #3
 8007d6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007d72:	4b36      	ldr	r3, [pc, #216]	; (8007e4c <UART_SetConfig+0x2d4>)
 8007d74:	fba3 2302 	umull	r2, r3, r3, r2
 8007d78:	095b      	lsrs	r3, r3, #5
 8007d7a:	005b      	lsls	r3, r3, #1
 8007d7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d80:	441c      	add	r4, r3
 8007d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d86:	2200      	movs	r2, #0
 8007d88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007d90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007d94:	4642      	mov	r2, r8
 8007d96:	464b      	mov	r3, r9
 8007d98:	1891      	adds	r1, r2, r2
 8007d9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d9c:	415b      	adcs	r3, r3
 8007d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007da0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007da4:	4641      	mov	r1, r8
 8007da6:	1851      	adds	r1, r2, r1
 8007da8:	6339      	str	r1, [r7, #48]	; 0x30
 8007daa:	4649      	mov	r1, r9
 8007dac:	414b      	adcs	r3, r1
 8007dae:	637b      	str	r3, [r7, #52]	; 0x34
 8007db0:	f04f 0200 	mov.w	r2, #0
 8007db4:	f04f 0300 	mov.w	r3, #0
 8007db8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007dbc:	4659      	mov	r1, fp
 8007dbe:	00cb      	lsls	r3, r1, #3
 8007dc0:	4651      	mov	r1, sl
 8007dc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dc6:	4651      	mov	r1, sl
 8007dc8:	00ca      	lsls	r2, r1, #3
 8007dca:	4610      	mov	r0, r2
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4603      	mov	r3, r0
 8007dd0:	4642      	mov	r2, r8
 8007dd2:	189b      	adds	r3, r3, r2
 8007dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007dd8:	464b      	mov	r3, r9
 8007dda:	460a      	mov	r2, r1
 8007ddc:	eb42 0303 	adc.w	r3, r2, r3
 8007de0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007df0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007df4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007df8:	460b      	mov	r3, r1
 8007dfa:	18db      	adds	r3, r3, r3
 8007dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dfe:	4613      	mov	r3, r2
 8007e00:	eb42 0303 	adc.w	r3, r2, r3
 8007e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007e0e:	f7f8 fedb 	bl	8000bc8 <__aeabi_uldivmod>
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	4b0d      	ldr	r3, [pc, #52]	; (8007e4c <UART_SetConfig+0x2d4>)
 8007e18:	fba3 1302 	umull	r1, r3, r3, r2
 8007e1c:	095b      	lsrs	r3, r3, #5
 8007e1e:	2164      	movs	r1, #100	; 0x64
 8007e20:	fb01 f303 	mul.w	r3, r1, r3
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	3332      	adds	r3, #50	; 0x32
 8007e2a:	4a08      	ldr	r2, [pc, #32]	; (8007e4c <UART_SetConfig+0x2d4>)
 8007e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e30:	095b      	lsrs	r3, r3, #5
 8007e32:	f003 0207 	and.w	r2, r3, #7
 8007e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4422      	add	r2, r4
 8007e3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e40:	e106      	b.n	8008050 <UART_SetConfig+0x4d8>
 8007e42:	bf00      	nop
 8007e44:	40011000 	.word	0x40011000
 8007e48:	40011400 	.word	0x40011400
 8007e4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e54:	2200      	movs	r2, #0
 8007e56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007e5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007e62:	4642      	mov	r2, r8
 8007e64:	464b      	mov	r3, r9
 8007e66:	1891      	adds	r1, r2, r2
 8007e68:	6239      	str	r1, [r7, #32]
 8007e6a:	415b      	adcs	r3, r3
 8007e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e72:	4641      	mov	r1, r8
 8007e74:	1854      	adds	r4, r2, r1
 8007e76:	4649      	mov	r1, r9
 8007e78:	eb43 0501 	adc.w	r5, r3, r1
 8007e7c:	f04f 0200 	mov.w	r2, #0
 8007e80:	f04f 0300 	mov.w	r3, #0
 8007e84:	00eb      	lsls	r3, r5, #3
 8007e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e8a:	00e2      	lsls	r2, r4, #3
 8007e8c:	4614      	mov	r4, r2
 8007e8e:	461d      	mov	r5, r3
 8007e90:	4643      	mov	r3, r8
 8007e92:	18e3      	adds	r3, r4, r3
 8007e94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e98:	464b      	mov	r3, r9
 8007e9a:	eb45 0303 	adc.w	r3, r5, r3
 8007e9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007eae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007eb2:	f04f 0200 	mov.w	r2, #0
 8007eb6:	f04f 0300 	mov.w	r3, #0
 8007eba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007ebe:	4629      	mov	r1, r5
 8007ec0:	008b      	lsls	r3, r1, #2
 8007ec2:	4621      	mov	r1, r4
 8007ec4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ec8:	4621      	mov	r1, r4
 8007eca:	008a      	lsls	r2, r1, #2
 8007ecc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007ed0:	f7f8 fe7a 	bl	8000bc8 <__aeabi_uldivmod>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4b60      	ldr	r3, [pc, #384]	; (800805c <UART_SetConfig+0x4e4>)
 8007eda:	fba3 2302 	umull	r2, r3, r3, r2
 8007ede:	095b      	lsrs	r3, r3, #5
 8007ee0:	011c      	lsls	r4, r3, #4
 8007ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007eec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007ef0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007ef4:	4642      	mov	r2, r8
 8007ef6:	464b      	mov	r3, r9
 8007ef8:	1891      	adds	r1, r2, r2
 8007efa:	61b9      	str	r1, [r7, #24]
 8007efc:	415b      	adcs	r3, r3
 8007efe:	61fb      	str	r3, [r7, #28]
 8007f00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f04:	4641      	mov	r1, r8
 8007f06:	1851      	adds	r1, r2, r1
 8007f08:	6139      	str	r1, [r7, #16]
 8007f0a:	4649      	mov	r1, r9
 8007f0c:	414b      	adcs	r3, r1
 8007f0e:	617b      	str	r3, [r7, #20]
 8007f10:	f04f 0200 	mov.w	r2, #0
 8007f14:	f04f 0300 	mov.w	r3, #0
 8007f18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f1c:	4659      	mov	r1, fp
 8007f1e:	00cb      	lsls	r3, r1, #3
 8007f20:	4651      	mov	r1, sl
 8007f22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f26:	4651      	mov	r1, sl
 8007f28:	00ca      	lsls	r2, r1, #3
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	4603      	mov	r3, r0
 8007f30:	4642      	mov	r2, r8
 8007f32:	189b      	adds	r3, r3, r2
 8007f34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f38:	464b      	mov	r3, r9
 8007f3a:	460a      	mov	r2, r1
 8007f3c:	eb42 0303 	adc.w	r3, r2, r3
 8007f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007f50:	f04f 0200 	mov.w	r2, #0
 8007f54:	f04f 0300 	mov.w	r3, #0
 8007f58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007f5c:	4649      	mov	r1, r9
 8007f5e:	008b      	lsls	r3, r1, #2
 8007f60:	4641      	mov	r1, r8
 8007f62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f66:	4641      	mov	r1, r8
 8007f68:	008a      	lsls	r2, r1, #2
 8007f6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007f6e:	f7f8 fe2b 	bl	8000bc8 <__aeabi_uldivmod>
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	4611      	mov	r1, r2
 8007f78:	4b38      	ldr	r3, [pc, #224]	; (800805c <UART_SetConfig+0x4e4>)
 8007f7a:	fba3 2301 	umull	r2, r3, r3, r1
 8007f7e:	095b      	lsrs	r3, r3, #5
 8007f80:	2264      	movs	r2, #100	; 0x64
 8007f82:	fb02 f303 	mul.w	r3, r2, r3
 8007f86:	1acb      	subs	r3, r1, r3
 8007f88:	011b      	lsls	r3, r3, #4
 8007f8a:	3332      	adds	r3, #50	; 0x32
 8007f8c:	4a33      	ldr	r2, [pc, #204]	; (800805c <UART_SetConfig+0x4e4>)
 8007f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f92:	095b      	lsrs	r3, r3, #5
 8007f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f98:	441c      	add	r4, r3
 8007f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	673b      	str	r3, [r7, #112]	; 0x70
 8007fa2:	677a      	str	r2, [r7, #116]	; 0x74
 8007fa4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007fa8:	4642      	mov	r2, r8
 8007faa:	464b      	mov	r3, r9
 8007fac:	1891      	adds	r1, r2, r2
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	415b      	adcs	r3, r3
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fb8:	4641      	mov	r1, r8
 8007fba:	1851      	adds	r1, r2, r1
 8007fbc:	6039      	str	r1, [r7, #0]
 8007fbe:	4649      	mov	r1, r9
 8007fc0:	414b      	adcs	r3, r1
 8007fc2:	607b      	str	r3, [r7, #4]
 8007fc4:	f04f 0200 	mov.w	r2, #0
 8007fc8:	f04f 0300 	mov.w	r3, #0
 8007fcc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007fd0:	4659      	mov	r1, fp
 8007fd2:	00cb      	lsls	r3, r1, #3
 8007fd4:	4651      	mov	r1, sl
 8007fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fda:	4651      	mov	r1, sl
 8007fdc:	00ca      	lsls	r2, r1, #3
 8007fde:	4610      	mov	r0, r2
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	4642      	mov	r2, r8
 8007fe6:	189b      	adds	r3, r3, r2
 8007fe8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fea:	464b      	mov	r3, r9
 8007fec:	460a      	mov	r2, r1
 8007fee:	eb42 0303 	adc.w	r3, r2, r3
 8007ff2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	663b      	str	r3, [r7, #96]	; 0x60
 8007ffe:	667a      	str	r2, [r7, #100]	; 0x64
 8008000:	f04f 0200 	mov.w	r2, #0
 8008004:	f04f 0300 	mov.w	r3, #0
 8008008:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800800c:	4649      	mov	r1, r9
 800800e:	008b      	lsls	r3, r1, #2
 8008010:	4641      	mov	r1, r8
 8008012:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008016:	4641      	mov	r1, r8
 8008018:	008a      	lsls	r2, r1, #2
 800801a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800801e:	f7f8 fdd3 	bl	8000bc8 <__aeabi_uldivmod>
 8008022:	4602      	mov	r2, r0
 8008024:	460b      	mov	r3, r1
 8008026:	4b0d      	ldr	r3, [pc, #52]	; (800805c <UART_SetConfig+0x4e4>)
 8008028:	fba3 1302 	umull	r1, r3, r3, r2
 800802c:	095b      	lsrs	r3, r3, #5
 800802e:	2164      	movs	r1, #100	; 0x64
 8008030:	fb01 f303 	mul.w	r3, r1, r3
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	011b      	lsls	r3, r3, #4
 8008038:	3332      	adds	r3, #50	; 0x32
 800803a:	4a08      	ldr	r2, [pc, #32]	; (800805c <UART_SetConfig+0x4e4>)
 800803c:	fba2 2303 	umull	r2, r3, r2, r3
 8008040:	095b      	lsrs	r3, r3, #5
 8008042:	f003 020f 	and.w	r2, r3, #15
 8008046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4422      	add	r2, r4
 800804e:	609a      	str	r2, [r3, #8]
}
 8008050:	bf00      	nop
 8008052:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008056:	46bd      	mov	sp, r7
 8008058:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800805c:	51eb851f 	.word	0x51eb851f

08008060 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008060:	b5b0      	push	{r4, r5, r7, lr}
 8008062:	b08c      	sub	sp, #48	; 0x30
 8008064:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8008066:	2100      	movs	r1, #0
 8008068:	2000      	movs	r0, #0
 800806a:	f00c fdc7 	bl	8014bfc <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800806e:	4b1a      	ldr	r3, [pc, #104]	; (80080d8 <MX_LWIP_Init+0x78>)
 8008070:	2200      	movs	r2, #0
 8008072:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8008074:	4b19      	ldr	r3, [pc, #100]	; (80080dc <MX_LWIP_Init+0x7c>)
 8008076:	2200      	movs	r2, #0
 8008078:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800807a:	4b19      	ldr	r3, [pc, #100]	; (80080e0 <MX_LWIP_Init+0x80>)
 800807c:	2200      	movs	r2, #0
 800807e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8008080:	4b18      	ldr	r3, [pc, #96]	; (80080e4 <MX_LWIP_Init+0x84>)
 8008082:	9302      	str	r3, [sp, #8]
 8008084:	4b18      	ldr	r3, [pc, #96]	; (80080e8 <MX_LWIP_Init+0x88>)
 8008086:	9301      	str	r3, [sp, #4]
 8008088:	2300      	movs	r3, #0
 800808a:	9300      	str	r3, [sp, #0]
 800808c:	4b14      	ldr	r3, [pc, #80]	; (80080e0 <MX_LWIP_Init+0x80>)
 800808e:	4a13      	ldr	r2, [pc, #76]	; (80080dc <MX_LWIP_Init+0x7c>)
 8008090:	4911      	ldr	r1, [pc, #68]	; (80080d8 <MX_LWIP_Init+0x78>)
 8008092:	4816      	ldr	r0, [pc, #88]	; (80080ec <MX_LWIP_Init+0x8c>)
 8008094:	f00d fb7c 	bl	8015790 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008098:	4814      	ldr	r0, [pc, #80]	; (80080ec <MX_LWIP_Init+0x8c>)
 800809a:	f00d fd33 	bl	8015b04 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800809e:	4813      	ldr	r0, [pc, #76]	; (80080ec <MX_LWIP_Init+0x8c>)
 80080a0:	f00d fd40 	bl	8015b24 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80080a4:	4912      	ldr	r1, [pc, #72]	; (80080f0 <MX_LWIP_Init+0x90>)
 80080a6:	4811      	ldr	r0, [pc, #68]	; (80080ec <MX_LWIP_Init+0x8c>)
 80080a8:	f00d fe42 	bl	8015d30 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, 2048);
 80080ac:	4b11      	ldr	r3, [pc, #68]	; (80080f4 <MX_LWIP_Init+0x94>)
 80080ae:	1d3c      	adds	r4, r7, #4
 80080b0:	461d      	mov	r5, r3
 80080b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80080ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80080be:	1d3b      	adds	r3, r7, #4
 80080c0:	490a      	ldr	r1, [pc, #40]	; (80080ec <MX_LWIP_Init+0x8c>)
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 fd20 	bl	8008b08 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80080c8:	4808      	ldr	r0, [pc, #32]	; (80080ec <MX_LWIP_Init+0x8c>)
 80080ca:	f015 ff33 	bl	801df34 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80080ce:	bf00      	nop
 80080d0:	3720      	adds	r7, #32
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bdb0      	pop	{r4, r5, r7, pc}
 80080d6:	bf00      	nop
 80080d8:	20001aac 	.word	0x20001aac
 80080dc:	20001ab0 	.word	0x20001ab0
 80080e0:	20001ab4 	.word	0x20001ab4
 80080e4:	08014b0d 	.word	0x08014b0d
 80080e8:	080085d1 	.word	0x080085d1
 80080ec:	20001a74 	.word	0x20001a74
 80080f0:	080080f9 	.word	0x080080f9
 80080f4:	08026d4c 	.word	0x08026d4c

080080f8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8008114:	4b04      	ldr	r3, [pc, #16]	; (8008128 <HAL_ETH_RxCpltCallback+0x1c>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4618      	mov	r0, r3
 800811a:	f000 fe71 	bl	8008e00 <osSemaphoreRelease>
}
 800811e:	bf00      	nop
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20006584 	.word	0x20006584

0800812c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8008134:	4b04      	ldr	r3, [pc, #16]	; (8008148 <HAL_ETH_TxCpltCallback+0x1c>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4618      	mov	r0, r3
 800813a:	f000 fe61 	bl	8008e00 <osSemaphoreRelease>
}
 800813e:	bf00      	nop
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	20006588 	.word	0x20006588

0800814c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f7fc fbcd 	bl	80048f4 <HAL_ETH_GetDMAError>
 800815a:	4603      	mov	r3, r0
 800815c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008160:	2b80      	cmp	r3, #128	; 0x80
 8008162:	d104      	bne.n	800816e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8008164:	4b04      	ldr	r3, [pc, #16]	; (8008178 <HAL_ETH_ErrorCallback+0x2c>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4618      	mov	r0, r3
 800816a:	f000 fe49 	bl	8008e00 <osSemaphoreRelease>
  }
}
 800816e:	bf00      	nop
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	20006584 	.word	0x20006584

0800817c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800817c:	b5b0      	push	{r4, r5, r7, lr}
 800817e:	b0ac      	sub	sp, #176	; 0xb0
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t duplex, speed = 0;
 800818a:	2300      	movs	r3, #0
 800818c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  int32_t PHYLinkState = 0;
 8008190:	2300      	movs	r3, #0
 8008192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 8008196:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800819a:	2264      	movs	r2, #100	; 0x64
 800819c:	2100      	movs	r1, #0
 800819e:	4618      	mov	r0, r3
 80081a0:	f01c f8de 	bl	8024360 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80081a4:	4b90      	ldr	r3, [pc, #576]	; (80083e8 <low_level_init+0x26c>)
 80081a6:	4a91      	ldr	r2, [pc, #580]	; (80083ec <low_level_init+0x270>)
 80081a8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0xAE;
 80081aa:	23ae      	movs	r3, #174	; 0xae
 80081ac:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[1] = 0x04;
 80081b0:	2304      	movs	r3, #4
 80081b2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  MACAddr[2] = 0x65;
 80081b6:	2365      	movs	r3, #101	; 0x65
 80081b8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  MACAddr[3] = 0x11;
 80081bc:	2311      	movs	r3, #17
 80081be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MACAddr[4] = 0xC2;
 80081c2:	23c2      	movs	r3, #194	; 0xc2
 80081c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  MACAddr[5] = 0xD9;
 80081c8:	23d9      	movs	r3, #217	; 0xd9
 80081ca:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  heth.Init.MACAddr = &MACAddr[0];
 80081ce:	4a86      	ldr	r2, [pc, #536]	; (80083e8 <low_level_init+0x26c>)
 80081d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80081d4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80081d6:	4b84      	ldr	r3, [pc, #528]	; (80083e8 <low_level_init+0x26c>)
 80081d8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80081dc:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80081de:	4b82      	ldr	r3, [pc, #520]	; (80083e8 <low_level_init+0x26c>)
 80081e0:	4a83      	ldr	r2, [pc, #524]	; (80083f0 <low_level_init+0x274>)
 80081e2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80081e4:	4b80      	ldr	r3, [pc, #512]	; (80083e8 <low_level_init+0x26c>)
 80081e6:	4a83      	ldr	r2, [pc, #524]	; (80083f4 <low_level_init+0x278>)
 80081e8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80081ea:	4b7f      	ldr	r3, [pc, #508]	; (80083e8 <low_level_init+0x26c>)
 80081ec:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80081f0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80081f2:	487d      	ldr	r0, [pc, #500]	; (80083e8 <low_level_init+0x26c>)
 80081f4:	f7fb fd34 	bl	8003c60 <HAL_ETH_Init>
 80081f8:	4603      	mov	r3, r0
 80081fa:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80081fe:	2238      	movs	r2, #56	; 0x38
 8008200:	2100      	movs	r1, #0
 8008202:	487d      	ldr	r0, [pc, #500]	; (80083f8 <low_level_init+0x27c>)
 8008204:	f01c f8ac 	bl	8024360 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008208:	4b7b      	ldr	r3, [pc, #492]	; (80083f8 <low_level_init+0x27c>)
 800820a:	2221      	movs	r2, #33	; 0x21
 800820c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800820e:	4b7a      	ldr	r3, [pc, #488]	; (80083f8 <low_level_init+0x27c>)
 8008210:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8008214:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008216:	4b78      	ldr	r3, [pc, #480]	; (80083f8 <low_level_init+0x27c>)
 8008218:	2200      	movs	r2, #0
 800821a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800821c:	4877      	ldr	r0, [pc, #476]	; (80083fc <low_level_init+0x280>)
 800821e:	f00d f971 	bl	8015504 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2206      	movs	r2, #6
 8008226:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800822a:	4b6f      	ldr	r3, [pc, #444]	; (80083e8 <low_level_init+0x26c>)
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	781a      	ldrb	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008236:	4b6c      	ldr	r3, [pc, #432]	; (80083e8 <low_level_init+0x26c>)
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	785a      	ldrb	r2, [r3, #1]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008242:	4b69      	ldr	r3, [pc, #420]	; (80083e8 <low_level_init+0x26c>)
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	789a      	ldrb	r2, [r3, #2]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800824e:	4b66      	ldr	r3, [pc, #408]	; (80083e8 <low_level_init+0x26c>)
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	78da      	ldrb	r2, [r3, #3]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800825a:	4b63      	ldr	r3, [pc, #396]	; (80083e8 <low_level_init+0x26c>)
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	791a      	ldrb	r2, [r3, #4]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008266:	4b60      	ldr	r3, [pc, #384]	; (80083e8 <low_level_init+0x26c>)
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	795a      	ldrb	r2, [r3, #5]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008278:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008280:	f043 030a 	orr.w	r3, r3, #10
 8008284:	b2da      	uxtb	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 800828c:	2300      	movs	r3, #0
 800828e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008290:	2300      	movs	r3, #0
 8008292:	633b      	str	r3, [r7, #48]	; 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8008294:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008298:	2101      	movs	r1, #1
 800829a:	4618      	mov	r0, r3
 800829c:	f000 fd30 	bl	8008d00 <osSemaphoreCreate>
 80082a0:	4603      	mov	r3, r0
 80082a2:	4a57      	ldr	r2, [pc, #348]	; (8008400 <low_level_init+0x284>)
 80082a4:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 80082a6:	2300      	movs	r3, #0
 80082a8:	627b      	str	r3, [r7, #36]	; 0x24
 80082aa:	2300      	movs	r3, #0
 80082ac:	62bb      	str	r3, [r7, #40]	; 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 80082ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082b2:	2101      	movs	r1, #1
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 fd23 	bl	8008d00 <osSemaphoreCreate>
 80082ba:	4603      	mov	r3, r0
 80082bc:	4a51      	ldr	r2, [pc, #324]	; (8008404 <low_level_init+0x288>)
 80082be:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 80082c0:	4b4f      	ldr	r3, [pc, #316]	; (8008400 <low_level_init+0x284>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2100      	movs	r1, #0
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 fd4c 	bl	8008d64 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 80082cc:	4b4d      	ldr	r3, [pc, #308]	; (8008404 <low_level_init+0x288>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2100      	movs	r1, #0
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 fd46 	bl	8008d64 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80082d8:	4b4b      	ldr	r3, [pc, #300]	; (8008408 <low_level_init+0x28c>)
 80082da:	f107 0408 	add.w	r4, r7, #8
 80082de:	461d      	mov	r5, r3
 80082e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80082e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80082ec:	f107 0308 	add.w	r3, r7, #8
 80082f0:	6879      	ldr	r1, [r7, #4]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 fc08 	bl	8008b08 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 80082f8:	4944      	ldr	r1, [pc, #272]	; (800840c <low_level_init+0x290>)
 80082fa:	4845      	ldr	r0, [pc, #276]	; (8008410 <low_level_init+0x294>)
 80082fc:	f7fb fa07 	bl	800370e <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 8008300:	4843      	ldr	r0, [pc, #268]	; (8008410 <low_level_init+0x294>)
 8008302:	f7fb fa36 	bl	8003772 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8008306:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800830a:	2b00      	cmp	r3, #0
 800830c:	d165      	bne.n	80083da <low_level_init+0x25e>
  {
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 800830e:	4840      	ldr	r0, [pc, #256]	; (8008410 <low_level_init+0x294>)
 8008310:	f7fb fad7 	bl	80038c2 <DP83848_GetLinkState>
 8008314:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

    /* Get link state */
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 8008318:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800831c:	2b01      	cmp	r3, #1
 800831e:	dc06      	bgt.n	800832e <low_level_init+0x1b2>
    {
      netif_set_link_down(netif);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f00d fcd5 	bl	8015cd0 <netif_set_link_down>
      netif_set_down(netif);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f00d fc68 	bl	8015bfc <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800832c:	e057      	b.n	80083de <low_level_init+0x262>
      switch (PHYLinkState)
 800832e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008332:	3b02      	subs	r3, #2
 8008334:	2b03      	cmp	r3, #3
 8008336:	d82b      	bhi.n	8008390 <low_level_init+0x214>
 8008338:	a201      	add	r2, pc, #4	; (adr r2, 8008340 <low_level_init+0x1c4>)
 800833a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833e:	bf00      	nop
 8008340:	08008351 	.word	0x08008351
 8008344:	08008363 	.word	0x08008363
 8008348:	08008373 	.word	0x08008373
 800834c:	08008383 	.word	0x08008383
        duplex = ETH_FULLDUPLEX_MODE;
 8008350:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008354:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 8008358:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800835c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8008360:	e01f      	b.n	80083a2 <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 8008362:	2300      	movs	r3, #0
 8008364:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 8008368:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800836c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8008370:	e017      	b.n	80083a2 <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 8008372:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008376:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 800837a:	2300      	movs	r3, #0
 800837c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8008380:	e00f      	b.n	80083a2 <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 8008382:	2300      	movs	r3, #0
 8008384:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 8008388:	2300      	movs	r3, #0
 800838a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 800838e:	e008      	b.n	80083a2 <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 8008390:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008394:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 8008398:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800839c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 80083a0:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80083a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80083a6:	4619      	mov	r1, r3
 80083a8:	480f      	ldr	r0, [pc, #60]	; (80083e8 <low_level_init+0x26c>)
 80083aa:	f7fc f949 	bl	8004640 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80083ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083b2:	657b      	str	r3, [r7, #84]	; 0x54
    MACConf.Speed = speed;
 80083b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083b8:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80083ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80083be:	4619      	mov	r1, r3
 80083c0:	4809      	ldr	r0, [pc, #36]	; (80083e8 <low_level_init+0x26c>)
 80083c2:	f7fc fa27 	bl	8004814 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80083c6:	4808      	ldr	r0, [pc, #32]	; (80083e8 <low_level_init+0x26c>)
 80083c8:	f7fb fcc8 	bl	8003d5c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f00d fba9 	bl	8015b24 <netif_set_up>
    netif_set_link_up(netif);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f00d fc44 	bl	8015c60 <netif_set_link_up>
}
 80083d8:	e001      	b.n	80083de <low_level_init+0x262>
    Error_Handler();
 80083da:	f7fa fc5d 	bl	8002c98 <Error_Handler>
}
 80083de:	bf00      	nop
 80083e0:	37b0      	adds	r7, #176	; 0xb0
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bdb0      	pop	{r4, r5, r7, pc}
 80083e6:	bf00      	nop
 80083e8:	2000658c 	.word	0x2000658c
 80083ec:	40028000 	.word	0x40028000
 80083f0:	200064e4 	.word	0x200064e4
 80083f4:	20006444 	.word	0x20006444
 80083f8:	2000663c 	.word	0x2000663c
 80083fc:	0802ace8 	.word	0x0802ace8
 8008400:	20006584 	.word	0x20006584
 8008404:	20006588 	.word	0x20006588
 8008408:	08026d70 	.word	0x08026d70
 800840c:	20000010 	.word	0x20000010
 8008410:	20006674 	.word	0x20006674

08008414 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b092      	sub	sp, #72	; 0x48
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800841e:	2300      	movs	r3, #0
 8008420:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8008422:	2300      	movs	r3, #0
 8008424:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800842c:	f107 030c 	add.w	r3, r7, #12
 8008430:	2230      	movs	r2, #48	; 0x30
 8008432:	2100      	movs	r1, #0
 8008434:	4618      	mov	r0, r3
 8008436:	f01b ff93 	bl	8024360 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800843a:	f107 030c 	add.w	r3, r7, #12
 800843e:	2230      	movs	r2, #48	; 0x30
 8008440:	2100      	movs	r1, #0
 8008442:	4618      	mov	r0, r3
 8008444:	f01b ff8c 	bl	8024360 <memset>

  for(q = p; q != NULL; q = q->next)
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	643b      	str	r3, [r7, #64]	; 0x40
 800844c:	e045      	b.n	80084da <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800844e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008450:	2b03      	cmp	r3, #3
 8008452:	d902      	bls.n	800845a <low_level_output+0x46>
      return ERR_IF;
 8008454:	f06f 030b 	mvn.w	r3, #11
 8008458:	e06c      	b.n	8008534 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 800845a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800845c:	6859      	ldr	r1, [r3, #4]
 800845e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008460:	4613      	mov	r3, r2
 8008462:	005b      	lsls	r3, r3, #1
 8008464:	4413      	add	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	3348      	adds	r3, #72	; 0x48
 800846a:	443b      	add	r3, r7
 800846c:	3b3c      	subs	r3, #60	; 0x3c
 800846e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008472:	895b      	ldrh	r3, [r3, #10]
 8008474:	4619      	mov	r1, r3
 8008476:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008478:	4613      	mov	r3, r2
 800847a:	005b      	lsls	r3, r3, #1
 800847c:	4413      	add	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	3348      	adds	r3, #72	; 0x48
 8008482:	443b      	add	r3, r7
 8008484:	3b38      	subs	r3, #56	; 0x38
 8008486:	6019      	str	r1, [r3, #0]

    if(i>0)
 8008488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800848a:	2b00      	cmp	r3, #0
 800848c:	d011      	beq.n	80084b2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800848e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008490:	1e5a      	subs	r2, r3, #1
 8008492:	f107 000c 	add.w	r0, r7, #12
 8008496:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008498:	460b      	mov	r3, r1
 800849a:	005b      	lsls	r3, r3, #1
 800849c:	440b      	add	r3, r1
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	18c1      	adds	r1, r0, r3
 80084a2:	4613      	mov	r3, r2
 80084a4:	005b      	lsls	r3, r3, #1
 80084a6:	4413      	add	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	3348      	adds	r3, #72	; 0x48
 80084ac:	443b      	add	r3, r7
 80084ae:	3b34      	subs	r3, #52	; 0x34
 80084b0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80084b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d109      	bne.n	80084ce <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80084ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084bc:	4613      	mov	r3, r2
 80084be:	005b      	lsls	r3, r3, #1
 80084c0:	4413      	add	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	3348      	adds	r3, #72	; 0x48
 80084c6:	443b      	add	r3, r7
 80084c8:	3b34      	subs	r3, #52	; 0x34
 80084ca:	2200      	movs	r2, #0
 80084cc:	601a      	str	r2, [r3, #0]
    }

    i++;
 80084ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084d0:	3301      	adds	r3, #1
 80084d2:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80084d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	643b      	str	r3, [r7, #64]	; 0x40
 80084da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1b6      	bne.n	800844e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	891b      	ldrh	r3, [r3, #8]
 80084e4:	461a      	mov	r2, r3
 80084e6:	4b15      	ldr	r3, [pc, #84]	; (800853c <low_level_output+0x128>)
 80084e8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80084ea:	4a14      	ldr	r2, [pc, #80]	; (800853c <low_level_output+0x128>)
 80084ec:	f107 030c 	add.w	r3, r7, #12
 80084f0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80084f2:	4a12      	ldr	r2, [pc, #72]	; (800853c <low_level_output+0x128>)
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80084f8:	6838      	ldr	r0, [r7, #0]
 80084fa:	f00e f86d 	bl	80165d8 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 80084fe:	490f      	ldr	r1, [pc, #60]	; (800853c <low_level_output+0x128>)
 8008500:	480f      	ldr	r0, [pc, #60]	; (8008540 <low_level_output+0x12c>)
 8008502:	f7fb fd38 	bl	8003f76 <HAL_ETH_Transmit_IT>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10e      	bne.n	800852a <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800850c:	bf00      	nop
 800850e:	4b0d      	ldr	r3, [pc, #52]	; (8008544 <low_level_output+0x130>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008516:	4618      	mov	r0, r3
 8008518:	f000 fc24 	bl	8008d64 <osSemaphoreWait>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1f5      	bne.n	800850e <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8008522:	4807      	ldr	r0, [pc, #28]	; (8008540 <low_level_output+0x12c>)
 8008524:	f7fb fec6 	bl	80042b4 <HAL_ETH_ReleaseTxPacket>
 8008528:	e002      	b.n	8008530 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 800852a:	6838      	ldr	r0, [r7, #0]
 800852c:	f00d ffae 	bl	801648c <pbuf_free>
  }

  return errval;
 8008530:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008534:	4618      	mov	r0, r3
 8008536:	3748      	adds	r7, #72	; 0x48
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	2000663c 	.word	0x2000663c
 8008540:	2000658c 	.word	0x2000658c
 8008544:	20006588 	.word	0x20006588

08008548 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008550:	2300      	movs	r3, #0
 8008552:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8008554:	4b07      	ldr	r3, [pc, #28]	; (8008574 <low_level_input+0x2c>)
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d105      	bne.n	8008568 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800855c:	f107 030c 	add.w	r3, r7, #12
 8008560:	4619      	mov	r1, r3
 8008562:	4805      	ldr	r0, [pc, #20]	; (8008578 <low_level_input+0x30>)
 8008564:	f7fb fd63 	bl	800402e <HAL_ETH_ReadData>
  }

  return p;
 8008568:	68fb      	ldr	r3, [r7, #12]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	20006440 	.word	0x20006440
 8008578:	2000658c 	.word	0x2000658c

0800857c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008584:	2300      	movs	r3, #0
 8008586:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800858c:	4b0f      	ldr	r3, [pc, #60]	; (80085cc <ethernetif_input+0x50>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008594:	4618      	mov	r0, r3
 8008596:	f000 fbe5 	bl	8008d64 <osSemaphoreWait>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1f5      	bne.n	800858c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80085a0:	68b8      	ldr	r0, [r7, #8]
 80085a2:	f7ff ffd1 	bl	8008548 <low_level_input>
 80085a6:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00a      	beq.n	80085c4 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	68b9      	ldr	r1, [r7, #8]
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	4798      	blx	r3
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d002      	beq.n	80085c4 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f00d ff64 	bl	801648c <pbuf_free>
          }
        }
      } while(p!=NULL);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1ea      	bne.n	80085a0 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80085ca:	e7df      	b.n	800858c <ethernetif_input+0x10>
 80085cc:	20006584 	.word	0x20006584

080085d0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d106      	bne.n	80085ec <ethernetif_init+0x1c>
 80085de:	4b0e      	ldr	r3, [pc, #56]	; (8008618 <ethernetif_init+0x48>)
 80085e0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80085e4:	490d      	ldr	r1, [pc, #52]	; (800861c <ethernetif_init+0x4c>)
 80085e6:	480e      	ldr	r0, [pc, #56]	; (8008620 <ethernetif_init+0x50>)
 80085e8:	f01b fcf6 	bl	8023fd8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2273      	movs	r2, #115	; 0x73
 80085f0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2274      	movs	r2, #116	; 0x74
 80085f8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a09      	ldr	r2, [pc, #36]	; (8008624 <ethernetif_init+0x54>)
 8008600:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a08      	ldr	r2, [pc, #32]	; (8008628 <ethernetif_init+0x58>)
 8008606:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f7ff fdb7 	bl	800817c <low_level_init>

  return ERR_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	08026d8c 	.word	0x08026d8c
 800861c:	08026da8 	.word	0x08026da8
 8008620:	08026db8 	.word	0x08026db8
 8008624:	0801fe01 	.word	0x0801fe01
 8008628:	08008415 	.word	0x08008415

0800862c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008638:	68f9      	ldr	r1, [r7, #12]
 800863a:	4809      	ldr	r0, [pc, #36]	; (8008660 <pbuf_free_custom+0x34>)
 800863c:	f00d f852 	bl	80156e4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8008640:	4b08      	ldr	r3, [pc, #32]	; (8008664 <pbuf_free_custom+0x38>)
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d107      	bne.n	8008658 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008648:	4b06      	ldr	r3, [pc, #24]	; (8008664 <pbuf_free_custom+0x38>)
 800864a:	2200      	movs	r2, #0
 800864c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800864e:	4b06      	ldr	r3, [pc, #24]	; (8008668 <pbuf_free_custom+0x3c>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4618      	mov	r0, r3
 8008654:	f000 fbd4 	bl	8008e00 <osSemaphoreRelease>
  }
}
 8008658:	bf00      	nop
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	0802ace8 	.word	0x0802ace8
 8008664:	20006440 	.word	0x20006440
 8008668:	20006584 	.word	0x20006584

0800866c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008670:	f7fb f9e4 	bl	8003a3c <HAL_GetTick>
 8008674:	4603      	mov	r3, r0
}
 8008676:	4618      	mov	r0, r3
 8008678:	bd80      	pop	{r7, pc}
	...

0800867c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b08e      	sub	sp, #56	; 0x38
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008688:	2200      	movs	r2, #0
 800868a:	601a      	str	r2, [r3, #0]
 800868c:	605a      	str	r2, [r3, #4]
 800868e:	609a      	str	r2, [r3, #8]
 8008690:	60da      	str	r2, [r3, #12]
 8008692:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a4a      	ldr	r2, [pc, #296]	; (80087c4 <HAL_ETH_MspInit+0x148>)
 800869a:	4293      	cmp	r3, r2
 800869c:	f040 808d 	bne.w	80087ba <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80086a0:	2300      	movs	r3, #0
 80086a2:	623b      	str	r3, [r7, #32]
 80086a4:	4b48      	ldr	r3, [pc, #288]	; (80087c8 <HAL_ETH_MspInit+0x14c>)
 80086a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a8:	4a47      	ldr	r2, [pc, #284]	; (80087c8 <HAL_ETH_MspInit+0x14c>)
 80086aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80086ae:	6313      	str	r3, [r2, #48]	; 0x30
 80086b0:	4b45      	ldr	r3, [pc, #276]	; (80087c8 <HAL_ETH_MspInit+0x14c>)
 80086b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086b8:	623b      	str	r3, [r7, #32]
 80086ba:	6a3b      	ldr	r3, [r7, #32]
 80086bc:	2300      	movs	r3, #0
 80086be:	61fb      	str	r3, [r7, #28]
 80086c0:	4b41      	ldr	r3, [pc, #260]	; (80087c8 <HAL_ETH_MspInit+0x14c>)
 80086c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c4:	4a40      	ldr	r2, [pc, #256]	; (80087c8 <HAL_ETH_MspInit+0x14c>)
 80086c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80086ca:	6313      	str	r3, [r2, #48]	; 0x30
 80086cc:	4b3e      	ldr	r3, [pc, #248]	; (80087c8 <HAL_ETH_MspInit+0x14c>)
 80086ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086d4:	61fb      	str	r3, [r7, #28]
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	2300      	movs	r3, #0
 80086da:	61bb      	str	r3, [r7, #24]
 80086dc:	4b3a      	ldr	r3, [pc, #232]	; (80087c8 <HAL_ETH_MspInit+0x14c>)
 80086de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e0:	4a39      	ldr	r2, [pc, #228]	; (80087c8 <HAL_ETH_MspInit+0x14c>)
 80086e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80086e6:	6313      	str	r3, [r2, #48]	; 0x30
 80086e8:	4b37      	ldr	r3, [pc, #220]	; (80087c8 <HAL_ETH_MspInit+0x14c>)
 80086ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086f0:	61bb      	str	r3, [r7, #24]
 80086f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80086f4:	2300      	movs	r3, #0
 80086f6:	617b      	str	r3, [r7, #20]
 80086f8:	4b33      	ldr	r3, [pc, #204]	; (80087c8 <HAL_ETH_MspInit+0x14c>)
 80086fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fc:	4a32      	ldr	r2, [pc, #200]	; (80087c8 <HAL_ETH_MspInit+0x14c>)
 80086fe:	f043 0304 	orr.w	r3, r3, #4
 8008702:	6313      	str	r3, [r2, #48]	; 0x30
 8008704:	4b30      	ldr	r3, [pc, #192]	; (80087c8 <HAL_ETH_MspInit+0x14c>)
 8008706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008708:	f003 0304 	and.w	r3, r3, #4
 800870c:	617b      	str	r3, [r7, #20]
 800870e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008710:	2300      	movs	r3, #0
 8008712:	613b      	str	r3, [r7, #16]
 8008714:	4b2c      	ldr	r3, [pc, #176]	; (80087c8 <HAL_ETH_MspInit+0x14c>)
 8008716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008718:	4a2b      	ldr	r2, [pc, #172]	; (80087c8 <HAL_ETH_MspInit+0x14c>)
 800871a:	f043 0301 	orr.w	r3, r3, #1
 800871e:	6313      	str	r3, [r2, #48]	; 0x30
 8008720:	4b29      	ldr	r3, [pc, #164]	; (80087c8 <HAL_ETH_MspInit+0x14c>)
 8008722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008724:	f003 0301 	and.w	r3, r3, #1
 8008728:	613b      	str	r3, [r7, #16]
 800872a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800872c:	2300      	movs	r3, #0
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	4b25      	ldr	r3, [pc, #148]	; (80087c8 <HAL_ETH_MspInit+0x14c>)
 8008732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008734:	4a24      	ldr	r2, [pc, #144]	; (80087c8 <HAL_ETH_MspInit+0x14c>)
 8008736:	f043 0302 	orr.w	r3, r3, #2
 800873a:	6313      	str	r3, [r2, #48]	; 0x30
 800873c:	4b22      	ldr	r3, [pc, #136]	; (80087c8 <HAL_ETH_MspInit+0x14c>)
 800873e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008740:	f003 0302 	and.w	r3, r3, #2
 8008744:	60fb      	str	r3, [r7, #12]
 8008746:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8008748:	2332      	movs	r3, #50	; 0x32
 800874a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800874c:	2302      	movs	r3, #2
 800874e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008750:	2300      	movs	r3, #0
 8008752:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008754:	2303      	movs	r3, #3
 8008756:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008758:	230b      	movs	r3, #11
 800875a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800875c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008760:	4619      	mov	r1, r3
 8008762:	481a      	ldr	r0, [pc, #104]	; (80087cc <HAL_ETH_MspInit+0x150>)
 8008764:	f7fc fcd8 	bl	8005118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8008768:	2386      	movs	r3, #134	; 0x86
 800876a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800876c:	2302      	movs	r3, #2
 800876e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008770:	2300      	movs	r3, #0
 8008772:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008774:	2303      	movs	r3, #3
 8008776:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008778:	230b      	movs	r3, #11
 800877a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800877c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008780:	4619      	mov	r1, r3
 8008782:	4813      	ldr	r0, [pc, #76]	; (80087d0 <HAL_ETH_MspInit+0x154>)
 8008784:	f7fc fcc8 	bl	8005118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8008788:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800878c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800878e:	2302      	movs	r3, #2
 8008790:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008792:	2300      	movs	r3, #0
 8008794:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008796:	2303      	movs	r3, #3
 8008798:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800879a:	230b      	movs	r3, #11
 800879c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800879e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087a2:	4619      	mov	r1, r3
 80087a4:	480b      	ldr	r0, [pc, #44]	; (80087d4 <HAL_ETH_MspInit+0x158>)
 80087a6:	f7fc fcb7 	bl	8005118 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80087aa:	2200      	movs	r2, #0
 80087ac:	2105      	movs	r1, #5
 80087ae:	203d      	movs	r0, #61	; 0x3d
 80087b0:	f7fb fa2c 	bl	8003c0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80087b4:	203d      	movs	r0, #61	; 0x3d
 80087b6:	f7fb fa45 	bl	8003c44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80087ba:	bf00      	nop
 80087bc:	3738      	adds	r7, #56	; 0x38
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	40028000 	.word	0x40028000
 80087c8:	40023800 	.word	0x40023800
 80087cc:	40020800 	.word	0x40020800
 80087d0:	40020000 	.word	0x40020000
 80087d4:	40020400 	.word	0x40020400

080087d8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80087dc:	4802      	ldr	r0, [pc, #8]	; (80087e8 <ETH_PHY_IO_Init+0x10>)
 80087de:	f7fc f833 	bl	8004848 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	2000658c 	.word	0x2000658c

080087ec <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80087ec:	b480      	push	{r7}
 80087ee:	af00      	add	r7, sp, #0
  return 0;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	68f9      	ldr	r1, [r7, #12]
 800880e:	4807      	ldr	r0, [pc, #28]	; (800882c <ETH_PHY_IO_ReadReg+0x30>)
 8008810:	f7fb fe82 	bl	8004518 <HAL_ETH_ReadPHYRegister>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d002      	beq.n	8008820 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800881a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800881e:	e000      	b.n	8008822 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	2000658c 	.word	0x2000658c

08008830 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	68f9      	ldr	r1, [r7, #12]
 8008842:	4807      	ldr	r0, [pc, #28]	; (8008860 <ETH_PHY_IO_WriteReg+0x30>)
 8008844:	f7fb feb3 	bl	80045ae <HAL_ETH_WritePHYRegister>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d002      	beq.n	8008854 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800884e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008852:	e000      	b.n	8008856 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	2000658c 	.word	0x2000658c

08008864 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008868:	f7fb f8e8 	bl	8003a3c <HAL_GetTick>
 800886c:	4603      	mov	r3, r0
}
 800886e:	4618      	mov	r0, r3
 8008870:	bd80      	pop	{r7, pc}
	...

08008874 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b0a0      	sub	sp, #128	; 0x80
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800887c:	f107 0308 	add.w	r3, r7, #8
 8008880:	2264      	movs	r2, #100	; 0x64
 8008882:	2100      	movs	r1, #0
 8008884:	4618      	mov	r0, r3
 8008886:	f01b fd6b 	bl	8024360 <memset>
  int32_t PHYLinkState = 0;
 800888a:	2300      	movs	r3, #0
 800888c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800888e:	2300      	movs	r3, #0
 8008890:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008892:	2300      	movs	r3, #0
 8008894:	67bb      	str	r3, [r7, #120]	; 0x78
 8008896:	2300      	movs	r3, #0
 8008898:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 800889e:	483a      	ldr	r0, [pc, #232]	; (8008988 <ethernet_link_thread+0x114>)
 80088a0:	f7fb f80f 	bl	80038c2 <DP83848_GetLinkState>
 80088a4:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 80088a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80088ac:	089b      	lsrs	r3, r3, #2
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00c      	beq.n	80088d2 <ethernet_link_thread+0x5e>
 80088b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	dc09      	bgt.n	80088d2 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80088be:	4833      	ldr	r0, [pc, #204]	; (800898c <ethernet_link_thread+0x118>)
 80088c0:	f7fb fada 	bl	8003e78 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80088c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80088c6:	f00d f999 	bl	8015bfc <netif_set_down>
    netif_set_link_down(netif);
 80088ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80088cc:	f00d fa00 	bl	8015cd0 <netif_set_link_down>
 80088d0:	e055      	b.n	800897e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 80088d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80088d8:	f003 0304 	and.w	r3, r3, #4
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d14e      	bne.n	800897e <ethernet_link_thread+0x10a>
 80088e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	dd4b      	ble.n	800897e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80088e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088e8:	3b02      	subs	r3, #2
 80088ea:	2b03      	cmp	r3, #3
 80088ec:	d82a      	bhi.n	8008944 <ethernet_link_thread+0xd0>
 80088ee:	a201      	add	r2, pc, #4	; (adr r2, 80088f4 <ethernet_link_thread+0x80>)
 80088f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f4:	08008905 	.word	0x08008905
 80088f8:	08008917 	.word	0x08008917
 80088fc:	08008927 	.word	0x08008927
 8008900:	08008937 	.word	0x08008937
    {
    case DP83848_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008904:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008908:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800890a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800890e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008910:	2301      	movs	r3, #1
 8008912:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008914:	e017      	b.n	8008946 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008916:	2300      	movs	r3, #0
 8008918:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800891a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800891e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008920:	2301      	movs	r3, #1
 8008922:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008924:	e00f      	b.n	8008946 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008926:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800892a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800892c:	2300      	movs	r3, #0
 800892e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008930:	2301      	movs	r3, #1
 8008932:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008934:	e007      	b.n	8008946 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008936:	2300      	movs	r3, #0
 8008938:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800893a:	2300      	movs	r3, #0
 800893c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800893e:	2301      	movs	r3, #1
 8008940:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008942:	e000      	b.n	8008946 <ethernet_link_thread+0xd2>
    default:
      break;
 8008944:	bf00      	nop
    }

    if(linkchanged)
 8008946:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008948:	2b00      	cmp	r3, #0
 800894a:	d018      	beq.n	800897e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800894c:	f107 0308 	add.w	r3, r7, #8
 8008950:	4619      	mov	r1, r3
 8008952:	480e      	ldr	r0, [pc, #56]	; (800898c <ethernet_link_thread+0x118>)
 8008954:	f7fb fe74 	bl	8004640 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008958:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800895a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800895c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800895e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008960:	f107 0308 	add.w	r3, r7, #8
 8008964:	4619      	mov	r1, r3
 8008966:	4809      	ldr	r0, [pc, #36]	; (800898c <ethernet_link_thread+0x118>)
 8008968:	f7fb ff54 	bl	8004814 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800896c:	4807      	ldr	r0, [pc, #28]	; (800898c <ethernet_link_thread+0x118>)
 800896e:	f7fb f9f5 	bl	8003d5c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8008972:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008974:	f00d f8d6 	bl	8015b24 <netif_set_up>
      netif_set_link_up(netif);
 8008978:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800897a:	f00d f971 	bl	8015c60 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800897e:	2064      	movs	r0, #100	; 0x64
 8008980:	f000 f90e 	bl	8008ba0 <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8008984:	e78b      	b.n	800889e <ethernet_link_thread+0x2a>
 8008986:	bf00      	nop
 8008988:	20006674 	.word	0x20006674
 800898c:	2000658c 	.word	0x2000658c

08008990 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af02      	add	r7, sp, #8
 8008996:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008998:	4812      	ldr	r0, [pc, #72]	; (80089e4 <HAL_ETH_RxAllocateCallback+0x54>)
 800899a:	f00c fe2f 	bl	80155fc <memp_malloc_pool>
 800899e:	60f8      	str	r0, [r7, #12]
  if (p)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d014      	beq.n	80089d0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f103 0220 	add.w	r2, r3, #32
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	4a0d      	ldr	r2, [pc, #52]	; (80089e8 <HAL_ETH_RxAllocateCallback+0x58>)
 80089b4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80089be:	9201      	str	r2, [sp, #4]
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2241      	movs	r2, #65	; 0x41
 80089c6:	2100      	movs	r1, #0
 80089c8:	2000      	movs	r0, #0
 80089ca:	f00d fba5 	bl	8016118 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80089ce:	e005      	b.n	80089dc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80089d0:	4b06      	ldr	r3, [pc, #24]	; (80089ec <HAL_ETH_RxAllocateCallback+0x5c>)
 80089d2:	2201      	movs	r2, #1
 80089d4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	601a      	str	r2, [r3, #0]
}
 80089dc:	bf00      	nop
 80089de:	3710      	adds	r7, #16
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	0802ace8 	.word	0x0802ace8
 80089e8:	0800862d 	.word	0x0800862d
 80089ec:	20006440 	.word	0x20006440

080089f0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b089      	sub	sp, #36	; 0x24
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
 80089fc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	3b20      	subs	r3, #32
 8008a0e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	2200      	movs	r2, #0
 8008a14:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	887a      	ldrh	r2, [r7, #2]
 8008a20:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d103      	bne.n	8008a32 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	69fa      	ldr	r2, [r7, #28]
 8008a2e:	601a      	str	r2, [r3, #0]
 8008a30:	e003      	b.n	8008a3a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	69fa      	ldr	r2, [r7, #28]
 8008a38:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	69fa      	ldr	r2, [r7, #28]
 8008a3e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	61fb      	str	r3, [r7, #28]
 8008a46:	e009      	b.n	8008a5c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	891a      	ldrh	r2, [r3, #8]
 8008a4c:	887b      	ldrh	r3, [r7, #2]
 8008a4e:	4413      	add	r3, r2
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	61fb      	str	r3, [r7, #28]
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1f2      	bne.n	8008a48 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8008a62:	bf00      	nop
 8008a64:	bf00      	nop
 8008a66:	3724      	adds	r7, #36	; 0x24
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f00d fd07 	bl	801648c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8008a7e:	bf00      	nop
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b085      	sub	sp, #20
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008a90:	2300      	movs	r3, #0
 8008a92:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008a94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a98:	2b84      	cmp	r3, #132	; 0x84
 8008a9a:	d005      	beq.n	8008aa8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008a9c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	3303      	adds	r3, #3
 8008aa6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr

08008ab6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008ab6:	b480      	push	{r7}
 8008ab8:	b083      	sub	sp, #12
 8008aba:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008abc:	f3ef 8305 	mrs	r3, IPSR
 8008ac0:	607b      	str	r3, [r7, #4]
  return(result);
 8008ac2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	bf14      	ite	ne
 8008ac8:	2301      	movne	r3, #1
 8008aca:	2300      	moveq	r3, #0
 8008acc:	b2db      	uxtb	r3, r3
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	370c      	adds	r7, #12
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008ade:	f001 fd99 	bl	800a614 <vTaskStartScheduler>
  
  return osOK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8008aec:	f7ff ffe3 	bl	8008ab6 <inHandlerMode>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d003      	beq.n	8008afe <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8008af6:	f001 feb7 	bl	800a868 <xTaskGetTickCountFromISR>
 8008afa:	4603      	mov	r3, r0
 8008afc:	e002      	b.n	8008b04 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8008afe:	f001 fea3 	bl	800a848 <xTaskGetTickCount>
 8008b02:	4603      	mov	r3, r0
  }
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b0a:	b089      	sub	sp, #36	; 0x24
 8008b0c:	af04      	add	r7, sp, #16
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d020      	beq.n	8008b5c <osThreadCreate+0x54>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d01c      	beq.n	8008b5c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	685c      	ldr	r4, [r3, #4]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	691e      	ldr	r6, [r3, #16]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7ff ffa6 	bl	8008a86 <makeFreeRtosPriority>
 8008b3a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	695b      	ldr	r3, [r3, #20]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b44:	9202      	str	r2, [sp, #8]
 8008b46:	9301      	str	r3, [sp, #4]
 8008b48:	9100      	str	r1, [sp, #0]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	4632      	mov	r2, r6
 8008b4e:	4629      	mov	r1, r5
 8008b50:	4620      	mov	r0, r4
 8008b52:	f001 fb81 	bl	800a258 <xTaskCreateStatic>
 8008b56:	4603      	mov	r3, r0
 8008b58:	60fb      	str	r3, [r7, #12]
 8008b5a:	e01c      	b.n	8008b96 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	685c      	ldr	r4, [r3, #4]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b68:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7ff ff88 	bl	8008a86 <makeFreeRtosPriority>
 8008b76:	4602      	mov	r2, r0
 8008b78:	f107 030c 	add.w	r3, r7, #12
 8008b7c:	9301      	str	r3, [sp, #4]
 8008b7e:	9200      	str	r2, [sp, #0]
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	4632      	mov	r2, r6
 8008b84:	4629      	mov	r1, r5
 8008b86:	4620      	mov	r0, r4
 8008b88:	f001 fbc3 	bl	800a312 <xTaskCreate>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d001      	beq.n	8008b96 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008b92:	2300      	movs	r3, #0
 8008b94:	e000      	b.n	8008b98 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008b96:	68fb      	ldr	r3, [r7, #12]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3714      	adds	r7, #20
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ba0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d001      	beq.n	8008bb6 <osDelay+0x16>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	e000      	b.n	8008bb8 <osDelay+0x18>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f001 fcf7 	bl	800a5ac <vTaskDelay>
  
  return osOK;
 8008bbe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d007      	beq.n	8008be8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	4619      	mov	r1, r3
 8008bde:	2001      	movs	r0, #1
 8008be0:	f000 fc7d 	bl	80094de <xQueueCreateMutexStatic>
 8008be4:	4603      	mov	r3, r0
 8008be6:	e003      	b.n	8008bf0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8008be8:	2001      	movs	r0, #1
 8008bea:	f000 fc60 	bl	80094ae <xQueueCreateMutex>
 8008bee:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008c02:	2300      	movs	r3, #0
 8008c04:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d101      	bne.n	8008c10 <osMutexWait+0x18>
    return osErrorParameter;
 8008c0c:	2380      	movs	r3, #128	; 0x80
 8008c0e:	e03a      	b.n	8008c86 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8008c10:	2300      	movs	r3, #0
 8008c12:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c1a:	d103      	bne.n	8008c24 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8008c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	e009      	b.n	8008c38 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d006      	beq.n	8008c38 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <osMutexWait+0x40>
      ticks = 1;
 8008c34:	2301      	movs	r3, #1
 8008c36:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008c38:	f7ff ff3d 	bl	8008ab6 <inHandlerMode>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d017      	beq.n	8008c72 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008c42:	f107 0308 	add.w	r3, r7, #8
 8008c46:	461a      	mov	r2, r3
 8008c48:	2100      	movs	r1, #0
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f001 f874 	bl	8009d38 <xQueueReceiveFromISR>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d001      	beq.n	8008c5a <osMutexWait+0x62>
      return osErrorOS;
 8008c56:	23ff      	movs	r3, #255	; 0xff
 8008c58:	e015      	b.n	8008c86 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d011      	beq.n	8008c84 <osMutexWait+0x8c>
 8008c60:	4b0b      	ldr	r3, [pc, #44]	; (8008c90 <osMutexWait+0x98>)
 8008c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c66:	601a      	str	r2, [r3, #0]
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	e008      	b.n	8008c84 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8008c72:	68f9      	ldr	r1, [r7, #12]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 ff53 	bl	8009b20 <xQueueSemaphoreTake>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d001      	beq.n	8008c84 <osMutexWait+0x8c>
    return osErrorOS;
 8008c80:	23ff      	movs	r3, #255	; 0xff
 8008c82:	e000      	b.n	8008c86 <osMutexWait+0x8e>
  }
  
  return osOK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	e000ed04 	.word	0xe000ed04

08008c94 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8008ca4:	f7ff ff07 	bl	8008ab6 <inHandlerMode>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d016      	beq.n	8008cdc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008cae:	f107 0308 	add.w	r3, r7, #8
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fdc6 	bl	8009846 <xQueueGiveFromISR>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d001      	beq.n	8008cc4 <osMutexRelease+0x30>
      return osErrorOS;
 8008cc0:	23ff      	movs	r3, #255	; 0xff
 8008cc2:	e017      	b.n	8008cf4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d013      	beq.n	8008cf2 <osMutexRelease+0x5e>
 8008cca:	4b0c      	ldr	r3, [pc, #48]	; (8008cfc <osMutexRelease+0x68>)
 8008ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cd0:	601a      	str	r2, [r3, #0]
 8008cd2:	f3bf 8f4f 	dsb	sy
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	e00a      	b.n	8008cf2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8008cdc:	2300      	movs	r3, #0
 8008cde:	2200      	movs	r2, #0
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fc16 	bl	8009514 <xQueueGenericSend>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d001      	beq.n	8008cf2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8008cee:	23ff      	movs	r3, #255	; 0xff
 8008cf0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	e000ed04 	.word	0xe000ed04

08008d00 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	af02      	add	r7, sp, #8
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00f      	beq.n	8008d32 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d10a      	bne.n	8008d2e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	2203      	movs	r2, #3
 8008d1e:	9200      	str	r2, [sp, #0]
 8008d20:	2200      	movs	r2, #0
 8008d22:	2100      	movs	r1, #0
 8008d24:	2001      	movs	r0, #1
 8008d26:	f000 fad7 	bl	80092d8 <xQueueGenericCreateStatic>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	e016      	b.n	8008d5c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	e014      	b.n	8008d5c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d110      	bne.n	8008d5a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8008d38:	2203      	movs	r2, #3
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	2001      	movs	r0, #1
 8008d3e:	f000 fb43 	bl	80093c8 <xQueueGenericCreate>
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d005      	beq.n	8008d56 <osSemaphoreCreate+0x56>
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	2100      	movs	r1, #0
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f000 fbdf 	bl	8009514 <xQueueGenericSend>
      return sema;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	e000      	b.n	8008d5c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008d5a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008d6e:	2300      	movs	r3, #0
 8008d70:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d101      	bne.n	8008d7c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008d78:	2380      	movs	r3, #128	; 0x80
 8008d7a:	e03a      	b.n	8008df2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d86:	d103      	bne.n	8008d90 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008d88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d8c:	60fb      	str	r3, [r7, #12]
 8008d8e:	e009      	b.n	8008da4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d006      	beq.n	8008da4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d101      	bne.n	8008da4 <osSemaphoreWait+0x40>
      ticks = 1;
 8008da0:	2301      	movs	r3, #1
 8008da2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008da4:	f7ff fe87 	bl	8008ab6 <inHandlerMode>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d017      	beq.n	8008dde <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008dae:	f107 0308 	add.w	r3, r7, #8
 8008db2:	461a      	mov	r2, r3
 8008db4:	2100      	movs	r1, #0
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 ffbe 	bl	8009d38 <xQueueReceiveFromISR>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d001      	beq.n	8008dc6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8008dc2:	23ff      	movs	r3, #255	; 0xff
 8008dc4:	e015      	b.n	8008df2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d011      	beq.n	8008df0 <osSemaphoreWait+0x8c>
 8008dcc:	4b0b      	ldr	r3, [pc, #44]	; (8008dfc <osSemaphoreWait+0x98>)
 8008dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dd2:	601a      	str	r2, [r3, #0]
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	e008      	b.n	8008df0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008dde:	68f9      	ldr	r1, [r7, #12]
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 fe9d 	bl	8009b20 <xQueueSemaphoreTake>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d001      	beq.n	8008df0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008dec:	23ff      	movs	r3, #255	; 0xff
 8008dee:	e000      	b.n	8008df2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	e000ed04 	.word	0xe000ed04

08008e00 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008e10:	f7ff fe51 	bl	8008ab6 <inHandlerMode>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d016      	beq.n	8008e48 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008e1a:	f107 0308 	add.w	r3, r7, #8
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 fd10 	bl	8009846 <xQueueGiveFromISR>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d001      	beq.n	8008e30 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008e2c:	23ff      	movs	r3, #255	; 0xff
 8008e2e:	e017      	b.n	8008e60 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d013      	beq.n	8008e5e <osSemaphoreRelease+0x5e>
 8008e36:	4b0c      	ldr	r3, [pc, #48]	; (8008e68 <osSemaphoreRelease+0x68>)
 8008e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e3c:	601a      	str	r2, [r3, #0]
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	f3bf 8f6f 	isb	sy
 8008e46:	e00a      	b.n	8008e5e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008e48:	2300      	movs	r3, #0
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fb60 	bl	8009514 <xQueueGenericSend>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d001      	beq.n	8008e5e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008e5a:	23ff      	movs	r3, #255	; 0xff
 8008e5c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	e000ed04 	.word	0xe000ed04

08008e6c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008e74:	f7ff fe1f 	bl	8008ab6 <inHandlerMode>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d001      	beq.n	8008e82 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8008e7e:	2382      	movs	r3, #130	; 0x82
 8008e80:	e003      	b.n	8008e8a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f001 f814 	bl	8009eb0 <vQueueDelete>

  return osOK; 
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008e92:	b590      	push	{r4, r7, lr}
 8008e94:	b085      	sub	sp, #20
 8008e96:	af02      	add	r7, sp, #8
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d011      	beq.n	8008ec8 <osMessageCreate+0x36>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00d      	beq.n	8008ec8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6818      	ldr	r0, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6859      	ldr	r1, [r3, #4]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	689a      	ldr	r2, [r3, #8]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	2400      	movs	r4, #0
 8008ebe:	9400      	str	r4, [sp, #0]
 8008ec0:	f000 fa0a 	bl	80092d8 <xQueueGenericCreateStatic>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	e008      	b.n	8008eda <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6818      	ldr	r0, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	f000 fa78 	bl	80093c8 <xQueueGenericCreate>
 8008ed8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd90      	pop	{r4, r7, pc}
	...

08008ee4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d101      	bne.n	8008f02 <osMessagePut+0x1e>
    ticks = 1;
 8008efe:	2301      	movs	r3, #1
 8008f00:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008f02:	f7ff fdd8 	bl	8008ab6 <inHandlerMode>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d018      	beq.n	8008f3e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008f0c:	f107 0210 	add.w	r2, r7, #16
 8008f10:	f107 0108 	add.w	r1, r7, #8
 8008f14:	2300      	movs	r3, #0
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f000 fbfa 	bl	8009710 <xQueueGenericSendFromISR>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d001      	beq.n	8008f26 <osMessagePut+0x42>
      return osErrorOS;
 8008f22:	23ff      	movs	r3, #255	; 0xff
 8008f24:	e018      	b.n	8008f58 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d014      	beq.n	8008f56 <osMessagePut+0x72>
 8008f2c:	4b0c      	ldr	r3, [pc, #48]	; (8008f60 <osMessagePut+0x7c>)
 8008f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	f3bf 8f4f 	dsb	sy
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	e00b      	b.n	8008f56 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008f3e:	f107 0108 	add.w	r1, r7, #8
 8008f42:	2300      	movs	r3, #0
 8008f44:	697a      	ldr	r2, [r7, #20]
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f000 fae4 	bl	8009514 <xQueueGenericSend>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d001      	beq.n	8008f56 <osMessagePut+0x72>
      return osErrorOS;
 8008f52:	23ff      	movs	r3, #255	; 0xff
 8008f54:	e000      	b.n	8008f58 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	e000ed04 	.word	0xe000ed04

08008f64 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008f64:	b590      	push	{r4, r7, lr}
 8008f66:	b08b      	sub	sp, #44	; 0x2c
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008f74:	2300      	movs	r3, #0
 8008f76:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10a      	bne.n	8008f94 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008f7e:	2380      	movs	r3, #128	; 0x80
 8008f80:	617b      	str	r3, [r7, #20]
    return event;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	461c      	mov	r4, r3
 8008f86:	f107 0314 	add.w	r3, r7, #20
 8008f8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008f8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008f92:	e054      	b.n	800903e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008f94:	2300      	movs	r3, #0
 8008f96:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fa2:	d103      	bne.n	8008fac <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8008faa:	e009      	b.n	8008fc0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d006      	beq.n	8008fc0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d101      	bne.n	8008fc0 <osMessageGet+0x5c>
      ticks = 1;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008fc0:	f7ff fd79 	bl	8008ab6 <inHandlerMode>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d01c      	beq.n	8009004 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008fca:	f107 0220 	add.w	r2, r7, #32
 8008fce:	f107 0314 	add.w	r3, r7, #20
 8008fd2:	3304      	adds	r3, #4
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	68b8      	ldr	r0, [r7, #8]
 8008fd8:	f000 feae 	bl	8009d38 <xQueueReceiveFromISR>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d102      	bne.n	8008fe8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008fe2:	2310      	movs	r3, #16
 8008fe4:	617b      	str	r3, [r7, #20]
 8008fe6:	e001      	b.n	8008fec <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008fec:	6a3b      	ldr	r3, [r7, #32]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d01d      	beq.n	800902e <osMessageGet+0xca>
 8008ff2:	4b15      	ldr	r3, [pc, #84]	; (8009048 <osMessageGet+0xe4>)
 8008ff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ff8:	601a      	str	r2, [r3, #0]
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	f3bf 8f6f 	isb	sy
 8009002:	e014      	b.n	800902e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009004:	f107 0314 	add.w	r3, r7, #20
 8009008:	3304      	adds	r3, #4
 800900a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800900c:	4619      	mov	r1, r3
 800900e:	68b8      	ldr	r0, [r7, #8]
 8009010:	f000 fca6 	bl	8009960 <xQueueReceive>
 8009014:	4603      	mov	r3, r0
 8009016:	2b01      	cmp	r3, #1
 8009018:	d102      	bne.n	8009020 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800901a:	2310      	movs	r3, #16
 800901c:	617b      	str	r3, [r7, #20]
 800901e:	e006      	b.n	800902e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009022:	2b00      	cmp	r3, #0
 8009024:	d101      	bne.n	800902a <osMessageGet+0xc6>
 8009026:	2300      	movs	r3, #0
 8009028:	e000      	b.n	800902c <osMessageGet+0xc8>
 800902a:	2340      	movs	r3, #64	; 0x40
 800902c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	461c      	mov	r4, r3
 8009032:	f107 0314 	add.w	r3, r7, #20
 8009036:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800903a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	372c      	adds	r7, #44	; 0x2c
 8009042:	46bd      	mov	sp, r7
 8009044:	bd90      	pop	{r4, r7, pc}
 8009046:	bf00      	nop
 8009048:	e000ed04 	.word	0xe000ed04

0800904c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009054:	f7ff fd2f 	bl	8008ab6 <inHandlerMode>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d004      	beq.n	8009068 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 ff08 	bl	8009e74 <uxQueueMessagesWaitingFromISR>
 8009064:	4603      	mov	r3, r0
 8009066:	e003      	b.n	8009070 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fee5 	bl	8009e38 <uxQueueMessagesWaiting>
 800906e:	4603      	mov	r3, r0
  }
}
 8009070:	4618      	mov	r0, r3
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009080:	f7ff fd19 	bl	8008ab6 <inHandlerMode>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <osMessageDelete+0x16>
    return osErrorISR;
 800908a:	2382      	movs	r3, #130	; 0x82
 800908c:	e003      	b.n	8009096 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 ff0e 	bl	8009eb0 <vQueueDelete>

  return osOK; 
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800909e:	b480      	push	{r7}
 80090a0:	b083      	sub	sp, #12
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f103 0208 	add.w	r2, r3, #8
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090b6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f103 0208 	add.w	r2, r3, #8
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f103 0208 	add.w	r2, r3, #8
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80090d2:	bf00      	nop
 80090d4:	370c      	adds	r7, #12
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr

080090de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80090de:	b480      	push	{r7}
 80090e0:	b083      	sub	sp, #12
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	689a      	ldr	r2, [r3, #8]
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	683a      	ldr	r2, [r7, #0]
 8009122:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	1c5a      	adds	r2, r3, #1
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	601a      	str	r2, [r3, #0]
}
 8009134:	bf00      	nop
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009156:	d103      	bne.n	8009160 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	60fb      	str	r3, [r7, #12]
 800915e:	e00c      	b.n	800917a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	3308      	adds	r3, #8
 8009164:	60fb      	str	r3, [r7, #12]
 8009166:	e002      	b.n	800916e <vListInsert+0x2e>
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	60fb      	str	r3, [r7, #12]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68ba      	ldr	r2, [r7, #8]
 8009176:	429a      	cmp	r2, r3
 8009178:	d2f6      	bcs.n	8009168 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	1c5a      	adds	r2, r3, #1
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	601a      	str	r2, [r3, #0]
}
 80091a6:	bf00      	nop
 80091a8:	3714      	adds	r7, #20
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80091b2:	b480      	push	{r7}
 80091b4:	b085      	sub	sp, #20
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	6892      	ldr	r2, [r2, #8]
 80091c8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	6852      	ldr	r2, [r2, #4]
 80091d2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d103      	bne.n	80091e6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	689a      	ldr	r2, [r3, #8]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	1e5a      	subs	r2, r3, #1
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3714      	adds	r7, #20
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
	...

08009208 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10a      	bne.n	8009232 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800921c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009220:	f383 8811 	msr	BASEPRI, r3
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800922e:	bf00      	nop
 8009230:	e7fe      	b.n	8009230 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009232:	f002 fcd7 	bl	800bbe4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800923e:	68f9      	ldr	r1, [r7, #12]
 8009240:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009242:	fb01 f303 	mul.w	r3, r1, r3
 8009246:	441a      	add	r2, r3
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2200      	movs	r2, #0
 8009250:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009262:	3b01      	subs	r3, #1
 8009264:	68f9      	ldr	r1, [r7, #12]
 8009266:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009268:	fb01 f303 	mul.w	r3, r1, r3
 800926c:	441a      	add	r2, r3
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	22ff      	movs	r2, #255	; 0xff
 8009276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	22ff      	movs	r2, #255	; 0xff
 800927e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d114      	bne.n	80092b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d01a      	beq.n	80092c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	3310      	adds	r3, #16
 8009294:	4618      	mov	r0, r3
 8009296:	f001 fc63 	bl	800ab60 <xTaskRemoveFromEventList>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d012      	beq.n	80092c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80092a0:	4b0c      	ldr	r3, [pc, #48]	; (80092d4 <xQueueGenericReset+0xcc>)
 80092a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092a6:	601a      	str	r2, [r3, #0]
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	e009      	b.n	80092c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	3310      	adds	r3, #16
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7ff fef1 	bl	800909e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	3324      	adds	r3, #36	; 0x24
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7ff feec 	bl	800909e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80092c6:	f002 fcbd 	bl	800bc44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80092ca:	2301      	movs	r3, #1
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	e000ed04 	.word	0xe000ed04

080092d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b08e      	sub	sp, #56	; 0x38
 80092dc:	af02      	add	r7, sp, #8
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
 80092e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d10a      	bne.n	8009302 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80092ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f0:	f383 8811 	msr	BASEPRI, r3
 80092f4:	f3bf 8f6f 	isb	sy
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80092fe:	bf00      	nop
 8009300:	e7fe      	b.n	8009300 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d10a      	bne.n	800931e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	627b      	str	r3, [r7, #36]	; 0x24
}
 800931a:	bf00      	nop
 800931c:	e7fe      	b.n	800931c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <xQueueGenericCreateStatic+0x52>
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d001      	beq.n	800932e <xQueueGenericCreateStatic+0x56>
 800932a:	2301      	movs	r3, #1
 800932c:	e000      	b.n	8009330 <xQueueGenericCreateStatic+0x58>
 800932e:	2300      	movs	r3, #0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d10a      	bne.n	800934a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	623b      	str	r3, [r7, #32]
}
 8009346:	bf00      	nop
 8009348:	e7fe      	b.n	8009348 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d102      	bne.n	8009356 <xQueueGenericCreateStatic+0x7e>
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d101      	bne.n	800935a <xQueueGenericCreateStatic+0x82>
 8009356:	2301      	movs	r3, #1
 8009358:	e000      	b.n	800935c <xQueueGenericCreateStatic+0x84>
 800935a:	2300      	movs	r3, #0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d10a      	bne.n	8009376 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	61fb      	str	r3, [r7, #28]
}
 8009372:	bf00      	nop
 8009374:	e7fe      	b.n	8009374 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009376:	2348      	movs	r3, #72	; 0x48
 8009378:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	2b48      	cmp	r3, #72	; 0x48
 800937e:	d00a      	beq.n	8009396 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	61bb      	str	r3, [r7, #24]
}
 8009392:	bf00      	nop
 8009394:	e7fe      	b.n	8009394 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009396:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800939c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00d      	beq.n	80093be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80093a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80093aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80093ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b0:	9300      	str	r3, [sp, #0]
 80093b2:	4613      	mov	r3, r2
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	68b9      	ldr	r1, [r7, #8]
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f000 f83f 	bl	800943c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80093be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3730      	adds	r7, #48	; 0x30
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b08a      	sub	sp, #40	; 0x28
 80093cc:	af02      	add	r7, sp, #8
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	4613      	mov	r3, r2
 80093d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10a      	bne.n	80093f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80093dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e0:	f383 8811 	msr	BASEPRI, r3
 80093e4:	f3bf 8f6f 	isb	sy
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	613b      	str	r3, [r7, #16]
}
 80093ee:	bf00      	nop
 80093f0:	e7fe      	b.n	80093f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	68ba      	ldr	r2, [r7, #8]
 80093f6:	fb02 f303 	mul.w	r3, r2, r3
 80093fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	3348      	adds	r3, #72	; 0x48
 8009400:	4618      	mov	r0, r3
 8009402:	f002 fd11 	bl	800be28 <pvPortMalloc>
 8009406:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d011      	beq.n	8009432 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	3348      	adds	r3, #72	; 0x48
 8009416:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	2200      	movs	r2, #0
 800941c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009420:	79fa      	ldrb	r2, [r7, #7]
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	9300      	str	r3, [sp, #0]
 8009426:	4613      	mov	r3, r2
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	68b9      	ldr	r1, [r7, #8]
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f000 f805 	bl	800943c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009432:	69bb      	ldr	r3, [r7, #24]
	}
 8009434:	4618      	mov	r0, r3
 8009436:	3720      	adds	r7, #32
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	607a      	str	r2, [r7, #4]
 8009448:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d103      	bne.n	8009458 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	69ba      	ldr	r2, [r7, #24]
 8009454:	601a      	str	r2, [r3, #0]
 8009456:	e002      	b.n	800945e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800946a:	2101      	movs	r1, #1
 800946c:	69b8      	ldr	r0, [r7, #24]
 800946e:	f7ff fecb 	bl	8009208 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009472:	bf00      	nop
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800947a:	b580      	push	{r7, lr}
 800947c:	b082      	sub	sp, #8
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00e      	beq.n	80094a6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800949a:	2300      	movs	r3, #0
 800949c:	2200      	movs	r2, #0
 800949e:	2100      	movs	r1, #0
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f837 	bl	8009514 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80094a6:	bf00      	nop
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b086      	sub	sp, #24
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	4603      	mov	r3, r0
 80094b6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80094b8:	2301      	movs	r3, #1
 80094ba:	617b      	str	r3, [r7, #20]
 80094bc:	2300      	movs	r3, #0
 80094be:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80094c0:	79fb      	ldrb	r3, [r7, #7]
 80094c2:	461a      	mov	r2, r3
 80094c4:	6939      	ldr	r1, [r7, #16]
 80094c6:	6978      	ldr	r0, [r7, #20]
 80094c8:	f7ff ff7e 	bl	80093c8 <xQueueGenericCreate>
 80094cc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f7ff ffd3 	bl	800947a <prvInitialiseMutex>

		return xNewQueue;
 80094d4:	68fb      	ldr	r3, [r7, #12]
	}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3718      	adds	r7, #24
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b088      	sub	sp, #32
 80094e2:	af02      	add	r7, sp, #8
 80094e4:	4603      	mov	r3, r0
 80094e6:	6039      	str	r1, [r7, #0]
 80094e8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80094ea:	2301      	movs	r3, #1
 80094ec:	617b      	str	r3, [r7, #20]
 80094ee:	2300      	movs	r3, #0
 80094f0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80094f2:	79fb      	ldrb	r3, [r7, #7]
 80094f4:	9300      	str	r3, [sp, #0]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	2200      	movs	r2, #0
 80094fa:	6939      	ldr	r1, [r7, #16]
 80094fc:	6978      	ldr	r0, [r7, #20]
 80094fe:	f7ff feeb 	bl	80092d8 <xQueueGenericCreateStatic>
 8009502:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f7ff ffb8 	bl	800947a <prvInitialiseMutex>

		return xNewQueue;
 800950a:	68fb      	ldr	r3, [r7, #12]
	}
 800950c:	4618      	mov	r0, r3
 800950e:	3718      	adds	r7, #24
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b08e      	sub	sp, #56	; 0x38
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
 8009520:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009522:	2300      	movs	r3, #0
 8009524:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10a      	bne.n	8009546 <xQueueGenericSend+0x32>
	__asm volatile
 8009530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009542:	bf00      	nop
 8009544:	e7fe      	b.n	8009544 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d103      	bne.n	8009554 <xQueueGenericSend+0x40>
 800954c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009550:	2b00      	cmp	r3, #0
 8009552:	d101      	bne.n	8009558 <xQueueGenericSend+0x44>
 8009554:	2301      	movs	r3, #1
 8009556:	e000      	b.n	800955a <xQueueGenericSend+0x46>
 8009558:	2300      	movs	r3, #0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d10a      	bne.n	8009574 <xQueueGenericSend+0x60>
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009570:	bf00      	nop
 8009572:	e7fe      	b.n	8009572 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	2b02      	cmp	r3, #2
 8009578:	d103      	bne.n	8009582 <xQueueGenericSend+0x6e>
 800957a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800957e:	2b01      	cmp	r3, #1
 8009580:	d101      	bne.n	8009586 <xQueueGenericSend+0x72>
 8009582:	2301      	movs	r3, #1
 8009584:	e000      	b.n	8009588 <xQueueGenericSend+0x74>
 8009586:	2300      	movs	r3, #0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d10a      	bne.n	80095a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800958c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009590:	f383 8811 	msr	BASEPRI, r3
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	623b      	str	r3, [r7, #32]
}
 800959e:	bf00      	nop
 80095a0:	e7fe      	b.n	80095a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095a2:	f001 fc9d 	bl	800aee0 <xTaskGetSchedulerState>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d102      	bne.n	80095b2 <xQueueGenericSend+0x9e>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d101      	bne.n	80095b6 <xQueueGenericSend+0xa2>
 80095b2:	2301      	movs	r3, #1
 80095b4:	e000      	b.n	80095b8 <xQueueGenericSend+0xa4>
 80095b6:	2300      	movs	r3, #0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10a      	bne.n	80095d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	61fb      	str	r3, [r7, #28]
}
 80095ce:	bf00      	nop
 80095d0:	e7fe      	b.n	80095d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095d2:	f002 fb07 	bl	800bbe4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095de:	429a      	cmp	r2, r3
 80095e0:	d302      	bcc.n	80095e8 <xQueueGenericSend+0xd4>
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	2b02      	cmp	r3, #2
 80095e6:	d129      	bne.n	800963c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80095e8:	683a      	ldr	r2, [r7, #0]
 80095ea:	68b9      	ldr	r1, [r7, #8]
 80095ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095ee:	f000 fc9a 	bl	8009f26 <prvCopyDataToQueue>
 80095f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d010      	beq.n	800961e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fe:	3324      	adds	r3, #36	; 0x24
 8009600:	4618      	mov	r0, r3
 8009602:	f001 faad 	bl	800ab60 <xTaskRemoveFromEventList>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d013      	beq.n	8009634 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800960c:	4b3f      	ldr	r3, [pc, #252]	; (800970c <xQueueGenericSend+0x1f8>)
 800960e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	f3bf 8f4f 	dsb	sy
 8009618:	f3bf 8f6f 	isb	sy
 800961c:	e00a      	b.n	8009634 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800961e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009620:	2b00      	cmp	r3, #0
 8009622:	d007      	beq.n	8009634 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009624:	4b39      	ldr	r3, [pc, #228]	; (800970c <xQueueGenericSend+0x1f8>)
 8009626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800962a:	601a      	str	r2, [r3, #0]
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009634:	f002 fb06 	bl	800bc44 <vPortExitCritical>
				return pdPASS;
 8009638:	2301      	movs	r3, #1
 800963a:	e063      	b.n	8009704 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d103      	bne.n	800964a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009642:	f002 faff 	bl	800bc44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009646:	2300      	movs	r3, #0
 8009648:	e05c      	b.n	8009704 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800964a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800964c:	2b00      	cmp	r3, #0
 800964e:	d106      	bne.n	800965e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009650:	f107 0314 	add.w	r3, r7, #20
 8009654:	4618      	mov	r0, r3
 8009656:	f001 fae5 	bl	800ac24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800965a:	2301      	movs	r3, #1
 800965c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800965e:	f002 faf1 	bl	800bc44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009662:	f001 f847 	bl	800a6f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009666:	f002 fabd 	bl	800bbe4 <vPortEnterCritical>
 800966a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009670:	b25b      	sxtb	r3, r3
 8009672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009676:	d103      	bne.n	8009680 <xQueueGenericSend+0x16c>
 8009678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967a:	2200      	movs	r2, #0
 800967c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009686:	b25b      	sxtb	r3, r3
 8009688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800968c:	d103      	bne.n	8009696 <xQueueGenericSend+0x182>
 800968e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009690:	2200      	movs	r2, #0
 8009692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009696:	f002 fad5 	bl	800bc44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800969a:	1d3a      	adds	r2, r7, #4
 800969c:	f107 0314 	add.w	r3, r7, #20
 80096a0:	4611      	mov	r1, r2
 80096a2:	4618      	mov	r0, r3
 80096a4:	f001 fad4 	bl	800ac50 <xTaskCheckForTimeOut>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d124      	bne.n	80096f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80096ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096b0:	f000 fd31 	bl	800a116 <prvIsQueueFull>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d018      	beq.n	80096ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80096ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096bc:	3310      	adds	r3, #16
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	4611      	mov	r1, r2
 80096c2:	4618      	mov	r0, r3
 80096c4:	f001 f9fc 	bl	800aac0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80096c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096ca:	f000 fcbc 	bl	800a046 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80096ce:	f001 f81f 	bl	800a710 <xTaskResumeAll>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f47f af7c 	bne.w	80095d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80096da:	4b0c      	ldr	r3, [pc, #48]	; (800970c <xQueueGenericSend+0x1f8>)
 80096dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096e0:	601a      	str	r2, [r3, #0]
 80096e2:	f3bf 8f4f 	dsb	sy
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	e772      	b.n	80095d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80096ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096ee:	f000 fcaa 	bl	800a046 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096f2:	f001 f80d 	bl	800a710 <xTaskResumeAll>
 80096f6:	e76c      	b.n	80095d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80096f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096fa:	f000 fca4 	bl	800a046 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096fe:	f001 f807 	bl	800a710 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009702:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009704:	4618      	mov	r0, r3
 8009706:	3738      	adds	r7, #56	; 0x38
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	e000ed04 	.word	0xe000ed04

08009710 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b090      	sub	sp, #64	; 0x40
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
 800971c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009724:	2b00      	cmp	r3, #0
 8009726:	d10a      	bne.n	800973e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972c:	f383 8811 	msr	BASEPRI, r3
 8009730:	f3bf 8f6f 	isb	sy
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800973a:	bf00      	nop
 800973c:	e7fe      	b.n	800973c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d103      	bne.n	800974c <xQueueGenericSendFromISR+0x3c>
 8009744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009748:	2b00      	cmp	r3, #0
 800974a:	d101      	bne.n	8009750 <xQueueGenericSendFromISR+0x40>
 800974c:	2301      	movs	r3, #1
 800974e:	e000      	b.n	8009752 <xQueueGenericSendFromISR+0x42>
 8009750:	2300      	movs	r3, #0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10a      	bne.n	800976c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975a:	f383 8811 	msr	BASEPRI, r3
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	f3bf 8f4f 	dsb	sy
 8009766:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009768:	bf00      	nop
 800976a:	e7fe      	b.n	800976a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	2b02      	cmp	r3, #2
 8009770:	d103      	bne.n	800977a <xQueueGenericSendFromISR+0x6a>
 8009772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009776:	2b01      	cmp	r3, #1
 8009778:	d101      	bne.n	800977e <xQueueGenericSendFromISR+0x6e>
 800977a:	2301      	movs	r3, #1
 800977c:	e000      	b.n	8009780 <xQueueGenericSendFromISR+0x70>
 800977e:	2300      	movs	r3, #0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10a      	bne.n	800979a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009788:	f383 8811 	msr	BASEPRI, r3
 800978c:	f3bf 8f6f 	isb	sy
 8009790:	f3bf 8f4f 	dsb	sy
 8009794:	623b      	str	r3, [r7, #32]
}
 8009796:	bf00      	nop
 8009798:	e7fe      	b.n	8009798 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800979a:	f002 fb05 	bl	800bda8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800979e:	f3ef 8211 	mrs	r2, BASEPRI
 80097a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a6:	f383 8811 	msr	BASEPRI, r3
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	61fa      	str	r2, [r7, #28]
 80097b4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80097b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80097b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d302      	bcc.n	80097cc <xQueueGenericSendFromISR+0xbc>
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d12f      	bne.n	800982c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80097cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097dc:	683a      	ldr	r2, [r7, #0]
 80097de:	68b9      	ldr	r1, [r7, #8]
 80097e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097e2:	f000 fba0 	bl	8009f26 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80097e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80097ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097ee:	d112      	bne.n	8009816 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d016      	beq.n	8009826 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fa:	3324      	adds	r3, #36	; 0x24
 80097fc:	4618      	mov	r0, r3
 80097fe:	f001 f9af 	bl	800ab60 <xTaskRemoveFromEventList>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d00e      	beq.n	8009826 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00b      	beq.n	8009826 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	601a      	str	r2, [r3, #0]
 8009814:	e007      	b.n	8009826 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009816:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800981a:	3301      	adds	r3, #1
 800981c:	b2db      	uxtb	r3, r3
 800981e:	b25a      	sxtb	r2, r3
 8009820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009826:	2301      	movs	r3, #1
 8009828:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800982a:	e001      	b.n	8009830 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800982c:	2300      	movs	r3, #0
 800982e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009832:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800983a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800983c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800983e:	4618      	mov	r0, r3
 8009840:	3740      	adds	r7, #64	; 0x40
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b08e      	sub	sp, #56	; 0x38
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
 800984e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009856:	2b00      	cmp	r3, #0
 8009858:	d10a      	bne.n	8009870 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800985a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985e:	f383 8811 	msr	BASEPRI, r3
 8009862:	f3bf 8f6f 	isb	sy
 8009866:	f3bf 8f4f 	dsb	sy
 800986a:	623b      	str	r3, [r7, #32]
}
 800986c:	bf00      	nop
 800986e:	e7fe      	b.n	800986e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00a      	beq.n	800988e <xQueueGiveFromISR+0x48>
	__asm volatile
 8009878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987c:	f383 8811 	msr	BASEPRI, r3
 8009880:	f3bf 8f6f 	isb	sy
 8009884:	f3bf 8f4f 	dsb	sy
 8009888:	61fb      	str	r3, [r7, #28]
}
 800988a:	bf00      	nop
 800988c:	e7fe      	b.n	800988c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800988e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d103      	bne.n	800989e <xQueueGiveFromISR+0x58>
 8009896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d101      	bne.n	80098a2 <xQueueGiveFromISR+0x5c>
 800989e:	2301      	movs	r3, #1
 80098a0:	e000      	b.n	80098a4 <xQueueGiveFromISR+0x5e>
 80098a2:	2300      	movs	r3, #0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10a      	bne.n	80098be <xQueueGiveFromISR+0x78>
	__asm volatile
 80098a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ac:	f383 8811 	msr	BASEPRI, r3
 80098b0:	f3bf 8f6f 	isb	sy
 80098b4:	f3bf 8f4f 	dsb	sy
 80098b8:	61bb      	str	r3, [r7, #24]
}
 80098ba:	bf00      	nop
 80098bc:	e7fe      	b.n	80098bc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80098be:	f002 fa73 	bl	800bda8 <vPortValidateInterruptPriority>
	__asm volatile
 80098c2:	f3ef 8211 	mrs	r2, BASEPRI
 80098c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ca:	f383 8811 	msr	BASEPRI, r3
 80098ce:	f3bf 8f6f 	isb	sy
 80098d2:	f3bf 8f4f 	dsb	sy
 80098d6:	617a      	str	r2, [r7, #20]
 80098d8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80098da:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80098dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80098e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d22b      	bcs.n	8009946 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80098ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80098f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fa:	1c5a      	adds	r2, r3, #1
 80098fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009900:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009908:	d112      	bne.n	8009930 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800990a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990e:	2b00      	cmp	r3, #0
 8009910:	d016      	beq.n	8009940 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009914:	3324      	adds	r3, #36	; 0x24
 8009916:	4618      	mov	r0, r3
 8009918:	f001 f922 	bl	800ab60 <xTaskRemoveFromEventList>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00e      	beq.n	8009940 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d00b      	beq.n	8009940 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	2201      	movs	r2, #1
 800992c:	601a      	str	r2, [r3, #0]
 800992e:	e007      	b.n	8009940 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009934:	3301      	adds	r3, #1
 8009936:	b2db      	uxtb	r3, r3
 8009938:	b25a      	sxtb	r2, r3
 800993a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009940:	2301      	movs	r3, #1
 8009942:	637b      	str	r3, [r7, #52]	; 0x34
 8009944:	e001      	b.n	800994a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009946:	2300      	movs	r3, #0
 8009948:	637b      	str	r3, [r7, #52]	; 0x34
 800994a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f383 8811 	msr	BASEPRI, r3
}
 8009954:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009958:	4618      	mov	r0, r3
 800995a:	3738      	adds	r7, #56	; 0x38
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b08c      	sub	sp, #48	; 0x30
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800996c:	2300      	movs	r3, #0
 800996e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009976:	2b00      	cmp	r3, #0
 8009978:	d10a      	bne.n	8009990 <xQueueReceive+0x30>
	__asm volatile
 800997a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	623b      	str	r3, [r7, #32]
}
 800998c:	bf00      	nop
 800998e:	e7fe      	b.n	800998e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d103      	bne.n	800999e <xQueueReceive+0x3e>
 8009996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999a:	2b00      	cmp	r3, #0
 800999c:	d101      	bne.n	80099a2 <xQueueReceive+0x42>
 800999e:	2301      	movs	r3, #1
 80099a0:	e000      	b.n	80099a4 <xQueueReceive+0x44>
 80099a2:	2300      	movs	r3, #0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d10a      	bne.n	80099be <xQueueReceive+0x5e>
	__asm volatile
 80099a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ac:	f383 8811 	msr	BASEPRI, r3
 80099b0:	f3bf 8f6f 	isb	sy
 80099b4:	f3bf 8f4f 	dsb	sy
 80099b8:	61fb      	str	r3, [r7, #28]
}
 80099ba:	bf00      	nop
 80099bc:	e7fe      	b.n	80099bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099be:	f001 fa8f 	bl	800aee0 <xTaskGetSchedulerState>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d102      	bne.n	80099ce <xQueueReceive+0x6e>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d101      	bne.n	80099d2 <xQueueReceive+0x72>
 80099ce:	2301      	movs	r3, #1
 80099d0:	e000      	b.n	80099d4 <xQueueReceive+0x74>
 80099d2:	2300      	movs	r3, #0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d10a      	bne.n	80099ee <xQueueReceive+0x8e>
	__asm volatile
 80099d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099dc:	f383 8811 	msr	BASEPRI, r3
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	61bb      	str	r3, [r7, #24]
}
 80099ea:	bf00      	nop
 80099ec:	e7fe      	b.n	80099ec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099ee:	f002 f8f9 	bl	800bbe4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d01f      	beq.n	8009a3e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80099fe:	68b9      	ldr	r1, [r7, #8]
 8009a00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a02:	f000 fafa 	bl	8009ffa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a08:	1e5a      	subs	r2, r3, #1
 8009a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00f      	beq.n	8009a36 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a18:	3310      	adds	r3, #16
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f001 f8a0 	bl	800ab60 <xTaskRemoveFromEventList>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d007      	beq.n	8009a36 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a26:	4b3d      	ldr	r3, [pc, #244]	; (8009b1c <xQueueReceive+0x1bc>)
 8009a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a2c:	601a      	str	r2, [r3, #0]
 8009a2e:	f3bf 8f4f 	dsb	sy
 8009a32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a36:	f002 f905 	bl	800bc44 <vPortExitCritical>
				return pdPASS;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e069      	b.n	8009b12 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d103      	bne.n	8009a4c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009a44:	f002 f8fe 	bl	800bc44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	e062      	b.n	8009b12 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d106      	bne.n	8009a60 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a52:	f107 0310 	add.w	r3, r7, #16
 8009a56:	4618      	mov	r0, r3
 8009a58:	f001 f8e4 	bl	800ac24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a60:	f002 f8f0 	bl	800bc44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a64:	f000 fe46 	bl	800a6f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a68:	f002 f8bc 	bl	800bbe4 <vPortEnterCritical>
 8009a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a72:	b25b      	sxtb	r3, r3
 8009a74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a78:	d103      	bne.n	8009a82 <xQueueReceive+0x122>
 8009a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a88:	b25b      	sxtb	r3, r3
 8009a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a8e:	d103      	bne.n	8009a98 <xQueueReceive+0x138>
 8009a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a98:	f002 f8d4 	bl	800bc44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a9c:	1d3a      	adds	r2, r7, #4
 8009a9e:	f107 0310 	add.w	r3, r7, #16
 8009aa2:	4611      	mov	r1, r2
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f001 f8d3 	bl	800ac50 <xTaskCheckForTimeOut>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d123      	bne.n	8009af8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ab2:	f000 fb1a 	bl	800a0ea <prvIsQueueEmpty>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d017      	beq.n	8009aec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abe:	3324      	adds	r3, #36	; 0x24
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	4611      	mov	r1, r2
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f000 fffb 	bl	800aac0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009aca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009acc:	f000 fabb 	bl	800a046 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009ad0:	f000 fe1e 	bl	800a710 <xTaskResumeAll>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d189      	bne.n	80099ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009ada:	4b10      	ldr	r3, [pc, #64]	; (8009b1c <xQueueReceive+0x1bc>)
 8009adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ae0:	601a      	str	r2, [r3, #0]
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	e780      	b.n	80099ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aee:	f000 faaa 	bl	800a046 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009af2:	f000 fe0d 	bl	800a710 <xTaskResumeAll>
 8009af6:	e77a      	b.n	80099ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009afa:	f000 faa4 	bl	800a046 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009afe:	f000 fe07 	bl	800a710 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b04:	f000 faf1 	bl	800a0ea <prvIsQueueEmpty>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f43f af6f 	beq.w	80099ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3730      	adds	r7, #48	; 0x30
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	e000ed04 	.word	0xe000ed04

08009b20 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b08e      	sub	sp, #56	; 0x38
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009b32:	2300      	movs	r3, #0
 8009b34:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d10a      	bne.n	8009b52 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b40:	f383 8811 	msr	BASEPRI, r3
 8009b44:	f3bf 8f6f 	isb	sy
 8009b48:	f3bf 8f4f 	dsb	sy
 8009b4c:	623b      	str	r3, [r7, #32]
}
 8009b4e:	bf00      	nop
 8009b50:	e7fe      	b.n	8009b50 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00a      	beq.n	8009b70 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5e:	f383 8811 	msr	BASEPRI, r3
 8009b62:	f3bf 8f6f 	isb	sy
 8009b66:	f3bf 8f4f 	dsb	sy
 8009b6a:	61fb      	str	r3, [r7, #28]
}
 8009b6c:	bf00      	nop
 8009b6e:	e7fe      	b.n	8009b6e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b70:	f001 f9b6 	bl	800aee0 <xTaskGetSchedulerState>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d102      	bne.n	8009b80 <xQueueSemaphoreTake+0x60>
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d101      	bne.n	8009b84 <xQueueSemaphoreTake+0x64>
 8009b80:	2301      	movs	r3, #1
 8009b82:	e000      	b.n	8009b86 <xQueueSemaphoreTake+0x66>
 8009b84:	2300      	movs	r3, #0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d10a      	bne.n	8009ba0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	61bb      	str	r3, [r7, #24]
}
 8009b9c:	bf00      	nop
 8009b9e:	e7fe      	b.n	8009b9e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ba0:	f002 f820 	bl	800bbe4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d024      	beq.n	8009bfa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb2:	1e5a      	subs	r2, r3, #1
 8009bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d104      	bne.n	8009bca <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009bc0:	f001 fb36 	bl	800b230 <pvTaskIncrementMutexHeldCount>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00f      	beq.n	8009bf2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd4:	3310      	adds	r3, #16
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f000 ffc2 	bl	800ab60 <xTaskRemoveFromEventList>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d007      	beq.n	8009bf2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009be2:	4b54      	ldr	r3, [pc, #336]	; (8009d34 <xQueueSemaphoreTake+0x214>)
 8009be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009be8:	601a      	str	r2, [r3, #0]
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009bf2:	f002 f827 	bl	800bc44 <vPortExitCritical>
				return pdPASS;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e097      	b.n	8009d2a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d111      	bne.n	8009c24 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00a      	beq.n	8009c1c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	617b      	str	r3, [r7, #20]
}
 8009c18:	bf00      	nop
 8009c1a:	e7fe      	b.n	8009c1a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009c1c:	f002 f812 	bl	800bc44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c20:	2300      	movs	r3, #0
 8009c22:	e082      	b.n	8009d2a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d106      	bne.n	8009c38 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c2a:	f107 030c 	add.w	r3, r7, #12
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 fff8 	bl	800ac24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c34:	2301      	movs	r3, #1
 8009c36:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c38:	f002 f804 	bl	800bc44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c3c:	f000 fd5a 	bl	800a6f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c40:	f001 ffd0 	bl	800bbe4 <vPortEnterCritical>
 8009c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c4a:	b25b      	sxtb	r3, r3
 8009c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c50:	d103      	bne.n	8009c5a <xQueueSemaphoreTake+0x13a>
 8009c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c54:	2200      	movs	r2, #0
 8009c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c60:	b25b      	sxtb	r3, r3
 8009c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c66:	d103      	bne.n	8009c70 <xQueueSemaphoreTake+0x150>
 8009c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c70:	f001 ffe8 	bl	800bc44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c74:	463a      	mov	r2, r7
 8009c76:	f107 030c 	add.w	r3, r7, #12
 8009c7a:	4611      	mov	r1, r2
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f000 ffe7 	bl	800ac50 <xTaskCheckForTimeOut>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d132      	bne.n	8009cee <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c8a:	f000 fa2e 	bl	800a0ea <prvIsQueueEmpty>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d026      	beq.n	8009ce2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d109      	bne.n	8009cb0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009c9c:	f001 ffa2 	bl	800bbe4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f001 f939 	bl	800af1c <xTaskPriorityInherit>
 8009caa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009cac:	f001 ffca 	bl	800bc44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb2:	3324      	adds	r3, #36	; 0x24
 8009cb4:	683a      	ldr	r2, [r7, #0]
 8009cb6:	4611      	mov	r1, r2
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 ff01 	bl	800aac0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009cbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009cc0:	f000 f9c1 	bl	800a046 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009cc4:	f000 fd24 	bl	800a710 <xTaskResumeAll>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f47f af68 	bne.w	8009ba0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009cd0:	4b18      	ldr	r3, [pc, #96]	; (8009d34 <xQueueSemaphoreTake+0x214>)
 8009cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cd6:	601a      	str	r2, [r3, #0]
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	e75e      	b.n	8009ba0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009ce2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ce4:	f000 f9af 	bl	800a046 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ce8:	f000 fd12 	bl	800a710 <xTaskResumeAll>
 8009cec:	e758      	b.n	8009ba0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009cee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009cf0:	f000 f9a9 	bl	800a046 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009cf4:	f000 fd0c 	bl	800a710 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009cfa:	f000 f9f6 	bl	800a0ea <prvIsQueueEmpty>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f43f af4d 	beq.w	8009ba0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00d      	beq.n	8009d28 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009d0c:	f001 ff6a 	bl	800bbe4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009d10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d12:	f000 f8f0 	bl	8009ef6 <prvGetDisinheritPriorityAfterTimeout>
 8009d16:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f001 f9f8 	bl	800b114 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009d24:	f001 ff8e 	bl	800bc44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3738      	adds	r7, #56	; 0x38
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	e000ed04 	.word	0xe000ed04

08009d38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b08e      	sub	sp, #56	; 0x38
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d10a      	bne.n	8009d64 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d52:	f383 8811 	msr	BASEPRI, r3
 8009d56:	f3bf 8f6f 	isb	sy
 8009d5a:	f3bf 8f4f 	dsb	sy
 8009d5e:	623b      	str	r3, [r7, #32]
}
 8009d60:	bf00      	nop
 8009d62:	e7fe      	b.n	8009d62 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d103      	bne.n	8009d72 <xQueueReceiveFromISR+0x3a>
 8009d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d101      	bne.n	8009d76 <xQueueReceiveFromISR+0x3e>
 8009d72:	2301      	movs	r3, #1
 8009d74:	e000      	b.n	8009d78 <xQueueReceiveFromISR+0x40>
 8009d76:	2300      	movs	r3, #0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10a      	bne.n	8009d92 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d80:	f383 8811 	msr	BASEPRI, r3
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	61fb      	str	r3, [r7, #28]
}
 8009d8e:	bf00      	nop
 8009d90:	e7fe      	b.n	8009d90 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d92:	f002 f809 	bl	800bda8 <vPortValidateInterruptPriority>
	__asm volatile
 8009d96:	f3ef 8211 	mrs	r2, BASEPRI
 8009d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9e:	f383 8811 	msr	BASEPRI, r3
 8009da2:	f3bf 8f6f 	isb	sy
 8009da6:	f3bf 8f4f 	dsb	sy
 8009daa:	61ba      	str	r2, [r7, #24]
 8009dac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009dae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009db0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d02f      	beq.n	8009e1e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009dc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009dc8:	68b9      	ldr	r1, [r7, #8]
 8009dca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dcc:	f000 f915 	bl	8009ffa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd2:	1e5a      	subs	r2, r3, #1
 8009dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009dd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009de0:	d112      	bne.n	8009e08 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d016      	beq.n	8009e18 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dec:	3310      	adds	r3, #16
 8009dee:	4618      	mov	r0, r3
 8009df0:	f000 feb6 	bl	800ab60 <xTaskRemoveFromEventList>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00e      	beq.n	8009e18 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00b      	beq.n	8009e18 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	601a      	str	r2, [r3, #0]
 8009e06:	e007      	b.n	8009e18 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	b25a      	sxtb	r2, r3
 8009e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8009e1c:	e001      	b.n	8009e22 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	637b      	str	r3, [r7, #52]	; 0x34
 8009e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e24:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	f383 8811 	msr	BASEPRI, r3
}
 8009e2c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3738      	adds	r7, #56	; 0x38
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d10a      	bne.n	8009e5c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8009e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4a:	f383 8811 	msr	BASEPRI, r3
 8009e4e:	f3bf 8f6f 	isb	sy
 8009e52:	f3bf 8f4f 	dsb	sy
 8009e56:	60bb      	str	r3, [r7, #8]
}
 8009e58:	bf00      	nop
 8009e5a:	e7fe      	b.n	8009e5a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8009e5c:	f001 fec2 	bl	800bbe4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e64:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8009e66:	f001 feed 	bl	800bc44 <vPortExitCritical>

	return uxReturn;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8009e74:	b480      	push	{r7}
 8009e76:	b087      	sub	sp, #28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10a      	bne.n	8009e9c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8009e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8a:	f383 8811 	msr	BASEPRI, r3
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	f3bf 8f4f 	dsb	sy
 8009e96:	60fb      	str	r3, [r7, #12]
}
 8009e98:	bf00      	nop
 8009e9a:	e7fe      	b.n	8009e9a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8009ea2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	371c      	adds	r7, #28
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d10a      	bne.n	8009ed8 <vQueueDelete+0x28>
	__asm volatile
 8009ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec6:	f383 8811 	msr	BASEPRI, r3
 8009eca:	f3bf 8f6f 	isb	sy
 8009ece:	f3bf 8f4f 	dsb	sy
 8009ed2:	60bb      	str	r3, [r7, #8]
}
 8009ed4:	bf00      	nop
 8009ed6:	e7fe      	b.n	8009ed6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009ed8:	68f8      	ldr	r0, [r7, #12]
 8009eda:	f000 f95f 	bl	800a19c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d102      	bne.n	8009eee <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f002 f869 	bl	800bfc0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009eee:	bf00      	nop
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009ef6:	b480      	push	{r7}
 8009ef8:	b085      	sub	sp, #20
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d006      	beq.n	8009f14 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f1c3 0307 	rsb	r3, r3, #7
 8009f10:	60fb      	str	r3, [r7, #12]
 8009f12:	e001      	b.n	8009f18 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009f14:	2300      	movs	r3, #0
 8009f16:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009f18:	68fb      	ldr	r3, [r7, #12]
	}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3714      	adds	r7, #20
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b086      	sub	sp, #24
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	60f8      	str	r0, [r7, #12]
 8009f2e:	60b9      	str	r1, [r7, #8]
 8009f30:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009f32:	2300      	movs	r3, #0
 8009f34:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f3a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d10d      	bne.n	8009f60 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d14d      	bne.n	8009fe8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	4618      	mov	r0, r3
 8009f52:	f001 f859 	bl	800b008 <xTaskPriorityDisinherit>
 8009f56:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	609a      	str	r2, [r3, #8]
 8009f5e:	e043      	b.n	8009fe8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d119      	bne.n	8009f9a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6858      	ldr	r0, [r3, #4]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6e:	461a      	mov	r2, r3
 8009f70:	68b9      	ldr	r1, [r7, #8]
 8009f72:	f01a fb1a 	bl	80245aa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	685a      	ldr	r2, [r3, #4]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7e:	441a      	add	r2, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	685a      	ldr	r2, [r3, #4]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d32b      	bcc.n	8009fe8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	605a      	str	r2, [r3, #4]
 8009f98:	e026      	b.n	8009fe8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	68d8      	ldr	r0, [r3, #12]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	68b9      	ldr	r1, [r7, #8]
 8009fa6:	f01a fb00 	bl	80245aa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	68da      	ldr	r2, [r3, #12]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb2:	425b      	negs	r3, r3
 8009fb4:	441a      	add	r2, r3
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	68da      	ldr	r2, [r3, #12]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d207      	bcs.n	8009fd6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	689a      	ldr	r2, [r3, #8]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fce:	425b      	negs	r3, r3
 8009fd0:	441a      	add	r2, r3
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2b02      	cmp	r3, #2
 8009fda:	d105      	bne.n	8009fe8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d002      	beq.n	8009fe8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	1c5a      	adds	r2, r3, #1
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009ff0:	697b      	ldr	r3, [r7, #20]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3718      	adds	r7, #24
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b082      	sub	sp, #8
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
 800a002:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d018      	beq.n	800a03e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	68da      	ldr	r2, [r3, #12]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a014:	441a      	add	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	68da      	ldr	r2, [r3, #12]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	429a      	cmp	r2, r3
 800a024:	d303      	bcc.n	800a02e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	68d9      	ldr	r1, [r3, #12]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a036:	461a      	mov	r2, r3
 800a038:	6838      	ldr	r0, [r7, #0]
 800a03a:	f01a fab6 	bl	80245aa <memcpy>
	}
}
 800a03e:	bf00      	nop
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b084      	sub	sp, #16
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a04e:	f001 fdc9 	bl	800bbe4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a058:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a05a:	e011      	b.n	800a080 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a060:	2b00      	cmp	r3, #0
 800a062:	d012      	beq.n	800a08a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	3324      	adds	r3, #36	; 0x24
 800a068:	4618      	mov	r0, r3
 800a06a:	f000 fd79 	bl	800ab60 <xTaskRemoveFromEventList>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d001      	beq.n	800a078 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a074:	f000 fe4e 	bl	800ad14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a078:	7bfb      	ldrb	r3, [r7, #15]
 800a07a:	3b01      	subs	r3, #1
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a084:	2b00      	cmp	r3, #0
 800a086:	dce9      	bgt.n	800a05c <prvUnlockQueue+0x16>
 800a088:	e000      	b.n	800a08c <prvUnlockQueue+0x46>
					break;
 800a08a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	22ff      	movs	r2, #255	; 0xff
 800a090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a094:	f001 fdd6 	bl	800bc44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a098:	f001 fda4 	bl	800bbe4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0a2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0a4:	e011      	b.n	800a0ca <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d012      	beq.n	800a0d4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	3310      	adds	r3, #16
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f000 fd54 	bl	800ab60 <xTaskRemoveFromEventList>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d001      	beq.n	800a0c2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a0be:	f000 fe29 	bl	800ad14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a0c2:	7bbb      	ldrb	r3, [r7, #14]
 800a0c4:	3b01      	subs	r3, #1
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	dce9      	bgt.n	800a0a6 <prvUnlockQueue+0x60>
 800a0d2:	e000      	b.n	800a0d6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a0d4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	22ff      	movs	r2, #255	; 0xff
 800a0da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a0de:	f001 fdb1 	bl	800bc44 <vPortExitCritical>
}
 800a0e2:	bf00      	nop
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b084      	sub	sp, #16
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a0f2:	f001 fd77 	bl	800bbe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d102      	bne.n	800a104 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a0fe:	2301      	movs	r3, #1
 800a100:	60fb      	str	r3, [r7, #12]
 800a102:	e001      	b.n	800a108 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a104:	2300      	movs	r3, #0
 800a106:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a108:	f001 fd9c 	bl	800bc44 <vPortExitCritical>

	return xReturn;
 800a10c:	68fb      	ldr	r3, [r7, #12]
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b084      	sub	sp, #16
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a11e:	f001 fd61 	bl	800bbe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d102      	bne.n	800a134 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a12e:	2301      	movs	r3, #1
 800a130:	60fb      	str	r3, [r7, #12]
 800a132:	e001      	b.n	800a138 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a134:	2300      	movs	r3, #0
 800a136:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a138:	f001 fd84 	bl	800bc44 <vPortExitCritical>

	return xReturn;
 800a13c:	68fb      	ldr	r3, [r7, #12]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
	...

0800a148 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a152:	2300      	movs	r3, #0
 800a154:	60fb      	str	r3, [r7, #12]
 800a156:	e014      	b.n	800a182 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a158:	4a0f      	ldr	r2, [pc, #60]	; (800a198 <vQueueAddToRegistry+0x50>)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d10b      	bne.n	800a17c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a164:	490c      	ldr	r1, [pc, #48]	; (800a198 <vQueueAddToRegistry+0x50>)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	683a      	ldr	r2, [r7, #0]
 800a16a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a16e:	4a0a      	ldr	r2, [pc, #40]	; (800a198 <vQueueAddToRegistry+0x50>)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	00db      	lsls	r3, r3, #3
 800a174:	4413      	add	r3, r2
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a17a:	e006      	b.n	800a18a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	3301      	adds	r3, #1
 800a180:	60fb      	str	r3, [r7, #12]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2b07      	cmp	r3, #7
 800a186:	d9e7      	bls.n	800a158 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a188:	bf00      	nop
 800a18a:	bf00      	nop
 800a18c:	3714      	adds	r7, #20
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	20006694 	.word	0x20006694

0800a19c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	60fb      	str	r3, [r7, #12]
 800a1a8:	e016      	b.n	800a1d8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a1aa:	4a10      	ldr	r2, [pc, #64]	; (800a1ec <vQueueUnregisterQueue+0x50>)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	4413      	add	r3, r2
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d10b      	bne.n	800a1d2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a1ba:	4a0c      	ldr	r2, [pc, #48]	; (800a1ec <vQueueUnregisterQueue+0x50>)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2100      	movs	r1, #0
 800a1c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a1c4:	4a09      	ldr	r2, [pc, #36]	; (800a1ec <vQueueUnregisterQueue+0x50>)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	00db      	lsls	r3, r3, #3
 800a1ca:	4413      	add	r3, r2
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	605a      	str	r2, [r3, #4]
				break;
 800a1d0:	e006      	b.n	800a1e0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	60fb      	str	r3, [r7, #12]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2b07      	cmp	r3, #7
 800a1dc:	d9e5      	bls.n	800a1aa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a1de:	bf00      	nop
 800a1e0:	bf00      	nop
 800a1e2:	3714      	adds	r7, #20
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	20006694 	.word	0x20006694

0800a1f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b086      	sub	sp, #24
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a200:	f001 fcf0 	bl	800bbe4 <vPortEnterCritical>
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a20a:	b25b      	sxtb	r3, r3
 800a20c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a210:	d103      	bne.n	800a21a <vQueueWaitForMessageRestricted+0x2a>
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a220:	b25b      	sxtb	r3, r3
 800a222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a226:	d103      	bne.n	800a230 <vQueueWaitForMessageRestricted+0x40>
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a230:	f001 fd08 	bl	800bc44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d106      	bne.n	800a24a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	3324      	adds	r3, #36	; 0x24
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	68b9      	ldr	r1, [r7, #8]
 800a244:	4618      	mov	r0, r3
 800a246:	f000 fc5f 	bl	800ab08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a24a:	6978      	ldr	r0, [r7, #20]
 800a24c:	f7ff fefb 	bl	800a046 <prvUnlockQueue>
	}
 800a250:	bf00      	nop
 800a252:	3718      	adds	r7, #24
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b08e      	sub	sp, #56	; 0x38
 800a25c:	af04      	add	r7, sp, #16
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	607a      	str	r2, [r7, #4]
 800a264:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10a      	bne.n	800a282 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a270:	f383 8811 	msr	BASEPRI, r3
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	623b      	str	r3, [r7, #32]
}
 800a27e:	bf00      	nop
 800a280:	e7fe      	b.n	800a280 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a284:	2b00      	cmp	r3, #0
 800a286:	d10a      	bne.n	800a29e <xTaskCreateStatic+0x46>
	__asm volatile
 800a288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28c:	f383 8811 	msr	BASEPRI, r3
 800a290:	f3bf 8f6f 	isb	sy
 800a294:	f3bf 8f4f 	dsb	sy
 800a298:	61fb      	str	r3, [r7, #28]
}
 800a29a:	bf00      	nop
 800a29c:	e7fe      	b.n	800a29c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a29e:	23a0      	movs	r3, #160	; 0xa0
 800a2a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	2ba0      	cmp	r3, #160	; 0xa0
 800a2a6:	d00a      	beq.n	800a2be <xTaskCreateStatic+0x66>
	__asm volatile
 800a2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ac:	f383 8811 	msr	BASEPRI, r3
 800a2b0:	f3bf 8f6f 	isb	sy
 800a2b4:	f3bf 8f4f 	dsb	sy
 800a2b8:	61bb      	str	r3, [r7, #24]
}
 800a2ba:	bf00      	nop
 800a2bc:	e7fe      	b.n	800a2bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a2be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d01e      	beq.n	800a304 <xTaskCreateStatic+0xac>
 800a2c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d01b      	beq.n	800a304 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d8:	2202      	movs	r2, #2
 800a2da:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a2de:	2300      	movs	r3, #0
 800a2e0:	9303      	str	r3, [sp, #12]
 800a2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e4:	9302      	str	r3, [sp, #8]
 800a2e6:	f107 0314 	add.w	r3, r7, #20
 800a2ea:	9301      	str	r3, [sp, #4]
 800a2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ee:	9300      	str	r3, [sp, #0]
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	68b9      	ldr	r1, [r7, #8]
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f000 f850 	bl	800a39c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2fe:	f000 f8eb 	bl	800a4d8 <prvAddNewTaskToReadyList>
 800a302:	e001      	b.n	800a308 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a304:	2300      	movs	r3, #0
 800a306:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a308:	697b      	ldr	r3, [r7, #20]
	}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3728      	adds	r7, #40	; 0x28
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a312:	b580      	push	{r7, lr}
 800a314:	b08c      	sub	sp, #48	; 0x30
 800a316:	af04      	add	r7, sp, #16
 800a318:	60f8      	str	r0, [r7, #12]
 800a31a:	60b9      	str	r1, [r7, #8]
 800a31c:	603b      	str	r3, [r7, #0]
 800a31e:	4613      	mov	r3, r2
 800a320:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a322:	88fb      	ldrh	r3, [r7, #6]
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	4618      	mov	r0, r3
 800a328:	f001 fd7e 	bl	800be28 <pvPortMalloc>
 800a32c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00e      	beq.n	800a352 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a334:	20a0      	movs	r0, #160	; 0xa0
 800a336:	f001 fd77 	bl	800be28 <pvPortMalloc>
 800a33a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d003      	beq.n	800a34a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	697a      	ldr	r2, [r7, #20]
 800a346:	631a      	str	r2, [r3, #48]	; 0x30
 800a348:	e005      	b.n	800a356 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a34a:	6978      	ldr	r0, [r7, #20]
 800a34c:	f001 fe38 	bl	800bfc0 <vPortFree>
 800a350:	e001      	b.n	800a356 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a352:	2300      	movs	r3, #0
 800a354:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d017      	beq.n	800a38c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	2200      	movs	r2, #0
 800a360:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a364:	88fa      	ldrh	r2, [r7, #6]
 800a366:	2300      	movs	r3, #0
 800a368:	9303      	str	r3, [sp, #12]
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	9302      	str	r3, [sp, #8]
 800a36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a370:	9301      	str	r3, [sp, #4]
 800a372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a374:	9300      	str	r3, [sp, #0]
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	68b9      	ldr	r1, [r7, #8]
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f000 f80e 	bl	800a39c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a380:	69f8      	ldr	r0, [r7, #28]
 800a382:	f000 f8a9 	bl	800a4d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a386:	2301      	movs	r3, #1
 800a388:	61bb      	str	r3, [r7, #24]
 800a38a:	e002      	b.n	800a392 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a38c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a390:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a392:	69bb      	ldr	r3, [r7, #24]
	}
 800a394:	4618      	mov	r0, r3
 800a396:	3720      	adds	r7, #32
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b088      	sub	sp, #32
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
 800a3a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	4413      	add	r3, r2
 800a3ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	f023 0307 	bic.w	r3, r3, #7
 800a3c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	f003 0307 	and.w	r3, r3, #7
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00a      	beq.n	800a3e4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d2:	f383 8811 	msr	BASEPRI, r3
 800a3d6:	f3bf 8f6f 	isb	sy
 800a3da:	f3bf 8f4f 	dsb	sy
 800a3de:	617b      	str	r3, [r7, #20]
}
 800a3e0:	bf00      	nop
 800a3e2:	e7fe      	b.n	800a3e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d01f      	beq.n	800a42a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	61fb      	str	r3, [r7, #28]
 800a3ee:	e012      	b.n	800a416 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	69fb      	ldr	r3, [r7, #28]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	7819      	ldrb	r1, [r3, #0]
 800a3f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	3334      	adds	r3, #52	; 0x34
 800a400:	460a      	mov	r2, r1
 800a402:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a404:	68ba      	ldr	r2, [r7, #8]
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	4413      	add	r3, r2
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d006      	beq.n	800a41e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	3301      	adds	r3, #1
 800a414:	61fb      	str	r3, [r7, #28]
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	2b0f      	cmp	r3, #15
 800a41a:	d9e9      	bls.n	800a3f0 <prvInitialiseNewTask+0x54>
 800a41c:	e000      	b.n	800a420 <prvInitialiseNewTask+0x84>
			{
				break;
 800a41e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a422:	2200      	movs	r2, #0
 800a424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a428:	e003      	b.n	800a432 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42c:	2200      	movs	r2, #0
 800a42e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a434:	2b06      	cmp	r3, #6
 800a436:	d901      	bls.n	800a43c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a438:	2306      	movs	r3, #6
 800a43a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a440:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a446:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44a:	2200      	movs	r2, #0
 800a44c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a450:	3304      	adds	r3, #4
 800a452:	4618      	mov	r0, r3
 800a454:	f7fe fe43 	bl	80090de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45a:	3318      	adds	r3, #24
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7fe fe3e 	bl	80090de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a466:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46a:	f1c3 0207 	rsb	r2, r3, #7
 800a46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a470:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a476:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47a:	2200      	movs	r2, #0
 800a47c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a482:	2200      	movs	r2, #0
 800a484:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48a:	334c      	adds	r3, #76	; 0x4c
 800a48c:	224c      	movs	r2, #76	; 0x4c
 800a48e:	2100      	movs	r1, #0
 800a490:	4618      	mov	r0, r3
 800a492:	f019 ff65 	bl	8024360 <memset>
 800a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a498:	4a0c      	ldr	r2, [pc, #48]	; (800a4cc <prvInitialiseNewTask+0x130>)
 800a49a:	651a      	str	r2, [r3, #80]	; 0x50
 800a49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49e:	4a0c      	ldr	r2, [pc, #48]	; (800a4d0 <prvInitialiseNewTask+0x134>)
 800a4a0:	655a      	str	r2, [r3, #84]	; 0x54
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a4:	4a0b      	ldr	r2, [pc, #44]	; (800a4d4 <prvInitialiseNewTask+0x138>)
 800a4a6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a4a8:	683a      	ldr	r2, [r7, #0]
 800a4aa:	68f9      	ldr	r1, [r7, #12]
 800a4ac:	69b8      	ldr	r0, [r7, #24]
 800a4ae:	f001 fa6b 	bl	800b988 <pxPortInitialiseStack>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d002      	beq.n	800a4c4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4c4:	bf00      	nop
 800a4c6:	3720      	adds	r7, #32
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	20013610 	.word	0x20013610
 800a4d0:	20013678 	.word	0x20013678
 800a4d4:	200136e0 	.word	0x200136e0

0800a4d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a4e0:	f001 fb80 	bl	800bbe4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a4e4:	4b2a      	ldr	r3, [pc, #168]	; (800a590 <prvAddNewTaskToReadyList+0xb8>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	4a29      	ldr	r2, [pc, #164]	; (800a590 <prvAddNewTaskToReadyList+0xb8>)
 800a4ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a4ee:	4b29      	ldr	r3, [pc, #164]	; (800a594 <prvAddNewTaskToReadyList+0xbc>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d109      	bne.n	800a50a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a4f6:	4a27      	ldr	r2, [pc, #156]	; (800a594 <prvAddNewTaskToReadyList+0xbc>)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a4fc:	4b24      	ldr	r3, [pc, #144]	; (800a590 <prvAddNewTaskToReadyList+0xb8>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2b01      	cmp	r3, #1
 800a502:	d110      	bne.n	800a526 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a504:	f000 fc2a 	bl	800ad5c <prvInitialiseTaskLists>
 800a508:	e00d      	b.n	800a526 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a50a:	4b23      	ldr	r3, [pc, #140]	; (800a598 <prvAddNewTaskToReadyList+0xc0>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d109      	bne.n	800a526 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a512:	4b20      	ldr	r3, [pc, #128]	; (800a594 <prvAddNewTaskToReadyList+0xbc>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d802      	bhi.n	800a526 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a520:	4a1c      	ldr	r2, [pc, #112]	; (800a594 <prvAddNewTaskToReadyList+0xbc>)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a526:	4b1d      	ldr	r3, [pc, #116]	; (800a59c <prvAddNewTaskToReadyList+0xc4>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	3301      	adds	r3, #1
 800a52c:	4a1b      	ldr	r2, [pc, #108]	; (800a59c <prvAddNewTaskToReadyList+0xc4>)
 800a52e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a534:	2201      	movs	r2, #1
 800a536:	409a      	lsls	r2, r3
 800a538:	4b19      	ldr	r3, [pc, #100]	; (800a5a0 <prvAddNewTaskToReadyList+0xc8>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4313      	orrs	r3, r2
 800a53e:	4a18      	ldr	r2, [pc, #96]	; (800a5a0 <prvAddNewTaskToReadyList+0xc8>)
 800a540:	6013      	str	r3, [r2, #0]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a546:	4613      	mov	r3, r2
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	4413      	add	r3, r2
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	4a15      	ldr	r2, [pc, #84]	; (800a5a4 <prvAddNewTaskToReadyList+0xcc>)
 800a550:	441a      	add	r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	3304      	adds	r3, #4
 800a556:	4619      	mov	r1, r3
 800a558:	4610      	mov	r0, r2
 800a55a:	f7fe fdcd 	bl	80090f8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a55e:	f001 fb71 	bl	800bc44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a562:	4b0d      	ldr	r3, [pc, #52]	; (800a598 <prvAddNewTaskToReadyList+0xc0>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00e      	beq.n	800a588 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a56a:	4b0a      	ldr	r3, [pc, #40]	; (800a594 <prvAddNewTaskToReadyList+0xbc>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a574:	429a      	cmp	r2, r3
 800a576:	d207      	bcs.n	800a588 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a578:	4b0b      	ldr	r3, [pc, #44]	; (800a5a8 <prvAddNewTaskToReadyList+0xd0>)
 800a57a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a57e:	601a      	str	r2, [r3, #0]
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a588:	bf00      	nop
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	200067d4 	.word	0x200067d4
 800a594:	200066d4 	.word	0x200066d4
 800a598:	200067e0 	.word	0x200067e0
 800a59c:	200067f0 	.word	0x200067f0
 800a5a0:	200067dc 	.word	0x200067dc
 800a5a4:	200066d8 	.word	0x200066d8
 800a5a8:	e000ed04 	.word	0xe000ed04

0800a5ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d017      	beq.n	800a5ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a5be:	4b13      	ldr	r3, [pc, #76]	; (800a60c <vTaskDelay+0x60>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00a      	beq.n	800a5dc <vTaskDelay+0x30>
	__asm volatile
 800a5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ca:	f383 8811 	msr	BASEPRI, r3
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	60bb      	str	r3, [r7, #8]
}
 800a5d8:	bf00      	nop
 800a5da:	e7fe      	b.n	800a5da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a5dc:	f000 f88a 	bl	800a6f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a5e0:	2100      	movs	r1, #0
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 fe38 	bl	800b258 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a5e8:	f000 f892 	bl	800a710 <xTaskResumeAll>
 800a5ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d107      	bne.n	800a604 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a5f4:	4b06      	ldr	r3, [pc, #24]	; (800a610 <vTaskDelay+0x64>)
 800a5f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5fa:	601a      	str	r2, [r3, #0]
 800a5fc:	f3bf 8f4f 	dsb	sy
 800a600:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a604:	bf00      	nop
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	200067fc 	.word	0x200067fc
 800a610:	e000ed04 	.word	0xe000ed04

0800a614 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b08a      	sub	sp, #40	; 0x28
 800a618:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a61a:	2300      	movs	r3, #0
 800a61c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a61e:	2300      	movs	r3, #0
 800a620:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a622:	463a      	mov	r2, r7
 800a624:	1d39      	adds	r1, r7, #4
 800a626:	f107 0308 	add.w	r3, r7, #8
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7f7 fe42 	bl	80022b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a630:	6839      	ldr	r1, [r7, #0]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	9202      	str	r2, [sp, #8]
 800a638:	9301      	str	r3, [sp, #4]
 800a63a:	2300      	movs	r3, #0
 800a63c:	9300      	str	r3, [sp, #0]
 800a63e:	2300      	movs	r3, #0
 800a640:	460a      	mov	r2, r1
 800a642:	4924      	ldr	r1, [pc, #144]	; (800a6d4 <vTaskStartScheduler+0xc0>)
 800a644:	4824      	ldr	r0, [pc, #144]	; (800a6d8 <vTaskStartScheduler+0xc4>)
 800a646:	f7ff fe07 	bl	800a258 <xTaskCreateStatic>
 800a64a:	4603      	mov	r3, r0
 800a64c:	4a23      	ldr	r2, [pc, #140]	; (800a6dc <vTaskStartScheduler+0xc8>)
 800a64e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a650:	4b22      	ldr	r3, [pc, #136]	; (800a6dc <vTaskStartScheduler+0xc8>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d002      	beq.n	800a65e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a658:	2301      	movs	r3, #1
 800a65a:	617b      	str	r3, [r7, #20]
 800a65c:	e001      	b.n	800a662 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a65e:	2300      	movs	r3, #0
 800a660:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	2b01      	cmp	r3, #1
 800a666:	d102      	bne.n	800a66e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a668:	f000 fe5c 	bl	800b324 <xTimerCreateTimerTask>
 800a66c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	2b01      	cmp	r3, #1
 800a672:	d11b      	bne.n	800a6ac <vTaskStartScheduler+0x98>
	__asm volatile
 800a674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	613b      	str	r3, [r7, #16]
}
 800a686:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a688:	4b15      	ldr	r3, [pc, #84]	; (800a6e0 <vTaskStartScheduler+0xcc>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	334c      	adds	r3, #76	; 0x4c
 800a68e:	4a15      	ldr	r2, [pc, #84]	; (800a6e4 <vTaskStartScheduler+0xd0>)
 800a690:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a692:	4b15      	ldr	r3, [pc, #84]	; (800a6e8 <vTaskStartScheduler+0xd4>)
 800a694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a698:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a69a:	4b14      	ldr	r3, [pc, #80]	; (800a6ec <vTaskStartScheduler+0xd8>)
 800a69c:	2201      	movs	r2, #1
 800a69e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a6a0:	4b13      	ldr	r3, [pc, #76]	; (800a6f0 <vTaskStartScheduler+0xdc>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a6a6:	f001 f9fb 	bl	800baa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a6aa:	e00e      	b.n	800a6ca <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6b2:	d10a      	bne.n	800a6ca <vTaskStartScheduler+0xb6>
	__asm volatile
 800a6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b8:	f383 8811 	msr	BASEPRI, r3
 800a6bc:	f3bf 8f6f 	isb	sy
 800a6c0:	f3bf 8f4f 	dsb	sy
 800a6c4:	60fb      	str	r3, [r7, #12]
}
 800a6c6:	bf00      	nop
 800a6c8:	e7fe      	b.n	800a6c8 <vTaskStartScheduler+0xb4>
}
 800a6ca:	bf00      	nop
 800a6cc:	3718      	adds	r7, #24
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	08026de0 	.word	0x08026de0
 800a6d8:	0800ad2d 	.word	0x0800ad2d
 800a6dc:	200067f8 	.word	0x200067f8
 800a6e0:	200066d4 	.word	0x200066d4
 800a6e4:	20000098 	.word	0x20000098
 800a6e8:	200067f4 	.word	0x200067f4
 800a6ec:	200067e0 	.word	0x200067e0
 800a6f0:	200067d8 	.word	0x200067d8

0800a6f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a6f8:	4b04      	ldr	r3, [pc, #16]	; (800a70c <vTaskSuspendAll+0x18>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	4a03      	ldr	r2, [pc, #12]	; (800a70c <vTaskSuspendAll+0x18>)
 800a700:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a702:	bf00      	nop
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr
 800a70c:	200067fc 	.word	0x200067fc

0800a710 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a716:	2300      	movs	r3, #0
 800a718:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a71a:	2300      	movs	r3, #0
 800a71c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a71e:	4b41      	ldr	r3, [pc, #260]	; (800a824 <xTaskResumeAll+0x114>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d10a      	bne.n	800a73c <xTaskResumeAll+0x2c>
	__asm volatile
 800a726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72a:	f383 8811 	msr	BASEPRI, r3
 800a72e:	f3bf 8f6f 	isb	sy
 800a732:	f3bf 8f4f 	dsb	sy
 800a736:	603b      	str	r3, [r7, #0]
}
 800a738:	bf00      	nop
 800a73a:	e7fe      	b.n	800a73a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a73c:	f001 fa52 	bl	800bbe4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a740:	4b38      	ldr	r3, [pc, #224]	; (800a824 <xTaskResumeAll+0x114>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	3b01      	subs	r3, #1
 800a746:	4a37      	ldr	r2, [pc, #220]	; (800a824 <xTaskResumeAll+0x114>)
 800a748:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a74a:	4b36      	ldr	r3, [pc, #216]	; (800a824 <xTaskResumeAll+0x114>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d161      	bne.n	800a816 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a752:	4b35      	ldr	r3, [pc, #212]	; (800a828 <xTaskResumeAll+0x118>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d05d      	beq.n	800a816 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a75a:	e02e      	b.n	800a7ba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a75c:	4b33      	ldr	r3, [pc, #204]	; (800a82c <xTaskResumeAll+0x11c>)
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	3318      	adds	r3, #24
 800a768:	4618      	mov	r0, r3
 800a76a:	f7fe fd22 	bl	80091b2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	3304      	adds	r3, #4
 800a772:	4618      	mov	r0, r3
 800a774:	f7fe fd1d 	bl	80091b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77c:	2201      	movs	r2, #1
 800a77e:	409a      	lsls	r2, r3
 800a780:	4b2b      	ldr	r3, [pc, #172]	; (800a830 <xTaskResumeAll+0x120>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4313      	orrs	r3, r2
 800a786:	4a2a      	ldr	r2, [pc, #168]	; (800a830 <xTaskResumeAll+0x120>)
 800a788:	6013      	str	r3, [r2, #0]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a78e:	4613      	mov	r3, r2
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	4413      	add	r3, r2
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	4a27      	ldr	r2, [pc, #156]	; (800a834 <xTaskResumeAll+0x124>)
 800a798:	441a      	add	r2, r3
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	3304      	adds	r3, #4
 800a79e:	4619      	mov	r1, r3
 800a7a0:	4610      	mov	r0, r2
 800a7a2:	f7fe fca9 	bl	80090f8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7aa:	4b23      	ldr	r3, [pc, #140]	; (800a838 <xTaskResumeAll+0x128>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d302      	bcc.n	800a7ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a7b4:	4b21      	ldr	r3, [pc, #132]	; (800a83c <xTaskResumeAll+0x12c>)
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a7ba:	4b1c      	ldr	r3, [pc, #112]	; (800a82c <xTaskResumeAll+0x11c>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d1cc      	bne.n	800a75c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d001      	beq.n	800a7cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a7c8:	f000 fb6a 	bl	800aea0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a7cc:	4b1c      	ldr	r3, [pc, #112]	; (800a840 <xTaskResumeAll+0x130>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d010      	beq.n	800a7fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a7d8:	f000 f858 	bl	800a88c <xTaskIncrementTick>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d002      	beq.n	800a7e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a7e2:	4b16      	ldr	r3, [pc, #88]	; (800a83c <xTaskResumeAll+0x12c>)
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	3b01      	subs	r3, #1
 800a7ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d1f1      	bne.n	800a7d8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a7f4:	4b12      	ldr	r3, [pc, #72]	; (800a840 <xTaskResumeAll+0x130>)
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a7fa:	4b10      	ldr	r3, [pc, #64]	; (800a83c <xTaskResumeAll+0x12c>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d009      	beq.n	800a816 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a802:	2301      	movs	r3, #1
 800a804:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a806:	4b0f      	ldr	r3, [pc, #60]	; (800a844 <xTaskResumeAll+0x134>)
 800a808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a80c:	601a      	str	r2, [r3, #0]
 800a80e:	f3bf 8f4f 	dsb	sy
 800a812:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a816:	f001 fa15 	bl	800bc44 <vPortExitCritical>

	return xAlreadyYielded;
 800a81a:	68bb      	ldr	r3, [r7, #8]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3710      	adds	r7, #16
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	200067fc 	.word	0x200067fc
 800a828:	200067d4 	.word	0x200067d4
 800a82c:	20006794 	.word	0x20006794
 800a830:	200067dc 	.word	0x200067dc
 800a834:	200066d8 	.word	0x200066d8
 800a838:	200066d4 	.word	0x200066d4
 800a83c:	200067e8 	.word	0x200067e8
 800a840:	200067e4 	.word	0x200067e4
 800a844:	e000ed04 	.word	0xe000ed04

0800a848 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a84e:	4b05      	ldr	r3, [pc, #20]	; (800a864 <xTaskGetTickCount+0x1c>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a854:	687b      	ldr	r3, [r7, #4]
}
 800a856:	4618      	mov	r0, r3
 800a858:	370c      	adds	r7, #12
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	200067d8 	.word	0x200067d8

0800a868 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a86e:	f001 fa9b 	bl	800bda8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a872:	2300      	movs	r3, #0
 800a874:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a876:	4b04      	ldr	r3, [pc, #16]	; (800a888 <xTaskGetTickCountFromISR+0x20>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a87c:	683b      	ldr	r3, [r7, #0]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	200067d8 	.word	0x200067d8

0800a88c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a892:	2300      	movs	r3, #0
 800a894:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a896:	4b4e      	ldr	r3, [pc, #312]	; (800a9d0 <xTaskIncrementTick+0x144>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f040 808e 	bne.w	800a9bc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a8a0:	4b4c      	ldr	r3, [pc, #304]	; (800a9d4 <xTaskIncrementTick+0x148>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a8a8:	4a4a      	ldr	r2, [pc, #296]	; (800a9d4 <xTaskIncrementTick+0x148>)
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d120      	bne.n	800a8f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a8b4:	4b48      	ldr	r3, [pc, #288]	; (800a9d8 <xTaskIncrementTick+0x14c>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d00a      	beq.n	800a8d4 <xTaskIncrementTick+0x48>
	__asm volatile
 800a8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	603b      	str	r3, [r7, #0]
}
 800a8d0:	bf00      	nop
 800a8d2:	e7fe      	b.n	800a8d2 <xTaskIncrementTick+0x46>
 800a8d4:	4b40      	ldr	r3, [pc, #256]	; (800a9d8 <xTaskIncrementTick+0x14c>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	60fb      	str	r3, [r7, #12]
 800a8da:	4b40      	ldr	r3, [pc, #256]	; (800a9dc <xTaskIncrementTick+0x150>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a3e      	ldr	r2, [pc, #248]	; (800a9d8 <xTaskIncrementTick+0x14c>)
 800a8e0:	6013      	str	r3, [r2, #0]
 800a8e2:	4a3e      	ldr	r2, [pc, #248]	; (800a9dc <xTaskIncrementTick+0x150>)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6013      	str	r3, [r2, #0]
 800a8e8:	4b3d      	ldr	r3, [pc, #244]	; (800a9e0 <xTaskIncrementTick+0x154>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	4a3c      	ldr	r2, [pc, #240]	; (800a9e0 <xTaskIncrementTick+0x154>)
 800a8f0:	6013      	str	r3, [r2, #0]
 800a8f2:	f000 fad5 	bl	800aea0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a8f6:	4b3b      	ldr	r3, [pc, #236]	; (800a9e4 <xTaskIncrementTick+0x158>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	693a      	ldr	r2, [r7, #16]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d348      	bcc.n	800a992 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a900:	4b35      	ldr	r3, [pc, #212]	; (800a9d8 <xTaskIncrementTick+0x14c>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d104      	bne.n	800a914 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a90a:	4b36      	ldr	r3, [pc, #216]	; (800a9e4 <xTaskIncrementTick+0x158>)
 800a90c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a910:	601a      	str	r2, [r3, #0]
					break;
 800a912:	e03e      	b.n	800a992 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a914:	4b30      	ldr	r3, [pc, #192]	; (800a9d8 <xTaskIncrementTick+0x14c>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a924:	693a      	ldr	r2, [r7, #16]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d203      	bcs.n	800a934 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a92c:	4a2d      	ldr	r2, [pc, #180]	; (800a9e4 <xTaskIncrementTick+0x158>)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a932:	e02e      	b.n	800a992 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	3304      	adds	r3, #4
 800a938:	4618      	mov	r0, r3
 800a93a:	f7fe fc3a 	bl	80091b2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a942:	2b00      	cmp	r3, #0
 800a944:	d004      	beq.n	800a950 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	3318      	adds	r3, #24
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7fe fc31 	bl	80091b2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a954:	2201      	movs	r2, #1
 800a956:	409a      	lsls	r2, r3
 800a958:	4b23      	ldr	r3, [pc, #140]	; (800a9e8 <xTaskIncrementTick+0x15c>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	4a22      	ldr	r2, [pc, #136]	; (800a9e8 <xTaskIncrementTick+0x15c>)
 800a960:	6013      	str	r3, [r2, #0]
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a966:	4613      	mov	r3, r2
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	4413      	add	r3, r2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	4a1f      	ldr	r2, [pc, #124]	; (800a9ec <xTaskIncrementTick+0x160>)
 800a970:	441a      	add	r2, r3
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	3304      	adds	r3, #4
 800a976:	4619      	mov	r1, r3
 800a978:	4610      	mov	r0, r2
 800a97a:	f7fe fbbd 	bl	80090f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a982:	4b1b      	ldr	r3, [pc, #108]	; (800a9f0 <xTaskIncrementTick+0x164>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a988:	429a      	cmp	r2, r3
 800a98a:	d3b9      	bcc.n	800a900 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a98c:	2301      	movs	r3, #1
 800a98e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a990:	e7b6      	b.n	800a900 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a992:	4b17      	ldr	r3, [pc, #92]	; (800a9f0 <xTaskIncrementTick+0x164>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a998:	4914      	ldr	r1, [pc, #80]	; (800a9ec <xTaskIncrementTick+0x160>)
 800a99a:	4613      	mov	r3, r2
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	4413      	add	r3, r2
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	440b      	add	r3, r1
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d901      	bls.n	800a9ae <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a9ae:	4b11      	ldr	r3, [pc, #68]	; (800a9f4 <xTaskIncrementTick+0x168>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d007      	beq.n	800a9c6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	617b      	str	r3, [r7, #20]
 800a9ba:	e004      	b.n	800a9c6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a9bc:	4b0e      	ldr	r3, [pc, #56]	; (800a9f8 <xTaskIncrementTick+0x16c>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	4a0d      	ldr	r2, [pc, #52]	; (800a9f8 <xTaskIncrementTick+0x16c>)
 800a9c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a9c6:	697b      	ldr	r3, [r7, #20]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3718      	adds	r7, #24
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	200067fc 	.word	0x200067fc
 800a9d4:	200067d8 	.word	0x200067d8
 800a9d8:	2000678c 	.word	0x2000678c
 800a9dc:	20006790 	.word	0x20006790
 800a9e0:	200067ec 	.word	0x200067ec
 800a9e4:	200067f4 	.word	0x200067f4
 800a9e8:	200067dc 	.word	0x200067dc
 800a9ec:	200066d8 	.word	0x200066d8
 800a9f0:	200066d4 	.word	0x200066d4
 800a9f4:	200067e8 	.word	0x200067e8
 800a9f8:	200067e4 	.word	0x200067e4

0800a9fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b087      	sub	sp, #28
 800aa00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa02:	4b29      	ldr	r3, [pc, #164]	; (800aaa8 <vTaskSwitchContext+0xac>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d003      	beq.n	800aa12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aa0a:	4b28      	ldr	r3, [pc, #160]	; (800aaac <vTaskSwitchContext+0xb0>)
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aa10:	e044      	b.n	800aa9c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800aa12:	4b26      	ldr	r3, [pc, #152]	; (800aaac <vTaskSwitchContext+0xb0>)
 800aa14:	2200      	movs	r2, #0
 800aa16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa18:	4b25      	ldr	r3, [pc, #148]	; (800aab0 <vTaskSwitchContext+0xb4>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	fab3 f383 	clz	r3, r3
 800aa24:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800aa26:	7afb      	ldrb	r3, [r7, #11]
 800aa28:	f1c3 031f 	rsb	r3, r3, #31
 800aa2c:	617b      	str	r3, [r7, #20]
 800aa2e:	4921      	ldr	r1, [pc, #132]	; (800aab4 <vTaskSwitchContext+0xb8>)
 800aa30:	697a      	ldr	r2, [r7, #20]
 800aa32:	4613      	mov	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	4413      	add	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	440b      	add	r3, r1
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d10a      	bne.n	800aa58 <vTaskSwitchContext+0x5c>
	__asm volatile
 800aa42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa46:	f383 8811 	msr	BASEPRI, r3
 800aa4a:	f3bf 8f6f 	isb	sy
 800aa4e:	f3bf 8f4f 	dsb	sy
 800aa52:	607b      	str	r3, [r7, #4]
}
 800aa54:	bf00      	nop
 800aa56:	e7fe      	b.n	800aa56 <vTaskSwitchContext+0x5a>
 800aa58:	697a      	ldr	r2, [r7, #20]
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	4413      	add	r3, r2
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	4a14      	ldr	r2, [pc, #80]	; (800aab4 <vTaskSwitchContext+0xb8>)
 800aa64:	4413      	add	r3, r2
 800aa66:	613b      	str	r3, [r7, #16]
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	685a      	ldr	r2, [r3, #4]
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	605a      	str	r2, [r3, #4]
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	685a      	ldr	r2, [r3, #4]
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	3308      	adds	r3, #8
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d104      	bne.n	800aa88 <vTaskSwitchContext+0x8c>
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	685a      	ldr	r2, [r3, #4]
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	605a      	str	r2, [r3, #4]
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	4a0a      	ldr	r2, [pc, #40]	; (800aab8 <vTaskSwitchContext+0xbc>)
 800aa90:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa92:	4b09      	ldr	r3, [pc, #36]	; (800aab8 <vTaskSwitchContext+0xbc>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	334c      	adds	r3, #76	; 0x4c
 800aa98:	4a08      	ldr	r2, [pc, #32]	; (800aabc <vTaskSwitchContext+0xc0>)
 800aa9a:	6013      	str	r3, [r2, #0]
}
 800aa9c:	bf00      	nop
 800aa9e:	371c      	adds	r7, #28
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	200067fc 	.word	0x200067fc
 800aaac:	200067e8 	.word	0x200067e8
 800aab0:	200067dc 	.word	0x200067dc
 800aab4:	200066d8 	.word	0x200066d8
 800aab8:	200066d4 	.word	0x200066d4
 800aabc:	20000098 	.word	0x20000098

0800aac0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d10a      	bne.n	800aae6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800aad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	60fb      	str	r3, [r7, #12]
}
 800aae2:	bf00      	nop
 800aae4:	e7fe      	b.n	800aae4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aae6:	4b07      	ldr	r3, [pc, #28]	; (800ab04 <vTaskPlaceOnEventList+0x44>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	3318      	adds	r3, #24
 800aaec:	4619      	mov	r1, r3
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f7fe fb26 	bl	8009140 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	6838      	ldr	r0, [r7, #0]
 800aaf8:	f000 fbae 	bl	800b258 <prvAddCurrentTaskToDelayedList>
}
 800aafc:	bf00      	nop
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	200066d4 	.word	0x200066d4

0800ab08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b086      	sub	sp, #24
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d10a      	bne.n	800ab30 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ab1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1e:	f383 8811 	msr	BASEPRI, r3
 800ab22:	f3bf 8f6f 	isb	sy
 800ab26:	f3bf 8f4f 	dsb	sy
 800ab2a:	617b      	str	r3, [r7, #20]
}
 800ab2c:	bf00      	nop
 800ab2e:	e7fe      	b.n	800ab2e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab30:	4b0a      	ldr	r3, [pc, #40]	; (800ab5c <vTaskPlaceOnEventListRestricted+0x54>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	3318      	adds	r3, #24
 800ab36:	4619      	mov	r1, r3
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	f7fe fadd 	bl	80090f8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d002      	beq.n	800ab4a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ab44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab48:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ab4a:	6879      	ldr	r1, [r7, #4]
 800ab4c:	68b8      	ldr	r0, [r7, #8]
 800ab4e:	f000 fb83 	bl	800b258 <prvAddCurrentTaskToDelayedList>
	}
 800ab52:	bf00      	nop
 800ab54:	3718      	adds	r7, #24
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	200066d4 	.word	0x200066d4

0800ab60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d10a      	bne.n	800ab8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ab76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7a:	f383 8811 	msr	BASEPRI, r3
 800ab7e:	f3bf 8f6f 	isb	sy
 800ab82:	f3bf 8f4f 	dsb	sy
 800ab86:	60fb      	str	r3, [r7, #12]
}
 800ab88:	bf00      	nop
 800ab8a:	e7fe      	b.n	800ab8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	3318      	adds	r3, #24
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7fe fb0e 	bl	80091b2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab96:	4b1d      	ldr	r3, [pc, #116]	; (800ac0c <xTaskRemoveFromEventList+0xac>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d11c      	bne.n	800abd8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	3304      	adds	r3, #4
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7fe fb05 	bl	80091b2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abac:	2201      	movs	r2, #1
 800abae:	409a      	lsls	r2, r3
 800abb0:	4b17      	ldr	r3, [pc, #92]	; (800ac10 <xTaskRemoveFromEventList+0xb0>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	4a16      	ldr	r2, [pc, #88]	; (800ac10 <xTaskRemoveFromEventList+0xb0>)
 800abb8:	6013      	str	r3, [r2, #0]
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abbe:	4613      	mov	r3, r2
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	4413      	add	r3, r2
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	4a13      	ldr	r2, [pc, #76]	; (800ac14 <xTaskRemoveFromEventList+0xb4>)
 800abc8:	441a      	add	r2, r3
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	3304      	adds	r3, #4
 800abce:	4619      	mov	r1, r3
 800abd0:	4610      	mov	r0, r2
 800abd2:	f7fe fa91 	bl	80090f8 <vListInsertEnd>
 800abd6:	e005      	b.n	800abe4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	3318      	adds	r3, #24
 800abdc:	4619      	mov	r1, r3
 800abde:	480e      	ldr	r0, [pc, #56]	; (800ac18 <xTaskRemoveFromEventList+0xb8>)
 800abe0:	f7fe fa8a 	bl	80090f8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abe8:	4b0c      	ldr	r3, [pc, #48]	; (800ac1c <xTaskRemoveFromEventList+0xbc>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abee:	429a      	cmp	r2, r3
 800abf0:	d905      	bls.n	800abfe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800abf2:	2301      	movs	r3, #1
 800abf4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800abf6:	4b0a      	ldr	r3, [pc, #40]	; (800ac20 <xTaskRemoveFromEventList+0xc0>)
 800abf8:	2201      	movs	r2, #1
 800abfa:	601a      	str	r2, [r3, #0]
 800abfc:	e001      	b.n	800ac02 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800abfe:	2300      	movs	r3, #0
 800ac00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ac02:	697b      	ldr	r3, [r7, #20]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3718      	adds	r7, #24
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	200067fc 	.word	0x200067fc
 800ac10:	200067dc 	.word	0x200067dc
 800ac14:	200066d8 	.word	0x200066d8
 800ac18:	20006794 	.word	0x20006794
 800ac1c:	200066d4 	.word	0x200066d4
 800ac20:	200067e8 	.word	0x200067e8

0800ac24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ac2c:	4b06      	ldr	r3, [pc, #24]	; (800ac48 <vTaskInternalSetTimeOutState+0x24>)
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ac34:	4b05      	ldr	r3, [pc, #20]	; (800ac4c <vTaskInternalSetTimeOutState+0x28>)
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	605a      	str	r2, [r3, #4]
}
 800ac3c:	bf00      	nop
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr
 800ac48:	200067ec 	.word	0x200067ec
 800ac4c:	200067d8 	.word	0x200067d8

0800ac50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b088      	sub	sp, #32
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d10a      	bne.n	800ac76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ac60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	613b      	str	r3, [r7, #16]
}
 800ac72:	bf00      	nop
 800ac74:	e7fe      	b.n	800ac74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d10a      	bne.n	800ac92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ac7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac80:	f383 8811 	msr	BASEPRI, r3
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	60fb      	str	r3, [r7, #12]
}
 800ac8e:	bf00      	nop
 800ac90:	e7fe      	b.n	800ac90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ac92:	f000 ffa7 	bl	800bbe4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ac96:	4b1d      	ldr	r3, [pc, #116]	; (800ad0c <xTaskCheckForTimeOut+0xbc>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	69ba      	ldr	r2, [r7, #24]
 800aca2:	1ad3      	subs	r3, r2, r3
 800aca4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acae:	d102      	bne.n	800acb6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800acb0:	2300      	movs	r3, #0
 800acb2:	61fb      	str	r3, [r7, #28]
 800acb4:	e023      	b.n	800acfe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	4b15      	ldr	r3, [pc, #84]	; (800ad10 <xTaskCheckForTimeOut+0xc0>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d007      	beq.n	800acd2 <xTaskCheckForTimeOut+0x82>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	69ba      	ldr	r2, [r7, #24]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d302      	bcc.n	800acd2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800accc:	2301      	movs	r3, #1
 800acce:	61fb      	str	r3, [r7, #28]
 800acd0:	e015      	b.n	800acfe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	697a      	ldr	r2, [r7, #20]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d20b      	bcs.n	800acf4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	681a      	ldr	r2, [r3, #0]
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	1ad2      	subs	r2, r2, r3
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f7ff ff9b 	bl	800ac24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800acee:	2300      	movs	r3, #0
 800acf0:	61fb      	str	r3, [r7, #28]
 800acf2:	e004      	b.n	800acfe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	2200      	movs	r2, #0
 800acf8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800acfa:	2301      	movs	r3, #1
 800acfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800acfe:	f000 ffa1 	bl	800bc44 <vPortExitCritical>

	return xReturn;
 800ad02:	69fb      	ldr	r3, [r7, #28]
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3720      	adds	r7, #32
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	200067d8 	.word	0x200067d8
 800ad10:	200067ec 	.word	0x200067ec

0800ad14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ad14:	b480      	push	{r7}
 800ad16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ad18:	4b03      	ldr	r3, [pc, #12]	; (800ad28 <vTaskMissedYield+0x14>)
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	601a      	str	r2, [r3, #0]
}
 800ad1e:	bf00      	nop
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr
 800ad28:	200067e8 	.word	0x200067e8

0800ad2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ad34:	f000 f852 	bl	800addc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ad38:	4b06      	ldr	r3, [pc, #24]	; (800ad54 <prvIdleTask+0x28>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d9f9      	bls.n	800ad34 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ad40:	4b05      	ldr	r3, [pc, #20]	; (800ad58 <prvIdleTask+0x2c>)
 800ad42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad46:	601a      	str	r2, [r3, #0]
 800ad48:	f3bf 8f4f 	dsb	sy
 800ad4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ad50:	e7f0      	b.n	800ad34 <prvIdleTask+0x8>
 800ad52:	bf00      	nop
 800ad54:	200066d8 	.word	0x200066d8
 800ad58:	e000ed04 	.word	0xe000ed04

0800ad5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad62:	2300      	movs	r3, #0
 800ad64:	607b      	str	r3, [r7, #4]
 800ad66:	e00c      	b.n	800ad82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	4613      	mov	r3, r2
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	4413      	add	r3, r2
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	4a12      	ldr	r2, [pc, #72]	; (800adbc <prvInitialiseTaskLists+0x60>)
 800ad74:	4413      	add	r3, r2
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7fe f991 	bl	800909e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	607b      	str	r3, [r7, #4]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2b06      	cmp	r3, #6
 800ad86:	d9ef      	bls.n	800ad68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ad88:	480d      	ldr	r0, [pc, #52]	; (800adc0 <prvInitialiseTaskLists+0x64>)
 800ad8a:	f7fe f988 	bl	800909e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ad8e:	480d      	ldr	r0, [pc, #52]	; (800adc4 <prvInitialiseTaskLists+0x68>)
 800ad90:	f7fe f985 	bl	800909e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ad94:	480c      	ldr	r0, [pc, #48]	; (800adc8 <prvInitialiseTaskLists+0x6c>)
 800ad96:	f7fe f982 	bl	800909e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ad9a:	480c      	ldr	r0, [pc, #48]	; (800adcc <prvInitialiseTaskLists+0x70>)
 800ad9c:	f7fe f97f 	bl	800909e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ada0:	480b      	ldr	r0, [pc, #44]	; (800add0 <prvInitialiseTaskLists+0x74>)
 800ada2:	f7fe f97c 	bl	800909e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ada6:	4b0b      	ldr	r3, [pc, #44]	; (800add4 <prvInitialiseTaskLists+0x78>)
 800ada8:	4a05      	ldr	r2, [pc, #20]	; (800adc0 <prvInitialiseTaskLists+0x64>)
 800adaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800adac:	4b0a      	ldr	r3, [pc, #40]	; (800add8 <prvInitialiseTaskLists+0x7c>)
 800adae:	4a05      	ldr	r2, [pc, #20]	; (800adc4 <prvInitialiseTaskLists+0x68>)
 800adb0:	601a      	str	r2, [r3, #0]
}
 800adb2:	bf00      	nop
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	200066d8 	.word	0x200066d8
 800adc0:	20006764 	.word	0x20006764
 800adc4:	20006778 	.word	0x20006778
 800adc8:	20006794 	.word	0x20006794
 800adcc:	200067a8 	.word	0x200067a8
 800add0:	200067c0 	.word	0x200067c0
 800add4:	2000678c 	.word	0x2000678c
 800add8:	20006790 	.word	0x20006790

0800addc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ade2:	e019      	b.n	800ae18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ade4:	f000 fefe 	bl	800bbe4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ade8:	4b10      	ldr	r3, [pc, #64]	; (800ae2c <prvCheckTasksWaitingTermination+0x50>)
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	3304      	adds	r3, #4
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7fe f9dc 	bl	80091b2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800adfa:	4b0d      	ldr	r3, [pc, #52]	; (800ae30 <prvCheckTasksWaitingTermination+0x54>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	3b01      	subs	r3, #1
 800ae00:	4a0b      	ldr	r2, [pc, #44]	; (800ae30 <prvCheckTasksWaitingTermination+0x54>)
 800ae02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ae04:	4b0b      	ldr	r3, [pc, #44]	; (800ae34 <prvCheckTasksWaitingTermination+0x58>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	3b01      	subs	r3, #1
 800ae0a:	4a0a      	ldr	r2, [pc, #40]	; (800ae34 <prvCheckTasksWaitingTermination+0x58>)
 800ae0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ae0e:	f000 ff19 	bl	800bc44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 f810 	bl	800ae38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae18:	4b06      	ldr	r3, [pc, #24]	; (800ae34 <prvCheckTasksWaitingTermination+0x58>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d1e1      	bne.n	800ade4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ae20:	bf00      	nop
 800ae22:	bf00      	nop
 800ae24:	3708      	adds	r7, #8
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	200067a8 	.word	0x200067a8
 800ae30:	200067d4 	.word	0x200067d4
 800ae34:	200067bc 	.word	0x200067bc

0800ae38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	334c      	adds	r3, #76	; 0x4c
 800ae44:	4618      	mov	r0, r3
 800ae46:	f019 fae5 	bl	8024414 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d108      	bne.n	800ae66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f001 f8b1 	bl	800bfc0 <vPortFree>
				vPortFree( pxTCB );
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f001 f8ae 	bl	800bfc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ae64:	e018      	b.n	800ae98 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d103      	bne.n	800ae78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f001 f8a5 	bl	800bfc0 <vPortFree>
	}
 800ae76:	e00f      	b.n	800ae98 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d00a      	beq.n	800ae98 <prvDeleteTCB+0x60>
	__asm volatile
 800ae82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae86:	f383 8811 	msr	BASEPRI, r3
 800ae8a:	f3bf 8f6f 	isb	sy
 800ae8e:	f3bf 8f4f 	dsb	sy
 800ae92:	60fb      	str	r3, [r7, #12]
}
 800ae94:	bf00      	nop
 800ae96:	e7fe      	b.n	800ae96 <prvDeleteTCB+0x5e>
	}
 800ae98:	bf00      	nop
 800ae9a:	3710      	adds	r7, #16
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aea6:	4b0c      	ldr	r3, [pc, #48]	; (800aed8 <prvResetNextTaskUnblockTime+0x38>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d104      	bne.n	800aeba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aeb0:	4b0a      	ldr	r3, [pc, #40]	; (800aedc <prvResetNextTaskUnblockTime+0x3c>)
 800aeb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aeb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aeb8:	e008      	b.n	800aecc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeba:	4b07      	ldr	r3, [pc, #28]	; (800aed8 <prvResetNextTaskUnblockTime+0x38>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	4a04      	ldr	r2, [pc, #16]	; (800aedc <prvResetNextTaskUnblockTime+0x3c>)
 800aeca:	6013      	str	r3, [r2, #0]
}
 800aecc:	bf00      	nop
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr
 800aed8:	2000678c 	.word	0x2000678c
 800aedc:	200067f4 	.word	0x200067f4

0800aee0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aee6:	4b0b      	ldr	r3, [pc, #44]	; (800af14 <xTaskGetSchedulerState+0x34>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d102      	bne.n	800aef4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aeee:	2301      	movs	r3, #1
 800aef0:	607b      	str	r3, [r7, #4]
 800aef2:	e008      	b.n	800af06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aef4:	4b08      	ldr	r3, [pc, #32]	; (800af18 <xTaskGetSchedulerState+0x38>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d102      	bne.n	800af02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aefc:	2302      	movs	r3, #2
 800aefe:	607b      	str	r3, [r7, #4]
 800af00:	e001      	b.n	800af06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800af02:	2300      	movs	r3, #0
 800af04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800af06:	687b      	ldr	r3, [r7, #4]
	}
 800af08:	4618      	mov	r0, r3
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr
 800af14:	200067e0 	.word	0x200067e0
 800af18:	200067fc 	.word	0x200067fc

0800af1c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800af28:	2300      	movs	r3, #0
 800af2a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d05e      	beq.n	800aff0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af36:	4b31      	ldr	r3, [pc, #196]	; (800affc <xTaskPriorityInherit+0xe0>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d24e      	bcs.n	800afde <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	699b      	ldr	r3, [r3, #24]
 800af44:	2b00      	cmp	r3, #0
 800af46:	db06      	blt.n	800af56 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af48:	4b2c      	ldr	r3, [pc, #176]	; (800affc <xTaskPriorityInherit+0xe0>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af4e:	f1c3 0207 	rsb	r2, r3, #7
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	6959      	ldr	r1, [r3, #20]
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af5e:	4613      	mov	r3, r2
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	4413      	add	r3, r2
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	4a26      	ldr	r2, [pc, #152]	; (800b000 <xTaskPriorityInherit+0xe4>)
 800af68:	4413      	add	r3, r2
 800af6a:	4299      	cmp	r1, r3
 800af6c:	d12f      	bne.n	800afce <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	3304      	adds	r3, #4
 800af72:	4618      	mov	r0, r3
 800af74:	f7fe f91d 	bl	80091b2 <uxListRemove>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d10a      	bne.n	800af94 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af82:	2201      	movs	r2, #1
 800af84:	fa02 f303 	lsl.w	r3, r2, r3
 800af88:	43da      	mvns	r2, r3
 800af8a:	4b1e      	ldr	r3, [pc, #120]	; (800b004 <xTaskPriorityInherit+0xe8>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4013      	ands	r3, r2
 800af90:	4a1c      	ldr	r2, [pc, #112]	; (800b004 <xTaskPriorityInherit+0xe8>)
 800af92:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800af94:	4b19      	ldr	r3, [pc, #100]	; (800affc <xTaskPriorityInherit+0xe0>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa2:	2201      	movs	r2, #1
 800afa4:	409a      	lsls	r2, r3
 800afa6:	4b17      	ldr	r3, [pc, #92]	; (800b004 <xTaskPriorityInherit+0xe8>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4313      	orrs	r3, r2
 800afac:	4a15      	ldr	r2, [pc, #84]	; (800b004 <xTaskPriorityInherit+0xe8>)
 800afae:	6013      	str	r3, [r2, #0]
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afb4:	4613      	mov	r3, r2
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	4413      	add	r3, r2
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	4a10      	ldr	r2, [pc, #64]	; (800b000 <xTaskPriorityInherit+0xe4>)
 800afbe:	441a      	add	r2, r3
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	3304      	adds	r3, #4
 800afc4:	4619      	mov	r1, r3
 800afc6:	4610      	mov	r0, r2
 800afc8:	f7fe f896 	bl	80090f8 <vListInsertEnd>
 800afcc:	e004      	b.n	800afd8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800afce:	4b0b      	ldr	r3, [pc, #44]	; (800affc <xTaskPriorityInherit+0xe0>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800afd8:	2301      	movs	r3, #1
 800afda:	60fb      	str	r3, [r7, #12]
 800afdc:	e008      	b.n	800aff0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afe2:	4b06      	ldr	r3, [pc, #24]	; (800affc <xTaskPriorityInherit+0xe0>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe8:	429a      	cmp	r2, r3
 800afea:	d201      	bcs.n	800aff0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800afec:	2301      	movs	r3, #1
 800afee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aff0:	68fb      	ldr	r3, [r7, #12]
	}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	200066d4 	.word	0x200066d4
 800b000:	200066d8 	.word	0x200066d8
 800b004:	200067dc 	.word	0x200067dc

0800b008 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b086      	sub	sp, #24
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b014:	2300      	movs	r3, #0
 800b016:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d06e      	beq.n	800b0fc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b01e:	4b3a      	ldr	r3, [pc, #232]	; (800b108 <xTaskPriorityDisinherit+0x100>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	693a      	ldr	r2, [r7, #16]
 800b024:	429a      	cmp	r2, r3
 800b026:	d00a      	beq.n	800b03e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02c:	f383 8811 	msr	BASEPRI, r3
 800b030:	f3bf 8f6f 	isb	sy
 800b034:	f3bf 8f4f 	dsb	sy
 800b038:	60fb      	str	r3, [r7, #12]
}
 800b03a:	bf00      	nop
 800b03c:	e7fe      	b.n	800b03c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b042:	2b00      	cmp	r3, #0
 800b044:	d10a      	bne.n	800b05c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04a:	f383 8811 	msr	BASEPRI, r3
 800b04e:	f3bf 8f6f 	isb	sy
 800b052:	f3bf 8f4f 	dsb	sy
 800b056:	60bb      	str	r3, [r7, #8]
}
 800b058:	bf00      	nop
 800b05a:	e7fe      	b.n	800b05a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b060:	1e5a      	subs	r2, r3, #1
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b06e:	429a      	cmp	r2, r3
 800b070:	d044      	beq.n	800b0fc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b076:	2b00      	cmp	r3, #0
 800b078:	d140      	bne.n	800b0fc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	3304      	adds	r3, #4
 800b07e:	4618      	mov	r0, r3
 800b080:	f7fe f897 	bl	80091b2 <uxListRemove>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d115      	bne.n	800b0b6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b08e:	491f      	ldr	r1, [pc, #124]	; (800b10c <xTaskPriorityDisinherit+0x104>)
 800b090:	4613      	mov	r3, r2
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	4413      	add	r3, r2
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	440b      	add	r3, r1
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d10a      	bne.n	800b0b6 <xTaskPriorityDisinherit+0xae>
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0aa:	43da      	mvns	r2, r3
 800b0ac:	4b18      	ldr	r3, [pc, #96]	; (800b110 <xTaskPriorityDisinherit+0x108>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	4a17      	ldr	r2, [pc, #92]	; (800b110 <xTaskPriorityDisinherit+0x108>)
 800b0b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c2:	f1c3 0207 	rsb	r2, r3, #7
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	409a      	lsls	r2, r3
 800b0d2:	4b0f      	ldr	r3, [pc, #60]	; (800b110 <xTaskPriorityDisinherit+0x108>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	4a0d      	ldr	r2, [pc, #52]	; (800b110 <xTaskPriorityDisinherit+0x108>)
 800b0da:	6013      	str	r3, [r2, #0]
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	4413      	add	r3, r2
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	4a08      	ldr	r2, [pc, #32]	; (800b10c <xTaskPriorityDisinherit+0x104>)
 800b0ea:	441a      	add	r2, r3
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	3304      	adds	r3, #4
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	4610      	mov	r0, r2
 800b0f4:	f7fe f800 	bl	80090f8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b0fc:	697b      	ldr	r3, [r7, #20]
	}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3718      	adds	r7, #24
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	200066d4 	.word	0x200066d4
 800b10c:	200066d8 	.word	0x200066d8
 800b110:	200067dc 	.word	0x200067dc

0800b114 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b114:	b580      	push	{r7, lr}
 800b116:	b088      	sub	sp, #32
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b122:	2301      	movs	r3, #1
 800b124:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d077      	beq.n	800b21c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b12c:	69bb      	ldr	r3, [r7, #24]
 800b12e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b130:	2b00      	cmp	r3, #0
 800b132:	d10a      	bne.n	800b14a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b138:	f383 8811 	msr	BASEPRI, r3
 800b13c:	f3bf 8f6f 	isb	sy
 800b140:	f3bf 8f4f 	dsb	sy
 800b144:	60fb      	str	r3, [r7, #12]
}
 800b146:	bf00      	nop
 800b148:	e7fe      	b.n	800b148 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b14a:	69bb      	ldr	r3, [r7, #24]
 800b14c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	429a      	cmp	r2, r3
 800b152:	d902      	bls.n	800b15a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	61fb      	str	r3, [r7, #28]
 800b158:	e002      	b.n	800b160 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b15e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b164:	69fa      	ldr	r2, [r7, #28]
 800b166:	429a      	cmp	r2, r3
 800b168:	d058      	beq.n	800b21c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b16e:	697a      	ldr	r2, [r7, #20]
 800b170:	429a      	cmp	r2, r3
 800b172:	d153      	bne.n	800b21c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b174:	4b2b      	ldr	r3, [pc, #172]	; (800b224 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	69ba      	ldr	r2, [r7, #24]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d10a      	bne.n	800b194 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b182:	f383 8811 	msr	BASEPRI, r3
 800b186:	f3bf 8f6f 	isb	sy
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	60bb      	str	r3, [r7, #8]
}
 800b190:	bf00      	nop
 800b192:	e7fe      	b.n	800b192 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b194:	69bb      	ldr	r3, [r7, #24]
 800b196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b198:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	69fa      	ldr	r2, [r7, #28]
 800b19e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	699b      	ldr	r3, [r3, #24]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	db04      	blt.n	800b1b2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	f1c3 0207 	rsb	r2, r3, #7
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	6959      	ldr	r1, [r3, #20]
 800b1b6:	693a      	ldr	r2, [r7, #16]
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	4413      	add	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4a19      	ldr	r2, [pc, #100]	; (800b228 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b1c2:	4413      	add	r3, r2
 800b1c4:	4299      	cmp	r1, r3
 800b1c6:	d129      	bne.n	800b21c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1c8:	69bb      	ldr	r3, [r7, #24]
 800b1ca:	3304      	adds	r3, #4
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7fd fff0 	bl	80091b2 <uxListRemove>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d10a      	bne.n	800b1ee <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1dc:	2201      	movs	r2, #1
 800b1de:	fa02 f303 	lsl.w	r3, r2, r3
 800b1e2:	43da      	mvns	r2, r3
 800b1e4:	4b11      	ldr	r3, [pc, #68]	; (800b22c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4013      	ands	r3, r2
 800b1ea:	4a10      	ldr	r2, [pc, #64]	; (800b22c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b1ec:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	409a      	lsls	r2, r3
 800b1f6:	4b0d      	ldr	r3, [pc, #52]	; (800b22c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	4a0b      	ldr	r2, [pc, #44]	; (800b22c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b1fe:	6013      	str	r3, [r2, #0]
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b204:	4613      	mov	r3, r2
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	4413      	add	r3, r2
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	4a06      	ldr	r2, [pc, #24]	; (800b228 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b20e:	441a      	add	r2, r3
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	3304      	adds	r3, #4
 800b214:	4619      	mov	r1, r3
 800b216:	4610      	mov	r0, r2
 800b218:	f7fd ff6e 	bl	80090f8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b21c:	bf00      	nop
 800b21e:	3720      	adds	r7, #32
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}
 800b224:	200066d4 	.word	0x200066d4
 800b228:	200066d8 	.word	0x200066d8
 800b22c:	200067dc 	.word	0x200067dc

0800b230 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b230:	b480      	push	{r7}
 800b232:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b234:	4b07      	ldr	r3, [pc, #28]	; (800b254 <pvTaskIncrementMutexHeldCount+0x24>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d004      	beq.n	800b246 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b23c:	4b05      	ldr	r3, [pc, #20]	; (800b254 <pvTaskIncrementMutexHeldCount+0x24>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b242:	3201      	adds	r2, #1
 800b244:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b246:	4b03      	ldr	r3, [pc, #12]	; (800b254 <pvTaskIncrementMutexHeldCount+0x24>)
 800b248:	681b      	ldr	r3, [r3, #0]
	}
 800b24a:	4618      	mov	r0, r3
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr
 800b254:	200066d4 	.word	0x200066d4

0800b258 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b262:	4b29      	ldr	r3, [pc, #164]	; (800b308 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b268:	4b28      	ldr	r3, [pc, #160]	; (800b30c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	3304      	adds	r3, #4
 800b26e:	4618      	mov	r0, r3
 800b270:	f7fd ff9f 	bl	80091b2 <uxListRemove>
 800b274:	4603      	mov	r3, r0
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10b      	bne.n	800b292 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b27a:	4b24      	ldr	r3, [pc, #144]	; (800b30c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b280:	2201      	movs	r2, #1
 800b282:	fa02 f303 	lsl.w	r3, r2, r3
 800b286:	43da      	mvns	r2, r3
 800b288:	4b21      	ldr	r3, [pc, #132]	; (800b310 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4013      	ands	r3, r2
 800b28e:	4a20      	ldr	r2, [pc, #128]	; (800b310 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b290:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b298:	d10a      	bne.n	800b2b0 <prvAddCurrentTaskToDelayedList+0x58>
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d007      	beq.n	800b2b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2a0:	4b1a      	ldr	r3, [pc, #104]	; (800b30c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	3304      	adds	r3, #4
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	481a      	ldr	r0, [pc, #104]	; (800b314 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b2aa:	f7fd ff25 	bl	80090f8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b2ae:	e026      	b.n	800b2fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4413      	add	r3, r2
 800b2b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b2b8:	4b14      	ldr	r3, [pc, #80]	; (800b30c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	68ba      	ldr	r2, [r7, #8]
 800b2be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b2c0:	68ba      	ldr	r2, [r7, #8]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d209      	bcs.n	800b2dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2c8:	4b13      	ldr	r3, [pc, #76]	; (800b318 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	4b0f      	ldr	r3, [pc, #60]	; (800b30c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	3304      	adds	r3, #4
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	4610      	mov	r0, r2
 800b2d6:	f7fd ff33 	bl	8009140 <vListInsert>
}
 800b2da:	e010      	b.n	800b2fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2dc:	4b0f      	ldr	r3, [pc, #60]	; (800b31c <prvAddCurrentTaskToDelayedList+0xc4>)
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	4b0a      	ldr	r3, [pc, #40]	; (800b30c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	3304      	adds	r3, #4
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	4610      	mov	r0, r2
 800b2ea:	f7fd ff29 	bl	8009140 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b2ee:	4b0c      	ldr	r3, [pc, #48]	; (800b320 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	68ba      	ldr	r2, [r7, #8]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d202      	bcs.n	800b2fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b2f8:	4a09      	ldr	r2, [pc, #36]	; (800b320 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	6013      	str	r3, [r2, #0]
}
 800b2fe:	bf00      	nop
 800b300:	3710      	adds	r7, #16
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	200067d8 	.word	0x200067d8
 800b30c:	200066d4 	.word	0x200066d4
 800b310:	200067dc 	.word	0x200067dc
 800b314:	200067c0 	.word	0x200067c0
 800b318:	20006790 	.word	0x20006790
 800b31c:	2000678c 	.word	0x2000678c
 800b320:	200067f4 	.word	0x200067f4

0800b324 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b08a      	sub	sp, #40	; 0x28
 800b328:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b32a:	2300      	movs	r3, #0
 800b32c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b32e:	f000 faeb 	bl	800b908 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b332:	4b1c      	ldr	r3, [pc, #112]	; (800b3a4 <xTimerCreateTimerTask+0x80>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d021      	beq.n	800b37e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b33a:	2300      	movs	r3, #0
 800b33c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b33e:	2300      	movs	r3, #0
 800b340:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b342:	1d3a      	adds	r2, r7, #4
 800b344:	f107 0108 	add.w	r1, r7, #8
 800b348:	f107 030c 	add.w	r3, r7, #12
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7f6 ffcb 	bl	80022e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b352:	6879      	ldr	r1, [r7, #4]
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	9202      	str	r2, [sp, #8]
 800b35a:	9301      	str	r3, [sp, #4]
 800b35c:	2302      	movs	r3, #2
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	2300      	movs	r3, #0
 800b362:	460a      	mov	r2, r1
 800b364:	4910      	ldr	r1, [pc, #64]	; (800b3a8 <xTimerCreateTimerTask+0x84>)
 800b366:	4811      	ldr	r0, [pc, #68]	; (800b3ac <xTimerCreateTimerTask+0x88>)
 800b368:	f7fe ff76 	bl	800a258 <xTaskCreateStatic>
 800b36c:	4603      	mov	r3, r0
 800b36e:	4a10      	ldr	r2, [pc, #64]	; (800b3b0 <xTimerCreateTimerTask+0x8c>)
 800b370:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b372:	4b0f      	ldr	r3, [pc, #60]	; (800b3b0 <xTimerCreateTimerTask+0x8c>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d001      	beq.n	800b37e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b37a:	2301      	movs	r3, #1
 800b37c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d10a      	bne.n	800b39a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b388:	f383 8811 	msr	BASEPRI, r3
 800b38c:	f3bf 8f6f 	isb	sy
 800b390:	f3bf 8f4f 	dsb	sy
 800b394:	613b      	str	r3, [r7, #16]
}
 800b396:	bf00      	nop
 800b398:	e7fe      	b.n	800b398 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b39a:	697b      	ldr	r3, [r7, #20]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3718      	adds	r7, #24
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	20006830 	.word	0x20006830
 800b3a8:	08026de8 	.word	0x08026de8
 800b3ac:	0800b4e9 	.word	0x0800b4e9
 800b3b0:	20006834 	.word	0x20006834

0800b3b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b08a      	sub	sp, #40	; 0x28
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	607a      	str	r2, [r7, #4]
 800b3c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10a      	bne.n	800b3e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d0:	f383 8811 	msr	BASEPRI, r3
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	f3bf 8f4f 	dsb	sy
 800b3dc:	623b      	str	r3, [r7, #32]
}
 800b3de:	bf00      	nop
 800b3e0:	e7fe      	b.n	800b3e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b3e2:	4b1a      	ldr	r3, [pc, #104]	; (800b44c <xTimerGenericCommand+0x98>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d02a      	beq.n	800b440 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	2b05      	cmp	r3, #5
 800b3fa:	dc18      	bgt.n	800b42e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b3fc:	f7ff fd70 	bl	800aee0 <xTaskGetSchedulerState>
 800b400:	4603      	mov	r3, r0
 800b402:	2b02      	cmp	r3, #2
 800b404:	d109      	bne.n	800b41a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b406:	4b11      	ldr	r3, [pc, #68]	; (800b44c <xTimerGenericCommand+0x98>)
 800b408:	6818      	ldr	r0, [r3, #0]
 800b40a:	f107 0114 	add.w	r1, r7, #20
 800b40e:	2300      	movs	r3, #0
 800b410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b412:	f7fe f87f 	bl	8009514 <xQueueGenericSend>
 800b416:	6278      	str	r0, [r7, #36]	; 0x24
 800b418:	e012      	b.n	800b440 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b41a:	4b0c      	ldr	r3, [pc, #48]	; (800b44c <xTimerGenericCommand+0x98>)
 800b41c:	6818      	ldr	r0, [r3, #0]
 800b41e:	f107 0114 	add.w	r1, r7, #20
 800b422:	2300      	movs	r3, #0
 800b424:	2200      	movs	r2, #0
 800b426:	f7fe f875 	bl	8009514 <xQueueGenericSend>
 800b42a:	6278      	str	r0, [r7, #36]	; 0x24
 800b42c:	e008      	b.n	800b440 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b42e:	4b07      	ldr	r3, [pc, #28]	; (800b44c <xTimerGenericCommand+0x98>)
 800b430:	6818      	ldr	r0, [r3, #0]
 800b432:	f107 0114 	add.w	r1, r7, #20
 800b436:	2300      	movs	r3, #0
 800b438:	683a      	ldr	r2, [r7, #0]
 800b43a:	f7fe f969 	bl	8009710 <xQueueGenericSendFromISR>
 800b43e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b442:	4618      	mov	r0, r3
 800b444:	3728      	adds	r7, #40	; 0x28
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	20006830 	.word	0x20006830

0800b450 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b088      	sub	sp, #32
 800b454:	af02      	add	r7, sp, #8
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b45a:	4b22      	ldr	r3, [pc, #136]	; (800b4e4 <prvProcessExpiredTimer+0x94>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	68db      	ldr	r3, [r3, #12]
 800b462:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	3304      	adds	r3, #4
 800b468:	4618      	mov	r0, r3
 800b46a:	f7fd fea2 	bl	80091b2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b474:	f003 0304 	and.w	r3, r3, #4
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d022      	beq.n	800b4c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	699a      	ldr	r2, [r3, #24]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	18d1      	adds	r1, r2, r3
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	683a      	ldr	r2, [r7, #0]
 800b488:	6978      	ldr	r0, [r7, #20]
 800b48a:	f000 f8d1 	bl	800b630 <prvInsertTimerInActiveList>
 800b48e:	4603      	mov	r3, r0
 800b490:	2b00      	cmp	r3, #0
 800b492:	d01f      	beq.n	800b4d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b494:	2300      	movs	r3, #0
 800b496:	9300      	str	r3, [sp, #0]
 800b498:	2300      	movs	r3, #0
 800b49a:	687a      	ldr	r2, [r7, #4]
 800b49c:	2100      	movs	r1, #0
 800b49e:	6978      	ldr	r0, [r7, #20]
 800b4a0:	f7ff ff88 	bl	800b3b4 <xTimerGenericCommand>
 800b4a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d113      	bne.n	800b4d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b0:	f383 8811 	msr	BASEPRI, r3
 800b4b4:	f3bf 8f6f 	isb	sy
 800b4b8:	f3bf 8f4f 	dsb	sy
 800b4bc:	60fb      	str	r3, [r7, #12]
}
 800b4be:	bf00      	nop
 800b4c0:	e7fe      	b.n	800b4c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b4c8:	f023 0301 	bic.w	r3, r3, #1
 800b4cc:	b2da      	uxtb	r2, r3
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	6a1b      	ldr	r3, [r3, #32]
 800b4d8:	6978      	ldr	r0, [r7, #20]
 800b4da:	4798      	blx	r3
}
 800b4dc:	bf00      	nop
 800b4de:	3718      	adds	r7, #24
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	20006828 	.word	0x20006828

0800b4e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b4f0:	f107 0308 	add.w	r3, r7, #8
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f000 f857 	bl	800b5a8 <prvGetNextExpireTime>
 800b4fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	4619      	mov	r1, r3
 800b500:	68f8      	ldr	r0, [r7, #12]
 800b502:	f000 f803 	bl	800b50c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b506:	f000 f8d5 	bl	800b6b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b50a:	e7f1      	b.n	800b4f0 <prvTimerTask+0x8>

0800b50c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b516:	f7ff f8ed 	bl	800a6f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b51a:	f107 0308 	add.w	r3, r7, #8
 800b51e:	4618      	mov	r0, r3
 800b520:	f000 f866 	bl	800b5f0 <prvSampleTimeNow>
 800b524:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d130      	bne.n	800b58e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d10a      	bne.n	800b548 <prvProcessTimerOrBlockTask+0x3c>
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	429a      	cmp	r2, r3
 800b538:	d806      	bhi.n	800b548 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b53a:	f7ff f8e9 	bl	800a710 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b53e:	68f9      	ldr	r1, [r7, #12]
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f7ff ff85 	bl	800b450 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b546:	e024      	b.n	800b592 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d008      	beq.n	800b560 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b54e:	4b13      	ldr	r3, [pc, #76]	; (800b59c <prvProcessTimerOrBlockTask+0x90>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d101      	bne.n	800b55c <prvProcessTimerOrBlockTask+0x50>
 800b558:	2301      	movs	r3, #1
 800b55a:	e000      	b.n	800b55e <prvProcessTimerOrBlockTask+0x52>
 800b55c:	2300      	movs	r3, #0
 800b55e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b560:	4b0f      	ldr	r3, [pc, #60]	; (800b5a0 <prvProcessTimerOrBlockTask+0x94>)
 800b562:	6818      	ldr	r0, [r3, #0]
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	1ad3      	subs	r3, r2, r3
 800b56a:	683a      	ldr	r2, [r7, #0]
 800b56c:	4619      	mov	r1, r3
 800b56e:	f7fe fe3f 	bl	800a1f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b572:	f7ff f8cd 	bl	800a710 <xTaskResumeAll>
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d10a      	bne.n	800b592 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b57c:	4b09      	ldr	r3, [pc, #36]	; (800b5a4 <prvProcessTimerOrBlockTask+0x98>)
 800b57e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b582:	601a      	str	r2, [r3, #0]
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	f3bf 8f6f 	isb	sy
}
 800b58c:	e001      	b.n	800b592 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b58e:	f7ff f8bf 	bl	800a710 <xTaskResumeAll>
}
 800b592:	bf00      	nop
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	2000682c 	.word	0x2000682c
 800b5a0:	20006830 	.word	0x20006830
 800b5a4:	e000ed04 	.word	0xe000ed04

0800b5a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b085      	sub	sp, #20
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b5b0:	4b0e      	ldr	r3, [pc, #56]	; (800b5ec <prvGetNextExpireTime+0x44>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d101      	bne.n	800b5be <prvGetNextExpireTime+0x16>
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	e000      	b.n	800b5c0 <prvGetNextExpireTime+0x18>
 800b5be:	2200      	movs	r2, #0
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d105      	bne.n	800b5d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b5cc:	4b07      	ldr	r3, [pc, #28]	; (800b5ec <prvGetNextExpireTime+0x44>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	60fb      	str	r3, [r7, #12]
 800b5d6:	e001      	b.n	800b5dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3714      	adds	r7, #20
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr
 800b5ea:	bf00      	nop
 800b5ec:	20006828 	.word	0x20006828

0800b5f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b5f8:	f7ff f926 	bl	800a848 <xTaskGetTickCount>
 800b5fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b5fe:	4b0b      	ldr	r3, [pc, #44]	; (800b62c <prvSampleTimeNow+0x3c>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	68fa      	ldr	r2, [r7, #12]
 800b604:	429a      	cmp	r2, r3
 800b606:	d205      	bcs.n	800b614 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b608:	f000 f91a 	bl	800b840 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2201      	movs	r2, #1
 800b610:	601a      	str	r2, [r3, #0]
 800b612:	e002      	b.n	800b61a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2200      	movs	r2, #0
 800b618:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b61a:	4a04      	ldr	r2, [pc, #16]	; (800b62c <prvSampleTimeNow+0x3c>)
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b620:	68fb      	ldr	r3, [r7, #12]
}
 800b622:	4618      	mov	r0, r3
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	20006838 	.word	0x20006838

0800b630 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	607a      	str	r2, [r7, #4]
 800b63c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b63e:	2300      	movs	r3, #0
 800b640:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	68ba      	ldr	r2, [r7, #8]
 800b646:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	68fa      	ldr	r2, [r7, #12]
 800b64c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b64e:	68ba      	ldr	r2, [r7, #8]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	429a      	cmp	r2, r3
 800b654:	d812      	bhi.n	800b67c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	1ad2      	subs	r2, r2, r3
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	699b      	ldr	r3, [r3, #24]
 800b660:	429a      	cmp	r2, r3
 800b662:	d302      	bcc.n	800b66a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b664:	2301      	movs	r3, #1
 800b666:	617b      	str	r3, [r7, #20]
 800b668:	e01b      	b.n	800b6a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b66a:	4b10      	ldr	r3, [pc, #64]	; (800b6ac <prvInsertTimerInActiveList+0x7c>)
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	3304      	adds	r3, #4
 800b672:	4619      	mov	r1, r3
 800b674:	4610      	mov	r0, r2
 800b676:	f7fd fd63 	bl	8009140 <vListInsert>
 800b67a:	e012      	b.n	800b6a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b67c:	687a      	ldr	r2, [r7, #4]
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	429a      	cmp	r2, r3
 800b682:	d206      	bcs.n	800b692 <prvInsertTimerInActiveList+0x62>
 800b684:	68ba      	ldr	r2, [r7, #8]
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d302      	bcc.n	800b692 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b68c:	2301      	movs	r3, #1
 800b68e:	617b      	str	r3, [r7, #20]
 800b690:	e007      	b.n	800b6a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b692:	4b07      	ldr	r3, [pc, #28]	; (800b6b0 <prvInsertTimerInActiveList+0x80>)
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	3304      	adds	r3, #4
 800b69a:	4619      	mov	r1, r3
 800b69c:	4610      	mov	r0, r2
 800b69e:	f7fd fd4f 	bl	8009140 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b6a2:	697b      	ldr	r3, [r7, #20]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3718      	adds	r7, #24
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	2000682c 	.word	0x2000682c
 800b6b0:	20006828 	.word	0x20006828

0800b6b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b08c      	sub	sp, #48	; 0x30
 800b6b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b6ba:	e0ae      	b.n	800b81a <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	f2c0 80ab 	blt.w	800b81a <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ca:	695b      	ldr	r3, [r3, #20]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d004      	beq.n	800b6da <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d2:	3304      	adds	r3, #4
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7fd fd6c 	bl	80091b2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b6da:	1d3b      	adds	r3, r7, #4
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7ff ff87 	bl	800b5f0 <prvSampleTimeNow>
 800b6e2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	2b09      	cmp	r3, #9
 800b6e8:	f200 8096 	bhi.w	800b818 <prvProcessReceivedCommands+0x164>
 800b6ec:	a201      	add	r2, pc, #4	; (adr r2, 800b6f4 <prvProcessReceivedCommands+0x40>)
 800b6ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f2:	bf00      	nop
 800b6f4:	0800b71d 	.word	0x0800b71d
 800b6f8:	0800b71d 	.word	0x0800b71d
 800b6fc:	0800b71d 	.word	0x0800b71d
 800b700:	0800b791 	.word	0x0800b791
 800b704:	0800b7a5 	.word	0x0800b7a5
 800b708:	0800b7ef 	.word	0x0800b7ef
 800b70c:	0800b71d 	.word	0x0800b71d
 800b710:	0800b71d 	.word	0x0800b71d
 800b714:	0800b791 	.word	0x0800b791
 800b718:	0800b7a5 	.word	0x0800b7a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b722:	f043 0301 	orr.w	r3, r3, #1
 800b726:	b2da      	uxtb	r2, r3
 800b728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b72e:	68fa      	ldr	r2, [r7, #12]
 800b730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b732:	699b      	ldr	r3, [r3, #24]
 800b734:	18d1      	adds	r1, r2, r3
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	6a3a      	ldr	r2, [r7, #32]
 800b73a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b73c:	f7ff ff78 	bl	800b630 <prvInsertTimerInActiveList>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d069      	beq.n	800b81a <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b748:	6a1b      	ldr	r3, [r3, #32]
 800b74a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b74c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b750:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b754:	f003 0304 	and.w	r3, r3, #4
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d05e      	beq.n	800b81a <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b75c:	68fa      	ldr	r2, [r7, #12]
 800b75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b760:	699b      	ldr	r3, [r3, #24]
 800b762:	441a      	add	r2, r3
 800b764:	2300      	movs	r3, #0
 800b766:	9300      	str	r3, [sp, #0]
 800b768:	2300      	movs	r3, #0
 800b76a:	2100      	movs	r1, #0
 800b76c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b76e:	f7ff fe21 	bl	800b3b4 <xTimerGenericCommand>
 800b772:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d14f      	bne.n	800b81a <prvProcessReceivedCommands+0x166>
	__asm volatile
 800b77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	61bb      	str	r3, [r7, #24]
}
 800b78c:	bf00      	nop
 800b78e:	e7fe      	b.n	800b78e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b792:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b796:	f023 0301 	bic.w	r3, r3, #1
 800b79a:	b2da      	uxtb	r2, r3
 800b79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800b7a2:	e03a      	b.n	800b81a <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b7aa:	f043 0301 	orr.w	r3, r3, #1
 800b7ae:	b2da      	uxtb	r2, r3
 800b7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7be:	699b      	ldr	r3, [r3, #24]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d10a      	bne.n	800b7da <prvProcessReceivedCommands+0x126>
	__asm volatile
 800b7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c8:	f383 8811 	msr	BASEPRI, r3
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f3bf 8f4f 	dsb	sy
 800b7d4:	617b      	str	r3, [r7, #20]
}
 800b7d6:	bf00      	nop
 800b7d8:	e7fe      	b.n	800b7d8 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7dc:	699a      	ldr	r2, [r3, #24]
 800b7de:	6a3b      	ldr	r3, [r7, #32]
 800b7e0:	18d1      	adds	r1, r2, r3
 800b7e2:	6a3b      	ldr	r3, [r7, #32]
 800b7e4:	6a3a      	ldr	r2, [r7, #32]
 800b7e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7e8:	f7ff ff22 	bl	800b630 <prvInsertTimerInActiveList>
					break;
 800b7ec:	e015      	b.n	800b81a <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b7f4:	f003 0302 	and.w	r3, r3, #2
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d103      	bne.n	800b804 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800b7fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7fe:	f000 fbdf 	bl	800bfc0 <vPortFree>
 800b802:	e00a      	b.n	800b81a <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b806:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b80a:	f023 0301 	bic.w	r3, r3, #1
 800b80e:	b2da      	uxtb	r2, r3
 800b810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b812:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b816:	e000      	b.n	800b81a <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 800b818:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b81a:	4b08      	ldr	r3, [pc, #32]	; (800b83c <prvProcessReceivedCommands+0x188>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f107 0108 	add.w	r1, r7, #8
 800b822:	2200      	movs	r2, #0
 800b824:	4618      	mov	r0, r3
 800b826:	f7fe f89b 	bl	8009960 <xQueueReceive>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	f47f af45 	bne.w	800b6bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b832:	bf00      	nop
 800b834:	bf00      	nop
 800b836:	3728      	adds	r7, #40	; 0x28
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}
 800b83c:	20006830 	.word	0x20006830

0800b840 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b088      	sub	sp, #32
 800b844:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b846:	e048      	b.n	800b8da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b848:	4b2d      	ldr	r3, [pc, #180]	; (800b900 <prvSwitchTimerLists+0xc0>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b852:	4b2b      	ldr	r3, [pc, #172]	; (800b900 <prvSwitchTimerLists+0xc0>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	68db      	ldr	r3, [r3, #12]
 800b858:	68db      	ldr	r3, [r3, #12]
 800b85a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	3304      	adds	r3, #4
 800b860:	4618      	mov	r0, r3
 800b862:	f7fd fca6 	bl	80091b2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6a1b      	ldr	r3, [r3, #32]
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b874:	f003 0304 	and.w	r3, r3, #4
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d02e      	beq.n	800b8da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	699b      	ldr	r3, [r3, #24]
 800b880:	693a      	ldr	r2, [r7, #16]
 800b882:	4413      	add	r3, r2
 800b884:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d90e      	bls.n	800b8ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	68ba      	ldr	r2, [r7, #8]
 800b892:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b89a:	4b19      	ldr	r3, [pc, #100]	; (800b900 <prvSwitchTimerLists+0xc0>)
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	3304      	adds	r3, #4
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	4610      	mov	r0, r2
 800b8a6:	f7fd fc4b 	bl	8009140 <vListInsert>
 800b8aa:	e016      	b.n	800b8da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	693a      	ldr	r2, [r7, #16]
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f7ff fd7c 	bl	800b3b4 <xTimerGenericCommand>
 800b8bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d10a      	bne.n	800b8da <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c8:	f383 8811 	msr	BASEPRI, r3
 800b8cc:	f3bf 8f6f 	isb	sy
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	603b      	str	r3, [r7, #0]
}
 800b8d6:	bf00      	nop
 800b8d8:	e7fe      	b.n	800b8d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b8da:	4b09      	ldr	r3, [pc, #36]	; (800b900 <prvSwitchTimerLists+0xc0>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d1b1      	bne.n	800b848 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b8e4:	4b06      	ldr	r3, [pc, #24]	; (800b900 <prvSwitchTimerLists+0xc0>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b8ea:	4b06      	ldr	r3, [pc, #24]	; (800b904 <prvSwitchTimerLists+0xc4>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4a04      	ldr	r2, [pc, #16]	; (800b900 <prvSwitchTimerLists+0xc0>)
 800b8f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b8f2:	4a04      	ldr	r2, [pc, #16]	; (800b904 <prvSwitchTimerLists+0xc4>)
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	6013      	str	r3, [r2, #0]
}
 800b8f8:	bf00      	nop
 800b8fa:	3718      	adds	r7, #24
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	20006828 	.word	0x20006828
 800b904:	2000682c 	.word	0x2000682c

0800b908 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b90e:	f000 f969 	bl	800bbe4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b912:	4b15      	ldr	r3, [pc, #84]	; (800b968 <prvCheckForValidListAndQueue+0x60>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d120      	bne.n	800b95c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b91a:	4814      	ldr	r0, [pc, #80]	; (800b96c <prvCheckForValidListAndQueue+0x64>)
 800b91c:	f7fd fbbf 	bl	800909e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b920:	4813      	ldr	r0, [pc, #76]	; (800b970 <prvCheckForValidListAndQueue+0x68>)
 800b922:	f7fd fbbc 	bl	800909e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b926:	4b13      	ldr	r3, [pc, #76]	; (800b974 <prvCheckForValidListAndQueue+0x6c>)
 800b928:	4a10      	ldr	r2, [pc, #64]	; (800b96c <prvCheckForValidListAndQueue+0x64>)
 800b92a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b92c:	4b12      	ldr	r3, [pc, #72]	; (800b978 <prvCheckForValidListAndQueue+0x70>)
 800b92e:	4a10      	ldr	r2, [pc, #64]	; (800b970 <prvCheckForValidListAndQueue+0x68>)
 800b930:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b932:	2300      	movs	r3, #0
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	4b11      	ldr	r3, [pc, #68]	; (800b97c <prvCheckForValidListAndQueue+0x74>)
 800b938:	4a11      	ldr	r2, [pc, #68]	; (800b980 <prvCheckForValidListAndQueue+0x78>)
 800b93a:	210c      	movs	r1, #12
 800b93c:	200a      	movs	r0, #10
 800b93e:	f7fd fccb 	bl	80092d8 <xQueueGenericCreateStatic>
 800b942:	4603      	mov	r3, r0
 800b944:	4a08      	ldr	r2, [pc, #32]	; (800b968 <prvCheckForValidListAndQueue+0x60>)
 800b946:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b948:	4b07      	ldr	r3, [pc, #28]	; (800b968 <prvCheckForValidListAndQueue+0x60>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d005      	beq.n	800b95c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b950:	4b05      	ldr	r3, [pc, #20]	; (800b968 <prvCheckForValidListAndQueue+0x60>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	490b      	ldr	r1, [pc, #44]	; (800b984 <prvCheckForValidListAndQueue+0x7c>)
 800b956:	4618      	mov	r0, r3
 800b958:	f7fe fbf6 	bl	800a148 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b95c:	f000 f972 	bl	800bc44 <vPortExitCritical>
}
 800b960:	bf00      	nop
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	20006830 	.word	0x20006830
 800b96c:	20006800 	.word	0x20006800
 800b970:	20006814 	.word	0x20006814
 800b974:	20006828 	.word	0x20006828
 800b978:	2000682c 	.word	0x2000682c
 800b97c:	200068b4 	.word	0x200068b4
 800b980:	2000683c 	.word	0x2000683c
 800b984:	08026df0 	.word	0x08026df0

0800b988 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b988:	b480      	push	{r7}
 800b98a:	b085      	sub	sp, #20
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	60b9      	str	r1, [r7, #8]
 800b992:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	3b04      	subs	r3, #4
 800b998:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b9a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	3b04      	subs	r3, #4
 800b9a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	f023 0201 	bic.w	r2, r3, #1
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	3b04      	subs	r3, #4
 800b9b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b9b8:	4a0c      	ldr	r2, [pc, #48]	; (800b9ec <pxPortInitialiseStack+0x64>)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	3b14      	subs	r3, #20
 800b9c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	3b04      	subs	r3, #4
 800b9ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f06f 0202 	mvn.w	r2, #2
 800b9d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	3b20      	subs	r3, #32
 800b9dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b9de:	68fb      	ldr	r3, [r7, #12]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3714      	adds	r7, #20
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr
 800b9ec:	0800b9f1 	.word	0x0800b9f1

0800b9f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b085      	sub	sp, #20
 800b9f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b9fa:	4b12      	ldr	r3, [pc, #72]	; (800ba44 <prvTaskExitError+0x54>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba02:	d00a      	beq.n	800ba1a <prvTaskExitError+0x2a>
	__asm volatile
 800ba04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba08:	f383 8811 	msr	BASEPRI, r3
 800ba0c:	f3bf 8f6f 	isb	sy
 800ba10:	f3bf 8f4f 	dsb	sy
 800ba14:	60fb      	str	r3, [r7, #12]
}
 800ba16:	bf00      	nop
 800ba18:	e7fe      	b.n	800ba18 <prvTaskExitError+0x28>
	__asm volatile
 800ba1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1e:	f383 8811 	msr	BASEPRI, r3
 800ba22:	f3bf 8f6f 	isb	sy
 800ba26:	f3bf 8f4f 	dsb	sy
 800ba2a:	60bb      	str	r3, [r7, #8]
}
 800ba2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba2e:	bf00      	nop
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d0fc      	beq.n	800ba30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ba36:	bf00      	nop
 800ba38:	bf00      	nop
 800ba3a:	3714      	adds	r7, #20
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr
 800ba44:	20000024 	.word	0x20000024
	...

0800ba50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ba50:	4b07      	ldr	r3, [pc, #28]	; (800ba70 <pxCurrentTCBConst2>)
 800ba52:	6819      	ldr	r1, [r3, #0]
 800ba54:	6808      	ldr	r0, [r1, #0]
 800ba56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5a:	f380 8809 	msr	PSP, r0
 800ba5e:	f3bf 8f6f 	isb	sy
 800ba62:	f04f 0000 	mov.w	r0, #0
 800ba66:	f380 8811 	msr	BASEPRI, r0
 800ba6a:	4770      	bx	lr
 800ba6c:	f3af 8000 	nop.w

0800ba70 <pxCurrentTCBConst2>:
 800ba70:	200066d4 	.word	0x200066d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba74:	bf00      	nop
 800ba76:	bf00      	nop

0800ba78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ba78:	4808      	ldr	r0, [pc, #32]	; (800ba9c <prvPortStartFirstTask+0x24>)
 800ba7a:	6800      	ldr	r0, [r0, #0]
 800ba7c:	6800      	ldr	r0, [r0, #0]
 800ba7e:	f380 8808 	msr	MSP, r0
 800ba82:	f04f 0000 	mov.w	r0, #0
 800ba86:	f380 8814 	msr	CONTROL, r0
 800ba8a:	b662      	cpsie	i
 800ba8c:	b661      	cpsie	f
 800ba8e:	f3bf 8f4f 	dsb	sy
 800ba92:	f3bf 8f6f 	isb	sy
 800ba96:	df00      	svc	0
 800ba98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ba9a:	bf00      	nop
 800ba9c:	e000ed08 	.word	0xe000ed08

0800baa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b086      	sub	sp, #24
 800baa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800baa6:	4b46      	ldr	r3, [pc, #280]	; (800bbc0 <xPortStartScheduler+0x120>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a46      	ldr	r2, [pc, #280]	; (800bbc4 <xPortStartScheduler+0x124>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d10a      	bne.n	800bac6 <xPortStartScheduler+0x26>
	__asm volatile
 800bab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab4:	f383 8811 	msr	BASEPRI, r3
 800bab8:	f3bf 8f6f 	isb	sy
 800babc:	f3bf 8f4f 	dsb	sy
 800bac0:	613b      	str	r3, [r7, #16]
}
 800bac2:	bf00      	nop
 800bac4:	e7fe      	b.n	800bac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bac6:	4b3e      	ldr	r3, [pc, #248]	; (800bbc0 <xPortStartScheduler+0x120>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a3f      	ldr	r2, [pc, #252]	; (800bbc8 <xPortStartScheduler+0x128>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d10a      	bne.n	800bae6 <xPortStartScheduler+0x46>
	__asm volatile
 800bad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad4:	f383 8811 	msr	BASEPRI, r3
 800bad8:	f3bf 8f6f 	isb	sy
 800badc:	f3bf 8f4f 	dsb	sy
 800bae0:	60fb      	str	r3, [r7, #12]
}
 800bae2:	bf00      	nop
 800bae4:	e7fe      	b.n	800bae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bae6:	4b39      	ldr	r3, [pc, #228]	; (800bbcc <xPortStartScheduler+0x12c>)
 800bae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	22ff      	movs	r2, #255	; 0xff
 800baf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb00:	78fb      	ldrb	r3, [r7, #3]
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb08:	b2da      	uxtb	r2, r3
 800bb0a:	4b31      	ldr	r3, [pc, #196]	; (800bbd0 <xPortStartScheduler+0x130>)
 800bb0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb0e:	4b31      	ldr	r3, [pc, #196]	; (800bbd4 <xPortStartScheduler+0x134>)
 800bb10:	2207      	movs	r2, #7
 800bb12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb14:	e009      	b.n	800bb2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bb16:	4b2f      	ldr	r3, [pc, #188]	; (800bbd4 <xPortStartScheduler+0x134>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	4a2d      	ldr	r2, [pc, #180]	; (800bbd4 <xPortStartScheduler+0x134>)
 800bb1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb20:	78fb      	ldrb	r3, [r7, #3]
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	005b      	lsls	r3, r3, #1
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb2a:	78fb      	ldrb	r3, [r7, #3]
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb32:	2b80      	cmp	r3, #128	; 0x80
 800bb34:	d0ef      	beq.n	800bb16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb36:	4b27      	ldr	r3, [pc, #156]	; (800bbd4 <xPortStartScheduler+0x134>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f1c3 0307 	rsb	r3, r3, #7
 800bb3e:	2b04      	cmp	r3, #4
 800bb40:	d00a      	beq.n	800bb58 <xPortStartScheduler+0xb8>
	__asm volatile
 800bb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb46:	f383 8811 	msr	BASEPRI, r3
 800bb4a:	f3bf 8f6f 	isb	sy
 800bb4e:	f3bf 8f4f 	dsb	sy
 800bb52:	60bb      	str	r3, [r7, #8]
}
 800bb54:	bf00      	nop
 800bb56:	e7fe      	b.n	800bb56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb58:	4b1e      	ldr	r3, [pc, #120]	; (800bbd4 <xPortStartScheduler+0x134>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	021b      	lsls	r3, r3, #8
 800bb5e:	4a1d      	ldr	r2, [pc, #116]	; (800bbd4 <xPortStartScheduler+0x134>)
 800bb60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bb62:	4b1c      	ldr	r3, [pc, #112]	; (800bbd4 <xPortStartScheduler+0x134>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb6a:	4a1a      	ldr	r2, [pc, #104]	; (800bbd4 <xPortStartScheduler+0x134>)
 800bb6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	b2da      	uxtb	r2, r3
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb76:	4b18      	ldr	r3, [pc, #96]	; (800bbd8 <xPortStartScheduler+0x138>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	4a17      	ldr	r2, [pc, #92]	; (800bbd8 <xPortStartScheduler+0x138>)
 800bb7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb82:	4b15      	ldr	r3, [pc, #84]	; (800bbd8 <xPortStartScheduler+0x138>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a14      	ldr	r2, [pc, #80]	; (800bbd8 <xPortStartScheduler+0x138>)
 800bb88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bb8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb8e:	f000 f8dd 	bl	800bd4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bb92:	4b12      	ldr	r3, [pc, #72]	; (800bbdc <xPortStartScheduler+0x13c>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bb98:	f000 f8fc 	bl	800bd94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bb9c:	4b10      	ldr	r3, [pc, #64]	; (800bbe0 <xPortStartScheduler+0x140>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a0f      	ldr	r2, [pc, #60]	; (800bbe0 <xPortStartScheduler+0x140>)
 800bba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bba8:	f7ff ff66 	bl	800ba78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bbac:	f7fe ff26 	bl	800a9fc <vTaskSwitchContext>
	prvTaskExitError();
 800bbb0:	f7ff ff1e 	bl	800b9f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bbb4:	2300      	movs	r3, #0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3718      	adds	r7, #24
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	e000ed00 	.word	0xe000ed00
 800bbc4:	410fc271 	.word	0x410fc271
 800bbc8:	410fc270 	.word	0x410fc270
 800bbcc:	e000e400 	.word	0xe000e400
 800bbd0:	200068fc 	.word	0x200068fc
 800bbd4:	20006900 	.word	0x20006900
 800bbd8:	e000ed20 	.word	0xe000ed20
 800bbdc:	20000024 	.word	0x20000024
 800bbe0:	e000ef34 	.word	0xe000ef34

0800bbe4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b083      	sub	sp, #12
 800bbe8:	af00      	add	r7, sp, #0
	__asm volatile
 800bbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbee:	f383 8811 	msr	BASEPRI, r3
 800bbf2:	f3bf 8f6f 	isb	sy
 800bbf6:	f3bf 8f4f 	dsb	sy
 800bbfa:	607b      	str	r3, [r7, #4]
}
 800bbfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bbfe:	4b0f      	ldr	r3, [pc, #60]	; (800bc3c <vPortEnterCritical+0x58>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	3301      	adds	r3, #1
 800bc04:	4a0d      	ldr	r2, [pc, #52]	; (800bc3c <vPortEnterCritical+0x58>)
 800bc06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc08:	4b0c      	ldr	r3, [pc, #48]	; (800bc3c <vPortEnterCritical+0x58>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d10f      	bne.n	800bc30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bc10:	4b0b      	ldr	r3, [pc, #44]	; (800bc40 <vPortEnterCritical+0x5c>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d00a      	beq.n	800bc30 <vPortEnterCritical+0x4c>
	__asm volatile
 800bc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1e:	f383 8811 	msr	BASEPRI, r3
 800bc22:	f3bf 8f6f 	isb	sy
 800bc26:	f3bf 8f4f 	dsb	sy
 800bc2a:	603b      	str	r3, [r7, #0]
}
 800bc2c:	bf00      	nop
 800bc2e:	e7fe      	b.n	800bc2e <vPortEnterCritical+0x4a>
	}
}
 800bc30:	bf00      	nop
 800bc32:	370c      	adds	r7, #12
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr
 800bc3c:	20000024 	.word	0x20000024
 800bc40:	e000ed04 	.word	0xe000ed04

0800bc44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc4a:	4b12      	ldr	r3, [pc, #72]	; (800bc94 <vPortExitCritical+0x50>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d10a      	bne.n	800bc68 <vPortExitCritical+0x24>
	__asm volatile
 800bc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc56:	f383 8811 	msr	BASEPRI, r3
 800bc5a:	f3bf 8f6f 	isb	sy
 800bc5e:	f3bf 8f4f 	dsb	sy
 800bc62:	607b      	str	r3, [r7, #4]
}
 800bc64:	bf00      	nop
 800bc66:	e7fe      	b.n	800bc66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bc68:	4b0a      	ldr	r3, [pc, #40]	; (800bc94 <vPortExitCritical+0x50>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	3b01      	subs	r3, #1
 800bc6e:	4a09      	ldr	r2, [pc, #36]	; (800bc94 <vPortExitCritical+0x50>)
 800bc70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc72:	4b08      	ldr	r3, [pc, #32]	; (800bc94 <vPortExitCritical+0x50>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d105      	bne.n	800bc86 <vPortExitCritical+0x42>
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	f383 8811 	msr	BASEPRI, r3
}
 800bc84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc86:	bf00      	nop
 800bc88:	370c      	adds	r7, #12
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr
 800bc92:	bf00      	nop
 800bc94:	20000024 	.word	0x20000024
	...

0800bca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bca0:	f3ef 8009 	mrs	r0, PSP
 800bca4:	f3bf 8f6f 	isb	sy
 800bca8:	4b15      	ldr	r3, [pc, #84]	; (800bd00 <pxCurrentTCBConst>)
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	f01e 0f10 	tst.w	lr, #16
 800bcb0:	bf08      	it	eq
 800bcb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bcb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcba:	6010      	str	r0, [r2, #0]
 800bcbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bcc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bcc4:	f380 8811 	msr	BASEPRI, r0
 800bcc8:	f3bf 8f4f 	dsb	sy
 800bccc:	f3bf 8f6f 	isb	sy
 800bcd0:	f7fe fe94 	bl	800a9fc <vTaskSwitchContext>
 800bcd4:	f04f 0000 	mov.w	r0, #0
 800bcd8:	f380 8811 	msr	BASEPRI, r0
 800bcdc:	bc09      	pop	{r0, r3}
 800bcde:	6819      	ldr	r1, [r3, #0]
 800bce0:	6808      	ldr	r0, [r1, #0]
 800bce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce6:	f01e 0f10 	tst.w	lr, #16
 800bcea:	bf08      	it	eq
 800bcec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bcf0:	f380 8809 	msr	PSP, r0
 800bcf4:	f3bf 8f6f 	isb	sy
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop
 800bcfc:	f3af 8000 	nop.w

0800bd00 <pxCurrentTCBConst>:
 800bd00:	200066d4 	.word	0x200066d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd04:	bf00      	nop
 800bd06:	bf00      	nop

0800bd08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd12:	f383 8811 	msr	BASEPRI, r3
 800bd16:	f3bf 8f6f 	isb	sy
 800bd1a:	f3bf 8f4f 	dsb	sy
 800bd1e:	607b      	str	r3, [r7, #4]
}
 800bd20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd22:	f7fe fdb3 	bl	800a88c <xTaskIncrementTick>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d003      	beq.n	800bd34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd2c:	4b06      	ldr	r3, [pc, #24]	; (800bd48 <SysTick_Handler+0x40>)
 800bd2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd32:	601a      	str	r2, [r3, #0]
 800bd34:	2300      	movs	r3, #0
 800bd36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	f383 8811 	msr	BASEPRI, r3
}
 800bd3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd40:	bf00      	nop
 800bd42:	3708      	adds	r7, #8
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	e000ed04 	.word	0xe000ed04

0800bd4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd50:	4b0b      	ldr	r3, [pc, #44]	; (800bd80 <vPortSetupTimerInterrupt+0x34>)
 800bd52:	2200      	movs	r2, #0
 800bd54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd56:	4b0b      	ldr	r3, [pc, #44]	; (800bd84 <vPortSetupTimerInterrupt+0x38>)
 800bd58:	2200      	movs	r2, #0
 800bd5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd5c:	4b0a      	ldr	r3, [pc, #40]	; (800bd88 <vPortSetupTimerInterrupt+0x3c>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a0a      	ldr	r2, [pc, #40]	; (800bd8c <vPortSetupTimerInterrupt+0x40>)
 800bd62:	fba2 2303 	umull	r2, r3, r2, r3
 800bd66:	099b      	lsrs	r3, r3, #6
 800bd68:	4a09      	ldr	r2, [pc, #36]	; (800bd90 <vPortSetupTimerInterrupt+0x44>)
 800bd6a:	3b01      	subs	r3, #1
 800bd6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd6e:	4b04      	ldr	r3, [pc, #16]	; (800bd80 <vPortSetupTimerInterrupt+0x34>)
 800bd70:	2207      	movs	r2, #7
 800bd72:	601a      	str	r2, [r3, #0]
}
 800bd74:	bf00      	nop
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr
 800bd7e:	bf00      	nop
 800bd80:	e000e010 	.word	0xe000e010
 800bd84:	e000e018 	.word	0xe000e018
 800bd88:	20000004 	.word	0x20000004
 800bd8c:	10624dd3 	.word	0x10624dd3
 800bd90:	e000e014 	.word	0xe000e014

0800bd94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bd94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bda4 <vPortEnableVFP+0x10>
 800bd98:	6801      	ldr	r1, [r0, #0]
 800bd9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bd9e:	6001      	str	r1, [r0, #0]
 800bda0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bda2:	bf00      	nop
 800bda4:	e000ed88 	.word	0xe000ed88

0800bda8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bda8:	b480      	push	{r7}
 800bdaa:	b085      	sub	sp, #20
 800bdac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bdae:	f3ef 8305 	mrs	r3, IPSR
 800bdb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2b0f      	cmp	r3, #15
 800bdb8:	d914      	bls.n	800bde4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bdba:	4a17      	ldr	r2, [pc, #92]	; (800be18 <vPortValidateInterruptPriority+0x70>)
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bdc4:	4b15      	ldr	r3, [pc, #84]	; (800be1c <vPortValidateInterruptPriority+0x74>)
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	7afa      	ldrb	r2, [r7, #11]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d20a      	bcs.n	800bde4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd2:	f383 8811 	msr	BASEPRI, r3
 800bdd6:	f3bf 8f6f 	isb	sy
 800bdda:	f3bf 8f4f 	dsb	sy
 800bdde:	607b      	str	r3, [r7, #4]
}
 800bde0:	bf00      	nop
 800bde2:	e7fe      	b.n	800bde2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bde4:	4b0e      	ldr	r3, [pc, #56]	; (800be20 <vPortValidateInterruptPriority+0x78>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bdec:	4b0d      	ldr	r3, [pc, #52]	; (800be24 <vPortValidateInterruptPriority+0x7c>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d90a      	bls.n	800be0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bdf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf8:	f383 8811 	msr	BASEPRI, r3
 800bdfc:	f3bf 8f6f 	isb	sy
 800be00:	f3bf 8f4f 	dsb	sy
 800be04:	603b      	str	r3, [r7, #0]
}
 800be06:	bf00      	nop
 800be08:	e7fe      	b.n	800be08 <vPortValidateInterruptPriority+0x60>
	}
 800be0a:	bf00      	nop
 800be0c:	3714      	adds	r7, #20
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr
 800be16:	bf00      	nop
 800be18:	e000e3f0 	.word	0xe000e3f0
 800be1c:	200068fc 	.word	0x200068fc
 800be20:	e000ed0c 	.word	0xe000ed0c
 800be24:	20006900 	.word	0x20006900

0800be28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b08a      	sub	sp, #40	; 0x28
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800be30:	2300      	movs	r3, #0
 800be32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800be34:	f7fe fc5e 	bl	800a6f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800be38:	4b5b      	ldr	r3, [pc, #364]	; (800bfa8 <pvPortMalloc+0x180>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d101      	bne.n	800be44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800be40:	f000 f920 	bl	800c084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800be44:	4b59      	ldr	r3, [pc, #356]	; (800bfac <pvPortMalloc+0x184>)
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	4013      	ands	r3, r2
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	f040 8093 	bne.w	800bf78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d01d      	beq.n	800be94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800be58:	2208      	movs	r2, #8
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	4413      	add	r3, r2
 800be5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f003 0307 	and.w	r3, r3, #7
 800be66:	2b00      	cmp	r3, #0
 800be68:	d014      	beq.n	800be94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f023 0307 	bic.w	r3, r3, #7
 800be70:	3308      	adds	r3, #8
 800be72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f003 0307 	and.w	r3, r3, #7
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d00a      	beq.n	800be94 <pvPortMalloc+0x6c>
	__asm volatile
 800be7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be82:	f383 8811 	msr	BASEPRI, r3
 800be86:	f3bf 8f6f 	isb	sy
 800be8a:	f3bf 8f4f 	dsb	sy
 800be8e:	617b      	str	r3, [r7, #20]
}
 800be90:	bf00      	nop
 800be92:	e7fe      	b.n	800be92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d06e      	beq.n	800bf78 <pvPortMalloc+0x150>
 800be9a:	4b45      	ldr	r3, [pc, #276]	; (800bfb0 <pvPortMalloc+0x188>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d869      	bhi.n	800bf78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bea4:	4b43      	ldr	r3, [pc, #268]	; (800bfb4 <pvPortMalloc+0x18c>)
 800bea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bea8:	4b42      	ldr	r3, [pc, #264]	; (800bfb4 <pvPortMalloc+0x18c>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800beae:	e004      	b.n	800beba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800beb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800beb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800beba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d903      	bls.n	800becc <pvPortMalloc+0xa4>
 800bec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d1f1      	bne.n	800beb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800becc:	4b36      	ldr	r3, [pc, #216]	; (800bfa8 <pvPortMalloc+0x180>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d050      	beq.n	800bf78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bed6:	6a3b      	ldr	r3, [r7, #32]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	2208      	movs	r2, #8
 800bedc:	4413      	add	r3, r2
 800bede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	6a3b      	ldr	r3, [r7, #32]
 800bee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beea:	685a      	ldr	r2, [r3, #4]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	1ad2      	subs	r2, r2, r3
 800bef0:	2308      	movs	r3, #8
 800bef2:	005b      	lsls	r3, r3, #1
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d91f      	bls.n	800bf38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4413      	add	r3, r2
 800befe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	f003 0307 	and.w	r3, r3, #7
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d00a      	beq.n	800bf20 <pvPortMalloc+0xf8>
	__asm volatile
 800bf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0e:	f383 8811 	msr	BASEPRI, r3
 800bf12:	f3bf 8f6f 	isb	sy
 800bf16:	f3bf 8f4f 	dsb	sy
 800bf1a:	613b      	str	r3, [r7, #16]
}
 800bf1c:	bf00      	nop
 800bf1e:	e7fe      	b.n	800bf1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf22:	685a      	ldr	r2, [r3, #4]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	1ad2      	subs	r2, r2, r3
 800bf28:	69bb      	ldr	r3, [r7, #24]
 800bf2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bf32:	69b8      	ldr	r0, [r7, #24]
 800bf34:	f000 f908 	bl	800c148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bf38:	4b1d      	ldr	r3, [pc, #116]	; (800bfb0 <pvPortMalloc+0x188>)
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	1ad3      	subs	r3, r2, r3
 800bf42:	4a1b      	ldr	r2, [pc, #108]	; (800bfb0 <pvPortMalloc+0x188>)
 800bf44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bf46:	4b1a      	ldr	r3, [pc, #104]	; (800bfb0 <pvPortMalloc+0x188>)
 800bf48:	681a      	ldr	r2, [r3, #0]
 800bf4a:	4b1b      	ldr	r3, [pc, #108]	; (800bfb8 <pvPortMalloc+0x190>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d203      	bcs.n	800bf5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bf52:	4b17      	ldr	r3, [pc, #92]	; (800bfb0 <pvPortMalloc+0x188>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4a18      	ldr	r2, [pc, #96]	; (800bfb8 <pvPortMalloc+0x190>)
 800bf58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5c:	685a      	ldr	r2, [r3, #4]
 800bf5e:	4b13      	ldr	r3, [pc, #76]	; (800bfac <pvPortMalloc+0x184>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	431a      	orrs	r2, r3
 800bf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bf6e:	4b13      	ldr	r3, [pc, #76]	; (800bfbc <pvPortMalloc+0x194>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	3301      	adds	r3, #1
 800bf74:	4a11      	ldr	r2, [pc, #68]	; (800bfbc <pvPortMalloc+0x194>)
 800bf76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bf78:	f7fe fbca 	bl	800a710 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf7c:	69fb      	ldr	r3, [r7, #28]
 800bf7e:	f003 0307 	and.w	r3, r3, #7
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d00a      	beq.n	800bf9c <pvPortMalloc+0x174>
	__asm volatile
 800bf86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8a:	f383 8811 	msr	BASEPRI, r3
 800bf8e:	f3bf 8f6f 	isb	sy
 800bf92:	f3bf 8f4f 	dsb	sy
 800bf96:	60fb      	str	r3, [r7, #12]
}
 800bf98:	bf00      	nop
 800bf9a:	e7fe      	b.n	800bf9a <pvPortMalloc+0x172>
	return pvReturn;
 800bf9c:	69fb      	ldr	r3, [r7, #28]
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3728      	adds	r7, #40	; 0x28
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	2000f994 	.word	0x2000f994
 800bfac:	2000f9a8 	.word	0x2000f9a8
 800bfb0:	2000f998 	.word	0x2000f998
 800bfb4:	2000f98c 	.word	0x2000f98c
 800bfb8:	2000f99c 	.word	0x2000f99c
 800bfbc:	2000f9a0 	.word	0x2000f9a0

0800bfc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b086      	sub	sp, #24
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d04d      	beq.n	800c06e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bfd2:	2308      	movs	r3, #8
 800bfd4:	425b      	negs	r3, r3
 800bfd6:	697a      	ldr	r2, [r7, #20]
 800bfd8:	4413      	add	r3, r2
 800bfda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	685a      	ldr	r2, [r3, #4]
 800bfe4:	4b24      	ldr	r3, [pc, #144]	; (800c078 <vPortFree+0xb8>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4013      	ands	r3, r2
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d10a      	bne.n	800c004 <vPortFree+0x44>
	__asm volatile
 800bfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff2:	f383 8811 	msr	BASEPRI, r3
 800bff6:	f3bf 8f6f 	isb	sy
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	60fb      	str	r3, [r7, #12]
}
 800c000:	bf00      	nop
 800c002:	e7fe      	b.n	800c002 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00a      	beq.n	800c022 <vPortFree+0x62>
	__asm volatile
 800c00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c010:	f383 8811 	msr	BASEPRI, r3
 800c014:	f3bf 8f6f 	isb	sy
 800c018:	f3bf 8f4f 	dsb	sy
 800c01c:	60bb      	str	r3, [r7, #8]
}
 800c01e:	bf00      	nop
 800c020:	e7fe      	b.n	800c020 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	685a      	ldr	r2, [r3, #4]
 800c026:	4b14      	ldr	r3, [pc, #80]	; (800c078 <vPortFree+0xb8>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4013      	ands	r3, r2
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d01e      	beq.n	800c06e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d11a      	bne.n	800c06e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	685a      	ldr	r2, [r3, #4]
 800c03c:	4b0e      	ldr	r3, [pc, #56]	; (800c078 <vPortFree+0xb8>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	43db      	mvns	r3, r3
 800c042:	401a      	ands	r2, r3
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c048:	f7fe fb54 	bl	800a6f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	685a      	ldr	r2, [r3, #4]
 800c050:	4b0a      	ldr	r3, [pc, #40]	; (800c07c <vPortFree+0xbc>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4413      	add	r3, r2
 800c056:	4a09      	ldr	r2, [pc, #36]	; (800c07c <vPortFree+0xbc>)
 800c058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c05a:	6938      	ldr	r0, [r7, #16]
 800c05c:	f000 f874 	bl	800c148 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c060:	4b07      	ldr	r3, [pc, #28]	; (800c080 <vPortFree+0xc0>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	3301      	adds	r3, #1
 800c066:	4a06      	ldr	r2, [pc, #24]	; (800c080 <vPortFree+0xc0>)
 800c068:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c06a:	f7fe fb51 	bl	800a710 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c06e:	bf00      	nop
 800c070:	3718      	adds	r7, #24
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	2000f9a8 	.word	0x2000f9a8
 800c07c:	2000f998 	.word	0x2000f998
 800c080:	2000f9a4 	.word	0x2000f9a4

0800c084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c084:	b480      	push	{r7}
 800c086:	b085      	sub	sp, #20
 800c088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c08a:	f249 0388 	movw	r3, #37000	; 0x9088
 800c08e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c090:	4b27      	ldr	r3, [pc, #156]	; (800c130 <prvHeapInit+0xac>)
 800c092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f003 0307 	and.w	r3, r3, #7
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d00c      	beq.n	800c0b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	3307      	adds	r3, #7
 800c0a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f023 0307 	bic.w	r3, r3, #7
 800c0aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c0ac:	68ba      	ldr	r2, [r7, #8]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	1ad3      	subs	r3, r2, r3
 800c0b2:	4a1f      	ldr	r2, [pc, #124]	; (800c130 <prvHeapInit+0xac>)
 800c0b4:	4413      	add	r3, r2
 800c0b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c0bc:	4a1d      	ldr	r2, [pc, #116]	; (800c134 <prvHeapInit+0xb0>)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c0c2:	4b1c      	ldr	r3, [pc, #112]	; (800c134 <prvHeapInit+0xb0>)
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	68ba      	ldr	r2, [r7, #8]
 800c0cc:	4413      	add	r3, r2
 800c0ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c0d0:	2208      	movs	r2, #8
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	1a9b      	subs	r3, r3, r2
 800c0d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f023 0307 	bic.w	r3, r3, #7
 800c0de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	4a15      	ldr	r2, [pc, #84]	; (800c138 <prvHeapInit+0xb4>)
 800c0e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c0e6:	4b14      	ldr	r3, [pc, #80]	; (800c138 <prvHeapInit+0xb4>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c0ee:	4b12      	ldr	r3, [pc, #72]	; (800c138 <prvHeapInit+0xb4>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	68fa      	ldr	r2, [r7, #12]
 800c0fe:	1ad2      	subs	r2, r2, r3
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c104:	4b0c      	ldr	r3, [pc, #48]	; (800c138 <prvHeapInit+0xb4>)
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	4a0a      	ldr	r2, [pc, #40]	; (800c13c <prvHeapInit+0xb8>)
 800c112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	4a09      	ldr	r2, [pc, #36]	; (800c140 <prvHeapInit+0xbc>)
 800c11a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c11c:	4b09      	ldr	r3, [pc, #36]	; (800c144 <prvHeapInit+0xc0>)
 800c11e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c122:	601a      	str	r2, [r3, #0]
}
 800c124:	bf00      	nop
 800c126:	3714      	adds	r7, #20
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr
 800c130:	20006904 	.word	0x20006904
 800c134:	2000f98c 	.word	0x2000f98c
 800c138:	2000f994 	.word	0x2000f994
 800c13c:	2000f99c 	.word	0x2000f99c
 800c140:	2000f998 	.word	0x2000f998
 800c144:	2000f9a8 	.word	0x2000f9a8

0800c148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c148:	b480      	push	{r7}
 800c14a:	b085      	sub	sp, #20
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c150:	4b28      	ldr	r3, [pc, #160]	; (800c1f4 <prvInsertBlockIntoFreeList+0xac>)
 800c152:	60fb      	str	r3, [r7, #12]
 800c154:	e002      	b.n	800c15c <prvInsertBlockIntoFreeList+0x14>
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	60fb      	str	r3, [r7, #12]
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	429a      	cmp	r2, r3
 800c164:	d8f7      	bhi.n	800c156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	68ba      	ldr	r2, [r7, #8]
 800c170:	4413      	add	r3, r2
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	429a      	cmp	r2, r3
 800c176:	d108      	bne.n	800c18a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	685a      	ldr	r2, [r3, #4]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	441a      	add	r2, r3
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	68ba      	ldr	r2, [r7, #8]
 800c194:	441a      	add	r2, r3
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d118      	bne.n	800c1d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681a      	ldr	r2, [r3, #0]
 800c1a2:	4b15      	ldr	r3, [pc, #84]	; (800c1f8 <prvInsertBlockIntoFreeList+0xb0>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d00d      	beq.n	800c1c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	685a      	ldr	r2, [r3, #4]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	441a      	add	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	601a      	str	r2, [r3, #0]
 800c1c4:	e008      	b.n	800c1d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c1c6:	4b0c      	ldr	r3, [pc, #48]	; (800c1f8 <prvInsertBlockIntoFreeList+0xb0>)
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	601a      	str	r2, [r3, #0]
 800c1ce:	e003      	b.n	800c1d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c1d8:	68fa      	ldr	r2, [r7, #12]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d002      	beq.n	800c1e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1e6:	bf00      	nop
 800c1e8:	3714      	adds	r7, #20
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr
 800c1f2:	bf00      	nop
 800c1f4:	2000f98c 	.word	0x2000f98c
 800c1f8:	2000f994 	.word	0x2000f994

0800c1fc <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 800c1fc:	b480      	push	{r7}
 800c1fe:	b083      	sub	sp, #12
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 800c206:	683a      	ldr	r2, [r7, #0]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4293      	cmp	r3, r2
 800c20c:	bf38      	it	cc
 800c20e:	4613      	movcc	r3, r2
}
 800c210:	4618      	mov	r0, r3
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 800c21c:	b480      	push	{r7}
 800c21e:	b083      	sub	sp, #12
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800c226:	683a      	ldr	r2, [r7, #0]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4293      	cmp	r3, r2
 800c22c:	bf28      	it	cs
 800c22e:	4613      	movcs	r3, r2
}
 800c230:	4618      	mov	r0, r3
 800c232:	370c      	adds	r7, #12
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr

0800c23c <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 800c23c:	b480      	push	{r7}
 800c23e:	b083      	sub	sp, #12
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	683a      	ldr	r2, [r7, #0]
 800c24a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c24e:	6839      	ldr	r1, [r7, #0]
 800c250:	fb01 f202 	mul.w	r2, r1, r2
 800c254:	1a9b      	subs	r3, r3, r2
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	1ad3      	subs	r3, r2, r3
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	370c      	adds	r7, #12
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr

0800c266 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 800c266:	b580      	push	{r7, lr}
 800c268:	b082      	sub	sp, #8
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
 800c26e:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	4413      	add	r3, r2
 800c276:	3b01      	subs	r3, #1
 800c278:	6839      	ldr	r1, [r7, #0]
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7ff ffde 	bl	800c23c <lfs_aligndown>
 800c280:	4603      	mov	r3, r0
}
 800c282:	4618      	mov	r0, r3
 800c284:	3708      	adds	r7, #8
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}

0800c28a <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800c28a:	b480      	push	{r7}
 800c28c:	b083      	sub	sp, #12
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	3b01      	subs	r3, #1
 800c296:	fab3 f383 	clz	r3, r3
 800c29a:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	370c      	adds	r7, #12
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr

0800c2aa <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800c2aa:	b480      	push	{r7}
 800c2ac:	b083      	sub	sp, #12
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	fa93 f3a3 	rbit	r3, r3
 800c2b8:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	370c      	adds	r7, #12
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b082      	sub	sp, #8
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f7f4 fc91 	bl	8000bf8 <__popcountsi2>
 800c2d6:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3708      	adds	r7, #8
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 800c2e0:	b480      	push	{r7}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	1ad3      	subs	r3, r2, r3
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	370c      	adds	r7, #12
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr

0800c2fc <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return a;
 800c304:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 800c306:	4618      	mov	r0, r3
 800c308:	370c      	adds	r7, #12
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr

0800c312 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 800c312:	b580      	push	{r7, lr}
 800c314:	b082      	sub	sp, #8
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f7ff ffee 	bl	800c2fc <lfs_fromle32>
 800c320:	4603      	mov	r3, r0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3708      	adds	r7, #8
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}

0800c32a <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 800c32a:	b480      	push	{r7}
 800c32c:	b083      	sub	sp, #12
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 800c336:	4618      	mov	r0, r3
 800c338:	370c      	adds	r7, #12
 800c33a:	46bd      	mov	sp, r7
 800c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c340:	4770      	bx	lr

0800c342 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 800c342:	b580      	push	{r7, lr}
 800c344:	b082      	sub	sp, #8
 800c346:	af00      	add	r7, sp, #0
 800c348:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f7ff ffed 	bl	800c32a <lfs_frombe32>
 800c350:	4603      	mov	r3, r0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3708      	adds	r7, #8
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 800c35a:	b580      	push	{r7, lr}
 800c35c:	b082      	sub	sp, #8
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f017 f804 	bl	8023370 <malloc>
 800c368:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3708      	adds	r7, #8
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}

0800c372 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 800c372:	b580      	push	{r7, lr}
 800c374:	b082      	sub	sp, #8
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f017 f800 	bl	8023380 <free>
#else
    (void)p;
#endif
}
 800c380:	bf00      	nop
 800c382:	3708      	adds	r7, #8
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <lfs_cache_drop>:
int lfs_mounted;
lfs_t lfs;
struct lfs_config cfg;

/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c398:	601a      	str	r2, [r3, #0]
}
 800c39a:	bf00      	nop
 800c39c:	370c      	adds	r7, #12
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr

0800c3a6 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	b082      	sub	sp, #8
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
 800c3ae:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	68d8      	ldr	r0, [r3, #12]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	21ff      	movs	r1, #255	; 0xff
 800c3be:	f017 ffcf 	bl	8024360 <memset>
    pcache->block = LFS_BLOCK_NULL;
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3c8:	601a      	str	r2, [r3, #0]
}
 800c3ca:	bf00      	nop
 800c3cc:	3708      	adds	r7, #8
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
	...

0800c3d4 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 800c3d4:	b5b0      	push	{r4, r5, r7, lr}
 800c3d6:	b08a      	sub	sp, #40	; 0x28
 800c3d8:	af02      	add	r7, sp, #8
 800c3da:	60f8      	str	r0, [r7, #12]
 800c3dc:	60b9      	str	r1, [r7, #8]
 800c3de:	607a      	str	r2, [r7, #4]
 800c3e0:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800c3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e4:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3ea:	6a1b      	ldr	r3, [r3, #32]
 800c3ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d208      	bcs.n	800c404 <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 800c3f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3f6:	441a      	add	r2, r3
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3fc:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 800c3fe:	429a      	cmp	r2, r3
 800c400:	f240 811b 	bls.w	800c63a <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 800c404:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800c408:	e11c      	b.n	800c644 <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800c40a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c40c:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d03f      	beq.n	800c494 <lfs_bd_read+0xc0>
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d13a      	bne.n	800c494 <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	685a      	ldr	r2, [r3, #4]
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 800c428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d232      	bcs.n	800c494 <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c434:	429a      	cmp	r2, r3
 800c436:	d324      	bcc.n	800c482 <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	689a      	ldr	r2, [r3, #8]
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	6859      	ldr	r1, [r3, #4]
 800c440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c442:	1acb      	subs	r3, r1, r3
 800c444:	4413      	add	r3, r2
 800c446:	4619      	mov	r1, r3
 800c448:	69b8      	ldr	r0, [r7, #24]
 800c44a:	f7ff fee7 	bl	800c21c <lfs_min>
 800c44e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	68da      	ldr	r2, [r3, #12]
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c45a:	1acb      	subs	r3, r1, r3
 800c45c:	4413      	add	r3, r2
 800c45e:	69ba      	ldr	r2, [r7, #24]
 800c460:	4619      	mov	r1, r3
 800c462:	69f8      	ldr	r0, [r7, #28]
 800c464:	f018 f8a1 	bl	80245aa <memcpy>

                data += diff;
 800c468:	69fa      	ldr	r2, [r7, #28]
 800c46a:	69bb      	ldr	r3, [r7, #24]
 800c46c:	4413      	add	r3, r2
 800c46e:	61fb      	str	r3, [r7, #28]
                off += diff;
 800c470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c472:	69bb      	ldr	r3, [r7, #24]
 800c474:	4413      	add	r3, r2
 800c476:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800c478:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c47a:	69bb      	ldr	r3, [r7, #24]
 800c47c:	1ad3      	subs	r3, r2, r3
 800c47e:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800c480:	e0db      	b.n	800c63a <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	685a      	ldr	r2, [r3, #4]
 800c486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c488:	1ad3      	subs	r3, r2, r3
 800c48a:	4619      	mov	r1, r3
 800c48c:	69b8      	ldr	r0, [r7, #24]
 800c48e:	f7ff fec5 	bl	800c21c <lfs_min>
 800c492:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d13a      	bne.n	800c514 <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	685a      	ldr	r2, [r3, #4]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	4413      	add	r3, r2
        if (block == rcache->block &&
 800c4a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d232      	bcs.n	800c514 <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d324      	bcc.n	800c502 <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	689a      	ldr	r2, [r3, #8]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6859      	ldr	r1, [r3, #4]
 800c4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c2:	1acb      	subs	r3, r1, r3
 800c4c4:	4413      	add	r3, r2
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	69b8      	ldr	r0, [r7, #24]
 800c4ca:	f7ff fea7 	bl	800c21c <lfs_min>
 800c4ce:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	68da      	ldr	r2, [r3, #12]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c4da:	1acb      	subs	r3, r1, r3
 800c4dc:	4413      	add	r3, r2
 800c4de:	69ba      	ldr	r2, [r7, #24]
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	69f8      	ldr	r0, [r7, #28]
 800c4e4:	f018 f861 	bl	80245aa <memcpy>

                data += diff;
 800c4e8:	69fa      	ldr	r2, [r7, #28]
 800c4ea:	69bb      	ldr	r3, [r7, #24]
 800c4ec:	4413      	add	r3, r2
 800c4ee:	61fb      	str	r3, [r7, #28]
                off += diff;
 800c4f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800c4f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c4fa:	69bb      	ldr	r3, [r7, #24]
 800c4fc:	1ad3      	subs	r3, r2, r3
 800c4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800c500:	e09b      	b.n	800c63a <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	685a      	ldr	r2, [r3, #4]
 800c506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c508:	1ad3      	subs	r3, r2, r3
 800c50a:	4619      	mov	r1, r3
 800c50c:	69b8      	ldr	r0, [r7, #24]
 800c50e:	f7ff fe85 	bl	800c21c <lfs_min>
 800c512:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800c514:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	429a      	cmp	r2, r3
 800c51a:	d336      	bcc.n	800c58a <lfs_bd_read+0x1b6>
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c520:	695a      	ldr	r2, [r3, #20]
 800c522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c524:	fbb3 f1f2 	udiv	r1, r3, r2
 800c528:	fb01 f202 	mul.w	r2, r1, r2
 800c52c:	1a9b      	subs	r3, r3, r2
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d12b      	bne.n	800c58a <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c536:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800c538:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d325      	bcc.n	800c58a <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c542:	695b      	ldr	r3, [r3, #20]
 800c544:	4619      	mov	r1, r3
 800c546:	69b8      	ldr	r0, [r7, #24]
 800c548:	f7ff fe78 	bl	800c23c <lfs_aligndown>
 800c54c:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c552:	685c      	ldr	r4, [r3, #4]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800c558:	69bb      	ldr	r3, [r7, #24]
 800c55a:	9300      	str	r3, [sp, #0]
 800c55c:	69fb      	ldr	r3, [r7, #28]
 800c55e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c560:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c562:	47a0      	blx	r4
 800c564:	6178      	str	r0, [r7, #20]
            if (err) {
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d001      	beq.n	800c570 <lfs_bd_read+0x19c>
                return err;
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	e069      	b.n	800c644 <lfs_bd_read+0x270>
            }

            data += diff;
 800c570:	69fa      	ldr	r2, [r7, #28]
 800c572:	69bb      	ldr	r3, [r7, #24]
 800c574:	4413      	add	r3, r2
 800c576:	61fb      	str	r3, [r7, #28]
            off += diff;
 800c578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c57a:	69bb      	ldr	r3, [r7, #24]
 800c57c:	4413      	add	r3, r2
 800c57e:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 800c580:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c582:	69bb      	ldr	r3, [r7, #24]
 800c584:	1ad3      	subs	r3, r2, r3
 800c586:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 800c588:	e057      	b.n	800c63a <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c58e:	6a1b      	ldr	r3, [r3, #32]
 800c590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c592:	429a      	cmp	r2, r3
 800c594:	d305      	bcc.n	800c5a2 <lfs_bd_read+0x1ce>
 800c596:	4b2d      	ldr	r3, [pc, #180]	; (800c64c <lfs_bd_read+0x278>)
 800c598:	4a2d      	ldr	r2, [pc, #180]	; (800c650 <lfs_bd_read+0x27c>)
 800c59a:	215e      	movs	r1, #94	; 0x5e
 800c59c:	482d      	ldr	r0, [pc, #180]	; (800c654 <lfs_bd_read+0x280>)
 800c59e:	f016 fec9 	bl	8023334 <__assert_func>
        rcache->block = block;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5a6:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c5ac:	695b      	ldr	r3, [r3, #20]
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c5b2:	f7ff fe43 	bl	800c23c <lfs_aligndown>
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 800c5bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c5c6:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	4610      	mov	r0, r2
 800c5cc:	f7ff fe4b 	bl	800c266 <lfs_alignup>
 800c5d0:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c5d6:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 800c5d8:	4619      	mov	r1, r3
 800c5da:	4610      	mov	r0, r2
 800c5dc:	f7ff fe1e 	bl	800c21c <lfs_min>
 800c5e0:	4602      	mov	r2, r0
                - rcache->off,
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 800c5e6:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c5ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(
 800c5ee:	4619      	mov	r1, r3
 800c5f0:	4610      	mov	r0, r2
 800c5f2:	f7ff fe13 	bl	800c21c <lfs_min>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c600:	685c      	ldr	r4, [r3, #4]
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6819      	ldr	r1, [r3, #0]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	9300      	str	r3, [sp, #0]
 800c618:	462b      	mov	r3, r5
 800c61a:	47a0      	blx	r4
 800c61c:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	2b00      	cmp	r3, #0
 800c622:	dd05      	ble.n	800c630 <lfs_bd_read+0x25c>
 800c624:	4b0c      	ldr	r3, [pc, #48]	; (800c658 <lfs_bd_read+0x284>)
 800c626:	4a0a      	ldr	r2, [pc, #40]	; (800c650 <lfs_bd_read+0x27c>)
 800c628:	2169      	movs	r1, #105	; 0x69
 800c62a:	480a      	ldr	r0, [pc, #40]	; (800c654 <lfs_bd_read+0x280>)
 800c62c:	f016 fe82 	bl	8023334 <__assert_func>
        if (err) {
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d001      	beq.n	800c63a <lfs_bd_read+0x266>
            return err;
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	e004      	b.n	800c644 <lfs_bd_read+0x270>
    while (size > 0) {
 800c63a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	f47f aee4 	bne.w	800c40a <lfs_bd_read+0x36>
        }
    }

    return 0;
 800c642:	2300      	movs	r3, #0
}
 800c644:	4618      	mov	r0, r3
 800c646:	3720      	adds	r7, #32
 800c648:	46bd      	mov	sp, r7
 800c64a:	bdb0      	pop	{r4, r5, r7, pc}
 800c64c:	08026df8 	.word	0x08026df8
 800c650:	0802acf4 	.word	0x0802acf4
 800c654:	08026e18 	.word	0x08026e18
 800c658:	08026e44 	.word	0x08026e44

0800c65c <lfs_bd_cmp>:
};

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b08e      	sub	sp, #56	; 0x38
 800c660:	af04      	add	r7, sp, #16
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	607a      	str	r2, [r7, #4]
 800c668:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800c66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66c:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 800c66e:	2300      	movs	r3, #0
 800c670:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 800c672:	2300      	movs	r3, #0
 800c674:	627b      	str	r3, [r7, #36]	; 0x24
 800c676:	e039      	b.n	800c6ec <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 800c678:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67c:	1ad3      	subs	r3, r2, r3
 800c67e:	2108      	movs	r1, #8
 800c680:	4618      	mov	r0, r3
 800c682:	f7ff fdcb 	bl	800c21c <lfs_min>
 800c686:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 800c688:	683a      	ldr	r2, [r7, #0]
 800c68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c68c:	1ad1      	subs	r1, r2, r3
 800c68e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c692:	4413      	add	r3, r2
 800c694:	69fa      	ldr	r2, [r7, #28]
 800c696:	9203      	str	r2, [sp, #12]
 800c698:	f107 0210 	add.w	r2, r7, #16
 800c69c:	9202      	str	r2, [sp, #8]
 800c69e:	9301      	str	r3, [sp, #4]
 800c6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	68b9      	ldr	r1, [r7, #8]
 800c6aa:	68f8      	ldr	r0, [r7, #12]
 800c6ac:	f7ff fe92 	bl	800c3d4 <lfs_bd_read>
 800c6b0:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 800c6b2:	69bb      	ldr	r3, [r7, #24]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d001      	beq.n	800c6bc <lfs_bd_cmp+0x60>
            return res;
 800c6b8:	69bb      	ldr	r3, [r7, #24]
 800c6ba:	e01c      	b.n	800c6f6 <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 800c6bc:	6a3a      	ldr	r2, [r7, #32]
 800c6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c0:	18d1      	adds	r1, r2, r3
 800c6c2:	f107 0310 	add.w	r3, r7, #16
 800c6c6:	69fa      	ldr	r2, [r7, #28]
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f017 fe1f 	bl	802430c <memcmp>
 800c6ce:	61b8      	str	r0, [r7, #24]
        if (res) {
 800c6d0:	69bb      	ldr	r3, [r7, #24]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d006      	beq.n	800c6e4 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 800c6d6:	69bb      	ldr	r3, [r7, #24]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	da01      	bge.n	800c6e0 <lfs_bd_cmp+0x84>
 800c6dc:	2301      	movs	r3, #1
 800c6de:	e00a      	b.n	800c6f6 <lfs_bd_cmp+0x9a>
 800c6e0:	2302      	movs	r3, #2
 800c6e2:	e008      	b.n	800c6f6 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 800c6e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6e6:	69fb      	ldr	r3, [r7, #28]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	627b      	str	r3, [r7, #36]	; 0x24
 800c6ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d3c1      	bcc.n	800c678 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 800c6f4:	2300      	movs	r3, #0
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3728      	adds	r7, #40	; 0x28
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
	...

0800c700 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800c700:	b5b0      	push	{r4, r5, r7, lr}
 800c702:	b08c      	sub	sp, #48	; 0x30
 800c704:	af04      	add	r7, sp, #16
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	60b9      	str	r1, [r7, #8]
 800c70a:	607a      	str	r2, [r7, #4]
 800c70c:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c716:	d061      	beq.n	800c7dc <lfs_bd_flush+0xdc>
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f113 0f02 	cmn.w	r3, #2
 800c720:	d05c      	beq.n	800c7dc <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	681a      	ldr	r2, [r3, #0]
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c72a:	6a1b      	ldr	r3, [r3, #32]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d305      	bcc.n	800c73c <lfs_bd_flush+0x3c>
 800c730:	4b2d      	ldr	r3, [pc, #180]	; (800c7e8 <lfs_bd_flush+0xe8>)
 800c732:	4a2e      	ldr	r2, [pc, #184]	; (800c7ec <lfs_bd_flush+0xec>)
 800c734:	2197      	movs	r1, #151	; 0x97
 800c736:	482e      	ldr	r0, [pc, #184]	; (800c7f0 <lfs_bd_flush+0xf0>)
 800c738:	f016 fdfc 	bl	8023334 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	689a      	ldr	r2, [r3, #8]
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c744:	699b      	ldr	r3, [r3, #24]
 800c746:	4619      	mov	r1, r3
 800c748:	4610      	mov	r0, r2
 800c74a:	f7ff fd8c 	bl	800c266 <lfs_alignup>
 800c74e:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c754:	689c      	ldr	r4, [r3, #8]
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	6819      	ldr	r1, [r3, #0]
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800c766:	69fb      	ldr	r3, [r7, #28]
 800c768:	9300      	str	r3, [sp, #0]
 800c76a:	462b      	mov	r3, r5
 800c76c:	47a0      	blx	r4
 800c76e:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	2b00      	cmp	r3, #0
 800c774:	dd05      	ble.n	800c782 <lfs_bd_flush+0x82>
 800c776:	4b1f      	ldr	r3, [pc, #124]	; (800c7f4 <lfs_bd_flush+0xf4>)
 800c778:	4a1c      	ldr	r2, [pc, #112]	; (800c7ec <lfs_bd_flush+0xec>)
 800c77a:	219b      	movs	r1, #155	; 0x9b
 800c77c:	481c      	ldr	r0, [pc, #112]	; (800c7f0 <lfs_bd_flush+0xf0>)
 800c77e:	f016 fdd9 	bl	8023334 <__assert_func>
        if (err) {
 800c782:	69bb      	ldr	r3, [r7, #24]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d001      	beq.n	800c78c <lfs_bd_flush+0x8c>
            return err;
 800c788:	69bb      	ldr	r3, [r7, #24]
 800c78a:	e028      	b.n	800c7de <lfs_bd_flush+0xde>
        }

        if (validate) {
 800c78c:	78fb      	ldrb	r3, [r7, #3]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d020      	beq.n	800c7d4 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 800c792:	6879      	ldr	r1, [r7, #4]
 800c794:	68f8      	ldr	r0, [r7, #12]
 800c796:	f7ff fdf7 	bl	800c388 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	68ba      	ldr	r2, [r7, #8]
 800c7a0:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 800c7a2:	68b9      	ldr	r1, [r7, #8]
 800c7a4:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 800c7a6:	69f8      	ldr	r0, [r7, #28]
 800c7a8:	9003      	str	r0, [sp, #12]
 800c7aa:	9102      	str	r1, [sp, #8]
 800c7ac:	9201      	str	r2, [sp, #4]
 800c7ae:	9300      	str	r3, [sp, #0]
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	2100      	movs	r1, #0
 800c7b6:	68f8      	ldr	r0, [r7, #12]
 800c7b8:	f7ff ff50 	bl	800c65c <lfs_bd_cmp>
 800c7bc:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	da01      	bge.n	800c7c8 <lfs_bd_flush+0xc8>
                return res;
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	e00a      	b.n	800c7de <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d002      	beq.n	800c7d4 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 800c7ce:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800c7d2:	e004      	b.n	800c7de <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 800c7d4:	68b9      	ldr	r1, [r7, #8]
 800c7d6:	68f8      	ldr	r0, [r7, #12]
 800c7d8:	f7ff fde5 	bl	800c3a6 <lfs_cache_zero>
    }

    return 0;
 800c7dc:	2300      	movs	r3, #0
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3720      	adds	r7, #32
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bdb0      	pop	{r4, r5, r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	08026e50 	.word	0x08026e50
 800c7ec:	0802ad00 	.word	0x0802ad00
 800c7f0:	08026e18 	.word	0x08026e18
 800c7f4:	08026e44 	.word	0x08026e44

0800c7f8 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b086      	sub	sp, #24
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	60b9      	str	r1, [r7, #8]
 800c802:	607a      	str	r2, [r7, #4]
 800c804:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 800c806:	6879      	ldr	r1, [r7, #4]
 800c808:	68f8      	ldr	r0, [r7, #12]
 800c80a:	f7ff fdbd 	bl	800c388 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800c80e:	78fb      	ldrb	r3, [r7, #3]
 800c810:	687a      	ldr	r2, [r7, #4]
 800c812:	68b9      	ldr	r1, [r7, #8]
 800c814:	68f8      	ldr	r0, [r7, #12]
 800c816:	f7ff ff73 	bl	800c700 <lfs_bd_flush>
 800c81a:	6178      	str	r0, [r7, #20]
    if (err) {
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d001      	beq.n	800c826 <lfs_bd_sync+0x2e>
        return err;
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	e011      	b.n	800c84a <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c82a:	691b      	ldr	r3, [r3, #16]
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c830:	4610      	mov	r0, r2
 800c832:	4798      	blx	r3
 800c834:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	dd05      	ble.n	800c848 <lfs_bd_sync+0x50>
 800c83c:	4b05      	ldr	r3, [pc, #20]	; (800c854 <lfs_bd_sync+0x5c>)
 800c83e:	4a06      	ldr	r2, [pc, #24]	; (800c858 <lfs_bd_sync+0x60>)
 800c840:	21c1      	movs	r1, #193	; 0xc1
 800c842:	4806      	ldr	r0, [pc, #24]	; (800c85c <lfs_bd_sync+0x64>)
 800c844:	f016 fd76 	bl	8023334 <__assert_func>
    return err;
 800c848:	697b      	ldr	r3, [r7, #20]
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3718      	adds	r7, #24
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	08026e44 	.word	0x08026e44
 800c858:	0802ad10 	.word	0x0802ad10
 800c85c:	08026e18 	.word	0x08026e18

0800c860 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800c860:	b580      	push	{r7, lr}
 800c862:	b088      	sub	sp, #32
 800c864:	af00      	add	r7, sp, #0
 800c866:	60f8      	str	r0, [r7, #12]
 800c868:	60b9      	str	r1, [r7, #8]
 800c86a:	607a      	str	r2, [r7, #4]
 800c86c:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 800c86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c870:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 800c872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c874:	f113 0f02 	cmn.w	r3, #2
 800c878:	d00b      	beq.n	800c892 <lfs_bd_prog+0x32>
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c87e:	6a1b      	ldr	r3, [r3, #32]
 800c880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c882:	429a      	cmp	r2, r3
 800c884:	d305      	bcc.n	800c892 <lfs_bd_prog+0x32>
 800c886:	4b47      	ldr	r3, [pc, #284]	; (800c9a4 <lfs_bd_prog+0x144>)
 800c888:	4a47      	ldr	r2, [pc, #284]	; (800c9a8 <lfs_bd_prog+0x148>)
 800c88a:	21cc      	movs	r1, #204	; 0xcc
 800c88c:	4847      	ldr	r0, [pc, #284]	; (800c9ac <lfs_bd_prog+0x14c>)
 800c88e:	f016 fd51 	bl	8023334 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800c892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c896:	441a      	add	r2, r3
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c89c:	69db      	ldr	r3, [r3, #28]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d977      	bls.n	800c992 <lfs_bd_prog+0x132>
 800c8a2:	4b43      	ldr	r3, [pc, #268]	; (800c9b0 <lfs_bd_prog+0x150>)
 800c8a4:	4a40      	ldr	r2, [pc, #256]	; (800c9a8 <lfs_bd_prog+0x148>)
 800c8a6:	21cd      	movs	r1, #205	; 0xcd
 800c8a8:	4840      	ldr	r0, [pc, #256]	; (800c9ac <lfs_bd_prog+0x14c>)
 800c8aa:	f016 fd43 	bl	8023334 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d151      	bne.n	800c95c <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 800c8bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d34c      	bcc.n	800c95c <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	685a      	ldr	r2, [r3, #4]
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8cc:	4413      	add	r3, r2
                off >= pcache->off &&
 800c8ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d243      	bcs.n	800c95c <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	6859      	ldr	r1, [r3, #4]
 800c8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e0:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 800c8e2:	4413      	add	r3, r2
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c8e8:	f7ff fc98 	bl	800c21c <lfs_min>
 800c8ec:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	68da      	ldr	r2, [r3, #12]
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c8f8:	1acb      	subs	r3, r1, r3
 800c8fa:	4413      	add	r3, r2
 800c8fc:	69ba      	ldr	r2, [r7, #24]
 800c8fe:	69f9      	ldr	r1, [r7, #28]
 800c900:	4618      	mov	r0, r3
 800c902:	f017 fe52 	bl	80245aa <memcpy>

            data += diff;
 800c906:	69fa      	ldr	r2, [r7, #28]
 800c908:	69bb      	ldr	r3, [r7, #24]
 800c90a:	4413      	add	r3, r2
 800c90c:	61fb      	str	r3, [r7, #28]
            off += diff;
 800c90e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c910:	69bb      	ldr	r3, [r7, #24]
 800c912:	4413      	add	r3, r2
 800c914:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 800c916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c918:	69bb      	ldr	r3, [r7, #24]
 800c91a:	1ad3      	subs	r3, r2, r3
 800c91c:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	6898      	ldr	r0, [r3, #8]
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c928:	1ad3      	subs	r3, r2, r3
 800c92a:	4619      	mov	r1, r3
 800c92c:	f7ff fc66 	bl	800c1fc <lfs_max>
 800c930:	4602      	mov	r2, r0
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	689a      	ldr	r2, [r3, #8]
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c93e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c940:	429a      	cmp	r2, r3
 800c942:	d126      	bne.n	800c992 <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800c944:	78fb      	ldrb	r3, [r7, #3]
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	68b9      	ldr	r1, [r7, #8]
 800c94a:	68f8      	ldr	r0, [r7, #12]
 800c94c:	f7ff fed8 	bl	800c700 <lfs_bd_flush>
 800c950:	6178      	str	r0, [r7, #20]
                if (err) {
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d01c      	beq.n	800c992 <lfs_bd_prog+0x132>
                    return err;
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	e01e      	b.n	800c99a <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c964:	d005      	beq.n	800c972 <lfs_bd_prog+0x112>
 800c966:	4b13      	ldr	r3, [pc, #76]	; (800c9b4 <lfs_bd_prog+0x154>)
 800c968:	4a0f      	ldr	r2, [pc, #60]	; (800c9a8 <lfs_bd_prog+0x148>)
 800c96a:	21ea      	movs	r1, #234	; 0xea
 800c96c:	480f      	ldr	r0, [pc, #60]	; (800c9ac <lfs_bd_prog+0x14c>)
 800c96e:	f016 fce1 	bl	8023334 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c976:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c97c:	699b      	ldr	r3, [r3, #24]
 800c97e:	4619      	mov	r1, r3
 800c980:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c982:	f7ff fc5b 	bl	800c23c <lfs_aligndown>
 800c986:	4602      	mov	r2, r0
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	2200      	movs	r2, #0
 800c990:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 800c992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c994:	2b00      	cmp	r3, #0
 800c996:	d18a      	bne.n	800c8ae <lfs_bd_prog+0x4e>
    }

    return 0;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3720      	adds	r7, #32
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}
 800c9a2:	bf00      	nop
 800c9a4:	08026e78 	.word	0x08026e78
 800c9a8:	0802ad1c 	.word	0x0802ad1c
 800c9ac:	08026e18 	.word	0x08026e18
 800c9b0:	08026eb4 	.word	0x08026eb4
 800c9b4:	08026ed8 	.word	0x08026ed8

0800c9b8 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b084      	sub	sp, #16
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9c6:	6a1b      	ldr	r3, [r3, #32]
 800c9c8:	683a      	ldr	r2, [r7, #0]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d305      	bcc.n	800c9da <lfs_bd_erase+0x22>
 800c9ce:	4b0e      	ldr	r3, [pc, #56]	; (800ca08 <lfs_bd_erase+0x50>)
 800c9d0:	4a0e      	ldr	r2, [pc, #56]	; (800ca0c <lfs_bd_erase+0x54>)
 800c9d2:	21f8      	movs	r1, #248	; 0xf8
 800c9d4:	480e      	ldr	r0, [pc, #56]	; (800ca10 <lfs_bd_erase+0x58>)
 800c9d6:	f016 fcad 	bl	8023334 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c9e4:	6839      	ldr	r1, [r7, #0]
 800c9e6:	4610      	mov	r0, r2
 800c9e8:	4798      	blx	r3
 800c9ea:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	dd05      	ble.n	800c9fe <lfs_bd_erase+0x46>
 800c9f2:	4b08      	ldr	r3, [pc, #32]	; (800ca14 <lfs_bd_erase+0x5c>)
 800c9f4:	4a05      	ldr	r2, [pc, #20]	; (800ca0c <lfs_bd_erase+0x54>)
 800c9f6:	21fa      	movs	r1, #250	; 0xfa
 800c9f8:	4805      	ldr	r0, [pc, #20]	; (800ca10 <lfs_bd_erase+0x58>)
 800c9fa:	f016 fc9b 	bl	8023334 <__assert_func>
    return err;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3710      	adds	r7, #16
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}
 800ca08:	08026df8 	.word	0x08026df8
 800ca0c:	0802ad28 	.word	0x0802ad28
 800ca10:	08026e18 	.word	0x08026e18
 800ca14:	08026e44 	.word	0x08026e44

0800ca18 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 800ca18:	b480      	push	{r7}
 800ca1a:	b085      	sub	sp, #20
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	685a      	ldr	r2, [r3, #4]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	3304      	adds	r3, #4
 800ca32:	68fa      	ldr	r2, [r7, #12]
 800ca34:	601a      	str	r2, [r3, #0]
}
 800ca36:	bf00      	nop
 800ca38:	3714      	adds	r7, #20
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr

0800ca42 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 800ca42:	b480      	push	{r7}
 800ca44:	b083      	sub	sp, #12
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca52:	d005      	beq.n	800ca60 <lfs_pair_isnull+0x1e>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	3304      	adds	r3, #4
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca5e:	d101      	bne.n	800ca64 <lfs_pair_isnull+0x22>
 800ca60:	2301      	movs	r3, #1
 800ca62:	e000      	b.n	800ca66 <lfs_pair_isnull+0x24>
 800ca64:	2300      	movs	r3, #0
 800ca66:	f003 0301 	and.w	r3, r3, #1
 800ca6a:	b2db      	uxtb	r3, r3
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	370c      	adds	r7, #12
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr

0800ca78 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800ca78:	b480      	push	{r7}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d017      	beq.n	800cabe <lfs_pair_cmp+0x46>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	3304      	adds	r3, #4
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	3304      	adds	r3, #4
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d00f      	beq.n	800cabe <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	3304      	adds	r3, #4
 800caa6:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d008      	beq.n	800cabe <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	3304      	adds	r3, #4
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d001      	beq.n	800cabe <lfs_pair_cmp+0x46>
 800caba:	2301      	movs	r3, #1
 800cabc:	e000      	b.n	800cac0 <lfs_pair_cmp+0x48>
 800cabe:	2300      	movs	r3, #0
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	370c      	adds	r7, #12
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <lfs_pair_sync>:

static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800cacc:	b480      	push	{r7}
 800cace:	b083      	sub	sp, #12
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681a      	ldr	r2, [r3, #0]
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	429a      	cmp	r2, r3
 800cae0:	d107      	bne.n	800caf2 <lfs_pair_sync+0x26>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	3304      	adds	r3, #4
 800cae6:	681a      	ldr	r2, [r3, #0]
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	3304      	adds	r3, #4
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	429a      	cmp	r2, r3
 800caf0:	d00d      	beq.n	800cb0e <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681a      	ldr	r2, [r3, #0]
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	3304      	adds	r3, #4
 800cafa:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d108      	bne.n	800cb12 <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	3304      	adds	r3, #4
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d101      	bne.n	800cb12 <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e000      	b.n	800cb14 <lfs_pair_sync+0x48>
 800cb12:	2300      	movs	r3, #0
 800cb14:	f003 0301 	and.w	r3, r3, #1
 800cb18:	b2db      	uxtb	r3, r3
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	370c      	adds	r7, #12
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb24:	4770      	bx	lr

0800cb26 <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 800cb26:	b590      	push	{r4, r7, lr}
 800cb28:	b083      	sub	sp, #12
 800cb2a:	af00      	add	r7, sp, #0
 800cb2c:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7ff fbe2 	bl	800c2fc <lfs_fromle32>
 800cb38:	4602      	mov	r2, r0
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	3304      	adds	r3, #4
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	1d1c      	adds	r4, r3, #4
 800cb48:	4610      	mov	r0, r2
 800cb4a:	f7ff fbd7 	bl	800c2fc <lfs_fromle32>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	6023      	str	r3, [r4, #0]
}
 800cb52:	bf00      	nop
 800cb54:	370c      	adds	r7, #12
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd90      	pop	{r4, r7, pc}

0800cb5a <lfs_pair_tole32>:

static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 800cb5a:	b590      	push	{r4, r7, lr}
 800cb5c:	b083      	sub	sp, #12
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	4618      	mov	r0, r3
 800cb68:	f7ff fbd3 	bl	800c312 <lfs_tole32>
 800cb6c:	4602      	mov	r2, r0
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	3304      	adds	r3, #4
 800cb76:	681a      	ldr	r2, [r3, #0]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	1d1c      	adds	r4, r3, #4
 800cb7c:	4610      	mov	r0, r2
 800cb7e:	f7ff fbc8 	bl	800c312 <lfs_tole32>
 800cb82:	4603      	mov	r3, r0
 800cb84:	6023      	str	r3, [r4, #0]
}
 800cb86:	bf00      	nop
 800cb88:	370c      	adds	r7, #12
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd90      	pop	{r4, r7, pc}

0800cb8e <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 800cb8e:	b480      	push	{r7}
 800cb90:	b083      	sub	sp, #12
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	43db      	mvns	r3, r3
 800cb9a:	0fdb      	lsrs	r3, r3, #31
 800cb9c:	b2db      	uxtb	r3, r3
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	370c      	adds	r7, #12
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr

0800cbaa <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800cbaa:	b480      	push	{r7}
 800cbac:	b083      	sub	sp, #12
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	059b      	lsls	r3, r3, #22
 800cbb6:	159b      	asrs	r3, r3, #22
 800cbb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbbc:	bf0c      	ite	eq
 800cbbe:	2301      	moveq	r3, #1
 800cbc0:	2300      	movne	r3, #0
 800cbc2:	b2db      	uxtb	r3, r3
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	370c      	adds	r7, #12
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr

0800cbd0 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 800cbd0:	b480      	push	{r7}
 800cbd2:	b083      	sub	sp, #12
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	0d1b      	lsrs	r3, r3, #20
 800cbdc:	b29b      	uxth	r3, r3
 800cbde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cbe2:	b29b      	uxth	r3, r3
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	370c      	adds	r7, #12
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr

0800cbf0 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800cbf0:	b480      	push	{r7}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	0d1b      	lsrs	r3, r3, #20
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cc02:	b29b      	uxth	r3, r3
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	370c      	adds	r7, #12
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 800cc10:	b480      	push	{r7}
 800cc12:	b083      	sub	sp, #12
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	0d1b      	lsrs	r3, r3, #20
 800cc1c:	b2db      	uxtb	r3, r3
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	370c      	adds	r7, #12
 800cc22:	46bd      	mov	sp, r7
 800cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc28:	4770      	bx	lr

0800cc2a <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b082      	sub	sp, #8
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f7ff ffec 	bl	800cc10 <lfs_tag_chunk>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	b25b      	sxtb	r3, r3
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	0a9b      	lsrs	r3, r3, #10
 800cc50:	b29b      	uxth	r3, r3
 800cc52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cc56:	b29b      	uxth	r3, r3
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	370c      	adds	r7, #12
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr

0800cc64 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	370c      	adds	r7, #12
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr

0800cc7e <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b082      	sub	sp, #8
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f7ff ff8f 	bl	800cbaa <lfs_tag_isdelete>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	461a      	mov	r2, r3
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	4413      	add	r3, r2
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7ff ffe5 	bl	800cc64 <lfs_tag_size>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	3304      	adds	r3, #4
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3708      	adds	r7, #8
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800cca6:	b480      	push	{r7}
 800cca8:	b085      	sub	sp, #20
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
 800ccae:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	60fb      	str	r3, [r7, #12]
 800ccb4:	e012      	b.n	800ccdc <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	6819      	ldr	r1, [r3, #0]
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	683a      	ldr	r2, [r7, #0]
 800ccc6:	4413      	add	r3, r2
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	009b      	lsls	r3, r3, #2
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	4403      	add	r3, r0
 800ccd2:	404a      	eors	r2, r1
 800ccd4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	60fb      	str	r3, [r7, #12]
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2b02      	cmp	r3, #2
 800cce0:	dde9      	ble.n	800ccb6 <lfs_gstate_xor+0x10>
    }
}
 800cce2:	bf00      	nop
 800cce4:	bf00      	nop
 800cce6:	3714      	adds	r7, #20
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr

0800ccf0 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 800ccf0:	b480      	push	{r7}
 800ccf2:	b085      	sub	sp, #20
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	60fb      	str	r3, [r7, #12]
 800ccfc:	e00b      	b.n	800cd16 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	009b      	lsls	r3, r3, #2
 800cd02:	687a      	ldr	r2, [r7, #4]
 800cd04:	4413      	add	r3, r2
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d001      	beq.n	800cd10 <lfs_gstate_iszero+0x20>
            return false;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	e006      	b.n	800cd1e <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	3301      	adds	r3, #1
 800cd14:	60fb      	str	r3, [r7, #12]
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2b02      	cmp	r3, #2
 800cd1a:	ddf0      	ble.n	800ccfe <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 800cd1c:	2301      	movs	r3, #1
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3714      	adds	r7, #20
 800cd22:	46bd      	mov	sp, r7
 800cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd28:	4770      	bx	lr

0800cd2a <lfs_gstate_hasorphans>:

static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 800cd2a:	b580      	push	{r7, lr}
 800cd2c:	b082      	sub	sp, #8
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7ff ff94 	bl	800cc64 <lfs_tag_size>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	bf14      	ite	ne
 800cd42:	2301      	movne	r3, #1
 800cd44:	2300      	moveq	r3, #0
 800cd46:	b2db      	uxtb	r3, r3
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3708      	adds	r7, #8
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b082      	sub	sp, #8
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7ff ff81 	bl	800cc64 <lfs_tag_size>
 800cd62:	4603      	mov	r3, r0
 800cd64:	b2db      	uxtb	r3, r3
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3708      	adds	r7, #8
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}

0800cd6e <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b082      	sub	sp, #8
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7ff ff28 	bl	800cbd0 <lfs_tag_type1>
 800cd80:	4603      	mov	r3, r0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	bf14      	ite	ne
 800cd86:	2301      	movne	r3, #1
 800cd88:	2300      	moveq	r3, #0
 800cd8a:	b2db      	uxtb	r3, r3
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3708      	adds	r7, #8
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	4618      	mov	r0, r3
 800cda4:	f7ff ff14 	bl	800cbd0 <lfs_tag_type1>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00a      	beq.n	800cdc4 <lfs_gstate_hasmovehere+0x30>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	3304      	adds	r3, #4
 800cdb2:	6839      	ldr	r1, [r7, #0]
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7ff fe5f 	bl	800ca78 <lfs_pair_cmp>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d101      	bne.n	800cdc4 <lfs_gstate_hasmovehere+0x30>
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	e000      	b.n	800cdc6 <lfs_gstate_hasmovehere+0x32>
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	f003 0301 	and.w	r3, r3, #1
 800cdca:	b2db      	uxtb	r3, r3
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3708      	adds	r7, #8
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7ff fa8b 	bl	800c2fc <lfs_fromle32>
 800cde6:	4602      	mov	r2, r0
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7ff fa83 	bl	800c2fc <lfs_fromle32>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	689b      	ldr	r3, [r3, #8]
 800ce00:	4618      	mov	r0, r3
 800ce02:	f7ff fa7b 	bl	800c2fc <lfs_fromle32>
 800ce06:	4602      	mov	r2, r0
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	609a      	str	r2, [r3, #8]
}
 800ce0c:	bf00      	nop
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <lfs_gstate_tole32>:

static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7ff fa76 	bl	800c312 <lfs_tole32>
 800ce26:	4602      	mov	r2, r0
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7ff fa6e 	bl	800c312 <lfs_tole32>
 800ce36:	4602      	mov	r2, r0
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	689b      	ldr	r3, [r3, #8]
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7ff fa66 	bl	800c312 <lfs_tole32>
 800ce46:	4602      	mov	r2, r0
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	609a      	str	r2, [r3, #8]
}
 800ce4c:	bf00      	nop
 800ce4e:	3708      	adds	r7, #8
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <lfs_ctz_fromle32>:

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7ff fa4b 	bl	800c2fc <lfs_fromle32>
 800ce66:	4602      	mov	r2, r0
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	685b      	ldr	r3, [r3, #4]
 800ce70:	4618      	mov	r0, r3
 800ce72:	f7ff fa43 	bl	800c2fc <lfs_fromle32>
 800ce76:	4602      	mov	r2, r0
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	605a      	str	r2, [r3, #4]
}
 800ce7c:	bf00      	nop
 800ce7e:	3708      	adds	r7, #8
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7ff fa3e 	bl	800c312 <lfs_tole32>
 800ce96:	4602      	mov	r2, r0
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	685b      	ldr	r3, [r3, #4]
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7ff fa36 	bl	800c312 <lfs_tole32>
 800cea6:	4602      	mov	r2, r0
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	605a      	str	r2, [r3, #4]
}
 800ceac:	bf00      	nop
 800ceae:	3708      	adds	r7, #8
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7ff fa1b 	bl	800c2fc <lfs_fromle32>
 800cec6:	4602      	mov	r2, r0
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7ff fa13 	bl	800c2fc <lfs_fromle32>
 800ced6:	4602      	mov	r2, r0
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	689b      	ldr	r3, [r3, #8]
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7ff fa0b 	bl	800c2fc <lfs_fromle32>
 800cee6:	4602      	mov	r2, r0
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	68db      	ldr	r3, [r3, #12]
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7ff fa03 	bl	800c2fc <lfs_fromle32>
 800cef6:	4602      	mov	r2, r0
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	691b      	ldr	r3, [r3, #16]
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7ff f9fb 	bl	800c2fc <lfs_fromle32>
 800cf06:	4602      	mov	r2, r0
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	695b      	ldr	r3, [r3, #20]
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7ff f9f3 	bl	800c2fc <lfs_fromle32>
 800cf16:	4602      	mov	r2, r0
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	615a      	str	r2, [r3, #20]
}
 800cf1c:	bf00      	nop
 800cf1e:	3708      	adds	r7, #8
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <lfs_superblock_tole32>:

static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7ff f9ee 	bl	800c312 <lfs_tole32>
 800cf36:	4602      	mov	r2, r0
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7ff f9e6 	bl	800c312 <lfs_tole32>
 800cf46:	4602      	mov	r2, r0
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7ff f9de 	bl	800c312 <lfs_tole32>
 800cf56:	4602      	mov	r2, r0
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	4618      	mov	r0, r3
 800cf62:	f7ff f9d6 	bl	800c312 <lfs_tole32>
 800cf66:	4602      	mov	r2, r0
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	691b      	ldr	r3, [r3, #16]
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7ff f9ce 	bl	800c312 <lfs_tole32>
 800cf76:	4602      	mov	r2, r0
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	695b      	ldr	r3, [r3, #20]
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7ff f9c6 	bl	800c312 <lfs_tole32>
 800cf86:	4602      	mov	r2, r0
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	615a      	str	r2, [r3, #20]
}
 800cf8c:	bf00      	nop
 800cf8e:	3708      	adds	r7, #8
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <lfs_mlist_isopen>:

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 800cf94:	b480      	push	{r7}
 800cf96:	b085      	sub	sp, #20
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800cf9e:	1d3b      	adds	r3, r7, #4
 800cfa0:	60fb      	str	r3, [r7, #12]
 800cfa2:	e009      	b.n	800cfb8 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	683a      	ldr	r2, [r7, #0]
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d101      	bne.n	800cfb2 <lfs_mlist_isopen+0x1e>
            return true;
 800cfae:	2301      	movs	r3, #1
 800cfb0:	e007      	b.n	800cfc2 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	60fb      	str	r3, [r7, #12]
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d1f1      	bne.n	800cfa4 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3714      	adds	r7, #20
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr

0800cfce <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 800cfce:	b480      	push	{r7}
 800cfd0:	b085      	sub	sp, #20
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
 800cfd6:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	3328      	adds	r3, #40	; 0x28
 800cfdc:	60fb      	str	r3, [r7, #12]
 800cfde:	e00d      	b.n	800cffc <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	683a      	ldr	r2, [r7, #0]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d105      	bne.n	800cff6 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	681a      	ldr	r2, [r3, #0]
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	601a      	str	r2, [r3, #0]
            break;
 800cff4:	e007      	b.n	800d006 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	60fb      	str	r3, [r7, #12]
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d1ed      	bne.n	800cfe0 <lfs_mlist_remove+0x12>
        }
    }
}
 800d004:	bf00      	nop
 800d006:	bf00      	nop
 800d008:	3714      	adds	r7, #20
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr

0800d012 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 800d012:	b480      	push	{r7}
 800d014:	b083      	sub	sp, #12
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
 800d01a:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	683a      	ldr	r2, [r7, #0]
 800d028:	629a      	str	r2, [r3, #40]	; 0x28
}
 800d02a:	bf00      	nop
 800d02c:	370c      	adds	r7, #12
 800d02e:	46bd      	mov	sp, r7
 800d030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d034:	4770      	bx	lr

0800d036 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 800d036:	b480      	push	{r7}
 800d038:	b085      	sub	sp, #20
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	6078      	str	r0, [r7, #4]
 800d03e:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d048:	683a      	ldr	r2, [r7, #0]
 800d04a:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d050:	6a1b      	ldr	r3, [r3, #32]
 800d052:	4413      	add	r3, r2
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d058:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 800d05a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d05e:	fb01 f202 	mul.w	r2, r1, r2
 800d062:	1a9b      	subs	r3, r3, r2
 800d064:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d06a:	68ba      	ldr	r2, [r7, #8]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d212      	bcs.n	800d096 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	095b      	lsrs	r3, r3, #5
 800d078:	009a      	lsls	r2, r3, #2
 800d07a:	440a      	add	r2, r1
 800d07c:	6811      	ldr	r1, [r2, #0]
 800d07e:	68ba      	ldr	r2, [r7, #8]
 800d080:	f002 021f 	and.w	r2, r2, #31
 800d084:	2001      	movs	r0, #1
 800d086:	fa00 f202 	lsl.w	r2, r0, r2
 800d08a:	68f8      	ldr	r0, [r7, #12]
 800d08c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800d08e:	009b      	lsls	r3, r3, #2
 800d090:	4403      	add	r3, r0
 800d092:	430a      	orrs	r2, r1
 800d094:	601a      	str	r2, [r3, #0]
    }

    return 0;
 800d096:	2300      	movs	r3, #0
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3714      	adds	r7, #20
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr

0800d0a4 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 800d0a4:	b480      	push	{r7}
 800d0a6:	b083      	sub	sp, #12
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0b0:	6a1a      	ldr	r2, [r3, #32]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	661a      	str	r2, [r3, #96]	; 0x60
}
 800d0b6:	bf00      	nop
 800d0b8:	370c      	adds	r7, #12
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c0:	4770      	bx	lr

0800d0c2 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 800d0c2:	b580      	push	{r7, lr}
 800d0c4:	b082      	sub	sp, #8
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f7ff ffe4 	bl	800d0a4 <lfs_alloc_ack>
}
 800d0dc:	bf00      	nop
 800d0de:	3708      	adds	r7, #8
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}

0800d0e4 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b086      	sub	sp, #24
 800d0e8:	af02      	add	r7, sp, #8
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 800d0ee:	e04f      	b.n	800d190 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0f4:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0fa:	1c5a      	adds	r2, r3, #1
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d104:	1e5a      	subs	r2, r3, #1
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	095b      	lsrs	r3, r3, #5
 800d112:	009b      	lsls	r3, r3, #2
 800d114:	4413      	add	r3, r2
 800d116:	681a      	ldr	r2, [r3, #0]
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	f003 031f 	and.w	r3, r3, #31
 800d11e:	2101      	movs	r1, #1
 800d120:	fa01 f303 	lsl.w	r3, r1, r3
 800d124:	4013      	ands	r3, r2
 800d126:	2b00      	cmp	r3, #0
 800d128:	d132      	bne.n	800d190 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	4413      	add	r3, r2
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d136:	6a12      	ldr	r2, [r2, #32]
 800d138:	fbb3 f1f2 	udiv	r1, r3, r2
 800d13c:	fb01 f202 	mul.w	r2, r1, r2
 800d140:	1a9a      	subs	r2, r3, r2
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 800d146:	e009      	b.n	800d15c <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d14c:	1c5a      	adds	r2, r3, #1
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d156:	1e5a      	subs	r2, r3, #1
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d164:	429a      	cmp	r2, r3
 800d166:	d011      	beq.n	800d18c <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d170:	095b      	lsrs	r3, r3, #5
 800d172:	009b      	lsls	r3, r3, #2
 800d174:	4413      	add	r3, r2
 800d176:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d17c:	f003 031f 	and.w	r3, r3, #31
 800d180:	2101      	movs	r1, #1
 800d182:	fa01 f303 	lsl.w	r3, r1, r3
 800d186:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d1dd      	bne.n	800d148 <lfs_alloc+0x64>
                }

                return 0;
 800d18c:	2300      	movs	r3, #0
 800d18e:	e050      	b.n	800d232 <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d198:	429a      	cmp	r2, r3
 800d19a:	d1a9      	bne.n	800d0f0 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d10f      	bne.n	800d1c4 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1ac:	4413      	add	r3, r2
 800d1ae:	4a23      	ldr	r2, [pc, #140]	; (800d23c <lfs_alloc+0x158>)
 800d1b0:	9200      	str	r2, [sp, #0]
 800d1b2:	f44f 720d 	mov.w	r2, #564	; 0x234
 800d1b6:	4922      	ldr	r1, [pc, #136]	; (800d240 <lfs_alloc+0x15c>)
 800d1b8:	4822      	ldr	r0, [pc, #136]	; (800d244 <lfs_alloc+0x160>)
 800d1ba:	f016 ff0d 	bl	8023fd8 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 800d1be:	f06f 031b 	mvn.w	r3, #27
 800d1c2:	e036      	b.n	800d232 <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1cc:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d1d2:	6a12      	ldr	r2, [r2, #32]
 800d1d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d1d8:	fb01 f202 	mul.w	r2, r1, r2
 800d1dc:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e8:	00da      	lsls	r2, r3, #3
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	4610      	mov	r0, r2
 800d1f2:	f7ff f813 	bl	800c21c <lfs_min>
 800d1f6:	4602      	mov	r2, r0
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2200      	movs	r2, #0
 800d200:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d20c:	461a      	mov	r2, r3
 800d20e:	2100      	movs	r1, #0
 800d210:	f017 f8a6 	bl	8024360 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 800d214:	2301      	movs	r3, #1
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	490b      	ldr	r1, [pc, #44]	; (800d248 <lfs_alloc+0x164>)
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f004 faf2 	bl	8011804 <lfs_fs_rawtraverse>
 800d220:	60f8      	str	r0, [r7, #12]
        if (err) {
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2b00      	cmp	r3, #0
 800d226:	f43f af62 	beq.w	800d0ee <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f7ff ff49 	bl	800d0c2 <lfs_alloc_drop>
            return err;
 800d230:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 800d232:	4618      	mov	r0, r3
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	08026f24 	.word	0x08026f24
 800d240:	08026e18 	.word	0x08026e18
 800d244:	08026efc 	.word	0x08026efc
 800d248:	0800d037 	.word	0x0800d037

0800d24c <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 800d24c:	b590      	push	{r4, r7, lr}
 800d24e:	b08f      	sub	sp, #60	; 0x3c
 800d250:	af04      	add	r7, sp, #16
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	607a      	str	r2, [r7, #4]
 800d258:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	68db      	ldr	r3, [r3, #12]
 800d25e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	691b      	ldr	r3, [r3, #16]
 800d264:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 800d266:	2300      	movs	r3, #0
 800d268:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	333c      	adds	r3, #60	; 0x3c
 800d26e:	68ba      	ldr	r2, [r7, #8]
 800d270:	4611      	mov	r1, r2
 800d272:	4618      	mov	r0, r3
 800d274:	f7ff fd8e 	bl	800cd94 <lfs_gstate_hasmovehere>
 800d278:	4603      	mov	r3, r0
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	f000 80ba 	beq.w	800d3f4 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f7ff fcdf 	bl	800cc44 <lfs_tag_id>
 800d286:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800d288:	2b00      	cmp	r3, #0
 800d28a:	f000 80b3 	beq.w	800d3f4 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d292:	4618      	mov	r0, r3
 800d294:	f7ff fcd6 	bl	800cc44 <lfs_tag_id>
 800d298:	4603      	mov	r3, r0
 800d29a:	461c      	mov	r4, r3
 800d29c:	6838      	ldr	r0, [r7, #0]
 800d29e:	f7ff fcd1 	bl	800cc44 <lfs_tag_id>
 800d2a2:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 800d2a4:	429c      	cmp	r4, r3
 800d2a6:	f200 80a5 	bhi.w	800d3f4 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 800d2aa:	6a3b      	ldr	r3, [r7, #32]
 800d2ac:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800d2b0:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800d2b2:	e09f      	b.n	800d3f4 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7ff fce1 	bl	800cc7e <lfs_tag_dsize>
 800d2bc:	4602      	mov	r2, r0
 800d2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c0:	1a9b      	subs	r3, r3, r2
 800d2c2:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 800d2c8:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 800d2ce:	2204      	movs	r2, #4
 800d2d0:	9203      	str	r2, [sp, #12]
 800d2d2:	f107 0210 	add.w	r2, r7, #16
 800d2d6:	9202      	str	r2, [sp, #8]
 800d2d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2da:	9201      	str	r2, [sp, #4]
 800d2dc:	9300      	str	r3, [sp, #0]
 800d2de:	2304      	movs	r3, #4
 800d2e0:	460a      	mov	r2, r1
 800d2e2:	2100      	movs	r1, #0
 800d2e4:	68f8      	ldr	r0, [r7, #12]
 800d2e6:	f7ff f875 	bl	800c3d4 <lfs_bd_read>
 800d2ea:	61b8      	str	r0, [r7, #24]
        if (err) {
 800d2ec:	69bb      	ldr	r3, [r7, #24]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d001      	beq.n	800d2f6 <lfs_dir_getslice+0xaa>
            return err;
 800d2f2:	69bb      	ldr	r3, [r7, #24]
 800d2f4:	e08a      	b.n	800d40c <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f7ff f816 	bl	800c32a <lfs_frombe32>
 800d2fe:	4602      	mov	r2, r0
 800d300:	69fb      	ldr	r3, [r7, #28]
 800d302:	4053      	eors	r3, r2
 800d304:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d308:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f7ff fc9a 	bl	800cc44 <lfs_tag_id>
 800d310:	4603      	mov	r3, r0
 800d312:	2b00      	cmp	r3, #0
 800d314:	d02b      	beq.n	800d36e <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800d316:	69f8      	ldr	r0, [r7, #28]
 800d318:	f7ff fc5a 	bl	800cbd0 <lfs_tag_type1>
 800d31c:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 800d31e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d322:	d124      	bne.n	800d36e <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 800d324:	69f8      	ldr	r0, [r7, #28]
 800d326:	f7ff fc8d 	bl	800cc44 <lfs_tag_id>
 800d32a:	4603      	mov	r3, r0
 800d32c:	461c      	mov	r4, r3
 800d32e:	6a3b      	ldr	r3, [r7, #32]
 800d330:	683a      	ldr	r2, [r7, #0]
 800d332:	1ad3      	subs	r3, r2, r3
 800d334:	4618      	mov	r0, r3
 800d336:	f7ff fc85 	bl	800cc44 <lfs_tag_id>
 800d33a:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800d33c:	429c      	cmp	r4, r3
 800d33e:	d816      	bhi.n	800d36e <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 800d340:	6a3b      	ldr	r3, [r7, #32]
 800d342:	683a      	ldr	r2, [r7, #0]
 800d344:	1ad2      	subs	r2, r2, r3
 800d346:	4b33      	ldr	r3, [pc, #204]	; (800d414 <lfs_dir_getslice+0x1c8>)
 800d348:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800d34a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d34e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d352:	69fa      	ldr	r2, [r7, #28]
 800d354:	429a      	cmp	r2, r3
 800d356:	d102      	bne.n	800d35e <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 800d358:	f06f 0301 	mvn.w	r3, #1
 800d35c:	e056      	b.n	800d40c <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800d35e:	69f8      	ldr	r0, [r7, #28]
 800d360:	f7ff fc63 	bl	800cc2a <lfs_tag_splice>
 800d364:	4603      	mov	r3, r0
 800d366:	029a      	lsls	r2, r3, #10
 800d368:	6a3b      	ldr	r3, [r7, #32]
 800d36a:	4413      	add	r3, r2
 800d36c:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	69fb      	ldr	r3, [r7, #28]
 800d372:	401a      	ands	r2, r3
 800d374:	6a3b      	ldr	r3, [r7, #32]
 800d376:	6839      	ldr	r1, [r7, #0]
 800d378:	1ac9      	subs	r1, r1, r3
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	400b      	ands	r3, r1
 800d37e:	429a      	cmp	r2, r3
 800d380:	d138      	bne.n	800d3f4 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 800d382:	69f8      	ldr	r0, [r7, #28]
 800d384:	f7ff fc11 	bl	800cbaa <lfs_tag_isdelete>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d002      	beq.n	800d394 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 800d38e:	f06f 0301 	mvn.w	r3, #1
 800d392:	e03b      	b.n	800d40c <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 800d394:	69f8      	ldr	r0, [r7, #28]
 800d396:	f7ff fc65 	bl	800cc64 <lfs_tag_size>
 800d39a:	4603      	mov	r3, r0
 800d39c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f7fe ff3c 	bl	800c21c <lfs_min>
 800d3a4:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 800d3a6:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d3ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3b0:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 800d3b2:	3204      	adds	r2, #4
 800d3b4:	6979      	ldr	r1, [r7, #20]
 800d3b6:	9103      	str	r1, [sp, #12]
 800d3b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d3ba:	9102      	str	r1, [sp, #8]
 800d3bc:	9201      	str	r2, [sp, #4]
 800d3be:	9300      	str	r3, [sp, #0]
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	2100      	movs	r1, #0
 800d3c6:	68f8      	ldr	r0, [r7, #12]
 800d3c8:	f7ff f804 	bl	800c3d4 <lfs_bd_read>
 800d3cc:	61b8      	str	r0, [r7, #24]
            if (err) {
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d001      	beq.n	800d3d8 <lfs_dir_getslice+0x18c>
                return err;
 800d3d4:	69bb      	ldr	r3, [r7, #24]
 800d3d6:	e019      	b.n	800d40c <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 800d3d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	18d0      	adds	r0, r2, r3
 800d3de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	1ad3      	subs	r3, r2, r3
 800d3e4:	461a      	mov	r2, r3
 800d3e6:	2100      	movs	r1, #0
 800d3e8:	f016 ffba 	bl	8024360 <memset>

            return tag + gdiff;
 800d3ec:	6a3a      	ldr	r2, [r7, #32]
 800d3ee:	69fb      	ldr	r3, [r7, #28]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	e00b      	b.n	800d40c <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f7ff fc41 	bl	800cc7e <lfs_tag_dsize>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	3304      	adds	r3, #4
 800d400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d402:	429a      	cmp	r2, r3
 800d404:	f4bf af56 	bcs.w	800d2b4 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 800d408:	f06f 0301 	mvn.w	r3, #1
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	372c      	adds	r7, #44	; 0x2c
 800d410:	46bd      	mov	sp, r7
 800d412:	bd90      	pop	{r4, r7, pc}
 800d414:	000ffc00 	.word	0x000ffc00

0800d418 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 800d418:	b580      	push	{r7, lr}
 800d41a:	b088      	sub	sp, #32
 800d41c:	af04      	add	r7, sp, #16
 800d41e:	60f8      	str	r0, [r7, #12]
 800d420:	60b9      	str	r1, [r7, #8]
 800d422:	607a      	str	r2, [r7, #4]
 800d424:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800d426:	6838      	ldr	r0, [r7, #0]
 800d428:	f7ff fc1c 	bl	800cc64 <lfs_tag_size>
 800d42c:	4603      	mov	r3, r0
 800d42e:	9302      	str	r3, [sp, #8]
 800d430:	69bb      	ldr	r3, [r7, #24]
 800d432:	9301      	str	r3, [sp, #4]
 800d434:	2300      	movs	r3, #0
 800d436:	9300      	str	r3, [sp, #0]
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	687a      	ldr	r2, [r7, #4]
 800d43c:	68b9      	ldr	r1, [r7, #8]
 800d43e:	68f8      	ldr	r0, [r7, #12]
 800d440:	f7ff ff04 	bl	800d24c <lfs_dir_getslice>
 800d444:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800d446:	4618      	mov	r0, r3
 800d448:	3710      	adds	r7, #16
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}

0800d44e <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800d44e:	b580      	push	{r7, lr}
 800d450:	b08c      	sub	sp, #48	; 0x30
 800d452:	af04      	add	r7, sp, #16
 800d454:	60f8      	str	r0, [r7, #12]
 800d456:	60b9      	str	r1, [r7, #8]
 800d458:	607a      	str	r2, [r7, #4]
 800d45a:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800d45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d45e:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 800d460:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d464:	441a      	add	r2, r3
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d46a:	69db      	ldr	r3, [r3, #28]
 800d46c:	429a      	cmp	r2, r3
 800d46e:	f240 80c0 	bls.w	800d5f2 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 800d472:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800d476:	e0c1      	b.n	800d5fc <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800d478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d47a:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d03f      	beq.n	800d502 <lfs_dir_getread+0xb4>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f113 0f02 	cmn.w	r3, #2
 800d48a:	d13a      	bne.n	800d502 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	685a      	ldr	r2, [r3, #4]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	689b      	ldr	r3, [r3, #8]
 800d494:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800d496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d498:	429a      	cmp	r2, r3
 800d49a:	d232      	bcs.n	800d502 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d324      	bcc.n	800d4f0 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	689a      	ldr	r2, [r3, #8]
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6859      	ldr	r1, [r3, #4]
 800d4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4b0:	1acb      	subs	r3, r1, r3
 800d4b2:	4413      	add	r3, r2
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	69b8      	ldr	r0, [r7, #24]
 800d4b8:	f7fe feb0 	bl	800c21c <lfs_min>
 800d4bc:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	68da      	ldr	r2, [r3, #12]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d4c8:	1acb      	subs	r3, r1, r3
 800d4ca:	4413      	add	r3, r2
 800d4cc:	69ba      	ldr	r2, [r7, #24]
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	69f8      	ldr	r0, [r7, #28]
 800d4d2:	f017 f86a 	bl	80245aa <memcpy>

                data += diff;
 800d4d6:	69fa      	ldr	r2, [r7, #28]
 800d4d8:	69bb      	ldr	r3, [r7, #24]
 800d4da:	4413      	add	r3, r2
 800d4dc:	61fb      	str	r3, [r7, #28]
                off += diff;
 800d4de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4e0:	69bb      	ldr	r3, [r7, #24]
 800d4e2:	4413      	add	r3, r2
 800d4e4:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800d4e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d4e8:	69bb      	ldr	r3, [r7, #24]
 800d4ea:	1ad3      	subs	r3, r2, r3
 800d4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800d4ee:	e080      	b.n	800d5f2 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	685a      	ldr	r2, [r3, #4]
 800d4f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4f6:	1ad3      	subs	r3, r2, r3
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	69b8      	ldr	r0, [r7, #24]
 800d4fc:	f7fe fe8e 	bl	800c21c <lfs_min>
 800d500:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f113 0f02 	cmn.w	r3, #2
 800d50a:	d13a      	bne.n	800d582 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	685a      	ldr	r2, [r3, #4]
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 800d516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d518:	429a      	cmp	r2, r3
 800d51a:	d232      	bcs.n	800d582 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d522:	429a      	cmp	r2, r3
 800d524:	d324      	bcc.n	800d570 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	689a      	ldr	r2, [r3, #8]
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	6859      	ldr	r1, [r3, #4]
 800d52e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d530:	1acb      	subs	r3, r1, r3
 800d532:	4413      	add	r3, r2
 800d534:	4619      	mov	r1, r3
 800d536:	69b8      	ldr	r0, [r7, #24]
 800d538:	f7fe fe70 	bl	800c21c <lfs_min>
 800d53c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	68da      	ldr	r2, [r3, #12]
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	685b      	ldr	r3, [r3, #4]
 800d546:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d548:	1acb      	subs	r3, r1, r3
 800d54a:	4413      	add	r3, r2
 800d54c:	69ba      	ldr	r2, [r7, #24]
 800d54e:	4619      	mov	r1, r3
 800d550:	69f8      	ldr	r0, [r7, #28]
 800d552:	f017 f82a 	bl	80245aa <memcpy>

                data += diff;
 800d556:	69fa      	ldr	r2, [r7, #28]
 800d558:	69bb      	ldr	r3, [r7, #24]
 800d55a:	4413      	add	r3, r2
 800d55c:	61fb      	str	r3, [r7, #28]
                off += diff;
 800d55e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d560:	69bb      	ldr	r3, [r7, #24]
 800d562:	4413      	add	r3, r2
 800d564:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800d566:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d568:	69bb      	ldr	r3, [r7, #24]
 800d56a:	1ad3      	subs	r3, r2, r3
 800d56c:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800d56e:	e040      	b.n	800d5f2 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	685a      	ldr	r2, [r3, #4]
 800d574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d576:	1ad3      	subs	r3, r2, r3
 800d578:	4619      	mov	r1, r3
 800d57a:	69b8      	ldr	r0, [r7, #24]
 800d57c:	f7fe fe4e 	bl	800c21c <lfs_min>
 800d580:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	f06f 0201 	mvn.w	r2, #1
 800d588:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d58e:	695b      	ldr	r3, [r3, #20]
 800d590:	4619      	mov	r1, r3
 800d592:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d594:	f7fe fe52 	bl	800c23c <lfs_aligndown>
 800d598:	4602      	mov	r2, r0
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800d59e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a2:	441a      	add	r2, r3
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5a8:	695b      	ldr	r3, [r3, #20]
 800d5aa:	4619      	mov	r1, r3
 800d5ac:	4610      	mov	r0, r2
 800d5ae:	f7fe fe5a 	bl	800c266 <lfs_alignup>
 800d5b2:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	4610      	mov	r0, r2
 800d5be:	f7fe fe2d 	bl	800c21c <lfs_min>
 800d5c2:	4602      	mov	r2, r0
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800d5cc:	683a      	ldr	r2, [r7, #0]
 800d5ce:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800d5d0:	6839      	ldr	r1, [r7, #0]
 800d5d2:	6889      	ldr	r1, [r1, #8]
 800d5d4:	9102      	str	r1, [sp, #8]
 800d5d6:	9201      	str	r2, [sp, #4]
 800d5d8:	9300      	str	r3, [sp, #0]
 800d5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5de:	68b9      	ldr	r1, [r7, #8]
 800d5e0:	68f8      	ldr	r0, [r7, #12]
 800d5e2:	f7ff fe33 	bl	800d24c <lfs_dir_getslice>
 800d5e6:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	da01      	bge.n	800d5f2 <lfs_dir_getread+0x1a4>
            return err;
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	e004      	b.n	800d5fc <lfs_dir_getread+0x1ae>
    while (size > 0) {
 800d5f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	f47f af3f 	bne.w	800d478 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 800d5fa:	2300      	movs	r3, #0
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3720      	adds	r7, #32
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}

0800d604 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 800d604:	b590      	push	{r4, r7, lr}
 800d606:	b087      	sub	sp, #28
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d001      	beq.n	800d622 <lfs_dir_traverse_filter+0x1e>
 800d61e:	4b23      	ldr	r3, [pc, #140]	; (800d6ac <lfs_dir_traverse_filter+0xa8>)
 800d620:	e000      	b.n	800d624 <lfs_dir_traverse_filter+0x20>
 800d622:	4b23      	ldr	r3, [pc, #140]	; (800d6b0 <lfs_dir_traverse_filter+0xac>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800d624:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	405a      	eors	r2, r3
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	4013      	ands	r3, r2
 800d632:	2b00      	cmp	r3, #0
 800d634:	d014      	beq.n	800d660 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7ff fab5 	bl	800cbaa <lfs_tag_isdelete>
 800d640:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 800d642:	2b00      	cmp	r3, #0
 800d644:	d10c      	bne.n	800d660 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	4a18      	ldr	r2, [pc, #96]	; (800d6ac <lfs_dir_traverse_filter+0xa8>)
 800d64a:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	6819      	ldr	r1, [r3, #0]
 800d650:	4b18      	ldr	r3, [pc, #96]	; (800d6b4 <lfs_dir_traverse_filter+0xb0>)
 800d652:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800d654:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800d658:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d101      	bne.n	800d664 <lfs_dir_traverse_filter+0x60>
        return true;
 800d660:	2301      	movs	r3, #1
 800d662:	e01e      	b.n	800d6a2 <lfs_dir_traverse_filter+0x9e>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800d664:	68b8      	ldr	r0, [r7, #8]
 800d666:	f7ff fab3 	bl	800cbd0 <lfs_tag_type1>
 800d66a:	4603      	mov	r3, r0
 800d66c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d670:	d116      	bne.n	800d6a0 <lfs_dir_traverse_filter+0x9c>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 800d672:	68b8      	ldr	r0, [r7, #8]
 800d674:	f7ff fae6 	bl	800cc44 <lfs_tag_id>
 800d678:	4603      	mov	r3, r0
 800d67a:	461c      	mov	r4, r3
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4618      	mov	r0, r3
 800d682:	f7ff fadf 	bl	800cc44 <lfs_tag_id>
 800d686:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800d688:	429c      	cmp	r4, r3
 800d68a:	d809      	bhi.n	800d6a0 <lfs_dir_traverse_filter+0x9c>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800d68c:	68b8      	ldr	r0, [r7, #8]
 800d68e:	f7ff facc 	bl	800cc2a <lfs_tag_splice>
 800d692:	4603      	mov	r3, r0
 800d694:	029a      	lsls	r2, r3, #10
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	441a      	add	r2, r3
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	601a      	str	r2, [r3, #0]
    }

    return false;
 800d6a0:	2300      	movs	r3, #0
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	371c      	adds	r7, #28
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd90      	pop	{r4, r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	7ffffc00 	.word	0x7ffffc00
 800d6b0:	700ffc00 	.word	0x700ffc00
 800d6b4:	000ffc00 	.word	0x000ffc00

0800d6b8 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800d6b8:	b590      	push	{r4, r7, lr}
 800d6ba:	b09d      	sub	sp, #116	; 0x74
 800d6bc:	af0a      	add	r7, sp, #40	; 0x28
 800d6be:	60f8      	str	r0, [r7, #12]
 800d6c0:	60b9      	str	r1, [r7, #8]
 800d6c2:	607a      	str	r2, [r7, #4]
 800d6c4:	603b      	str	r3, [r7, #0]
    // iterate over directory and attrs
    while (true) {
        lfs_tag_t tag;
        const void *buffer;
        struct lfs_diskoff disk;
        if (off+lfs_tag_dsize(ptag) < dir->off) {
 800d6c6:	6838      	ldr	r0, [r7, #0]
 800d6c8:	f7ff fad9 	bl	800cc7e <lfs_tag_dsize>
 800d6cc:	4602      	mov	r2, r0
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	441a      	add	r2, r3
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	68db      	ldr	r3, [r3, #12]
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d233      	bcs.n	800d742 <lfs_dir_traverse+0x8a>
            off += lfs_tag_dsize(ptag);
 800d6da:	6838      	ldr	r0, [r7, #0]
 800d6dc:	f7ff facf 	bl	800cc7e <lfs_tag_dsize>
 800d6e0:	4602      	mov	r2, r0
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	4413      	add	r3, r2
 800d6e6:	607b      	str	r3, [r7, #4]
            int err = lfs_bd_read(lfs,
 800d6e8:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, sizeof(tag),
                    dir->pair[0], off, &tag, sizeof(tag));
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	681b      	ldr	r3, [r3, #0]
            int err = lfs_bd_read(lfs,
 800d6ee:	2204      	movs	r2, #4
 800d6f0:	9203      	str	r2, [sp, #12]
 800d6f2:	f107 021c 	add.w	r2, r7, #28
 800d6f6:	9202      	str	r2, [sp, #8]
 800d6f8:	687a      	ldr	r2, [r7, #4]
 800d6fa:	9201      	str	r2, [sp, #4]
 800d6fc:	9300      	str	r3, [sp, #0]
 800d6fe:	2304      	movs	r3, #4
 800d700:	460a      	mov	r2, r1
 800d702:	2100      	movs	r1, #0
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	f7fe fe65 	bl	800c3d4 <lfs_bd_read>
 800d70a:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (err) {
 800d70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d001      	beq.n	800d716 <lfs_dir_traverse+0x5e>
                return err;
 800d712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d714:	e11e      	b.n	800d954 <lfs_dir_traverse+0x29c>
            }

            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 800d716:	69fb      	ldr	r3, [r7, #28]
 800d718:	4618      	mov	r0, r3
 800d71a:	f7fe fe06 	bl	800c32a <lfs_frombe32>
 800d71e:	4602      	mov	r2, r0
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	4053      	eors	r3, r2
 800d724:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d728:	61fb      	str	r3, [r7, #28]
            disk.block = dir->pair[0];
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	617b      	str	r3, [r7, #20]
            disk.off = off+sizeof(lfs_tag_t);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	3304      	adds	r3, #4
 800d734:	61bb      	str	r3, [r7, #24]
            buffer = &disk;
 800d736:	f107 0314 	add.w	r3, r7, #20
 800d73a:	647b      	str	r3, [r7, #68]	; 0x44
            ptag = tag;
 800d73c:	69fb      	ldr	r3, [r7, #28]
 800d73e:	603b      	str	r3, [r7, #0]
 800d740:	e011      	b.n	800d766 <lfs_dir_traverse+0xae>
        } else if (attrcount > 0) {
 800d742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d744:	2b00      	cmp	r3, #0
 800d746:	dd0c      	ble.n	800d762 <lfs_dir_traverse+0xaa>
            tag = attrs[0].tag;
 800d748:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	61fb      	str	r3, [r7, #28]
            buffer = attrs[0].buffer;
 800d74e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	647b      	str	r3, [r7, #68]	; 0x44
            attrs += 1;
 800d754:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d756:	3308      	adds	r3, #8
 800d758:	65bb      	str	r3, [r7, #88]	; 0x58
            attrcount -= 1;
 800d75a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d75c:	3b01      	subs	r3, #1
 800d75e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d760:	e001      	b.n	800d766 <lfs_dir_traverse+0xae>
        } else {
            return 0;
 800d762:	2300      	movs	r3, #0
 800d764:	e0f6      	b.n	800d954 <lfs_dir_traverse+0x29c>
        }

        lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800d766:	4b7d      	ldr	r3, [pc, #500]	; (800d95c <lfs_dir_traverse+0x2a4>)
 800d768:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800d76a:	69fa      	ldr	r2, [r7, #28]
 800d76c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d76e:	405a      	eors	r2, r3
 800d770:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d774:	400b      	ands	r3, r1
 800d776:	4013      	ands	r3, r2
 800d778:	2b00      	cmp	r3, #0
 800d77a:	f040 80e5 	bne.w	800d948 <lfs_dir_traverse+0x290>
            continue;
        }

        // do we need to filter? inlining the filtering logic here allows
        // for some minor optimizations
        if (lfs_tag_id(tmask) != 0) {
 800d77e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800d780:	f7ff fa60 	bl	800cc44 <lfs_tag_id>
 800d784:	4603      	mov	r3, r0
 800d786:	2b00      	cmp	r3, #0
 800d788:	d038      	beq.n	800d7fc <lfs_dir_traverse+0x144>
            // scan for duplicates and update tag based on creates/deletes
            int filter = lfs_dir_traverse(lfs,
 800d78a:	f107 031c 	add.w	r3, r7, #28
 800d78e:	9308      	str	r3, [sp, #32]
 800d790:	4b73      	ldr	r3, [pc, #460]	; (800d960 <lfs_dir_traverse+0x2a8>)
 800d792:	9307      	str	r3, [sp, #28]
 800d794:	2300      	movs	r3, #0
 800d796:	9306      	str	r3, [sp, #24]
 800d798:	2300      	movs	r3, #0
 800d79a:	9305      	str	r3, [sp, #20]
 800d79c:	2300      	movs	r3, #0
 800d79e:	9304      	str	r3, [sp, #16]
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	9303      	str	r3, [sp, #12]
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	9302      	str	r3, [sp, #8]
 800d7a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7aa:	9301      	str	r3, [sp, #4]
 800d7ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7ae:	9300      	str	r3, [sp, #0]
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	687a      	ldr	r2, [r7, #4]
 800d7b4:	68b9      	ldr	r1, [r7, #8]
 800d7b6:	68f8      	ldr	r0, [r7, #12]
 800d7b8:	f7ff ff7e 	bl	800d6b8 <lfs_dir_traverse>
 800d7bc:	6378      	str	r0, [r7, #52]	; 0x34
                    dir, off, ptag, attrs, attrcount,
                    0, 0, 0, 0, 0,
                    lfs_dir_traverse_filter, &tag);
            if (filter < 0) {
 800d7be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	da01      	bge.n	800d7c8 <lfs_dir_traverse+0x110>
                return filter;
 800d7c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7c6:	e0c5      	b.n	800d954 <lfs_dir_traverse+0x29c>
            }

            if (filter) {
 800d7c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	f040 80be 	bne.w	800d94c <lfs_dir_traverse+0x294>
                continue;
            }

            // in filter range?
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800d7d0:	69fb      	ldr	r3, [r7, #28]
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7ff fa36 	bl	800cc44 <lfs_tag_id>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	461a      	mov	r2, r3
 800d7dc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	f200 80b5 	bhi.w	800d950 <lfs_dir_traverse+0x298>
 800d7e6:	69fb      	ldr	r3, [r7, #28]
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7ff fa2b 	bl	800cc44 <lfs_tag_id>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	f240 80aa 	bls.w	800d950 <lfs_dir_traverse+0x298>
                continue;
            }
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800d7fc:	69fb      	ldr	r3, [r7, #28]
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7ff f9f6 	bl	800cbf0 <lfs_tag_type3>
 800d804:	4603      	mov	r3, r0
 800d806:	2b00      	cmp	r3, #0
 800d808:	f43f af5d 	beq.w	800d6c6 <lfs_dir_traverse+0xe>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800d80c:	69fb      	ldr	r3, [r7, #28]
 800d80e:	4618      	mov	r0, r3
 800d810:	f7ff f9ee 	bl	800cbf0 <lfs_tag_type3>
 800d814:	4603      	mov	r3, r0
 800d816:	461a      	mov	r2, r3
 800d818:	f240 1301 	movw	r3, #257	; 0x101
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d136      	bne.n	800d88e <lfs_dir_traverse+0x1d6>
            uint16_t fromid = lfs_tag_size(tag);
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	4618      	mov	r0, r3
 800d824:	f7ff fa1e 	bl	800cc64 <lfs_tag_size>
 800d828:	4603      	mov	r3, r0
 800d82a:	84fb      	strh	r3, [r7, #38]	; 0x26
            uint16_t toid = lfs_tag_id(tag);
 800d82c:	69fb      	ldr	r3, [r7, #28]
 800d82e:	4618      	mov	r0, r3
 800d830:	f7ff fa08 	bl	800cc44 <lfs_tag_id>
 800d834:	4603      	mov	r3, r0
 800d836:	84bb      	strh	r3, [r7, #36]	; 0x24
            int err = lfs_dir_traverse(lfs,
 800d838:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d83a:	3301      	adds	r3, #1
 800d83c:	b29b      	uxth	r3, r3
                    buffer, 0, 0xffffffff, NULL, 0,
                    LFS_MKTAG(0x600, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0),
                    fromid, fromid+1, toid-fromid+diff,
 800d83e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800d840:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d842:	1a8a      	subs	r2, r1, r2
 800d844:	b291      	uxth	r1, r2
 800d846:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 800d84a:	440a      	add	r2, r1
 800d84c:	b292      	uxth	r2, r2
            int err = lfs_dir_traverse(lfs,
 800d84e:	b212      	sxth	r2, r2
 800d850:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d852:	9108      	str	r1, [sp, #32]
 800d854:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d856:	9107      	str	r1, [sp, #28]
 800d858:	9206      	str	r2, [sp, #24]
 800d85a:	9305      	str	r3, [sp, #20]
 800d85c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d85e:	9304      	str	r3, [sp, #16]
 800d860:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800d864:	9303      	str	r3, [sp, #12]
 800d866:	4b3f      	ldr	r3, [pc, #252]	; (800d964 <lfs_dir_traverse+0x2ac>)
 800d868:	9302      	str	r3, [sp, #8]
 800d86a:	2300      	movs	r3, #0
 800d86c:	9301      	str	r3, [sp, #4]
 800d86e:	2300      	movs	r3, #0
 800d870:	9300      	str	r3, [sp, #0]
 800d872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d876:	2200      	movs	r2, #0
 800d878:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d87a:	68f8      	ldr	r0, [r7, #12]
 800d87c:	f7ff ff1c 	bl	800d6b8 <lfs_dir_traverse>
 800d880:	6238      	str	r0, [r7, #32]
                    cb, data);
            if (err) {
 800d882:	6a3b      	ldr	r3, [r7, #32]
 800d884:	2b00      	cmp	r3, #0
 800d886:	f43f af1e 	beq.w	800d6c6 <lfs_dir_traverse+0xe>
                return err;
 800d88a:	6a3b      	ldr	r3, [r7, #32]
 800d88c:	e062      	b.n	800d954 <lfs_dir_traverse+0x29c>
            }
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800d88e:	69fb      	ldr	r3, [r7, #28]
 800d890:	4618      	mov	r0, r3
 800d892:	f7ff f9ad 	bl	800cbf0 <lfs_tag_type3>
 800d896:	4603      	mov	r3, r0
 800d898:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800d89c:	d144      	bne.n	800d928 <lfs_dir_traverse+0x270>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800d89e:	2300      	movs	r3, #0
 800d8a0:	643b      	str	r3, [r7, #64]	; 0x40
 800d8a2:	e038      	b.n	800d916 <lfs_dir_traverse+0x25e>
                const struct lfs_attr *a = buffer;
 800d8a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800d8a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8aa:	4613      	mov	r3, r2
 800d8ac:	005b      	lsls	r3, r3, #1
 800d8ae:	4413      	add	r3, r2
 800d8b0:	009b      	lsls	r3, r3, #2
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b6:	4413      	add	r3, r2
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800d8be:	051c      	lsls	r4, r3, #20
 800d8c0:	69fb      	ldr	r3, [r7, #28]
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7ff f9be 	bl	800cc44 <lfs_tag_id>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800d8d0:	4413      	add	r3, r2
 800d8d2:	029b      	lsls	r3, r3, #10
 800d8d4:	ea44 0103 	orr.w	r1, r4, r3
 800d8d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8da:	4613      	mov	r3, r2
 800d8dc:	005b      	lsls	r3, r3, #1
 800d8de:	4413      	add	r3, r2
 800d8e0:	009b      	lsls	r3, r3, #2
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e6:	4413      	add	r3, r2
 800d8e8:	689b      	ldr	r3, [r3, #8]
 800d8ea:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 800d8ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8ee:	4613      	mov	r3, r2
 800d8f0:	005b      	lsls	r3, r3, #1
 800d8f2:	4413      	add	r3, r2
 800d8f4:	009b      	lsls	r3, r3, #2
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fa:	4413      	add	r3, r2
 800d8fc:	685a      	ldr	r2, [r3, #4]
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800d8fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d900:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d902:	4798      	blx	r3
 800d904:	62b8      	str	r0, [r7, #40]	; 0x28
                if (err) {
 800d906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d001      	beq.n	800d910 <lfs_dir_traverse+0x258>
                    return err;
 800d90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90e:	e021      	b.n	800d954 <lfs_dir_traverse+0x29c>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800d910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d912:	3301      	adds	r3, #1
 800d914:	643b      	str	r3, [r7, #64]	; 0x40
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	4618      	mov	r0, r3
 800d91a:	f7ff f9a3 	bl	800cc64 <lfs_tag_size>
 800d91e:	4602      	mov	r2, r0
 800d920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d922:	4293      	cmp	r3, r2
 800d924:	d3be      	bcc.n	800d8a4 <lfs_dir_traverse+0x1ec>
 800d926:	e6ce      	b.n	800d6c6 <lfs_dir_traverse+0xe>
                }
            }
        } else {
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800d928:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800d92c:	029a      	lsls	r2, r3, #10
 800d92e:	69fb      	ldr	r3, [r7, #28]
 800d930:	18d1      	adds	r1, r2, r3
 800d932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d934:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d936:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d938:	4798      	blx	r3
 800d93a:	6338      	str	r0, [r7, #48]	; 0x30
            if (err) {
 800d93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93e:	2b00      	cmp	r3, #0
 800d940:	f43f aec1 	beq.w	800d6c6 <lfs_dir_traverse+0xe>
                return err;
 800d944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d946:	e005      	b.n	800d954 <lfs_dir_traverse+0x29c>
            continue;
 800d948:	bf00      	nop
 800d94a:	e6bc      	b.n	800d6c6 <lfs_dir_traverse+0xe>
                continue;
 800d94c:	bf00      	nop
 800d94e:	e6ba      	b.n	800d6c6 <lfs_dir_traverse+0xe>
                continue;
 800d950:	bf00      	nop
    while (true) {
 800d952:	e6b8      	b.n	800d6c6 <lfs_dir_traverse+0xe>
            }
        }
    }
}
 800d954:	4618      	mov	r0, r3
 800d956:	374c      	adds	r7, #76	; 0x4c
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd90      	pop	{r4, r7, pc}
 800d95c:	7ff00000 	.word	0x7ff00000
 800d960:	0800d605 	.word	0x0800d605
 800d964:	600ffc00 	.word	0x600ffc00

0800d968 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800d968:	b590      	push	{r4, r7, lr}
 800d96a:	b09f      	sub	sp, #124	; 0x7c
 800d96c:	af04      	add	r7, sp, #16
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	607a      	str	r2, [r7, #4]
 800d974:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 800d976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d97a:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681a      	ldr	r2, [r3, #0]
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d984:	6a1b      	ldr	r3, [r3, #32]
 800d986:	429a      	cmp	r2, r3
 800d988:	d207      	bcs.n	800d99a <lfs_dir_fetchmatch+0x32>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	3304      	adds	r3, #4
 800d98e:	681a      	ldr	r2, [r3, #0]
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d994:	6a1b      	ldr	r3, [r3, #32]
 800d996:	429a      	cmp	r2, r3
 800d998:	d302      	bcc.n	800d9a0 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 800d99a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800d99e:	e340      	b.n	800e022 <lfs_dir_fetchmatch+0x6ba>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	633b      	str	r3, [r7, #48]	; 0x30
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d9b0:	e052      	b.n	800da58 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 800d9b2:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800d9b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9b6:	009b      	lsls	r3, r3, #2
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800d9bc:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800d9be:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800d9c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d9c4:	0092      	lsls	r2, r2, #2
 800d9c6:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 800d9c8:	2104      	movs	r1, #4
 800d9ca:	9103      	str	r1, [sp, #12]
 800d9cc:	9202      	str	r2, [sp, #8]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	9201      	str	r2, [sp, #4]
 800d9d2:	9300      	str	r3, [sp, #0]
 800d9d4:	2304      	movs	r3, #4
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	2100      	movs	r1, #0
 800d9da:	68f8      	ldr	r0, [r7, #12]
 800d9dc:	f7fe fcfa 	bl	800c3d4 <lfs_bd_read>
 800d9e0:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 800d9e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9e4:	009b      	lsls	r3, r3, #2
 800d9e6:	3368      	adds	r3, #104	; 0x68
 800d9e8:	443b      	add	r3, r7
 800d9ea:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7fe fc84 	bl	800c2fc <lfs_fromle32>
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9f8:	009b      	lsls	r3, r3, #2
 800d9fa:	3368      	adds	r3, #104	; 0x68
 800d9fc:	443b      	add	r3, r7
 800d9fe:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 800da02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da04:	2b00      	cmp	r3, #0
 800da06:	d005      	beq.n	800da14 <lfs_dir_fetchmatch+0xac>
 800da08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da0a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800da0e:	d001      	beq.n	800da14 <lfs_dir_fetchmatch+0xac>
            return err;
 800da10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da12:	e306      	b.n	800e022 <lfs_dir_fetchmatch+0x6ba>
        }

        if (err != LFS_ERR_CORRUPT &&
 800da14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da16:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800da1a:	d01a      	beq.n	800da52 <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 800da1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da1e:	009b      	lsls	r3, r3, #2
 800da20:	3368      	adds	r3, #104	; 0x68
 800da22:	443b      	add	r3, r7
 800da24:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800da28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da2a:	3301      	adds	r3, #1
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	f003 0301 	and.w	r3, r3, #1
 800da32:	bfb8      	it	lt
 800da34:	425b      	neglt	r3, r3
 800da36:	009b      	lsls	r3, r3, #2
 800da38:	3368      	adds	r3, #104	; 0x68
 800da3a:	443b      	add	r3, r7
 800da3c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800da40:	4619      	mov	r1, r3
 800da42:	4610      	mov	r0, r2
 800da44:	f7fe fc4c 	bl	800c2e0 <lfs_scmp>
 800da48:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	dd01      	ble.n	800da52 <lfs_dir_fetchmatch+0xea>
            r = i;
 800da4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da50:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 800da52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da54:	3301      	adds	r3, #1
 800da56:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da5a:	2b01      	cmp	r3, #1
 800da5c:	dda9      	ble.n	800d9b2 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800da5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da60:	2b00      	cmp	r3, #0
 800da62:	f003 0301 	and.w	r3, r3, #1
 800da66:	bfb8      	it	lt
 800da68:	425b      	neglt	r3, r3
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	4413      	add	r3, r2
 800da70:	681a      	ldr	r2, [r3, #0]
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800da76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da78:	3301      	adds	r3, #1
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	f003 0301 	and.w	r3, r3, #1
 800da80:	bfb8      	it	lt
 800da82:	425b      	neglt	r3, r3
 800da84:	009b      	lsls	r3, r3, #2
 800da86:	687a      	ldr	r2, [r7, #4]
 800da88:	4413      	add	r3, r2
 800da8a:	681a      	ldr	r2, [r3, #0]
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 800da90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da92:	2b00      	cmp	r3, #0
 800da94:	f003 0301 	and.w	r3, r3, #1
 800da98:	bfb8      	it	lt
 800da9a:	425b      	neglt	r3, r3
 800da9c:	009b      	lsls	r3, r3, #2
 800da9e:	3368      	adds	r3, #104	; 0x68
 800daa0:	443b      	add	r3, r7
 800daa2:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	2200      	movs	r2, #0
 800daae:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 800dab0:	2300      	movs	r3, #0
 800dab2:	65bb      	str	r3, [r7, #88]	; 0x58
 800dab4:	e2a1      	b.n	800dffa <lfs_dir_fetchmatch+0x692>
        lfs_off_t off = 0;
 800dab6:	2300      	movs	r3, #0
 800dab8:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 800daba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dabe:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 800dac0:	2300      	movs	r3, #0
 800dac2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800dac6:	4a96      	ldr	r2, [pc, #600]	; (800dd20 <lfs_dir_fetchmatch+0x3b8>)
 800dac8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dacc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dad0:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800dad4:	2300      	movs	r3, #0
 800dad6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 800dada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dadc:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	689b      	ldr	r3, [r3, #8]
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7fe fc15 	bl	800c312 <lfs_tole32>
 800dae8:	4602      	mov	r2, r0
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	3308      	adds	r3, #8
 800daf2:	2204      	movs	r2, #4
 800daf4:	4619      	mov	r1, r3
 800daf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dafa:	f004 fdc5 	bl	8012688 <lfs_crc>
 800dafe:	4603      	mov	r3, r0
 800db00:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	689b      	ldr	r3, [r3, #8]
 800db06:	4618      	mov	r0, r3
 800db08:	f7fe fbf8 	bl	800c2fc <lfs_fromle32>
 800db0c:	4602      	mov	r2, r0
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 800db12:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800db14:	f7ff f8b3 	bl	800cc7e <lfs_tag_dsize>
 800db18:	4602      	mov	r2, r0
 800db1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db1c:	4413      	add	r3, r2
 800db1e:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 800db20:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db26:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	2204      	movs	r2, #4
 800db2e:	9203      	str	r2, [sp, #12]
 800db30:	f107 0220 	add.w	r2, r7, #32
 800db34:	9202      	str	r2, [sp, #8]
 800db36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800db38:	9201      	str	r2, [sp, #4]
 800db3a:	9300      	str	r3, [sp, #0]
 800db3c:	4603      	mov	r3, r0
 800db3e:	460a      	mov	r2, r1
 800db40:	2100      	movs	r1, #0
 800db42:	68f8      	ldr	r0, [r7, #12]
 800db44:	f7fe fc46 	bl	800c3d4 <lfs_bd_read>
 800db48:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800db4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d009      	beq.n	800db64 <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 800db50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db52:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800db56:	d103      	bne.n	800db60 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	2200      	movs	r2, #0
 800db5c:	759a      	strb	r2, [r3, #22]
                    break;
 800db5e:	e1d4      	b.n	800df0a <lfs_dir_fetchmatch+0x5a2>
                }
                return err;
 800db60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db62:	e25e      	b.n	800e022 <lfs_dir_fetchmatch+0x6ba>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 800db64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db66:	f107 0120 	add.w	r1, r7, #32
 800db6a:	2204      	movs	r2, #4
 800db6c:	4618      	mov	r0, r3
 800db6e:	f004 fd8b 	bl	8012688 <lfs_crc>
 800db72:	4603      	mov	r3, r0
 800db74:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 800db76:	6a3b      	ldr	r3, [r7, #32]
 800db78:	4618      	mov	r0, r3
 800db7a:	f7fe fbd6 	bl	800c32a <lfs_frombe32>
 800db7e:	4602      	mov	r2, r0
 800db80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db82:	4053      	eors	r3, r2
 800db84:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 800db86:	6a3b      	ldr	r3, [r7, #32]
 800db88:	4618      	mov	r0, r3
 800db8a:	f7ff f800 	bl	800cb8e <lfs_tag_isvalid>
 800db8e:	4603      	mov	r3, r0
 800db90:	f083 0301 	eor.w	r3, r3, #1
 800db94:	b2db      	uxtb	r3, r3
 800db96:	2b00      	cmp	r3, #0
 800db98:	d01b      	beq.n	800dbd2 <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800db9a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800db9c:	f7ff f818 	bl	800cbd0 <lfs_tag_type1>
 800dba0:	4603      	mov	r3, r0
 800dba2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800dba6:	d10d      	bne.n	800dbc4 <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	68db      	ldr	r3, [r3, #12]
 800dbac:	68fa      	ldr	r2, [r7, #12]
 800dbae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800dbb0:	6992      	ldr	r2, [r2, #24]
 800dbb2:	fbb3 f1f2 	udiv	r1, r3, r2
 800dbb6:	fb01 f202 	mul.w	r2, r1, r2
 800dbba:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d101      	bne.n	800dbc4 <lfs_dir_fetchmatch+0x25c>
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	e000      	b.n	800dbc6 <lfs_dir_fetchmatch+0x25e>
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	f003 0301 	and.w	r3, r3, #1
 800dbca:	b2da      	uxtb	r2, r3
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	759a      	strb	r2, [r3, #22]
                break;
 800dbd0:	e19b      	b.n	800df0a <lfs_dir_fetchmatch+0x5a2>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800dbd2:	6a3b      	ldr	r3, [r7, #32]
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7ff f852 	bl	800cc7e <lfs_tag_dsize>
 800dbda:	4602      	mov	r2, r0
 800dbdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbde:	441a      	add	r2, r3
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbe4:	69db      	ldr	r3, [r3, #28]
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d903      	bls.n	800dbf2 <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	2200      	movs	r2, #0
 800dbee:	759a      	strb	r2, [r3, #22]
                break;
 800dbf0:	e18b      	b.n	800df0a <lfs_dir_fetchmatch+0x5a2>
            }

            ptag = tag;
 800dbf2:	6a3b      	ldr	r3, [r7, #32]
 800dbf4:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 800dbf6:	6a3b      	ldr	r3, [r7, #32]
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7fe ffe9 	bl	800cbd0 <lfs_tag_type1>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800dc04:	d164      	bne.n	800dcd0 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800dc06:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc0c:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dc14:	3204      	adds	r2, #4
 800dc16:	2104      	movs	r1, #4
 800dc18:	9103      	str	r1, [sp, #12]
 800dc1a:	f107 011c 	add.w	r1, r7, #28
 800dc1e:	9102      	str	r1, [sp, #8]
 800dc20:	9201      	str	r2, [sp, #4]
 800dc22:	9300      	str	r3, [sp, #0]
 800dc24:	4623      	mov	r3, r4
 800dc26:	4602      	mov	r2, r0
 800dc28:	2100      	movs	r1, #0
 800dc2a:	68f8      	ldr	r0, [r7, #12]
 800dc2c:	f7fe fbd2 	bl	800c3d4 <lfs_bd_read>
 800dc30:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 800dc32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d009      	beq.n	800dc4c <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 800dc38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc3a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800dc3e:	d103      	bne.n	800dc48 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	2200      	movs	r2, #0
 800dc44:	759a      	strb	r2, [r3, #22]
                        break;
 800dc46:	e160      	b.n	800df0a <lfs_dir_fetchmatch+0x5a2>
                    }
                    return err;
 800dc48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 800dc4a:	e1ea      	b.n	800e022 <lfs_dir_fetchmatch+0x6ba>
                }
                dcrc = lfs_fromle32(dcrc);
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7fe fb54 	bl	800c2fc <lfs_fromle32>
 800dc54:	4603      	mov	r3, r0
 800dc56:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 800dc58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d003      	beq.n	800dc68 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	2200      	movs	r2, #0
 800dc64:	759a      	strb	r2, [r3, #22]
                    break;
 800dc66:	e150      	b.n	800df0a <lfs_dir_fetchmatch+0x5a2>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 800dc68:	6a3b      	ldr	r3, [r7, #32]
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7fe ffd0 	bl	800cc10 <lfs_tag_chunk>
 800dc70:	4603      	mov	r3, r0
 800dc72:	07db      	lsls	r3, r3, #31
 800dc74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc76:	4053      	eors	r3, r2
 800dc78:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc7e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800dc82:	2204      	movs	r2, #4
 800dc84:	4618      	mov	r0, r3
 800dc86:	f004 fcff 	bl	8012688 <lfs_crc>
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 800dc90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc92:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 800dc94:	6a3b      	ldr	r3, [r7, #32]
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7fe fff1 	bl	800cc7e <lfs_tag_dsize>
 800dc9c:	4602      	mov	r2, r0
 800dc9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dca0:	441a      	add	r2, r3
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dcaa:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800dcb2:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 800dcb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 800dcba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800dcc6:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 800dcc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dccc:	627b      	str	r3, [r7, #36]	; 0x24
 800dcce:	e720      	b.n	800db12 <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800dcd0:	2304      	movs	r3, #4
 800dcd2:	647b      	str	r3, [r7, #68]	; 0x44
 800dcd4:	e032      	b.n	800dd3c <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 800dcd6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcdc:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dce4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dce6:	440a      	add	r2, r1
 800dce8:	2101      	movs	r1, #1
 800dcea:	9103      	str	r1, [sp, #12]
 800dcec:	f107 011b 	add.w	r1, r7, #27
 800dcf0:	9102      	str	r1, [sp, #8]
 800dcf2:	9201      	str	r2, [sp, #4]
 800dcf4:	9300      	str	r3, [sp, #0]
 800dcf6:	4623      	mov	r3, r4
 800dcf8:	4602      	mov	r2, r0
 800dcfa:	2100      	movs	r1, #0
 800dcfc:	68f8      	ldr	r0, [r7, #12]
 800dcfe:	f7fe fb69 	bl	800c3d4 <lfs_bd_read>
 800dd02:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 800dd04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d00c      	beq.n	800dd24 <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 800dd0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd0c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800dd10:	d103      	bne.n	800dd1a <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	2200      	movs	r2, #0
 800dd16:	759a      	strb	r2, [r3, #22]
 800dd18:	e018      	b.n	800dd4c <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 800dd1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 800dd1c:	e181      	b.n	800e022 <lfs_dir_fetchmatch+0x6ba>
 800dd1e:	bf00      	nop
 800dd20:	08026f60 	.word	0x08026f60
                }

                crc = lfs_crc(crc, &dat, 1);
 800dd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd26:	f107 011b 	add.w	r1, r7, #27
 800dd2a:	2201      	movs	r2, #1
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f004 fcab 	bl	8012688 <lfs_crc>
 800dd32:	4603      	mov	r3, r0
 800dd34:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800dd36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd38:	3301      	adds	r3, #1
 800dd3a:	647b      	str	r3, [r7, #68]	; 0x44
 800dd3c:	6a3b      	ldr	r3, [r7, #32]
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7fe ff9d 	bl	800cc7e <lfs_tag_dsize>
 800dd44:	4602      	mov	r2, r0
 800dd46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d3c4      	bcc.n	800dcd6 <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800dd4c:	6a3b      	ldr	r3, [r7, #32]
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7fe ff3e 	bl	800cbd0 <lfs_tag_type1>
 800dd54:	4603      	mov	r3, r0
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d113      	bne.n	800dd82 <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 800dd5a:	6a3b      	ldr	r3, [r7, #32]
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f7fe ff71 	bl	800cc44 <lfs_tag_id>
 800dd62:	4603      	mov	r3, r0
 800dd64:	461a      	mov	r2, r3
 800dd66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	f200 8081 	bhi.w	800de72 <lfs_dir_fetchmatch+0x50a>
                    tempcount = lfs_tag_id(tag) + 1;
 800dd70:	6a3b      	ldr	r3, [r7, #32]
 800dd72:	4618      	mov	r0, r3
 800dd74:	f7fe ff66 	bl	800cc44 <lfs_tag_id>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	3301      	adds	r3, #1
 800dd7c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800dd80:	e077      	b.n	800de72 <lfs_dir_fetchmatch+0x50a>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800dd82:	6a3b      	ldr	r3, [r7, #32]
 800dd84:	4618      	mov	r0, r3
 800dd86:	f7fe ff23 	bl	800cbd0 <lfs_tag_type1>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd90:	d134      	bne.n	800ddfc <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 800dd92:	6a3b      	ldr	r3, [r7, #32]
 800dd94:	4618      	mov	r0, r3
 800dd96:	f7fe ff48 	bl	800cc2a <lfs_tag_splice>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	b29a      	uxth	r2, r3
 800dd9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dda2:	4413      	add	r3, r2
 800dda4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 800dda8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ddaa:	4ba0      	ldr	r3, [pc, #640]	; (800e02c <lfs_dir_fetchmatch+0x6c4>)
 800ddac:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800ddae:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800ddb2:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800ddb6:	6a3a      	ldr	r2, [r7, #32]
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d104      	bne.n	800ddc6 <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 800ddbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ddc2:	64bb      	str	r3, [r7, #72]	; 0x48
 800ddc4:	e055      	b.n	800de72 <lfs_dir_fetchmatch+0x50a>
                } else if (tempbesttag != -1 &&
 800ddc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddcc:	d051      	beq.n	800de72 <lfs_dir_fetchmatch+0x50a>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800ddce:	6a3b      	ldr	r3, [r7, #32]
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f7fe ff37 	bl	800cc44 <lfs_tag_id>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	461c      	mov	r4, r3
 800ddda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7fe ff31 	bl	800cc44 <lfs_tag_id>
 800dde2:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 800dde4:	429c      	cmp	r4, r3
 800dde6:	d844      	bhi.n	800de72 <lfs_dir_fetchmatch+0x50a>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800dde8:	6a3b      	ldr	r3, [r7, #32]
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7fe ff1d 	bl	800cc2a <lfs_tag_splice>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	029a      	lsls	r2, r3, #10
 800ddf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddf6:	4413      	add	r3, r2
 800ddf8:	64bb      	str	r3, [r7, #72]	; 0x48
 800ddfa:	e03a      	b.n	800de72 <lfs_dir_fetchmatch+0x50a>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 800ddfc:	6a3b      	ldr	r3, [r7, #32]
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7fe fee6 	bl	800cbd0 <lfs_tag_type1>
 800de04:	4603      	mov	r3, r0
 800de06:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800de0a:	d132      	bne.n	800de72 <lfs_dir_fetchmatch+0x50a>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 800de0c:	6a3b      	ldr	r3, [r7, #32]
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fe fefe 	bl	800cc10 <lfs_tag_chunk>
 800de14:	4603      	mov	r3, r0
 800de16:	f003 0301 	and.w	r3, r3, #1
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	bf14      	ite	ne
 800de1e:	2301      	movne	r3, #1
 800de20:	2300      	moveq	r3, #0
 800de22:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 800de26:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de2c:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800de34:	3204      	adds	r2, #4
 800de36:	2108      	movs	r1, #8
 800de38:	9103      	str	r1, [sp, #12]
 800de3a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800de3e:	9102      	str	r1, [sp, #8]
 800de40:	9201      	str	r2, [sp, #4]
 800de42:	9300      	str	r3, [sp, #0]
 800de44:	4623      	mov	r3, r4
 800de46:	4602      	mov	r2, r0
 800de48:	2100      	movs	r1, #0
 800de4a:	68f8      	ldr	r0, [r7, #12]
 800de4c:	f7fe fac2 	bl	800c3d4 <lfs_bd_read>
 800de50:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 800de52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de54:	2b00      	cmp	r3, #0
 800de56:	d007      	beq.n	800de68 <lfs_dir_fetchmatch+0x500>
                    if (err == LFS_ERR_CORRUPT) {
 800de58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de5a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800de5e:	d103      	bne.n	800de68 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	2200      	movs	r2, #0
 800de64:	759a      	strb	r2, [r3, #22]
                        break;
 800de66:	e050      	b.n	800df0a <lfs_dir_fetchmatch+0x5a2>
                    }
                }
                lfs_pair_fromle32(temptail);
 800de68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7fe fe5a 	bl	800cb26 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 800de72:	6a3a      	ldr	r2, [r7, #32]
 800de74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de76:	405a      	eors	r2, r3
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	4013      	ands	r3, r2
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	f47f ae48 	bne.w	800db12 <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 800de82:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 800de88:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 800de8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de8c:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 800de8e:	617b      	str	r3, [r7, #20]
 800de90:	f107 0210 	add.w	r2, r7, #16
 800de94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800de98:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800de9c:	4798      	blx	r3
 800de9e:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 800dea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	da09      	bge.n	800deba <lfs_dir_fetchmatch+0x552>
                    if (res == LFS_ERR_CORRUPT) {
 800dea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dea8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800deac:	d103      	bne.n	800deb6 <lfs_dir_fetchmatch+0x54e>
                        dir->erased = false;
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	2200      	movs	r2, #0
 800deb2:	759a      	strb	r2, [r3, #22]
 800deb4:	e029      	b.n	800df0a <lfs_dir_fetchmatch+0x5a2>
                        break;
                    }
                    return res;
 800deb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 800deb8:	e0b3      	b.n	800e022 <lfs_dir_fetchmatch+0x6ba>
                }

                if (res == LFS_CMP_EQ) {
 800deba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800debc:	2b00      	cmp	r3, #0
 800debe:	d102      	bne.n	800dec6 <lfs_dir_fetchmatch+0x55e>
                    // found a match
                    tempbesttag = tag;
 800dec0:	6a3b      	ldr	r3, [r7, #32]
 800dec2:	64bb      	str	r3, [r7, #72]	; 0x48
 800dec4:	e625      	b.n	800db12 <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 800dec6:	6a3a      	ldr	r2, [r7, #32]
 800dec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800deca:	405a      	eors	r2, r3
 800decc:	4b58      	ldr	r3, [pc, #352]	; (800e030 <lfs_dir_fetchmatch+0x6c8>)
 800dece:	4013      	ands	r3, r2
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d103      	bne.n	800dedc <lfs_dir_fetchmatch+0x574>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 800ded4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ded8:	64bb      	str	r3, [r7, #72]	; 0x48
 800deda:	e61a      	b.n	800db12 <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 800dedc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dede:	2b02      	cmp	r3, #2
 800dee0:	f47f ae17 	bne.w	800db12 <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800dee4:	6a3b      	ldr	r3, [r7, #32]
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7fe feac 	bl	800cc44 <lfs_tag_id>
 800deec:	4603      	mov	r3, r0
 800deee:	461c      	mov	r4, r3
 800def0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800def2:	4618      	mov	r0, r3
 800def4:	f7fe fea6 	bl	800cc44 <lfs_tag_id>
 800def8:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 800defa:	429c      	cmp	r4, r3
 800defc:	f63f ae09 	bhi.w	800db12 <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 800df00:	6a3b      	ldr	r3, [r7, #32]
 800df02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df06:	64bb      	str	r3, [r7, #72]	; 0x48
 800df08:	e603      	b.n	800db12 <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	68db      	ldr	r3, [r3, #12]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d100      	bne.n	800df14 <lfs_dir_fetchmatch+0x5ac>
 800df12:	e05d      	b.n	800dfd0 <lfs_dir_fetchmatch+0x668>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	333c      	adds	r3, #60	; 0x3c
 800df18:	68ba      	ldr	r2, [r7, #8]
 800df1a:	4611      	mov	r1, r2
 800df1c:	4618      	mov	r0, r3
 800df1e:	f7fe ff39 	bl	800cd94 <lfs_gstate_hasmovehere>
 800df22:	4603      	mov	r3, r0
 800df24:	2b00      	cmp	r3, #0
 800df26:	d028      	beq.n	800df7a <lfs_dir_fetchmatch+0x612>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7fe fe89 	bl	800cc44 <lfs_tag_id>
 800df32:	4603      	mov	r3, r0
 800df34:	461c      	mov	r4, r3
 800df36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df38:	4618      	mov	r0, r3
 800df3a:	f7fe fe83 	bl	800cc44 <lfs_tag_id>
 800df3e:	4603      	mov	r3, r0
 800df40:	429c      	cmp	r4, r3
 800df42:	d104      	bne.n	800df4e <lfs_dir_fetchmatch+0x5e6>
                    besttag |= 0x80000000;
 800df44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df4a:	667b      	str	r3, [r7, #100]	; 0x64
 800df4c:	e015      	b.n	800df7a <lfs_dir_fetchmatch+0x612>
                } else if (besttag != -1 &&
 800df4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df54:	d011      	beq.n	800df7a <lfs_dir_fetchmatch+0x612>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7fe fe72 	bl	800cc44 <lfs_tag_id>
 800df60:	4603      	mov	r3, r0
 800df62:	461c      	mov	r4, r3
 800df64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df66:	4618      	mov	r0, r3
 800df68:	f7fe fe6c 	bl	800cc44 <lfs_tag_id>
 800df6c:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 800df6e:	429c      	cmp	r4, r3
 800df70:	d203      	bcs.n	800df7a <lfs_dir_fetchmatch+0x612>
                    besttag -= LFS_MKTAG(0, 1, 0);
 800df72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df74:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800df78:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 800df7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d00f      	beq.n	800dfa0 <lfs_dir_fetchmatch+0x638>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 800df80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df82:	4618      	mov	r0, r3
 800df84:	f7fe fe5e 	bl	800cc44 <lfs_tag_id>
 800df88:	4603      	mov	r3, r0
 800df8a:	461a      	mov	r2, r3
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	8a9b      	ldrh	r3, [r3, #20]
 800df90:	4619      	mov	r1, r3
 800df92:	4610      	mov	r0, r2
 800df94:	f7fe f942 	bl	800c21c <lfs_min>
 800df98:	4603      	mov	r3, r0
 800df9a:	b29a      	uxth	r2, r3
 800df9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800df9e:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 800dfa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7fe fdf3 	bl	800cb8e <lfs_tag_isvalid>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d001      	beq.n	800dfb2 <lfs_dir_fetchmatch+0x64a>
                return besttag;
 800dfae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dfb0:	e037      	b.n	800e022 <lfs_dir_fetchmatch+0x6ba>
            } else if (lfs_tag_id(besttag) < dir->count) {
 800dfb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7fe fe45 	bl	800cc44 <lfs_tag_id>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	461a      	mov	r2, r3
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	8a9b      	ldrh	r3, [r3, #20]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d202      	bcs.n	800dfcc <lfs_dir_fetchmatch+0x664>
                return LFS_ERR_NOENT;
 800dfc6:	f06f 0301 	mvn.w	r3, #1
 800dfca:	e02a      	b.n	800e022 <lfs_dir_fetchmatch+0x6ba>
            } else {
                return 0;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	e028      	b.n	800e022 <lfs_dir_fetchmatch+0x6ba>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7fe fd20 	bl	800ca18 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 800dfd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dfda:	3301      	adds	r3, #1
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	f003 0301 	and.w	r3, r3, #1
 800dfe2:	bfb8      	it	lt
 800dfe4:	425b      	neglt	r3, r3
 800dfe6:	009b      	lsls	r3, r3, #2
 800dfe8:	3368      	adds	r3, #104	; 0x68
 800dfea:	443b      	add	r3, r7
 800dfec:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 800dff4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dff6:	3301      	adds	r3, #1
 800dff8:	65bb      	str	r3, [r7, #88]	; 0x58
 800dffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dffc:	2b01      	cmp	r3, #1
 800dffe:	f77f ad5a 	ble.w	800dab6 <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	681a      	ldr	r2, [r3, #0]
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	490a      	ldr	r1, [pc, #40]	; (800e034 <lfs_dir_fetchmatch+0x6cc>)
 800e00c:	9101      	str	r1, [sp, #4]
 800e00e:	9300      	str	r3, [sp, #0]
 800e010:	4613      	mov	r3, r2
 800e012:	f240 4232 	movw	r2, #1074	; 0x432
 800e016:	4908      	ldr	r1, [pc, #32]	; (800e038 <lfs_dir_fetchmatch+0x6d0>)
 800e018:	4808      	ldr	r0, [pc, #32]	; (800e03c <lfs_dir_fetchmatch+0x6d4>)
 800e01a:	f015 ffdd 	bl	8023fd8 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 800e01e:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 800e022:	4618      	mov	r0, r3
 800e024:	376c      	adds	r7, #108	; 0x6c
 800e026:	46bd      	mov	sp, r7
 800e028:	bd90      	pop	{r4, r7, pc}
 800e02a:	bf00      	nop
 800e02c:	000ffc00 	.word	0x000ffc00
 800e030:	7ffffc00 	.word	0x7ffffc00
 800e034:	08026f24 	.word	0x08026f24
 800e038:	08026e18 	.word	0x08026e18
 800e03c:	08026f28 	.word	0x08026f28

0800e040 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 800e040:	b580      	push	{r7, lr}
 800e042:	b088      	sub	sp, #32
 800e044:	af04      	add	r7, sp, #16
 800e046:	60f8      	str	r0, [r7, #12]
 800e048:	60b9      	str	r1, [r7, #8]
 800e04a:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 800e04c:	2300      	movs	r3, #0
 800e04e:	9303      	str	r3, [sp, #12]
 800e050:	2300      	movs	r3, #0
 800e052:	9302      	str	r3, [sp, #8]
 800e054:	2300      	movs	r3, #0
 800e056:	9301      	str	r3, [sp, #4]
 800e058:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e05c:	9300      	str	r3, [sp, #0]
 800e05e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e062:	687a      	ldr	r2, [r7, #4]
 800e064:	68b9      	ldr	r1, [r7, #8]
 800e066:	68f8      	ldr	r0, [r7, #12]
 800e068:	f7ff fc7e 	bl	800d968 <lfs_dir_fetchmatch>
 800e06c:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3710      	adds	r7, #16
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
	...

0800e078 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 800e078:	b580      	push	{r7, lr}
 800e07a:	b08a      	sub	sp, #40	; 0x28
 800e07c:	af02      	add	r7, sp, #8
 800e07e:	60f8      	str	r0, [r7, #12]
 800e080:	60b9      	str	r1, [r7, #8]
 800e082:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 800e084:	f107 0310 	add.w	r3, r7, #16
 800e088:	9300      	str	r3, [sp, #0]
 800e08a:	4b12      	ldr	r3, [pc, #72]	; (800e0d4 <lfs_dir_getgstate+0x5c>)
 800e08c:	4a12      	ldr	r2, [pc, #72]	; (800e0d8 <lfs_dir_getgstate+0x60>)
 800e08e:	68b9      	ldr	r1, [r7, #8]
 800e090:	68f8      	ldr	r0, [r7, #12]
 800e092:	f7ff f9c1 	bl	800d418 <lfs_dir_get>
 800e096:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 800e098:	69fb      	ldr	r3, [r7, #28]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	da05      	bge.n	800e0aa <lfs_dir_getgstate+0x32>
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	f113 0f02 	cmn.w	r3, #2
 800e0a4:	d001      	beq.n	800e0aa <lfs_dir_getgstate+0x32>
        return res;
 800e0a6:	69fb      	ldr	r3, [r7, #28]
 800e0a8:	e00f      	b.n	800e0ca <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 800e0aa:	69fb      	ldr	r3, [r7, #28]
 800e0ac:	f113 0f02 	cmn.w	r3, #2
 800e0b0:	d00a      	beq.n	800e0c8 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 800e0b2:	f107 0310 	add.w	r3, r7, #16
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7fe fe8c 	bl	800cdd4 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 800e0bc:	f107 0310 	add.w	r3, r7, #16
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f7fe fdef 	bl	800cca6 <lfs_gstate_xor>
    }

    return 0;
 800e0c8:	2300      	movs	r3, #0
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3720      	adds	r7, #32
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	7ff0000c 	.word	0x7ff0000c
 800e0d8:	7ff00000 	.word	0x7ff00000

0800e0dc <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b08a      	sub	sp, #40	; 0x28
 800e0e0:	af02      	add	r7, sp, #8
 800e0e2:	60f8      	str	r0, [r7, #12]
 800e0e4:	60b9      	str	r1, [r7, #8]
 800e0e6:	603b      	str	r3, [r7, #0]
 800e0e8:	4613      	mov	r3, r2
 800e0ea:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 800e0ec:	88fb      	ldrh	r3, [r7, #6]
 800e0ee:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d10b      	bne.n	800e10e <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	3308      	adds	r3, #8
 800e0fa:	4932      	ldr	r1, [pc, #200]	; (800e1c4 <lfs_dir_getinfo+0xe8>)
 800e0fc:	461a      	mov	r2, r3
 800e0fe:	460b      	mov	r3, r1
 800e100:	881b      	ldrh	r3, [r3, #0]
 800e102:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	2202      	movs	r2, #2
 800e108:	701a      	strb	r2, [r3, #0]
        return 0;
 800e10a:	2300      	movs	r3, #0
 800e10c:	e055      	b.n	800e1ba <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800e10e:	88fb      	ldrh	r3, [r7, #6]
 800e110:	029a      	lsls	r2, r3, #10
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e116:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800e118:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800e11e:	9300      	str	r3, [sp, #0]
 800e120:	4613      	mov	r3, r2
 800e122:	4a29      	ldr	r2, [pc, #164]	; (800e1c8 <lfs_dir_getinfo+0xec>)
 800e124:	68b9      	ldr	r1, [r7, #8]
 800e126:	68f8      	ldr	r0, [r7, #12]
 800e128:	f7ff f976 	bl	800d418 <lfs_dir_get>
 800e12c:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 800e12e:	69fb      	ldr	r3, [r7, #28]
 800e130:	2b00      	cmp	r3, #0
 800e132:	da01      	bge.n	800e138 <lfs_dir_getinfo+0x5c>
        return (int)tag;
 800e134:	69fb      	ldr	r3, [r7, #28]
 800e136:	e040      	b.n	800e1ba <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 800e138:	69fb      	ldr	r3, [r7, #28]
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7fe fd58 	bl	800cbf0 <lfs_tag_type3>
 800e140:	4603      	mov	r3, r0
 800e142:	b2da      	uxtb	r2, r3
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800e148:	88fb      	ldrh	r3, [r7, #6]
 800e14a:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800e14c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e150:	f043 0308 	orr.w	r3, r3, #8
 800e154:	f107 0214 	add.w	r2, r7, #20
 800e158:	9200      	str	r2, [sp, #0]
 800e15a:	4a1c      	ldr	r2, [pc, #112]	; (800e1cc <lfs_dir_getinfo+0xf0>)
 800e15c:	68b9      	ldr	r1, [r7, #8]
 800e15e:	68f8      	ldr	r0, [r7, #12]
 800e160:	f7ff f95a 	bl	800d418 <lfs_dir_get>
 800e164:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	da01      	bge.n	800e170 <lfs_dir_getinfo+0x94>
        return (int)tag;
 800e16c:	69fb      	ldr	r3, [r7, #28]
 800e16e:	e024      	b.n	800e1ba <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 800e170:	f107 0314 	add.w	r3, r7, #20
 800e174:	4618      	mov	r0, r3
 800e176:	f7fe fe6d 	bl	800ce54 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800e17a:	69fb      	ldr	r3, [r7, #28]
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7fe fd37 	bl	800cbf0 <lfs_tag_type3>
 800e182:	4603      	mov	r3, r0
 800e184:	461a      	mov	r2, r3
 800e186:	f240 2302 	movw	r3, #514	; 0x202
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d103      	bne.n	800e196 <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 800e18e:	69ba      	ldr	r2, [r7, #24]
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	605a      	str	r2, [r3, #4]
 800e194:	e010      	b.n	800e1b8 <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800e196:	69fb      	ldr	r3, [r7, #28]
 800e198:	4618      	mov	r0, r3
 800e19a:	f7fe fd29 	bl	800cbf0 <lfs_tag_type3>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	461a      	mov	r2, r3
 800e1a2:	f240 2301 	movw	r3, #513	; 0x201
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d106      	bne.n	800e1b8 <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 800e1aa:	69fb      	ldr	r3, [r7, #28]
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f7fe fd59 	bl	800cc64 <lfs_tag_size>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	605a      	str	r2, [r3, #4]
    }

    return 0;
 800e1b8:	2300      	movs	r3, #0
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3720      	adds	r7, #32
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}
 800e1c2:	bf00      	nop
 800e1c4:	08026f68 	.word	0x08026f68
 800e1c8:	780ffc00 	.word	0x780ffc00
 800e1cc:	700ffc00 	.word	0x700ffc00

0800e1d0 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800e1d0:	b590      	push	{r4, r7, lr}
 800e1d2:	b08f      	sub	sp, #60	; 0x3c
 800e1d4:	af04      	add	r7, sp, #16
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	60b9      	str	r1, [r7, #8]
 800e1da:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 800e1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800e1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ec:	689c      	ldr	r4, [r3, #8]
 800e1ee:	68b8      	ldr	r0, [r7, #8]
 800e1f0:	f7fe fd38 	bl	800cc64 <lfs_tag_size>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	f7fe f80f 	bl	800c21c <lfs_min>
 800e1fe:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 800e200:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 800e202:	69fb      	ldr	r3, [r7, #28]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	69fa      	ldr	r2, [r7, #28]
 800e208:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 800e20a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e20c:	6849      	ldr	r1, [r1, #4]
 800e20e:	69b8      	ldr	r0, [r7, #24]
 800e210:	9003      	str	r0, [sp, #12]
 800e212:	9102      	str	r1, [sp, #8]
 800e214:	9201      	str	r2, [sp, #4]
 800e216:	9300      	str	r3, [sp, #0]
 800e218:	69bb      	ldr	r3, [r7, #24]
 800e21a:	4622      	mov	r2, r4
 800e21c:	2100      	movs	r1, #0
 800e21e:	6a38      	ldr	r0, [r7, #32]
 800e220:	f7fe fa1c 	bl	800c65c <lfs_bd_cmp>
 800e224:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d001      	beq.n	800e230 <lfs_dir_find_match+0x60>
        return res;
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	e014      	b.n	800e25a <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 800e230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e232:	689c      	ldr	r4, [r3, #8]
 800e234:	68b8      	ldr	r0, [r7, #8]
 800e236:	f7fe fd15 	bl	800cc64 <lfs_tag_size>
 800e23a:	4603      	mov	r3, r0
 800e23c:	429c      	cmp	r4, r3
 800e23e:	d00b      	beq.n	800e258 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800e240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e242:	689c      	ldr	r4, [r3, #8]
 800e244:	68b8      	ldr	r0, [r7, #8]
 800e246:	f7fe fd0d 	bl	800cc64 <lfs_tag_size>
 800e24a:	4603      	mov	r3, r0
 800e24c:	429c      	cmp	r4, r3
 800e24e:	d201      	bcs.n	800e254 <lfs_dir_find_match+0x84>
 800e250:	2301      	movs	r3, #1
 800e252:	e002      	b.n	800e25a <lfs_dir_find_match+0x8a>
 800e254:	2302      	movs	r3, #2
 800e256:	e000      	b.n	800e25a <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 800e258:	2300      	movs	r3, #0
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	372c      	adds	r7, #44	; 0x2c
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd90      	pop	{r4, r7, pc}
	...

0800e264 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 800e264:	b590      	push	{r4, r7, lr}
 800e266:	b093      	sub	sp, #76	; 0x4c
 800e268:	af04      	add	r7, sp, #16
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	60b9      	str	r1, [r7, #8]
 800e26e:	607a      	str	r2, [r7, #4]
 800e270:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d003      	beq.n	800e286 <lfs_dir_find+0x22>
        *id = 0x3ff;
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e284:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800e286:	4b6e      	ldr	r3, [pc, #440]	; (800e440 <lfs_dir_find+0x1dc>)
 800e288:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	6a1a      	ldr	r2, [r3, #32]
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 800e29a:	496a      	ldr	r1, [pc, #424]	; (800e444 <lfs_dir_find+0x1e0>)
 800e29c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e29e:	f016 f894 	bl	80243ca <strspn>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2a6:	4413      	add	r3, r2
 800e2a8:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 800e2aa:	4966      	ldr	r1, [pc, #408]	; (800e444 <lfs_dir_find+0x1e0>)
 800e2ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e2ae:	f016 f87b 	bl	80243a8 <strcspn>
 800e2b2:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800e2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b6:	2b01      	cmp	r3, #1
 800e2b8:	d105      	bne.n	800e2c6 <lfs_dir_find+0x62>
 800e2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2bc:	781a      	ldrb	r2, [r3, #0]
 800e2be:	4b62      	ldr	r3, [pc, #392]	; (800e448 <lfs_dir_find+0x1e4>)
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d00a      	beq.n	800e2dc <lfs_dir_find+0x78>
 800e2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c8:	2b02      	cmp	r3, #2
 800e2ca:	d10c      	bne.n	800e2e6 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 800e2cc:	2202      	movs	r2, #2
 800e2ce:	495f      	ldr	r1, [pc, #380]	; (800e44c <lfs_dir_find+0x1e8>)
 800e2d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e2d2:	f016 f81b 	bl	802430c <memcmp>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d104      	bne.n	800e2e6 <lfs_dir_find+0x82>
            name += namelen;
 800e2dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e0:	4413      	add	r3, r2
 800e2e2:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 800e2e4:	e7d9      	b.n	800e29a <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 800e2e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ea:	4413      	add	r3, r2
 800e2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 800e2f2:	4954      	ldr	r1, [pc, #336]	; (800e444 <lfs_dir_find+0x1e0>)
 800e2f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2f6:	f016 f868 	bl	80243ca <strspn>
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fe:	4413      	add	r3, r2
 800e300:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 800e302:	4950      	ldr	r1, [pc, #320]	; (800e444 <lfs_dir_find+0x1e0>)
 800e304:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e306:	f016 f84f 	bl	80243a8 <strcspn>
 800e30a:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 800e30c:	6a3b      	ldr	r3, [r7, #32]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d01d      	beq.n	800e34e <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800e312:	6a3b      	ldr	r3, [r7, #32]
 800e314:	2b02      	cmp	r3, #2
 800e316:	d112      	bne.n	800e33e <lfs_dir_find+0xda>
 800e318:	2202      	movs	r2, #2
 800e31a:	494c      	ldr	r1, [pc, #304]	; (800e44c <lfs_dir_find+0x1e8>)
 800e31c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e31e:	f015 fff5 	bl	802430c <memcmp>
 800e322:	4603      	mov	r3, r0
 800e324:	2b00      	cmp	r3, #0
 800e326:	d10a      	bne.n	800e33e <lfs_dir_find+0xda>
                depth -= 1;
 800e328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e32a:	3b01      	subs	r3, #1
 800e32c:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 800e32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e330:	2b00      	cmp	r3, #0
 800e332:	d107      	bne.n	800e344 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 800e334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e336:	6a3b      	ldr	r3, [r7, #32]
 800e338:	4413      	add	r3, r2
 800e33a:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 800e33c:	e7ad      	b.n	800e29a <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 800e33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e340:	3301      	adds	r3, #1
 800e342:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 800e344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e346:	6a3b      	ldr	r3, [r7, #32]
 800e348:	4413      	add	r3, r2
 800e34a:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 800e34c:	e7d1      	b.n	800e2f2 <lfs_dir_find+0x8e>
                break;
 800e34e:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 800e350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e352:	781b      	ldrb	r3, [r3, #0]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d101      	bne.n	800e35c <lfs_dir_find+0xf8>
            return tag;
 800e358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e35a:	e06c      	b.n	800e436 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e360:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800e362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e364:	4618      	mov	r0, r3
 800e366:	f7fe fc43 	bl	800cbf0 <lfs_tag_type3>
 800e36a:	4603      	mov	r3, r0
 800e36c:	2b02      	cmp	r3, #2
 800e36e:	d002      	beq.n	800e376 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 800e370:	f06f 0313 	mvn.w	r3, #19
 800e374:	e05f      	b.n	800e436 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 800e376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e378:	4618      	mov	r0, r3
 800e37a:	f7fe fc63 	bl	800cc44 <lfs_tag_id>
 800e37e:	4603      	mov	r3, r0
 800e380:	461a      	mov	r2, r3
 800e382:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800e386:	429a      	cmp	r2, r3
 800e388:	d01c      	beq.n	800e3c4 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800e38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7fe fc59 	bl	800cc44 <lfs_tag_id>
 800e392:	4603      	mov	r3, r0
 800e394:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800e396:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e39a:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800e39e:	68ba      	ldr	r2, [r7, #8]
 800e3a0:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800e3a2:	9200      	str	r2, [sp, #0]
 800e3a4:	4a2a      	ldr	r2, [pc, #168]	; (800e450 <lfs_dir_find+0x1ec>)
 800e3a6:	68b9      	ldr	r1, [r7, #8]
 800e3a8:	68f8      	ldr	r0, [r7, #12]
 800e3aa:	f7ff f835 	bl	800d418 <lfs_dir_get>
 800e3ae:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	da01      	bge.n	800e3ba <lfs_dir_find+0x156>
                return res;
 800e3b6:	69fb      	ldr	r3, [r7, #28]
 800e3b8:	e03d      	b.n	800e436 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	3318      	adds	r3, #24
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f7fe fbb1 	bl	800cb26 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 800e3ca:	212f      	movs	r1, #47	; 0x2f
 800e3cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e3ce:	f015 ffde 	bl	802438e <strchr>
 800e3d2:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d101      	bne.n	800e3dc <lfs_dir_find+0x178>
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	e000      	b.n	800e3de <lfs_dir_find+0x17a>
 800e3dc:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800e3de:	68fa      	ldr	r2, [r7, #12]
 800e3e0:	613a      	str	r2, [r7, #16]
 800e3e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3e4:	617a      	str	r2, [r7, #20]
 800e3e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3e8:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800e3ea:	f107 0210 	add.w	r2, r7, #16
 800e3ee:	9203      	str	r2, [sp, #12]
 800e3f0:	4a18      	ldr	r2, [pc, #96]	; (800e454 <lfs_dir_find+0x1f0>)
 800e3f2:	9202      	str	r2, [sp, #8]
 800e3f4:	9301      	str	r3, [sp, #4]
 800e3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f8:	9300      	str	r3, [sp, #0]
 800e3fa:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800e3fe:	4622      	mov	r2, r4
 800e400:	68b9      	ldr	r1, [r7, #8]
 800e402:	68f8      	ldr	r0, [r7, #12]
 800e404:	f7ff fab0 	bl	800d968 <lfs_dir_fetchmatch>
 800e408:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800e40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	da01      	bge.n	800e414 <lfs_dir_find+0x1b0>
                return tag;
 800e410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e412:	e010      	b.n	800e436 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 800e414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e416:	2b00      	cmp	r3, #0
 800e418:	d004      	beq.n	800e424 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800e41a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41e:	4413      	add	r3, r2
 800e420:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 800e422:	e73a      	b.n	800e29a <lfs_dir_find+0x36>
            if (!dir->split) {
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	7ddb      	ldrb	r3, [r3, #23]
 800e428:	f083 0301 	eor.w	r3, r3, #1
 800e42c:	b2db      	uxtb	r3, r3
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d0c8      	beq.n	800e3c4 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 800e432:	f06f 0301 	mvn.w	r3, #1
    }
}
 800e436:	4618      	mov	r0, r3
 800e438:	373c      	adds	r7, #60	; 0x3c
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd90      	pop	{r4, r7, pc}
 800e43e:	bf00      	nop
 800e440:	002ffc00 	.word	0x002ffc00
 800e444:	08026f68 	.word	0x08026f68
 800e448:	08026f6c 	.word	0x08026f6c
 800e44c:	08026f70 	.word	0x08026f70
 800e450:	700ffc00 	.word	0x700ffc00
 800e454:	0800e1d1 	.word	0x0800e1d1

0800e458 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 800e458:	b590      	push	{r4, r7, lr}
 800e45a:	b08b      	sub	sp, #44	; 0x2c
 800e45c:	af04      	add	r7, sp, #16
 800e45e:	60f8      	str	r0, [r7, #12]
 800e460:	60b9      	str	r1, [r7, #8]
 800e462:	607a      	str	r2, [r7, #4]
 800e464:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f103 0010 	add.w	r0, r3, #16
 800e46c:	68fc      	ldr	r4, [r7, #12]
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	68ba      	ldr	r2, [r7, #8]
 800e474:	6852      	ldr	r2, [r2, #4]
 800e476:	6839      	ldr	r1, [r7, #0]
 800e478:	9103      	str	r1, [sp, #12]
 800e47a:	6879      	ldr	r1, [r7, #4]
 800e47c:	9102      	str	r1, [sp, #8]
 800e47e:	9201      	str	r2, [sp, #4]
 800e480:	9300      	str	r3, [sp, #0]
 800e482:	2300      	movs	r3, #0
 800e484:	4622      	mov	r2, r4
 800e486:	4601      	mov	r1, r0
 800e488:	68f8      	ldr	r0, [r7, #12]
 800e48a:	f7fe f9e9 	bl	800c860 <lfs_bd_prog>
 800e48e:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d001      	beq.n	800e49a <lfs_dir_commitprog+0x42>
        return err;
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	e010      	b.n	800e4bc <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	68db      	ldr	r3, [r3, #12]
 800e49e:	683a      	ldr	r2, [r7, #0]
 800e4a0:	6879      	ldr	r1, [r7, #4]
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f004 f8f0 	bl	8012688 <lfs_crc>
 800e4a8:	4602      	mov	r2, r0
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	685a      	ldr	r2, [r3, #4]
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	441a      	add	r2, r3
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	605a      	str	r2, [r3, #4]
    return 0;
 800e4ba:	2300      	movs	r3, #0
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	371c      	adds	r7, #28
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd90      	pop	{r4, r7, pc}

0800e4c4 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 800e4c4:	b590      	push	{r4, r7, lr}
 800e4c6:	b08f      	sub	sp, #60	; 0x3c
 800e4c8:	af04      	add	r7, sp, #16
 800e4ca:	60f8      	str	r0, [r7, #12]
 800e4cc:	60b9      	str	r1, [r7, #8]
 800e4ce:	607a      	str	r2, [r7, #4]
 800e4d0:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f7fe fbd3 	bl	800cc7e <lfs_tag_dsize>
 800e4d8:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	685a      	ldr	r2, [r3, #4]
 800e4de:	6a3b      	ldr	r3, [r7, #32]
 800e4e0:	441a      	add	r2, r3
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	695b      	ldr	r3, [r3, #20]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d902      	bls.n	800e4f0 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800e4ea:	f06f 031b 	mvn.w	r3, #27
 800e4ee:	e065      	b.n	800e5bc <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	689b      	ldr	r3, [r3, #8]
 800e4fa:	4053      	eors	r3, r2
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7fd ff20 	bl	800c342 <lfs_tobe32>
 800e502:	4603      	mov	r3, r0
 800e504:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800e506:	f107 0214 	add.w	r2, r7, #20
 800e50a:	2304      	movs	r3, #4
 800e50c:	68b9      	ldr	r1, [r7, #8]
 800e50e:	68f8      	ldr	r0, [r7, #12]
 800e510:	f7ff ffa2 	bl	800e458 <lfs_dir_commitprog>
 800e514:	61f8      	str	r0, [r7, #28]
    if (err) {
 800e516:	69fb      	ldr	r3, [r7, #28]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d001      	beq.n	800e520 <lfs_dir_commitattr+0x5c>
        return err;
 800e51c:	69fb      	ldr	r3, [r7, #28]
 800e51e:	e04d      	b.n	800e5bc <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2b00      	cmp	r3, #0
 800e524:	db0c      	blt.n	800e540 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800e526:	6a3b      	ldr	r3, [r7, #32]
 800e528:	3b04      	subs	r3, #4
 800e52a:	683a      	ldr	r2, [r7, #0]
 800e52c:	68b9      	ldr	r1, [r7, #8]
 800e52e:	68f8      	ldr	r0, [r7, #12]
 800e530:	f7ff ff92 	bl	800e458 <lfs_dir_commitprog>
 800e534:	61f8      	str	r0, [r7, #28]
        if (err) {
 800e536:	69fb      	ldr	r3, [r7, #28]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d039      	beq.n	800e5b0 <lfs_dir_commitattr+0xec>
            return err;
 800e53c:	69fb      	ldr	r3, [r7, #28]
 800e53e:	e03d      	b.n	800e5bc <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800e544:	2300      	movs	r3, #0
 800e546:	627b      	str	r3, [r7, #36]	; 0x24
 800e548:	e02d      	b.n	800e5a6 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800e54a:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800e54c:	6a3a      	ldr	r2, [r7, #32]
 800e54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e550:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800e552:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 800e554:	69bb      	ldr	r3, [r7, #24]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	69ba      	ldr	r2, [r7, #24]
 800e55a:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 800e55c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e55e:	440a      	add	r2, r1
 800e560:	2101      	movs	r1, #1
 800e562:	9103      	str	r1, [sp, #12]
 800e564:	f107 0113 	add.w	r1, r7, #19
 800e568:	9102      	str	r1, [sp, #8]
 800e56a:	9201      	str	r2, [sp, #4]
 800e56c:	9300      	str	r3, [sp, #0]
 800e56e:	4623      	mov	r3, r4
 800e570:	4602      	mov	r2, r0
 800e572:	2100      	movs	r1, #0
 800e574:	68f8      	ldr	r0, [r7, #12]
 800e576:	f7fd ff2d 	bl	800c3d4 <lfs_bd_read>
 800e57a:	61f8      	str	r0, [r7, #28]
            if (err) {
 800e57c:	69fb      	ldr	r3, [r7, #28]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d001      	beq.n	800e586 <lfs_dir_commitattr+0xc2>
                return err;
 800e582:	69fb      	ldr	r3, [r7, #28]
 800e584:	e01a      	b.n	800e5bc <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800e586:	f107 0213 	add.w	r2, r7, #19
 800e58a:	2301      	movs	r3, #1
 800e58c:	68b9      	ldr	r1, [r7, #8]
 800e58e:	68f8      	ldr	r0, [r7, #12]
 800e590:	f7ff ff62 	bl	800e458 <lfs_dir_commitprog>
 800e594:	61f8      	str	r0, [r7, #28]
            if (err) {
 800e596:	69fb      	ldr	r3, [r7, #28]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d001      	beq.n	800e5a0 <lfs_dir_commitattr+0xdc>
                return err;
 800e59c:	69fb      	ldr	r3, [r7, #28]
 800e59e:	e00d      	b.n	800e5bc <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800e5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a2:	3301      	adds	r3, #1
 800e5a4:	627b      	str	r3, [r7, #36]	; 0x24
 800e5a6:	6a3b      	ldr	r3, [r7, #32]
 800e5a8:	3b04      	subs	r3, #4
 800e5aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d3cc      	bcc.n	800e54a <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	609a      	str	r2, [r3, #8]
    return 0;
 800e5ba:	2300      	movs	r3, #0
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	372c      	adds	r7, #44	; 0x2c
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd90      	pop	{r4, r7, pc}

0800e5c4 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800e5c4:	b590      	push	{r4, r7, lr}
 800e5c6:	b097      	sub	sp, #92	; 0x5c
 800e5c8:	af04      	add	r7, sp, #16
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5da:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800e5dc:	4619      	mov	r1, r3
 800e5de:	4610      	mov	r0, r2
 800e5e0:	f7fd fe41 	bl	800c266 <lfs_alignup>
 800e5e4:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800e5ee:	e0a6      	b.n	800e73e <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	685b      	ldr	r3, [r3, #4]
 800e5f4:	3304      	adds	r3, #4
 800e5f6:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 800e5f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5fa:	6a3b      	ldr	r3, [r7, #32]
 800e5fc:	1ad3      	subs	r3, r2, r3
 800e5fe:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800e602:	4618      	mov	r0, r3
 800e604:	f7fd fe0a 	bl	800c21c <lfs_min>
 800e608:	4602      	mov	r2, r0
 800e60a:	6a3b      	ldr	r3, [r7, #32]
 800e60c:	4413      	add	r3, r2
 800e60e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 800e610:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e614:	429a      	cmp	r2, r3
 800e616:	d206      	bcs.n	800e626 <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 800e618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e61a:	3b08      	subs	r3, #8
 800e61c:	4619      	mov	r1, r3
 800e61e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e620:	f7fd fdfc 	bl	800c21c <lfs_min>
 800e624:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 800e626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e62a:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 800e62c:	6879      	ldr	r1, [r7, #4]
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	2204      	movs	r2, #4
 800e634:	9203      	str	r2, [sp, #12]
 800e636:	f107 0214 	add.w	r2, r7, #20
 800e63a:	9202      	str	r2, [sp, #8]
 800e63c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e63e:	9201      	str	r2, [sp, #4]
 800e640:	9300      	str	r3, [sp, #0]
 800e642:	2304      	movs	r3, #4
 800e644:	460a      	mov	r2, r1
 800e646:	2100      	movs	r1, #0
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f7fd fec3 	bl	800c3d4 <lfs_bd_read>
 800e64e:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 800e650:	69fb      	ldr	r3, [r7, #28]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d005      	beq.n	800e662 <lfs_dir_commitcrc+0x9e>
 800e656:	69fb      	ldr	r3, [r7, #28]
 800e658:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800e65c:	d001      	beq.n	800e662 <lfs_dir_commitcrc+0x9e>
            return err;
 800e65e:	69fb      	ldr	r3, [r7, #28]
 800e660:	e0e8      	b.n	800e834 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	4618      	mov	r0, r3
 800e666:	f7fd fe60 	bl	800c32a <lfs_frombe32>
 800e66a:	4603      	mov	r3, r0
 800e66c:	43db      	mvns	r3, r3
 800e66e:	0fdb      	lsrs	r3, r3, #31
 800e670:	2b00      	cmp	r3, #0
 800e672:	bf14      	ite	ne
 800e674:	2301      	movne	r3, #1
 800e676:	2300      	moveq	r3, #0
 800e678:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 800e67a:	7efb      	ldrb	r3, [r7, #27]
 800e67c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e680:	051a      	lsls	r2, r3, #20
 800e682:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e684:	6a3b      	ldr	r3, [r7, #32]
 800e686:	1acb      	subs	r3, r1, r3
 800e688:	4313      	orrs	r3, r2
 800e68a:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 800e68e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800e692:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	689a      	ldr	r2, [r3, #8]
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	4053      	eors	r3, r2
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7fd fe50 	bl	800c342 <lfs_tobe32>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	68db      	ldr	r3, [r3, #12]
 800e6aa:	f107 010c 	add.w	r1, r7, #12
 800e6ae:	2204      	movs	r2, #4
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f003 ffe9 	bl	8012688 <lfs_crc>
 800e6b6:	4602      	mov	r2, r0
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	68db      	ldr	r3, [r3, #12]
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7fd fe26 	bl	800c312 <lfs_tole32>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f103 0010 	add.w	r0, r3, #16
 800e6d0:	687c      	ldr	r4, [r7, #4]
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	683a      	ldr	r2, [r7, #0]
 800e6d8:	6852      	ldr	r2, [r2, #4]
 800e6da:	2108      	movs	r1, #8
 800e6dc:	9103      	str	r1, [sp, #12]
 800e6de:	f107 010c 	add.w	r1, r7, #12
 800e6e2:	9102      	str	r1, [sp, #8]
 800e6e4:	9201      	str	r2, [sp, #4]
 800e6e6:	9300      	str	r3, [sp, #0]
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	4622      	mov	r2, r4
 800e6ec:	4601      	mov	r1, r0
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f7fe f8b6 	bl	800c860 <lfs_bd_prog>
 800e6f4:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 800e6f6:	69fb      	ldr	r3, [r7, #28]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d001      	beq.n	800e700 <lfs_dir_commitcrc+0x13c>
            return err;
 800e6fc:	69fb      	ldr	r3, [r7, #28]
 800e6fe:	e099      	b.n	800e834 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 800e700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e702:	2b00      	cmp	r3, #0
 800e704:	d106      	bne.n	800e714 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	685b      	ldr	r3, [r3, #4]
 800e70a:	3304      	adds	r3, #4
 800e70c:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	68db      	ldr	r3, [r3, #12]
 800e712:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	4618      	mov	r0, r3
 800e718:	f7fe faa4 	bl	800cc64 <lfs_tag_size>
 800e71c:	4603      	mov	r3, r0
 800e71e:	1d1a      	adds	r2, r3, #4
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	685b      	ldr	r3, [r3, #4]
 800e724:	441a      	add	r2, r3
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 800e72a:	7efb      	ldrb	r3, [r7, #27]
 800e72c:	07da      	lsls	r2, r3, #31
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	405a      	eors	r2, r3
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e73c:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	685b      	ldr	r3, [r3, #4]
 800e742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e744:	429a      	cmp	r2, r3
 800e746:	f63f af53 	bhi.w	800e5f0 <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f103 0110 	add.w	r1, r3, #16
 800e750:	687a      	ldr	r2, [r7, #4]
 800e752:	2300      	movs	r3, #0
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f7fe f84f 	bl	800c7f8 <lfs_bd_sync>
 800e75a:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 800e75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d001      	beq.n	800e766 <lfs_dir_commitcrc+0x1a2>
        return err;
 800e762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e764:	e066      	b.n	800e834 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	691b      	ldr	r3, [r3, #16]
 800e76a:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 800e76c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e76e:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800e770:	e05b      	b.n	800e82a <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 800e772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e776:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800e778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e77a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e77c:	e030      	b.n	800e7e0 <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 800e77e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e782:	429a      	cmp	r2, r3
 800e784:	d106      	bne.n	800e794 <lfs_dir_commitcrc+0x1d0>
 800e786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d002      	beq.n	800e794 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 800e78e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800e792:	e04f      	b.n	800e834 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800e794:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 800e796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e79a:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800e79c:	1d18      	adds	r0, r3, #4
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	2201      	movs	r2, #1
 800e7a4:	9203      	str	r2, [sp, #12]
 800e7a6:	f107 020b 	add.w	r2, r7, #11
 800e7aa:	9202      	str	r2, [sp, #8]
 800e7ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7ae:	9201      	str	r2, [sp, #4]
 800e7b0:	9300      	str	r3, [sp, #0]
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	460a      	mov	r2, r1
 800e7b6:	2100      	movs	r1, #0
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f7fd fe0b 	bl	800c3d4 <lfs_bd_read>
 800e7be:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 800e7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d001      	beq.n	800e7ca <lfs_dir_commitcrc+0x206>
                return err;
 800e7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c8:	e034      	b.n	800e834 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 800e7ca:	f107 030b 	add.w	r3, r7, #11
 800e7ce:	2201      	movs	r2, #1
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7d4:	f003 ff58 	bl	8012688 <lfs_crc>
 800e7d8:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800e7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7dc:	3301      	adds	r3, #1
 800e7de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7e2:	3304      	adds	r3, #4
 800e7e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7e6:	429a      	cmp	r2, r3
 800e7e8:	d3c9      	bcc.n	800e77e <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 800e7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d002      	beq.n	800e7f6 <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 800e7f0:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800e7f4:	e01e      	b.n	800e834 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 800e7f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7fa:	1ad3      	subs	r3, r2, r3
 800e7fc:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800e800:	4618      	mov	r0, r3
 800e802:	f7fd fd0b 	bl	800c21c <lfs_min>
 800e806:	4602      	mov	r2, r0
 800e808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e80a:	4413      	add	r3, r2
 800e80c:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 800e80e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e812:	429a      	cmp	r2, r3
 800e814:	d206      	bcs.n	800e824 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 800e816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e818:	3b08      	subs	r3, #8
 800e81a:	4619      	mov	r1, r3
 800e81c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e81e:	f7fd fcfd 	bl	800c21c <lfs_min>
 800e822:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 800e824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e826:	3304      	adds	r3, #4
 800e828:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800e82a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82e:	429a      	cmp	r2, r3
 800e830:	d39f      	bcc.n	800e772 <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 800e832:	2300      	movs	r3, #0
}
 800e834:	4618      	mov	r0, r3
 800e836:	374c      	adds	r7, #76	; 0x4c
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd90      	pop	{r4, r7, pc}

0800e83c <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b08a      	sub	sp, #40	; 0x28
 800e840:	af04      	add	r7, sp, #16
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 800e846:	2300      	movs	r3, #0
 800e848:	617b      	str	r3, [r7, #20]
 800e84a:	e016      	b.n	800e87a <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	3301      	adds	r3, #1
 800e850:	2b00      	cmp	r3, #0
 800e852:	f003 0301 	and.w	r3, r3, #1
 800e856:	bfb8      	it	lt
 800e858:	425b      	neglt	r3, r3
 800e85a:	009b      	lsls	r3, r3, #2
 800e85c:	683a      	ldr	r2, [r7, #0]
 800e85e:	4413      	add	r3, r2
 800e860:	4619      	mov	r1, r3
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f7fe fc3e 	bl	800d0e4 <lfs_alloc>
 800e868:	60f8      	str	r0, [r7, #12]
        if (err) {
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d001      	beq.n	800e874 <lfs_dir_alloc+0x38>
            return err;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	e058      	b.n	800e926 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	3301      	adds	r3, #1
 800e878:	617b      	str	r3, [r7, #20]
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	2b01      	cmp	r3, #1
 800e87e:	dde5      	ble.n	800e84c <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducability in case initial block is unreadable
    dir->rev = 0;
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	2200      	movs	r2, #0
 800e884:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800e886:	6879      	ldr	r1, [r7, #4]
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 800e88c:	683a      	ldr	r2, [r7, #0]
 800e88e:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 800e890:	2004      	movs	r0, #4
 800e892:	9003      	str	r0, [sp, #12]
 800e894:	9202      	str	r2, [sp, #8]
 800e896:	2200      	movs	r2, #0
 800e898:	9201      	str	r2, [sp, #4]
 800e89a:	9300      	str	r3, [sp, #0]
 800e89c:	2304      	movs	r3, #4
 800e89e:	460a      	mov	r2, r1
 800e8a0:	2100      	movs	r1, #0
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f7fd fd96 	bl	800c3d4 <lfs_bd_read>
 800e8a8:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	689b      	ldr	r3, [r3, #8]
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7fd fd24 	bl	800c2fc <lfs_fromle32>
 800e8b4:	4602      	mov	r2, r0
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d005      	beq.n	800e8cc <lfs_dir_alloc+0x90>
 800e8c0:	693b      	ldr	r3, [r7, #16]
 800e8c2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800e8c6:	d001      	beq.n	800e8cc <lfs_dir_alloc+0x90>
        return err;
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	e02c      	b.n	800e926 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	dd0e      	ble.n	800e8f4 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	689a      	ldr	r2, [r3, #8]
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	f043 0301 	orr.w	r3, r3, #1
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	4610      	mov	r0, r2
 800e8ea:	f7fd fcbc 	bl	800c266 <lfs_alignup>
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	2204      	movs	r2, #4
 800e8f8:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e900:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	2200      	movs	r2, #0
 800e906:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e90e:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e916:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	2200      	movs	r2, #0
 800e91c:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	2200      	movs	r2, #0
 800e922:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 800e924:	2300      	movs	r3, #0
}
 800e926:	4618      	mov	r0, r3
 800e928:	3718      	adds	r7, #24
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
	...

0800e930 <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 800e930:	b580      	push	{r7, lr}
 800e932:	b08a      	sub	sp, #40	; 0x28
 800e934:	af00      	add	r7, sp, #0
 800e936:	60f8      	str	r0, [r7, #12]
 800e938:	60b9      	str	r1, [r7, #8]
 800e93a:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	3348      	adds	r3, #72	; 0x48
 800e940:	461a      	mov	r2, r3
 800e942:	6879      	ldr	r1, [r7, #4]
 800e944:	68f8      	ldr	r0, [r7, #12]
 800e946:	f7ff fb97 	bl	800e078 <lfs_dir_getgstate>
 800e94a:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 800e94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d001      	beq.n	800e956 <lfs_dir_drop+0x26>
        return err;
 800e952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e954:	e022      	b.n	800e99c <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	3318      	adds	r3, #24
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7fe f8fd 	bl	800cb5a <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	7ddb      	ldrb	r3, [r3, #23]
 800e964:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800e968:	051a      	lsls	r2, r3, #20
 800e96a:	4b0e      	ldr	r3, [pc, #56]	; (800e9a4 <lfs_dir_drop+0x74>)
 800e96c:	4313      	orrs	r3, r2
 800e96e:	61fb      	str	r3, [r7, #28]
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	3318      	adds	r3, #24
 800e974:	623b      	str	r3, [r7, #32]
 800e976:	f107 021c 	add.w	r2, r7, #28
 800e97a:	2301      	movs	r3, #1
 800e97c:	68b9      	ldr	r1, [r7, #8]
 800e97e:	68f8      	ldr	r0, [r7, #12]
 800e980:	f000 fbac 	bl	800f0dc <lfs_dir_commit>
 800e984:	6278      	str	r0, [r7, #36]	; 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	3318      	adds	r3, #24
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7fe f8cb 	bl	800cb26 <lfs_pair_fromle32>
    if (err) {
 800e990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e992:	2b00      	cmp	r3, #0
 800e994:	d001      	beq.n	800e99a <lfs_dir_drop+0x6a>
        return err;
 800e996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e998:	e000      	b.n	800e99c <lfs_dir_drop+0x6c>
    }

    return 0;
 800e99a:	2300      	movs	r3, #0
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3728      	adds	r7, #40	; 0x28
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	000ffc08 	.word	0x000ffc08

0800e9a8 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b092      	sub	sp, #72	; 0x48
 800e9ac:	af04      	add	r7, sp, #16
 800e9ae:	60f8      	str	r0, [r7, #12]
 800e9b0:	60b9      	str	r1, [r7, #8]
 800e9b2:	607a      	str	r2, [r7, #4]
 800e9b4:	603b      	str	r3, [r7, #0]
    // create tail directory
    lfs_alloc_ack(lfs);
 800e9b6:	68f8      	ldr	r0, [r7, #12]
 800e9b8:	f7fe fb74 	bl	800d0a4 <lfs_alloc_ack>
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 800e9bc:	f107 0314 	add.w	r3, r7, #20
 800e9c0:	4619      	mov	r1, r3
 800e9c2:	68f8      	ldr	r0, [r7, #12]
 800e9c4:	f7ff ff3a 	bl	800e83c <lfs_dir_alloc>
 800e9c8:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800e9ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d001      	beq.n	800e9d4 <lfs_dir_split+0x2c>
        return err;
 800e9d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9d2:	e03c      	b.n	800ea4e <lfs_dir_split+0xa6>
    }

    tail.split = dir->split;
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	7ddb      	ldrb	r3, [r3, #23]
 800e9d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    tail.tail[0] = dir->tail[0];
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	699b      	ldr	r3, [r3, #24]
 800e9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    tail.tail[1] = dir->tail[1];
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	69db      	ldr	r3, [r3, #28]
 800e9e6:	633b      	str	r3, [r7, #48]	; 0x30

    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 800e9e8:	f107 0114 	add.w	r1, r7, #20
 800e9ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800e9f0:	9302      	str	r3, [sp, #8]
 800e9f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e9f6:	9301      	str	r3, [sp, #4]
 800e9f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9fa:	9300      	str	r3, [sp, #0]
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	687a      	ldr	r2, [r7, #4]
 800ea00:	68f8      	ldr	r0, [r7, #12]
 800ea02:	f000 f853 	bl	800eaac <lfs_dir_compact>
 800ea06:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800ea08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d001      	beq.n	800ea12 <lfs_dir_split+0x6a>
        return err;
 800ea0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea10:	e01d      	b.n	800ea4e <lfs_dir_split+0xa6>
    }

    dir->tail[0] = tail.pair[0];
 800ea12:	697a      	ldr	r2, [r7, #20]
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 800ea18:	69ba      	ldr	r2, [r7, #24]
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	61da      	str	r2, [r3, #28]
    dir->split = true;
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	2201      	movs	r2, #1
 800ea22:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800ea24:	68ba      	ldr	r2, [r7, #8]
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	3320      	adds	r3, #32
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	4610      	mov	r0, r2
 800ea2e:	f7fe f823 	bl	800ca78 <lfs_pair_cmp>
 800ea32:	4603      	mov	r3, r0
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d109      	bne.n	800ea4c <lfs_dir_split+0xa4>
 800ea38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d105      	bne.n	800ea4c <lfs_dir_split+0xa4>
        lfs->root[0] = tail.pair[0];
 800ea40:	697a      	ldr	r2, [r7, #20]
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800ea46:	69ba      	ldr	r2, [r7, #24]
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 800ea4c:	2300      	movs	r3, #0
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3738      	adds	r7, #56	; 0x38
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}

0800ea56 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800ea56:	b580      	push	{r7, lr}
 800ea58:	b086      	sub	sp, #24
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	60f8      	str	r0, [r7, #12]
 800ea5e:	60b9      	str	r1, [r7, #8]
 800ea60:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800ea66:	68b8      	ldr	r0, [r7, #8]
 800ea68:	f7fe f909 	bl	800cc7e <lfs_tag_dsize>
 800ea6c:	4602      	mov	r2, r0
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	441a      	add	r2, r3
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	601a      	str	r2, [r3, #0]
    return 0;
 800ea78:	2300      	movs	r3, #0
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3718      	adds	r7, #24
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}

0800ea82 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800ea82:	b580      	push	{r7, lr}
 800ea84:	b086      	sub	sp, #24
 800ea86:	af00      	add	r7, sp, #0
 800ea88:	60f8      	str	r0, [r7, #12]
 800ea8a:	60b9      	str	r1, [r7, #8]
 800ea8c:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800ea92:	697b      	ldr	r3, [r7, #20]
 800ea94:	6818      	ldr	r0, [r3, #0]
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	6859      	ldr	r1, [r3, #4]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	68ba      	ldr	r2, [r7, #8]
 800ea9e:	f7ff fd11 	bl	800e4c4 <lfs_dir_commitattr>
 800eaa2:	4603      	mov	r3, r0
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3718      	adds	r7, #24
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800eaac:	b590      	push	{r4, r7, lr}
 800eaae:	b0ad      	sub	sp, #180	; 0xb4
 800eab0:	af0a      	add	r7, sp, #40	; 0x28
 800eab2:	60f8      	str	r0, [r7, #12]
 800eab4:	60b9      	str	r1, [r7, #8]
 800eab6:	607a      	str	r2, [r7, #4]
 800eab8:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	663b      	str	r3, [r7, #96]	; 0x60
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	685b      	ldr	r3, [r3, #4]
 800eac4:	667b      	str	r3, [r7, #100]	; 0x64
    bool relocated = false;
 800eac6:	2300      	movs	r3, #0
 800eac8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    bool tired = false;
 800eacc:	2300      	movs	r3, #0
 800eace:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    // should we split?
    while (end - begin > 1) {
 800ead2:	e08f      	b.n	800ebf4 <lfs_dir_compact+0x148>
        // find size
        lfs_size_t size = 0;
 800ead4:	2300      	movs	r3, #0
 800ead6:	65fb      	str	r3, [r7, #92]	; 0x5c
        int err = lfs_dir_traverse(lfs,
 800ead8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800eadc:	425b      	negs	r3, r3
 800eade:	b29b      	uxth	r3, r3
 800eae0:	b21b      	sxth	r3, r3
 800eae2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800eae6:	9208      	str	r2, [sp, #32]
 800eae8:	4aa4      	ldr	r2, [pc, #656]	; (800ed7c <lfs_dir_compact+0x2d0>)
 800eaea:	9207      	str	r2, [sp, #28]
 800eaec:	9306      	str	r3, [sp, #24]
 800eaee:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800eaf2:	9305      	str	r3, [sp, #20]
 800eaf4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800eaf8:	9304      	str	r3, [sp, #16]
 800eafa:	2300      	movs	r3, #0
 800eafc:	9303      	str	r3, [sp, #12]
 800eafe:	4ba0      	ldr	r3, [pc, #640]	; (800ed80 <lfs_dir_compact+0x2d4>)
 800eb00:	9302      	str	r3, [sp, #8]
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	9301      	str	r3, [sp, #4]
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	9300      	str	r3, [sp, #0]
 800eb0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb0e:	2200      	movs	r2, #0
 800eb10:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800eb14:	68f8      	ldr	r0, [r7, #12]
 800eb16:	f7fe fdcf 	bl	800d6b8 <lfs_dir_traverse>
 800eb1a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                source, 0, 0xffffffff, attrs, attrcount,
                LFS_MKTAG(0x400, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                begin, end, -begin,
                lfs_dir_commit_size, &size);
        if (err) {
 800eb1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d002      	beq.n	800eb2c <lfs_dir_compact+0x80>
            return err;
 800eb26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800eb2a:	e2cc      	b.n	800f0c6 <lfs_dir_compact+0x61a>
        }

        // space is complicated, we need room for tail, crc, gstate,
        // cleanup delete, and we cap at half a block to give room
        // for metadata updates.
        if (end - begin < 0xff &&
 800eb2c:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800eb30:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800eb34:	1ad3      	subs	r3, r2, r3
 800eb36:	2bfe      	cmp	r3, #254	; 0xfe
 800eb38:	dc22      	bgt.n	800eb80 <lfs_dir_compact+0xd4>
                size <= lfs_min(lfs->cfg->block_size - 36,
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb3e:	69db      	ldr	r3, [r3, #28]
 800eb40:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                    lfs_alignup((lfs->cfg->metadata_max ?
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                size <= lfs_min(lfs->cfg->block_size - 36,
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d004      	beq.n	800eb58 <lfs_dir_compact+0xac>
                            lfs->cfg->metadata_max : lfs->cfg->block_size)/2,
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                size <= lfs_min(lfs->cfg->block_size - 36,
 800eb54:	085b      	lsrs	r3, r3, #1
 800eb56:	e003      	b.n	800eb60 <lfs_dir_compact+0xb4>
                            lfs->cfg->metadata_max : lfs->cfg->block_size)/2,
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb5c:	69db      	ldr	r3, [r3, #28]
                size <= lfs_min(lfs->cfg->block_size - 36,
 800eb5e:	085b      	lsrs	r3, r3, #1
                        lfs->cfg->prog_size))) {
 800eb60:	68fa      	ldr	r2, [r7, #12]
 800eb62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800eb64:	6992      	ldr	r2, [r2, #24]
                size <= lfs_min(lfs->cfg->block_size - 36,
 800eb66:	4611      	mov	r1, r2
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f7fd fb7c 	bl	800c266 <lfs_alignup>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	4619      	mov	r1, r3
 800eb72:	4620      	mov	r0, r4
 800eb74:	f7fd fb52 	bl	800c21c <lfs_min>
 800eb78:	4602      	mov	r2, r0
 800eb7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
        if (end - begin < 0xff &&
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d242      	bcs.n	800ec06 <lfs_dir_compact+0x15a>
        }

        // can't fit, need to split, we should really be finding the
        // largest size that fits with a small binary search, but right now
        // it's not worth the code size
        uint16_t split = (end - begin) / 2;
 800eb80:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800eb84:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800eb88:	1ad3      	subs	r3, r2, r3
 800eb8a:	0fda      	lsrs	r2, r3, #31
 800eb8c:	4413      	add	r3, r2
 800eb8e:	105b      	asrs	r3, r3, #1
 800eb90:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800eb94:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800eb98:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800eb9c:	4413      	add	r3, r2
 800eb9e:	b29b      	uxth	r3, r3
 800eba0:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800eba4:	9202      	str	r2, [sp, #8]
 800eba6:	9301      	str	r3, [sp, #4]
 800eba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ebac:	9300      	str	r3, [sp, #0]
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	687a      	ldr	r2, [r7, #4]
 800ebb2:	68b9      	ldr	r1, [r7, #8]
 800ebb4:	68f8      	ldr	r0, [r7, #12]
 800ebb6:	f7ff fef7 	bl	800e9a8 <lfs_dir_split>
 800ebba:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                source, begin+split, end);
        if (err) {
 800ebbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d00f      	beq.n	800ebe6 <lfs_dir_compact+0x13a>
            // if we fail to split, we may be able to overcompact, unless
            // we're too big for even the full block, in which case our
            // only option is to error
            if (err == LFS_ERR_NOSPC && size <= lfs->cfg->block_size - 36) {
 800ebc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ebca:	f113 0f1c 	cmn.w	r3, #28
 800ebce:	d107      	bne.n	800ebe0 <lfs_dir_compact+0x134>
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ebd4:	69db      	ldr	r3, [r3, #28]
 800ebd6:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800ebda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	d214      	bcs.n	800ec0a <lfs_dir_compact+0x15e>
                break;
            }
            return err;
 800ebe0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ebe4:	e26f      	b.n	800f0c6 <lfs_dir_compact+0x61a>
        }

        end = begin + split;
 800ebe6:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800ebea:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800ebee:	4413      	add	r3, r2
 800ebf0:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
    while (end - begin > 1) {
 800ebf4:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800ebf8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800ebfc:	1ad3      	subs	r3, r2, r3
 800ebfe:	2b01      	cmp	r3, #1
 800ec00:	f73f af68 	bgt.w	800ead4 <lfs_dir_compact+0x28>
 800ec04:	e002      	b.n	800ec0c <lfs_dir_compact+0x160>
            break;
 800ec06:	bf00      	nop
 800ec08:	e000      	b.n	800ec0c <lfs_dir_compact+0x160>
                break;
 800ec0a:	bf00      	nop
    }

    // increment revision count
    dir->rev += 1;
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	689b      	ldr	r3, [r3, #8]
 800ec10:	1c5a      	adds	r2, r3, #1
 800ec12:	68bb      	ldr	r3, [r7, #8]
 800ec14:	609a      	str	r2, [r3, #8]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    if (lfs->cfg->block_cycles > 0 &&
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	dd5b      	ble.n	800ecd8 <lfs_dir_compact+0x22c>
            (dir->rev % ((lfs->cfg->block_cycles+1)|1) == 0)) {
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	689b      	ldr	r3, [r3, #8]
 800ec24:	68fa      	ldr	r2, [r7, #12]
 800ec26:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800ec28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ec2a:	3201      	adds	r2, #1
 800ec2c:	f042 0201 	orr.w	r2, r2, #1
 800ec30:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec34:	fb01 f202 	mul.w	r2, r1, r2
 800ec38:	1a9b      	subs	r3, r3, r2
    if (lfs->cfg->block_cycles > 0 &&
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d14c      	bne.n	800ecd8 <lfs_dir_compact+0x22c>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	2200      	movs	r2, #0
 800ec42:	657a      	str	r2, [r7, #84]	; 0x54
 800ec44:	2201      	movs	r2, #1
 800ec46:	65ba      	str	r2, [r7, #88]	; 0x58
 800ec48:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800ec4c:	4611      	mov	r1, r2
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7fd ff12 	bl	800ca78 <lfs_pair_cmp>
 800ec54:	4603      	mov	r3, r0
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d13a      	bne.n	800ecd0 <lfs_dir_compact+0x224>
            // oh no! we're writing too much to the superblock,
            // should we expand?
            lfs_ssize_t res = lfs_fs_rawsize(lfs);
 800ec5a:	68f8      	ldr	r0, [r7, #12]
 800ec5c:	f003 fb50 	bl	8012300 <lfs_fs_rawsize>
 800ec60:	67b8      	str	r0, [r7, #120]	; 0x78
            if (res < 0) {
 800ec62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	da01      	bge.n	800ec6c <lfs_dir_compact+0x1c0>
                return res;
 800ec68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ec6a:	e22c      	b.n	800f0c6 <lfs_dir_compact+0x61a>
            }

            // do we have extra space? littlefs can't reclaim this space
            // by itself, so expand cautiously
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec70:	6a1b      	ldr	r3, [r3, #32]
 800ec72:	085a      	lsrs	r2, r3, #1
 800ec74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d92e      	bls.n	800ecd8 <lfs_dir_compact+0x22c>
                LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	689b      	ldr	r3, [r3, #8]
 800ec7e:	4a41      	ldr	r2, [pc, #260]	; (800ed84 <lfs_dir_compact+0x2d8>)
 800ec80:	9200      	str	r2, [sp, #0]
 800ec82:	f240 626c 	movw	r2, #1644	; 0x66c
 800ec86:	4940      	ldr	r1, [pc, #256]	; (800ed88 <lfs_dir_compact+0x2dc>)
 800ec88:	4840      	ldr	r0, [pc, #256]	; (800ed8c <lfs_dir_compact+0x2e0>)
 800ec8a:	f015 f9a5 	bl	8023fd8 <iprintf>
                int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800ec8e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800ec92:	9302      	str	r3, [sp, #8]
 800ec94:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800ec98:	9301      	str	r3, [sp, #4]
 800ec9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ec9e:	9300      	str	r3, [sp, #0]
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	68b9      	ldr	r1, [r7, #8]
 800eca6:	68f8      	ldr	r0, [r7, #12]
 800eca8:	f7ff fe7e 	bl	800e9a8 <lfs_dir_split>
 800ecac:	6778      	str	r0, [r7, #116]	; 0x74
                        source, begin, end);
                if (err && err != LFS_ERR_NOSPC) {
 800ecae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d005      	beq.n	800ecc0 <lfs_dir_compact+0x214>
 800ecb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ecb6:	f113 0f1c 	cmn.w	r3, #28
 800ecba:	d001      	beq.n	800ecc0 <lfs_dir_compact+0x214>
                    return err;
 800ecbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ecbe:	e202      	b.n	800f0c6 <lfs_dir_compact+0x61a>
                }

                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                if (!err) {
 800ecc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d108      	bne.n	800ecd8 <lfs_dir_compact+0x22c>
                    end = begin;
 800ecc6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800ecca:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 800ecce:	e003      	b.n	800ecd8 <lfs_dir_compact+0x22c>
            // this, relocations increase the overall complexity of
            // lfs_migration, which is already a delicate operation.
#endif
        } else {
            // we're writing too much, time to relocate
            tired = true;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800ecd6:	e16b      	b.n	800efb0 <lfs_dir_compact+0x504>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 800ecdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ecde:	2300      	movs	r3, #0
 800ece0:	643b      	str	r3, [r7, #64]	; 0x40
 800ece2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ece6:	647b      	str	r3, [r7, #68]	; 0x44
 800ece8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ecec:	64bb      	str	r3, [r7, #72]	; 0x48
 800ecee:	2300      	movs	r3, #0
 800ecf0:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ecf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d004      	beq.n	800ed06 <lfs_dir_compact+0x25a>
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ed00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed02:	3b08      	subs	r3, #8
 800ed04:	e003      	b.n	800ed0e <lfs_dir_compact+0x262>
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ed0a:	69db      	ldr	r3, [r3, #28]
 800ed0c:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800ed0e:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	685b      	ldr	r3, [r3, #4]
 800ed14:	4619      	mov	r1, r3
 800ed16:	68f8      	ldr	r0, [r7, #12]
 800ed18:	f7fd fe4e 	bl	800c9b8 <lfs_bd_erase>
 800ed1c:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 800ed1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d006      	beq.n	800ed32 <lfs_dir_compact+0x286>
                if (err == LFS_ERR_CORRUPT) {
 800ed24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ed26:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ed2a:	f000 8136 	beq.w	800ef9a <lfs_dir_compact+0x4ee>
                    goto relocate;
                }
                return err;
 800ed2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ed30:	e1c9      	b.n	800f0c6 <lfs_dir_compact+0x61a>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	689b      	ldr	r3, [r3, #8]
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7fd faeb 	bl	800c312 <lfs_tole32>
 800ed3c:	4602      	mov	r2, r0
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800ed48:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800ed4c:	2304      	movs	r3, #4
 800ed4e:	68f8      	ldr	r0, [r7, #12]
 800ed50:	f7ff fb82 	bl	800e458 <lfs_dir_commitprog>
 800ed54:	6738      	str	r0, [r7, #112]	; 0x70
            dir->rev = lfs_fromle32(dir->rev);
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	689b      	ldr	r3, [r3, #8]
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7fd face 	bl	800c2fc <lfs_fromle32>
 800ed60:	4602      	mov	r2, r0
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	609a      	str	r2, [r3, #8]
            if (err) {
 800ed66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d011      	beq.n	800ed90 <lfs_dir_compact+0x2e4>
                if (err == LFS_ERR_CORRUPT) {
 800ed6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ed6e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ed72:	f000 8114 	beq.w	800ef9e <lfs_dir_compact+0x4f2>
                    goto relocate;
                }
                return err;
 800ed76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ed78:	e1a5      	b.n	800f0c6 <lfs_dir_compact+0x61a>
 800ed7a:	bf00      	nop
 800ed7c:	0800ea57 	.word	0x0800ea57
 800ed80:	400ffc00 	.word	0x400ffc00
 800ed84:	08026f24 	.word	0x08026f24
 800ed88:	08026e18 	.word	0x08026e18
 800ed8c:	08026f74 	.word	0x08026f74
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 800ed90:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800ed94:	425b      	negs	r3, r3
 800ed96:	b29b      	uxth	r3, r3
 800ed98:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800ed9a:	68fa      	ldr	r2, [r7, #12]
 800ed9c:	637a      	str	r2, [r7, #52]	; 0x34
 800ed9e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800eda2:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 800eda4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800eda8:	9208      	str	r2, [sp, #32]
 800edaa:	4aaa      	ldr	r2, [pc, #680]	; (800f054 <lfs_dir_compact+0x5a8>)
 800edac:	9207      	str	r2, [sp, #28]
 800edae:	9306      	str	r3, [sp, #24]
 800edb0:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800edb4:	9305      	str	r3, [sp, #20]
 800edb6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800edba:	9304      	str	r3, [sp, #16]
 800edbc:	2300      	movs	r3, #0
 800edbe:	9303      	str	r3, [sp, #12]
 800edc0:	4ba5      	ldr	r3, [pc, #660]	; (800f058 <lfs_dir_compact+0x5ac>)
 800edc2:	9302      	str	r3, [sp, #8]
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	9301      	str	r3, [sp, #4]
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	9300      	str	r3, [sp, #0]
 800edcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800edd0:	2200      	movs	r2, #0
 800edd2:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800edd6:	68f8      	ldr	r0, [r7, #12]
 800edd8:	f7fe fc6e 	bl	800d6b8 <lfs_dir_traverse>
 800eddc:	6738      	str	r0, [r7, #112]	; 0x70
                        lfs, &commit});
            if (err) {
 800edde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d006      	beq.n	800edf2 <lfs_dir_compact+0x346>
                if (err == LFS_ERR_CORRUPT) {
 800ede4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ede6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800edea:	f000 80da 	beq.w	800efa2 <lfs_dir_compact+0x4f6>
                    goto relocate;
                }
                return err;
 800edee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800edf0:	e169      	b.n	800f0c6 <lfs_dir_compact+0x61a>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	3318      	adds	r3, #24
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7fd fe23 	bl	800ca42 <lfs_pair_isnull>
 800edfc:	4603      	mov	r3, r0
 800edfe:	f083 0301 	eor.w	r3, r3, #1
 800ee02:	b2db      	uxtb	r3, r3
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d022      	beq.n	800ee4e <lfs_dir_compact+0x3a2>
                lfs_pair_tole32(dir->tail);
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	3318      	adds	r3, #24
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f7fd fea4 	bl	800cb5a <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	7ddb      	ldrb	r3, [r3, #23]
 800ee16:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800ee1a:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800ee1c:	4a8f      	ldr	r2, [pc, #572]	; (800f05c <lfs_dir_compact+0x5b0>)
 800ee1e:	431a      	orrs	r2, r3
                        dir->tail);
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 800ee24:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800ee28:	68f8      	ldr	r0, [r7, #12]
 800ee2a:	f7ff fb4b 	bl	800e4c4 <lfs_dir_commitattr>
 800ee2e:	6738      	str	r0, [r7, #112]	; 0x70
                lfs_pair_fromle32(dir->tail);
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	3318      	adds	r3, #24
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7fd fe76 	bl	800cb26 <lfs_pair_fromle32>
                if (err) {
 800ee3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d006      	beq.n	800ee4e <lfs_dir_compact+0x3a2>
                    if (err == LFS_ERR_CORRUPT) {
 800ee40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee42:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ee46:	f000 80ae 	beq.w	800efa6 <lfs_dir_compact+0x4fa>
                        goto relocate;
                    }
                    return err;
 800ee4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee4c:	e13b      	b.n	800f0c6 <lfs_dir_compact+0x61a>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 800ee4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee52:	2200      	movs	r2, #0
 800ee54:	601a      	str	r2, [r3, #0]
 800ee56:	605a      	str	r2, [r3, #4]
 800ee58:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800ee5a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ee5e:	f083 0301 	eor.w	r3, r3, #1
 800ee62:	b2db      	uxtb	r3, r3
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d011      	beq.n	800ee8c <lfs_dir_compact+0x3e0>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800ee6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee72:	4611      	mov	r1, r2
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7fd ff16 	bl	800cca6 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ee80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee84:	4611      	mov	r1, r2
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7fd ff0d 	bl	800cca6 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800ee92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee96:	4611      	mov	r1, r2
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7fd ff04 	bl	800cca6 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800ee9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800eea4:	f023 0303 	bic.w	r3, r3, #3
 800eea8:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 800eeaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eeae:	461a      	mov	r2, r3
 800eeb0:	68b9      	ldr	r1, [r7, #8]
 800eeb2:	68f8      	ldr	r0, [r7, #12]
 800eeb4:	f7ff f8e0 	bl	800e078 <lfs_dir_getgstate>
 800eeb8:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 800eeba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d001      	beq.n	800eec4 <lfs_dir_compact+0x418>
                return err;
 800eec0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eec2:	e100      	b.n	800f0c6 <lfs_dir_compact+0x61a>
            }

            if (!lfs_gstate_iszero(&delta)) {
 800eec4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7fd ff11 	bl	800ccf0 <lfs_gstate_iszero>
 800eece:	4603      	mov	r3, r0
 800eed0:	f083 0301 	eor.w	r3, r3, #1
 800eed4:	b2db      	uxtb	r3, r3
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d016      	beq.n	800ef08 <lfs_dir_compact+0x45c>
                lfs_gstate_tole32(&delta);
 800eeda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eede:	4618      	mov	r0, r3
 800eee0:	f7fd ff98 	bl	800ce14 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 800eee4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eee8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800eeec:	4a5c      	ldr	r2, [pc, #368]	; (800f060 <lfs_dir_compact+0x5b4>)
 800eeee:	68f8      	ldr	r0, [r7, #12]
 800eef0:	f7ff fae8 	bl	800e4c4 <lfs_dir_commitattr>
 800eef4:	6738      	str	r0, [r7, #112]	; 0x70
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 800eef6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d005      	beq.n	800ef08 <lfs_dir_compact+0x45c>
                    if (err == LFS_ERR_CORRUPT) {
 800eefc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eefe:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ef02:	d052      	beq.n	800efaa <lfs_dir_compact+0x4fe>
                        goto relocate;
                    }
                    return err;
 800ef04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ef06:	e0de      	b.n	800f0c6 <lfs_dir_compact+0x61a>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 800ef08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	68f8      	ldr	r0, [r7, #12]
 800ef10:	f7ff fb58 	bl	800e5c4 <lfs_dir_commitcrc>
 800ef14:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 800ef16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d005      	beq.n	800ef28 <lfs_dir_compact+0x47c>
                if (err == LFS_ERR_CORRUPT) {
 800ef1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ef1e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ef22:	d044      	beq.n	800efae <lfs_dir_compact+0x502>
                    goto relocate;
                }
                return err;
 800ef24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ef26:	e0ce      	b.n	800f0c6 <lfs_dir_compact+0x61a>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800ef28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef2a:	68fa      	ldr	r2, [r7, #12]
 800ef2c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800ef2e:	6992      	ldr	r2, [r2, #24]
 800ef30:	fbb3 f1f2 	udiv	r1, r3, r2
 800ef34:	fb01 f202 	mul.w	r2, r1, r2
 800ef38:	1a9b      	subs	r3, r3, r2
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d006      	beq.n	800ef4c <lfs_dir_compact+0x4a0>
 800ef3e:	4b49      	ldr	r3, [pc, #292]	; (800f064 <lfs_dir_compact+0x5b8>)
 800ef40:	4a49      	ldr	r2, [pc, #292]	; (800f068 <lfs_dir_compact+0x5bc>)
 800ef42:	f44f 61de 	mov.w	r1, #1776	; 0x6f0
 800ef46:	4849      	ldr	r0, [pc, #292]	; (800f06c <lfs_dir_compact+0x5c0>)
 800ef48:	f014 f9f4 	bl	8023334 <__assert_func>
            lfs_pair_swap(dir->pair);
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7fd fd62 	bl	800ca18 <lfs_pair_swap>
            dir->count = end - begin;
 800ef54:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800ef58:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800ef5c:	1ad3      	subs	r3, r2, r3
 800ef5e:	b29a      	uxth	r2, r3
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 800ef64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 800ef6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	3348      	adds	r3, #72	; 0x48
 800ef74:	2200      	movs	r2, #0
 800ef76:	601a      	str	r2, [r3, #0]
 800ef78:	605a      	str	r2, [r3, #4]
 800ef7a:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800ef7c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ef80:	f083 0301 	eor.w	r3, r3, #1
 800ef84:	b2db      	uxtb	r3, r3
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d078      	beq.n	800f07c <lfs_dir_compact+0x5d0>
                lfs->gdisk = lfs->gstate;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	68fa      	ldr	r2, [r7, #12]
 800ef8e:	333c      	adds	r3, #60	; 0x3c
 800ef90:	3230      	adds	r2, #48	; 0x30
 800ef92:	ca07      	ldmia	r2, {r0, r1, r2}
 800ef94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 800ef98:	e070      	b.n	800f07c <lfs_dir_compact+0x5d0>
                    goto relocate;
 800ef9a:	bf00      	nop
 800ef9c:	e008      	b.n	800efb0 <lfs_dir_compact+0x504>
                    goto relocate;
 800ef9e:	bf00      	nop
 800efa0:	e006      	b.n	800efb0 <lfs_dir_compact+0x504>
                    goto relocate;
 800efa2:	bf00      	nop
 800efa4:	e004      	b.n	800efb0 <lfs_dir_compact+0x504>
                        goto relocate;
 800efa6:	bf00      	nop
 800efa8:	e002      	b.n	800efb0 <lfs_dir_compact+0x504>
                        goto relocate;
 800efaa:	bf00      	nop
 800efac:	e000      	b.n	800efb0 <lfs_dir_compact+0x504>
                    goto relocate;
 800efae:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 800efb0:	2301      	movs	r3, #1
 800efb2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        lfs_cache_drop(lfs, &lfs->pcache);
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	3310      	adds	r3, #16
 800efba:	4619      	mov	r1, r3
 800efbc:	68f8      	ldr	r0, [r7, #12]
 800efbe:	f7fd f9e3 	bl	800c388 <lfs_cache_drop>
        if (!tired) {
 800efc2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800efc6:	f083 0301 	eor.w	r3, r3, #1
 800efca:	b2db      	uxtb	r3, r3
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d009      	beq.n	800efe4 <lfs_dir_compact+0x538>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	4a26      	ldr	r2, [pc, #152]	; (800f070 <lfs_dir_compact+0x5c4>)
 800efd6:	9200      	str	r2, [sp, #0]
 800efd8:	f240 7202 	movw	r2, #1794	; 0x702
 800efdc:	4923      	ldr	r1, [pc, #140]	; (800f06c <lfs_dir_compact+0x5c0>)
 800efde:	4825      	ldr	r0, [pc, #148]	; (800f074 <lfs_dir_compact+0x5c8>)
 800efe0:	f014 fffa 	bl	8023fd8 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800efe4:	68bb      	ldr	r3, [r7, #8]
 800efe6:	2200      	movs	r2, #0
 800efe8:	617a      	str	r2, [r7, #20]
 800efea:	2201      	movs	r2, #1
 800efec:	61ba      	str	r2, [r7, #24]
 800efee:	f107 0214 	add.w	r2, r7, #20
 800eff2:	4611      	mov	r1, r2
 800eff4:	4618      	mov	r0, r3
 800eff6:	f7fd fd3f 	bl	800ca78 <lfs_pair_cmp>
 800effa:	4603      	mov	r3, r0
 800effc:	2b00      	cmp	r3, #0
 800effe:	d10c      	bne.n	800f01a <lfs_dir_compact+0x56e>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	4a1a      	ldr	r2, [pc, #104]	; (800f070 <lfs_dir_compact+0x5c4>)
 800f006:	9200      	str	r2, [sp, #0]
 800f008:	f240 7207 	movw	r2, #1799	; 0x707
 800f00c:	4917      	ldr	r1, [pc, #92]	; (800f06c <lfs_dir_compact+0x5c0>)
 800f00e:	481a      	ldr	r0, [pc, #104]	; (800f078 <lfs_dir_compact+0x5cc>)
 800f010:	f014 ffe2 	bl	8023fd8 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 800f014:	f06f 031b 	mvn.w	r3, #27
 800f018:	e055      	b.n	800f0c6 <lfs_dir_compact+0x61a>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	3304      	adds	r3, #4
 800f01e:	4619      	mov	r1, r3
 800f020:	68f8      	ldr	r0, [r7, #12]
 800f022:	f7fe f85f 	bl	800d0e4 <lfs_alloc>
 800f026:	66b8      	str	r0, [r7, #104]	; 0x68
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800f028:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d00c      	beq.n	800f048 <lfs_dir_compact+0x59c>
 800f02e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f030:	f113 0f1c 	cmn.w	r3, #28
 800f034:	d106      	bne.n	800f044 <lfs_dir_compact+0x598>
 800f036:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800f03a:	f083 0301 	eor.w	r3, r3, #1
 800f03e:	b2db      	uxtb	r3, r3
 800f040:	2b00      	cmp	r3, #0
 800f042:	d001      	beq.n	800f048 <lfs_dir_compact+0x59c>
            return err;
 800f044:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f046:	e03e      	b.n	800f0c6 <lfs_dir_compact+0x61a>
        }

        tired = false;
 800f048:	2300      	movs	r3, #0
 800f04a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
        continue;
 800f04e:	bf00      	nop
    while (true) {
 800f050:	e642      	b.n	800ecd8 <lfs_dir_compact+0x22c>
 800f052:	bf00      	nop
 800f054:	0800ea83 	.word	0x0800ea83
 800f058:	400ffc00 	.word	0x400ffc00
 800f05c:	000ffc08 	.word	0x000ffc08
 800f060:	7ffffc0c 	.word	0x7ffffc0c
 800f064:	08026fa4 	.word	0x08026fa4
 800f068:	0802ad38 	.word	0x0802ad38
 800f06c:	08026e18 	.word	0x08026e18
 800f070:	08026f24 	.word	0x08026f24
 800f074:	08026fcc 	.word	0x08026fcc
 800f078:	08026ff0 	.word	0x08026ff0
        break;
 800f07c:	bf00      	nop
    }

    if (relocated) {
 800f07e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f082:	2b00      	cmp	r3, #0
 800f084:	d01e      	beq.n	800f0c4 <lfs_dir_compact+0x618>
        // update references if we relocated
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 800f086:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f08a:	68ba      	ldr	r2, [r7, #8]
 800f08c:	6812      	ldr	r2, [r2, #0]
 800f08e:	68b9      	ldr	r1, [r7, #8]
 800f090:	6849      	ldr	r1, [r1, #4]
 800f092:	4c0f      	ldr	r4, [pc, #60]	; (800f0d0 <lfs_dir_compact+0x624>)
 800f094:	9403      	str	r4, [sp, #12]
 800f096:	9102      	str	r1, [sp, #8]
 800f098:	9201      	str	r2, [sp, #4]
 800f09a:	9300      	str	r3, [sp, #0]
 800f09c:	4603      	mov	r3, r0
 800f09e:	f44f 62e3 	mov.w	r2, #1816	; 0x718
 800f0a2:	490c      	ldr	r1, [pc, #48]	; (800f0d4 <lfs_dir_compact+0x628>)
 800f0a4:	480c      	ldr	r0, [pc, #48]	; (800f0d8 <lfs_dir_compact+0x62c>)
 800f0a6:	f014 ff97 	bl	8023fd8 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                oldpair[0], oldpair[1], dir->pair[0], dir->pair[1]);
        int err = lfs_fs_relocate(lfs, oldpair, dir->pair);
 800f0aa:	68ba      	ldr	r2, [r7, #8]
 800f0ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	68f8      	ldr	r0, [r7, #12]
 800f0b4:	f002 fdac 	bl	8011c10 <lfs_fs_relocate>
 800f0b8:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err) {
 800f0ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d001      	beq.n	800f0c4 <lfs_dir_compact+0x618>
            return err;
 800f0c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0c2:	e000      	b.n	800f0c6 <lfs_dir_compact+0x61a>
        }
    }

    return 0;
 800f0c4:	2300      	movs	r3, #0
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	378c      	adds	r7, #140	; 0x8c
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd90      	pop	{r4, r7, pc}
 800f0ce:	bf00      	nop
 800f0d0:	08026f24 	.word	0x08026f24
 800f0d4:	08026e18 	.word	0x08026e18
 800f0d8:	08027028 	.word	0x08027028

0800f0dc <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800f0dc:	b5b0      	push	{r4, r5, r7, lr}
 800f0de:	b0b8      	sub	sp, #224	; 0xe0
 800f0e0:	af0a      	add	r7, sp, #40	; 0x28
 800f0e2:	60f8      	str	r0, [r7, #12]
 800f0e4:	60b9      	str	r1, [r7, #8]
 800f0e6:	607a      	str	r2, [r7, #4]
 800f0e8:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f0f2:	e045      	b.n	800f180 <lfs_dir_commit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800f0f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f0f8:	3308      	adds	r3, #8
 800f0fa:	68ba      	ldr	r2, [r7, #8]
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d03a      	beq.n	800f176 <lfs_dir_commit+0x9a>
 800f100:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f104:	3308      	adds	r3, #8
 800f106:	68ba      	ldr	r2, [r7, #8]
 800f108:	4611      	mov	r1, r2
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7fd fcb4 	bl	800ca78 <lfs_pair_cmp>
 800f110:	4603      	mov	r3, r0
 800f112:	2b00      	cmp	r3, #0
 800f114:	d12f      	bne.n	800f176 <lfs_dir_commit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800f116:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f11a:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800f11c:	2b01      	cmp	r3, #1
 800f11e:	d12a      	bne.n	800f176 <lfs_dir_commit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800f120:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d023      	beq.n	800f176 <lfs_dir_commit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 800f12e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d91b      	bls.n	800f176 <lfs_dir_commit+0x9a>
            int err = lfs_file_outline(lfs, f);
 800f13e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800f142:	68f8      	ldr	r0, [r7, #12]
 800f144:	f001 faca 	bl	80106dc <lfs_file_outline>
 800f148:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (err) {
 800f14c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f150:	2b00      	cmp	r3, #0
 800f152:	d002      	beq.n	800f15a <lfs_dir_commit+0x7e>
                return err;
 800f154:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f158:	e36e      	b.n	800f838 <lfs_dir_commit+0x75c>
            }

            err = lfs_file_flush(lfs, f);
 800f15a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800f15e:	68f8      	ldr	r0, [r7, #12]
 800f160:	f001 fade 	bl	8010720 <lfs_file_flush>
 800f164:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (err) {
 800f168:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d002      	beq.n	800f176 <lfs_dir_commit+0x9a>
                return err;
 800f170:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f174:	e360      	b.n	800f838 <lfs_dir_commit+0x75c>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800f176:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f180:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f184:	2b00      	cmp	r3, #0
 800f186:	d1b5      	bne.n	800f0f4 <lfs_dir_commit+0x18>
            }
        }
    }

    // calculate changes to the directory
    lfs_mdir_t olddir = *dir;
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800f18e:	461d      	mov	r5, r3
 800f190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f194:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f198:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bool hasdelete = false;
 800f19c:	2300      	movs	r3, #0
 800f19e:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
    for (int i = 0; i < attrcount; i++) {
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f1a8:	e075      	b.n	800f296 <lfs_dir_commit+0x1ba>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800f1aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f1ae:	00db      	lsls	r3, r3, #3
 800f1b0:	687a      	ldr	r2, [r7, #4]
 800f1b2:	4413      	add	r3, r2
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f7fd fd1a 	bl	800cbf0 <lfs_tag_type3>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	461a      	mov	r2, r3
 800f1c0:	f240 4301 	movw	r3, #1025	; 0x401
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d106      	bne.n	800f1d6 <lfs_dir_commit+0xfa>
            dir->count += 1;
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	8a9b      	ldrh	r3, [r3, #20]
 800f1cc:	3301      	adds	r3, #1
 800f1ce:	b29a      	uxth	r2, r3
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	829a      	strh	r2, [r3, #20]
 800f1d4:	e05a      	b.n	800f28c <lfs_dir_commit+0x1b0>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 800f1d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f1da:	00db      	lsls	r3, r3, #3
 800f1dc:	687a      	ldr	r2, [r7, #4]
 800f1de:	4413      	add	r3, r2
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f7fd fd04 	bl	800cbf0 <lfs_tag_type3>
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	461a      	mov	r2, r3
 800f1ec:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d114      	bne.n	800f21e <lfs_dir_commit+0x142>
            LFS_ASSERT(dir->count > 0);
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	8a9b      	ldrh	r3, [r3, #20]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d106      	bne.n	800f20a <lfs_dir_commit+0x12e>
 800f1fc:	4bac      	ldr	r3, [pc, #688]	; (800f4b0 <lfs_dir_commit+0x3d4>)
 800f1fe:	4aad      	ldr	r2, [pc, #692]	; (800f4b4 <lfs_dir_commit+0x3d8>)
 800f200:	f240 7141 	movw	r1, #1857	; 0x741
 800f204:	48ac      	ldr	r0, [pc, #688]	; (800f4b8 <lfs_dir_commit+0x3dc>)
 800f206:	f014 f895 	bl	8023334 <__assert_func>
            dir->count -= 1;
 800f20a:	68bb      	ldr	r3, [r7, #8]
 800f20c:	8a9b      	ldrh	r3, [r3, #20]
 800f20e:	3b01      	subs	r3, #1
 800f210:	b29a      	uxth	r2, r3
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 800f216:	2301      	movs	r3, #1
 800f218:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800f21c:	e036      	b.n	800f28c <lfs_dir_commit+0x1b0>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 800f21e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f222:	00db      	lsls	r3, r3, #3
 800f224:	687a      	ldr	r2, [r7, #4]
 800f226:	4413      	add	r3, r2
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	4618      	mov	r0, r3
 800f22c:	f7fd fcd0 	bl	800cbd0 <lfs_tag_type1>
 800f230:	4603      	mov	r3, r0
 800f232:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f236:	d129      	bne.n	800f28c <lfs_dir_commit+0x1b0>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 800f238:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f23c:	00db      	lsls	r3, r3, #3
 800f23e:	687a      	ldr	r2, [r7, #4]
 800f240:	4413      	add	r3, r2
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	681a      	ldr	r2, [r3, #0]
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 800f24a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f24e:	00db      	lsls	r3, r3, #3
 800f250:	687a      	ldr	r2, [r7, #4]
 800f252:	4413      	add	r3, r2
 800f254:	685b      	ldr	r3, [r3, #4]
 800f256:	685a      	ldr	r2, [r3, #4]
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 800f25c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f260:	00db      	lsls	r3, r3, #3
 800f262:	687a      	ldr	r2, [r7, #4]
 800f264:	4413      	add	r3, r2
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	4618      	mov	r0, r3
 800f26a:	f7fd fcd1 	bl	800cc10 <lfs_tag_chunk>
 800f26e:	4603      	mov	r3, r0
 800f270:	f003 0301 	and.w	r3, r3, #1
 800f274:	2b00      	cmp	r3, #0
 800f276:	bf14      	ite	ne
 800f278:	2301      	movne	r3, #1
 800f27a:	2300      	moveq	r3, #0
 800f27c:	b2da      	uxtb	r2, r3
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	3318      	adds	r3, #24
 800f286:	4618      	mov	r0, r3
 800f288:	f7fd fc4d 	bl	800cb26 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 800f28c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f290:	3301      	adds	r3, #1
 800f292:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f296:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	429a      	cmp	r2, r3
 800f29e:	db84      	blt.n	800f1aa <lfs_dir_commit+0xce>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 800f2a0:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d045      	beq.n	800f334 <lfs_dir_commit+0x258>
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	8a9b      	ldrh	r3, [r3, #20]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d141      	bne.n	800f334 <lfs_dir_commit+0x258>
        lfs_mdir_t pdir;
        int err = lfs_fs_pred(lfs, dir->pair, &pdir);
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	f107 0214 	add.w	r2, r7, #20
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	68f8      	ldr	r0, [r7, #12]
 800f2ba:	f002 fbc9 	bl	8011a50 <lfs_fs_pred>
 800f2be:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (err && err != LFS_ERR_NOENT) {
 800f2c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d011      	beq.n	800f2ee <lfs_dir_commit+0x212>
 800f2ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f2ce:	f113 0f02 	cmn.w	r3, #2
 800f2d2:	d00c      	beq.n	800f2ee <lfs_dir_commit+0x212>
            *dir = olddir;
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	461d      	mov	r5, r3
 800f2d8:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800f2dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f2de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f2e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f2e4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800f2e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f2ec:	e2a4      	b.n	800f838 <lfs_dir_commit+0x75c>
        }

        if (err != LFS_ERR_NOENT && pdir.split) {
 800f2ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f2f2:	f113 0f02 	cmn.w	r3, #2
 800f2f6:	d01d      	beq.n	800f334 <lfs_dir_commit+0x258>
 800f2f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d019      	beq.n	800f334 <lfs_dir_commit+0x258>
            err = lfs_dir_drop(lfs, &pdir, dir);
 800f300:	f107 0314 	add.w	r3, r7, #20
 800f304:	68ba      	ldr	r2, [r7, #8]
 800f306:	4619      	mov	r1, r3
 800f308:	68f8      	ldr	r0, [r7, #12]
 800f30a:	f7ff fb11 	bl	800e930 <lfs_dir_drop>
 800f30e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            if (err) {
 800f312:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f316:	2b00      	cmp	r3, #0
 800f318:	d00c      	beq.n	800f334 <lfs_dir_commit+0x258>
                *dir = olddir;
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	461d      	mov	r5, r3
 800f31e:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800f322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f324:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f326:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f32a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 800f32e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f332:	e281      	b.n	800f838 <lfs_dir_commit+0x75c>
            }
        }
    }

    if (dir->erased || dir->count >= 0xff) {
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	7d9b      	ldrb	r3, [r3, #22]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d104      	bne.n	800f346 <lfs_dir_commit+0x26a>
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	8a9b      	ldrh	r3, [r3, #20]
 800f340:	2bfe      	cmp	r3, #254	; 0xfe
 800f342:	f240 8130 	bls.w	800f5a6 <lfs_dir_commit+0x4ca>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 800f34a:	657b      	str	r3, [r7, #84]	; 0x54
            .off = dir->off,
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800f350:	65bb      	str	r3, [r7, #88]	; 0x58
            .ptag = dir->etag,
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 800f356:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f35c:	663b      	str	r3, [r7, #96]	; 0x60
            .crc = 0xffffffff,

            .begin = dir->off,
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800f362:	667b      	str	r3, [r7, #100]	; 0x64
            .end = (lfs->cfg->metadata_max ?
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d004      	beq.n	800f378 <lfs_dir_commit+0x29c>
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f374:	3b08      	subs	r3, #8
 800f376:	e003      	b.n	800f380 <lfs_dir_commit+0x2a4>
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f37c:	69db      	ldr	r3, [r3, #28]
 800f37e:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 800f380:	66bb      	str	r3, [r7, #104]	; 0x68
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	3318      	adds	r3, #24
 800f386:	4618      	mov	r0, r3
 800f388:	f7fd fbe7 	bl	800cb5a <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	68da      	ldr	r2, [r3, #12]
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f398:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f39c:	653b      	str	r3, [r7, #80]	; 0x50
        int err = lfs_dir_traverse(lfs,
 800f39e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800f3a2:	9308      	str	r3, [sp, #32]
 800f3a4:	4b45      	ldr	r3, [pc, #276]	; (800f4bc <lfs_dir_commit+0x3e0>)
 800f3a6:	9307      	str	r3, [sp, #28]
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	9306      	str	r3, [sp, #24]
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	9305      	str	r3, [sp, #20]
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	9304      	str	r3, [sp, #16]
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	9303      	str	r3, [sp, #12]
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	9302      	str	r3, [sp, #8]
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	9301      	str	r3, [sp, #4]
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	9300      	str	r3, [sp, #0]
 800f3c4:	460b      	mov	r3, r1
 800f3c6:	68b9      	ldr	r1, [r7, #8]
 800f3c8:	68f8      	ldr	r0, [r7, #12]
 800f3ca:	f7fe f975 	bl	800d6b8 <lfs_dir_traverse>
 800f3ce:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	3318      	adds	r3, #24
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7fd fba5 	bl	800cb26 <lfs_pair_fromle32>
        if (err) {
 800f3dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d018      	beq.n	800f416 <lfs_dir_commit+0x33a>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800f3e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f3e8:	f113 0f1c 	cmn.w	r3, #28
 800f3ec:	f000 80dd 	beq.w	800f5aa <lfs_dir_commit+0x4ce>
 800f3f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f3f4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800f3f8:	f000 80d7 	beq.w	800f5aa <lfs_dir_commit+0x4ce>
                goto compact;
            }
            *dir = olddir;
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	461d      	mov	r5, r3
 800f400:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800f404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f408:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f40c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800f410:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f414:	e210      	b.n	800f838 <lfs_dir_commit+0x75c>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 800f416:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f41a:	2200      	movs	r2, #0
 800f41c:	601a      	str	r2, [r3, #0]
 800f41e:	605a      	str	r2, [r3, #4]
 800f420:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f428:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f42c:	4611      	mov	r1, r2
 800f42e:	4618      	mov	r0, r3
 800f430:	f7fd fc39 	bl	800cca6 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800f43a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f43e:	4611      	mov	r1, r2
 800f440:	4618      	mov	r0, r3
 800f442:	f7fd fc30 	bl	800cca6 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800f44c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f450:	4611      	mov	r1, r2
 800f452:	4618      	mov	r0, r3
 800f454:	f7fd fc27 	bl	800cca6 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800f458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f45a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800f45e:	f023 0303 	bic.w	r3, r3, #3
 800f462:	643b      	str	r3, [r7, #64]	; 0x40
        if (!lfs_gstate_iszero(&delta)) {
 800f464:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f468:	4618      	mov	r0, r3
 800f46a:	f7fd fc41 	bl	800ccf0 <lfs_gstate_iszero>
 800f46e:	4603      	mov	r3, r0
 800f470:	f083 0301 	eor.w	r3, r3, #1
 800f474:	b2db      	uxtb	r3, r3
 800f476:	2b00      	cmp	r3, #0
 800f478:	d04c      	beq.n	800f514 <lfs_dir_commit+0x438>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 800f47a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f47e:	461a      	mov	r2, r3
 800f480:	68b9      	ldr	r1, [r7, #8]
 800f482:	68f8      	ldr	r0, [r7, #12]
 800f484:	f7fe fdf8 	bl	800e078 <lfs_dir_getgstate>
 800f488:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
            if (err) {
 800f48c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f490:	2b00      	cmp	r3, #0
 800f492:	d015      	beq.n	800f4c0 <lfs_dir_commit+0x3e4>
                *dir = olddir;
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	461d      	mov	r5, r3
 800f498:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800f49c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f49e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f4a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f4a4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 800f4a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f4ac:	e1c4      	b.n	800f838 <lfs_dir_commit+0x75c>
 800f4ae:	bf00      	nop
 800f4b0:	08027064 	.word	0x08027064
 800f4b4:	0802ad48 	.word	0x0802ad48
 800f4b8:	08026e18 	.word	0x08026e18
 800f4bc:	0800ea83 	.word	0x0800ea83
            }

            lfs_gstate_tole32(&delta);
 800f4c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7fd fca5 	bl	800ce14 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 800f4ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f4ce:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800f4d2:	4aba      	ldr	r2, [pc, #744]	; (800f7bc <lfs_dir_commit+0x6e0>)
 800f4d4:	68f8      	ldr	r0, [r7, #12]
 800f4d6:	f7fe fff5 	bl	800e4c4 <lfs_dir_commitattr>
 800f4da:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 800f4de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d016      	beq.n	800f514 <lfs_dir_commit+0x438>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800f4e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f4ea:	f113 0f1c 	cmn.w	r3, #28
 800f4ee:	d05e      	beq.n	800f5ae <lfs_dir_commit+0x4d2>
 800f4f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f4f4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800f4f8:	d059      	beq.n	800f5ae <lfs_dir_commit+0x4d2>
                    goto compact;
                }
                *dir = olddir;
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	461d      	mov	r5, r3
 800f4fe:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800f502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f506:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f50a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 800f50e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f512:	e191      	b.n	800f838 <lfs_dir_commit+0x75c>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 800f514:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f518:	4619      	mov	r1, r3
 800f51a:	68f8      	ldr	r0, [r7, #12]
 800f51c:	f7ff f852 	bl	800e5c4 <lfs_dir_commitcrc>
 800f520:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        if (err) {
 800f524:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d016      	beq.n	800f55a <lfs_dir_commit+0x47e>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800f52c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f530:	f113 0f1c 	cmn.w	r3, #28
 800f534:	d03d      	beq.n	800f5b2 <lfs_dir_commit+0x4d6>
 800f536:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f53a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800f53e:	d038      	beq.n	800f5b2 <lfs_dir_commit+0x4d6>
                goto compact;
            }
            *dir = olddir;
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	461d      	mov	r5, r3
 800f544:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800f548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f54a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f54c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f550:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800f554:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f558:	e16e      	b.n	800f838 <lfs_dir_commit+0x75c>
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800f55a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f55c:	68fa      	ldr	r2, [r7, #12]
 800f55e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800f560:	6992      	ldr	r2, [r2, #24]
 800f562:	fbb3 f1f2 	udiv	r1, r3, r2
 800f566:	fb01 f202 	mul.w	r2, r1, r2
 800f56a:	1a9b      	subs	r3, r3, r2
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d006      	beq.n	800f57e <lfs_dir_commit+0x4a2>
 800f570:	4b93      	ldr	r3, [pc, #588]	; (800f7c0 <lfs_dir_commit+0x6e4>)
 800f572:	4a94      	ldr	r2, [pc, #592]	; (800f7c4 <lfs_dir_commit+0x6e8>)
 800f574:	f44f 61f4 	mov.w	r1, #1952	; 0x7a0
 800f578:	4893      	ldr	r0, [pc, #588]	; (800f7c8 <lfs_dir_commit+0x6ec>)
 800f57a:	f013 fedb 	bl	8023334 <__assert_func>
        dir->off = commit.off;
 800f57e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 800f584:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	68fa      	ldr	r2, [r7, #12]
 800f58e:	333c      	adds	r3, #60	; 0x3c
 800f590:	3230      	adds	r2, #48	; 0x30
 800f592:	ca07      	ldmia	r2, {r0, r1, r2}
 800f594:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	3348      	adds	r3, #72	; 0x48
 800f59c:	2200      	movs	r2, #0
 800f59e:	601a      	str	r2, [r3, #0]
 800f5a0:	605a      	str	r2, [r3, #4]
 800f5a2:	609a      	str	r2, [r3, #8]
    if (dir->erased || dir->count >= 0xff) {
 800f5a4:	e02c      	b.n	800f600 <lfs_dir_commit+0x524>
    } else {
compact:
 800f5a6:	bf00      	nop
 800f5a8:	e004      	b.n	800f5b4 <lfs_dir_commit+0x4d8>
                goto compact;
 800f5aa:	bf00      	nop
 800f5ac:	e002      	b.n	800f5b4 <lfs_dir_commit+0x4d8>
                    goto compact;
 800f5ae:	bf00      	nop
 800f5b0:	e000      	b.n	800f5b4 <lfs_dir_commit+0x4d8>
                goto compact;
 800f5b2:	bf00      	nop
        // fall back to compaction
        lfs_cache_drop(lfs, &lfs->pcache);
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	3310      	adds	r3, #16
 800f5b8:	4619      	mov	r1, r3
 800f5ba:	68f8      	ldr	r0, [r7, #12]
 800f5bc:	f7fc fee4 	bl	800c388 <lfs_cache_drop>

        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	8a9b      	ldrh	r3, [r3, #20]
 800f5c4:	9302      	str	r3, [sp, #8]
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	9301      	str	r3, [sp, #4]
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	9300      	str	r3, [sp, #0]
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	687a      	ldr	r2, [r7, #4]
 800f5d2:	68b9      	ldr	r1, [r7, #8]
 800f5d4:	68f8      	ldr	r0, [r7, #12]
 800f5d6:	f7ff fa69 	bl	800eaac <lfs_dir_compact>
 800f5da:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                dir, 0, dir->count);
        if (err) {
 800f5de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d00c      	beq.n	800f600 <lfs_dir_commit+0x524>
            *dir = olddir;
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	461d      	mov	r5, r3
 800f5ea:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800f5ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f5f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f5f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f5f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800f5fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f5fe:	e11b      	b.n	800f838 <lfs_dir_commit+0x75c>
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f604:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f608:	e0c1      	b.n	800f78e <lfs_dir_commit+0x6b2>
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
 800f60a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f60e:	3308      	adds	r3, #8
 800f610:	68ba      	ldr	r2, [r7, #8]
 800f612:	429a      	cmp	r2, r3
 800f614:	f000 80b6 	beq.w	800f784 <lfs_dir_commit+0x6a8>
 800f618:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f61c:	3308      	adds	r3, #8
 800f61e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800f622:	4611      	mov	r1, r2
 800f624:	4618      	mov	r0, r3
 800f626:	f7fd fa27 	bl	800ca78 <lfs_pair_cmp>
 800f62a:	4603      	mov	r3, r0
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	f040 80a9 	bne.w	800f784 <lfs_dir_commit+0x6a8>
            d->m = *dir;
 800f632:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f636:	68ba      	ldr	r2, [r7, #8]
 800f638:	f103 0408 	add.w	r4, r3, #8
 800f63c:	4615      	mov	r5, r2
 800f63e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f642:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (int i = 0; i < attrcount; i++) {
 800f64a:	2300      	movs	r3, #0
 800f64c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f650:	e092      	b.n	800f778 <lfs_dir_commit+0x69c>
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800f652:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f656:	00db      	lsls	r3, r3, #3
 800f658:	687a      	ldr	r2, [r7, #4]
 800f65a:	4413      	add	r3, r2
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	4618      	mov	r0, r3
 800f660:	f7fd fac6 	bl	800cbf0 <lfs_tag_type3>
 800f664:	4603      	mov	r3, r0
 800f666:	461a      	mov	r2, r3
 800f668:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d119      	bne.n	800f6a4 <lfs_dir_commit+0x5c8>
                        d->id == lfs_tag_id(attrs[i].tag)) {
 800f670:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f674:	889c      	ldrh	r4, [r3, #4]
 800f676:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f67a:	00db      	lsls	r3, r3, #3
 800f67c:	687a      	ldr	r2, [r7, #4]
 800f67e:	4413      	add	r3, r2
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	4618      	mov	r0, r3
 800f684:	f7fd fade 	bl	800cc44 <lfs_tag_id>
 800f688:	4603      	mov	r3, r0
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800f68a:	429c      	cmp	r4, r3
 800f68c:	d10a      	bne.n	800f6a4 <lfs_dir_commit+0x5c8>
                    d->m.pair[0] = LFS_BLOCK_NULL;
 800f68e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f692:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f696:	609a      	str	r2, [r3, #8]
                    d->m.pair[1] = LFS_BLOCK_NULL;
 800f698:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f69c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f6a0:	60da      	str	r2, [r3, #12]
 800f6a2:	e064      	b.n	800f76e <lfs_dir_commit+0x692>
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800f6a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f6a8:	00db      	lsls	r3, r3, #3
 800f6aa:	687a      	ldr	r2, [r7, #4]
 800f6ac:	4413      	add	r3, r2
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f7fd fa9d 	bl	800cbf0 <lfs_tag_type3>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	461a      	mov	r2, r3
 800f6ba:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	d123      	bne.n	800f70a <lfs_dir_commit+0x62e>
                        d->id > lfs_tag_id(attrs[i].tag)) {
 800f6c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f6c6:	889c      	ldrh	r4, [r3, #4]
 800f6c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f6cc:	00db      	lsls	r3, r3, #3
 800f6ce:	687a      	ldr	r2, [r7, #4]
 800f6d0:	4413      	add	r3, r2
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f7fd fab5 	bl	800cc44 <lfs_tag_id>
 800f6da:	4603      	mov	r3, r0
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800f6dc:	429c      	cmp	r4, r3
 800f6de:	d914      	bls.n	800f70a <lfs_dir_commit+0x62e>
                    d->id -= 1;
 800f6e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f6e4:	889b      	ldrh	r3, [r3, #4]
 800f6e6:	3b01      	subs	r3, #1
 800f6e8:	b29a      	uxth	r2, r3
 800f6ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f6ee:	809a      	strh	r2, [r3, #4]
                    if (d->type == LFS_TYPE_DIR) {
 800f6f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f6f4:	799b      	ldrb	r3, [r3, #6]
 800f6f6:	2b02      	cmp	r3, #2
 800f6f8:	d139      	bne.n	800f76e <lfs_dir_commit+0x692>
                        ((lfs_dir_t*)d)->pos -= 1;
 800f6fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f700:	1e5a      	subs	r2, r3, #1
 800f702:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f706:	629a      	str	r2, [r3, #40]	; 0x28
                    if (d->type == LFS_TYPE_DIR) {
 800f708:	e031      	b.n	800f76e <lfs_dir_commit+0x692>
                    }
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800f70a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f70e:	00db      	lsls	r3, r3, #3
 800f710:	687a      	ldr	r2, [r7, #4]
 800f712:	4413      	add	r3, r2
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	4618      	mov	r0, r3
 800f718:	f7fd fa6a 	bl	800cbf0 <lfs_tag_type3>
 800f71c:	4603      	mov	r3, r0
 800f71e:	461a      	mov	r2, r3
 800f720:	f240 4301 	movw	r3, #1025	; 0x401
 800f724:	429a      	cmp	r2, r3
 800f726:	d122      	bne.n	800f76e <lfs_dir_commit+0x692>
                        d->id >= lfs_tag_id(attrs[i].tag)) {
 800f728:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f72c:	889c      	ldrh	r4, [r3, #4]
 800f72e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f732:	00db      	lsls	r3, r3, #3
 800f734:	687a      	ldr	r2, [r7, #4]
 800f736:	4413      	add	r3, r2
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	4618      	mov	r0, r3
 800f73c:	f7fd fa82 	bl	800cc44 <lfs_tag_id>
 800f740:	4603      	mov	r3, r0
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800f742:	429c      	cmp	r4, r3
 800f744:	d313      	bcc.n	800f76e <lfs_dir_commit+0x692>
                    d->id += 1;
 800f746:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f74a:	889b      	ldrh	r3, [r3, #4]
 800f74c:	3301      	adds	r3, #1
 800f74e:	b29a      	uxth	r2, r3
 800f750:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f754:	809a      	strh	r2, [r3, #4]
                    if (d->type == LFS_TYPE_DIR) {
 800f756:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f75a:	799b      	ldrb	r3, [r3, #6]
 800f75c:	2b02      	cmp	r3, #2
 800f75e:	d106      	bne.n	800f76e <lfs_dir_commit+0x692>
                        ((lfs_dir_t*)d)->pos += 1;
 800f760:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f766:	1c5a      	adds	r2, r3, #1
 800f768:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f76c:	629a      	str	r2, [r3, #40]	; 0x28
            for (int i = 0; i < attrcount; i++) {
 800f76e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f772:	3301      	adds	r3, #1
 800f774:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f778:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	429a      	cmp	r2, r3
 800f780:	f6ff af67 	blt.w	800f652 <lfs_dir_commit+0x576>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800f784:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f78e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f792:	2b00      	cmp	r3, #0
 800f794:	f47f af39 	bne.w	800f60a <lfs_dir_commit+0x52e>
                }
            }
        }
    }

    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f79c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f7a0:	e045      	b.n	800f82e <lfs_dir_commit+0x752>
        if (lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
 800f7a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f7a6:	3308      	adds	r3, #8
 800f7a8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800f7ac:	4611      	mov	r1, r2
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7fd f962 	bl	800ca78 <lfs_pair_cmp>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d134      	bne.n	800f824 <lfs_dir_commit+0x748>
            while (d->id >= d->m.count && d->m.split) {
 800f7ba:	e026      	b.n	800f80a <lfs_dir_commit+0x72e>
 800f7bc:	7ffffc0c 	.word	0x7ffffc0c
 800f7c0:	08026fa4 	.word	0x08026fa4
 800f7c4:	0802ad48 	.word	0x0802ad48
 800f7c8:	08026e18 	.word	0x08026e18
                // we split and id is on tail now
                d->id -= d->m.count;
 800f7cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f7d0:	889a      	ldrh	r2, [r3, #4]
 800f7d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f7d6:	8b9b      	ldrh	r3, [r3, #28]
 800f7d8:	1ad3      	subs	r3, r2, r3
 800f7da:	b29a      	uxth	r2, r3
 800f7dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f7e0:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800f7e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f7e6:	f103 0108 	add.w	r1, r3, #8
 800f7ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f7ee:	3320      	adds	r3, #32
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	68f8      	ldr	r0, [r7, #12]
 800f7f4:	f7fe fc24 	bl	800e040 <lfs_dir_fetch>
 800f7f8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                if (err) {
 800f7fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f800:	2b00      	cmp	r3, #0
 800f802:	d002      	beq.n	800f80a <lfs_dir_commit+0x72e>
                    return err;
 800f804:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f808:	e016      	b.n	800f838 <lfs_dir_commit+0x75c>
            while (d->id >= d->m.count && d->m.split) {
 800f80a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f80e:	889a      	ldrh	r2, [r3, #4]
 800f810:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f814:	8b9b      	ldrh	r3, [r3, #28]
 800f816:	429a      	cmp	r2, r3
 800f818:	d304      	bcc.n	800f824 <lfs_dir_commit+0x748>
 800f81a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f81e:	7fdb      	ldrb	r3, [r3, #31]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d1d3      	bne.n	800f7cc <lfs_dir_commit+0x6f0>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800f824:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f82e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f832:	2b00      	cmp	r3, #0
 800f834:	d1b5      	bne.n	800f7a2 <lfs_dir_commit+0x6c6>
                }
            }
        }
    }

    return 0;
 800f836:	2300      	movs	r3, #0
}
 800f838:	4618      	mov	r0, r3
 800f83a:	37b8      	adds	r7, #184	; 0xb8
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bdb0      	pop	{r4, r5, r7, pc}

0800f840 <lfs_rawmkdir>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_rawmkdir(lfs_t *lfs, const char *path) {
 800f840:	b5b0      	push	{r4, r5, r7, lr}
 800f842:	b0b8      	sub	sp, #224	; 0xe0
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f002 fd2a 	bl	80122a4 <lfs_fs_forceconsistency>
 800f850:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 800f854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d002      	beq.n	800f862 <lfs_rawmkdir+0x22>
        return err;
 800f85c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f860:	e128      	b.n	800fab4 <lfs_rawmkdir+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f866:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 800f86a:	f107 00ae 	add.w	r0, r7, #174	; 0xae
 800f86e:	463a      	mov	r2, r7
 800f870:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800f874:	f103 0108 	add.w	r1, r3, #8
 800f878:	4603      	mov	r3, r0
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f7fe fcf2 	bl	800e264 <lfs_dir_find>
 800f880:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 800f884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f888:	f113 0f02 	cmn.w	r3, #2
 800f88c:	d105      	bne.n	800f89a <lfs_rawmkdir+0x5a>
 800f88e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800f892:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800f896:	4293      	cmp	r3, r2
 800f898:	d109      	bne.n	800f8ae <lfs_rawmkdir+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 800f89a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	da02      	bge.n	800f8a8 <lfs_rawmkdir+0x68>
 800f8a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f8a6:	e105      	b.n	800fab4 <lfs_rawmkdir+0x274>
 800f8a8:	f06f 0310 	mvn.w	r3, #16
 800f8ac:	e102      	b.n	800fab4 <lfs_rawmkdir+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f7f0 fced 	bl	8000290 <strlen>
 800f8b6:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if (nlen > lfs->name_max) {
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8be:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d902      	bls.n	800f8cc <lfs_rawmkdir+0x8c>
        return LFS_ERR_NAMETOOLONG;
 800f8c6:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800f8ca:	e0f3      	b.n	800fab4 <lfs_rawmkdir+0x274>
    }

    // build up new directory
    lfs_alloc_ack(lfs);
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f7fd fbe9 	bl	800d0a4 <lfs_alloc_ack>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 800f8d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f8d6:	4619      	mov	r1, r3
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f7fe ffaf 	bl	800e83c <lfs_dir_alloc>
 800f8de:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 800f8e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d002      	beq.n	800f8f0 <lfs_rawmkdir+0xb0>
        return err;
 800f8ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f8ee:	e0e1      	b.n	800fab4 <lfs_rawmkdir+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 800f8f0:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800f8f4:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 800f8f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f8fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f8fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f900:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 800f904:	e012      	b.n	800f92c <lfs_rawmkdir+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 800f906:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f90a:	f103 0218 	add.w	r2, r3, #24
 800f90e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f912:	4619      	mov	r1, r3
 800f914:	6878      	ldr	r0, [r7, #4]
 800f916:	f7fe fb93 	bl	800e040 <lfs_dir_fetch>
 800f91a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 800f91e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f922:	2b00      	cmp	r3, #0
 800f924:	d002      	beq.n	800f92c <lfs_rawmkdir+0xec>
            return err;
 800f926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f92a:	e0c3      	b.n	800fab4 <lfs_rawmkdir+0x274>
    while (pred.split) {
 800f92c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800f930:	2b00      	cmp	r3, #0
 800f932:	d1e8      	bne.n	800f906 <lfs_rawmkdir+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 800f934:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f938:	3318      	adds	r3, #24
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7fd f90d 	bl	800cb5a <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 800f940:	4b5e      	ldr	r3, [pc, #376]	; (800fabc <lfs_rawmkdir+0x27c>)
 800f942:	667b      	str	r3, [r7, #100]	; 0x64
 800f944:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f948:	3318      	adds	r3, #24
 800f94a:	66bb      	str	r3, [r7, #104]	; 0x68
 800f94c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800f950:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800f954:	2301      	movs	r3, #1
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f7ff fbc0 	bl	800f0dc <lfs_dir_commit>
 800f95c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 800f960:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f964:	3318      	adds	r3, #24
 800f966:	4618      	mov	r0, r3
 800f968:	f7fd f8dd 	bl	800cb26 <lfs_pair_fromle32>
    if (err) {
 800f96c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f970:	2b00      	cmp	r3, #0
 800f972:	d002      	beq.n	800f97a <lfs_rawmkdir+0x13a>
        return err;
 800f974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f978:	e09c      	b.n	800fab4 <lfs_rawmkdir+0x274>
    }

    // current block end of list?
    if (cwd.m.split) {
 800f97a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d04c      	beq.n	800fa1c <lfs_rawmkdir+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 800f982:	2101      	movs	r1, #1
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f002 faab 	bl	8011ee0 <lfs_fs_preporphans>
 800f98a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 800f98e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f992:	2b00      	cmp	r3, #0
 800f994:	d002      	beq.n	800f99c <lfs_rawmkdir+0x15c>
            return err;
 800f996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f99a:	e08b      	b.n	800fab4 <lfs_rawmkdir+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 800f99c:	2300      	movs	r3, #0
 800f99e:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
        cwd.id = 0;
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lfs->mlist = &cwd;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800f9ae:	629a      	str	r2, [r3, #40]	; 0x28

        lfs_pair_tole32(dir.pair);
 800f9b0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7fd f8d0 	bl	800cb5a <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 800f9ba:	4b40      	ldr	r3, [pc, #256]	; (800fabc <lfs_rawmkdir+0x27c>)
 800f9bc:	617b      	str	r3, [r7, #20]
 800f9be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f9c2:	61bb      	str	r3, [r7, #24]
 800f9c4:	f107 0214 	add.w	r2, r7, #20
 800f9c8:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f7ff fb84 	bl	800f0dc <lfs_dir_commit>
 800f9d4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 800f9d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7fd f8a2 	bl	800cb26 <lfs_pair_fromle32>
        if (err) {
 800f9e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d006      	beq.n	800f9f8 <lfs_rawmkdir+0x1b8>
            lfs->mlist = cwd.next;
 800f9ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 800f9f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f9f6:	e05d      	b.n	800fab4 <lfs_rawmkdir+0x274>
        }

        lfs->mlist = cwd.next;
 800f9f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	629a      	str	r2, [r3, #40]	; 0x28
        err = lfs_fs_preporphans(lfs, -1);
 800fa00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	f002 fa6b 	bl	8011ee0 <lfs_fs_preporphans>
 800fa0a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 800fa0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d002      	beq.n	800fa1c <lfs_rawmkdir+0x1dc>
            return err;
 800fa16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa1a:	e04b      	b.n	800fab4 <lfs_rawmkdir+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 800fa1c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800fa20:	4618      	mov	r0, r3
 800fa22:	f7fd f89a 	bl	800cb5a <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 800fa26:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800fa2a:	029b      	lsls	r3, r3, #10
 800fa2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fa30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fa34:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa36:	2300      	movs	r3, #0
 800fa38:	643b      	str	r3, [r7, #64]	; 0x40
 800fa3a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800fa3e:	029a      	lsls	r2, r3, #10
 800fa40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fa44:	4313      	orrs	r3, r2
 800fa46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fa4a:	647b      	str	r3, [r7, #68]	; 0x44
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa50:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800fa54:	029b      	lsls	r3, r3, #10
 800fa56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fa5a:	f043 0308 	orr.w	r3, r3, #8
 800fa5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fa60:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800fa64:	653b      	str	r3, [r7, #80]	; 0x50
 800fa66:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800fa6a:	f083 0301 	eor.w	r3, r3, #1
 800fa6e:	b2db      	uxtb	r3, r3
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d001      	beq.n	800fa78 <lfs_rawmkdir+0x238>
 800fa74:	4b11      	ldr	r3, [pc, #68]	; (800fabc <lfs_rawmkdir+0x27c>)
 800fa76:	e000      	b.n	800fa7a <lfs_rawmkdir+0x23a>
 800fa78:	2300      	movs	r3, #0
 800fa7a:	657b      	str	r3, [r7, #84]	; 0x54
 800fa7c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800fa80:	65bb      	str	r3, [r7, #88]	; 0x58
 800fa82:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800fa86:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800fa8a:	f103 0108 	add.w	r1, r3, #8
 800fa8e:	2304      	movs	r3, #4
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f7ff fb23 	bl	800f0dc <lfs_dir_commit>
 800fa96:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 800fa9a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fd f841 	bl	800cb26 <lfs_pair_fromle32>
    if (err) {
 800faa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d002      	beq.n	800fab2 <lfs_rawmkdir+0x272>
        return err;
 800faac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fab0:	e000      	b.n	800fab4 <lfs_rawmkdir+0x274>
    }

    return 0;
 800fab2:	2300      	movs	r3, #0
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	37e0      	adds	r7, #224	; 0xe0
 800fab8:	46bd      	mov	sp, r7
 800faba:	bdb0      	pop	{r4, r5, r7, pc}
 800fabc:	600ffc08 	.word	0x600ffc08

0800fac0 <lfs_dir_rawopen>:
#endif

static int lfs_dir_rawopen(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 800fac0:	b590      	push	{r4, r7, lr}
 800fac2:	b08d      	sub	sp, #52	; 0x34
 800fac4:	af02      	add	r7, sp, #8
 800fac6:	60f8      	str	r0, [r7, #12]
 800fac8:	60b9      	str	r1, [r7, #8]
 800faca:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	f103 0108 	add.w	r1, r3, #8
 800fad2:	1d3a      	adds	r2, r7, #4
 800fad4:	2300      	movs	r3, #0
 800fad6:	68f8      	ldr	r0, [r7, #12]
 800fad8:	f7fe fbc4 	bl	800e264 <lfs_dir_find>
 800fadc:	6278      	str	r0, [r7, #36]	; 0x24
    if (tag < 0) {
 800fade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	da01      	bge.n	800fae8 <lfs_dir_rawopen+0x28>
        return tag;
 800fae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fae6:	e05e      	b.n	800fba6 <lfs_dir_rawopen+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800fae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faea:	4618      	mov	r0, r3
 800faec:	f7fd f880 	bl	800cbf0 <lfs_tag_type3>
 800faf0:	4603      	mov	r3, r0
 800faf2:	2b02      	cmp	r3, #2
 800faf4:	d002      	beq.n	800fafc <lfs_dir_rawopen+0x3c>
        return LFS_ERR_NOTDIR;
 800faf6:	f06f 0313 	mvn.w	r3, #19
 800fafa:	e054      	b.n	800fba6 <lfs_dir_rawopen+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 800fafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7fd f8a0 	bl	800cc44 <lfs_tag_id>
 800fb04:	4603      	mov	r3, r0
 800fb06:	461a      	mov	r2, r3
 800fb08:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	d106      	bne.n	800fb1e <lfs_dir_rawopen+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	6a1b      	ldr	r3, [r3, #32]
 800fb14:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb1a:	61bb      	str	r3, [r7, #24]
 800fb1c:	e01f      	b.n	800fb5e <lfs_dir_rawopen+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800fb1e:	68bb      	ldr	r3, [r7, #8]
 800fb20:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 800fb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7fd f88c 	bl	800cc44 <lfs_tag_id>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800fb30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fb34:	f043 0308 	orr.w	r3, r3, #8
 800fb38:	f107 0214 	add.w	r2, r7, #20
 800fb3c:	9200      	str	r2, [sp, #0]
 800fb3e:	4a1c      	ldr	r2, [pc, #112]	; (800fbb0 <lfs_dir_rawopen+0xf0>)
 800fb40:	4621      	mov	r1, r4
 800fb42:	68f8      	ldr	r0, [r7, #12]
 800fb44:	f7fd fc68 	bl	800d418 <lfs_dir_get>
 800fb48:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 800fb4a:	6a3b      	ldr	r3, [r7, #32]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	da01      	bge.n	800fb54 <lfs_dir_rawopen+0x94>
            return res;
 800fb50:	6a3b      	ldr	r3, [r7, #32]
 800fb52:	e028      	b.n	800fba6 <lfs_dir_rawopen+0xe6>
        }
        lfs_pair_fromle32(pair);
 800fb54:	f107 0314 	add.w	r3, r7, #20
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f7fc ffe4 	bl	800cb26 <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	3308      	adds	r3, #8
 800fb62:	f107 0214 	add.w	r2, r7, #20
 800fb66:	4619      	mov	r1, r3
 800fb68:	68f8      	ldr	r0, [r7, #12]
 800fb6a:	f7fe fa69 	bl	800e040 <lfs_dir_fetch>
 800fb6e:	61f8      	str	r0, [r7, #28]
    if (err) {
 800fb70:	69fb      	ldr	r3, [r7, #28]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d001      	beq.n	800fb7a <lfs_dir_rawopen+0xba>
        return err;
 800fb76:	69fb      	ldr	r3, [r7, #28]
 800fb78:	e015      	b.n	800fba6 <lfs_dir_rawopen+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	689a      	ldr	r2, [r3, #8]
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	62da      	str	r2, [r3, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	68da      	ldr	r2, [r3, #12]
 800fb86:	68bb      	ldr	r3, [r7, #8]
 800fb88:	631a      	str	r2, [r3, #48]	; 0x30
    dir->id = 0;
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	2200      	movs	r2, #0
 800fb94:	629a      	str	r2, [r3, #40]	; 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	2202      	movs	r2, #2
 800fb9a:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 800fb9c:	68b9      	ldr	r1, [r7, #8]
 800fb9e:	68f8      	ldr	r0, [r7, #12]
 800fba0:	f7fd fa37 	bl	800d012 <lfs_mlist_append>

    return 0;
 800fba4:	2300      	movs	r3, #0
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	372c      	adds	r7, #44	; 0x2c
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd90      	pop	{r4, r7, pc}
 800fbae:	bf00      	nop
 800fbb0:	700ffc00 	.word	0x700ffc00

0800fbb4 <lfs_dir_rawclose>:

static int lfs_dir_rawclose(lfs_t *lfs, lfs_dir_t *dir) {
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b082      	sub	sp, #8
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
 800fbbc:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 800fbbe:	6839      	ldr	r1, [r7, #0]
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	f7fd fa04 	bl	800cfce <lfs_mlist_remove>

    return 0;
 800fbc6:	2300      	movs	r3, #0
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3708      	adds	r7, #8
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}

0800fbd0 <lfs_dir_rawread>:

static int lfs_dir_rawread(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b086      	sub	sp, #24
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	60f8      	str	r0, [r7, #12]
 800fbd8:	60b9      	str	r1, [r7, #8]
 800fbda:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 800fbdc:	f44f 7284 	mov.w	r2, #264	; 0x108
 800fbe0:	2100      	movs	r1, #0
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f014 fbbc 	bl	8024360 <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d110      	bne.n	800fc12 <lfs_dir_rawread+0x42>
        info->type = LFS_TYPE_DIR;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2202      	movs	r2, #2
 800fbf4:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	3308      	adds	r3, #8
 800fbfa:	4935      	ldr	r1, [pc, #212]	; (800fcd0 <lfs_dir_rawread+0x100>)
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	460b      	mov	r3, r1
 800fc00:	881b      	ldrh	r3, [r3, #0]
 800fc02:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc08:	1c5a      	adds	r2, r3, #1
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 800fc0e:	2301      	movs	r3, #1
 800fc10:	e05a      	b.n	800fcc8 <lfs_dir_rawread+0xf8>
    } else if (dir->pos == 1) {
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc16:	2b01      	cmp	r3, #1
 800fc18:	d110      	bne.n	800fc3c <lfs_dir_rawread+0x6c>
        info->type = LFS_TYPE_DIR;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2202      	movs	r2, #2
 800fc1e:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	3308      	adds	r3, #8
 800fc24:	4a2b      	ldr	r2, [pc, #172]	; (800fcd4 <lfs_dir_rawread+0x104>)
 800fc26:	8811      	ldrh	r1, [r2, #0]
 800fc28:	7892      	ldrb	r2, [r2, #2]
 800fc2a:	8019      	strh	r1, [r3, #0]
 800fc2c:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc32:	1c5a      	adds	r2, r3, #1
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 800fc38:	2301      	movs	r3, #1
 800fc3a:	e045      	b.n	800fcc8 <lfs_dir_rawread+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	889a      	ldrh	r2, [r3, #4]
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	8b9b      	ldrh	r3, [r3, #28]
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d11a      	bne.n	800fc7e <lfs_dir_rawread+0xae>
            if (!dir->m.split) {
 800fc48:	68bb      	ldr	r3, [r7, #8]
 800fc4a:	7fdb      	ldrb	r3, [r3, #31]
 800fc4c:	f083 0301 	eor.w	r3, r3, #1
 800fc50:	b2db      	uxtb	r3, r3
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d001      	beq.n	800fc5a <lfs_dir_rawread+0x8a>
                return false;
 800fc56:	2300      	movs	r3, #0
 800fc58:	e036      	b.n	800fcc8 <lfs_dir_rawread+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	f103 0108 	add.w	r1, r3, #8
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	3320      	adds	r3, #32
 800fc64:	461a      	mov	r2, r3
 800fc66:	68f8      	ldr	r0, [r7, #12]
 800fc68:	f7fe f9ea 	bl	800e040 <lfs_dir_fetch>
 800fc6c:	6178      	str	r0, [r7, #20]
            if (err) {
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d001      	beq.n	800fc78 <lfs_dir_rawread+0xa8>
                return err;
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	e027      	b.n	800fcc8 <lfs_dir_rawread+0xf8>
            }

            dir->id = 0;
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	f103 0108 	add.w	r1, r3, #8
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	889a      	ldrh	r2, [r3, #4]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	68f8      	ldr	r0, [r7, #12]
 800fc8c:	f7fe fa26 	bl	800e0dc <lfs_dir_getinfo>
 800fc90:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d005      	beq.n	800fca4 <lfs_dir_rawread+0xd4>
 800fc98:	693b      	ldr	r3, [r7, #16]
 800fc9a:	f113 0f02 	cmn.w	r3, #2
 800fc9e:	d001      	beq.n	800fca4 <lfs_dir_rawread+0xd4>
            return err;
 800fca0:	693b      	ldr	r3, [r7, #16]
 800fca2:	e011      	b.n	800fcc8 <lfs_dir_rawread+0xf8>
        }

        dir->id += 1;
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	889b      	ldrh	r3, [r3, #4]
 800fca8:	3301      	adds	r3, #1
 800fcaa:	b29a      	uxth	r2, r3
 800fcac:	68bb      	ldr	r3, [r7, #8]
 800fcae:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 800fcb0:	693b      	ldr	r3, [r7, #16]
 800fcb2:	f113 0f02 	cmn.w	r3, #2
 800fcb6:	d100      	bne.n	800fcba <lfs_dir_rawread+0xea>
    while (true) {
 800fcb8:	e7c0      	b.n	800fc3c <lfs_dir_rawread+0x6c>
            break;
 800fcba:	bf00      	nop
        }
    }

    dir->pos += 1;
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcc0:	1c5a      	adds	r2, r3, #1
 800fcc2:	68bb      	ldr	r3, [r7, #8]
 800fcc4:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 800fcc6:	2301      	movs	r3, #1
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3718      	adds	r7, #24
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}
 800fcd0:	08026f6c 	.word	0x08026f6c
 800fcd4:	08026f70 	.word	0x08026f70

0800fcd8 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 800fcd8:	b590      	push	{r4, r7, lr}
 800fcda:	b087      	sub	sp, #28
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fcec:	69db      	ldr	r3, [r3, #28]
 800fcee:	3b08      	subs	r3, #8
 800fcf0:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 800fcf2:	697a      	ldr	r2, [r7, #20]
 800fcf4:	693b      	ldr	r3, [r7, #16]
 800fcf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800fcfa:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d101      	bne.n	800fd06 <lfs_ctz_index+0x2e>
        return 0;
 800fd02:	2300      	movs	r3, #0
 800fd04:	e01c      	b.n	800fd40 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	3b01      	subs	r3, #1
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7fc fadc 	bl	800c2c8 <lfs_popc>
 800fd10:	4603      	mov	r3, r0
 800fd12:	3302      	adds	r3, #2
 800fd14:	009b      	lsls	r3, r3, #2
 800fd16:	697a      	ldr	r2, [r7, #20]
 800fd18:	1ad2      	subs	r2, r2, r3
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd20:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 800fd22:	693b      	ldr	r3, [r7, #16]
 800fd24:	68fa      	ldr	r2, [r7, #12]
 800fd26:	fb02 f303 	mul.w	r3, r2, r3
 800fd2a:	697a      	ldr	r2, [r7, #20]
 800fd2c:	1ad4      	subs	r4, r2, r3
 800fd2e:	68f8      	ldr	r0, [r7, #12]
 800fd30:	f7fc faca 	bl	800c2c8 <lfs_popc>
 800fd34:	4603      	mov	r3, r0
 800fd36:	009b      	lsls	r3, r3, #2
 800fd38:	1ae2      	subs	r2, r4, r3
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	601a      	str	r2, [r3, #0]
    return i;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
}
 800fd40:	4618      	mov	r0, r3
 800fd42:	371c      	adds	r7, #28
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd90      	pop	{r4, r7, pc}

0800fd48 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 800fd48:	b590      	push	{r4, r7, lr}
 800fd4a:	b08f      	sub	sp, #60	; 0x3c
 800fd4c:	af04      	add	r7, sp, #16
 800fd4e:	60f8      	str	r0, [r7, #12]
 800fd50:	60b9      	str	r1, [r7, #8]
 800fd52:	607a      	str	r2, [r7, #4]
 800fd54:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800fd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d108      	bne.n	800fd6e <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 800fd5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd62:	601a      	str	r2, [r3, #0]
        *off = 0;
 800fd64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd66:	2200      	movs	r2, #0
 800fd68:	601a      	str	r2, [r3, #0]
        return 0;
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	e053      	b.n	800fe16 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800fd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd70:	3b01      	subs	r3, #1
 800fd72:	617b      	str	r3, [r7, #20]
 800fd74:	f107 0314 	add.w	r3, r7, #20
 800fd78:	4619      	mov	r1, r3
 800fd7a:	68f8      	ldr	r0, [r7, #12]
 800fd7c:	f7ff ffac 	bl	800fcd8 <lfs_ctz_index>
 800fd80:	4603      	mov	r3, r0
 800fd82:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 800fd84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800fd88:	4619      	mov	r1, r3
 800fd8a:	68f8      	ldr	r0, [r7, #12]
 800fd8c:	f7ff ffa4 	bl	800fcd8 <lfs_ctz_index>
 800fd90:	4603      	mov	r3, r0
 800fd92:	623b      	str	r3, [r7, #32]

    while (current > target) {
 800fd94:	e034      	b.n	800fe00 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 800fd96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd98:	6a3b      	ldr	r3, [r7, #32]
 800fd9a:	1ad3      	subs	r3, r2, r3
 800fd9c:	3301      	adds	r3, #1
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7fc fa73 	bl	800c28a <lfs_npw2>
 800fda4:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 800fda6:	1e5c      	subs	r4, r3, #1
 800fda8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fdaa:	f7fc fa7e 	bl	800c2aa <lfs_ctz>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	4619      	mov	r1, r3
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	f7fc fa32 	bl	800c21c <lfs_min>
 800fdb8:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	69fa      	ldr	r2, [r7, #28]
 800fdbe:	0092      	lsls	r2, r2, #2
 800fdc0:	2104      	movs	r1, #4
 800fdc2:	9103      	str	r1, [sp, #12]
 800fdc4:	4639      	mov	r1, r7
 800fdc6:	9102      	str	r1, [sp, #8]
 800fdc8:	9201      	str	r2, [sp, #4]
 800fdca:	9300      	str	r3, [sp, #0]
 800fdcc:	2304      	movs	r3, #4
 800fdce:	687a      	ldr	r2, [r7, #4]
 800fdd0:	68b9      	ldr	r1, [r7, #8]
 800fdd2:	68f8      	ldr	r0, [r7, #12]
 800fdd4:	f7fc fafe 	bl	800c3d4 <lfs_bd_read>
 800fdd8:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	4618      	mov	r0, r3
 800fdde:	f7fc fa8d 	bl	800c2fc <lfs_fromle32>
 800fde2:	4603      	mov	r3, r0
 800fde4:	603b      	str	r3, [r7, #0]
        if (err) {
 800fde6:	69bb      	ldr	r3, [r7, #24]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d001      	beq.n	800fdf0 <lfs_ctz_find+0xa8>
            return err;
 800fdec:	69bb      	ldr	r3, [r7, #24]
 800fdee:	e012      	b.n	800fe16 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 800fdf0:	2201      	movs	r2, #1
 800fdf2:	69fb      	ldr	r3, [r7, #28]
 800fdf4:	fa02 f303 	lsl.w	r3, r2, r3
 800fdf8:	461a      	mov	r2, r3
 800fdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdfc:	1a9b      	subs	r3, r3, r2
 800fdfe:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 800fe00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe02:	6a3b      	ldr	r3, [r7, #32]
 800fe04:	429a      	cmp	r2, r3
 800fe06:	d8c6      	bhi.n	800fd96 <lfs_ctz_find+0x4e>
    }

    *block = head;
 800fe08:	683a      	ldr	r2, [r7, #0]
 800fe0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe0c:	601a      	str	r2, [r3, #0]
    *off = pos;
 800fe0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fe10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe12:	601a      	str	r2, [r3, #0]
    return 0;
 800fe14:	2300      	movs	r3, #0
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	372c      	adds	r7, #44	; 0x2c
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd90      	pop	{r4, r7, pc}
	...

0800fe20 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b092      	sub	sp, #72	; 0x48
 800fe24:	af04      	add	r7, sp, #16
 800fe26:	60f8      	str	r0, [r7, #12]
 800fe28:	60b9      	str	r1, [r7, #8]
 800fe2a:	607a      	str	r2, [r7, #4]
 800fe2c:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800fe2e:	f107 0320 	add.w	r3, r7, #32
 800fe32:	4619      	mov	r1, r3
 800fe34:	68f8      	ldr	r0, [r7, #12]
 800fe36:	f7fd f955 	bl	800d0e4 <lfs_alloc>
 800fe3a:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 800fe3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d001      	beq.n	800fe46 <lfs_ctz_extend+0x26>
            return err;
 800fe42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe44:	e0e9      	b.n	801001a <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 800fe46:	6a3b      	ldr	r3, [r7, #32]
 800fe48:	4619      	mov	r1, r3
 800fe4a:	68f8      	ldr	r0, [r7, #12]
 800fe4c:	f7fc fdb4 	bl	800c9b8 <lfs_bd_erase>
 800fe50:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 800fe52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d006      	beq.n	800fe66 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 800fe58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe5a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800fe5e:	f000 80cb 	beq.w	800fff8 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 800fe62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe64:	e0d9      	b.n	801001a <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 800fe66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d107      	bne.n	800fe7c <lfs_ctz_extend+0x5c>
                *block = nblock;
 800fe6c:	6a3a      	ldr	r2, [r7, #32]
 800fe6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe70:	601a      	str	r2, [r3, #0]
                *off = 0;
 800fe72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe74:	2200      	movs	r2, #0
 800fe76:	601a      	str	r2, [r3, #0]
                return 0;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	e0ce      	b.n	801001a <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 800fe7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe7e:	3b01      	subs	r3, #1
 800fe80:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 800fe82:	f107 031c 	add.w	r3, r7, #28
 800fe86:	4619      	mov	r1, r3
 800fe88:	68f8      	ldr	r0, [r7, #12]
 800fe8a:	f7ff ff25 	bl	800fcd8 <lfs_ctz_index>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 800fe92:	69fb      	ldr	r3, [r7, #28]
 800fe94:	3301      	adds	r3, #1
 800fe96:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fe9c:	69da      	ldr	r2, [r3, #28]
 800fe9e:	69fb      	ldr	r3, [r7, #28]
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d044      	beq.n	800ff2e <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 800fea4:	2300      	movs	r3, #0
 800fea6:	637b      	str	r3, [r7, #52]	; 0x34
 800fea8:	e035      	b.n	800ff16 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 800feaa:	69fa      	ldr	r2, [r7, #28]
 800feac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feae:	1ad2      	subs	r2, r2, r3
 800feb0:	2301      	movs	r3, #1
 800feb2:	9303      	str	r3, [sp, #12]
 800feb4:	f107 0317 	add.w	r3, r7, #23
 800feb8:	9302      	str	r3, [sp, #8]
 800feba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800febc:	9301      	str	r3, [sp, #4]
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	9300      	str	r3, [sp, #0]
 800fec2:	4613      	mov	r3, r2
 800fec4:	687a      	ldr	r2, [r7, #4]
 800fec6:	2100      	movs	r1, #0
 800fec8:	68f8      	ldr	r0, [r7, #12]
 800feca:	f7fc fa83 	bl	800c3d4 <lfs_bd_read>
 800fece:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 800fed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d001      	beq.n	800feda <lfs_ctz_extend+0xba>
                        return err;
 800fed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed8:	e09f      	b.n	801001a <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 800feda:	6a3b      	ldr	r3, [r7, #32]
 800fedc:	2201      	movs	r2, #1
 800fede:	9203      	str	r2, [sp, #12]
 800fee0:	f107 0217 	add.w	r2, r7, #23
 800fee4:	9202      	str	r2, [sp, #8]
 800fee6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fee8:	9201      	str	r2, [sp, #4]
 800feea:	9300      	str	r3, [sp, #0]
 800feec:	2301      	movs	r3, #1
 800feee:	687a      	ldr	r2, [r7, #4]
 800fef0:	68b9      	ldr	r1, [r7, #8]
 800fef2:	68f8      	ldr	r0, [r7, #12]
 800fef4:	f7fc fcb4 	bl	800c860 <lfs_bd_prog>
 800fef8:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 800fefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d007      	beq.n	800ff10 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 800ff00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff02:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ff06:	d101      	bne.n	800ff0c <lfs_ctz_extend+0xec>
                            goto relocate;
 800ff08:	bf00      	nop
                    goto relocate;
 800ff0a:	e075      	b.n	800fff8 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 800ff0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 800ff0e:	e084      	b.n	801001a <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 800ff10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff12:	3301      	adds	r3, #1
 800ff14:	637b      	str	r3, [r7, #52]	; 0x34
 800ff16:	69fb      	ldr	r3, [r7, #28]
 800ff18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d3c5      	bcc.n	800feaa <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 800ff1e:	6a3a      	ldr	r2, [r7, #32]
 800ff20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff22:	601a      	str	r2, [r3, #0]
                *off = noff;
 800ff24:	69fa      	ldr	r2, [r7, #28]
 800ff26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff28:	601a      	str	r2, [r3, #0]
                return 0;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	e075      	b.n	801001a <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 800ff2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff30:	3301      	adds	r3, #1
 800ff32:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 800ff34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff36:	f7fc f9b8 	bl	800c2aa <lfs_ctz>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 800ff44:	2300      	movs	r3, #0
 800ff46:	633b      	str	r3, [r7, #48]	; 0x30
 800ff48:	e049      	b.n	800ffde <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 800ff4a:	69bb      	ldr	r3, [r7, #24]
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f7fc f9e0 	bl	800c312 <lfs_tole32>
 800ff52:	4603      	mov	r3, r0
 800ff54:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 800ff56:	6a3b      	ldr	r3, [r7, #32]
 800ff58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff5a:	0092      	lsls	r2, r2, #2
 800ff5c:	2104      	movs	r1, #4
 800ff5e:	9103      	str	r1, [sp, #12]
 800ff60:	f107 0118 	add.w	r1, r7, #24
 800ff64:	9102      	str	r1, [sp, #8]
 800ff66:	9201      	str	r2, [sp, #4]
 800ff68:	9300      	str	r3, [sp, #0]
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	687a      	ldr	r2, [r7, #4]
 800ff6e:	68b9      	ldr	r1, [r7, #8]
 800ff70:	68f8      	ldr	r0, [r7, #12]
 800ff72:	f7fc fc75 	bl	800c860 <lfs_bd_prog>
 800ff76:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 800ff78:	69bb      	ldr	r3, [r7, #24]
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7fc f9be 	bl	800c2fc <lfs_fromle32>
 800ff80:	4603      	mov	r3, r0
 800ff82:	61bb      	str	r3, [r7, #24]
                if (err) {
 800ff84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d005      	beq.n	800ff96 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 800ff8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff8c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ff90:	d034      	beq.n	800fffc <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 800ff92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff94:	e041      	b.n	801001a <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 800ff96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff98:	3b01      	subs	r3, #1
 800ff9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff9c:	429a      	cmp	r2, r3
 800ff9e:	d01b      	beq.n	800ffd8 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 800ffa0:	69bb      	ldr	r3, [r7, #24]
 800ffa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffa4:	0092      	lsls	r2, r2, #2
 800ffa6:	2104      	movs	r1, #4
 800ffa8:	9103      	str	r1, [sp, #12]
 800ffaa:	f107 0118 	add.w	r1, r7, #24
 800ffae:	9102      	str	r1, [sp, #8]
 800ffb0:	9201      	str	r2, [sp, #4]
 800ffb2:	9300      	str	r3, [sp, #0]
 800ffb4:	2304      	movs	r3, #4
 800ffb6:	687a      	ldr	r2, [r7, #4]
 800ffb8:	2100      	movs	r1, #0
 800ffba:	68f8      	ldr	r0, [r7, #12]
 800ffbc:	f7fc fa0a 	bl	800c3d4 <lfs_bd_read>
 800ffc0:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 800ffc2:	69bb      	ldr	r3, [r7, #24]
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f7fc f999 	bl	800c2fc <lfs_fromle32>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	61bb      	str	r3, [r7, #24]
                    if (err) {
 800ffce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d001      	beq.n	800ffd8 <lfs_ctz_extend+0x1b8>
                        return err;
 800ffd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffd6:	e020      	b.n	801001a <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 800ffd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffda:	3301      	adds	r3, #1
 800ffdc:	633b      	str	r3, [r7, #48]	; 0x30
 800ffde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	d3b1      	bcc.n	800ff4a <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 800ffe6:	6a3a      	ldr	r2, [r7, #32]
 800ffe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffea:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 800ffec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffee:	009a      	lsls	r2, r3, #2
 800fff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fff2:	601a      	str	r2, [r3, #0]
            return 0;
 800fff4:	2300      	movs	r3, #0
 800fff6:	e010      	b.n	801001a <lfs_ctz_extend+0x1fa>
                    goto relocate;
 800fff8:	bf00      	nop
 800fffa:	e000      	b.n	800fffe <lfs_ctz_extend+0x1de>
                        goto relocate;
 800fffc:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800fffe:	6a3b      	ldr	r3, [r7, #32]
 8010000:	4a08      	ldr	r2, [pc, #32]	; (8010024 <lfs_ctz_extend+0x204>)
 8010002:	9200      	str	r2, [sp, #0]
 8010004:	f640 126a 	movw	r2, #2410	; 0x96a
 8010008:	4907      	ldr	r1, [pc, #28]	; (8010028 <lfs_ctz_extend+0x208>)
 801000a:	4808      	ldr	r0, [pc, #32]	; (801002c <lfs_ctz_extend+0x20c>)
 801000c:	f013 ffe4 	bl	8023fd8 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8010010:	68b9      	ldr	r1, [r7, #8]
 8010012:	68f8      	ldr	r0, [r7, #12]
 8010014:	f7fc f9b8 	bl	800c388 <lfs_cache_drop>
    while (true) {
 8010018:	e709      	b.n	800fe2e <lfs_ctz_extend+0xe>
    }
}
 801001a:	4618      	mov	r0, r3
 801001c:	3738      	adds	r7, #56	; 0x38
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}
 8010022:	bf00      	nop
 8010024:	08026f24 	.word	0x08026f24
 8010028:	08026e18 	.word	0x08026e18
 801002c:	08026fcc 	.word	0x08026fcc

08010030 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8010030:	b580      	push	{r7, lr}
 8010032:	b090      	sub	sp, #64	; 0x40
 8010034:	af04      	add	r7, sp, #16
 8010036:	60f8      	str	r0, [r7, #12]
 8010038:	60b9      	str	r1, [r7, #8]
 801003a:	607a      	str	r2, [r7, #4]
 801003c:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 801003e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010040:	2b00      	cmp	r3, #0
 8010042:	d101      	bne.n	8010048 <lfs_ctz_traverse+0x18>
        return 0;
 8010044:	2300      	movs	r3, #0
 8010046:	e06b      	b.n	8010120 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8010048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801004a:	3b01      	subs	r3, #1
 801004c:	61fb      	str	r3, [r7, #28]
 801004e:	f107 031c 	add.w	r3, r7, #28
 8010052:	4619      	mov	r1, r3
 8010054:	68f8      	ldr	r0, [r7, #12]
 8010056:	f7ff fe3f 	bl	800fcd8 <lfs_ctz_index>
 801005a:	4603      	mov	r3, r0
 801005c:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 801005e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010060:	6839      	ldr	r1, [r7, #0]
 8010062:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010064:	4798      	blx	r3
 8010066:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8010068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801006a:	2b00      	cmp	r3, #0
 801006c:	d001      	beq.n	8010072 <lfs_ctz_traverse+0x42>
            return err;
 801006e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010070:	e056      	b.n	8010120 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8010072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010074:	2b00      	cmp	r3, #0
 8010076:	d101      	bne.n	801007c <lfs_ctz_traverse+0x4c>
            return 0;
 8010078:	2300      	movs	r3, #0
 801007a:	e051      	b.n	8010120 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 801007c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801007e:	f003 0301 	and.w	r3, r3, #1
 8010082:	f1c3 0302 	rsb	r3, r3, #2
 8010086:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8010088:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 801008a:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 801008c:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 801008e:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8010090:	9303      	str	r3, [sp, #12]
 8010092:	f107 0314 	add.w	r3, r7, #20
 8010096:	9302      	str	r3, [sp, #8]
 8010098:	2300      	movs	r3, #0
 801009a:	9301      	str	r3, [sp, #4]
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	9300      	str	r3, [sp, #0]
 80100a0:	4613      	mov	r3, r2
 80100a2:	687a      	ldr	r2, [r7, #4]
 80100a4:	68b9      	ldr	r1, [r7, #8]
 80100a6:	68f8      	ldr	r0, [r7, #12]
 80100a8:	f7fc f994 	bl	800c3d4 <lfs_bd_read>
 80100ac:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7fc f923 	bl	800c2fc <lfs_fromle32>
 80100b6:	4603      	mov	r3, r0
 80100b8:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 80100ba:	69bb      	ldr	r3, [r7, #24]
 80100bc:	4618      	mov	r0, r3
 80100be:	f7fc f91d 	bl	800c2fc <lfs_fromle32>
 80100c2:	4603      	mov	r3, r0
 80100c4:	61bb      	str	r3, [r7, #24]
        if (err) {
 80100c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d001      	beq.n	80100d0 <lfs_ctz_traverse+0xa0>
            return err;
 80100cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ce:	e027      	b.n	8010120 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 80100d0:	2300      	movs	r3, #0
 80100d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80100d4:	e012      	b.n	80100fc <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 80100d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100d8:	009b      	lsls	r3, r3, #2
 80100da:	3330      	adds	r3, #48	; 0x30
 80100dc:	443b      	add	r3, r7
 80100de:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80100e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100e4:	4611      	mov	r1, r2
 80100e6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80100e8:	4798      	blx	r3
 80100ea:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 80100ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d001      	beq.n	80100f6 <lfs_ctz_traverse+0xc6>
                return err;
 80100f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f4:	e014      	b.n	8010120 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 80100f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100f8:	3301      	adds	r3, #1
 80100fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80100fc:	6a3b      	ldr	r3, [r7, #32]
 80100fe:	3b01      	subs	r3, #1
 8010100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010102:	429a      	cmp	r2, r3
 8010104:	dbe7      	blt.n	80100d6 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8010106:	6a3b      	ldr	r3, [r7, #32]
 8010108:	3b01      	subs	r3, #1
 801010a:	009b      	lsls	r3, r3, #2
 801010c:	3330      	adds	r3, #48	; 0x30
 801010e:	443b      	add	r3, r7
 8010110:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8010114:	603b      	str	r3, [r7, #0]
        index -= count;
 8010116:	6a3b      	ldr	r3, [r7, #32]
 8010118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801011a:	1ad3      	subs	r3, r2, r3
 801011c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 801011e:	e79e      	b.n	801005e <lfs_ctz_traverse+0x2e>
    }
}
 8010120:	4618      	mov	r0, r3
 8010122:	3730      	adds	r7, #48	; 0x30
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}

08010128 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8010128:	b5b0      	push	{r4, r5, r7, lr}
 801012a:	b09a      	sub	sp, #104	; 0x68
 801012c:	af02      	add	r7, sp, #8
 801012e:	60f8      	str	r0, [r7, #12]
 8010130:	60b9      	str	r1, [r7, #8]
 8010132:	607a      	str	r2, [r7, #4]
 8010134:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	f003 0302 	and.w	r3, r3, #2
 801013c:	2b00      	cmp	r3, #0
 801013e:	d008      	beq.n	8010152 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8010140:	68f8      	ldr	r0, [r7, #12]
 8010142:	f002 f8af 	bl	80122a4 <lfs_fs_forceconsistency>
 8010146:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8010148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801014a:	2b00      	cmp	r3, #0
 801014c:	d001      	beq.n	8010152 <lfs_file_rawopencfg+0x2a>
            return err;
 801014e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010150:	e1a9      	b.n	80104a6 <lfs_file_rawopencfg+0x37e>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010156:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8010158:	683a      	ldr	r2, [r7, #0]
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	2200      	movs	r2, #0
 8010162:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	2200      	movs	r2, #0
 8010168:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	2200      	movs	r2, #0
 801016e:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	f103 0108 	add.w	r1, r3, #8
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	3304      	adds	r3, #4
 801017a:	1d3a      	adds	r2, r7, #4
 801017c:	68f8      	ldr	r0, [r7, #12]
 801017e:	f7fe f871 	bl	800e264 <lfs_dir_find>
 8010182:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8010184:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010186:	2b00      	cmp	r3, #0
 8010188:	da0c      	bge.n	80101a4 <lfs_file_rawopencfg+0x7c>
 801018a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801018c:	f113 0f02 	cmn.w	r3, #2
 8010190:	d105      	bne.n	801019e <lfs_file_rawopencfg+0x76>
 8010192:	68bb      	ldr	r3, [r7, #8]
 8010194:	889b      	ldrh	r3, [r3, #4]
 8010196:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801019a:	4293      	cmp	r3, r2
 801019c:	d102      	bne.n	80101a4 <lfs_file_rawopencfg+0x7c>
        err = tag;
 801019e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80101a0:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80101a2:	e175      	b.n	8010490 <lfs_file_rawopencfg+0x368>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	2201      	movs	r2, #1
 80101a8:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 80101aa:	68b9      	ldr	r1, [r7, #8]
 80101ac:	68f8      	ldr	r0, [r7, #12]
 80101ae:	f7fc ff30 	bl	800d012 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 80101b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80101b4:	f113 0f02 	cmn.w	r3, #2
 80101b8:	d148      	bne.n	801024c <lfs_file_rawopencfg+0x124>
        if (!(flags & LFS_O_CREAT)) {
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d103      	bne.n	80101cc <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 80101c4:	f06f 0301 	mvn.w	r3, #1
 80101c8:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80101ca:	e161      	b.n	8010490 <lfs_file_rawopencfg+0x368>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7f0 f85e 	bl	8000290 <strlen>
 80101d4:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80101dc:	429a      	cmp	r2, r3
 80101de:	d903      	bls.n	80101e8 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 80101e0:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80101e4:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80101e6:	e153      	b.n	8010490 <lfs_file_rawopencfg+0x368>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	f103 0108 	add.w	r1, r3, #8
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	889b      	ldrh	r3, [r3, #4]
 80101f2:	029b      	lsls	r3, r3, #10
 80101f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80101f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80101fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80101fe:	2300      	movs	r3, #0
 8010200:	633b      	str	r3, [r7, #48]	; 0x30
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	889b      	ldrh	r3, [r3, #4]
 8010206:	029a      	lsls	r2, r3, #10
 8010208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801020a:	4313      	orrs	r3, r2
 801020c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010210:	637b      	str	r3, [r7, #52]	; 0x34
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	63bb      	str	r3, [r7, #56]	; 0x38
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	889b      	ldrh	r3, [r3, #4]
 801021a:	029b      	lsls	r3, r3, #10
 801021c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010220:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010224:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010226:	2300      	movs	r3, #0
 8010228:	643b      	str	r3, [r7, #64]	; 0x40
 801022a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801022e:	2303      	movs	r3, #3
 8010230:	68f8      	ldr	r0, [r7, #12]
 8010232:	f7fe ff53 	bl	800f0dc <lfs_dir_commit>
 8010236:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_CREATE, file->id, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));
        if (err) {
 8010238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801023a:	2b00      	cmp	r3, #0
 801023c:	d003      	beq.n	8010246 <lfs_file_rawopencfg+0x11e>
            err = LFS_ERR_NAMETOOLONG;
 801023e:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8010242:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8010244:	e124      	b.n	8010490 <lfs_file_rawopencfg+0x368>
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8010246:	4b9a      	ldr	r3, [pc, #616]	; (80104b0 <lfs_file_rawopencfg+0x388>)
 8010248:	65bb      	str	r3, [r7, #88]	; 0x58
 801024a:	e044      	b.n	80102d6 <lfs_file_rawopencfg+0x1ae>
    } else if (flags & LFS_O_EXCL) {
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010252:	2b00      	cmp	r3, #0
 8010254:	d003      	beq.n	801025e <lfs_file_rawopencfg+0x136>
        err = LFS_ERR_EXIST;
 8010256:	f06f 0310 	mvn.w	r3, #16
 801025a:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 801025c:	e118      	b.n	8010490 <lfs_file_rawopencfg+0x368>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 801025e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010260:	4618      	mov	r0, r3
 8010262:	f7fc fcc5 	bl	800cbf0 <lfs_tag_type3>
 8010266:	4603      	mov	r3, r0
 8010268:	2b01      	cmp	r3, #1
 801026a:	d003      	beq.n	8010274 <lfs_file_rawopencfg+0x14c>
        err = LFS_ERR_ISDIR;
 801026c:	f06f 0314 	mvn.w	r3, #20
 8010270:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8010272:	e10d      	b.n	8010490 <lfs_file_rawopencfg+0x368>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801027a:	2b00      	cmp	r3, #0
 801027c:	d00e      	beq.n	801029c <lfs_file_rawopencfg+0x174>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	889b      	ldrh	r3, [r3, #4]
 8010282:	029b      	lsls	r3, r3, #10
 8010284:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010288:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801028c:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010292:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	631a      	str	r2, [r3, #48]	; 0x30
 801029a:	e01c      	b.n	80102d6 <lfs_file_rawopencfg+0x1ae>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	889b      	ldrh	r3, [r3, #4]
 80102a6:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80102a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80102ac:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80102b0:	68ba      	ldr	r2, [r7, #8]
 80102b2:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80102b4:	9200      	str	r2, [sp, #0]
 80102b6:	4a7f      	ldr	r2, [pc, #508]	; (80104b4 <lfs_file_rawopencfg+0x38c>)
 80102b8:	68f8      	ldr	r0, [r7, #12]
 80102ba:	f7fd f8ad 	bl	800d418 <lfs_dir_get>
 80102be:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 80102c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	da02      	bge.n	80102cc <lfs_file_rawopencfg+0x1a4>
            err = tag;
 80102c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80102c8:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80102ca:	e0e1      	b.n	8010490 <lfs_file_rawopencfg+0x368>
        }
        lfs_ctz_fromle32(&file->ctz);
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	3328      	adds	r3, #40	; 0x28
 80102d0:	4618      	mov	r0, r3
 80102d2:	f7fc fdbf 	bl	800ce54 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80102d6:	2300      	movs	r3, #0
 80102d8:	657b      	str	r3, [r7, #84]	; 0x54
 80102da:	e063      	b.n	80103a4 <lfs_file_rawopencfg+0x27c>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102e0:	f003 0301 	and.w	r3, r3, #1
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d03c      	beq.n	8010362 <lfs_file_rawopencfg+0x23a>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 80102ee:	68bb      	ldr	r3, [r7, #8]
 80102f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102f2:	6859      	ldr	r1, [r3, #4]
 80102f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80102f6:	4613      	mov	r3, r2
 80102f8:	005b      	lsls	r3, r3, #1
 80102fa:	4413      	add	r3, r2
 80102fc:	009b      	lsls	r3, r3, #2
 80102fe:	440b      	add	r3, r1
 8010300:	781b      	ldrb	r3, [r3, #0]
 8010302:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8010306:	051a      	lsls	r2, r3, #20
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	889b      	ldrh	r3, [r3, #4]
 801030c:	029b      	lsls	r3, r3, #10
 801030e:	ea42 0103 	orr.w	r1, r2, r3
 8010312:	68bb      	ldr	r3, [r7, #8]
 8010314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010316:	6858      	ldr	r0, [r3, #4]
 8010318:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801031a:	4613      	mov	r3, r2
 801031c:	005b      	lsls	r3, r3, #1
 801031e:	4413      	add	r3, r2
 8010320:	009b      	lsls	r3, r3, #2
 8010322:	4403      	add	r3, r0
 8010324:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8010326:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801032e:	6859      	ldr	r1, [r3, #4]
 8010330:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010332:	4613      	mov	r3, r2
 8010334:	005b      	lsls	r3, r3, #1
 8010336:	4413      	add	r3, r2
 8010338:	009b      	lsls	r3, r3, #2
 801033a:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801033c:	685b      	ldr	r3, [r3, #4]
 801033e:	9300      	str	r3, [sp, #0]
 8010340:	4603      	mov	r3, r0
 8010342:	4a5d      	ldr	r2, [pc, #372]	; (80104b8 <lfs_file_rawopencfg+0x390>)
 8010344:	4621      	mov	r1, r4
 8010346:	68f8      	ldr	r0, [r7, #12]
 8010348:	f7fd f866 	bl	800d418 <lfs_dir_get>
 801034c:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 801034e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010350:	2b00      	cmp	r3, #0
 8010352:	da06      	bge.n	8010362 <lfs_file_rawopencfg+0x23a>
 8010354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010356:	f113 0f02 	cmn.w	r3, #2
 801035a:	d002      	beq.n	8010362 <lfs_file_rawopencfg+0x23a>
                err = res;
 801035c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801035e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8010360:	e096      	b.n	8010490 <lfs_file_rawopencfg+0x368>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010366:	f003 0302 	and.w	r3, r3, #2
 801036a:	2b00      	cmp	r3, #0
 801036c:	d017      	beq.n	801039e <lfs_file_rawopencfg+0x276>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010372:	6859      	ldr	r1, [r3, #4]
 8010374:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010376:	4613      	mov	r3, r2
 8010378:	005b      	lsls	r3, r3, #1
 801037a:	4413      	add	r3, r2
 801037c:	009b      	lsls	r3, r3, #2
 801037e:	440b      	add	r3, r1
 8010380:	689a      	ldr	r2, [r3, #8]
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010386:	429a      	cmp	r2, r3
 8010388:	d903      	bls.n	8010392 <lfs_file_rawopencfg+0x26a>
                err = LFS_ERR_NOSPC;
 801038a:	f06f 031b 	mvn.w	r3, #27
 801038e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8010390:	e07e      	b.n	8010490 <lfs_file_rawopencfg+0x368>
            }

            file->flags |= LFS_F_DIRTY;
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010396:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801039e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103a0:	3301      	adds	r3, #1
 80103a2:	657b      	str	r3, [r7, #84]	; 0x54
 80103a4:	68bb      	ldr	r3, [r7, #8]
 80103a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80103a8:	689b      	ldr	r3, [r3, #8]
 80103aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d395      	bcc.n	80102dc <lfs_file_rawopencfg+0x1b4>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d005      	beq.n	80103c6 <lfs_file_rawopencfg+0x29e>
        file->cache.buffer = file->cfg->buffer;
 80103ba:	68bb      	ldr	r3, [r7, #8]
 80103bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80103be:	681a      	ldr	r2, [r3, #0]
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	64da      	str	r2, [r3, #76]	; 0x4c
 80103c4:	e010      	b.n	80103e8 <lfs_file_rawopencfg+0x2c0>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80103ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103cc:	4618      	mov	r0, r3
 80103ce:	f7fb ffc4 	bl	800c35a <lfs_malloc>
 80103d2:	4602      	mov	r2, r0
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d103      	bne.n	80103e8 <lfs_file_rawopencfg+0x2c0>
            err = LFS_ERR_NOMEM;
 80103e0:	f06f 030b 	mvn.w	r3, #11
 80103e4:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80103e6:	e053      	b.n	8010490 <lfs_file_rawopencfg+0x368>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	3340      	adds	r3, #64	; 0x40
 80103ec:	4619      	mov	r1, r3
 80103ee:	68f8      	ldr	r0, [r7, #12]
 80103f0:	f7fb ffd9 	bl	800c3a6 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80103f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7fc fbfa 	bl	800cbf0 <lfs_tag_type3>
 80103fc:	4603      	mov	r3, r0
 80103fe:	461a      	mov	r2, r3
 8010400:	f240 2301 	movw	r3, #513	; 0x201
 8010404:	429a      	cmp	r2, r3
 8010406:	d141      	bne.n	801048c <lfs_file_rawopencfg+0x364>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	f06f 0201 	mvn.w	r2, #1
 801040e:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8010410:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010412:	4618      	mov	r0, r3
 8010414:	f7fc fc26 	bl	800cc64 <lfs_tag_size>
 8010418:	4602      	mov	r2, r0
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010422:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	2200      	movs	r2, #0
 8010436:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801043c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010446:	2b00      	cmp	r3, #0
 8010448:	d020      	beq.n	801048c <lfs_file_rawopencfg+0x364>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	889b      	ldrh	r3, [r3, #4]
 8010454:	029c      	lsls	r4, r3, #10
 8010456:	68bb      	ldr	r3, [r7, #8]
 8010458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801045a:	f240 31fe 	movw	r1, #1022	; 0x3fe
 801045e:	4618      	mov	r0, r3
 8010460:	f7fb fedc 	bl	800c21c <lfs_min>
 8010464:	4603      	mov	r3, r0
 8010466:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8010468:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 801046c:	68bb      	ldr	r3, [r7, #8]
 801046e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8010470:	9300      	str	r3, [sp, #0]
 8010472:	4613      	mov	r3, r2
 8010474:	4a0f      	ldr	r2, [pc, #60]	; (80104b4 <lfs_file_rawopencfg+0x38c>)
 8010476:	4629      	mov	r1, r5
 8010478:	68f8      	ldr	r0, [r7, #12]
 801047a:	f7fc ffcd 	bl	800d418 <lfs_dir_get>
 801047e:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8010480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010482:	2b00      	cmp	r3, #0
 8010484:	da02      	bge.n	801048c <lfs_file_rawopencfg+0x364>
                err = res;
 8010486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010488:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 801048a:	e001      	b.n	8010490 <lfs_file_rawopencfg+0x368>
            }
        }
    }

    return 0;
 801048c:	2300      	movs	r3, #0
 801048e:	e00a      	b.n	80104a6 <lfs_file_rawopencfg+0x37e>

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8010490:	68bb      	ldr	r3, [r7, #8]
 8010492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010494:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8010498:	68bb      	ldr	r3, [r7, #8]
 801049a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 801049c:	68b9      	ldr	r1, [r7, #8]
 801049e:	68f8      	ldr	r0, [r7, #12]
 80104a0:	f000 f824 	bl	80104ec <lfs_file_rawclose>
    return err;
 80104a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	3760      	adds	r7, #96	; 0x60
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bdb0      	pop	{r4, r5, r7, pc}
 80104ae:	bf00      	nop
 80104b0:	20100000 	.word	0x20100000
 80104b4:	700ffc00 	.word	0x700ffc00
 80104b8:	7ffffc00 	.word	0x7ffffc00

080104bc <lfs_file_rawopen>:

static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 80104bc:	b580      	push	{r7, lr}
 80104be:	b088      	sub	sp, #32
 80104c0:	af02      	add	r7, sp, #8
 80104c2:	60f8      	str	r0, [r7, #12]
 80104c4:	60b9      	str	r1, [r7, #8]
 80104c6:	607a      	str	r2, [r7, #4]
 80104c8:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 80104ca:	4b07      	ldr	r3, [pc, #28]	; (80104e8 <lfs_file_rawopen+0x2c>)
 80104cc:	9300      	str	r3, [sp, #0]
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	687a      	ldr	r2, [r7, #4]
 80104d2:	68b9      	ldr	r1, [r7, #8]
 80104d4:	68f8      	ldr	r0, [r7, #12]
 80104d6:	f7ff fe27 	bl	8010128 <lfs_file_rawopencfg>
 80104da:	6178      	str	r0, [r7, #20]
    return err;
 80104dc:	697b      	ldr	r3, [r7, #20]
}
 80104de:	4618      	mov	r0, r3
 80104e0:	3718      	adds	r7, #24
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}
 80104e6:	bf00      	nop
 80104e8:	0802ad58 	.word	0x0802ad58

080104ec <lfs_file_rawclose>:

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b084      	sub	sp, #16
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
 80104f4:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 80104f6:	6839      	ldr	r1, [r7, #0]
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f000 f9e5 	bl	80108c8 <lfs_file_rawsync>
 80104fe:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8010500:	6839      	ldr	r1, [r7, #0]
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f7fc fd63 	bl	800cfce <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d104      	bne.n	801051c <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 8010512:	683b      	ldr	r3, [r7, #0]
 8010514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010516:	4618      	mov	r0, r3
 8010518:	f7fb ff2b 	bl	800c372 <lfs_free>
    }

    return err;
 801051c:	68fb      	ldr	r3, [r7, #12]
}
 801051e:	4618      	mov	r0, r3
 8010520:	3710      	adds	r7, #16
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}
	...

08010528 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8010528:	b590      	push	{r4, r7, lr}
 801052a:	b08d      	sub	sp, #52	; 0x34
 801052c:	af06      	add	r7, sp, #24
 801052e:	6078      	str	r0, [r7, #4]
 8010530:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8010532:	f107 030c 	add.w	r3, r7, #12
 8010536:	4619      	mov	r1, r3
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f7fc fdd3 	bl	800d0e4 <lfs_alloc>
 801053e:	6138      	str	r0, [r7, #16]
        if (err) {
 8010540:	693b      	ldr	r3, [r7, #16]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d001      	beq.n	801054a <lfs_file_relocate+0x22>
            return err;
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	e0bb      	b.n	80106c2 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	4619      	mov	r1, r3
 801054e:	6878      	ldr	r0, [r7, #4]
 8010550:	f7fc fa32 	bl	800c9b8 <lfs_bd_erase>
 8010554:	6138      	str	r0, [r7, #16]
        if (err) {
 8010556:	693b      	ldr	r3, [r7, #16]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d006      	beq.n	801056a <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 801055c:	693b      	ldr	r3, [r7, #16]
 801055e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8010562:	f000 809b 	beq.w	801069c <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8010566:	693b      	ldr	r3, [r7, #16]
 8010568:	e0ab      	b.n	80106c2 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 801056a:	2300      	movs	r3, #0
 801056c:	617b      	str	r3, [r7, #20]
 801056e:	e069      	b.n	8010644 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010578:	2b00      	cmp	r3, #0
 801057a:	d027      	beq.n	80105cc <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	f103 0008 	add.w	r0, r3, #8
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	889b      	ldrh	r3, [r3, #4]
 8010594:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8010596:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801059a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801059e:	2101      	movs	r1, #1
 80105a0:	9105      	str	r1, [sp, #20]
 80105a2:	f107 010b 	add.w	r1, r7, #11
 80105a6:	9104      	str	r1, [sp, #16]
 80105a8:	6979      	ldr	r1, [r7, #20]
 80105aa:	9103      	str	r1, [sp, #12]
 80105ac:	9302      	str	r3, [sp, #8]
 80105ae:	4b47      	ldr	r3, [pc, #284]	; (80106cc <lfs_file_relocate+0x1a4>)
 80105b0:	9301      	str	r3, [sp, #4]
 80105b2:	9200      	str	r2, [sp, #0]
 80105b4:	4623      	mov	r3, r4
 80105b6:	2200      	movs	r2, #0
 80105b8:	4601      	mov	r1, r0
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f7fc ff47 	bl	800d44e <lfs_dir_getread>
 80105c0:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 80105c2:	693b      	ldr	r3, [r7, #16]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d01e      	beq.n	8010606 <lfs_file_relocate+0xde>
                    return err;
 80105c8:	693b      	ldr	r3, [r7, #16]
 80105ca:	e07a      	b.n	80106c2 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 80105d2:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 80105d8:	697b      	ldr	r3, [r7, #20]
 80105da:	1ad4      	subs	r4, r2, r3
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105e0:	2201      	movs	r2, #1
 80105e2:	9203      	str	r2, [sp, #12]
 80105e4:	f107 020b 	add.w	r2, r7, #11
 80105e8:	9202      	str	r2, [sp, #8]
 80105ea:	697a      	ldr	r2, [r7, #20]
 80105ec:	9201      	str	r2, [sp, #4]
 80105ee:	9300      	str	r3, [sp, #0]
 80105f0:	4623      	mov	r3, r4
 80105f2:	4602      	mov	r2, r0
 80105f4:	6878      	ldr	r0, [r7, #4]
 80105f6:	f7fb feed 	bl	800c3d4 <lfs_bd_read>
 80105fa:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 80105fc:	693b      	ldr	r3, [r7, #16]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d001      	beq.n	8010606 <lfs_file_relocate+0xde>
                    return err;
 8010602:	693b      	ldr	r3, [r7, #16]
 8010604:	e05d      	b.n	80106c2 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	f103 0110 	add.w	r1, r3, #16
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	2201      	movs	r2, #1
 8010612:	9203      	str	r2, [sp, #12]
 8010614:	f107 020b 	add.w	r2, r7, #11
 8010618:	9202      	str	r2, [sp, #8]
 801061a:	697a      	ldr	r2, [r7, #20]
 801061c:	9201      	str	r2, [sp, #4]
 801061e:	9300      	str	r3, [sp, #0]
 8010620:	2301      	movs	r3, #1
 8010622:	4602      	mov	r2, r0
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	f7fc f91b 	bl	800c860 <lfs_bd_prog>
 801062a:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 801062c:	693b      	ldr	r3, [r7, #16]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d005      	beq.n	801063e <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8010632:	693b      	ldr	r3, [r7, #16]
 8010634:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8010638:	d032      	beq.n	80106a0 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 801063a:	693b      	ldr	r3, [r7, #16]
 801063c:	e041      	b.n	80106c2 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801063e:	697b      	ldr	r3, [r7, #20]
 8010640:	3301      	adds	r3, #1
 8010642:	617b      	str	r3, [r7, #20]
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010648:	697a      	ldr	r2, [r7, #20]
 801064a:	429a      	cmp	r2, r3
 801064c:	d390      	bcc.n	8010570 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	69d9      	ldr	r1, [r3, #28]
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801065a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801065c:	461a      	mov	r2, r3
 801065e:	f013 ffa4 	bl	80245aa <memcpy>
        file->cache.block = lfs->pcache.block;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	691a      	ldr	r2, [r3, #16]
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	695a      	ldr	r2, [r3, #20]
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	699a      	ldr	r2, [r3, #24]
 8010676:	683b      	ldr	r3, [r7, #0]
 8010678:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	3310      	adds	r3, #16
 801067e:	4619      	mov	r1, r3
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f7fb fe90 	bl	800c3a6 <lfs_cache_zero>

        file->block = nblock;
 8010686:	68fa      	ldr	r2, [r7, #12]
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010690:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8010698:	2300      	movs	r3, #0
 801069a:	e012      	b.n	80106c2 <lfs_file_relocate+0x19a>
                goto relocate;
 801069c:	bf00      	nop
 801069e:	e000      	b.n	80106a2 <lfs_file_relocate+0x17a>
                    goto relocate;
 80106a0:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	4a0a      	ldr	r2, [pc, #40]	; (80106d0 <lfs_file_relocate+0x1a8>)
 80106a6:	9200      	str	r2, [sp, #0]
 80106a8:	f640 229b 	movw	r2, #2715	; 0xa9b
 80106ac:	4909      	ldr	r1, [pc, #36]	; (80106d4 <lfs_file_relocate+0x1ac>)
 80106ae:	480a      	ldr	r0, [pc, #40]	; (80106d8 <lfs_file_relocate+0x1b0>)
 80106b0:	f013 fc92 	bl	8023fd8 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	3310      	adds	r3, #16
 80106b8:	4619      	mov	r1, r3
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f7fb fe64 	bl	800c388 <lfs_cache_drop>
    while (true) {
 80106c0:	e737      	b.n	8010532 <lfs_file_relocate+0xa>
    }
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	371c      	adds	r7, #28
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd90      	pop	{r4, r7, pc}
 80106ca:	bf00      	nop
 80106cc:	fff7fc00 	.word	0xfff7fc00
 80106d0:	08026f24 	.word	0x08026f24
 80106d4:	08026e18 	.word	0x08026e18
 80106d8:	08026fcc 	.word	0x08026fcc

080106dc <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 80106dc:	b580      	push	{r7, lr}
 80106de:	b084      	sub	sp, #16
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
 80106e4:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 80106e6:	683b      	ldr	r3, [r7, #0]
 80106e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f7fc fcd8 	bl	800d0a4 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 80106f4:	6839      	ldr	r1, [r7, #0]
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f7ff ff16 	bl	8010528 <lfs_file_relocate>
 80106fc:	60f8      	str	r0, [r7, #12]
    if (err) {
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d001      	beq.n	8010708 <lfs_file_outline+0x2c>
        return err;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	e006      	b.n	8010716 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801070c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8010714:	2300      	movs	r3, #0
}
 8010716:	4618      	mov	r0, r3
 8010718:	3710      	adds	r7, #16
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}
	...

08010720 <lfs_file_flush>:
#endif

#ifndef LFS_READONLY
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8010720:	b590      	push	{r4, r7, lr}
 8010722:	b09f      	sub	sp, #124	; 0x7c
 8010724:	af02      	add	r7, sp, #8
 8010726:	6078      	str	r0, [r7, #4]
 8010728:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801072e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010732:	2b00      	cmp	r3, #0
 8010734:	d011      	beq.n	801075a <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801073a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801073e:	2b00      	cmp	r3, #0
 8010740:	d105      	bne.n	801074e <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	3340      	adds	r3, #64	; 0x40
 8010746:	4619      	mov	r1, r3
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f7fb fe1d 	bl	800c388 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010752:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	631a      	str	r2, [r3, #48]	; 0x30
    }

    if (file->flags & LFS_F_WRITING) {
 801075a:	683b      	ldr	r3, [r7, #0]
 801075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801075e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010762:	2b00      	cmp	r3, #0
 8010764:	f000 80a4 	beq.w	80108b0 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801076c:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010776:	2b00      	cmp	r3, #0
 8010778:	d176      	bne.n	8010868 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 801077a:	f107 030c 	add.w	r3, r7, #12
 801077e:	2254      	movs	r2, #84	; 0x54
 8010780:	2100      	movs	r1, #0
 8010782:	4618      	mov	r0, r3
 8010784:	f013 fdec 	bl	8024360 <memset>
                .ctz.head = file->ctz.head,
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 801078c:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8010792:	63bb      	str	r3, [r7, #56]	; 0x38
 8010794:	2301      	movs	r3, #1
 8010796:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 801079c:	643b      	str	r3, [r7, #64]	; 0x40
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80107a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80107a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	4619      	mov	r1, r3
 80107ae:	6878      	ldr	r0, [r7, #4]
 80107b0:	f7fb fdea 	bl	800c388 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 80107b4:	e02b      	b.n	801080e <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_rawread(lfs, &orig, &data, 1);
 80107b6:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80107ba:	f107 010c 	add.w	r1, r7, #12
 80107be:	2301      	movs	r3, #1
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f000 f90d 	bl	80109e0 <lfs_file_rawread>
 80107c6:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80107c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	da01      	bge.n	80107d2 <lfs_file_flush+0xb2>
                    return res;
 80107ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107d0:	e06f      	b.n	80108b2 <lfs_file_flush+0x192>
                }

                res = lfs_file_rawwrite(lfs, file, &data, 1);
 80107d2:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80107d6:	2301      	movs	r3, #1
 80107d8:	6839      	ldr	r1, [r7, #0]
 80107da:	6878      	ldr	r0, [r7, #4]
 80107dc:	f000 f9f4 	bl	8010bc8 <lfs_file_rawwrite>
 80107e0:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80107e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	da01      	bge.n	80107ec <lfs_file_flush+0xcc>
                    return res;
 80107e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107ea:	e062      	b.n	80108b2 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80107f4:	d00b      	beq.n	801080e <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 80107f6:	f107 030c 	add.w	r3, r7, #12
 80107fa:	3340      	adds	r3, #64	; 0x40
 80107fc:	4619      	mov	r1, r3
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	f7fb fdc2 	bl	800c388 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	4619      	mov	r1, r3
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f7fb fdbd 	bl	800c388 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010816:	429a      	cmp	r2, r3
 8010818:	d3cd      	bcc.n	80107b6 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8010820:	687a      	ldr	r2, [r7, #4]
 8010822:	2301      	movs	r3, #1
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	f7fb ff6b 	bl	800c700 <lfs_bd_flush>
 801082a:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 801082c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801082e:	2b00      	cmp	r3, #0
 8010830:	d026      	beq.n	8010880 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8010832:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010834:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8010838:	d001      	beq.n	801083e <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 801083a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801083c:	e039      	b.n	80108b2 <lfs_file_flush+0x192>
                        goto relocate;
 801083e:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010844:	4a1d      	ldr	r2, [pc, #116]	; (80108bc <lfs_file_flush+0x19c>)
 8010846:	9200      	str	r2, [sp, #0]
 8010848:	f640 22ea 	movw	r2, #2794	; 0xaea
 801084c:	491c      	ldr	r1, [pc, #112]	; (80108c0 <lfs_file_flush+0x1a0>)
 801084e:	481d      	ldr	r0, [pc, #116]	; (80108c4 <lfs_file_flush+0x1a4>)
 8010850:	f013 fbc2 	bl	8023fd8 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8010854:	6839      	ldr	r1, [r7, #0]
 8010856:	6878      	ldr	r0, [r7, #4]
 8010858:	f7ff fe66 	bl	8010528 <lfs_file_relocate>
 801085c:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 801085e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010860:	2b00      	cmp	r3, #0
 8010862:	d0da      	beq.n	801081a <lfs_file_flush+0xfa>
                    return err;
 8010864:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010866:	e024      	b.n	80108b2 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010870:	4619      	mov	r1, r3
 8010872:	4610      	mov	r0, r2
 8010874:	f7fb fcc2 	bl	800c1fc <lfs_max>
 8010878:	4602      	mov	r2, r0
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	635a      	str	r2, [r3, #52]	; 0x34
 801087e:	e000      	b.n	8010882 <lfs_file_flush+0x162>
                break;
 8010880:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8010892:	683b      	ldr	r3, [r7, #0]
 8010894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010896:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 801089e:	683b      	ldr	r3, [r7, #0]
 80108a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80108ae:	635a      	str	r2, [r3, #52]	; 0x34
    }

    return 0;
 80108b0:	2300      	movs	r3, #0
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	3774      	adds	r7, #116	; 0x74
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd90      	pop	{r4, r7, pc}
 80108ba:	bf00      	nop
 80108bc:	08026f24 	.word	0x08026f24
 80108c0:	08026e18 	.word	0x08026e18
 80108c4:	08026fcc 	.word	0x08026fcc

080108c8 <lfs_file_rawsync>:
#endif

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b090      	sub	sp, #64	; 0x40
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d001      	beq.n	80108e2 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 80108de:	2300      	movs	r3, #0
 80108e0:	e07a      	b.n	80109d8 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 80108e2:	6839      	ldr	r1, [r7, #0]
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f7ff ff1b 	bl	8010720 <lfs_file_flush>
 80108ea:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 80108ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d007      	beq.n	8010902 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 80108fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010900:	e06a      	b.n	80109d8 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801090a:	2b00      	cmp	r3, #0
 801090c:	d063      	beq.n	80109d6 <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	3308      	adds	r3, #8
 8010912:	4618      	mov	r0, r3
 8010914:	f7fc f895 	bl	800ca42 <lfs_pair_isnull>
 8010918:	4603      	mov	r3, r0
 801091a:	f083 0301 	eor.w	r3, r3, #1
 801091e:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8010920:	2b00      	cmp	r3, #0
 8010922:	d058      	beq.n	80109d6 <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801092c:	2b00      	cmp	r3, #0
 801092e:	d009      	beq.n	8010944 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8010930:	f240 2301 	movw	r3, #513	; 0x201
 8010934:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801093a:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 801093c:	683b      	ldr	r3, [r7, #0]
 801093e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010940:	637b      	str	r3, [r7, #52]	; 0x34
 8010942:	e014      	b.n	801096e <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8010944:	f240 2302 	movw	r3, #514	; 0x202
 8010948:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 801094a:	683a      	ldr	r2, [r7, #0]
 801094c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010950:	3228      	adds	r2, #40	; 0x28
 8010952:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010956:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 801095a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801095e:	4618      	mov	r0, r3
 8010960:	f7fc fa90 	bl	800ce84 <lfs_ctz_tole32>
            buffer = &ctz;
 8010964:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010968:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 801096a:	2308      	movs	r3, #8
 801096c:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	f103 0108 	add.w	r1, r3, #8
 8010974:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010976:	051a      	lsls	r2, r3, #20
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	889b      	ldrh	r3, [r3, #4]
 801097c:	029b      	lsls	r3, r3, #10
 801097e:	431a      	orrs	r2, r3
 8010980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010982:	4313      	orrs	r3, r2
 8010984:	61bb      	str	r3, [r7, #24]
 8010986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010988:	61fb      	str	r3, [r7, #28]
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	889b      	ldrh	r3, [r3, #4]
 801098e:	029a      	lsls	r2, r3, #10
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010994:	689b      	ldr	r3, [r3, #8]
 8010996:	4313      	orrs	r3, r2
 8010998:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 801099c:	623b      	str	r3, [r7, #32]
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109a2:	685b      	ldr	r3, [r3, #4]
 80109a4:	627b      	str	r3, [r7, #36]	; 0x24
 80109a6:	f107 0218 	add.w	r2, r7, #24
 80109aa:	2302      	movs	r3, #2
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f7fe fb95 	bl	800f0dc <lfs_dir_commit>
 80109b2:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 80109b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d007      	beq.n	80109ca <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80109c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c8:	e006      	b.n	80109d8 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 80109d6:	2300      	movs	r3, #0
}
 80109d8:	4618      	mov	r0, r3
 80109da:	3740      	adds	r7, #64	; 0x40
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}

080109e0 <lfs_file_rawread>:
#endif

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80109e0:	b5b0      	push	{r4, r5, r7, lr}
 80109e2:	b092      	sub	sp, #72	; 0x48
 80109e4:	af06      	add	r7, sp, #24
 80109e6:	60f8      	str	r0, [r7, #12]
 80109e8:	60b9      	str	r1, [r7, #8]
 80109ea:	607a      	str	r2, [r7, #4]
 80109ec:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109f2:	f003 0301 	and.w	r3, r3, #1
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d106      	bne.n	8010a08 <lfs_file_rawread+0x28>
 80109fa:	4b6f      	ldr	r3, [pc, #444]	; (8010bb8 <lfs_file_rawread+0x1d8>)
 80109fc:	4a6f      	ldr	r2, [pc, #444]	; (8010bbc <lfs_file_rawread+0x1dc>)
 80109fe:	f640 3138 	movw	r1, #2872	; 0xb38
 8010a02:	486f      	ldr	r0, [pc, #444]	; (8010bc0 <lfs_file_rawread+0x1e0>)
 8010a04:	f012 fc96 	bl	8023334 <__assert_func>

    uint8_t *data = buffer;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8010a10:	68bb      	ldr	r3, [r7, #8]
 8010a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d009      	beq.n	8010a30 <lfs_file_rawread+0x50>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8010a1c:	68b9      	ldr	r1, [r7, #8]
 8010a1e:	68f8      	ldr	r0, [r7, #12]
 8010a20:	f7ff fe7e 	bl	8010720 <lfs_file_flush>
 8010a24:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8010a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d001      	beq.n	8010a30 <lfs_file_rawread+0x50>
            return err;
 8010a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a2e:	e0bf      	b.n	8010bb0 <lfs_file_rawread+0x1d0>
        }
    }
#endif

    if (file->pos >= file->ctz.size) {
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	d301      	bcc.n	8010a40 <lfs_file_rawread+0x60>
        // eof if past end
        return 0;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	e0b7      	b.n	8010bb0 <lfs_file_rawread+0x1d0>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a48:	1ad3      	subs	r3, r2, r3
 8010a4a:	4619      	mov	r1, r3
 8010a4c:	6838      	ldr	r0, [r7, #0]
 8010a4e:	f7fb fbe5 	bl	800c21c <lfs_min>
 8010a52:	6038      	str	r0, [r7, #0]
    nsize = size;
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	62bb      	str	r3, [r7, #40]	; 0x28

    while (nsize > 0) {
 8010a58:	e0a5      	b.n	8010ba6 <lfs_file_rawread+0x1c6>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8010a5a:	68bb      	ldr	r3, [r7, #8]
 8010a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d006      	beq.n	8010a74 <lfs_file_rawread+0x94>
                file->off == lfs->cfg->block_size) {
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010a6e:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8010a70:	429a      	cmp	r2, r3
 8010a72:	d130      	bne.n	8010ad6 <lfs_file_rawread+0xf6>
            if (!(file->flags & LFS_F_INLINE)) {
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d11c      	bne.n	8010aba <lfs_file_rawread+0xda>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8010a86:	68bb      	ldr	r3, [r7, #8]
 8010a88:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a8e:	68ba      	ldr	r2, [r7, #8]
 8010a90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010a92:	68b9      	ldr	r1, [r7, #8]
 8010a94:	3138      	adds	r1, #56	; 0x38
 8010a96:	68b8      	ldr	r0, [r7, #8]
 8010a98:	303c      	adds	r0, #60	; 0x3c
 8010a9a:	9003      	str	r0, [sp, #12]
 8010a9c:	9102      	str	r1, [sp, #8]
 8010a9e:	9201      	str	r2, [sp, #4]
 8010aa0:	9300      	str	r3, [sp, #0]
 8010aa2:	462b      	mov	r3, r5
 8010aa4:	4622      	mov	r2, r4
 8010aa6:	2100      	movs	r1, #0
 8010aa8:	68f8      	ldr	r0, [r7, #12]
 8010aaa:	f7ff f94d 	bl	800fd48 <lfs_ctz_find>
 8010aae:	6238      	str	r0, [r7, #32]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8010ab0:	6a3b      	ldr	r3, [r7, #32]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d009      	beq.n	8010aca <lfs_file_rawread+0xea>
                    return err;
 8010ab6:	6a3b      	ldr	r3, [r7, #32]
 8010ab8:	e07a      	b.n	8010bb0 <lfs_file_rawread+0x1d0>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8010aba:	68bb      	ldr	r3, [r7, #8]
 8010abc:	f06f 0201 	mvn.w	r2, #1
 8010ac0:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ac6:	68bb      	ldr	r3, [r7, #8]
 8010ac8:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8010aca:	68bb      	ldr	r3, [r7, #8]
 8010acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ace:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8010ad2:	68bb      	ldr	r3, [r7, #8]
 8010ad4:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ada:	69da      	ldr	r2, [r3, #28]
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ae0:	1ad3      	subs	r3, r2, r3
 8010ae2:	4619      	mov	r1, r3
 8010ae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ae6:	f7fb fb99 	bl	800c21c <lfs_min>
 8010aea:	61f8      	str	r0, [r7, #28]
        if (file->flags & LFS_F_INLINE) {
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d026      	beq.n	8010b46 <lfs_file_rawread+0x166>
            int err = lfs_dir_getread(lfs, &file->m,
 8010af8:	68bb      	ldr	r3, [r7, #8]
 8010afa:	f103 0408 	add.w	r4, r3, #8
 8010afe:	68bb      	ldr	r3, [r7, #8]
 8010b00:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010b08:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	889b      	ldrh	r3, [r3, #4]
 8010b0e:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8010b10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010b14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010b18:	68b9      	ldr	r1, [r7, #8]
 8010b1a:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8010b1c:	69f8      	ldr	r0, [r7, #28]
 8010b1e:	9005      	str	r0, [sp, #20]
 8010b20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b22:	9004      	str	r0, [sp, #16]
 8010b24:	9103      	str	r1, [sp, #12]
 8010b26:	9302      	str	r3, [sp, #8]
 8010b28:	4b26      	ldr	r3, [pc, #152]	; (8010bc4 <lfs_file_rawread+0x1e4>)
 8010b2a:	9301      	str	r3, [sp, #4]
 8010b2c:	9200      	str	r2, [sp, #0]
 8010b2e:	462b      	mov	r3, r5
 8010b30:	2200      	movs	r2, #0
 8010b32:	4621      	mov	r1, r4
 8010b34:	68f8      	ldr	r0, [r7, #12]
 8010b36:	f7fc fc8a 	bl	800d44e <lfs_dir_getread>
 8010b3a:	6178      	str	r0, [r7, #20]
                    file->off, data, diff);
            if (err) {
 8010b3c:	697b      	ldr	r3, [r7, #20]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d01d      	beq.n	8010b7e <lfs_file_rawread+0x19e>
                return err;
 8010b42:	697b      	ldr	r3, [r7, #20]
 8010b44:	e034      	b.n	8010bb0 <lfs_file_rawread+0x1d0>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010b50:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 8010b52:	68bb      	ldr	r3, [r7, #8]
 8010b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b56:	68ba      	ldr	r2, [r7, #8]
 8010b58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8010b5a:	69f9      	ldr	r1, [r7, #28]
 8010b5c:	9103      	str	r1, [sp, #12]
 8010b5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010b60:	9102      	str	r1, [sp, #8]
 8010b62:	9201      	str	r2, [sp, #4]
 8010b64:	9300      	str	r3, [sp, #0]
 8010b66:	4623      	mov	r3, r4
 8010b68:	4602      	mov	r2, r0
 8010b6a:	2100      	movs	r1, #0
 8010b6c:	68f8      	ldr	r0, [r7, #12]
 8010b6e:	f7fb fc31 	bl	800c3d4 <lfs_bd_read>
 8010b72:	61b8      	str	r0, [r7, #24]
                    file->block, file->off, data, diff);
            if (err) {
 8010b74:	69bb      	ldr	r3, [r7, #24]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d001      	beq.n	8010b7e <lfs_file_rawread+0x19e>
                return err;
 8010b7a:	69bb      	ldr	r3, [r7, #24]
 8010b7c:	e018      	b.n	8010bb0 <lfs_file_rawread+0x1d0>
            }
        }

        file->pos += diff;
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010b82:	69fb      	ldr	r3, [r7, #28]
 8010b84:	441a      	add	r2, r3
 8010b86:	68bb      	ldr	r3, [r7, #8]
 8010b88:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010b8e:	69fb      	ldr	r3, [r7, #28]
 8010b90:	441a      	add	r2, r3
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8010b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b98:	69fb      	ldr	r3, [r7, #28]
 8010b9a:	4413      	add	r3, r2
 8010b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8010b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ba0:	69fb      	ldr	r3, [r7, #28]
 8010ba2:	1ad3      	subs	r3, r2, r3
 8010ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    while (nsize > 0) {
 8010ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	f47f af56 	bne.w	8010a5a <lfs_file_rawread+0x7a>
    }

    return size;
 8010bae:	683b      	ldr	r3, [r7, #0]
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	3730      	adds	r7, #48	; 0x30
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8010bb8:	08027074 	.word	0x08027074
 8010bbc:	0802ad64 	.word	0x0802ad64
 8010bc0:	08026e18 	.word	0x08026e18
 8010bc4:	fff7fc00 	.word	0xfff7fc00

08010bc8 <lfs_file_rawwrite>:

#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8010bc8:	b5b0      	push	{r4, r5, r7, lr}
 8010bca:	b094      	sub	sp, #80	; 0x50
 8010bcc:	af04      	add	r7, sp, #16
 8010bce:	60f8      	str	r0, [r7, #12]
 8010bd0:	60b9      	str	r1, [r7, #8]
 8010bd2:	607a      	str	r2, [r7, #4]
 8010bd4:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8010bd6:	68bb      	ldr	r3, [r7, #8]
 8010bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bda:	f003 0302 	and.w	r3, r3, #2
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d106      	bne.n	8010bf0 <lfs_file_rawwrite+0x28>
 8010be2:	4b85      	ldr	r3, [pc, #532]	; (8010df8 <lfs_file_rawwrite+0x230>)
 8010be4:	4a85      	ldr	r2, [pc, #532]	; (8010dfc <lfs_file_rawwrite+0x234>)
 8010be6:	f640 3182 	movw	r1, #2946	; 0xb82
 8010bea:	4885      	ldr	r0, [pc, #532]	; (8010e00 <lfs_file_rawwrite+0x238>)
 8010bec:	f012 fba2 	bl	8023334 <__assert_func>

    const uint8_t *data = buffer;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
    lfs_size_t nsize = size;
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	63bb      	str	r3, [r7, #56]	; 0x38

    if (file->flags & LFS_F_READING) {
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d009      	beq.n	8010c18 <lfs_file_rawwrite+0x50>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8010c04:	68b9      	ldr	r1, [r7, #8]
 8010c06:	68f8      	ldr	r0, [r7, #12]
 8010c08:	f7ff fd8a 	bl	8010720 <lfs_file_flush>
 8010c0c:	6378      	str	r0, [r7, #52]	; 0x34
        if (err) {
 8010c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d001      	beq.n	8010c18 <lfs_file_rawwrite+0x50>
            return err;
 8010c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c16:	e166      	b.n	8010ee6 <lfs_file_rawwrite+0x31e>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d009      	beq.n	8010c38 <lfs_file_rawwrite+0x70>
 8010c24:	68bb      	ldr	r3, [r7, #8]
 8010c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	d203      	bcs.n	8010c38 <lfs_file_rawwrite+0x70>
        file->pos = file->ctz.size;
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c34:	68bb      	ldr	r3, [r7, #8]
 8010c36:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	441a      	add	r2, r3
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c44:	429a      	cmp	r2, r3
 8010c46:	d902      	bls.n	8010c4e <lfs_file_rawwrite+0x86>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8010c48:	f06f 031a 	mvn.w	r3, #26
 8010c4c:	e14b      	b.n	8010ee6 <lfs_file_rawwrite+0x31e>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8010c4e:	68bb      	ldr	r3, [r7, #8]
 8010c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d121      	bne.n	8010c9e <lfs_file_rawwrite+0xd6>
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010c5e:	68bb      	ldr	r3, [r7, #8]
 8010c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c62:	429a      	cmp	r2, r3
 8010c64:	d91b      	bls.n	8010c9e <lfs_file_rawwrite+0xd6>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8010c66:	68bb      	ldr	r3, [r7, #8]
 8010c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c6a:	633b      	str	r3, [r7, #48]	; 0x30
        file->pos = file->ctz.size;
 8010c6c:	68bb      	ldr	r3, [r7, #8]
 8010c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8010c74:	e00e      	b.n	8010c94 <lfs_file_rawwrite+0xcc>
            lfs_ssize_t res = lfs_file_rawwrite(lfs, file, &(uint8_t){0}, 1);
 8010c76:	2300      	movs	r3, #0
 8010c78:	75fb      	strb	r3, [r7, #23]
 8010c7a:	f107 0217 	add.w	r2, r7, #23
 8010c7e:	2301      	movs	r3, #1
 8010c80:	68b9      	ldr	r1, [r7, #8]
 8010c82:	68f8      	ldr	r0, [r7, #12]
 8010c84:	f7ff ffa0 	bl	8010bc8 <lfs_file_rawwrite>
 8010c88:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (res < 0) {
 8010c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	da01      	bge.n	8010c94 <lfs_file_rawwrite+0xcc>
                return res;
 8010c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c92:	e128      	b.n	8010ee6 <lfs_file_rawwrite+0x31e>
        while (file->pos < pos) {
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c9a:	429a      	cmp	r2, r3
 8010c9c:	d8eb      	bhi.n	8010c76 <lfs_file_rawwrite+0xae>
            }
        }
    }

    if ((file->flags & LFS_F_INLINE) &&
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	f000 8112 	beq.w	8010ed0 <lfs_file_rawwrite+0x308>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8010cac:	68bb      	ldr	r3, [r7, #8]
 8010cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cb2:	441a      	add	r2, r3
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cb8:	4619      	mov	r1, r3
 8010cba:	4610      	mov	r0, r2
 8010cbc:	f7fb fa9e 	bl	800c1fc <lfs_max>
 8010cc0:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010cc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d004      	beq.n	8010cdc <lfs_file_rawwrite+0x114>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8010cd8:	08db      	lsrs	r3, r3, #3
 8010cda:	e003      	b.n	8010ce4 <lfs_file_rawwrite+0x11c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ce0:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 8010ce2:	08db      	lsrs	r3, r3, #3
 8010ce4:	4619      	mov	r1, r3
 8010ce6:	4610      	mov	r0, r2
 8010ce8:	f7fb fa98 	bl	800c21c <lfs_min>
 8010cec:	4603      	mov	r3, r0
 8010cee:	4619      	mov	r1, r3
 8010cf0:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8010cf4:	f7fb fa92 	bl	800c21c <lfs_min>
 8010cf8:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8010cfa:	429c      	cmp	r4, r3
 8010cfc:	f240 80e8 	bls.w	8010ed0 <lfs_file_rawwrite+0x308>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8010d00:	68b9      	ldr	r1, [r7, #8]
 8010d02:	68f8      	ldr	r0, [r7, #12]
 8010d04:	f7ff fcea 	bl	80106dc <lfs_file_outline>
 8010d08:	62b8      	str	r0, [r7, #40]	; 0x28
        if (err) {
 8010d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	f000 80df 	beq.w	8010ed0 <lfs_file_rawwrite+0x308>
            file->flags |= LFS_F_ERRED;
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d16:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8010d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d20:	e0e1      	b.n	8010ee6 <lfs_file_rawwrite+0x31e>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8010d22:	68bb      	ldr	r3, [r7, #8]
 8010d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d006      	beq.n	8010d3c <lfs_file_rawwrite+0x174>
                file->off == lfs->cfg->block_size) {
 8010d2e:	68bb      	ldr	r3, [r7, #8]
 8010d30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010d36:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8010d38:	429a      	cmp	r2, r3
 8010d3a:	d171      	bne.n	8010e20 <lfs_file_rawwrite+0x258>
            if (!(file->flags & LFS_F_INLINE)) {
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d15d      	bne.n	8010e04 <lfs_file_rawwrite+0x23c>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d12d      	bne.n	8010db0 <lfs_file_rawwrite+0x1e8>
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d029      	beq.n	8010db0 <lfs_file_rawwrite+0x1e8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8010d5c:	68bb      	ldr	r3, [r7, #8]
 8010d5e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8010d62:	68bb      	ldr	r3, [r7, #8]
 8010d64:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8010d66:	68bb      	ldr	r3, [r7, #8]
 8010d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 8010d6a:	68ba      	ldr	r2, [r7, #8]
 8010d6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8010d6e:	3a01      	subs	r2, #1
 8010d70:	68b9      	ldr	r1, [r7, #8]
 8010d72:	3138      	adds	r1, #56	; 0x38
 8010d74:	68b8      	ldr	r0, [r7, #8]
 8010d76:	303c      	adds	r0, #60	; 0x3c
 8010d78:	9003      	str	r0, [sp, #12]
 8010d7a:	9102      	str	r1, [sp, #8]
 8010d7c:	9201      	str	r2, [sp, #4]
 8010d7e:	9300      	str	r3, [sp, #0]
 8010d80:	462b      	mov	r3, r5
 8010d82:	4622      	mov	r2, r4
 8010d84:	2100      	movs	r1, #0
 8010d86:	68f8      	ldr	r0, [r7, #12]
 8010d88:	f7fe ffde 	bl	800fd48 <lfs_ctz_find>
 8010d8c:	6278      	str	r0, [r7, #36]	; 0x24
                    if (err) {
 8010d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d007      	beq.n	8010da4 <lfs_file_rawwrite+0x1dc>
                        file->flags |= LFS_F_ERRED;
 8010d94:	68bb      	ldr	r3, [r7, #8]
 8010d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d98:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8010d9c:	68bb      	ldr	r3, [r7, #8]
 8010d9e:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8010da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da2:	e0a0      	b.n	8010ee6 <lfs_file_rawwrite+0x31e>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8010da4:	68bb      	ldr	r3, [r7, #8]
 8010da6:	3340      	adds	r3, #64	; 0x40
 8010da8:	4619      	mov	r1, r3
 8010daa:	68f8      	ldr	r0, [r7, #12]
 8010dac:	f7fb fafb 	bl	800c3a6 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8010db0:	68f8      	ldr	r0, [r7, #12]
 8010db2:	f7fc f977 	bl	800d0a4 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8010dbc:	68fc      	ldr	r4, [r7, #12]
 8010dbe:	68bb      	ldr	r3, [r7, #8]
 8010dc0:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8010dc2:	68bb      	ldr	r3, [r7, #8]
 8010dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dc6:	68ba      	ldr	r2, [r7, #8]
 8010dc8:	3238      	adds	r2, #56	; 0x38
 8010dca:	68b9      	ldr	r1, [r7, #8]
 8010dcc:	313c      	adds	r1, #60	; 0x3c
 8010dce:	9102      	str	r1, [sp, #8]
 8010dd0:	9201      	str	r2, [sp, #4]
 8010dd2:	9300      	str	r3, [sp, #0]
 8010dd4:	462b      	mov	r3, r5
 8010dd6:	4622      	mov	r2, r4
 8010dd8:	4601      	mov	r1, r0
 8010dda:	68f8      	ldr	r0, [r7, #12]
 8010ddc:	f7ff f820 	bl	800fe20 <lfs_ctz_extend>
 8010de0:	6238      	str	r0, [r7, #32]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8010de2:	6a3b      	ldr	r3, [r7, #32]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d015      	beq.n	8010e14 <lfs_file_rawwrite+0x24c>
                    file->flags |= LFS_F_ERRED;
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8010df0:	68bb      	ldr	r3, [r7, #8]
 8010df2:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8010df4:	6a3b      	ldr	r3, [r7, #32]
 8010df6:	e076      	b.n	8010ee6 <lfs_file_rawwrite+0x31e>
 8010df8:	080270a4 	.word	0x080270a4
 8010dfc:	0802ad78 	.word	0x0802ad78
 8010e00:	08026e18 	.word	0x08026e18
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8010e04:	68bb      	ldr	r3, [r7, #8]
 8010e06:	f06f 0201 	mvn.w	r2, #1
 8010e0a:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8010e0c:	68bb      	ldr	r3, [r7, #8]
 8010e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e18:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8010e1c:	68bb      	ldr	r3, [r7, #8]
 8010e1e:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e24:	69da      	ldr	r2, [r3, #28]
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e2a:	1ad3      	subs	r3, r2, r3
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010e30:	f7fb f9f4 	bl	800c21c <lfs_min>
 8010e34:	61f8      	str	r0, [r7, #28]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8010e36:	68bb      	ldr	r3, [r7, #8]
 8010e38:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8010e3c:	68fc      	ldr	r4, [r7, #12]
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e42:	68ba      	ldr	r2, [r7, #8]
 8010e44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8010e46:	69f9      	ldr	r1, [r7, #28]
 8010e48:	9103      	str	r1, [sp, #12]
 8010e4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010e4c:	9102      	str	r1, [sp, #8]
 8010e4e:	9201      	str	r2, [sp, #4]
 8010e50:	9300      	str	r3, [sp, #0]
 8010e52:	2301      	movs	r3, #1
 8010e54:	4622      	mov	r2, r4
 8010e56:	4601      	mov	r1, r0
 8010e58:	68f8      	ldr	r0, [r7, #12]
 8010e5a:	f7fb fd01 	bl	800c860 <lfs_bd_prog>
 8010e5e:	61b8      	str	r0, [r7, #24]
                    file->block, file->off, data, diff);
            if (err) {
 8010e60:	69bb      	ldr	r3, [r7, #24]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d01c      	beq.n	8010ea0 <lfs_file_rawwrite+0x2d8>
                if (err == LFS_ERR_CORRUPT) {
 8010e66:	69bb      	ldr	r3, [r7, #24]
 8010e68:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8010e6c:	d007      	beq.n	8010e7e <lfs_file_rawwrite+0x2b6>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8010e6e:	68bb      	ldr	r3, [r7, #8]
 8010e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e72:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8010e76:	68bb      	ldr	r3, [r7, #8]
 8010e78:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8010e7a:	69bb      	ldr	r3, [r7, #24]
 8010e7c:	e033      	b.n	8010ee6 <lfs_file_rawwrite+0x31e>
                    goto relocate;
 8010e7e:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8010e80:	68b9      	ldr	r1, [r7, #8]
 8010e82:	68f8      	ldr	r0, [r7, #12]
 8010e84:	f7ff fb50 	bl	8010528 <lfs_file_relocate>
 8010e88:	61b8      	str	r0, [r7, #24]
            if (err) {
 8010e8a:	69bb      	ldr	r3, [r7, #24]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d0d2      	beq.n	8010e36 <lfs_file_rawwrite+0x26e>
                file->flags |= LFS_F_ERRED;
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e94:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8010e9c:	69bb      	ldr	r3, [r7, #24]
 8010e9e:	e022      	b.n	8010ee6 <lfs_file_rawwrite+0x31e>
            break;
 8010ea0:	bf00      	nop
            }
        }

        file->pos += diff;
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ea6:	69fb      	ldr	r3, [r7, #28]
 8010ea8:	441a      	add	r2, r3
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010eb2:	69fb      	ldr	r3, [r7, #28]
 8010eb4:	441a      	add	r2, r3
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8010eba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010ebc:	69fb      	ldr	r3, [r7, #28]
 8010ebe:	4413      	add	r3, r2
 8010ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        nsize -= diff;
 8010ec2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010ec4:	69fb      	ldr	r3, [r7, #28]
 8010ec6:	1ad3      	subs	r3, r2, r3
 8010ec8:	63bb      	str	r3, [r7, #56]	; 0x38

        lfs_alloc_ack(lfs);
 8010eca:	68f8      	ldr	r0, [r7, #12]
 8010ecc:	f7fc f8ea 	bl	800d0a4 <lfs_alloc_ack>
    while (nsize > 0) {
 8010ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	f47f af25 	bne.w	8010d22 <lfs_file_rawwrite+0x15a>
    }

    file->flags &= ~LFS_F_ERRED;
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010edc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	631a      	str	r2, [r3, #48]	; 0x30
    return size;
 8010ee4:	683b      	ldr	r3, [r7, #0]
}
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	3740      	adds	r7, #64	; 0x40
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bdb0      	pop	{r4, r5, r7, pc}
 8010eee:	bf00      	nop

08010ef0 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b086      	sub	sp, #24
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	60f8      	str	r0, [r7, #12]
 8010ef8:	60b9      	str	r1, [r7, #8]
 8010efa:	607a      	str	r2, [r7, #4]
 8010efc:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f02:	617b      	str	r3, [r7, #20]
    if (whence == LFS_SEEK_SET) {
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d102      	bne.n	8010f10 <lfs_file_rawseek+0x20>
        npos = off;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	617b      	str	r3, [r7, #20]
 8010f0e:	e013      	b.n	8010f38 <lfs_file_rawseek+0x48>
    } else if (whence == LFS_SEEK_CUR) {
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	2b01      	cmp	r3, #1
 8010f14:	d105      	bne.n	8010f22 <lfs_file_rawseek+0x32>
        npos = file->pos + off;
 8010f16:	68bb      	ldr	r3, [r7, #8]
 8010f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	4413      	add	r3, r2
 8010f1e:	617b      	str	r3, [r7, #20]
 8010f20:	e00a      	b.n	8010f38 <lfs_file_rawseek+0x48>
    } else if (whence == LFS_SEEK_END) {
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	2b02      	cmp	r3, #2
 8010f26:	d107      	bne.n	8010f38 <lfs_file_rawseek+0x48>
        npos = lfs_file_rawsize(lfs, file) + off;
 8010f28:	68b9      	ldr	r1, [r7, #8]
 8010f2a:	68f8      	ldr	r0, [r7, #12]
 8010f2c:	f000 f825 	bl	8010f7a <lfs_file_rawsize>
 8010f30:	4602      	mov	r2, r0
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	4413      	add	r3, r2
 8010f36:	617b      	str	r3, [r7, #20]
    }

    if (npos > lfs->file_max) {
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f3c:	697a      	ldr	r2, [r7, #20]
 8010f3e:	429a      	cmp	r2, r3
 8010f40:	d902      	bls.n	8010f48 <lfs_file_rawseek+0x58>
        // file position out of range
        return LFS_ERR_INVAL;
 8010f42:	f06f 0315 	mvn.w	r3, #21
 8010f46:	e014      	b.n	8010f72 <lfs_file_rawseek+0x82>
    }

    if (file->pos == npos) {
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f4c:	697a      	ldr	r2, [r7, #20]
 8010f4e:	429a      	cmp	r2, r3
 8010f50:	d101      	bne.n	8010f56 <lfs_file_rawseek+0x66>
        // noop - position has not changed
        return npos;
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	e00d      	b.n	8010f72 <lfs_file_rawseek+0x82>
    }

#ifndef LFS_READONLY
    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8010f56:	68b9      	ldr	r1, [r7, #8]
 8010f58:	68f8      	ldr	r0, [r7, #12]
 8010f5a:	f7ff fbe1 	bl	8010720 <lfs_file_flush>
 8010f5e:	6138      	str	r0, [r7, #16]
    if (err) {
 8010f60:	693b      	ldr	r3, [r7, #16]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d001      	beq.n	8010f6a <lfs_file_rawseek+0x7a>
        return err;
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	e003      	b.n	8010f72 <lfs_file_rawseek+0x82>
    }
#endif

    // update pos
    file->pos = npos;
 8010f6a:	68bb      	ldr	r3, [r7, #8]
 8010f6c:	697a      	ldr	r2, [r7, #20]
 8010f6e:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 8010f70:	697b      	ldr	r3, [r7, #20]
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	3718      	adds	r7, #24
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bd80      	pop	{r7, pc}

08010f7a <lfs_file_rawsize>:
    }

    return 0;
}

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 8010f7a:	b580      	push	{r7, lr}
 8010f7c:	b082      	sub	sp, #8
 8010f7e:	af00      	add	r7, sp, #0
 8010f80:	6078      	str	r0, [r7, #4]
 8010f82:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d009      	beq.n	8010fa4 <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010f94:	683b      	ldr	r3, [r7, #0]
 8010f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f98:	4619      	mov	r1, r3
 8010f9a:	4610      	mov	r0, r2
 8010f9c:	f7fb f92e 	bl	800c1fc <lfs_max>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	e001      	b.n	8010fa8 <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8010fa4:	683b      	ldr	r3, [r7, #0]
 8010fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8010fa8:	4618      	mov	r0, r3
 8010faa:	3708      	adds	r7, #8
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd80      	pop	{r7, pc}

08010fb0 <lfs_rawstat>:


/// General fs operations ///
static int lfs_rawstat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b08e      	sub	sp, #56	; 0x38
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	60f8      	str	r0, [r7, #12]
 8010fb8:	60b9      	str	r1, [r7, #8]
 8010fba:	607a      	str	r2, [r7, #4]
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8010fbc:	f107 0208 	add.w	r2, r7, #8
 8010fc0:	f107 0114 	add.w	r1, r7, #20
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	68f8      	ldr	r0, [r7, #12]
 8010fc8:	f7fd f94c 	bl	800e264 <lfs_dir_find>
 8010fcc:	6378      	str	r0, [r7, #52]	; 0x34
    if (tag < 0) {
 8010fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	da01      	bge.n	8010fd8 <lfs_rawstat+0x28>
        return (int)tag;
 8010fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fd6:	e00c      	b.n	8010ff2 <lfs_rawstat+0x42>
    }

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 8010fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7fb fe32 	bl	800cc44 <lfs_tag_id>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	461a      	mov	r2, r3
 8010fe4:	f107 0114 	add.w	r1, r7, #20
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	68f8      	ldr	r0, [r7, #12]
 8010fec:	f7fd f876 	bl	800e0dc <lfs_dir_getinfo>
 8010ff0:	4603      	mov	r3, r0
}
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	3738      	adds	r7, #56	; 0x38
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	bd80      	pop	{r7, pc}
	...

08010ffc <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b08c      	sub	sp, #48	; 0x30
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
 8011004:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	683a      	ldr	r2, [r7, #0]
 801100a:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 801100c:	2300      	movs	r3, #0
 801100e:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011014:	695b      	ldr	r3, [r3, #20]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d106      	bne.n	8011028 <lfs_init+0x2c>
 801101a:	4b92      	ldr	r3, [pc, #584]	; (8011264 <lfs_init+0x268>)
 801101c:	4a92      	ldr	r2, [pc, #584]	; (8011268 <lfs_init+0x26c>)
 801101e:	f640 51a4 	movw	r1, #3492	; 0xda4
 8011022:	4892      	ldr	r0, [pc, #584]	; (801126c <lfs_init+0x270>)
 8011024:	f012 f986 	bl	8023334 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801102c:	699b      	ldr	r3, [r3, #24]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d106      	bne.n	8011040 <lfs_init+0x44>
 8011032:	4b8f      	ldr	r3, [pc, #572]	; (8011270 <lfs_init+0x274>)
 8011034:	4a8c      	ldr	r2, [pc, #560]	; (8011268 <lfs_init+0x26c>)
 8011036:	f640 51a5 	movw	r1, #3493	; 0xda5
 801103a:	488c      	ldr	r0, [pc, #560]	; (801126c <lfs_init+0x270>)
 801103c:	f012 f97a 	bl	8023334 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011046:	2b00      	cmp	r3, #0
 8011048:	d106      	bne.n	8011058 <lfs_init+0x5c>
 801104a:	4b8a      	ldr	r3, [pc, #552]	; (8011274 <lfs_init+0x278>)
 801104c:	4a86      	ldr	r2, [pc, #536]	; (8011268 <lfs_init+0x26c>)
 801104e:	f640 51a6 	movw	r1, #3494	; 0xda6
 8011052:	4886      	ldr	r0, [pc, #536]	; (801126c <lfs_init+0x270>)
 8011054:	f012 f96e 	bl	8023334 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801105c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801105e:	687a      	ldr	r2, [r7, #4]
 8011060:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8011062:	6952      	ldr	r2, [r2, #20]
 8011064:	fbb3 f1f2 	udiv	r1, r3, r2
 8011068:	fb01 f202 	mul.w	r2, r1, r2
 801106c:	1a9b      	subs	r3, r3, r2
 801106e:	2b00      	cmp	r3, #0
 8011070:	d006      	beq.n	8011080 <lfs_init+0x84>
 8011072:	4b81      	ldr	r3, [pc, #516]	; (8011278 <lfs_init+0x27c>)
 8011074:	4a7c      	ldr	r2, [pc, #496]	; (8011268 <lfs_init+0x26c>)
 8011076:	f640 51aa 	movw	r1, #3498	; 0xdaa
 801107a:	487c      	ldr	r0, [pc, #496]	; (801126c <lfs_init+0x270>)
 801107c:	f012 f95a 	bl	8023334 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011086:	687a      	ldr	r2, [r7, #4]
 8011088:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801108a:	6992      	ldr	r2, [r2, #24]
 801108c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011090:	fb01 f202 	mul.w	r2, r1, r2
 8011094:	1a9b      	subs	r3, r3, r2
 8011096:	2b00      	cmp	r3, #0
 8011098:	d006      	beq.n	80110a8 <lfs_init+0xac>
 801109a:	4b78      	ldr	r3, [pc, #480]	; (801127c <lfs_init+0x280>)
 801109c:	4a72      	ldr	r2, [pc, #456]	; (8011268 <lfs_init+0x26c>)
 801109e:	f640 51ab 	movw	r1, #3499	; 0xdab
 80110a2:	4872      	ldr	r0, [pc, #456]	; (801126c <lfs_init+0x270>)
 80110a4:	f012 f946 	bl	8023334 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80110ac:	69db      	ldr	r3, [r3, #28]
 80110ae:	687a      	ldr	r2, [r7, #4]
 80110b0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80110b2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80110b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80110b8:	fb01 f202 	mul.w	r2, r1, r2
 80110bc:	1a9b      	subs	r3, r3, r2
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d006      	beq.n	80110d0 <lfs_init+0xd4>
 80110c2:	4b6f      	ldr	r3, [pc, #444]	; (8011280 <lfs_init+0x284>)
 80110c4:	4a68      	ldr	r2, [pc, #416]	; (8011268 <lfs_init+0x26c>)
 80110c6:	f640 51ac 	movw	r1, #3500	; 0xdac
 80110ca:	4868      	ldr	r0, [pc, #416]	; (801126c <lfs_init+0x270>)
 80110cc:	f012 f932 	bl	8023334 <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80110d4:	69db      	ldr	r3, [r3, #28]
 80110d6:	3b08      	subs	r3, #8
 80110d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80110dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80110e0:	4618      	mov	r0, r3
 80110e2:	f7fb f8d2 	bl	800c28a <lfs_npw2>
 80110e6:	4603      	mov	r3, r0
 80110e8:	009a      	lsls	r2, r3, #2
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80110ee:	69db      	ldr	r3, [r3, #28]
 80110f0:	429a      	cmp	r2, r3
 80110f2:	d906      	bls.n	8011102 <lfs_init+0x106>
 80110f4:	4b63      	ldr	r3, [pc, #396]	; (8011284 <lfs_init+0x288>)
 80110f6:	4a5c      	ldr	r2, [pc, #368]	; (8011268 <lfs_init+0x26c>)
 80110f8:	f640 51af 	movw	r1, #3503	; 0xdaf
 80110fc:	485b      	ldr	r0, [pc, #364]	; (801126c <lfs_init+0x270>)
 80110fe:	f012 f919 	bl	8023334 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011108:	2b00      	cmp	r3, #0
 801110a:	d106      	bne.n	801111a <lfs_init+0x11e>
 801110c:	4b5e      	ldr	r3, [pc, #376]	; (8011288 <lfs_init+0x28c>)
 801110e:	4a56      	ldr	r2, [pc, #344]	; (8011268 <lfs_init+0x26c>)
 8011110:	f640 51b8 	movw	r1, #3512	; 0xdb8
 8011114:	4855      	ldr	r0, [pc, #340]	; (801126c <lfs_init+0x270>)
 8011116:	f012 f90d 	bl	8023334 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011120:	2b00      	cmp	r3, #0
 8011122:	d005      	beq.n	8011130 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	60da      	str	r2, [r3, #12]
 801112e:	e010      	b.n	8011152 <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011136:	4618      	mov	r0, r3
 8011138:	f7fb f90f 	bl	800c35a <lfs_malloc>
 801113c:	4602      	mov	r2, r0
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	68db      	ldr	r3, [r3, #12]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d103      	bne.n	8011152 <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 801114a:	f06f 030b 	mvn.w	r3, #11
 801114e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8011150:	e0fd      	b.n	801134e <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011158:	2b00      	cmp	r3, #0
 801115a:	d005      	beq.n	8011168 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	61da      	str	r2, [r3, #28]
 8011166:	e010      	b.n	801118a <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801116c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801116e:	4618      	mov	r0, r3
 8011170:	f7fb f8f3 	bl	800c35a <lfs_malloc>
 8011174:	4602      	mov	r2, r0
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	69db      	ldr	r3, [r3, #28]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d103      	bne.n	801118a <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 8011182:	f06f 030b 	mvn.w	r3, #11
 8011186:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8011188:	e0e1      	b.n	801134e <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	4619      	mov	r1, r3
 801118e:	6878      	ldr	r0, [r7, #4]
 8011190:	f7fb f909 	bl	800c3a6 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	3310      	adds	r3, #16
 8011198:	4619      	mov	r1, r3
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f7fb f903 	bl	800c3a6 <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80111a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d106      	bne.n	80111b8 <lfs_init+0x1bc>
 80111aa:	4b38      	ldr	r3, [pc, #224]	; (801128c <lfs_init+0x290>)
 80111ac:	4a2e      	ldr	r2, [pc, #184]	; (8011268 <lfs_init+0x26c>)
 80111ae:	f640 51d6 	movw	r1, #3542	; 0xdd6
 80111b2:	482e      	ldr	r0, [pc, #184]	; (801126c <lfs_init+0x270>)
 80111b4:	f012 f8be 	bl	8023334 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80111bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111be:	f003 0307 	and.w	r3, r3, #7
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d106      	bne.n	80111d4 <lfs_init+0x1d8>
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80111ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111cc:	f003 0303 	and.w	r3, r3, #3
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d006      	beq.n	80111e2 <lfs_init+0x1e6>
 80111d4:	4b2e      	ldr	r3, [pc, #184]	; (8011290 <lfs_init+0x294>)
 80111d6:	4a24      	ldr	r2, [pc, #144]	; (8011268 <lfs_init+0x26c>)
 80111d8:	f640 51d7 	movw	r1, #3543	; 0xdd7
 80111dc:	4823      	ldr	r0, [pc, #140]	; (801126c <lfs_init+0x270>)
 80111de:	f012 f8a9 	bl	8023334 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80111e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d005      	beq.n	80111f8 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80111f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	665a      	str	r2, [r3, #100]	; 0x64
 80111f6:	e010      	b.n	801121a <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80111fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111fe:	4618      	mov	r0, r3
 8011200:	f7fb f8ab 	bl	800c35a <lfs_malloc>
 8011204:	4602      	mov	r2, r0
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801120e:	2b00      	cmp	r3, #0
 8011210:	d103      	bne.n	801121a <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 8011212:	f06f 030b 	mvn.w	r3, #11
 8011216:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8011218:	e099      	b.n	801134e <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801121e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011220:	2bff      	cmp	r3, #255	; 0xff
 8011222:	d906      	bls.n	8011232 <lfs_init+0x236>
 8011224:	4b1b      	ldr	r3, [pc, #108]	; (8011294 <lfs_init+0x298>)
 8011226:	4a10      	ldr	r2, [pc, #64]	; (8011268 <lfs_init+0x26c>)
 8011228:	f640 51e4 	movw	r1, #3556	; 0xde4
 801122c:	480f      	ldr	r0, [pc, #60]	; (801126c <lfs_init+0x270>)
 801122e:	f012 f881 	bl	8023334 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011240:	2b00      	cmp	r3, #0
 8011242:	d102      	bne.n	801124a <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	22ff      	movs	r2, #255	; 0xff
 8011248:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011250:	2b00      	cmp	r3, #0
 8011252:	da23      	bge.n	801129c <lfs_init+0x2a0>
 8011254:	4b10      	ldr	r3, [pc, #64]	; (8011298 <lfs_init+0x29c>)
 8011256:	4a04      	ldr	r2, [pc, #16]	; (8011268 <lfs_init+0x26c>)
 8011258:	f640 51ea 	movw	r1, #3562	; 0xdea
 801125c:	4803      	ldr	r0, [pc, #12]	; (801126c <lfs_init+0x270>)
 801125e:	f012 f869 	bl	8023334 <__assert_func>
 8011262:	bf00      	nop
 8011264:	080270d4 	.word	0x080270d4
 8011268:	0802ad8c 	.word	0x0802ad8c
 801126c:	08026e18 	.word	0x08026e18
 8011270:	080270f0 	.word	0x080270f0
 8011274:	0802710c 	.word	0x0802710c
 8011278:	08027128 	.word	0x08027128
 801127c:	08027158 	.word	0x08027158
 8011280:	08027188 	.word	0x08027188
 8011284:	080271bc 	.word	0x080271bc
 8011288:	08027208 	.word	0x08027208
 801128c:	08027224 	.word	0x08027224
 8011290:	08027244 	.word	0x08027244
 8011294:	08027298 	.word	0x08027298
 8011298:	080272b4 	.word	0x080272b4
    lfs->file_max = lfs->cfg->file_max;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d103      	bne.n	80112b6 <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80112b4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112bc:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80112c0:	4293      	cmp	r3, r2
 80112c2:	d906      	bls.n	80112d2 <lfs_init+0x2d6>
 80112c4:	4b26      	ldr	r3, [pc, #152]	; (8011360 <lfs_init+0x364>)
 80112c6:	4a27      	ldr	r2, [pc, #156]	; (8011364 <lfs_init+0x368>)
 80112c8:	f44f 615f 	mov.w	r1, #3568	; 0xdf0
 80112cc:	4826      	ldr	r0, [pc, #152]	; (8011368 <lfs_init+0x36c>)
 80112ce:	f012 f831 	bl	8023334 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d103      	bne.n	80112ec <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80112ea:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112f6:	69db      	ldr	r3, [r3, #28]
 80112f8:	429a      	cmp	r2, r3
 80112fa:	d906      	bls.n	801130a <lfs_init+0x30e>
 80112fc:	4b1b      	ldr	r3, [pc, #108]	; (801136c <lfs_init+0x370>)
 80112fe:	4a19      	ldr	r2, [pc, #100]	; (8011364 <lfs_init+0x368>)
 8011300:	f640 51f6 	movw	r1, #3574	; 0xdf6
 8011304:	4818      	ldr	r0, [pc, #96]	; (8011368 <lfs_init+0x36c>)
 8011306:	f012 f815 	bl	8023334 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011310:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011318:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2200      	movs	r2, #0
 801131e:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2200      	movs	r2, #0
 8011324:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	333c      	adds	r3, #60	; 0x3c
 801132a:	2200      	movs	r2, #0
 801132c:	601a      	str	r2, [r3, #0]
 801132e:	605a      	str	r2, [r3, #4]
 8011330:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	3330      	adds	r3, #48	; 0x30
 8011336:	2200      	movs	r2, #0
 8011338:	601a      	str	r2, [r3, #0]
 801133a:	605a      	str	r2, [r3, #4]
 801133c:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	3348      	adds	r3, #72	; 0x48
 8011342:	2200      	movs	r2, #0
 8011344:	601a      	str	r2, [r3, #0]
 8011346:	605a      	str	r2, [r3, #4]
 8011348:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 801134a:	2300      	movs	r3, #0
 801134c:	e003      	b.n	8011356 <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f000 f80e 	bl	8011370 <lfs_deinit>
    return err;
 8011354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011356:	4618      	mov	r0, r3
 8011358:	3730      	adds	r7, #48	; 0x30
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}
 801135e:	bf00      	nop
 8011360:	080272d8 	.word	0x080272d8
 8011364:	0802ad8c 	.word	0x0802ad8c
 8011368:	08026e18 	.word	0x08026e18
 801136c:	080272f4 	.word	0x080272f4

08011370 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8011370:	b580      	push	{r7, lr}
 8011372:	b082      	sub	sp, #8
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801137e:	2b00      	cmp	r3, #0
 8011380:	d104      	bne.n	801138c <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	68db      	ldr	r3, [r3, #12]
 8011386:	4618      	mov	r0, r3
 8011388:	f7fa fff3 	bl	800c372 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011392:	2b00      	cmp	r3, #0
 8011394:	d104      	bne.n	80113a0 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	69db      	ldr	r3, [r3, #28]
 801139a:	4618      	mov	r0, r3
 801139c:	f7fa ffe9 	bl	800c372 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80113a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d104      	bne.n	80113b4 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80113ae:	4618      	mov	r0, r3
 80113b0:	f7fa ffdf 	bl	800c372 <lfs_free>
    }

    return 0;
 80113b4:	2300      	movs	r3, #0
}
 80113b6:	4618      	mov	r0, r3
 80113b8:	3708      	adds	r7, #8
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd80      	pop	{r7, pc}
	...

080113c0 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b0a0      	sub	sp, #128	; 0x80
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
 80113c8:	6039      	str	r1, [r7, #0]
    int err = 0;
 80113ca:	2300      	movs	r3, #0
 80113cc:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 80113ce:	6839      	ldr	r1, [r7, #0]
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	f7ff fe13 	bl	8010ffc <lfs_init>
 80113d6:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80113d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d001      	beq.n	80113e2 <lfs_rawformat+0x22>
            return err;
 80113de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80113e0:	e082      	b.n	80114e8 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80113ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113ec:	461a      	mov	r2, r3
 80113ee:	2100      	movs	r1, #0
 80113f0:	f012 ffb6 	bl	8024360 <memset>
        lfs->free.off = 0;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	2200      	movs	r2, #0
 80113f8:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80113fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011400:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011406:	6a1b      	ldr	r3, [r3, #32]
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8011408:	4619      	mov	r1, r3
 801140a:	4610      	mov	r0, r2
 801140c:	f7fa ff06 	bl	800c21c <lfs_min>
 8011410:	4602      	mov	r2, r0
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	2200      	movs	r2, #0
 801141a:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f7fb fe41 	bl	800d0a4 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8011422:	f107 030c 	add.w	r3, r7, #12
 8011426:	4619      	mov	r1, r3
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f7fd fa07 	bl	800e83c <lfs_dir_alloc>
 801142e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8011430:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011432:	2b00      	cmp	r3, #0
 8011434:	d14f      	bne.n	80114d6 <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 8011436:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801143a:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011440:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8011442:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011448:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 801144a:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8011450:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 8011456:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 801145c:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 801145e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011462:	4618      	mov	r0, r3
 8011464:	f7fb fd5e 	bl	800cf24 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8011468:	4b21      	ldr	r3, [pc, #132]	; (80114f0 <lfs_rawformat+0x130>)
 801146a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801146c:	2300      	movs	r3, #0
 801146e:	653b      	str	r3, [r7, #80]	; 0x50
 8011470:	4b20      	ldr	r3, [pc, #128]	; (80114f4 <lfs_rawformat+0x134>)
 8011472:	657b      	str	r3, [r7, #84]	; 0x54
 8011474:	4b20      	ldr	r3, [pc, #128]	; (80114f8 <lfs_rawformat+0x138>)
 8011476:	65bb      	str	r3, [r7, #88]	; 0x58
 8011478:	4b20      	ldr	r3, [pc, #128]	; (80114fc <lfs_rawformat+0x13c>)
 801147a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801147c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011480:	663b      	str	r3, [r7, #96]	; 0x60
 8011482:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8011486:	f107 010c 	add.w	r1, r7, #12
 801148a:	2303      	movs	r3, #3
 801148c:	6878      	ldr	r0, [r7, #4]
 801148e:	f7fd fe25 	bl	800f0dc <lfs_dir_commit>
 8011492:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8011494:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011496:	2b00      	cmp	r3, #0
 8011498:	d11f      	bne.n	80114da <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 801149a:	2300      	movs	r3, #0
 801149c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 80114a0:	f107 010c 	add.w	r1, r7, #12
 80114a4:	2300      	movs	r3, #0
 80114a6:	2200      	movs	r2, #0
 80114a8:	6878      	ldr	r0, [r7, #4]
 80114aa:	f7fd fe17 	bl	800f0dc <lfs_dir_commit>
 80114ae:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80114b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d113      	bne.n	80114de <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 80114b6:	2300      	movs	r3, #0
 80114b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80114ba:	2301      	movs	r3, #1
 80114bc:	633b      	str	r3, [r7, #48]	; 0x30
 80114be:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80114c2:	f107 030c 	add.w	r3, r7, #12
 80114c6:	4619      	mov	r1, r3
 80114c8:	6878      	ldr	r0, [r7, #4]
 80114ca:	f7fc fdb9 	bl	800e040 <lfs_dir_fetch>
 80114ce:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80114d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	e004      	b.n	80114e0 <lfs_rawformat+0x120>
            goto cleanup;
 80114d6:	bf00      	nop
 80114d8:	e002      	b.n	80114e0 <lfs_rawformat+0x120>
            goto cleanup;
 80114da:	bf00      	nop
 80114dc:	e000      	b.n	80114e0 <lfs_rawformat+0x120>
            goto cleanup;
 80114de:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 80114e0:	6878      	ldr	r0, [r7, #4]
 80114e2:	f7ff ff45 	bl	8011370 <lfs_deinit>
    return err;
 80114e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 80114e8:	4618      	mov	r0, r3
 80114ea:	3780      	adds	r7, #128	; 0x80
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}
 80114f0:	40100000 	.word	0x40100000
 80114f4:	0ff00008 	.word	0x0ff00008
 80114f8:	08027324 	.word	0x08027324
 80114fc:	20100018 	.word	0x20100018

08011500 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8011500:	b580      	push	{r7, lr}
 8011502:	b09c      	sub	sp, #112	; 0x70
 8011504:	af04      	add	r7, sp, #16
 8011506:	6078      	str	r0, [r7, #4]
 8011508:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 801150a:	6839      	ldr	r1, [r7, #0]
 801150c:	6878      	ldr	r0, [r7, #4]
 801150e:	f7ff fd75 	bl	8010ffc <lfs_init>
 8011512:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 8011514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011516:	2b00      	cmp	r3, #0
 8011518:	d001      	beq.n	801151e <lfs_rawmount+0x1e>
        return err;
 801151a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801151c:	e149      	b.n	80117b2 <lfs_rawmount+0x2b2>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 801151e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011522:	2220      	movs	r2, #32
 8011524:	2100      	movs	r1, #0
 8011526:	4618      	mov	r0, r3
 8011528:	f012 ff1a 	bl	8024360 <memset>
 801152c:	2301      	movs	r3, #1
 801152e:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 8011530:	2300      	movs	r3, #0
 8011532:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 8011534:	e0dc      	b.n	80116f0 <lfs_rawmount+0x1f0>
        if (cycle >= lfs->cfg->block_count/2) {
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801153a:	6a1b      	ldr	r3, [r3, #32]
 801153c:	085b      	lsrs	r3, r3, #1
 801153e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011540:	429a      	cmp	r2, r3
 8011542:	d303      	bcc.n	801154c <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 8011544:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8011548:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 801154a:	e12e      	b.n	80117aa <lfs_rawmount+0x2aa>
        }
        cycle += 1;
 801154c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801154e:	3301      	adds	r3, #1
 8011550:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	627b      	str	r3, [r7, #36]	; 0x24
 8011556:	4b99      	ldr	r3, [pc, #612]	; (80117bc <lfs_rawmount+0x2bc>)
 8011558:	62bb      	str	r3, [r7, #40]	; 0x28
 801155a:	2308      	movs	r3, #8
 801155c:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 801155e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011562:	f103 0218 	add.w	r2, r3, #24
 8011566:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801156a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801156e:	9303      	str	r3, [sp, #12]
 8011570:	4b93      	ldr	r3, [pc, #588]	; (80117c0 <lfs_rawmount+0x2c0>)
 8011572:	9302      	str	r3, [sp, #8]
 8011574:	2300      	movs	r3, #0
 8011576:	9301      	str	r3, [sp, #4]
 8011578:	4b92      	ldr	r3, [pc, #584]	; (80117c4 <lfs_rawmount+0x2c4>)
 801157a:	9300      	str	r3, [sp, #0]
 801157c:	4b92      	ldr	r3, [pc, #584]	; (80117c8 <lfs_rawmount+0x2c8>)
 801157e:	6878      	ldr	r0, [r7, #4]
 8011580:	f7fc f9f2 	bl	800d968 <lfs_dir_fetchmatch>
 8011584:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8011586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011588:	2b00      	cmp	r3, #0
 801158a:	da02      	bge.n	8011592 <lfs_rawmount+0x92>
            err = tag;
 801158c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801158e:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8011590:	e10b      	b.n	80117aa <lfs_rawmount+0x2aa>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8011592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011594:	2b00      	cmp	r3, #0
 8011596:	f000 809e 	beq.w	80116d6 <lfs_rawmount+0x1d6>
 801159a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801159c:	4618      	mov	r0, r3
 801159e:	f7fb fb04 	bl	800cbaa <lfs_tag_isdelete>
 80115a2:	4603      	mov	r3, r0
 80115a4:	f083 0301 	eor.w	r3, r3, #1
 80115a8:	b2db      	uxtb	r3, r3
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	f000 8093 	beq.w	80116d6 <lfs_rawmount+0x1d6>
            // update root
            lfs->root[0] = dir.pair[0];
 80115b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 80115b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 80115bc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80115c0:	f107 030c 	add.w	r3, r7, #12
 80115c4:	9300      	str	r3, [sp, #0]
 80115c6:	4b81      	ldr	r3, [pc, #516]	; (80117cc <lfs_rawmount+0x2cc>)
 80115c8:	4a7f      	ldr	r2, [pc, #508]	; (80117c8 <lfs_rawmount+0x2c8>)
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	f7fb ff24 	bl	800d418 <lfs_dir_get>
 80115d0:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 80115d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	da02      	bge.n	80115de <lfs_rawmount+0xde>
                err = tag;
 80115d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115da:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80115dc:	e0e5      	b.n	80117aa <lfs_rawmount+0x2aa>
            }
            lfs_superblock_fromle32(&superblock);
 80115de:	f107 030c 	add.w	r3, r7, #12
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7fb fc66 	bl	800ceb4 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	0c1b      	lsrs	r3, r3, #16
 80115ec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 80115f6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80115fa:	2b02      	cmp	r3, #2
 80115fc:	d103      	bne.n	8011606 <lfs_rawmount+0x106>
 80115fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8011602:	2b00      	cmp	r3, #0
 8011604:	d011      	beq.n	801162a <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 8011606:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 801160a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801160e:	4970      	ldr	r1, [pc, #448]	; (80117d0 <lfs_rawmount+0x2d0>)
 8011610:	9101      	str	r1, [sp, #4]
 8011612:	9300      	str	r3, [sp, #0]
 8011614:	4613      	mov	r3, r2
 8011616:	f640 6291 	movw	r2, #3729	; 0xe91
 801161a:	496e      	ldr	r1, [pc, #440]	; (80117d4 <lfs_rawmount+0x2d4>)
 801161c:	486e      	ldr	r0, [pc, #440]	; (80117d8 <lfs_rawmount+0x2d8>)
 801161e:	f012 fcdb 	bl	8023fd8 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 8011622:	f06f 0315 	mvn.w	r3, #21
 8011626:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8011628:	e054      	b.n	80116d4 <lfs_rawmount+0x1d4>
            }

            // check superblock configuration
            if (superblock.name_max) {
 801162a:	69bb      	ldr	r3, [r7, #24]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d018      	beq.n	8011662 <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 8011630:	69ba      	ldr	r2, [r7, #24]
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011636:	429a      	cmp	r2, r3
 8011638:	d910      	bls.n	801165c <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 801163a:	69ba      	ldr	r2, [r7, #24]
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011640:	4963      	ldr	r1, [pc, #396]	; (80117d0 <lfs_rawmount+0x2d0>)
 8011642:	9101      	str	r1, [sp, #4]
 8011644:	9300      	str	r3, [sp, #0]
 8011646:	4613      	mov	r3, r2
 8011648:	f640 629a 	movw	r2, #3738	; 0xe9a
 801164c:	4961      	ldr	r1, [pc, #388]	; (80117d4 <lfs_rawmount+0x2d4>)
 801164e:	4863      	ldr	r0, [pc, #396]	; (80117dc <lfs_rawmount+0x2dc>)
 8011650:	f012 fcc2 	bl	8023fd8 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8011654:	f06f 0315 	mvn.w	r3, #21
 8011658:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 801165a:	e03b      	b.n	80116d4 <lfs_rawmount+0x1d4>
                }

                lfs->name_max = superblock.name_max;
 801165c:	69ba      	ldr	r2, [r7, #24]
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 8011662:	69fb      	ldr	r3, [r7, #28]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d018      	beq.n	801169a <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 8011668:	69fa      	ldr	r2, [r7, #28]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801166e:	429a      	cmp	r2, r3
 8011670:	d910      	bls.n	8011694 <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8011672:	69fa      	ldr	r2, [r7, #28]
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011678:	4955      	ldr	r1, [pc, #340]	; (80117d0 <lfs_rawmount+0x2d0>)
 801167a:	9101      	str	r1, [sp, #4]
 801167c:	9300      	str	r3, [sp, #0]
 801167e:	4613      	mov	r3, r2
 8011680:	f640 62a5 	movw	r2, #3749	; 0xea5
 8011684:	4953      	ldr	r1, [pc, #332]	; (80117d4 <lfs_rawmount+0x2d4>)
 8011686:	4856      	ldr	r0, [pc, #344]	; (80117e0 <lfs_rawmount+0x2e0>)
 8011688:	f012 fca6 	bl	8023fd8 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 801168c:	f06f 0315 	mvn.w	r3, #21
 8011690:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8011692:	e01f      	b.n	80116d4 <lfs_rawmount+0x1d4>
                }

                lfs->file_max = superblock.file_max;
 8011694:	69fa      	ldr	r2, [r7, #28]
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 801169a:	6a3b      	ldr	r3, [r7, #32]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d01a      	beq.n	80116d6 <lfs_rawmount+0x1d6>
                if (superblock.attr_max > lfs->attr_max) {
 80116a0:	6a3a      	ldr	r2, [r7, #32]
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116a6:	429a      	cmp	r2, r3
 80116a8:	d910      	bls.n	80116cc <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 80116aa:	6a3a      	ldr	r2, [r7, #32]
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116b0:	4947      	ldr	r1, [pc, #284]	; (80117d0 <lfs_rawmount+0x2d0>)
 80116b2:	9101      	str	r1, [sp, #4]
 80116b4:	9300      	str	r3, [sp, #0]
 80116b6:	4613      	mov	r3, r2
 80116b8:	f44f 626b 	mov.w	r2, #3760	; 0xeb0
 80116bc:	4945      	ldr	r1, [pc, #276]	; (80117d4 <lfs_rawmount+0x2d4>)
 80116be:	4849      	ldr	r0, [pc, #292]	; (80117e4 <lfs_rawmount+0x2e4>)
 80116c0:	f012 fc8a 	bl	8023fd8 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 80116c4:	f06f 0315 	mvn.w	r3, #21
 80116c8:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 80116ca:	e003      	b.n	80116d4 <lfs_rawmount+0x1d4>
                }

                lfs->attr_max = superblock.attr_max;
 80116cc:	6a3a      	ldr	r2, [r7, #32]
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	675a      	str	r2, [r3, #116]	; 0x74
 80116d2:	e000      	b.n	80116d6 <lfs_rawmount+0x1d6>
            goto cleanup;
 80116d4:	e069      	b.n	80117aa <lfs_rawmount+0x2aa>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80116dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80116e0:	4619      	mov	r1, r3
 80116e2:	6878      	ldr	r0, [r7, #4]
 80116e4:	f7fc fcc8 	bl	800e078 <lfs_dir_getgstate>
 80116e8:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 80116ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d15b      	bne.n	80117a8 <lfs_rawmount+0x2a8>
    while (!lfs_pair_isnull(dir.tail)) {
 80116f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80116f4:	3318      	adds	r3, #24
 80116f6:	4618      	mov	r0, r3
 80116f8:	f7fb f9a3 	bl	800ca42 <lfs_pair_isnull>
 80116fc:	4603      	mov	r3, r0
 80116fe:	f083 0301 	eor.w	r3, r3, #1
 8011702:	b2db      	uxtb	r3, r3
 8011704:	2b00      	cmp	r3, #0
 8011706:	f47f af16 	bne.w	8011536 <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	3320      	adds	r3, #32
 801170e:	4618      	mov	r0, r3
 8011710:	f7fb f997 	bl	800ca42 <lfs_pair_isnull>
 8011714:	4603      	mov	r3, r0
 8011716:	2b00      	cmp	r3, #0
 8011718:	d003      	beq.n	8011722 <lfs_rawmount+0x222>
        err = LFS_ERR_INVAL;
 801171a:	f06f 0315 	mvn.w	r3, #21
 801171e:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8011720:	e043      	b.n	80117aa <lfs_rawmount+0x2aa>
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	3330      	adds	r3, #48	; 0x30
 8011726:	4618      	mov	r0, r3
 8011728:	f7fb fae2 	bl	800ccf0 <lfs_gstate_iszero>
 801172c:	4603      	mov	r3, r0
 801172e:	f083 0301 	eor.w	r3, r3, #1
 8011732:	b2db      	uxtb	r3, r3
 8011734:	2b00      	cmp	r3, #0
 8011736:	d010      	beq.n	801175a <lfs_rawmount+0x25a>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011740:	687a      	ldr	r2, [r7, #4]
 8011742:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8011744:	4822      	ldr	r0, [pc, #136]	; (80117d0 <lfs_rawmount+0x2d0>)
 8011746:	9002      	str	r0, [sp, #8]
 8011748:	9201      	str	r2, [sp, #4]
 801174a:	9300      	str	r3, [sp, #0]
 801174c:	460b      	mov	r3, r1
 801174e:	f640 62c9 	movw	r2, #3785	; 0xec9
 8011752:	4920      	ldr	r1, [pc, #128]	; (80117d4 <lfs_rawmount+0x2d4>)
 8011754:	4824      	ldr	r0, [pc, #144]	; (80117e8 <lfs_rawmount+0x2e8>)
 8011756:	f012 fc3f 	bl	8023fd8 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801175e:	4618      	mov	r0, r3
 8011760:	f7fb fa15 	bl	800cb8e <lfs_tag_isvalid>
 8011764:	4603      	mov	r3, r0
 8011766:	f083 0301 	eor.w	r3, r3, #1
 801176a:	b2db      	uxtb	r3, r3
 801176c:	461a      	mov	r2, r3
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011772:	441a      	add	r2, r3
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	687a      	ldr	r2, [r7, #4]
 801177c:	333c      	adds	r3, #60	; 0x3c
 801177e:	3230      	adds	r2, #48	; 0x30
 8011780:	ca07      	ldmia	r2, {r0, r1, r2}
 8011782:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801178a:	687a      	ldr	r2, [r7, #4]
 801178c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801178e:	6a12      	ldr	r2, [r2, #32]
 8011790:	fbb3 f1f2 	udiv	r1, r3, r2
 8011794:	fb01 f202 	mul.w	r2, r1, r2
 8011798:	1a9a      	subs	r2, r3, r2
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 801179e:	6878      	ldr	r0, [r7, #4]
 80117a0:	f7fb fc8f 	bl	800d0c2 <lfs_alloc_drop>

    return 0;
 80117a4:	2300      	movs	r3, #0
 80117a6:	e004      	b.n	80117b2 <lfs_rawmount+0x2b2>
            goto cleanup;
 80117a8:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 80117aa:	6878      	ldr	r0, [r7, #4]
 80117ac:	f000 f81e 	bl	80117ec <lfs_rawunmount>
    return err;
 80117b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80117b2:	4618      	mov	r0, r3
 80117b4:	3760      	adds	r7, #96	; 0x60
 80117b6:	46bd      	mov	sp, r7
 80117b8:	bd80      	pop	{r7, pc}
 80117ba:	bf00      	nop
 80117bc:	08027324 	.word	0x08027324
 80117c0:	0800e1d1 	.word	0x0800e1d1
 80117c4:	0ff00008 	.word	0x0ff00008
 80117c8:	7ffffc00 	.word	0x7ffffc00
 80117cc:	20100018 	.word	0x20100018
 80117d0:	08026f24 	.word	0x08026f24
 80117d4:	08026e18 	.word	0x08026e18
 80117d8:	08027330 	.word	0x08027330
 80117dc:	0802735c 	.word	0x0802735c
 80117e0:	08027390 	.word	0x08027390
 80117e4:	080273c4 	.word	0x080273c4
 80117e8:	080273f8 	.word	0x080273f8

080117ec <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 80117ec:	b580      	push	{r7, lr}
 80117ee:	b082      	sub	sp, #8
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 80117f4:	6878      	ldr	r0, [r7, #4]
 80117f6:	f7ff fdbb 	bl	8011370 <lfs_deinit>
 80117fa:	4603      	mov	r3, r0
}
 80117fc:	4618      	mov	r0, r3
 80117fe:	3708      	adds	r7, #8
 8011800:	46bd      	mov	sp, r7
 8011802:	bd80      	pop	{r7, pc}

08011804 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8011804:	b590      	push	{r4, r7, lr}
 8011806:	b09d      	sub	sp, #116	; 0x74
 8011808:	af04      	add	r7, sp, #16
 801180a:	60f8      	str	r0, [r7, #12]
 801180c:	60b9      	str	r1, [r7, #8]
 801180e:	607a      	str	r2, [r7, #4]
 8011810:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8011812:	f107 0318 	add.w	r3, r7, #24
 8011816:	2220      	movs	r2, #32
 8011818:	2100      	movs	r1, #0
 801181a:	4618      	mov	r0, r3
 801181c:	f012 fda0 	bl	8024360 <memset>
 8011820:	2301      	movs	r3, #1
 8011822:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 8011824:	2300      	movs	r3, #0
 8011826:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8011828:	e0a7      	b.n	801197a <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801182e:	6a1b      	ldr	r3, [r3, #32]
 8011830:	085b      	lsrs	r3, r3, #1
 8011832:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011834:	429a      	cmp	r2, r3
 8011836:	d302      	bcc.n	801183e <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 8011838:	f06f 0353 	mvn.w	r3, #83	; 0x53
 801183c:	e102      	b.n	8011a44 <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 801183e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011840:	3301      	adds	r3, #1
 8011842:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 8011844:	2300      	movs	r3, #0
 8011846:	65bb      	str	r3, [r7, #88]	; 0x58
 8011848:	e013      	b.n	8011872 <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 801184a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801184c:	3306      	adds	r3, #6
 801184e:	009b      	lsls	r3, r3, #2
 8011850:	3360      	adds	r3, #96	; 0x60
 8011852:	443b      	add	r3, r7
 8011854:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8011858:	68bb      	ldr	r3, [r7, #8]
 801185a:	4611      	mov	r1, r2
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	4798      	blx	r3
 8011860:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 8011862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011864:	2b00      	cmp	r3, #0
 8011866:	d001      	beq.n	801186c <lfs_fs_rawtraverse+0x68>
                return err;
 8011868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801186a:	e0eb      	b.n	8011a44 <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 801186c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801186e:	3301      	adds	r3, #1
 8011870:	65bb      	str	r3, [r7, #88]	; 0x58
 8011872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011874:	2b01      	cmp	r3, #1
 8011876:	dde8      	ble.n	801184a <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8011878:	f107 0318 	add.w	r3, r7, #24
 801187c:	f103 0218 	add.w	r2, r3, #24
 8011880:	f107 0318 	add.w	r3, r7, #24
 8011884:	4619      	mov	r1, r3
 8011886:	68f8      	ldr	r0, [r7, #12]
 8011888:	f7fc fbda 	bl	800e040 <lfs_dir_fetch>
 801188c:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 801188e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011890:	2b00      	cmp	r3, #0
 8011892:	d001      	beq.n	8011898 <lfs_fs_rawtraverse+0x94>
            return err;
 8011894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011896:	e0d5      	b.n	8011a44 <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8011898:	2300      	movs	r3, #0
 801189a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801189e:	e067      	b.n	8011970 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 80118a0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80118a4:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80118a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80118aa:	f043 0308 	orr.w	r3, r3, #8
 80118ae:	f107 0118 	add.w	r1, r7, #24
 80118b2:	f107 0210 	add.w	r2, r7, #16
 80118b6:	9200      	str	r2, [sp, #0]
 80118b8:	4a64      	ldr	r2, [pc, #400]	; (8011a4c <lfs_fs_rawtraverse+0x248>)
 80118ba:	68f8      	ldr	r0, [r7, #12]
 80118bc:	f7fb fdac 	bl	800d418 <lfs_dir_get>
 80118c0:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 80118c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	da05      	bge.n	80118d4 <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 80118c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118ca:	f113 0f02 	cmn.w	r3, #2
 80118ce:	d049      	beq.n	8011964 <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 80118d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118d2:	e0b7      	b.n	8011a44 <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 80118d4:	f107 0310 	add.w	r3, r7, #16
 80118d8:	4618      	mov	r0, r3
 80118da:	f7fb fabb 	bl	800ce54 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80118de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118e0:	4618      	mov	r0, r3
 80118e2:	f7fb f985 	bl	800cbf0 <lfs_tag_type3>
 80118e6:	4603      	mov	r3, r0
 80118e8:	461a      	mov	r2, r3
 80118ea:	f240 2302 	movw	r3, #514	; 0x202
 80118ee:	429a      	cmp	r2, r3
 80118f0:	d113      	bne.n	801191a <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 80118f2:	68f9      	ldr	r1, [r7, #12]
 80118f4:	6938      	ldr	r0, [r7, #16]
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	687a      	ldr	r2, [r7, #4]
 80118fa:	9202      	str	r2, [sp, #8]
 80118fc:	68ba      	ldr	r2, [r7, #8]
 80118fe:	9201      	str	r2, [sp, #4]
 8011900:	9300      	str	r3, [sp, #0]
 8011902:	4603      	mov	r3, r0
 8011904:	460a      	mov	r2, r1
 8011906:	2100      	movs	r1, #0
 8011908:	68f8      	ldr	r0, [r7, #12]
 801190a:	f7fe fb91 	bl	8010030 <lfs_ctz_traverse>
 801190e:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8011910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011912:	2b00      	cmp	r3, #0
 8011914:	d027      	beq.n	8011966 <lfs_fs_rawtraverse+0x162>
                    return err;
 8011916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011918:	e094      	b.n	8011a44 <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 801191a:	78fb      	ldrb	r3, [r7, #3]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d022      	beq.n	8011966 <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8011920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011922:	4618      	mov	r0, r3
 8011924:	f7fb f964 	bl	800cbf0 <lfs_tag_type3>
 8011928:	4603      	mov	r3, r0
            } else if (includeorphans &&
 801192a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801192e:	d11a      	bne.n	8011966 <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 8011930:	2300      	movs	r3, #0
 8011932:	653b      	str	r3, [r7, #80]	; 0x50
 8011934:	e012      	b.n	801195c <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 8011936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011938:	009b      	lsls	r3, r3, #2
 801193a:	f107 0210 	add.w	r2, r7, #16
 801193e:	4413      	add	r3, r2
 8011940:	681a      	ldr	r2, [r3, #0]
 8011942:	68bb      	ldr	r3, [r7, #8]
 8011944:	4611      	mov	r1, r2
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	4798      	blx	r3
 801194a:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 801194c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801194e:	2b00      	cmp	r3, #0
 8011950:	d001      	beq.n	8011956 <lfs_fs_rawtraverse+0x152>
                        return err;
 8011952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011954:	e076      	b.n	8011a44 <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 8011956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011958:	3301      	adds	r3, #1
 801195a:	653b      	str	r3, [r7, #80]	; 0x50
 801195c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801195e:	2b01      	cmp	r3, #1
 8011960:	dde9      	ble.n	8011936 <lfs_fs_rawtraverse+0x132>
 8011962:	e000      	b.n	8011966 <lfs_fs_rawtraverse+0x162>
                    continue;
 8011964:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8011966:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801196a:	3301      	adds	r3, #1
 801196c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8011970:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011972:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8011976:	429a      	cmp	r2, r3
 8011978:	d392      	bcc.n	80118a0 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 801197a:	f107 0318 	add.w	r3, r7, #24
 801197e:	3318      	adds	r3, #24
 8011980:	4618      	mov	r0, r3
 8011982:	f7fb f85e 	bl	800ca42 <lfs_pair_isnull>
 8011986:	4603      	mov	r3, r0
 8011988:	f083 0301 	eor.w	r3, r3, #1
 801198c:	b2db      	uxtb	r3, r3
 801198e:	2b00      	cmp	r3, #0
 8011990:	f47f af4b 	bne.w	801182a <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011998:	64fb      	str	r3, [r7, #76]	; 0x4c
 801199a:	e04f      	b.n	8011a3c <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 801199c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801199e:	799b      	ldrb	r3, [r3, #6]
 80119a0:	2b01      	cmp	r3, #1
 80119a2:	d147      	bne.n	8011a34 <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 80119a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d01d      	beq.n	80119ec <lfs_fs_rawtraverse+0x1e8>
 80119b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d117      	bne.n	80119ec <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80119bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119be:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80119c2:	68f8      	ldr	r0, [r7, #12]
 80119c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119c6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80119c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119cc:	687a      	ldr	r2, [r7, #4]
 80119ce:	9202      	str	r2, [sp, #8]
 80119d0:	68ba      	ldr	r2, [r7, #8]
 80119d2:	9201      	str	r2, [sp, #4]
 80119d4:	9300      	str	r3, [sp, #0]
 80119d6:	4623      	mov	r3, r4
 80119d8:	4602      	mov	r2, r0
 80119da:	68f8      	ldr	r0, [r7, #12]
 80119dc:	f7fe fb28 	bl	8010030 <lfs_ctz_traverse>
 80119e0:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 80119e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d001      	beq.n	80119ec <lfs_fs_rawtraverse+0x1e8>
                return err;
 80119e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119ea:	e02b      	b.n	8011a44 <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 80119ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d01e      	beq.n	8011a36 <lfs_fs_rawtraverse+0x232>
 80119f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d118      	bne.n	8011a36 <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8011a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a06:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8011a0a:	68f8      	ldr	r0, [r7, #12]
 8011a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a0e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8011a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a14:	687a      	ldr	r2, [r7, #4]
 8011a16:	9202      	str	r2, [sp, #8]
 8011a18:	68ba      	ldr	r2, [r7, #8]
 8011a1a:	9201      	str	r2, [sp, #4]
 8011a1c:	9300      	str	r3, [sp, #0]
 8011a1e:	4623      	mov	r3, r4
 8011a20:	4602      	mov	r2, r0
 8011a22:	68f8      	ldr	r0, [r7, #12]
 8011a24:	f7fe fb04 	bl	8010030 <lfs_ctz_traverse>
 8011a28:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 8011a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d002      	beq.n	8011a36 <lfs_fs_rawtraverse+0x232>
                return err;
 8011a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a32:	e007      	b.n	8011a44 <lfs_fs_rawtraverse+0x240>
            continue;
 8011a34:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8011a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d1ac      	bne.n	801199c <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 8011a42:	2300      	movs	r3, #0
}
 8011a44:	4618      	mov	r0, r3
 8011a46:	3764      	adds	r7, #100	; 0x64
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd90      	pop	{r4, r7, pc}
 8011a4c:	700ffc00 	.word	0x700ffc00

08011a50 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b086      	sub	sp, #24
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	60f8      	str	r0, [r7, #12]
 8011a58:	60b9      	str	r1, [r7, #8]
 8011a5a:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2200      	movs	r2, #0
 8011a60:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	2201      	movs	r2, #1
 8011a66:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8011a68:	2300      	movs	r3, #0
 8011a6a:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 8011a6c:	e024      	b.n	8011ab8 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011a72:	6a1b      	ldr	r3, [r3, #32]
 8011a74:	085b      	lsrs	r3, r3, #1
 8011a76:	697a      	ldr	r2, [r7, #20]
 8011a78:	429a      	cmp	r2, r3
 8011a7a:	d302      	bcc.n	8011a82 <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 8011a7c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8011a80:	e027      	b.n	8011ad2 <lfs_fs_pred+0x82>
        }
        cycle += 1;
 8011a82:	697b      	ldr	r3, [r7, #20]
 8011a84:	3301      	adds	r3, #1
 8011a86:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	3318      	adds	r3, #24
 8011a8c:	68b9      	ldr	r1, [r7, #8]
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f7fa fff2 	bl	800ca78 <lfs_pair_cmp>
 8011a94:	4603      	mov	r3, r0
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d101      	bne.n	8011a9e <lfs_fs_pred+0x4e>
            return 0;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	e019      	b.n	8011ad2 <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	3318      	adds	r3, #24
 8011aa2:	461a      	mov	r2, r3
 8011aa4:	6879      	ldr	r1, [r7, #4]
 8011aa6:	68f8      	ldr	r0, [r7, #12]
 8011aa8:	f7fc faca 	bl	800e040 <lfs_dir_fetch>
 8011aac:	6138      	str	r0, [r7, #16]
        if (err) {
 8011aae:	693b      	ldr	r3, [r7, #16]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d001      	beq.n	8011ab8 <lfs_fs_pred+0x68>
            return err;
 8011ab4:	693b      	ldr	r3, [r7, #16]
 8011ab6:	e00c      	b.n	8011ad2 <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	3318      	adds	r3, #24
 8011abc:	4618      	mov	r0, r3
 8011abe:	f7fa ffc0 	bl	800ca42 <lfs_pair_isnull>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	f083 0301 	eor.w	r3, r3, #1
 8011ac8:	b2db      	uxtb	r3, r3
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d1cf      	bne.n	8011a6e <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 8011ace:	f06f 0301 	mvn.w	r3, #1
}
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	3718      	adds	r7, #24
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}

08011ada <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8011ada:	b5b0      	push	{r4, r5, r7, lr}
 8011adc:	b08e      	sub	sp, #56	; 0x38
 8011ade:	af04      	add	r7, sp, #16
 8011ae0:	60f8      	str	r0, [r7, #12]
 8011ae2:	60b9      	str	r1, [r7, #8]
 8011ae4:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 8011aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8011af4:	6a3b      	ldr	r3, [r7, #32]
 8011af6:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8011afa:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8011afc:	6a3b      	ldr	r3, [r7, #32]
 8011afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b00:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 8011b02:	69fb      	ldr	r3, [r7, #28]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	69fa      	ldr	r2, [r7, #28]
 8011b08:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8011b0a:	2108      	movs	r1, #8
 8011b0c:	9103      	str	r1, [sp, #12]
 8011b0e:	f107 0110 	add.w	r1, r7, #16
 8011b12:	9102      	str	r1, [sp, #8]
 8011b14:	9201      	str	r2, [sp, #4]
 8011b16:	9300      	str	r3, [sp, #0]
 8011b18:	462b      	mov	r3, r5
 8011b1a:	4622      	mov	r2, r4
 8011b1c:	4601      	mov	r1, r0
 8011b1e:	6a38      	ldr	r0, [r7, #32]
 8011b20:	f7fa fc58 	bl	800c3d4 <lfs_bd_read>
 8011b24:	61b8      	str	r0, [r7, #24]
    if (err) {
 8011b26:	69bb      	ldr	r3, [r7, #24]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d001      	beq.n	8011b30 <lfs_fs_parent_match+0x56>
        return err;
 8011b2c:	69bb      	ldr	r3, [r7, #24]
 8011b2e:	e012      	b.n	8011b56 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8011b30:	f107 0310 	add.w	r3, r7, #16
 8011b34:	4618      	mov	r0, r3
 8011b36:	f7fa fff6 	bl	800cb26 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8011b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b3c:	1d1a      	adds	r2, r3, #4
 8011b3e:	f107 0310 	add.w	r3, r7, #16
 8011b42:	4611      	mov	r1, r2
 8011b44:	4618      	mov	r0, r3
 8011b46:	f7fa ff97 	bl	800ca78 <lfs_pair_cmp>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	bf14      	ite	ne
 8011b50:	2301      	movne	r3, #1
 8011b52:	2300      	moveq	r3, #0
 8011b54:	b2db      	uxtb	r3, r3
}
 8011b56:	4618      	mov	r0, r3
 8011b58:	3728      	adds	r7, #40	; 0x28
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08011b60 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b08e      	sub	sp, #56	; 0x38
 8011b64:	af04      	add	r7, sp, #16
 8011b66:	60f8      	str	r0, [r7, #12]
 8011b68:	60b9      	str	r1, [r7, #8]
 8011b6a:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	2200      	movs	r2, #0
 8011b70:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	2201      	movs	r2, #1
 8011b76:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8011b78:	2300      	movs	r3, #0
 8011b7a:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 8011b7c:	e030      	b.n	8011be0 <lfs_fs_parent+0x80>
        if (cycle >= lfs->cfg->block_count/2) {
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b82:	6a1b      	ldr	r3, [r3, #32]
 8011b84:	085b      	lsrs	r3, r3, #1
 8011b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b88:	429a      	cmp	r2, r3
 8011b8a:	d302      	bcc.n	8011b92 <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 8011b8c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8011b90:	e033      	b.n	8011bfa <lfs_fs_parent+0x9a>
        }
        cycle += 1;
 8011b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b94:	3301      	adds	r3, #1
 8011b96:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8011ba2:	68bb      	ldr	r3, [r7, #8]
 8011ba4:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8011ba6:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 8011ba8:	68bb      	ldr	r3, [r7, #8]
 8011baa:	3304      	adds	r3, #4
 8011bac:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8011bae:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8011bb0:	f107 0314 	add.w	r3, r7, #20
 8011bb4:	9303      	str	r3, [sp, #12]
 8011bb6:	4b13      	ldr	r3, [pc, #76]	; (8011c04 <lfs_fs_parent+0xa4>)
 8011bb8:	9302      	str	r3, [sp, #8]
 8011bba:	2300      	movs	r3, #0
 8011bbc:	9301      	str	r3, [sp, #4]
 8011bbe:	4b12      	ldr	r3, [pc, #72]	; (8011c08 <lfs_fs_parent+0xa8>)
 8011bc0:	9300      	str	r3, [sp, #0]
 8011bc2:	4b12      	ldr	r3, [pc, #72]	; (8011c0c <lfs_fs_parent+0xac>)
 8011bc4:	6879      	ldr	r1, [r7, #4]
 8011bc6:	68f8      	ldr	r0, [r7, #12]
 8011bc8:	f7fb fece 	bl	800d968 <lfs_dir_fetchmatch>
 8011bcc:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 8011bce:	6a3b      	ldr	r3, [r7, #32]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d005      	beq.n	8011be0 <lfs_fs_parent+0x80>
 8011bd4:	6a3b      	ldr	r3, [r7, #32]
 8011bd6:	f113 0f02 	cmn.w	r3, #2
 8011bda:	d001      	beq.n	8011be0 <lfs_fs_parent+0x80>
            return tag;
 8011bdc:	6a3b      	ldr	r3, [r7, #32]
 8011bde:	e00c      	b.n	8011bfa <lfs_fs_parent+0x9a>
    while (!lfs_pair_isnull(parent->tail)) {
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	3318      	adds	r3, #24
 8011be4:	4618      	mov	r0, r3
 8011be6:	f7fa ff2c 	bl	800ca42 <lfs_pair_isnull>
 8011bea:	4603      	mov	r3, r0
 8011bec:	f083 0301 	eor.w	r3, r3, #1
 8011bf0:	b2db      	uxtb	r3, r3
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d1c3      	bne.n	8011b7e <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 8011bf6:	f06f 0301 	mvn.w	r3, #1
}
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	3728      	adds	r7, #40	; 0x28
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd80      	pop	{r7, pc}
 8011c02:	bf00      	nop
 8011c04:	08011adb 	.word	0x08011adb
 8011c08:	20000008 	.word	0x20000008
 8011c0c:	7ff003ff 	.word	0x7ff003ff

08011c10 <lfs_fs_relocate>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_relocate(lfs_t *lfs,
        const lfs_block_t oldpair[2], lfs_block_t newpair[2]) {
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b0a6      	sub	sp, #152	; 0x98
 8011c14:	af04      	add	r7, sp, #16
 8011c16:	60f8      	str	r0, [r7, #12]
 8011c18:	60b9      	str	r1, [r7, #8]
 8011c1a:	607a      	str	r2, [r7, #4]
    // update internal root
    if (lfs_pair_cmp(oldpair, lfs->root) == 0) {
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	3320      	adds	r3, #32
 8011c20:	4619      	mov	r1, r3
 8011c22:	68b8      	ldr	r0, [r7, #8]
 8011c24:	f7fa ff28 	bl	800ca78 <lfs_pair_cmp>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d107      	bne.n	8011c3e <lfs_fs_relocate+0x2e>
        lfs->root[0] = newpair[0];
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	681a      	ldr	r2, [r3, #0]
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	621a      	str	r2, [r3, #32]
        lfs->root[1] = newpair[1];
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	685a      	ldr	r2, [r3, #4]
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    // update internally tracked dirs
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011c46:	e031      	b.n	8011cac <lfs_fs_relocate+0x9c>
        if (lfs_pair_cmp(oldpair, d->m.pair) == 0) {
 8011c48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011c4c:	3308      	adds	r3, #8
 8011c4e:	4619      	mov	r1, r3
 8011c50:	68b8      	ldr	r0, [r7, #8]
 8011c52:	f7fa ff11 	bl	800ca78 <lfs_pair_cmp>
 8011c56:	4603      	mov	r3, r0
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d109      	bne.n	8011c70 <lfs_fs_relocate+0x60>
            d->m.pair[0] = newpair[0];
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681a      	ldr	r2, [r3, #0]
 8011c60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011c64:	609a      	str	r2, [r3, #8]
            d->m.pair[1] = newpair[1];
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	685a      	ldr	r2, [r3, #4]
 8011c6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011c6e:	60da      	str	r2, [r3, #12]
        }

        if (d->type == LFS_TYPE_DIR &&
 8011c70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011c74:	799b      	ldrb	r3, [r3, #6]
 8011c76:	2b02      	cmp	r3, #2
 8011c78:	d113      	bne.n	8011ca2 <lfs_fs_relocate+0x92>
                lfs_pair_cmp(oldpair, ((lfs_dir_t*)d)->head) == 0) {
 8011c7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011c7e:	332c      	adds	r3, #44	; 0x2c
 8011c80:	4619      	mov	r1, r3
 8011c82:	68b8      	ldr	r0, [r7, #8]
 8011c84:	f7fa fef8 	bl	800ca78 <lfs_pair_cmp>
 8011c88:	4603      	mov	r3, r0
        if (d->type == LFS_TYPE_DIR &&
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d109      	bne.n	8011ca2 <lfs_fs_relocate+0x92>
            ((lfs_dir_t*)d)->head[0] = newpair[0];
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681a      	ldr	r2, [r3, #0]
 8011c92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011c96:	62da      	str	r2, [r3, #44]	; 0x2c
            ((lfs_dir_t*)d)->head[1] = newpair[1];
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	685a      	ldr	r2, [r3, #4]
 8011c9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011ca0:	631a      	str	r2, [r3, #48]	; 0x30
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8011ca2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011cac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d1c9      	bne.n	8011c48 <lfs_fs_relocate+0x38>
        }
    }

    // find parent
    lfs_mdir_t parent;
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
 8011cb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011cb8:	461a      	mov	r2, r3
 8011cba:	68b9      	ldr	r1, [r7, #8]
 8011cbc:	68f8      	ldr	r0, [r7, #12]
 8011cbe:	f7ff ff4f 	bl	8011b60 <lfs_fs_parent>
 8011cc2:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    if (tag < 0 && tag != LFS_ERR_NOENT) {
 8011cc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	da07      	bge.n	8011cde <lfs_fs_relocate+0xce>
 8011cce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011cd2:	f113 0f02 	cmn.w	r3, #2
 8011cd6:	d002      	beq.n	8011cde <lfs_fs_relocate+0xce>
        return tag;
 8011cd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011cdc:	e0f3      	b.n	8011ec6 <lfs_fs_relocate+0x2b6>
    }

    if (tag != LFS_ERR_NOENT) {
 8011cde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011ce2:	f113 0f02 	cmn.w	r3, #2
 8011ce6:	d07c      	beq.n	8011de2 <lfs_fs_relocate+0x1d2>
        // update disk, this creates a desync
        int err = lfs_fs_preporphans(lfs, +1);
 8011ce8:	2101      	movs	r1, #1
 8011cea:	68f8      	ldr	r0, [r7, #12]
 8011cec:	f000 f8f8 	bl	8011ee0 <lfs_fs_preporphans>
 8011cf0:	67b8      	str	r0, [r7, #120]	; 0x78
        if (err) {
 8011cf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d001      	beq.n	8011cfc <lfs_fs_relocate+0xec>
            return err;
 8011cf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011cfa:	e0e4      	b.n	8011ec6 <lfs_fs_relocate+0x2b6>
        }

        // fix pending move in this pair? this looks like an optimization but
        // is in fact _required_ since relocating may outdate the move.
        uint16_t moveid = 0x3ff;
 8011cfc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8011d00:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	3330      	adds	r3, #48	; 0x30
 8011d08:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8011d0c:	4611      	mov	r1, r2
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f7fb f840 	bl	800cd94 <lfs_gstate_hasmovehere>
 8011d14:	4603      	mov	r3, r0
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d02d      	beq.n	8011d76 <lfs_fs_relocate+0x166>
            moveid = lfs_tag_id(lfs->gstate.tag);
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f7fa ff90 	bl	800cc44 <lfs_tag_id>
 8011d24:	4603      	mov	r3, r0
 8011d26:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            LFS_DEBUG("Fixing move while relocating "
 8011d2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011d2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011d2e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8011d32:	4867      	ldr	r0, [pc, #412]	; (8011ed0 <lfs_fs_relocate+0x2c0>)
 8011d34:	9002      	str	r0, [sp, #8]
 8011d36:	9201      	str	r2, [sp, #4]
 8011d38:	9300      	str	r3, [sp, #0]
 8011d3a:	460b      	mov	r3, r1
 8011d3c:	f640 72c4 	movw	r2, #4036	; 0xfc4
 8011d40:	4964      	ldr	r1, [pc, #400]	; (8011ed4 <lfs_fs_relocate+0x2c4>)
 8011d42:	4865      	ldr	r0, [pc, #404]	; (8011ed8 <lfs_fs_relocate+0x2c8>)
 8011d44:	f012 f948 	bl	8023fd8 <iprintf>
                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                    parent.pair[0], parent.pair[1], moveid);
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8011d48:	2200      	movs	r2, #0
 8011d4a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8011d4e:	68f8      	ldr	r0, [r7, #12]
 8011d50:	f000 f900 	bl	8011f54 <lfs_fs_prepmove>
            if (moveid < lfs_tag_id(tag)) {
 8011d54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f7fa ff73 	bl	800cc44 <lfs_tag_id>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	461a      	mov	r2, r3
 8011d62:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8011d66:	4293      	cmp	r3, r2
 8011d68:	d205      	bcs.n	8011d76 <lfs_fs_relocate+0x166>
                tag -= LFS_MKTAG(0, 1, 0);
 8011d6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011d6e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8011d72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }
        }

        lfs_pair_tole32(newpair);
 8011d76:	6878      	ldr	r0, [r7, #4]
 8011d78:	f7fa feef 	bl	800cb5a <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 8011d7c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8011d80:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8011d84:	4293      	cmp	r3, r2
 8011d86:	d007      	beq.n	8011d98 <lfs_fs_relocate+0x188>
 8011d88:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8011d8c:	029b      	lsls	r3, r3, #10
 8011d8e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8011d92:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8011d96:	e000      	b.n	8011d9a <lfs_fs_relocate+0x18a>
 8011d98:	2300      	movs	r3, #0
 8011d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8011da0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011da4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	653b      	str	r3, [r7, #80]	; 0x50
 8011daa:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8011dae:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8011db2:	2302      	movs	r3, #2
 8011db4:	68f8      	ldr	r0, [r7, #12]
 8011db6:	f7fd f991 	bl	800f0dc <lfs_dir_commit>
 8011dba:	67b8      	str	r0, [r7, #120]	; 0x78
                {LFS_MKTAG_IF(moveid != 0x3ff,
                    LFS_TYPE_DELETE, moveid, 0), NULL},
                {tag, newpair}));
        lfs_pair_fromle32(newpair);
 8011dbc:	6878      	ldr	r0, [r7, #4]
 8011dbe:	f7fa feb2 	bl	800cb26 <lfs_pair_fromle32>
        if (err) {
 8011dc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d001      	beq.n	8011dcc <lfs_fs_relocate+0x1bc>
            return err;
 8011dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011dca:	e07c      	b.n	8011ec6 <lfs_fs_relocate+0x2b6>
        }

        // next step, clean up orphans
        err = lfs_fs_preporphans(lfs, -1);
 8011dcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011dd0:	68f8      	ldr	r0, [r7, #12]
 8011dd2:	f000 f885 	bl	8011ee0 <lfs_fs_preporphans>
 8011dd6:	67b8      	str	r0, [r7, #120]	; 0x78
        if (err) {
 8011dd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d001      	beq.n	8011de2 <lfs_fs_relocate+0x1d2>
            return err;
 8011dde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011de0:	e071      	b.n	8011ec6 <lfs_fs_relocate+0x2b6>
        }
    }

    // find pred
    int err = lfs_fs_pred(lfs, oldpair, &parent);
 8011de2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011de6:	461a      	mov	r2, r3
 8011de8:	68b9      	ldr	r1, [r7, #8]
 8011dea:	68f8      	ldr	r0, [r7, #12]
 8011dec:	f7ff fe30 	bl	8011a50 <lfs_fs_pred>
 8011df0:	6778      	str	r0, [r7, #116]	; 0x74
    if (err && err != LFS_ERR_NOENT) {
 8011df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d005      	beq.n	8011e04 <lfs_fs_relocate+0x1f4>
 8011df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011dfa:	f113 0f02 	cmn.w	r3, #2
 8011dfe:	d001      	beq.n	8011e04 <lfs_fs_relocate+0x1f4>
        return err;
 8011e00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011e02:	e060      	b.n	8011ec6 <lfs_fs_relocate+0x2b6>
    }

    // if we can't find dir, it must be new
    if (err != LFS_ERR_NOENT) {
 8011e04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011e06:	f113 0f02 	cmn.w	r3, #2
 8011e0a:	d05b      	beq.n	8011ec4 <lfs_fs_relocate+0x2b4>
        // fix pending move in this pair? this looks like an optimization but
        // is in fact _required_ since relocating may outdate the move.
        uint16_t moveid = 0x3ff;
 8011e0c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8011e10:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	3330      	adds	r3, #48	; 0x30
 8011e18:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8011e1c:	4611      	mov	r1, r2
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f7fa ffb8 	bl	800cd94 <lfs_gstate_hasmovehere>
 8011e24:	4603      	mov	r3, r0
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d01c      	beq.n	8011e64 <lfs_fs_relocate+0x254>
            moveid = lfs_tag_id(lfs->gstate.tag);
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e2e:	4618      	mov	r0, r3
 8011e30:	f7fa ff08 	bl	800cc44 <lfs_tag_id>
 8011e34:	4603      	mov	r3, r0
 8011e36:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
            LFS_DEBUG("Fixing move while relocating "
 8011e3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011e3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011e3e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8011e42:	4823      	ldr	r0, [pc, #140]	; (8011ed0 <lfs_fs_relocate+0x2c0>)
 8011e44:	9002      	str	r0, [sp, #8]
 8011e46:	9201      	str	r2, [sp, #4]
 8011e48:	9300      	str	r3, [sp, #0]
 8011e4a:	460b      	mov	r3, r1
 8011e4c:	f640 72eb 	movw	r2, #4075	; 0xfeb
 8011e50:	4920      	ldr	r1, [pc, #128]	; (8011ed4 <lfs_fs_relocate+0x2c4>)
 8011e52:	4821      	ldr	r0, [pc, #132]	; (8011ed8 <lfs_fs_relocate+0x2c8>)
 8011e54:	f012 f8c0 	bl	8023fd8 <iprintf>
                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                    parent.pair[0], parent.pair[1], moveid);
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8011e58:	2200      	movs	r2, #0
 8011e5a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8011e5e:	68f8      	ldr	r0, [r7, #12]
 8011e60:	f000 f878 	bl	8011f54 <lfs_fs_prepmove>
        }

        // replace bad pair, either we clean up desync, or no desync occured
        lfs_pair_tole32(newpair);
 8011e64:	6878      	ldr	r0, [r7, #4]
 8011e66:	f7fa fe78 	bl	800cb5a <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 8011e6a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8011e6e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8011e72:	4293      	cmp	r3, r2
 8011e74:	d007      	beq.n	8011e86 <lfs_fs_relocate+0x276>
 8011e76:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8011e7a:	029b      	lsls	r3, r3, #10
 8011e7c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8011e80:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8011e84:	e000      	b.n	8011e88 <lfs_fs_relocate+0x278>
 8011e86:	2300      	movs	r3, #0
 8011e88:	627b      	str	r3, [r7, #36]	; 0x24
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8011e8e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011e92:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8011e96:	051a      	lsls	r2, r3, #20
 8011e98:	4b10      	ldr	r3, [pc, #64]	; (8011edc <lfs_fs_relocate+0x2cc>)
 8011e9a:	4313      	orrs	r3, r2
 8011e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	633b      	str	r3, [r7, #48]	; 0x30
 8011ea2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011ea6:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8011eaa:	2302      	movs	r3, #2
 8011eac:	68f8      	ldr	r0, [r7, #12]
 8011eae:	f7fd f915 	bl	800f0dc <lfs_dir_commit>
 8011eb2:	6778      	str	r0, [r7, #116]	; 0x74
                {LFS_MKTAG_IF(moveid != 0x3ff,
                    LFS_TYPE_DELETE, moveid, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_TAIL + parent.split, 0x3ff, 8), newpair}));
        lfs_pair_fromle32(newpair);
 8011eb4:	6878      	ldr	r0, [r7, #4]
 8011eb6:	f7fa fe36 	bl	800cb26 <lfs_pair_fromle32>
        if (err) {
 8011eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d001      	beq.n	8011ec4 <lfs_fs_relocate+0x2b4>
            return err;
 8011ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011ec2:	e000      	b.n	8011ec6 <lfs_fs_relocate+0x2b6>
        }
    }

    return 0;
 8011ec4:	2300      	movs	r3, #0
}
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	3788      	adds	r7, #136	; 0x88
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}
 8011ece:	bf00      	nop
 8011ed0:	08026f24 	.word	0x08026f24
 8011ed4:	08026e18 	.word	0x08026e18
 8011ed8:	08027430 	.word	0x08027430
 8011edc:	000ffc08 	.word	0x000ffc08

08011ee0 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8011ee0:	b590      	push	{r4, r7, lr}
 8011ee2:	b083      	sub	sp, #12
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
 8011ee8:	460b      	mov	r3, r1
 8011eea:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f7fa feb7 	bl	800cc64 <lfs_tag_size>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d10a      	bne.n	8011f12 <lfs_fs_preporphans+0x32>
 8011efc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	da06      	bge.n	8011f12 <lfs_fs_preporphans+0x32>
 8011f04:	4b10      	ldr	r3, [pc, #64]	; (8011f48 <lfs_fs_preporphans+0x68>)
 8011f06:	4a11      	ldr	r2, [pc, #68]	; (8011f4c <lfs_fs_preporphans+0x6c>)
 8011f08:	f241 0103 	movw	r1, #4099	; 0x1003
 8011f0c:	4810      	ldr	r0, [pc, #64]	; (8011f50 <lfs_fs_preporphans+0x70>)
 8011f0e:	f011 fa11 	bl	8023334 <__assert_func>
    lfs->gstate.tag += orphans;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011f1a:	441a      	add	r2, r3
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f24:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	3330      	adds	r3, #48	; 0x30
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f7fa fefc 	bl	800cd2a <lfs_gstate_hasorphans>
 8011f32:	4603      	mov	r3, r0
 8011f34:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8011f36:	ea44 0203 	orr.w	r2, r4, r3
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 8011f3e:	2300      	movs	r3, #0
}
 8011f40:	4618      	mov	r0, r3
 8011f42:	370c      	adds	r7, #12
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd90      	pop	{r4, r7, pc}
 8011f48:	08027474 	.word	0x08027474
 8011f4c:	0802ad98 	.word	0x0802ad98
 8011f50:	08026e18 	.word	0x08026e18

08011f54 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8011f54:	b480      	push	{r7}
 8011f56:	b085      	sub	sp, #20
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	60f8      	str	r0, [r7, #12]
 8011f5c:	460b      	mov	r3, r1
 8011f5e:	607a      	str	r2, [r7, #4]
 8011f60:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f66:	4a17      	ldr	r2, [pc, #92]	; (8011fc4 <lfs_fs_prepmove+0x70>)
 8011f68:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8011f6a:	897b      	ldrh	r3, [r7, #10]
 8011f6c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8011f70:	428b      	cmp	r3, r1
 8011f72:	d006      	beq.n	8011f82 <lfs_fs_prepmove+0x2e>
 8011f74:	897b      	ldrh	r3, [r7, #10]
 8011f76:	029b      	lsls	r3, r3, #10
 8011f78:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8011f7c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8011f80:	e000      	b.n	8011f84 <lfs_fs_prepmove+0x30>
 8011f82:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8011f84:	431a      	orrs	r2, r3
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8011f8a:	897b      	ldrh	r3, [r7, #10]
 8011f8c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8011f90:	4293      	cmp	r3, r2
 8011f92:	d002      	beq.n	8011f9a <lfs_fs_prepmove+0x46>
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	e000      	b.n	8011f9c <lfs_fs_prepmove+0x48>
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	68fa      	ldr	r2, [r7, #12]
 8011f9e:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8011fa0:	897b      	ldrh	r3, [r7, #10]
 8011fa2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8011fa6:	4293      	cmp	r3, r2
 8011fa8:	d003      	beq.n	8011fb2 <lfs_fs_prepmove+0x5e>
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	3304      	adds	r3, #4
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	e000      	b.n	8011fb4 <lfs_fs_prepmove+0x60>
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	68fa      	ldr	r2, [r7, #12]
 8011fb6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8011fb8:	bf00      	nop
 8011fba:	3714      	adds	r7, #20
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc2:	4770      	bx	lr
 8011fc4:	800003ff 	.word	0x800003ff

08011fc8 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8011fc8:	b5b0      	push	{r4, r5, r7, lr}
 8011fca:	b094      	sub	sp, #80	; 0x50
 8011fcc:	af04      	add	r7, sp, #16
 8011fce:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	333c      	adds	r3, #60	; 0x3c
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f7fa feca 	bl	800cd6e <lfs_gstate_hasmove>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	f083 0301 	eor.w	r3, r3, #1
 8011fe0:	b2db      	uxtb	r3, r3
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d001      	beq.n	8011fea <lfs_fs_demove+0x22>
        return 0;
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	e049      	b.n	801207e <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f7fa fe24 	bl	800cc44 <lfs_tag_id>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	461a      	mov	r2, r3
 8012000:	4b21      	ldr	r3, [pc, #132]	; (8012088 <lfs_fs_demove+0xc0>)
 8012002:	9302      	str	r3, [sp, #8]
 8012004:	9201      	str	r2, [sp, #4]
 8012006:	9400      	str	r4, [sp, #0]
 8012008:	462b      	mov	r3, r5
 801200a:	f241 021d 	movw	r2, #4125	; 0x101d
 801200e:	491f      	ldr	r1, [pc, #124]	; (801208c <lfs_fs_demove+0xc4>)
 8012010:	481f      	ldr	r0, [pc, #124]	; (8012090 <lfs_fs_demove+0xc8>)
 8012012:	f011 ffe1 	bl	8023fd8 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	f103 0240 	add.w	r2, r3, #64	; 0x40
 801201c:	f107 0318 	add.w	r3, r7, #24
 8012020:	4619      	mov	r1, r3
 8012022:	6878      	ldr	r0, [r7, #4]
 8012024:	f7fc f80c 	bl	800e040 <lfs_dir_fetch>
 8012028:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 801202a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801202c:	2b00      	cmp	r3, #0
 801202e:	d001      	beq.n	8012034 <lfs_fs_demove+0x6c>
        return err;
 8012030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012032:	e024      	b.n	801207e <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012038:	4618      	mov	r0, r3
 801203a:	f7fa fe03 	bl	800cc44 <lfs_tag_id>
 801203e:	4603      	mov	r3, r0
 8012040:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8012042:	2200      	movs	r2, #0
 8012044:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8012048:	6878      	ldr	r0, [r7, #4]
 801204a:	f7ff ff83 	bl	8011f54 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 801204e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012050:	029b      	lsls	r3, r3, #10
 8012052:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8012056:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 801205a:	613b      	str	r3, [r7, #16]
 801205c:	2300      	movs	r3, #0
 801205e:	617b      	str	r3, [r7, #20]
 8012060:	f107 0210 	add.w	r2, r7, #16
 8012064:	f107 0118 	add.w	r1, r7, #24
 8012068:	2301      	movs	r3, #1
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	f7fd f836 	bl	800f0dc <lfs_dir_commit>
 8012070:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8012072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012074:	2b00      	cmp	r3, #0
 8012076:	d001      	beq.n	801207c <lfs_fs_demove+0xb4>
        return err;
 8012078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801207a:	e000      	b.n	801207e <lfs_fs_demove+0xb6>
    }

    return 0;
 801207c:	2300      	movs	r3, #0
}
 801207e:	4618      	mov	r0, r3
 8012080:	3740      	adds	r7, #64	; 0x40
 8012082:	46bd      	mov	sp, r7
 8012084:	bdb0      	pop	{r4, r5, r7, pc}
 8012086:	bf00      	nop
 8012088:	08026f24 	.word	0x08026f24
 801208c:	08026e18 	.word	0x08026e18
 8012090:	080274a8 	.word	0x080274a8

08012094 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs) {
 8012094:	b5b0      	push	{r4, r5, r7, lr}
 8012096:	b0a8      	sub	sp, #160	; 0xa0
 8012098:	af04      	add	r7, sp, #16
 801209a:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	3330      	adds	r3, #48	; 0x30
 80120a0:	4618      	mov	r0, r3
 80120a2:	f7fa fe42 	bl	800cd2a <lfs_gstate_hasorphans>
 80120a6:	4603      	mov	r3, r0
 80120a8:	f083 0301 	eor.w	r3, r3, #1
 80120ac:	b2db      	uxtb	r3, r3
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d001      	beq.n	80120b6 <lfs_fs_deorphan+0x22>
        return 0;
 80120b2:	2300      	movs	r3, #0
 80120b4:	e0e6      	b.n	8012284 <lfs_fs_deorphan+0x1f0>
    }

    // Fix any orphans
    lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 80120b6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80120ba:	2220      	movs	r2, #32
 80120bc:	2100      	movs	r1, #0
 80120be:	4618      	mov	r0, r3
 80120c0:	f012 f94e 	bl	8024360 <memset>
 80120c4:	2301      	movs	r3, #1
 80120c6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80120ca:	2301      	movs	r3, #1
 80120cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    lfs_mdir_t dir;

    // iterate over all directory directory entries
    while (!lfs_pair_isnull(pdir.tail)) {
 80120d0:	e0bd      	b.n	801224e <lfs_fs_deorphan+0x1ba>
        int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 80120d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80120d6:	f103 0218 	add.w	r2, r3, #24
 80120da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80120de:	4619      	mov	r1, r3
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f7fb ffad 	bl	800e040 <lfs_dir_fetch>
 80120e6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        if (err) {
 80120ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d002      	beq.n	80120f8 <lfs_fs_deorphan+0x64>
            return err;
 80120f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80120f6:	e0c5      	b.n	8012284 <lfs_fs_deorphan+0x1f0>
        }

        // check head blocks for orphans
        if (!pdir.split) {
 80120f8:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80120fc:	f083 0301 	eor.w	r3, r3, #1
 8012100:	b2db      	uxtb	r3, r3
 8012102:	2b00      	cmp	r3, #0
 8012104:	f000 8099 	beq.w	801223a <lfs_fs_deorphan+0x1a6>
            // check if we have a parent
            lfs_mdir_t parent;
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8012108:	f107 020c 	add.w	r2, r7, #12
 801210c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012110:	3318      	adds	r3, #24
 8012112:	4619      	mov	r1, r3
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	f7ff fd23 	bl	8011b60 <lfs_fs_parent>
 801211a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            if (tag < 0 && tag != LFS_ERR_NOENT) {
 801211e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012122:	2b00      	cmp	r3, #0
 8012124:	da07      	bge.n	8012136 <lfs_fs_deorphan+0xa2>
 8012126:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801212a:	f113 0f02 	cmn.w	r3, #2
 801212e:	d002      	beq.n	8012136 <lfs_fs_deorphan+0xa2>
                return tag;
 8012130:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012134:	e0a6      	b.n	8012284 <lfs_fs_deorphan+0x1f0>
            }

            if (tag == LFS_ERR_NOENT) {
 8012136:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801213a:	f113 0f02 	cmn.w	r3, #2
 801213e:	d11d      	bne.n	801217c <lfs_fs_deorphan+0xe8>
                // we are an orphan
                LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8012140:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012142:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012146:	4951      	ldr	r1, [pc, #324]	; (801228c <lfs_fs_deorphan+0x1f8>)
 8012148:	9101      	str	r1, [sp, #4]
 801214a:	9300      	str	r3, [sp, #0]
 801214c:	4613      	mov	r3, r2
 801214e:	f241 0252 	movw	r2, #4178	; 0x1052
 8012152:	494f      	ldr	r1, [pc, #316]	; (8012290 <lfs_fs_deorphan+0x1fc>)
 8012154:	484f      	ldr	r0, [pc, #316]	; (8012294 <lfs_fs_deorphan+0x200>)
 8012156:	f011 ff3f 	bl	8023fd8 <iprintf>
                        pdir.tail[0], pdir.tail[1]);

                err = lfs_dir_drop(lfs, &pdir, &dir);
 801215a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801215e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012162:	4619      	mov	r1, r3
 8012164:	6878      	ldr	r0, [r7, #4]
 8012166:	f7fc fbe3 	bl	800e930 <lfs_dir_drop>
 801216a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                if (err) {
 801216e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012172:	2b00      	cmp	r3, #0
 8012174:	d05d      	beq.n	8012232 <lfs_fs_deorphan+0x19e>
                    return err;
 8012176:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801217a:	e083      	b.n	8012284 <lfs_fs_deorphan+0x1f0>
                // refetch tail
                continue;
            }

            lfs_block_t pair[2];
            lfs_stag_t res = lfs_dir_get(lfs, &parent,
 801217c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012180:	f107 010c 	add.w	r1, r7, #12
 8012184:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012188:	9300      	str	r3, [sp, #0]
 801218a:	4613      	mov	r3, r2
 801218c:	4a42      	ldr	r2, [pc, #264]	; (8012298 <lfs_fs_deorphan+0x204>)
 801218e:	6878      	ldr	r0, [r7, #4]
 8012190:	f7fb f942 	bl	800d418 <lfs_dir_get>
 8012194:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
                    LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
            if (res < 0) {
 8012198:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801219c:	2b00      	cmp	r3, #0
 801219e:	da02      	bge.n	80121a6 <lfs_fs_deorphan+0x112>
                return res;
 80121a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80121a4:	e06e      	b.n	8012284 <lfs_fs_deorphan+0x1f0>
            }
            lfs_pair_fromle32(pair);
 80121a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80121aa:	4618      	mov	r0, r3
 80121ac:	f7fa fcbb 	bl	800cb26 <lfs_pair_fromle32>

            if (!lfs_pair_sync(pair, pdir.tail)) {
 80121b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80121b4:	f103 0218 	add.w	r2, r3, #24
 80121b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80121bc:	4611      	mov	r1, r2
 80121be:	4618      	mov	r0, r3
 80121c0:	f7fa fc84 	bl	800cacc <lfs_pair_sync>
 80121c4:	4603      	mov	r3, r0
 80121c6:	f083 0301 	eor.w	r3, r3, #1
 80121ca:	b2db      	uxtb	r3, r3
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d034      	beq.n	801223a <lfs_fs_deorphan+0x1a6>
                // we have desynced
                LFS_DEBUG("Fixing half-orphan {0x%"PRIx32", 0x%"PRIx32"} "
 80121d0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80121d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80121d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80121d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80121da:	4c2c      	ldr	r4, [pc, #176]	; (801228c <lfs_fs_deorphan+0x1f8>)
 80121dc:	9403      	str	r4, [sp, #12]
 80121de:	9102      	str	r1, [sp, #8]
 80121e0:	9201      	str	r2, [sp, #4]
 80121e2:	9300      	str	r3, [sp, #0]
 80121e4:	4603      	mov	r3, r0
 80121e6:	f241 0268 	movw	r2, #4200	; 0x1068
 80121ea:	4929      	ldr	r1, [pc, #164]	; (8012290 <lfs_fs_deorphan+0x1fc>)
 80121ec:	482b      	ldr	r0, [pc, #172]	; (801229c <lfs_fs_deorphan+0x208>)
 80121ee:	f011 fef3 	bl	8023fd8 <iprintf>
                            "-> {0x%"PRIx32", 0x%"PRIx32"}",
                        pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                lfs_pair_tole32(pair);
 80121f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80121f6:	4618      	mov	r0, r3
 80121f8:	f7fa fcaf 	bl	800cb5a <lfs_pair_tole32>
                err = lfs_dir_commit(lfs, &pdir, LFS_MKATTRS(
 80121fc:	4b28      	ldr	r3, [pc, #160]	; (80122a0 <lfs_fs_deorphan+0x20c>)
 80121fe:	637b      	str	r3, [r7, #52]	; 0x34
 8012200:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012204:	63bb      	str	r3, [r7, #56]	; 0x38
 8012206:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801220a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 801220e:	2301      	movs	r3, #1
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	f7fc ff63 	bl	800f0dc <lfs_dir_commit>
 8012216:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                        {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pair}));
                lfs_pair_fromle32(pair);
 801221a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801221e:	4618      	mov	r0, r3
 8012220:	f7fa fc81 	bl	800cb26 <lfs_pair_fromle32>
                if (err) {
 8012224:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012228:	2b00      	cmp	r3, #0
 801222a:	d004      	beq.n	8012236 <lfs_fs_deorphan+0x1a2>
                    return err;
 801222c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                return tag;
 8012230:	e028      	b.n	8012284 <lfs_fs_deorphan+0x1f0>
                continue;
 8012232:	bf00      	nop
 8012234:	e00b      	b.n	801224e <lfs_fs_deorphan+0x1ba>
                }

                // refetch tail
                continue;
 8012236:	bf00      	nop
 8012238:	e009      	b.n	801224e <lfs_fs_deorphan+0x1ba>
            }
        }

        pdir = dir;
 801223a:	f107 0464 	add.w	r4, r7, #100	; 0x64
 801223e:	f107 0544 	add.w	r5, r7, #68	; 0x44
 8012242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012246:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801224a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (!lfs_pair_isnull(pdir.tail)) {
 801224e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012252:	3318      	adds	r3, #24
 8012254:	4618      	mov	r0, r3
 8012256:	f7fa fbf4 	bl	800ca42 <lfs_pair_isnull>
 801225a:	4603      	mov	r3, r0
 801225c:	f083 0301 	eor.w	r3, r3, #1
 8012260:	b2db      	uxtb	r3, r3
 8012262:	2b00      	cmp	r3, #0
 8012264:	f47f af35 	bne.w	80120d2 <lfs_fs_deorphan+0x3e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	3330      	adds	r3, #48	; 0x30
 801226c:	4618      	mov	r0, r3
 801226e:	f7fa fd6f 	bl	800cd50 <lfs_gstate_getorphans>
 8012272:	4603      	mov	r3, r0
 8012274:	425b      	negs	r3, r3
 8012276:	b2db      	uxtb	r3, r3
 8012278:	b25b      	sxtb	r3, r3
 801227a:	4619      	mov	r1, r3
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f7ff fe2f 	bl	8011ee0 <lfs_fs_preporphans>
 8012282:	4603      	mov	r3, r0
}
 8012284:	4618      	mov	r0, r3
 8012286:	3790      	adds	r7, #144	; 0x90
 8012288:	46bd      	mov	sp, r7
 801228a:	bdb0      	pop	{r4, r5, r7, pc}
 801228c:	08026f24 	.word	0x08026f24
 8012290:	08026e18 	.word	0x08026e18
 8012294:	080274dc 	.word	0x080274dc
 8012298:	7ffffc00 	.word	0x7ffffc00
 801229c:	0802750c 	.word	0x0802750c
 80122a0:	600ffc08 	.word	0x600ffc08

080122a4 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b084      	sub	sp, #16
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f7ff fe8b 	bl	8011fc8 <lfs_fs_demove>
 80122b2:	60f8      	str	r0, [r7, #12]
    if (err) {
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d001      	beq.n	80122be <lfs_fs_forceconsistency+0x1a>
        return err;
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	e009      	b.n	80122d2 <lfs_fs_forceconsistency+0x2e>
    }

    err = lfs_fs_deorphan(lfs);
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f7ff fee8 	bl	8012094 <lfs_fs_deorphan>
 80122c4:	60f8      	str	r0, [r7, #12]
    if (err) {
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d001      	beq.n	80122d0 <lfs_fs_forceconsistency+0x2c>
        return err;
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	e000      	b.n	80122d2 <lfs_fs_forceconsistency+0x2e>
    }

    return 0;
 80122d0:	2300      	movs	r3, #0
}
 80122d2:	4618      	mov	r0, r3
 80122d4:	3710      	adds	r7, #16
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bd80      	pop	{r7, pc}

080122da <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 80122da:	b480      	push	{r7}
 80122dc:	b085      	sub	sp, #20
 80122de:	af00      	add	r7, sp, #0
 80122e0:	6078      	str	r0, [r7, #4]
 80122e2:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	60fb      	str	r3, [r7, #12]
    *size += 1;
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	1c5a      	adds	r2, r3, #1
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	601a      	str	r2, [r3, #0]
    return 0;
 80122f2:	2300      	movs	r3, #0
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	3714      	adds	r7, #20
 80122f8:	46bd      	mov	sp, r7
 80122fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fe:	4770      	bx	lr

08012300 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 8012300:	b580      	push	{r7, lr}
 8012302:	b084      	sub	sp, #16
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8012308:	2300      	movs	r3, #0
 801230a:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 801230c:	f107 0208 	add.w	r2, r7, #8
 8012310:	2300      	movs	r3, #0
 8012312:	4907      	ldr	r1, [pc, #28]	; (8012330 <lfs_fs_rawsize+0x30>)
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f7ff fa75 	bl	8011804 <lfs_fs_rawtraverse>
 801231a:	60f8      	str	r0, [r7, #12]
    if (err) {
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d001      	beq.n	8012326 <lfs_fs_rawsize+0x26>
        return err;
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	e000      	b.n	8012328 <lfs_fs_rawsize+0x28>
    }

    return size;
 8012326:	68bb      	ldr	r3, [r7, #8]
}
 8012328:	4618      	mov	r0, r3
 801232a:	3710      	adds	r7, #16
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}
 8012330:	080122db 	.word	0x080122db

08012334 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8012334:	b580      	push	{r7, lr}
 8012336:	b084      	sub	sp, #16
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
 801233c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 801233e:	2300      	movs	r3, #0
 8012340:	60fb      	str	r3, [r7, #12]
    if (err) {
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d001      	beq.n	801234c <lfs_format+0x18>
        return err;
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	e005      	b.n	8012358 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 801234c:	6839      	ldr	r1, [r7, #0]
 801234e:	6878      	ldr	r0, [r7, #4]
 8012350:	f7ff f836 	bl	80113c0 <lfs_rawformat>
 8012354:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8012356:	68fb      	ldr	r3, [r7, #12]
}
 8012358:	4618      	mov	r0, r3
 801235a:	3710      	adds	r7, #16
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}

08012360 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8012360:	b580      	push	{r7, lr}
 8012362:	b084      	sub	sp, #16
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
 8012368:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 801236a:	2300      	movs	r3, #0
 801236c:	60fb      	str	r3, [r7, #12]
    if (err) {
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d001      	beq.n	8012378 <lfs_mount+0x18>
        return err;
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	e005      	b.n	8012384 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 8012378:	6839      	ldr	r1, [r7, #0]
 801237a:	6878      	ldr	r0, [r7, #4]
 801237c:	f7ff f8c0 	bl	8011500 <lfs_rawmount>
 8012380:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8012382:	68fb      	ldr	r3, [r7, #12]
}
 8012384:	4618      	mov	r0, r3
 8012386:	3710      	adds	r7, #16
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}

0801238c <lfs_stat>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801238c:	b580      	push	{r7, lr}
 801238e:	b086      	sub	sp, #24
 8012390:	af00      	add	r7, sp, #0
 8012392:	60f8      	str	r0, [r7, #12]
 8012394:	60b9      	str	r1, [r7, #8]
 8012396:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8012398:	2300      	movs	r3, #0
 801239a:	617b      	str	r3, [r7, #20]
    if (err) {
 801239c:	697b      	ldr	r3, [r7, #20]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d001      	beq.n	80123a6 <lfs_stat+0x1a>
        return err;
 80123a2:	697b      	ldr	r3, [r7, #20]
 80123a4:	e006      	b.n	80123b4 <lfs_stat+0x28>
    }
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);

    err = lfs_rawstat(lfs, path, info);
 80123a6:	687a      	ldr	r2, [r7, #4]
 80123a8:	68b9      	ldr	r1, [r7, #8]
 80123aa:	68f8      	ldr	r0, [r7, #12]
 80123ac:	f7fe fe00 	bl	8010fb0 <lfs_rawstat>
 80123b0:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80123b2:	697b      	ldr	r3, [r7, #20]
}
 80123b4:	4618      	mov	r0, r3
 80123b6:	3718      	adds	r7, #24
 80123b8:	46bd      	mov	sp, r7
 80123ba:	bd80      	pop	{r7, pc}

080123bc <lfs_file_open>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 80123bc:	b580      	push	{r7, lr}
 80123be:	b086      	sub	sp, #24
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	60f8      	str	r0, [r7, #12]
 80123c4:	60b9      	str	r1, [r7, #8]
 80123c6:	607a      	str	r2, [r7, #4]
 80123c8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80123ca:	2300      	movs	r3, #0
 80123cc:	617b      	str	r3, [r7, #20]
    if (err) {
 80123ce:	697b      	ldr	r3, [r7, #20]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d001      	beq.n	80123d8 <lfs_file_open+0x1c>
        return err;
 80123d4:	697b      	ldr	r3, [r7, #20]
 80123d6:	e01a      	b.n	801240e <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123dc:	68b9      	ldr	r1, [r7, #8]
 80123de:	4618      	mov	r0, r3
 80123e0:	f7fa fdd8 	bl	800cf94 <lfs_mlist_isopen>
 80123e4:	4603      	mov	r3, r0
 80123e6:	f083 0301 	eor.w	r3, r3, #1
 80123ea:	b2db      	uxtb	r3, r3
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d106      	bne.n	80123fe <lfs_file_open+0x42>
 80123f0:	4b09      	ldr	r3, [pc, #36]	; (8012418 <lfs_file_open+0x5c>)
 80123f2:	4a0a      	ldr	r2, [pc, #40]	; (801241c <lfs_file_open+0x60>)
 80123f4:	f241 31e8 	movw	r1, #5096	; 0x13e8
 80123f8:	4809      	ldr	r0, [pc, #36]	; (8012420 <lfs_file_open+0x64>)
 80123fa:	f010 ff9b 	bl	8023334 <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	687a      	ldr	r2, [r7, #4]
 8012402:	68b9      	ldr	r1, [r7, #8]
 8012404:	68f8      	ldr	r0, [r7, #12]
 8012406:	f7fe f859 	bl	80104bc <lfs_file_rawopen>
 801240a:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 801240c:	697b      	ldr	r3, [r7, #20]
}
 801240e:	4618      	mov	r0, r3
 8012410:	3718      	adds	r7, #24
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
 8012416:	bf00      	nop
 8012418:	08027550 	.word	0x08027550
 801241c:	0802adac 	.word	0x0802adac
 8012420:	08026e18 	.word	0x08026e18

08012424 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8012424:	b580      	push	{r7, lr}
 8012426:	b084      	sub	sp, #16
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
 801242c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801242e:	2300      	movs	r3, #0
 8012430:	60fb      	str	r3, [r7, #12]
    if (err) {
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d001      	beq.n	801243c <lfs_file_close+0x18>
        return err;
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	e015      	b.n	8012468 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012440:	6839      	ldr	r1, [r7, #0]
 8012442:	4618      	mov	r0, r3
 8012444:	f7fa fda6 	bl	800cf94 <lfs_mlist_isopen>
 8012448:	4603      	mov	r3, r0
 801244a:	2b00      	cmp	r3, #0
 801244c:	d106      	bne.n	801245c <lfs_file_close+0x38>
 801244e:	4b08      	ldr	r3, [pc, #32]	; (8012470 <lfs_file_close+0x4c>)
 8012450:	4a08      	ldr	r2, [pc, #32]	; (8012474 <lfs_file_close+0x50>)
 8012452:	f241 410b 	movw	r1, #5131	; 0x140b
 8012456:	4808      	ldr	r0, [pc, #32]	; (8012478 <lfs_file_close+0x54>)
 8012458:	f010 ff6c 	bl	8023334 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 801245c:	6839      	ldr	r1, [r7, #0]
 801245e:	6878      	ldr	r0, [r7, #4]
 8012460:	f7fe f844 	bl	80104ec <lfs_file_rawclose>
 8012464:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8012466:	68fb      	ldr	r3, [r7, #12]
}
 8012468:	4618      	mov	r0, r3
 801246a:	3710      	adds	r7, #16
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}
 8012470:	08027588 	.word	0x08027588
 8012474:	0802adbc 	.word	0x0802adbc
 8012478:	08026e18 	.word	0x08026e18

0801247c <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 801247c:	b580      	push	{r7, lr}
 801247e:	b086      	sub	sp, #24
 8012480:	af00      	add	r7, sp, #0
 8012482:	60f8      	str	r0, [r7, #12]
 8012484:	60b9      	str	r1, [r7, #8]
 8012486:	607a      	str	r2, [r7, #4]
 8012488:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801248a:	2300      	movs	r3, #0
 801248c:	617b      	str	r3, [r7, #20]
    if (err) {
 801248e:	697b      	ldr	r3, [r7, #20]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d001      	beq.n	8012498 <lfs_file_read+0x1c>
        return err;
 8012494:	697b      	ldr	r3, [r7, #20]
 8012496:	e017      	b.n	80124c8 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801249c:	68b9      	ldr	r1, [r7, #8]
 801249e:	4618      	mov	r0, r3
 80124a0:	f7fa fd78 	bl	800cf94 <lfs_mlist_isopen>
 80124a4:	4603      	mov	r3, r0
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d106      	bne.n	80124b8 <lfs_file_read+0x3c>
 80124aa:	4b09      	ldr	r3, [pc, #36]	; (80124d0 <lfs_file_read+0x54>)
 80124ac:	4a09      	ldr	r2, [pc, #36]	; (80124d4 <lfs_file_read+0x58>)
 80124ae:	f241 412d 	movw	r1, #5165	; 0x142d
 80124b2:	4809      	ldr	r0, [pc, #36]	; (80124d8 <lfs_file_read+0x5c>)
 80124b4:	f010 ff3e 	bl	8023334 <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	687a      	ldr	r2, [r7, #4]
 80124bc:	68b9      	ldr	r1, [r7, #8]
 80124be:	68f8      	ldr	r0, [r7, #12]
 80124c0:	f7fe fa8e 	bl	80109e0 <lfs_file_rawread>
 80124c4:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 80124c6:	693b      	ldr	r3, [r7, #16]
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	3718      	adds	r7, #24
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}
 80124d0:	08027588 	.word	0x08027588
 80124d4:	0802adcc 	.word	0x0802adcc
 80124d8:	08026e18 	.word	0x08026e18

080124dc <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80124dc:	b580      	push	{r7, lr}
 80124de:	b086      	sub	sp, #24
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	60f8      	str	r0, [r7, #12]
 80124e4:	60b9      	str	r1, [r7, #8]
 80124e6:	607a      	str	r2, [r7, #4]
 80124e8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80124ea:	2300      	movs	r3, #0
 80124ec:	617b      	str	r3, [r7, #20]
    if (err) {
 80124ee:	697b      	ldr	r3, [r7, #20]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d001      	beq.n	80124f8 <lfs_file_write+0x1c>
        return err;
 80124f4:	697b      	ldr	r3, [r7, #20]
 80124f6:	e017      	b.n	8012528 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124fc:	68b9      	ldr	r1, [r7, #8]
 80124fe:	4618      	mov	r0, r3
 8012500:	f7fa fd48 	bl	800cf94 <lfs_mlist_isopen>
 8012504:	4603      	mov	r3, r0
 8012506:	2b00      	cmp	r3, #0
 8012508:	d106      	bne.n	8012518 <lfs_file_write+0x3c>
 801250a:	4b09      	ldr	r3, [pc, #36]	; (8012530 <lfs_file_write+0x54>)
 801250c:	4a09      	ldr	r2, [pc, #36]	; (8012534 <lfs_file_write+0x58>)
 801250e:	f241 413f 	movw	r1, #5183	; 0x143f
 8012512:	4809      	ldr	r0, [pc, #36]	; (8012538 <lfs_file_write+0x5c>)
 8012514:	f010 ff0e 	bl	8023334 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	687a      	ldr	r2, [r7, #4]
 801251c:	68b9      	ldr	r1, [r7, #8]
 801251e:	68f8      	ldr	r0, [r7, #12]
 8012520:	f7fe fb52 	bl	8010bc8 <lfs_file_rawwrite>
 8012524:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8012526:	693b      	ldr	r3, [r7, #16]
}
 8012528:	4618      	mov	r0, r3
 801252a:	3718      	adds	r7, #24
 801252c:	46bd      	mov	sp, r7
 801252e:	bd80      	pop	{r7, pc}
 8012530:	08027588 	.word	0x08027588
 8012534:	0802addc 	.word	0x0802addc
 8012538:	08026e18 	.word	0x08026e18

0801253c <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 801253c:	b580      	push	{r7, lr}
 801253e:	b086      	sub	sp, #24
 8012540:	af00      	add	r7, sp, #0
 8012542:	60f8      	str	r0, [r7, #12]
 8012544:	60b9      	str	r1, [r7, #8]
 8012546:	607a      	str	r2, [r7, #4]
 8012548:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801254a:	2300      	movs	r3, #0
 801254c:	617b      	str	r3, [r7, #20]
    if (err) {
 801254e:	697b      	ldr	r3, [r7, #20]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d001      	beq.n	8012558 <lfs_file_seek+0x1c>
        return err;
 8012554:	697b      	ldr	r3, [r7, #20]
 8012556:	e017      	b.n	8012588 <lfs_file_seek+0x4c>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801255c:	68b9      	ldr	r1, [r7, #8]
 801255e:	4618      	mov	r0, r3
 8012560:	f7fa fd18 	bl	800cf94 <lfs_mlist_isopen>
 8012564:	4603      	mov	r3, r0
 8012566:	2b00      	cmp	r3, #0
 8012568:	d106      	bne.n	8012578 <lfs_file_seek+0x3c>
 801256a:	4b09      	ldr	r3, [pc, #36]	; (8012590 <lfs_file_seek+0x54>)
 801256c:	4a09      	ldr	r2, [pc, #36]	; (8012594 <lfs_file_seek+0x58>)
 801256e:	f241 4151 	movw	r1, #5201	; 0x1451
 8012572:	4809      	ldr	r0, [pc, #36]	; (8012598 <lfs_file_seek+0x5c>)
 8012574:	f010 fede 	bl	8023334 <__assert_func>

    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
 8012578:	683b      	ldr	r3, [r7, #0]
 801257a:	687a      	ldr	r2, [r7, #4]
 801257c:	68b9      	ldr	r1, [r7, #8]
 801257e:	68f8      	ldr	r0, [r7, #12]
 8012580:	f7fe fcb6 	bl	8010ef0 <lfs_file_rawseek>
 8012584:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8012586:	693b      	ldr	r3, [r7, #16]
}
 8012588:	4618      	mov	r0, r3
 801258a:	3718      	adds	r7, #24
 801258c:	46bd      	mov	sp, r7
 801258e:	bd80      	pop	{r7, pc}
 8012590:	08027588 	.word	0x08027588
 8012594:	0802adec 	.word	0x0802adec
 8012598:	08026e18 	.word	0x08026e18

0801259c <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 801259c:	b580      	push	{r7, lr}
 801259e:	b084      	sub	sp, #16
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
 80125a4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80125a6:	2300      	movs	r3, #0
 80125a8:	60fb      	str	r3, [r7, #12]
    if (err) {
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d001      	beq.n	80125b4 <lfs_mkdir+0x18>
        return err;
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	e005      	b.n	80125c0 <lfs_mkdir+0x24>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawmkdir(lfs, path);
 80125b4:	6839      	ldr	r1, [r7, #0]
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f7fd f942 	bl	800f840 <lfs_rawmkdir>
 80125bc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80125be:	68fb      	ldr	r3, [r7, #12]
}
 80125c0:	4618      	mov	r0, r3
 80125c2:	3710      	adds	r7, #16
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}

080125c8 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b086      	sub	sp, #24
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	60f8      	str	r0, [r7, #12]
 80125d0:	60b9      	str	r1, [r7, #8]
 80125d2:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 80125d4:	2300      	movs	r3, #0
 80125d6:	617b      	str	r3, [r7, #20]
    if (err) {
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d001      	beq.n	80125e2 <lfs_dir_open+0x1a>
        return err;
 80125de:	697b      	ldr	r3, [r7, #20]
 80125e0:	e019      	b.n	8012616 <lfs_dir_open+0x4e>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125e6:	68b9      	ldr	r1, [r7, #8]
 80125e8:	4618      	mov	r0, r3
 80125ea:	f7fa fcd3 	bl	800cf94 <lfs_mlist_isopen>
 80125ee:	4603      	mov	r3, r0
 80125f0:	f083 0301 	eor.w	r3, r3, #1
 80125f4:	b2db      	uxtb	r3, r3
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d106      	bne.n	8012608 <lfs_dir_open+0x40>
 80125fa:	4b09      	ldr	r3, [pc, #36]	; (8012620 <lfs_dir_open+0x58>)
 80125fc:	4a09      	ldr	r2, [pc, #36]	; (8012624 <lfs_dir_open+0x5c>)
 80125fe:	f241 41ae 	movw	r1, #5294	; 0x14ae
 8012602:	4809      	ldr	r0, [pc, #36]	; (8012628 <lfs_dir_open+0x60>)
 8012604:	f010 fe96 	bl	8023334 <__assert_func>

    err = lfs_dir_rawopen(lfs, dir, path);
 8012608:	687a      	ldr	r2, [r7, #4]
 801260a:	68b9      	ldr	r1, [r7, #8]
 801260c:	68f8      	ldr	r0, [r7, #12]
 801260e:	f7fd fa57 	bl	800fac0 <lfs_dir_rawopen>
 8012612:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8012614:	697b      	ldr	r3, [r7, #20]
}
 8012616:	4618      	mov	r0, r3
 8012618:	3718      	adds	r7, #24
 801261a:	46bd      	mov	sp, r7
 801261c:	bd80      	pop	{r7, pc}
 801261e:	bf00      	nop
 8012620:	080275c0 	.word	0x080275c0
 8012624:	0802adfc 	.word	0x0802adfc
 8012628:	08026e18 	.word	0x08026e18

0801262c <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 801262c:	b580      	push	{r7, lr}
 801262e:	b084      	sub	sp, #16
 8012630:	af00      	add	r7, sp, #0
 8012632:	6078      	str	r0, [r7, #4]
 8012634:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8012636:	2300      	movs	r3, #0
 8012638:	60fb      	str	r3, [r7, #12]
    if (err) {
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d001      	beq.n	8012644 <lfs_dir_close+0x18>
        return err;
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	e005      	b.n	8012650 <lfs_dir_close+0x24>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_rawclose(lfs, dir);
 8012644:	6839      	ldr	r1, [r7, #0]
 8012646:	6878      	ldr	r0, [r7, #4]
 8012648:	f7fd fab4 	bl	800fbb4 <lfs_dir_rawclose>
 801264c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 801264e:	68fb      	ldr	r3, [r7, #12]
}
 8012650:	4618      	mov	r0, r3
 8012652:	3710      	adds	r7, #16
 8012654:	46bd      	mov	sp, r7
 8012656:	bd80      	pop	{r7, pc}

08012658 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8012658:	b580      	push	{r7, lr}
 801265a:	b086      	sub	sp, #24
 801265c:	af00      	add	r7, sp, #0
 801265e:	60f8      	str	r0, [r7, #12]
 8012660:	60b9      	str	r1, [r7, #8]
 8012662:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8012664:	2300      	movs	r3, #0
 8012666:	617b      	str	r3, [r7, #20]
    if (err) {
 8012668:	697b      	ldr	r3, [r7, #20]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d001      	beq.n	8012672 <lfs_dir_read+0x1a>
        return err;
 801266e:	697b      	ldr	r3, [r7, #20]
 8012670:	e006      	b.n	8012680 <lfs_dir_read+0x28>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_rawread(lfs, dir, info);
 8012672:	687a      	ldr	r2, [r7, #4]
 8012674:	68b9      	ldr	r1, [r7, #8]
 8012676:	68f8      	ldr	r0, [r7, #12]
 8012678:	f7fd faaa 	bl	800fbd0 <lfs_dir_rawread>
 801267c:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 801267e:	697b      	ldr	r3, [r7, #20]
}
 8012680:	4618      	mov	r0, r3
 8012682:	3718      	adds	r7, #24
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}

08012688 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8012688:	b480      	push	{r7}
 801268a:	b087      	sub	sp, #28
 801268c:	af00      	add	r7, sp, #0
 801268e:	60f8      	str	r0, [r7, #12]
 8012690:	60b9      	str	r1, [r7, #8]
 8012692:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8012698:	2300      	movs	r3, #0
 801269a:	617b      	str	r3, [r7, #20]
 801269c:	e024      	b.n	80126e8 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	091a      	lsrs	r2, r3, #4
 80126a2:	6939      	ldr	r1, [r7, #16]
 80126a4:	697b      	ldr	r3, [r7, #20]
 80126a6:	440b      	add	r3, r1
 80126a8:	781b      	ldrb	r3, [r3, #0]
 80126aa:	4619      	mov	r1, r3
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	404b      	eors	r3, r1
 80126b0:	f003 030f 	and.w	r3, r3, #15
 80126b4:	4912      	ldr	r1, [pc, #72]	; (8012700 <lfs_crc+0x78>)
 80126b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80126ba:	4053      	eors	r3, r2
 80126bc:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	091a      	lsrs	r2, r3, #4
 80126c2:	6939      	ldr	r1, [r7, #16]
 80126c4:	697b      	ldr	r3, [r7, #20]
 80126c6:	440b      	add	r3, r1
 80126c8:	781b      	ldrb	r3, [r3, #0]
 80126ca:	091b      	lsrs	r3, r3, #4
 80126cc:	b2db      	uxtb	r3, r3
 80126ce:	4619      	mov	r1, r3
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	404b      	eors	r3, r1
 80126d4:	f003 030f 	and.w	r3, r3, #15
 80126d8:	4909      	ldr	r1, [pc, #36]	; (8012700 <lfs_crc+0x78>)
 80126da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80126de:	4053      	eors	r3, r2
 80126e0:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 80126e2:	697b      	ldr	r3, [r7, #20]
 80126e4:	3301      	adds	r3, #1
 80126e6:	617b      	str	r3, [r7, #20]
 80126e8:	697a      	ldr	r2, [r7, #20]
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	429a      	cmp	r2, r3
 80126ee:	d3d6      	bcc.n	801269e <lfs_crc+0x16>
    }

    return crc;
 80126f0:	68fb      	ldr	r3, [r7, #12]
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	371c      	adds	r7, #28
 80126f6:	46bd      	mov	sp, r7
 80126f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fc:	4770      	bx	lr
 80126fe:	bf00      	nop
 8012700:	0802ae0c 	.word	0x0802ae0c

08012704 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b084      	sub	sp, #16
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
 801270c:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	330c      	adds	r3, #12
 8012714:	461a      	mov	r2, r3
 8012716:	6839      	ldr	r1, [r7, #0]
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f002 fa59 	bl	8014bd0 <tcpip_send_msg_wait_sem>
 801271e:	4603      	mov	r3, r0
 8012720:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8012722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d103      	bne.n	8012732 <netconn_apimsg+0x2e>
    return apimsg->err;
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012730:	e001      	b.n	8012736 <netconn_apimsg+0x32>
  }
  return err;
 8012732:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012736:	4618      	mov	r0, r3
 8012738:	3710      	adds	r7, #16
 801273a:	46bd      	mov	sp, r7
 801273c:	bd80      	pop	{r7, pc}
	...

08012740 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8012740:	b580      	push	{r7, lr}
 8012742:	b08c      	sub	sp, #48	; 0x30
 8012744:	af00      	add	r7, sp, #0
 8012746:	4603      	mov	r3, r0
 8012748:	603a      	str	r2, [r7, #0]
 801274a:	71fb      	strb	r3, [r7, #7]
 801274c:	460b      	mov	r3, r1
 801274e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8012750:	79fb      	ldrb	r3, [r7, #7]
 8012752:	6839      	ldr	r1, [r7, #0]
 8012754:	4618      	mov	r0, r3
 8012756:	f001 f949 	bl	80139ec <netconn_alloc>
 801275a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 801275c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801275e:	2b00      	cmp	r3, #0
 8012760:	d054      	beq.n	801280c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8012762:	79bb      	ldrb	r3, [r7, #6]
 8012764:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8012766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012768:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 801276a:	f107 0308 	add.w	r3, r7, #8
 801276e:	4619      	mov	r1, r3
 8012770:	4829      	ldr	r0, [pc, #164]	; (8012818 <netconn_new_with_proto_and_callback+0xd8>)
 8012772:	f7ff ffc7 	bl	8012704 <netconn_apimsg>
 8012776:	4603      	mov	r3, r0
 8012778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 801277c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012780:	2b00      	cmp	r3, #0
 8012782:	d043      	beq.n	801280c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8012784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012786:	685b      	ldr	r3, [r3, #4]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d005      	beq.n	8012798 <netconn_new_with_proto_and_callback+0x58>
 801278c:	4b23      	ldr	r3, [pc, #140]	; (801281c <netconn_new_with_proto_and_callback+0xdc>)
 801278e:	22a3      	movs	r2, #163	; 0xa3
 8012790:	4923      	ldr	r1, [pc, #140]	; (8012820 <netconn_new_with_proto_and_callback+0xe0>)
 8012792:	4824      	ldr	r0, [pc, #144]	; (8012824 <netconn_new_with_proto_and_callback+0xe4>)
 8012794:	f011 fc20 	bl	8023fd8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8012798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801279a:	3310      	adds	r3, #16
 801279c:	4618      	mov	r0, r3
 801279e:	f00f fb00 	bl	8021da2 <sys_mbox_valid>
 80127a2:	4603      	mov	r3, r0
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d105      	bne.n	80127b4 <netconn_new_with_proto_and_callback+0x74>
 80127a8:	4b1c      	ldr	r3, [pc, #112]	; (801281c <netconn_new_with_proto_and_callback+0xdc>)
 80127aa:	22a4      	movs	r2, #164	; 0xa4
 80127ac:	491e      	ldr	r1, [pc, #120]	; (8012828 <netconn_new_with_proto_and_callback+0xe8>)
 80127ae:	481d      	ldr	r0, [pc, #116]	; (8012824 <netconn_new_with_proto_and_callback+0xe4>)
 80127b0:	f011 fc12 	bl	8023fd8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80127b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127b6:	3314      	adds	r3, #20
 80127b8:	4618      	mov	r0, r3
 80127ba:	f00f faf2 	bl	8021da2 <sys_mbox_valid>
 80127be:	4603      	mov	r3, r0
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d005      	beq.n	80127d0 <netconn_new_with_proto_and_callback+0x90>
 80127c4:	4b15      	ldr	r3, [pc, #84]	; (801281c <netconn_new_with_proto_and_callback+0xdc>)
 80127c6:	22a6      	movs	r2, #166	; 0xa6
 80127c8:	4918      	ldr	r1, [pc, #96]	; (801282c <netconn_new_with_proto_and_callback+0xec>)
 80127ca:	4816      	ldr	r0, [pc, #88]	; (8012824 <netconn_new_with_proto_and_callback+0xe4>)
 80127cc:	f011 fc04 	bl	8023fd8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80127d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d2:	330c      	adds	r3, #12
 80127d4:	4618      	mov	r0, r3
 80127d6:	f00f fb75 	bl	8021ec4 <sys_sem_valid>
 80127da:	4603      	mov	r3, r0
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d105      	bne.n	80127ec <netconn_new_with_proto_and_callback+0xac>
 80127e0:	4b0e      	ldr	r3, [pc, #56]	; (801281c <netconn_new_with_proto_and_callback+0xdc>)
 80127e2:	22a9      	movs	r2, #169	; 0xa9
 80127e4:	4912      	ldr	r1, [pc, #72]	; (8012830 <netconn_new_with_proto_and_callback+0xf0>)
 80127e6:	480f      	ldr	r0, [pc, #60]	; (8012824 <netconn_new_with_proto_and_callback+0xe4>)
 80127e8:	f011 fbf6 	bl	8023fd8 <iprintf>
      sys_sem_free(&conn->op_completed);
 80127ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ee:	330c      	adds	r3, #12
 80127f0:	4618      	mov	r0, r3
 80127f2:	f00f fb5a 	bl	8021eaa <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80127f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f8:	3310      	adds	r3, #16
 80127fa:	4618      	mov	r0, r3
 80127fc:	f00f fa4a 	bl	8021c94 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8012800:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012802:	2007      	movs	r0, #7
 8012804:	f002 ff92 	bl	801572c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8012808:	2300      	movs	r3, #0
 801280a:	e000      	b.n	801280e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 801280c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801280e:	4618      	mov	r0, r3
 8012810:	3730      	adds	r7, #48	; 0x30
 8012812:	46bd      	mov	sp, r7
 8012814:	bd80      	pop	{r7, pc}
 8012816:	bf00      	nop
 8012818:	080139c1 	.word	0x080139c1
 801281c:	080275f8 	.word	0x080275f8
 8012820:	0802762c 	.word	0x0802762c
 8012824:	08027650 	.word	0x08027650
 8012828:	08027678 	.word	0x08027678
 801282c:	08027690 	.word	0x08027690
 8012830:	080276b4 	.word	0x080276b4

08012834 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b08c      	sub	sp, #48	; 0x30
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d101      	bne.n	8012846 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8012842:	2300      	movs	r3, #0
 8012844:	e014      	b.n	8012870 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801284a:	2329      	movs	r3, #41	; 0x29
 801284c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 801284e:	f107 030c 	add.w	r3, r7, #12
 8012852:	4619      	mov	r1, r3
 8012854:	4808      	ldr	r0, [pc, #32]	; (8012878 <netconn_prepare_delete+0x44>)
 8012856:	f7ff ff55 	bl	8012704 <netconn_apimsg>
 801285a:	4603      	mov	r3, r0
 801285c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8012860:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8012864:	2b00      	cmp	r3, #0
 8012866:	d002      	beq.n	801286e <netconn_prepare_delete+0x3a>
    return err;
 8012868:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801286c:	e000      	b.n	8012870 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 801286e:	2300      	movs	r3, #0
}
 8012870:	4618      	mov	r0, r3
 8012872:	3730      	adds	r7, #48	; 0x30
 8012874:	46bd      	mov	sp, r7
 8012876:	bd80      	pop	{r7, pc}
 8012878:	08013f35 	.word	0x08013f35

0801287c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b084      	sub	sp, #16
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d101      	bne.n	801288e <netconn_delete+0x12>
    return ERR_OK;
 801288a:	2300      	movs	r3, #0
 801288c:	e00d      	b.n	80128aa <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 801288e:	6878      	ldr	r0, [r7, #4]
 8012890:	f7ff ffd0 	bl	8012834 <netconn_prepare_delete>
 8012894:	4603      	mov	r3, r0
 8012896:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8012898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d102      	bne.n	80128a6 <netconn_delete+0x2a>
    netconn_free(conn);
 80128a0:	6878      	ldr	r0, [r7, #4]
 80128a2:	f001 f915 	bl	8013ad0 <netconn_free>
  }
  return err;
 80128a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80128aa:	4618      	mov	r0, r3
 80128ac:	3710      	adds	r7, #16
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd80      	pop	{r7, pc}
	...

080128b4 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b08e      	sub	sp, #56	; 0x38
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	60f8      	str	r0, [r7, #12]
 80128bc:	60b9      	str	r1, [r7, #8]
 80128be:	4613      	mov	r3, r2
 80128c0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d109      	bne.n	80128dc <netconn_bind+0x28>
 80128c8:	4b11      	ldr	r3, [pc, #68]	; (8012910 <netconn_bind+0x5c>)
 80128ca:	f44f 729c 	mov.w	r2, #312	; 0x138
 80128ce:	4911      	ldr	r1, [pc, #68]	; (8012914 <netconn_bind+0x60>)
 80128d0:	4811      	ldr	r0, [pc, #68]	; (8012918 <netconn_bind+0x64>)
 80128d2:	f011 fb81 	bl	8023fd8 <iprintf>
 80128d6:	f06f 030f 	mvn.w	r3, #15
 80128da:	e015      	b.n	8012908 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80128dc:	68bb      	ldr	r3, [r7, #8]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d101      	bne.n	80128e6 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80128e2:	4b0e      	ldr	r3, [pc, #56]	; (801291c <netconn_bind+0x68>)
 80128e4:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80128ea:	68bb      	ldr	r3, [r7, #8]
 80128ec:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80128ee:	88fb      	ldrh	r3, [r7, #6]
 80128f0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80128f2:	f107 0314 	add.w	r3, r7, #20
 80128f6:	4619      	mov	r1, r3
 80128f8:	4809      	ldr	r0, [pc, #36]	; (8012920 <netconn_bind+0x6c>)
 80128fa:	f7ff ff03 	bl	8012704 <netconn_apimsg>
 80128fe:	4603      	mov	r3, r0
 8012900:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8012904:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8012908:	4618      	mov	r0, r3
 801290a:	3738      	adds	r7, #56	; 0x38
 801290c:	46bd      	mov	sp, r7
 801290e:	bd80      	pop	{r7, pc}
 8012910:	080275f8 	.word	0x080275f8
 8012914:	08027730 	.word	0x08027730
 8012918:	08027650 	.word	0x08027650
 801291c:	0802af70 	.word	0x0802af70
 8012920:	08014101 	.word	0x08014101

08012924 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b08c      	sub	sp, #48	; 0x30
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
 801292c:	460b      	mov	r3, r1
 801292e:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d109      	bne.n	801294a <netconn_listen_with_backlog+0x26>
 8012936:	4b0d      	ldr	r3, [pc, #52]	; (801296c <netconn_listen_with_backlog+0x48>)
 8012938:	f240 12bb 	movw	r2, #443	; 0x1bb
 801293c:	490c      	ldr	r1, [pc, #48]	; (8012970 <netconn_listen_with_backlog+0x4c>)
 801293e:	480d      	ldr	r0, [pc, #52]	; (8012974 <netconn_listen_with_backlog+0x50>)
 8012940:	f011 fb4a 	bl	8023fd8 <iprintf>
 8012944:	f06f 030f 	mvn.w	r3, #15
 8012948:	e00c      	b.n	8012964 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 801294e:	f107 030c 	add.w	r3, r7, #12
 8012952:	4619      	mov	r1, r3
 8012954:	4808      	ldr	r0, [pc, #32]	; (8012978 <netconn_listen_with_backlog+0x54>)
 8012956:	f7ff fed5 	bl	8012704 <netconn_apimsg>
 801295a:	4603      	mov	r3, r0
 801295c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8012960:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8012964:	4618      	mov	r0, r3
 8012966:	3730      	adds	r7, #48	; 0x30
 8012968:	46bd      	mov	sp, r7
 801296a:	bd80      	pop	{r7, pc}
 801296c:	080275f8 	.word	0x080275f8
 8012970:	080277b0 	.word	0x080277b0
 8012974:	08027650 	.word	0x08027650
 8012978:	08014175 	.word	0x08014175

0801297c <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b086      	sub	sp, #24
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
 8012984:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d109      	bne.n	80129a0 <netconn_accept+0x24>
 801298c:	4b42      	ldr	r3, [pc, #264]	; (8012a98 <netconn_accept+0x11c>)
 801298e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8012992:	4942      	ldr	r1, [pc, #264]	; (8012a9c <netconn_accept+0x120>)
 8012994:	4842      	ldr	r0, [pc, #264]	; (8012aa0 <netconn_accept+0x124>)
 8012996:	f011 fb1f 	bl	8023fd8 <iprintf>
 801299a:	f06f 030f 	mvn.w	r3, #15
 801299e:	e077      	b.n	8012a90 <netconn_accept+0x114>
  *new_conn = NULL;
 80129a0:	683b      	ldr	r3, [r7, #0]
 80129a2:	2200      	movs	r2, #0
 80129a4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d109      	bne.n	80129c0 <netconn_accept+0x44>
 80129ac:	4b3a      	ldr	r3, [pc, #232]	; (8012a98 <netconn_accept+0x11c>)
 80129ae:	f240 12e3 	movw	r2, #483	; 0x1e3
 80129b2:	493c      	ldr	r1, [pc, #240]	; (8012aa4 <netconn_accept+0x128>)
 80129b4:	483a      	ldr	r0, [pc, #232]	; (8012aa0 <netconn_accept+0x124>)
 80129b6:	f011 fb0f 	bl	8023fd8 <iprintf>
 80129ba:	f06f 030f 	mvn.w	r3, #15
 80129be:	e067      	b.n	8012a90 <netconn_accept+0x114>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80129c0:	6878      	ldr	r0, [r7, #4]
 80129c2:	f000 fb88 	bl	80130d6 <netconn_err>
 80129c6:	4603      	mov	r3, r0
 80129c8:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80129ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d002      	beq.n	80129d8 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80129d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80129d6:	e05b      	b.n	8012a90 <netconn_accept+0x114>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	3314      	adds	r3, #20
 80129dc:	4618      	mov	r0, r3
 80129de:	f00f f9e0 	bl	8021da2 <sys_mbox_valid>
 80129e2:	4603      	mov	r3, r0
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d006      	beq.n	80129f6 <netconn_accept+0x7a>
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80129ee:	f003 0301 	and.w	r3, r3, #1
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d002      	beq.n	80129fc <netconn_accept+0x80>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 80129f6:	f06f 030e 	mvn.w	r3, #14
 80129fa:	e049      	b.n	8012a90 <netconn_accept+0x114>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a02:	f003 0302 	and.w	r3, r3, #2
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d00e      	beq.n	8012a28 <netconn_accept+0xac>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	3314      	adds	r3, #20
 8012a0e:	f107 020c 	add.w	r2, r7, #12
 8012a12:	4611      	mov	r1, r2
 8012a14:	4618      	mov	r0, r3
 8012a16:	f00f f9a8 	bl	8021d6a <sys_arch_mbox_tryfetch>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012a20:	d113      	bne.n	8012a4a <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8012a22:	f06f 0306 	mvn.w	r3, #6
 8012a26:	e033      	b.n	8012a90 <netconn_accept+0x114>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	f103 0014 	add.w	r0, r3, #20
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	69da      	ldr	r2, [r3, #28]
 8012a32:	f107 030c 	add.w	r3, r7, #12
 8012a36:	4619      	mov	r1, r3
 8012a38:	f00f f958 	bl	8021cec <sys_arch_mbox_fetch>
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012a42:	d102      	bne.n	8012a4a <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 8012a44:	f06f 0302 	mvn.w	r3, #2
 8012a48:	e022      	b.n	8012a90 <netconn_accept+0x114>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d005      	beq.n	8012a5e <netconn_accept+0xe2>
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a56:	2200      	movs	r2, #0
 8012a58:	2101      	movs	r1, #1
 8012a5a:	6878      	ldr	r0, [r7, #4]
 8012a5c:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	f107 0213 	add.w	r2, r7, #19
 8012a64:	4611      	mov	r1, r2
 8012a66:	4618      	mov	r0, r3
 8012a68:	f000 fb86 	bl	8013178 <lwip_netconn_is_err_msg>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d002      	beq.n	8012a78 <netconn_accept+0xfc>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8012a72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012a76:	e00b      	b.n	8012a90 <netconn_accept+0x114>
  }
  if (accept_ptr == NULL) {
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d102      	bne.n	8012a84 <netconn_accept+0x108>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8012a7e:	f06f 030e 	mvn.w	r3, #14
 8012a82:	e005      	b.n	8012a90 <netconn_accept+0x114>
  }
  newconn = (struct netconn *)accept_ptr;
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	697a      	ldr	r2, [r7, #20]
 8012a8c:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8012a8e:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8012a90:	4618      	mov	r0, r3
 8012a92:	3718      	adds	r7, #24
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}
 8012a98:	080275f8 	.word	0x080275f8
 8012a9c:	080277d0 	.word	0x080277d0
 8012aa0:	08027650 	.word	0x08027650
 8012aa4:	080277f0 	.word	0x080277f0

08012aa8 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b088      	sub	sp, #32
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	60f8      	str	r0, [r7, #12]
 8012ab0:	60b9      	str	r1, [r7, #8]
 8012ab2:	4613      	mov	r3, r2
 8012ab4:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d109      	bne.n	8012ad4 <netconn_recv_data+0x2c>
 8012ac0:	4b5e      	ldr	r3, [pc, #376]	; (8012c3c <netconn_recv_data+0x194>)
 8012ac2:	f44f 7212 	mov.w	r2, #584	; 0x248
 8012ac6:	495e      	ldr	r1, [pc, #376]	; (8012c40 <netconn_recv_data+0x198>)
 8012ac8:	485e      	ldr	r0, [pc, #376]	; (8012c44 <netconn_recv_data+0x19c>)
 8012aca:	f011 fa85 	bl	8023fd8 <iprintf>
 8012ace:	f06f 030f 	mvn.w	r3, #15
 8012ad2:	e0ae      	b.n	8012c32 <netconn_recv_data+0x18a>
  *new_buf = NULL;
 8012ad4:	68bb      	ldr	r3, [r7, #8]
 8012ad6:	2200      	movs	r2, #0
 8012ad8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d109      	bne.n	8012af4 <netconn_recv_data+0x4c>
 8012ae0:	4b56      	ldr	r3, [pc, #344]	; (8012c3c <netconn_recv_data+0x194>)
 8012ae2:	f240 224a 	movw	r2, #586	; 0x24a
 8012ae6:	4958      	ldr	r1, [pc, #352]	; (8012c48 <netconn_recv_data+0x1a0>)
 8012ae8:	4856      	ldr	r0, [pc, #344]	; (8012c44 <netconn_recv_data+0x19c>)
 8012aea:	f011 fa75 	bl	8023fd8 <iprintf>
 8012aee:	f06f 030f 	mvn.w	r3, #15
 8012af2:	e09e      	b.n	8012c32 <netconn_recv_data+0x18a>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	3310      	adds	r3, #16
 8012af8:	4618      	mov	r0, r3
 8012afa:	f00f f952 	bl	8021da2 <sys_mbox_valid>
 8012afe:	4603      	mov	r3, r0
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d10e      	bne.n	8012b22 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8012b04:	68f8      	ldr	r0, [r7, #12]
 8012b06:	f000 fae6 	bl	80130d6 <netconn_err>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8012b0e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d002      	beq.n	8012b1c <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8012b16:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8012b1a:	e08a      	b.n	8012c32 <netconn_recv_data+0x18a>
    }
    return ERR_CONN;
 8012b1c:	f06f 030a 	mvn.w	r3, #10
 8012b20:	e087      	b.n	8012c32 <netconn_recv_data+0x18a>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b28:	f003 0302 	and.w	r3, r3, #2
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d110      	bne.n	8012b52 <netconn_recv_data+0xaa>
 8012b30:	79fb      	ldrb	r3, [r7, #7]
 8012b32:	f003 0304 	and.w	r3, r3, #4
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d10b      	bne.n	8012b52 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b40:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d104      	bne.n	8012b52 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d024      	beq.n	8012b9c <netconn_recv_data+0xf4>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	3310      	adds	r3, #16
 8012b56:	f107 0218 	add.w	r2, r7, #24
 8012b5a:	4611      	mov	r1, r2
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	f00f f904 	bl	8021d6a <sys_arch_mbox_tryfetch>
 8012b62:	4603      	mov	r3, r0
 8012b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b68:	d129      	bne.n	8012bbe <netconn_recv_data+0x116>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8012b6a:	68f8      	ldr	r0, [r7, #12]
 8012b6c:	f000 fab3 	bl	80130d6 <netconn_err>
 8012b70:	4603      	mov	r3, r0
 8012b72:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8012b74:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d002      	beq.n	8012b82 <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 8012b7c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8012b80:	e057      	b.n	8012c32 <netconn_recv_data+0x18a>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b88:	f003 0301 	and.w	r3, r3, #1
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d002      	beq.n	8012b96 <netconn_recv_data+0xee>
        return ERR_CONN;
 8012b90:	f06f 030a 	mvn.w	r3, #10
 8012b94:	e04d      	b.n	8012c32 <netconn_recv_data+0x18a>
      }
      return ERR_WOULDBLOCK;
 8012b96:	f06f 0306 	mvn.w	r3, #6
 8012b9a:	e04a      	b.n	8012c32 <netconn_recv_data+0x18a>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	f103 0010 	add.w	r0, r3, #16
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	69da      	ldr	r2, [r3, #28]
 8012ba6:	f107 0318 	add.w	r3, r7, #24
 8012baa:	4619      	mov	r1, r3
 8012bac:	f00f f89e 	bl	8021cec <sys_arch_mbox_fetch>
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012bb6:	d102      	bne.n	8012bbe <netconn_recv_data+0x116>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 8012bb8:	f06f 0302 	mvn.w	r3, #2
 8012bbc:	e039      	b.n	8012c32 <netconn_recv_data+0x18a>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	781b      	ldrb	r3, [r3, #0]
 8012bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012bc6:	2b10      	cmp	r3, #16
 8012bc8:	d117      	bne.n	8012bfa <netconn_recv_data+0x152>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8012bca:	69bb      	ldr	r3, [r7, #24]
 8012bcc:	f107 0217 	add.w	r2, r7, #23
 8012bd0:	4611      	mov	r1, r2
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f000 fad0 	bl	8013178 <lwip_netconn_is_err_msg>
 8012bd8:	4603      	mov	r3, r0
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d009      	beq.n	8012bf2 <netconn_recv_data+0x14a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8012bde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012be2:	f113 0f0f 	cmn.w	r3, #15
 8012be6:	d101      	bne.n	8012bec <netconn_recv_data+0x144>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8012be8:	2300      	movs	r3, #0
 8012bea:	e022      	b.n	8012c32 <netconn_recv_data+0x18a>
      }
      return err;
 8012bec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012bf0:	e01f      	b.n	8012c32 <netconn_recv_data+0x18a>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8012bf2:	69bb      	ldr	r3, [r7, #24]
 8012bf4:	891b      	ldrh	r3, [r3, #8]
 8012bf6:	83fb      	strh	r3, [r7, #30]
 8012bf8:	e00d      	b.n	8012c16 <netconn_recv_data+0x16e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8012bfa:	69bb      	ldr	r3, [r7, #24]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d106      	bne.n	8012c0e <netconn_recv_data+0x166>
 8012c00:	4b0e      	ldr	r3, [pc, #56]	; (8012c3c <netconn_recv_data+0x194>)
 8012c02:	f240 2291 	movw	r2, #657	; 0x291
 8012c06:	4911      	ldr	r1, [pc, #68]	; (8012c4c <netconn_recv_data+0x1a4>)
 8012c08:	480e      	ldr	r0, [pc, #56]	; (8012c44 <netconn_recv_data+0x19c>)
 8012c0a:	f011 f9e5 	bl	8023fd8 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8012c0e:	69bb      	ldr	r3, [r7, #24]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	891b      	ldrh	r3, [r3, #8]
 8012c14:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d005      	beq.n	8012c2a <netconn_recv_data+0x182>
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c22:	8bfa      	ldrh	r2, [r7, #30]
 8012c24:	2101      	movs	r1, #1
 8012c26:	68f8      	ldr	r0, [r7, #12]
 8012c28:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8012c2a:	69ba      	ldr	r2, [r7, #24]
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8012c30:	2300      	movs	r3, #0
}
 8012c32:	4618      	mov	r0, r3
 8012c34:	3720      	adds	r7, #32
 8012c36:	46bd      	mov	sp, r7
 8012c38:	bd80      	pop	{r7, pc}
 8012c3a:	bf00      	nop
 8012c3c:	080275f8 	.word	0x080275f8
 8012c40:	08027810 	.word	0x08027810
 8012c44:	08027650 	.word	0x08027650
 8012c48:	08027830 	.word	0x08027830
 8012c4c:	0802784c 	.word	0x0802784c

08012c50 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8012c50:	b580      	push	{r7, lr}
 8012c52:	b084      	sub	sp, #16
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	60f8      	str	r0, [r7, #12]
 8012c58:	60b9      	str	r1, [r7, #8]
 8012c5a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d005      	beq.n	8012c6e <netconn_tcp_recvd_msg+0x1e>
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	781b      	ldrb	r3, [r3, #0]
 8012c66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012c6a:	2b10      	cmp	r3, #16
 8012c6c:	d009      	beq.n	8012c82 <netconn_tcp_recvd_msg+0x32>
 8012c6e:	4b0c      	ldr	r3, [pc, #48]	; (8012ca0 <netconn_tcp_recvd_msg+0x50>)
 8012c70:	f240 22a7 	movw	r2, #679	; 0x2a7
 8012c74:	490b      	ldr	r1, [pc, #44]	; (8012ca4 <netconn_tcp_recvd_msg+0x54>)
 8012c76:	480c      	ldr	r0, [pc, #48]	; (8012ca8 <netconn_tcp_recvd_msg+0x58>)
 8012c78:	f011 f9ae 	bl	8023fd8 <iprintf>
 8012c7c:	f06f 030f 	mvn.w	r3, #15
 8012c80:	e00a      	b.n	8012c98 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	68fa      	ldr	r2, [r7, #12]
 8012c86:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	68ba      	ldr	r2, [r7, #8]
 8012c8c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8012c8e:	6879      	ldr	r1, [r7, #4]
 8012c90:	4806      	ldr	r0, [pc, #24]	; (8012cac <netconn_tcp_recvd_msg+0x5c>)
 8012c92:	f7ff fd37 	bl	8012704 <netconn_apimsg>
 8012c96:	4603      	mov	r3, r0
}
 8012c98:	4618      	mov	r0, r3
 8012c9a:	3710      	adds	r7, #16
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bd80      	pop	{r7, pc}
 8012ca0:	080275f8 	.word	0x080275f8
 8012ca4:	08027858 	.word	0x08027858
 8012ca8:	08027650 	.word	0x08027650
 8012cac:	080142a5 	.word	0x080142a5

08012cb0 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b090      	sub	sp, #64	; 0x40
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	60f8      	str	r0, [r7, #12]
 8012cb8:	60b9      	str	r1, [r7, #8]
 8012cba:	4613      	mov	r3, r2
 8012cbc:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	3310      	adds	r3, #16
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f00f f86d 	bl	8021da2 <sys_mbox_valid>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d102      	bne.n	8012cd4 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8012cce:	f06f 030a 	mvn.w	r3, #10
 8012cd2:	e072      	b.n	8012dba <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012cda:	b25b      	sxtb	r3, r3
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	da09      	bge.n	8012cf4 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012cea:	b2da      	uxtb	r2, r3
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	f883 2020 	strb.w	r2, [r3, #32]
    goto handle_fin;
 8012cf2:	e03b      	b.n	8012d6c <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8012cf4:	79fb      	ldrb	r3, [r7, #7]
 8012cf6:	461a      	mov	r2, r3
 8012cf8:	68b9      	ldr	r1, [r7, #8]
 8012cfa:	68f8      	ldr	r0, [r7, #12]
 8012cfc:	f7ff fed4 	bl	8012aa8 <netconn_recv_data>
 8012d00:	4603      	mov	r3, r0
 8012d02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8012d06:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d002      	beq.n	8012d14 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8012d0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012d12:	e052      	b.n	8012dba <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 8012d14:	68bb      	ldr	r3, [r7, #8]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8012d1a:	79fb      	ldrb	r3, [r7, #7]
 8012d1c:	f003 0308 	and.w	r3, r3, #8
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d10e      	bne.n	8012d42 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8012d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d002      	beq.n	8012d30 <netconn_recv_data_tcp+0x80>
 8012d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d2c:	891b      	ldrh	r3, [r3, #8]
 8012d2e:	e000      	b.n	8012d32 <netconn_recv_data_tcp+0x82>
 8012d30:	2301      	movs	r3, #1
 8012d32:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8012d34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012d36:	f107 0214 	add.w	r2, r7, #20
 8012d3a:	4619      	mov	r1, r3
 8012d3c:	68f8      	ldr	r0, [r7, #12]
 8012d3e:	f7ff ff87 	bl	8012c50 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8012d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d136      	bne.n	8012db6 <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 8012d48:	79fb      	ldrb	r3, [r7, #7]
 8012d4a:	f003 0310 	and.w	r3, r3, #16
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d00b      	beq.n	8012d6a <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012d58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012d5c:	b2da      	uxtb	r2, r3
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_WOULDBLOCK;
 8012d64:	f06f 0306 	mvn.w	r3, #6
 8012d68:	e027      	b.n	8012dba <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 8012d6a:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d005      	beq.n	8012d80 <netconn_recv_data_tcp+0xd0>
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d78:	2200      	movs	r2, #0
 8012d7a:	2101      	movs	r1, #1
 8012d7c:	68f8      	ldr	r0, [r7, #12]
 8012d7e:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	685b      	ldr	r3, [r3, #4]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d10f      	bne.n	8012da8 <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8012d88:	68f8      	ldr	r0, [r7, #12]
 8012d8a:	f000 f9a4 	bl	80130d6 <netconn_err>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8012d94:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d002      	beq.n	8012da2 <netconn_recv_data_tcp+0xf2>
          return err;
 8012d9c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012da0:	e00b      	b.n	8012dba <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 8012da2:	f06f 030d 	mvn.w	r3, #13
 8012da6:	e008      	b.n	8012dba <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8012da8:	2101      	movs	r1, #1
 8012daa:	68f8      	ldr	r0, [r7, #12]
 8012dac:	f000 f956 	bl	801305c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8012db0:	f06f 030e 	mvn.w	r3, #14
 8012db4:	e001      	b.n	8012dba <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 8012db6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8012dba:	4618      	mov	r0, r3
 8012dbc:	3740      	adds	r7, #64	; 0x40
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}
	...

08012dc4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b086      	sub	sp, #24
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
 8012dcc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8012dce:	2300      	movs	r3, #0
 8012dd0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d109      	bne.n	8012dec <netconn_recv+0x28>
 8012dd8:	4b32      	ldr	r3, [pc, #200]	; (8012ea4 <netconn_recv+0xe0>)
 8012dda:	f240 3263 	movw	r2, #867	; 0x363
 8012dde:	4932      	ldr	r1, [pc, #200]	; (8012ea8 <netconn_recv+0xe4>)
 8012de0:	4832      	ldr	r0, [pc, #200]	; (8012eac <netconn_recv+0xe8>)
 8012de2:	f011 f8f9 	bl	8023fd8 <iprintf>
 8012de6:	f06f 030f 	mvn.w	r3, #15
 8012dea:	e056      	b.n	8012e9a <netconn_recv+0xd6>
  *new_buf = NULL;
 8012dec:	683b      	ldr	r3, [r7, #0]
 8012dee:	2200      	movs	r2, #0
 8012df0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d109      	bne.n	8012e0c <netconn_recv+0x48>
 8012df8:	4b2a      	ldr	r3, [pc, #168]	; (8012ea4 <netconn_recv+0xe0>)
 8012dfa:	f240 3265 	movw	r2, #869	; 0x365
 8012dfe:	492c      	ldr	r1, [pc, #176]	; (8012eb0 <netconn_recv+0xec>)
 8012e00:	482a      	ldr	r0, [pc, #168]	; (8012eac <netconn_recv+0xe8>)
 8012e02:	f011 f8e9 	bl	8023fd8 <iprintf>
 8012e06:	f06f 030f 	mvn.w	r3, #15
 8012e0a:	e046      	b.n	8012e9a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	781b      	ldrb	r3, [r3, #0]
 8012e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012e14:	2b10      	cmp	r3, #16
 8012e16:	d13a      	bne.n	8012e8e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8012e18:	2300      	movs	r3, #0
 8012e1a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8012e1c:	2006      	movs	r0, #6
 8012e1e:	f002 fc0f 	bl	8015640 <memp_malloc>
 8012e22:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8012e24:	697b      	ldr	r3, [r7, #20]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d102      	bne.n	8012e30 <netconn_recv+0x6c>
      return ERR_MEM;
 8012e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e2e:	e034      	b.n	8012e9a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8012e30:	f107 030c 	add.w	r3, r7, #12
 8012e34:	2200      	movs	r2, #0
 8012e36:	4619      	mov	r1, r3
 8012e38:	6878      	ldr	r0, [r7, #4]
 8012e3a:	f7ff ff39 	bl	8012cb0 <netconn_recv_data_tcp>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012e42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d006      	beq.n	8012e58 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8012e4a:	6979      	ldr	r1, [r7, #20]
 8012e4c:	2006      	movs	r0, #6
 8012e4e:	f002 fc6d 	bl	801572c <memp_free>
      return err;
 8012e52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012e56:	e020      	b.n	8012e9a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d106      	bne.n	8012e6c <netconn_recv+0xa8>
 8012e5e:	4b11      	ldr	r3, [pc, #68]	; (8012ea4 <netconn_recv+0xe0>)
 8012e60:	f240 3279 	movw	r2, #889	; 0x379
 8012e64:	4913      	ldr	r1, [pc, #76]	; (8012eb4 <netconn_recv+0xf0>)
 8012e66:	4811      	ldr	r0, [pc, #68]	; (8012eac <netconn_recv+0xe8>)
 8012e68:	f011 f8b6 	bl	8023fd8 <iprintf>

    buf->p = p;
 8012e6c:	68fa      	ldr	r2, [r7, #12]
 8012e6e:	697b      	ldr	r3, [r7, #20]
 8012e70:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8012e72:	68fa      	ldr	r2, [r7, #12]
 8012e74:	697b      	ldr	r3, [r7, #20]
 8012e76:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8012e78:	697b      	ldr	r3, [r7, #20]
 8012e7a:	2200      	movs	r2, #0
 8012e7c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8012e7e:	697b      	ldr	r3, [r7, #20]
 8012e80:	2200      	movs	r2, #0
 8012e82:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8012e84:	683b      	ldr	r3, [r7, #0]
 8012e86:	697a      	ldr	r2, [r7, #20]
 8012e88:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	e005      	b.n	8012e9a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8012e8e:	2200      	movs	r2, #0
 8012e90:	6839      	ldr	r1, [r7, #0]
 8012e92:	6878      	ldr	r0, [r7, #4]
 8012e94:	f7ff fe08 	bl	8012aa8 <netconn_recv_data>
 8012e98:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	3718      	adds	r7, #24
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd80      	pop	{r7, pc}
 8012ea2:	bf00      	nop
 8012ea4:	080275f8 	.word	0x080275f8
 8012ea8:	08027810 	.word	0x08027810
 8012eac:	08027650 	.word	0x08027650
 8012eb0:	08027830 	.word	0x08027830
 8012eb4:	080278a8 	.word	0x080278a8

08012eb8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b088      	sub	sp, #32
 8012ebc:	af02      	add	r7, sp, #8
 8012ebe:	60f8      	str	r0, [r7, #12]
 8012ec0:	60b9      	str	r1, [r7, #8]
 8012ec2:	607a      	str	r2, [r7, #4]
 8012ec4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8012ec6:	68bb      	ldr	r3, [r7, #8]
 8012ec8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8012ece:	78fa      	ldrb	r2, [r7, #3]
 8012ed0:	f107 0110 	add.w	r1, r7, #16
 8012ed4:	6a3b      	ldr	r3, [r7, #32]
 8012ed6:	9300      	str	r3, [sp, #0]
 8012ed8:	4613      	mov	r3, r2
 8012eda:	2201      	movs	r2, #1
 8012edc:	68f8      	ldr	r0, [r7, #12]
 8012ede:	f000 f805 	bl	8012eec <netconn_write_vectors_partly>
 8012ee2:	4603      	mov	r3, r0
}
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	3718      	adds	r7, #24
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	bd80      	pop	{r7, pc}

08012eec <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b092      	sub	sp, #72	; 0x48
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	60f8      	str	r0, [r7, #12]
 8012ef4:	60b9      	str	r1, [r7, #8]
 8012ef6:	4611      	mov	r1, r2
 8012ef8:	461a      	mov	r2, r3
 8012efa:	460b      	mov	r3, r1
 8012efc:	80fb      	strh	r3, [r7, #6]
 8012efe:	4613      	mov	r3, r2
 8012f00:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d109      	bne.n	8012f1c <netconn_write_vectors_partly+0x30>
 8012f08:	4b4e      	ldr	r3, [pc, #312]	; (8013044 <netconn_write_vectors_partly+0x158>)
 8012f0a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8012f0e:	494e      	ldr	r1, [pc, #312]	; (8013048 <netconn_write_vectors_partly+0x15c>)
 8012f10:	484e      	ldr	r0, [pc, #312]	; (801304c <netconn_write_vectors_partly+0x160>)
 8012f12:	f011 f861 	bl	8023fd8 <iprintf>
 8012f16:	f06f 030f 	mvn.w	r3, #15
 8012f1a:	e08f      	b.n	801303c <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	781b      	ldrb	r3, [r3, #0]
 8012f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012f24:	2b10      	cmp	r3, #16
 8012f26:	d009      	beq.n	8012f3c <netconn_write_vectors_partly+0x50>
 8012f28:	4b46      	ldr	r3, [pc, #280]	; (8013044 <netconn_write_vectors_partly+0x158>)
 8012f2a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8012f2e:	4948      	ldr	r1, [pc, #288]	; (8013050 <netconn_write_vectors_partly+0x164>)
 8012f30:	4846      	ldr	r0, [pc, #280]	; (801304c <netconn_write_vectors_partly+0x160>)
 8012f32:	f011 f851 	bl	8023fd8 <iprintf>
 8012f36:	f06f 0305 	mvn.w	r3, #5
 8012f3a:	e07f      	b.n	801303c <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012f42:	f003 0302 	and.w	r3, r3, #2
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d104      	bne.n	8012f54 <netconn_write_vectors_partly+0x68>
 8012f4a:	797b      	ldrb	r3, [r7, #5]
 8012f4c:	f003 0304 	and.w	r3, r3, #4
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d001      	beq.n	8012f58 <netconn_write_vectors_partly+0x6c>
 8012f54:	2301      	movs	r3, #1
 8012f56:	e000      	b.n	8012f5a <netconn_write_vectors_partly+0x6e>
 8012f58:	2300      	movs	r3, #0
 8012f5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8012f5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d005      	beq.n	8012f72 <netconn_write_vectors_partly+0x86>
 8012f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d102      	bne.n	8012f72 <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8012f6c:	f06f 0305 	mvn.w	r3, #5
 8012f70:	e064      	b.n	801303c <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 8012f72:	2300      	movs	r3, #0
 8012f74:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8012f76:	2300      	movs	r3, #0
 8012f78:	643b      	str	r3, [r7, #64]	; 0x40
 8012f7a:	e015      	b.n	8012fa8 <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 8012f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f7e:	00db      	lsls	r3, r3, #3
 8012f80:	68ba      	ldr	r2, [r7, #8]
 8012f82:	4413      	add	r3, r2
 8012f84:	685b      	ldr	r3, [r3, #4]
 8012f86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012f88:	4413      	add	r3, r2
 8012f8a:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8012f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f8e:	00db      	lsls	r3, r3, #3
 8012f90:	68ba      	ldr	r2, [r7, #8]
 8012f92:	4413      	add	r3, r2
 8012f94:	685b      	ldr	r3, [r3, #4]
 8012f96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012f98:	429a      	cmp	r2, r3
 8012f9a:	d202      	bcs.n	8012fa2 <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 8012f9c:	f06f 0305 	mvn.w	r3, #5
 8012fa0:	e04c      	b.n	801303c <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 8012fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fa4:	3301      	adds	r3, #1
 8012fa6:	643b      	str	r3, [r7, #64]	; 0x40
 8012fa8:	88fb      	ldrh	r3, [r7, #6]
 8012faa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012fac:	429a      	cmp	r2, r3
 8012fae:	dbe5      	blt.n	8012f7c <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 8012fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d101      	bne.n	8012fba <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	e040      	b.n	801303c <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 8012fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	da0a      	bge.n	8012fd6 <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8012fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d102      	bne.n	8012fcc <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 8012fc6:	f06f 0305 	mvn.w	r3, #5
 8012fca:	e037      	b.n	801303c <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8012fcc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012fd0:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8012fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fd4:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8012fda:	68bb      	ldr	r3, [r7, #8]
 8012fdc:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8012fde:	88fb      	ldrh	r3, [r7, #6]
 8012fe0:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8012fe6:	797b      	ldrb	r3, [r7, #5]
 8012fe8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8012fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fee:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8012ff4:	f107 0314 	add.w	r3, r7, #20
 8012ff8:	4619      	mov	r1, r3
 8012ffa:	4816      	ldr	r0, [pc, #88]	; (8013054 <netconn_write_vectors_partly+0x168>)
 8012ffc:	f7ff fb82 	bl	8012704 <netconn_apimsg>
 8013000:	4603      	mov	r3, r0
 8013002:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8013006:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 801300a:	2b00      	cmp	r3, #0
 801300c:	d114      	bne.n	8013038 <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 801300e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013010:	2b00      	cmp	r3, #0
 8013012:	d002      	beq.n	801301a <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8013014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013018:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 801301a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801301e:	2b00      	cmp	r3, #0
 8013020:	d10a      	bne.n	8013038 <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8013022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013024:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013026:	429a      	cmp	r2, r3
 8013028:	d006      	beq.n	8013038 <netconn_write_vectors_partly+0x14c>
 801302a:	4b06      	ldr	r3, [pc, #24]	; (8013044 <netconn_write_vectors_partly+0x158>)
 801302c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013030:	4909      	ldr	r1, [pc, #36]	; (8013058 <netconn_write_vectors_partly+0x16c>)
 8013032:	4806      	ldr	r0, [pc, #24]	; (801304c <netconn_write_vectors_partly+0x160>)
 8013034:	f010 ffd0 	bl	8023fd8 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8013038:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 801303c:	4618      	mov	r0, r3
 801303e:	3748      	adds	r7, #72	; 0x48
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}
 8013044:	080275f8 	.word	0x080275f8
 8013048:	080278d0 	.word	0x080278d0
 801304c:	08027650 	.word	0x08027650
 8013050:	080278ec 	.word	0x080278ec
 8013054:	080146b1 	.word	0x080146b1
 8013058:	08027910 	.word	0x08027910

0801305c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b08c      	sub	sp, #48	; 0x30
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
 8013064:	460b      	mov	r3, r1
 8013066:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d109      	bne.n	8013082 <netconn_close_shutdown+0x26>
 801306e:	4b0f      	ldr	r3, [pc, #60]	; (80130ac <netconn_close_shutdown+0x50>)
 8013070:	f240 4247 	movw	r2, #1095	; 0x447
 8013074:	490e      	ldr	r1, [pc, #56]	; (80130b0 <netconn_close_shutdown+0x54>)
 8013076:	480f      	ldr	r0, [pc, #60]	; (80130b4 <netconn_close_shutdown+0x58>)
 8013078:	f010 ffae 	bl	8023fd8 <iprintf>
 801307c:	f06f 030f 	mvn.w	r3, #15
 8013080:	e010      	b.n	80130a4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8013086:	78fb      	ldrb	r3, [r7, #3]
 8013088:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801308a:	2329      	movs	r3, #41	; 0x29
 801308c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 801308e:	f107 030c 	add.w	r3, r7, #12
 8013092:	4619      	mov	r1, r3
 8013094:	4808      	ldr	r0, [pc, #32]	; (80130b8 <netconn_close_shutdown+0x5c>)
 8013096:	f7ff fb35 	bl	8012704 <netconn_apimsg>
 801309a:	4603      	mov	r3, r0
 801309c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80130a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80130a4:	4618      	mov	r0, r3
 80130a6:	3730      	adds	r7, #48	; 0x30
 80130a8:	46bd      	mov	sp, r7
 80130aa:	bd80      	pop	{r7, pc}
 80130ac:	080275f8 	.word	0x080275f8
 80130b0:	08027934 	.word	0x08027934
 80130b4:	08027650 	.word	0x08027650
 80130b8:	080147c9 	.word	0x080147c9

080130bc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b082      	sub	sp, #8
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80130c4:	2103      	movs	r1, #3
 80130c6:	6878      	ldr	r0, [r7, #4]
 80130c8:	f7ff ffc8 	bl	801305c <netconn_close_shutdown>
 80130cc:	4603      	mov	r3, r0
}
 80130ce:	4618      	mov	r0, r3
 80130d0:	3708      	adds	r7, #8
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd80      	pop	{r7, pc}

080130d6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80130d6:	b580      	push	{r7, lr}
 80130d8:	b084      	sub	sp, #16
 80130da:	af00      	add	r7, sp, #0
 80130dc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d101      	bne.n	80130e8 <netconn_err+0x12>
    return ERR_OK;
 80130e4:	2300      	movs	r3, #0
 80130e6:	e00d      	b.n	8013104 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80130e8:	f00e ff76 	bl	8021fd8 <sys_arch_protect>
 80130ec:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	7a1b      	ldrb	r3, [r3, #8]
 80130f2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	2200      	movs	r2, #0
 80130f8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80130fa:	68f8      	ldr	r0, [r7, #12]
 80130fc:	f00e ff7a 	bl	8021ff4 <sys_arch_unprotect>
  return err;
 8013100:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013104:	4618      	mov	r0, r3
 8013106:	3710      	adds	r7, #16
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}

0801310c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 801310c:	b580      	push	{r7, lr}
 801310e:	b082      	sub	sp, #8
 8013110:	af00      	add	r7, sp, #0
 8013112:	4603      	mov	r3, r0
 8013114:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8013116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801311a:	f113 0f0d 	cmn.w	r3, #13
 801311e:	d009      	beq.n	8013134 <lwip_netconn_err_to_msg+0x28>
 8013120:	f113 0f0d 	cmn.w	r3, #13
 8013124:	dc0c      	bgt.n	8013140 <lwip_netconn_err_to_msg+0x34>
 8013126:	f113 0f0f 	cmn.w	r3, #15
 801312a:	d007      	beq.n	801313c <lwip_netconn_err_to_msg+0x30>
 801312c:	f113 0f0e 	cmn.w	r3, #14
 8013130:	d002      	beq.n	8013138 <lwip_netconn_err_to_msg+0x2c>
 8013132:	e005      	b.n	8013140 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8013134:	4b0a      	ldr	r3, [pc, #40]	; (8013160 <lwip_netconn_err_to_msg+0x54>)
 8013136:	e00e      	b.n	8013156 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8013138:	4b0a      	ldr	r3, [pc, #40]	; (8013164 <lwip_netconn_err_to_msg+0x58>)
 801313a:	e00c      	b.n	8013156 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 801313c:	4b0a      	ldr	r3, [pc, #40]	; (8013168 <lwip_netconn_err_to_msg+0x5c>)
 801313e:	e00a      	b.n	8013156 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8013140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d005      	beq.n	8013154 <lwip_netconn_err_to_msg+0x48>
 8013148:	4b08      	ldr	r3, [pc, #32]	; (801316c <lwip_netconn_err_to_msg+0x60>)
 801314a:	227d      	movs	r2, #125	; 0x7d
 801314c:	4908      	ldr	r1, [pc, #32]	; (8013170 <lwip_netconn_err_to_msg+0x64>)
 801314e:	4809      	ldr	r0, [pc, #36]	; (8013174 <lwip_netconn_err_to_msg+0x68>)
 8013150:	f010 ff42 	bl	8023fd8 <iprintf>
      return NULL;
 8013154:	2300      	movs	r3, #0
  }
}
 8013156:	4618      	mov	r0, r3
 8013158:	3708      	adds	r7, #8
 801315a:	46bd      	mov	sp, r7
 801315c:	bd80      	pop	{r7, pc}
 801315e:	bf00      	nop
 8013160:	0802ae4c 	.word	0x0802ae4c
 8013164:	0802ae4d 	.word	0x0802ae4d
 8013168:	0802ae4e 	.word	0x0802ae4e
 801316c:	08027950 	.word	0x08027950
 8013170:	08027984 	.word	0x08027984
 8013174:	08027994 	.word	0x08027994

08013178 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b082      	sub	sp, #8
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
 8013180:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8013182:	683b      	ldr	r3, [r7, #0]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d105      	bne.n	8013194 <lwip_netconn_is_err_msg+0x1c>
 8013188:	4b12      	ldr	r3, [pc, #72]	; (80131d4 <lwip_netconn_is_err_msg+0x5c>)
 801318a:	2285      	movs	r2, #133	; 0x85
 801318c:	4912      	ldr	r1, [pc, #72]	; (80131d8 <lwip_netconn_is_err_msg+0x60>)
 801318e:	4813      	ldr	r0, [pc, #76]	; (80131dc <lwip_netconn_is_err_msg+0x64>)
 8013190:	f010 ff22 	bl	8023fd8 <iprintf>

  if (msg == &netconn_aborted) {
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	4a12      	ldr	r2, [pc, #72]	; (80131e0 <lwip_netconn_is_err_msg+0x68>)
 8013198:	4293      	cmp	r3, r2
 801319a:	d104      	bne.n	80131a6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 801319c:	683b      	ldr	r3, [r7, #0]
 801319e:	22f3      	movs	r2, #243	; 0xf3
 80131a0:	701a      	strb	r2, [r3, #0]
    return 1;
 80131a2:	2301      	movs	r3, #1
 80131a4:	e012      	b.n	80131cc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	4a0e      	ldr	r2, [pc, #56]	; (80131e4 <lwip_netconn_is_err_msg+0x6c>)
 80131aa:	4293      	cmp	r3, r2
 80131ac:	d104      	bne.n	80131b8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80131ae:	683b      	ldr	r3, [r7, #0]
 80131b0:	22f2      	movs	r2, #242	; 0xf2
 80131b2:	701a      	strb	r2, [r3, #0]
    return 1;
 80131b4:	2301      	movs	r3, #1
 80131b6:	e009      	b.n	80131cc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	4a0b      	ldr	r2, [pc, #44]	; (80131e8 <lwip_netconn_is_err_msg+0x70>)
 80131bc:	4293      	cmp	r3, r2
 80131be:	d104      	bne.n	80131ca <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80131c0:	683b      	ldr	r3, [r7, #0]
 80131c2:	22f1      	movs	r2, #241	; 0xf1
 80131c4:	701a      	strb	r2, [r3, #0]
    return 1;
 80131c6:	2301      	movs	r3, #1
 80131c8:	e000      	b.n	80131cc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80131ca:	2300      	movs	r3, #0
}
 80131cc:	4618      	mov	r0, r3
 80131ce:	3708      	adds	r7, #8
 80131d0:	46bd      	mov	sp, r7
 80131d2:	bd80      	pop	{r7, pc}
 80131d4:	08027950 	.word	0x08027950
 80131d8:	080279bc 	.word	0x080279bc
 80131dc:	08027994 	.word	0x08027994
 80131e0:	0802ae4c 	.word	0x0802ae4c
 80131e4:	0802ae4d 	.word	0x0802ae4d
 80131e8:	0802ae4e 	.word	0x0802ae4e

080131ec <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b088      	sub	sp, #32
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	60f8      	str	r0, [r7, #12]
 80131f4:	60b9      	str	r1, [r7, #8]
 80131f6:	607a      	str	r2, [r7, #4]
 80131f8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80131fa:	68bb      	ldr	r3, [r7, #8]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d105      	bne.n	801320c <recv_udp+0x20>
 8013200:	4b34      	ldr	r3, [pc, #208]	; (80132d4 <recv_udp+0xe8>)
 8013202:	22e5      	movs	r2, #229	; 0xe5
 8013204:	4934      	ldr	r1, [pc, #208]	; (80132d8 <recv_udp+0xec>)
 8013206:	4835      	ldr	r0, [pc, #212]	; (80132dc <recv_udp+0xf0>)
 8013208:	f010 fee6 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d105      	bne.n	801321e <recv_udp+0x32>
 8013212:	4b30      	ldr	r3, [pc, #192]	; (80132d4 <recv_udp+0xe8>)
 8013214:	22e6      	movs	r2, #230	; 0xe6
 8013216:	4932      	ldr	r1, [pc, #200]	; (80132e0 <recv_udp+0xf4>)
 8013218:	4830      	ldr	r0, [pc, #192]	; (80132dc <recv_udp+0xf0>)
 801321a:	f010 fedd 	bl	8023fd8 <iprintf>
  conn = (struct netconn *)arg;
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8013222:	69fb      	ldr	r3, [r7, #28]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d103      	bne.n	8013230 <recv_udp+0x44>
    pbuf_free(p);
 8013228:	6878      	ldr	r0, [r7, #4]
 801322a:	f003 f92f 	bl	801648c <pbuf_free>
    return;
 801322e:	e04d      	b.n	80132cc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8013230:	69fb      	ldr	r3, [r7, #28]
 8013232:	685b      	ldr	r3, [r3, #4]
 8013234:	68ba      	ldr	r2, [r7, #8]
 8013236:	429a      	cmp	r2, r3
 8013238:	d005      	beq.n	8013246 <recv_udp+0x5a>
 801323a:	4b26      	ldr	r3, [pc, #152]	; (80132d4 <recv_udp+0xe8>)
 801323c:	22ee      	movs	r2, #238	; 0xee
 801323e:	4929      	ldr	r1, [pc, #164]	; (80132e4 <recv_udp+0xf8>)
 8013240:	4826      	ldr	r0, [pc, #152]	; (80132dc <recv_udp+0xf0>)
 8013242:	f010 fec9 	bl	8023fd8 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8013246:	69fb      	ldr	r3, [r7, #28]
 8013248:	3310      	adds	r3, #16
 801324a:	4618      	mov	r0, r3
 801324c:	f00e fda9 	bl	8021da2 <sys_mbox_valid>
 8013250:	4603      	mov	r3, r0
 8013252:	2b00      	cmp	r3, #0
 8013254:	d103      	bne.n	801325e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8013256:	6878      	ldr	r0, [r7, #4]
 8013258:	f003 f918 	bl	801648c <pbuf_free>
    return;
 801325c:	e036      	b.n	80132cc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801325e:	2006      	movs	r0, #6
 8013260:	f002 f9ee 	bl	8015640 <memp_malloc>
 8013264:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8013266:	69bb      	ldr	r3, [r7, #24]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d103      	bne.n	8013274 <recv_udp+0x88>
    pbuf_free(p);
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	f003 f90d 	bl	801648c <pbuf_free>
    return;
 8013272:	e02b      	b.n	80132cc <recv_udp+0xe0>
  } else {
    buf->p = p;
 8013274:	69bb      	ldr	r3, [r7, #24]
 8013276:	687a      	ldr	r2, [r7, #4]
 8013278:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 801327a:	69bb      	ldr	r3, [r7, #24]
 801327c:	687a      	ldr	r2, [r7, #4]
 801327e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d002      	beq.n	801328c <recv_udp+0xa0>
 8013286:	683b      	ldr	r3, [r7, #0]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	e000      	b.n	801328e <recv_udp+0xa2>
 801328c:	2300      	movs	r3, #0
 801328e:	69ba      	ldr	r2, [r7, #24]
 8013290:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8013292:	69bb      	ldr	r3, [r7, #24]
 8013294:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013296:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	891b      	ldrh	r3, [r3, #8]
 801329c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 801329e:	69fb      	ldr	r3, [r7, #28]
 80132a0:	3310      	adds	r3, #16
 80132a2:	69b9      	ldr	r1, [r7, #24]
 80132a4:	4618      	mov	r0, r3
 80132a6:	f00e fd07 	bl	8021cb8 <sys_mbox_trypost>
 80132aa:	4603      	mov	r3, r0
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d003      	beq.n	80132b8 <recv_udp+0xcc>
    netbuf_delete(buf);
 80132b0:	69b8      	ldr	r0, [r7, #24]
 80132b2:	f001 fb15 	bl	80148e0 <netbuf_delete>
    return;
 80132b6:	e009      	b.n	80132cc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80132b8:	69fb      	ldr	r3, [r7, #28]
 80132ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d005      	beq.n	80132cc <recv_udp+0xe0>
 80132c0:	69fb      	ldr	r3, [r7, #28]
 80132c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132c4:	8afa      	ldrh	r2, [r7, #22]
 80132c6:	2100      	movs	r1, #0
 80132c8:	69f8      	ldr	r0, [r7, #28]
 80132ca:	4798      	blx	r3
  }
}
 80132cc:	3720      	adds	r7, #32
 80132ce:	46bd      	mov	sp, r7
 80132d0:	bd80      	pop	{r7, pc}
 80132d2:	bf00      	nop
 80132d4:	08027950 	.word	0x08027950
 80132d8:	080279c8 	.word	0x080279c8
 80132dc:	08027994 	.word	0x08027994
 80132e0:	080279ec 	.word	0x080279ec
 80132e4:	08027a0c 	.word	0x08027a0c

080132e8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b088      	sub	sp, #32
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	60f8      	str	r0, [r7, #12]
 80132f0:	60b9      	str	r1, [r7, #8]
 80132f2:	607a      	str	r2, [r7, #4]
 80132f4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80132f6:	68bb      	ldr	r3, [r7, #8]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d106      	bne.n	801330a <recv_tcp+0x22>
 80132fc:	4b36      	ldr	r3, [pc, #216]	; (80133d8 <recv_tcp+0xf0>)
 80132fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013302:	4936      	ldr	r1, [pc, #216]	; (80133dc <recv_tcp+0xf4>)
 8013304:	4836      	ldr	r0, [pc, #216]	; (80133e0 <recv_tcp+0xf8>)
 8013306:	f010 fe67 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d106      	bne.n	801331e <recv_tcp+0x36>
 8013310:	4b31      	ldr	r3, [pc, #196]	; (80133d8 <recv_tcp+0xf0>)
 8013312:	f240 122d 	movw	r2, #301	; 0x12d
 8013316:	4933      	ldr	r1, [pc, #204]	; (80133e4 <recv_tcp+0xfc>)
 8013318:	4831      	ldr	r0, [pc, #196]	; (80133e0 <recv_tcp+0xf8>)
 801331a:	f010 fe5d 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 801331e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d006      	beq.n	8013334 <recv_tcp+0x4c>
 8013326:	4b2c      	ldr	r3, [pc, #176]	; (80133d8 <recv_tcp+0xf0>)
 8013328:	f44f 7297 	mov.w	r2, #302	; 0x12e
 801332c:	492e      	ldr	r1, [pc, #184]	; (80133e8 <recv_tcp+0x100>)
 801332e:	482c      	ldr	r0, [pc, #176]	; (80133e0 <recv_tcp+0xf8>)
 8013330:	f010 fe52 	bl	8023fd8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8013338:	697b      	ldr	r3, [r7, #20]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d102      	bne.n	8013344 <recv_tcp+0x5c>
    return ERR_VAL;
 801333e:	f06f 0305 	mvn.w	r3, #5
 8013342:	e045      	b.n	80133d0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8013344:	697b      	ldr	r3, [r7, #20]
 8013346:	685b      	ldr	r3, [r3, #4]
 8013348:	68ba      	ldr	r2, [r7, #8]
 801334a:	429a      	cmp	r2, r3
 801334c:	d006      	beq.n	801335c <recv_tcp+0x74>
 801334e:	4b22      	ldr	r3, [pc, #136]	; (80133d8 <recv_tcp+0xf0>)
 8013350:	f240 1235 	movw	r2, #309	; 0x135
 8013354:	4925      	ldr	r1, [pc, #148]	; (80133ec <recv_tcp+0x104>)
 8013356:	4822      	ldr	r0, [pc, #136]	; (80133e0 <recv_tcp+0xf8>)
 8013358:	f010 fe3e 	bl	8023fd8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801335c:	697b      	ldr	r3, [r7, #20]
 801335e:	3310      	adds	r3, #16
 8013360:	4618      	mov	r0, r3
 8013362:	f00e fd1e 	bl	8021da2 <sys_mbox_valid>
 8013366:	4603      	mov	r3, r0
 8013368:	2b00      	cmp	r3, #0
 801336a:	d10d      	bne.n	8013388 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d008      	beq.n	8013384 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	891b      	ldrh	r3, [r3, #8]
 8013376:	4619      	mov	r1, r3
 8013378:	68b8      	ldr	r0, [r7, #8]
 801337a:	f004 f883 	bl	8017484 <tcp_recved>
      pbuf_free(p);
 801337e:	6878      	ldr	r0, [r7, #4]
 8013380:	f003 f884 	bl	801648c <pbuf_free>
    }
    return ERR_OK;
 8013384:	2300      	movs	r3, #0
 8013386:	e023      	b.n	80133d0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d005      	beq.n	801339a <recv_tcp+0xb2>
    msg = p;
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	891b      	ldrh	r3, [r3, #8]
 8013396:	83fb      	strh	r3, [r7, #30]
 8013398:	e003      	b.n	80133a2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 801339a:	4b15      	ldr	r3, [pc, #84]	; (80133f0 <recv_tcp+0x108>)
 801339c:	61bb      	str	r3, [r7, #24]
    len = 0;
 801339e:	2300      	movs	r3, #0
 80133a0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80133a2:	697b      	ldr	r3, [r7, #20]
 80133a4:	3310      	adds	r3, #16
 80133a6:	69b9      	ldr	r1, [r7, #24]
 80133a8:	4618      	mov	r0, r3
 80133aa:	f00e fc85 	bl	8021cb8 <sys_mbox_trypost>
 80133ae:	4603      	mov	r3, r0
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d002      	beq.n	80133ba <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80133b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80133b8:	e00a      	b.n	80133d0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80133ba:	697b      	ldr	r3, [r7, #20]
 80133bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d005      	beq.n	80133ce <recv_tcp+0xe6>
 80133c2:	697b      	ldr	r3, [r7, #20]
 80133c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133c6:	8bfa      	ldrh	r2, [r7, #30]
 80133c8:	2100      	movs	r1, #0
 80133ca:	6978      	ldr	r0, [r7, #20]
 80133cc:	4798      	blx	r3
  }

  return ERR_OK;
 80133ce:	2300      	movs	r3, #0
}
 80133d0:	4618      	mov	r0, r3
 80133d2:	3720      	adds	r7, #32
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd80      	pop	{r7, pc}
 80133d8:	08027950 	.word	0x08027950
 80133dc:	08027a2c 	.word	0x08027a2c
 80133e0:	08027994 	.word	0x08027994
 80133e4:	08027a50 	.word	0x08027a50
 80133e8:	08027a70 	.word	0x08027a70
 80133ec:	08027a88 	.word	0x08027a88
 80133f0:	0802ae4e 	.word	0x0802ae4e

080133f4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b084      	sub	sp, #16
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
 80133fc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d106      	bne.n	8013416 <poll_tcp+0x22>
 8013408:	4b2b      	ldr	r3, [pc, #172]	; (80134b8 <poll_tcp+0xc4>)
 801340a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 801340e:	492b      	ldr	r1, [pc, #172]	; (80134bc <poll_tcp+0xc8>)
 8013410:	482b      	ldr	r0, [pc, #172]	; (80134c0 <poll_tcp+0xcc>)
 8013412:	f010 fde1 	bl	8023fd8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	785b      	ldrb	r3, [r3, #1]
 801341a:	2b01      	cmp	r3, #1
 801341c:	d104      	bne.n	8013428 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801341e:	2101      	movs	r1, #1
 8013420:	68f8      	ldr	r0, [r7, #12]
 8013422:	f000 ff75 	bl	8014310 <lwip_netconn_do_writemore>
 8013426:	e016      	b.n	8013456 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	785b      	ldrb	r3, [r3, #1]
 801342c:	2b04      	cmp	r3, #4
 801342e:	d112      	bne.n	8013456 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013434:	2b00      	cmp	r3, #0
 8013436:	d00a      	beq.n	801344e <poll_tcp+0x5a>
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801343c:	7a5b      	ldrb	r3, [r3, #9]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d005      	beq.n	801344e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013446:	7a5a      	ldrb	r2, [r3, #9]
 8013448:	3a01      	subs	r2, #1
 801344a:	b2d2      	uxtb	r2, r2
 801344c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801344e:	2101      	movs	r1, #1
 8013450:	68f8      	ldr	r0, [r7, #12]
 8013452:	f000 fc05 	bl	8013c60 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	f893 3020 	ldrb.w	r3, [r3, #32]
 801345c:	f003 0310 	and.w	r3, r3, #16
 8013460:	2b00      	cmp	r3, #0
 8013462:	d023      	beq.n	80134ac <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	685b      	ldr	r3, [r3, #4]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d01f      	beq.n	80134ac <poll_tcp+0xb8>
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	685b      	ldr	r3, [r3, #4]
 8013470:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013474:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8013478:	d318      	bcc.n	80134ac <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	685b      	ldr	r3, [r3, #4]
 801347e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8013482:	2b04      	cmp	r3, #4
 8013484:	d812      	bhi.n	80134ac <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	f893 3020 	ldrb.w	r3, [r3, #32]
 801348c:	f023 0310 	bic.w	r3, r3, #16
 8013490:	b2da      	uxtb	r2, r3
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801349c:	2b00      	cmp	r3, #0
 801349e:	d005      	beq.n	80134ac <poll_tcp+0xb8>
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134a4:	2200      	movs	r2, #0
 80134a6:	2102      	movs	r1, #2
 80134a8:	68f8      	ldr	r0, [r7, #12]
 80134aa:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80134ac:	2300      	movs	r3, #0
}
 80134ae:	4618      	mov	r0, r3
 80134b0:	3710      	adds	r7, #16
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}
 80134b6:	bf00      	nop
 80134b8:	08027950 	.word	0x08027950
 80134bc:	08027aa8 	.word	0x08027aa8
 80134c0:	08027994 	.word	0x08027994

080134c4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b086      	sub	sp, #24
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	60f8      	str	r0, [r7, #12]
 80134cc:	60b9      	str	r1, [r7, #8]
 80134ce:	4613      	mov	r3, r2
 80134d0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80134d6:	697b      	ldr	r3, [r7, #20]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d106      	bne.n	80134ea <sent_tcp+0x26>
 80134dc:	4b21      	ldr	r3, [pc, #132]	; (8013564 <sent_tcp+0xa0>)
 80134de:	f240 1293 	movw	r2, #403	; 0x193
 80134e2:	4921      	ldr	r1, [pc, #132]	; (8013568 <sent_tcp+0xa4>)
 80134e4:	4821      	ldr	r0, [pc, #132]	; (801356c <sent_tcp+0xa8>)
 80134e6:	f010 fd77 	bl	8023fd8 <iprintf>

  if (conn) {
 80134ea:	697b      	ldr	r3, [r7, #20]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d034      	beq.n	801355a <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 80134f0:	697b      	ldr	r3, [r7, #20]
 80134f2:	785b      	ldrb	r3, [r3, #1]
 80134f4:	2b01      	cmp	r3, #1
 80134f6:	d104      	bne.n	8013502 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80134f8:	2101      	movs	r1, #1
 80134fa:	6978      	ldr	r0, [r7, #20]
 80134fc:	f000 ff08 	bl	8014310 <lwip_netconn_do_writemore>
 8013500:	e007      	b.n	8013512 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8013502:	697b      	ldr	r3, [r7, #20]
 8013504:	785b      	ldrb	r3, [r3, #1]
 8013506:	2b04      	cmp	r3, #4
 8013508:	d103      	bne.n	8013512 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801350a:	2101      	movs	r1, #1
 801350c:	6978      	ldr	r0, [r7, #20]
 801350e:	f000 fba7 	bl	8013c60 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8013512:	697b      	ldr	r3, [r7, #20]
 8013514:	685b      	ldr	r3, [r3, #4]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d01f      	beq.n	801355a <sent_tcp+0x96>
 801351a:	697b      	ldr	r3, [r7, #20]
 801351c:	685b      	ldr	r3, [r3, #4]
 801351e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013522:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8013526:	d318      	bcc.n	801355a <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8013528:	697b      	ldr	r3, [r7, #20]
 801352a:	685b      	ldr	r3, [r3, #4]
 801352c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8013530:	2b04      	cmp	r3, #4
 8013532:	d812      	bhi.n	801355a <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8013534:	697b      	ldr	r3, [r7, #20]
 8013536:	f893 3020 	ldrb.w	r3, [r3, #32]
 801353a:	f023 0310 	bic.w	r3, r3, #16
 801353e:	b2da      	uxtb	r2, r3
 8013540:	697b      	ldr	r3, [r7, #20]
 8013542:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8013546:	697b      	ldr	r3, [r7, #20]
 8013548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801354a:	2b00      	cmp	r3, #0
 801354c:	d005      	beq.n	801355a <sent_tcp+0x96>
 801354e:	697b      	ldr	r3, [r7, #20]
 8013550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013552:	88fa      	ldrh	r2, [r7, #6]
 8013554:	2102      	movs	r1, #2
 8013556:	6978      	ldr	r0, [r7, #20]
 8013558:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801355a:	2300      	movs	r3, #0
}
 801355c:	4618      	mov	r0, r3
 801355e:	3718      	adds	r7, #24
 8013560:	46bd      	mov	sp, r7
 8013562:	bd80      	pop	{r7, pc}
 8013564:	08027950 	.word	0x08027950
 8013568:	08027aa8 	.word	0x08027aa8
 801356c:	08027994 	.word	0x08027994

08013570 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b088      	sub	sp, #32
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
 8013578:	460b      	mov	r3, r1
 801357a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8013580:	69fb      	ldr	r3, [r7, #28]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d106      	bne.n	8013594 <err_tcp+0x24>
 8013586:	4b61      	ldr	r3, [pc, #388]	; (801370c <err_tcp+0x19c>)
 8013588:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801358c:	4960      	ldr	r1, [pc, #384]	; (8013710 <err_tcp+0x1a0>)
 801358e:	4861      	ldr	r0, [pc, #388]	; (8013714 <err_tcp+0x1a4>)
 8013590:	f010 fd22 	bl	8023fd8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8013594:	f00e fd20 	bl	8021fd8 <sys_arch_protect>
 8013598:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 801359a:	69fb      	ldr	r3, [r7, #28]
 801359c:	2200      	movs	r2, #0
 801359e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80135a0:	69fb      	ldr	r3, [r7, #28]
 80135a2:	78fa      	ldrb	r2, [r7, #3]
 80135a4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80135a6:	69fb      	ldr	r3, [r7, #28]
 80135a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80135ac:	f043 0301 	orr.w	r3, r3, #1
 80135b0:	b2da      	uxtb	r2, r3
 80135b2:	69fb      	ldr	r3, [r7, #28]
 80135b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80135b8:	69fb      	ldr	r3, [r7, #28]
 80135ba:	785b      	ldrb	r3, [r3, #1]
 80135bc:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80135be:	69fb      	ldr	r3, [r7, #28]
 80135c0:	2200      	movs	r2, #0
 80135c2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80135c4:	69b8      	ldr	r0, [r7, #24]
 80135c6:	f00e fd15 	bl	8021ff4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80135ca:	69fb      	ldr	r3, [r7, #28]
 80135cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d005      	beq.n	80135de <err_tcp+0x6e>
 80135d2:	69fb      	ldr	r3, [r7, #28]
 80135d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135d6:	2200      	movs	r2, #0
 80135d8:	2104      	movs	r1, #4
 80135da:	69f8      	ldr	r0, [r7, #28]
 80135dc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80135de:	69fb      	ldr	r3, [r7, #28]
 80135e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d005      	beq.n	80135f2 <err_tcp+0x82>
 80135e6:	69fb      	ldr	r3, [r7, #28]
 80135e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135ea:	2200      	movs	r2, #0
 80135ec:	2100      	movs	r1, #0
 80135ee:	69f8      	ldr	r0, [r7, #28]
 80135f0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80135f2:	69fb      	ldr	r3, [r7, #28]
 80135f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d005      	beq.n	8013606 <err_tcp+0x96>
 80135fa:	69fb      	ldr	r3, [r7, #28]
 80135fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135fe:	2200      	movs	r2, #0
 8013600:	2102      	movs	r1, #2
 8013602:	69f8      	ldr	r0, [r7, #28]
 8013604:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8013606:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801360a:	4618      	mov	r0, r3
 801360c:	f7ff fd7e 	bl	801310c <lwip_netconn_err_to_msg>
 8013610:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8013612:	69fb      	ldr	r3, [r7, #28]
 8013614:	3310      	adds	r3, #16
 8013616:	4618      	mov	r0, r3
 8013618:	f00e fbc3 	bl	8021da2 <sys_mbox_valid>
 801361c:	4603      	mov	r3, r0
 801361e:	2b00      	cmp	r3, #0
 8013620:	d005      	beq.n	801362e <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8013622:	69fb      	ldr	r3, [r7, #28]
 8013624:	3310      	adds	r3, #16
 8013626:	6939      	ldr	r1, [r7, #16]
 8013628:	4618      	mov	r0, r3
 801362a:	f00e fb45 	bl	8021cb8 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 801362e:	69fb      	ldr	r3, [r7, #28]
 8013630:	3314      	adds	r3, #20
 8013632:	4618      	mov	r0, r3
 8013634:	f00e fbb5 	bl	8021da2 <sys_mbox_valid>
 8013638:	4603      	mov	r3, r0
 801363a:	2b00      	cmp	r3, #0
 801363c:	d005      	beq.n	801364a <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 801363e:	69fb      	ldr	r3, [r7, #28]
 8013640:	3314      	adds	r3, #20
 8013642:	6939      	ldr	r1, [r7, #16]
 8013644:	4618      	mov	r0, r3
 8013646:	f00e fb37 	bl	8021cb8 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 801364a:	7dfb      	ldrb	r3, [r7, #23]
 801364c:	2b01      	cmp	r3, #1
 801364e:	d005      	beq.n	801365c <err_tcp+0xec>
 8013650:	7dfb      	ldrb	r3, [r7, #23]
 8013652:	2b04      	cmp	r3, #4
 8013654:	d002      	beq.n	801365c <err_tcp+0xec>
 8013656:	7dfb      	ldrb	r3, [r7, #23]
 8013658:	2b03      	cmp	r3, #3
 801365a:	d146      	bne.n	80136ea <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 801365c:	69fb      	ldr	r3, [r7, #28]
 801365e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013662:	f003 0304 	and.w	r3, r3, #4
 8013666:	2b00      	cmp	r3, #0
 8013668:	bf14      	ite	ne
 801366a:	2301      	movne	r3, #1
 801366c:	2300      	moveq	r3, #0
 801366e:	b2db      	uxtb	r3, r3
 8013670:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8013672:	69fb      	ldr	r3, [r7, #28]
 8013674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013678:	f023 0304 	bic.w	r3, r3, #4
 801367c:	b2da      	uxtb	r2, r3
 801367e:	69fb      	ldr	r3, [r7, #28]
 8013680:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d13b      	bne.n	8013702 <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801368a:	69fb      	ldr	r3, [r7, #28]
 801368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801368e:	2b00      	cmp	r3, #0
 8013690:	d106      	bne.n	80136a0 <err_tcp+0x130>
 8013692:	4b1e      	ldr	r3, [pc, #120]	; (801370c <err_tcp+0x19c>)
 8013694:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013698:	491f      	ldr	r1, [pc, #124]	; (8013718 <err_tcp+0x1a8>)
 801369a:	481e      	ldr	r0, [pc, #120]	; (8013714 <err_tcp+0x1a4>)
 801369c:	f010 fc9c 	bl	8023fd8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80136a0:	7dfb      	ldrb	r3, [r7, #23]
 80136a2:	2b04      	cmp	r3, #4
 80136a4:	d104      	bne.n	80136b0 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80136a6:	69fb      	ldr	r3, [r7, #28]
 80136a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136aa:	2200      	movs	r2, #0
 80136ac:	711a      	strb	r2, [r3, #4]
 80136ae:	e003      	b.n	80136b8 <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80136b0:	69fb      	ldr	r3, [r7, #28]
 80136b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136b4:	78fa      	ldrb	r2, [r7, #3]
 80136b6:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80136b8:	69fb      	ldr	r3, [r7, #28]
 80136ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	330c      	adds	r3, #12
 80136c0:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80136c2:	68b8      	ldr	r0, [r7, #8]
 80136c4:	f00e fbfe 	bl	8021ec4 <sys_sem_valid>
 80136c8:	4603      	mov	r3, r0
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d106      	bne.n	80136dc <err_tcp+0x16c>
 80136ce:	4b0f      	ldr	r3, [pc, #60]	; (801370c <err_tcp+0x19c>)
 80136d0:	f240 12ef 	movw	r2, #495	; 0x1ef
 80136d4:	4911      	ldr	r1, [pc, #68]	; (801371c <err_tcp+0x1ac>)
 80136d6:	480f      	ldr	r0, [pc, #60]	; (8013714 <err_tcp+0x1a4>)
 80136d8:	f010 fc7e 	bl	8023fd8 <iprintf>
      conn->current_msg = NULL;
 80136dc:	69fb      	ldr	r3, [r7, #28]
 80136de:	2200      	movs	r2, #0
 80136e0:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80136e2:	68b8      	ldr	r0, [r7, #8]
 80136e4:	f00e fbd4 	bl	8021e90 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80136e8:	e00b      	b.n	8013702 <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80136ea:	69fb      	ldr	r3, [r7, #28]
 80136ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d008      	beq.n	8013704 <err_tcp+0x194>
 80136f2:	4b06      	ldr	r3, [pc, #24]	; (801370c <err_tcp+0x19c>)
 80136f4:	f240 12f7 	movw	r2, #503	; 0x1f7
 80136f8:	4909      	ldr	r1, [pc, #36]	; (8013720 <err_tcp+0x1b0>)
 80136fa:	4806      	ldr	r0, [pc, #24]	; (8013714 <err_tcp+0x1a4>)
 80136fc:	f010 fc6c 	bl	8023fd8 <iprintf>
  }
}
 8013700:	e000      	b.n	8013704 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 8013702:	bf00      	nop
}
 8013704:	bf00      	nop
 8013706:	3720      	adds	r7, #32
 8013708:	46bd      	mov	sp, r7
 801370a:	bd80      	pop	{r7, pc}
 801370c:	08027950 	.word	0x08027950
 8013710:	08027aa8 	.word	0x08027aa8
 8013714:	08027994 	.word	0x08027994
 8013718:	08027ab8 	.word	0x08027ab8
 801371c:	08027ad4 	.word	0x08027ad4
 8013720:	08027af0 	.word	0x08027af0

08013724 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b084      	sub	sp, #16
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	685b      	ldr	r3, [r3, #4]
 8013730:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8013732:	6879      	ldr	r1, [r7, #4]
 8013734:	68f8      	ldr	r0, [r7, #12]
 8013736:	f004 fd77 	bl	8018228 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 801373a:	490a      	ldr	r1, [pc, #40]	; (8013764 <setup_tcp+0x40>)
 801373c:	68f8      	ldr	r0, [r7, #12]
 801373e:	f004 fd85 	bl	801824c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8013742:	4909      	ldr	r1, [pc, #36]	; (8013768 <setup_tcp+0x44>)
 8013744:	68f8      	ldr	r0, [r7, #12]
 8013746:	f004 fda3 	bl	8018290 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 801374a:	2202      	movs	r2, #2
 801374c:	4907      	ldr	r1, [pc, #28]	; (801376c <setup_tcp+0x48>)
 801374e:	68f8      	ldr	r0, [r7, #12]
 8013750:	f004 fdfa 	bl	8018348 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8013754:	4906      	ldr	r1, [pc, #24]	; (8013770 <setup_tcp+0x4c>)
 8013756:	68f8      	ldr	r0, [r7, #12]
 8013758:	f004 fdbc 	bl	80182d4 <tcp_err>
}
 801375c:	bf00      	nop
 801375e:	3710      	adds	r7, #16
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}
 8013764:	080132e9 	.word	0x080132e9
 8013768:	080134c5 	.word	0x080134c5
 801376c:	080133f5 	.word	0x080133f5
 8013770:	08013571 	.word	0x08013571

08013774 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8013774:	b590      	push	{r4, r7, lr}
 8013776:	b089      	sub	sp, #36	; 0x24
 8013778:	af00      	add	r7, sp, #0
 801377a:	60f8      	str	r0, [r7, #12]
 801377c:	60b9      	str	r1, [r7, #8]
 801377e:	4613      	mov	r3, r2
 8013780:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8013786:	69fb      	ldr	r3, [r7, #28]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d102      	bne.n	8013792 <accept_function+0x1e>
    return ERR_VAL;
 801378c:	f06f 0305 	mvn.w	r3, #5
 8013790:	e0a1      	b.n	80138d6 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8013792:	69fb      	ldr	r3, [r7, #28]
 8013794:	3314      	adds	r3, #20
 8013796:	4618      	mov	r0, r3
 8013798:	f00e fb03 	bl	8021da2 <sys_mbox_valid>
 801379c:	4603      	mov	r3, r0
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d102      	bne.n	80137a8 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 80137a2:	f06f 0305 	mvn.w	r3, #5
 80137a6:	e096      	b.n	80138d6 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 80137a8:	68bb      	ldr	r3, [r7, #8]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d11b      	bne.n	80137e6 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80137ae:	69fb      	ldr	r3, [r7, #28]
 80137b0:	f103 0414 	add.w	r4, r3, #20
 80137b4:	f06f 000c 	mvn.w	r0, #12
 80137b8:	f7ff fca8 	bl	801310c <lwip_netconn_err_to_msg>
 80137bc:	4603      	mov	r3, r0
 80137be:	4619      	mov	r1, r3
 80137c0:	4620      	mov	r0, r4
 80137c2:	f00e fa79 	bl	8021cb8 <sys_mbox_trypost>
 80137c6:	4603      	mov	r3, r0
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d109      	bne.n	80137e0 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80137cc:	69fb      	ldr	r3, [r7, #28]
 80137ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d005      	beq.n	80137e0 <accept_function+0x6c>
 80137d4:	69fb      	ldr	r3, [r7, #28]
 80137d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137d8:	2200      	movs	r2, #0
 80137da:	2100      	movs	r1, #0
 80137dc:	69f8      	ldr	r0, [r7, #28]
 80137de:	4798      	blx	r3
    }
    return ERR_VAL;
 80137e0:	f06f 0305 	mvn.w	r3, #5
 80137e4:	e077      	b.n	80138d6 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 80137e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d006      	beq.n	80137fc <accept_function+0x88>
 80137ee:	4b3c      	ldr	r3, [pc, #240]	; (80138e0 <accept_function+0x16c>)
 80137f0:	f240 222a 	movw	r2, #554	; 0x22a
 80137f4:	493b      	ldr	r1, [pc, #236]	; (80138e4 <accept_function+0x170>)
 80137f6:	483c      	ldr	r0, [pc, #240]	; (80138e8 <accept_function+0x174>)
 80137f8:	f010 fbee 	bl	8023fd8 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 80137fc:	69fb      	ldr	r3, [r7, #28]
 80137fe:	781a      	ldrb	r2, [r3, #0]
 8013800:	69fb      	ldr	r3, [r7, #28]
 8013802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013804:	4619      	mov	r1, r3
 8013806:	4610      	mov	r0, r2
 8013808:	f000 f8f0 	bl	80139ec <netconn_alloc>
 801380c:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 801380e:	69bb      	ldr	r3, [r7, #24]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d11b      	bne.n	801384c <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8013814:	69fb      	ldr	r3, [r7, #28]
 8013816:	f103 0414 	add.w	r4, r3, #20
 801381a:	f06f 000c 	mvn.w	r0, #12
 801381e:	f7ff fc75 	bl	801310c <lwip_netconn_err_to_msg>
 8013822:	4603      	mov	r3, r0
 8013824:	4619      	mov	r1, r3
 8013826:	4620      	mov	r0, r4
 8013828:	f00e fa46 	bl	8021cb8 <sys_mbox_trypost>
 801382c:	4603      	mov	r3, r0
 801382e:	2b00      	cmp	r3, #0
 8013830:	d109      	bne.n	8013846 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8013832:	69fb      	ldr	r3, [r7, #28]
 8013834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013836:	2b00      	cmp	r3, #0
 8013838:	d005      	beq.n	8013846 <accept_function+0xd2>
 801383a:	69fb      	ldr	r3, [r7, #28]
 801383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801383e:	2200      	movs	r2, #0
 8013840:	2100      	movs	r1, #0
 8013842:	69f8      	ldr	r0, [r7, #28]
 8013844:	4798      	blx	r3
    }
    return ERR_MEM;
 8013846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801384a:	e044      	b.n	80138d6 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 801384c:	69bb      	ldr	r3, [r7, #24]
 801384e:	68ba      	ldr	r2, [r7, #8]
 8013850:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8013852:	69b8      	ldr	r0, [r7, #24]
 8013854:	f7ff ff66 	bl	8013724 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8013858:	69fb      	ldr	r3, [r7, #28]
 801385a:	3314      	adds	r3, #20
 801385c:	69b9      	ldr	r1, [r7, #24]
 801385e:	4618      	mov	r0, r3
 8013860:	f00e fa2a 	bl	8021cb8 <sys_mbox_trypost>
 8013864:	4603      	mov	r3, r0
 8013866:	2b00      	cmp	r3, #0
 8013868:	d02a      	beq.n	80138c0 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 801386a:	69bb      	ldr	r3, [r7, #24]
 801386c:	685b      	ldr	r3, [r3, #4]
 801386e:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8013870:	2100      	movs	r1, #0
 8013872:	6978      	ldr	r0, [r7, #20]
 8013874:	f004 fcd8 	bl	8018228 <tcp_arg>
    tcp_recv(pcb, NULL);
 8013878:	2100      	movs	r1, #0
 801387a:	6978      	ldr	r0, [r7, #20]
 801387c:	f004 fce6 	bl	801824c <tcp_recv>
    tcp_sent(pcb, NULL);
 8013880:	2100      	movs	r1, #0
 8013882:	6978      	ldr	r0, [r7, #20]
 8013884:	f004 fd04 	bl	8018290 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8013888:	2200      	movs	r2, #0
 801388a:	2100      	movs	r1, #0
 801388c:	6978      	ldr	r0, [r7, #20]
 801388e:	f004 fd5b 	bl	8018348 <tcp_poll>
    tcp_err(pcb, NULL);
 8013892:	2100      	movs	r1, #0
 8013894:	6978      	ldr	r0, [r7, #20]
 8013896:	f004 fd1d 	bl	80182d4 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 801389a:	69bb      	ldr	r3, [r7, #24]
 801389c:	2200      	movs	r2, #0
 801389e:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 80138a0:	69bb      	ldr	r3, [r7, #24]
 80138a2:	3310      	adds	r3, #16
 80138a4:	4618      	mov	r0, r3
 80138a6:	f00e f9f5 	bl	8021c94 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80138aa:	69bb      	ldr	r3, [r7, #24]
 80138ac:	3310      	adds	r3, #16
 80138ae:	4618      	mov	r0, r3
 80138b0:	f00e fa88 	bl	8021dc4 <sys_mbox_set_invalid>
    netconn_free(newconn);
 80138b4:	69b8      	ldr	r0, [r7, #24]
 80138b6:	f000 f90b 	bl	8013ad0 <netconn_free>
    return ERR_MEM;
 80138ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80138be:	e00a      	b.n	80138d6 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80138c0:	69fb      	ldr	r3, [r7, #28]
 80138c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d005      	beq.n	80138d4 <accept_function+0x160>
 80138c8:	69fb      	ldr	r3, [r7, #28]
 80138ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138cc:	2200      	movs	r2, #0
 80138ce:	2100      	movs	r1, #0
 80138d0:	69f8      	ldr	r0, [r7, #28]
 80138d2:	4798      	blx	r3
  }

  return ERR_OK;
 80138d4:	2300      	movs	r3, #0
}
 80138d6:	4618      	mov	r0, r3
 80138d8:	3724      	adds	r7, #36	; 0x24
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd90      	pop	{r4, r7, pc}
 80138de:	bf00      	nop
 80138e0:	08027950 	.word	0x08027950
 80138e4:	08027b0c 	.word	0x08027b0c
 80138e8:	08027994 	.word	0x08027994

080138ec <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80138ec:	b590      	push	{r4, r7, lr}
 80138ee:	b085      	sub	sp, #20
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80138f4:	2300      	movs	r3, #0
 80138f6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	685b      	ldr	r3, [r3, #4]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d006      	beq.n	8013910 <pcb_new+0x24>
 8013902:	4b2b      	ldr	r3, [pc, #172]	; (80139b0 <pcb_new+0xc4>)
 8013904:	f240 2265 	movw	r2, #613	; 0x265
 8013908:	492a      	ldr	r1, [pc, #168]	; (80139b4 <pcb_new+0xc8>)
 801390a:	482b      	ldr	r0, [pc, #172]	; (80139b8 <pcb_new+0xcc>)
 801390c:	f010 fb64 	bl	8023fd8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	781b      	ldrb	r3, [r3, #0]
 8013916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801391a:	2b10      	cmp	r3, #16
 801391c:	d022      	beq.n	8013964 <pcb_new+0x78>
 801391e:	2b20      	cmp	r3, #32
 8013920:	d133      	bne.n	801398a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	681c      	ldr	r4, [r3, #0]
 8013926:	7bfb      	ldrb	r3, [r7, #15]
 8013928:	4618      	mov	r0, r3
 801392a:	f009 ff4a 	bl	801d7c2 <udp_new_ip_type>
 801392e:	4603      	mov	r3, r0
 8013930:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	685b      	ldr	r3, [r3, #4]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d02a      	beq.n	8013992 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	781b      	ldrb	r3, [r3, #0]
 8013942:	2b22      	cmp	r3, #34	; 0x22
 8013944:	d104      	bne.n	8013950 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	685b      	ldr	r3, [r3, #4]
 801394c:	2201      	movs	r2, #1
 801394e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	6858      	ldr	r0, [r3, #4]
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	461a      	mov	r2, r3
 801395c:	4917      	ldr	r1, [pc, #92]	; (80139bc <pcb_new+0xd0>)
 801395e:	f009 feb7 	bl	801d6d0 <udp_recv>
      }
      break;
 8013962:	e016      	b.n	8013992 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	681c      	ldr	r4, [r3, #0]
 8013968:	7bfb      	ldrb	r3, [r7, #15]
 801396a:	4618      	mov	r0, r3
 801396c:	f004 fc4e 	bl	801820c <tcp_new_ip_type>
 8013970:	4603      	mov	r3, r0
 8013972:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	685b      	ldr	r3, [r3, #4]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d00b      	beq.n	8013996 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	4618      	mov	r0, r3
 8013984:	f7ff fece 	bl	8013724 <setup_tcp>
      }
      break;
 8013988:	e005      	b.n	8013996 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	22fa      	movs	r2, #250	; 0xfa
 801398e:	711a      	strb	r2, [r3, #4]
      return;
 8013990:	e00a      	b.n	80139a8 <pcb_new+0xbc>
      break;
 8013992:	bf00      	nop
 8013994:	e000      	b.n	8013998 <pcb_new+0xac>
      break;
 8013996:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	685b      	ldr	r3, [r3, #4]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d102      	bne.n	80139a8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	22ff      	movs	r2, #255	; 0xff
 80139a6:	711a      	strb	r2, [r3, #4]
  }
}
 80139a8:	3714      	adds	r7, #20
 80139aa:	46bd      	mov	sp, r7
 80139ac:	bd90      	pop	{r4, r7, pc}
 80139ae:	bf00      	nop
 80139b0:	08027950 	.word	0x08027950
 80139b4:	08027b34 	.word	0x08027b34
 80139b8:	08027994 	.word	0x08027994
 80139bc:	080131ed 	.word	0x080131ed

080139c0 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b084      	sub	sp, #16
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	2200      	movs	r2, #0
 80139d0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	685b      	ldr	r3, [r3, #4]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d102      	bne.n	80139e2 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80139dc:	68f8      	ldr	r0, [r7, #12]
 80139de:	f7ff ff85 	bl	80138ec <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80139e2:	bf00      	nop
 80139e4:	3710      	adds	r7, #16
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bd80      	pop	{r7, pc}
	...

080139ec <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b086      	sub	sp, #24
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	4603      	mov	r3, r0
 80139f4:	6039      	str	r1, [r7, #0]
 80139f6:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80139f8:	2300      	movs	r3, #0
 80139fa:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80139fc:	2007      	movs	r0, #7
 80139fe:	f001 fe1f 	bl	8015640 <memp_malloc>
 8013a02:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d101      	bne.n	8013a0e <netconn_alloc+0x22>
    return NULL;
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	e056      	b.n	8013abc <netconn_alloc+0xd0>
  }

  conn->pending_err = ERR_OK;
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	2200      	movs	r2, #0
 8013a12:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	79fa      	ldrb	r2, [r7, #7]
 8013a18:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8013a20:	79fb      	ldrb	r3, [r7, #7]
 8013a22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013a26:	2b10      	cmp	r3, #16
 8013a28:	d004      	beq.n	8013a34 <netconn_alloc+0x48>
 8013a2a:	2b20      	cmp	r3, #32
 8013a2c:	d105      	bne.n	8013a3a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8013a2e:	2306      	movs	r3, #6
 8013a30:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8013a32:	e00a      	b.n	8013a4a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8013a34:	2306      	movs	r3, #6
 8013a36:	617b      	str	r3, [r7, #20]
      break;
 8013a38:	e007      	b.n	8013a4a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8013a3a:	4b22      	ldr	r3, [pc, #136]	; (8013ac4 <netconn_alloc+0xd8>)
 8013a3c:	f240 22e5 	movw	r2, #741	; 0x2e5
 8013a40:	4921      	ldr	r1, [pc, #132]	; (8013ac8 <netconn_alloc+0xdc>)
 8013a42:	4822      	ldr	r0, [pc, #136]	; (8013acc <netconn_alloc+0xe0>)
 8013a44:	f010 fac8 	bl	8023fd8 <iprintf>
      goto free_and_return;
 8013a48:	e033      	b.n	8013ab2 <netconn_alloc+0xc6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	3310      	adds	r3, #16
 8013a4e:	6979      	ldr	r1, [r7, #20]
 8013a50:	4618      	mov	r0, r3
 8013a52:	f00e f8fd 	bl	8021c50 <sys_mbox_new>
 8013a56:	4603      	mov	r3, r0
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d129      	bne.n	8013ab0 <netconn_alloc+0xc4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	330c      	adds	r3, #12
 8013a60:	2100      	movs	r1, #0
 8013a62:	4618      	mov	r0, r3
 8013a64:	f00e f9bb 	bl	8021dde <sys_sem_new>
 8013a68:	4603      	mov	r3, r0
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d005      	beq.n	8013a7a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	3310      	adds	r3, #16
 8013a72:	4618      	mov	r0, r3
 8013a74:	f00e f90e 	bl	8021c94 <sys_mbox_free>
    goto free_and_return;
 8013a78:	e01b      	b.n	8013ab2 <netconn_alloc+0xc6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	3314      	adds	r3, #20
 8013a7e:	4618      	mov	r0, r3
 8013a80:	f00e f9a0 	bl	8021dc4 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	2200      	movs	r2, #0
 8013a88:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013a90:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	683a      	ldr	r2, [r7, #0]
 8013a96:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	2200      	movs	r2, #0
 8013a9c:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	7cfa      	ldrb	r2, [r7, #19]
 8013aa8:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	e005      	b.n	8013abc <netconn_alloc+0xd0>
    goto free_and_return;
 8013ab0:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8013ab2:	68f9      	ldr	r1, [r7, #12]
 8013ab4:	2007      	movs	r0, #7
 8013ab6:	f001 fe39 	bl	801572c <memp_free>
  return NULL;
 8013aba:	2300      	movs	r3, #0
}
 8013abc:	4618      	mov	r0, r3
 8013abe:	3718      	adds	r7, #24
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bd80      	pop	{r7, pc}
 8013ac4:	08027950 	.word	0x08027950
 8013ac8:	08027b54 	.word	0x08027b54
 8013acc:	08027994 	.word	0x08027994

08013ad0 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b082      	sub	sp, #8
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	685b      	ldr	r3, [r3, #4]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d006      	beq.n	8013aee <netconn_free+0x1e>
 8013ae0:	4b1b      	ldr	r3, [pc, #108]	; (8013b50 <netconn_free+0x80>)
 8013ae2:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8013ae6:	491b      	ldr	r1, [pc, #108]	; (8013b54 <netconn_free+0x84>)
 8013ae8:	481b      	ldr	r0, [pc, #108]	; (8013b58 <netconn_free+0x88>)
 8013aea:	f010 fa75 	bl	8023fd8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	3310      	adds	r3, #16
 8013af2:	4618      	mov	r0, r3
 8013af4:	f00e f955 	bl	8021da2 <sys_mbox_valid>
 8013af8:	4603      	mov	r3, r0
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d006      	beq.n	8013b0c <netconn_free+0x3c>
 8013afe:	4b14      	ldr	r3, [pc, #80]	; (8013b50 <netconn_free+0x80>)
 8013b00:	f240 3223 	movw	r2, #803	; 0x323
 8013b04:	4915      	ldr	r1, [pc, #84]	; (8013b5c <netconn_free+0x8c>)
 8013b06:	4814      	ldr	r0, [pc, #80]	; (8013b58 <netconn_free+0x88>)
 8013b08:	f010 fa66 	bl	8023fd8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	3314      	adds	r3, #20
 8013b10:	4618      	mov	r0, r3
 8013b12:	f00e f946 	bl	8021da2 <sys_mbox_valid>
 8013b16:	4603      	mov	r3, r0
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d006      	beq.n	8013b2a <netconn_free+0x5a>
 8013b1c:	4b0c      	ldr	r3, [pc, #48]	; (8013b50 <netconn_free+0x80>)
 8013b1e:	f240 3226 	movw	r2, #806	; 0x326
 8013b22:	490f      	ldr	r1, [pc, #60]	; (8013b60 <netconn_free+0x90>)
 8013b24:	480c      	ldr	r0, [pc, #48]	; (8013b58 <netconn_free+0x88>)
 8013b26:	f010 fa57 	bl	8023fd8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	330c      	adds	r3, #12
 8013b2e:	4618      	mov	r0, r3
 8013b30:	f00e f9bb 	bl	8021eaa <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	330c      	adds	r3, #12
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f00e f9d4 	bl	8021ee6 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8013b3e:	6879      	ldr	r1, [r7, #4]
 8013b40:	2007      	movs	r0, #7
 8013b42:	f001 fdf3 	bl	801572c <memp_free>
}
 8013b46:	bf00      	nop
 8013b48:	3708      	adds	r7, #8
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	bd80      	pop	{r7, pc}
 8013b4e:	bf00      	nop
 8013b50:	08027950 	.word	0x08027950
 8013b54:	08027b7c 	.word	0x08027b7c
 8013b58:	08027994 	.word	0x08027994
 8013b5c:	08027bac 	.word	0x08027bac
 8013b60:	08027be8 	.word	0x08027be8

08013b64 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b086      	sub	sp, #24
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	3310      	adds	r3, #16
 8013b70:	4618      	mov	r0, r3
 8013b72:	f00e f916 	bl	8021da2 <sys_mbox_valid>
 8013b76:	4603      	mov	r3, r0
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d02f      	beq.n	8013bdc <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8013b7c:	e018      	b.n	8013bb0 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	781b      	ldrb	r3, [r3, #0]
 8013b82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013b86:	2b10      	cmp	r3, #16
 8013b88:	d10e      	bne.n	8013ba8 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8013b8a:	693b      	ldr	r3, [r7, #16]
 8013b8c:	f107 020f 	add.w	r2, r7, #15
 8013b90:	4611      	mov	r1, r2
 8013b92:	4618      	mov	r0, r3
 8013b94:	f7ff faf0 	bl	8013178 <lwip_netconn_is_err_msg>
 8013b98:	4603      	mov	r3, r0
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d108      	bne.n	8013bb0 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8013b9e:	693b      	ldr	r3, [r7, #16]
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f002 fc73 	bl	801648c <pbuf_free>
 8013ba6:	e003      	b.n	8013bb0 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8013ba8:	693b      	ldr	r3, [r7, #16]
 8013baa:	4618      	mov	r0, r3
 8013bac:	f000 fe98 	bl	80148e0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	3310      	adds	r3, #16
 8013bb4:	f107 0210 	add.w	r2, r7, #16
 8013bb8:	4611      	mov	r1, r2
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f00e f8d5 	bl	8021d6a <sys_arch_mbox_tryfetch>
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013bc6:	d1da      	bne.n	8013b7e <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	3310      	adds	r3, #16
 8013bcc:	4618      	mov	r0, r3
 8013bce:	f00e f861 	bl	8021c94 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	3310      	adds	r3, #16
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f00e f8f4 	bl	8021dc4 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	3314      	adds	r3, #20
 8013be0:	4618      	mov	r0, r3
 8013be2:	f00e f8de 	bl	8021da2 <sys_mbox_valid>
 8013be6:	4603      	mov	r3, r0
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d034      	beq.n	8013c56 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8013bec:	e01d      	b.n	8013c2a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8013bee:	693b      	ldr	r3, [r7, #16]
 8013bf0:	f107 020e 	add.w	r2, r7, #14
 8013bf4:	4611      	mov	r1, r2
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	f7ff fabe 	bl	8013178 <lwip_netconn_is_err_msg>
 8013bfc:	4603      	mov	r3, r0
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d113      	bne.n	8013c2a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8013c02:	693b      	ldr	r3, [r7, #16]
 8013c04:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8013c06:	6978      	ldr	r0, [r7, #20]
 8013c08:	f7ff ffac 	bl	8013b64 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8013c0c:	697b      	ldr	r3, [r7, #20]
 8013c0e:	685b      	ldr	r3, [r3, #4]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d007      	beq.n	8013c24 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8013c14:	697b      	ldr	r3, [r7, #20]
 8013c16:	685b      	ldr	r3, [r3, #4]
 8013c18:	4618      	mov	r0, r3
 8013c1a:	f003 fa37 	bl	801708c <tcp_abort>
            newconn->pcb.tcp = NULL;
 8013c1e:	697b      	ldr	r3, [r7, #20]
 8013c20:	2200      	movs	r2, #0
 8013c22:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8013c24:	6978      	ldr	r0, [r7, #20]
 8013c26:	f7ff ff53 	bl	8013ad0 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	3314      	adds	r3, #20
 8013c2e:	f107 0210 	add.w	r2, r7, #16
 8013c32:	4611      	mov	r1, r2
 8013c34:	4618      	mov	r0, r3
 8013c36:	f00e f898 	bl	8021d6a <sys_arch_mbox_tryfetch>
 8013c3a:	4603      	mov	r3, r0
 8013c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013c40:	d1d5      	bne.n	8013bee <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	3314      	adds	r3, #20
 8013c46:	4618      	mov	r0, r3
 8013c48:	f00e f824 	bl	8021c94 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	3314      	adds	r3, #20
 8013c50:	4618      	mov	r0, r3
 8013c52:	f00e f8b7 	bl	8021dc4 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8013c56:	bf00      	nop
 8013c58:	3718      	adds	r7, #24
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	bd80      	pop	{r7, pc}
	...

08013c60 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b086      	sub	sp, #24
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
 8013c68:	460b      	mov	r3, r1
 8013c6a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d106      	bne.n	8013c84 <lwip_netconn_do_close_internal+0x24>
 8013c76:	4b87      	ldr	r3, [pc, #540]	; (8013e94 <lwip_netconn_do_close_internal+0x234>)
 8013c78:	f240 32a2 	movw	r2, #930	; 0x3a2
 8013c7c:	4986      	ldr	r1, [pc, #536]	; (8013e98 <lwip_netconn_do_close_internal+0x238>)
 8013c7e:	4887      	ldr	r0, [pc, #540]	; (8013e9c <lwip_netconn_do_close_internal+0x23c>)
 8013c80:	f010 f9aa 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	781b      	ldrb	r3, [r3, #0]
 8013c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013c8c:	2b10      	cmp	r3, #16
 8013c8e:	d006      	beq.n	8013c9e <lwip_netconn_do_close_internal+0x3e>
 8013c90:	4b80      	ldr	r3, [pc, #512]	; (8013e94 <lwip_netconn_do_close_internal+0x234>)
 8013c92:	f240 32a3 	movw	r2, #931	; 0x3a3
 8013c96:	4982      	ldr	r1, [pc, #520]	; (8013ea0 <lwip_netconn_do_close_internal+0x240>)
 8013c98:	4880      	ldr	r0, [pc, #512]	; (8013e9c <lwip_netconn_do_close_internal+0x23c>)
 8013c9a:	f010 f99d 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	785b      	ldrb	r3, [r3, #1]
 8013ca2:	2b04      	cmp	r3, #4
 8013ca4:	d006      	beq.n	8013cb4 <lwip_netconn_do_close_internal+0x54>
 8013ca6:	4b7b      	ldr	r3, [pc, #492]	; (8013e94 <lwip_netconn_do_close_internal+0x234>)
 8013ca8:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8013cac:	497d      	ldr	r1, [pc, #500]	; (8013ea4 <lwip_netconn_do_close_internal+0x244>)
 8013cae:	487b      	ldr	r0, [pc, #492]	; (8013e9c <lwip_netconn_do_close_internal+0x23c>)
 8013cb0:	f010 f992 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	685b      	ldr	r3, [r3, #4]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d106      	bne.n	8013cca <lwip_netconn_do_close_internal+0x6a>
 8013cbc:	4b75      	ldr	r3, [pc, #468]	; (8013e94 <lwip_netconn_do_close_internal+0x234>)
 8013cbe:	f240 32a5 	movw	r2, #933	; 0x3a5
 8013cc2:	4979      	ldr	r1, [pc, #484]	; (8013ea8 <lwip_netconn_do_close_internal+0x248>)
 8013cc4:	4875      	ldr	r0, [pc, #468]	; (8013e9c <lwip_netconn_do_close_internal+0x23c>)
 8013cc6:	f010 f987 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d106      	bne.n	8013ce0 <lwip_netconn_do_close_internal+0x80>
 8013cd2:	4b70      	ldr	r3, [pc, #448]	; (8013e94 <lwip_netconn_do_close_internal+0x234>)
 8013cd4:	f240 32a6 	movw	r2, #934	; 0x3a6
 8013cd8:	4974      	ldr	r1, [pc, #464]	; (8013eac <lwip_netconn_do_close_internal+0x24c>)
 8013cda:	4870      	ldr	r0, [pc, #448]	; (8013e9c <lwip_netconn_do_close_internal+0x23c>)
 8013cdc:	f010 f97c 	bl	8023fd8 <iprintf>

  tpcb = conn->pcb.tcp;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	685b      	ldr	r3, [r3, #4]
 8013ce4:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cea:	7a1b      	ldrb	r3, [r3, #8]
 8013cec:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8013cee:	7bfb      	ldrb	r3, [r7, #15]
 8013cf0:	f003 0301 	and.w	r3, r3, #1
 8013cf4:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8013cf6:	7bfb      	ldrb	r3, [r7, #15]
 8013cf8:	f003 0302 	and.w	r3, r3, #2
 8013cfc:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8013cfe:	7bfb      	ldrb	r3, [r7, #15]
 8013d00:	2b03      	cmp	r3, #3
 8013d02:	d102      	bne.n	8013d0a <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8013d04:	2301      	movs	r3, #1
 8013d06:	75bb      	strb	r3, [r7, #22]
 8013d08:	e01f      	b.n	8013d4a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8013d0a:	7bbb      	ldrb	r3, [r7, #14]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d00e      	beq.n	8013d2e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8013d10:	693b      	ldr	r3, [r7, #16]
 8013d12:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8013d14:	2b05      	cmp	r3, #5
 8013d16:	d007      	beq.n	8013d28 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8013d18:	693b      	ldr	r3, [r7, #16]
 8013d1a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8013d1c:	2b06      	cmp	r3, #6
 8013d1e:	d003      	beq.n	8013d28 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8013d20:	693b      	ldr	r3, [r7, #16]
 8013d22:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8013d24:	2b08      	cmp	r3, #8
 8013d26:	d102      	bne.n	8013d2e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8013d28:	2301      	movs	r3, #1
 8013d2a:	75bb      	strb	r3, [r7, #22]
 8013d2c:	e00d      	b.n	8013d4a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8013d2e:	7b7b      	ldrb	r3, [r7, #13]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d008      	beq.n	8013d46 <lwip_netconn_do_close_internal+0xe6>
 8013d34:	693b      	ldr	r3, [r7, #16]
 8013d36:	8b5b      	ldrh	r3, [r3, #26]
 8013d38:	f003 0310 	and.w	r3, r3, #16
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d002      	beq.n	8013d46 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8013d40:	2301      	movs	r3, #1
 8013d42:	75bb      	strb	r3, [r7, #22]
 8013d44:	e001      	b.n	8013d4a <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8013d46:	2300      	movs	r3, #0
 8013d48:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8013d4a:	7dbb      	ldrb	r3, [r7, #22]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d003      	beq.n	8013d58 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8013d50:	2100      	movs	r1, #0
 8013d52:	6938      	ldr	r0, [r7, #16]
 8013d54:	f004 fa68 	bl	8018228 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8013d58:	693b      	ldr	r3, [r7, #16]
 8013d5a:	7d1b      	ldrb	r3, [r3, #20]
 8013d5c:	2b01      	cmp	r3, #1
 8013d5e:	d104      	bne.n	8013d6a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8013d60:	2100      	movs	r1, #0
 8013d62:	6938      	ldr	r0, [r7, #16]
 8013d64:	f004 fad8 	bl	8018318 <tcp_accept>
 8013d68:	e01d      	b.n	8013da6 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8013d6a:	7bbb      	ldrb	r3, [r7, #14]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d007      	beq.n	8013d80 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8013d70:	2100      	movs	r1, #0
 8013d72:	6938      	ldr	r0, [r7, #16]
 8013d74:	f004 fa6a 	bl	801824c <tcp_recv>
      tcp_accept(tpcb, NULL);
 8013d78:	2100      	movs	r1, #0
 8013d7a:	6938      	ldr	r0, [r7, #16]
 8013d7c:	f004 facc 	bl	8018318 <tcp_accept>
    }
    if (shut_tx) {
 8013d80:	7b7b      	ldrb	r3, [r7, #13]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d003      	beq.n	8013d8e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8013d86:	2100      	movs	r1, #0
 8013d88:	6938      	ldr	r0, [r7, #16]
 8013d8a:	f004 fa81 	bl	8018290 <tcp_sent>
    }
    if (shut_close) {
 8013d8e:	7dbb      	ldrb	r3, [r7, #22]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d008      	beq.n	8013da6 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8013d94:	2200      	movs	r2, #0
 8013d96:	2100      	movs	r1, #0
 8013d98:	6938      	ldr	r0, [r7, #16]
 8013d9a:	f004 fad5 	bl	8018348 <tcp_poll>
      tcp_err(tpcb, NULL);
 8013d9e:	2100      	movs	r1, #0
 8013da0:	6938      	ldr	r0, [r7, #16]
 8013da2:	f004 fa97 	bl	80182d4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8013da6:	7dbb      	ldrb	r3, [r7, #22]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d005      	beq.n	8013db8 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8013dac:	6938      	ldr	r0, [r7, #16]
 8013dae:	f003 f827 	bl	8016e00 <tcp_close>
 8013db2:	4603      	mov	r3, r0
 8013db4:	75fb      	strb	r3, [r7, #23]
 8013db6:	e007      	b.n	8013dc8 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8013db8:	7bbb      	ldrb	r3, [r7, #14]
 8013dba:	7b7a      	ldrb	r2, [r7, #13]
 8013dbc:	4619      	mov	r1, r3
 8013dbe:	6938      	ldr	r0, [r7, #16]
 8013dc0:	f003 f84a 	bl	8016e58 <tcp_shutdown>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8013dc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d102      	bne.n	8013dd6 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8013dd0:	2301      	movs	r3, #1
 8013dd2:	757b      	strb	r3, [r7, #21]
 8013dd4:	e016      	b.n	8013e04 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8013dd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013dda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013dde:	d10f      	bne.n	8013e00 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013de4:	7a5b      	ldrb	r3, [r3, #9]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d10c      	bne.n	8013e04 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8013dea:	2301      	movs	r3, #1
 8013dec:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8013dee:	7dbb      	ldrb	r3, [r7, #22]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d007      	beq.n	8013e04 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8013df4:	6938      	ldr	r0, [r7, #16]
 8013df6:	f003 f949 	bl	801708c <tcp_abort>
          err = ERR_OK;
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	75fb      	strb	r3, [r7, #23]
 8013dfe:	e001      	b.n	8013e04 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8013e00:	2301      	movs	r3, #1
 8013e02:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8013e04:	7d7b      	ldrb	r3, [r7, #21]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d052      	beq.n	8013eb0 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	330c      	adds	r3, #12
 8013e12:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e18:	7dfa      	ldrb	r2, [r7, #23]
 8013e1a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	2200      	movs	r2, #0
 8013e20:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	2200      	movs	r2, #0
 8013e26:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8013e28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d129      	bne.n	8013e84 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8013e30:	7dbb      	ldrb	r3, [r7, #22]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d00c      	beq.n	8013e50 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	2200      	movs	r2, #0
 8013e3a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d005      	beq.n	8013e50 <lwip_netconn_do_close_internal+0x1f0>
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e48:	2200      	movs	r2, #0
 8013e4a:	2104      	movs	r1, #4
 8013e4c:	6878      	ldr	r0, [r7, #4]
 8013e4e:	4798      	blx	r3
      }
      if (shut_rx) {
 8013e50:	7bbb      	ldrb	r3, [r7, #14]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d009      	beq.n	8013e6a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d005      	beq.n	8013e6a <lwip_netconn_do_close_internal+0x20a>
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e62:	2200      	movs	r2, #0
 8013e64:	2100      	movs	r1, #0
 8013e66:	6878      	ldr	r0, [r7, #4]
 8013e68:	4798      	blx	r3
      }
      if (shut_tx) {
 8013e6a:	7b7b      	ldrb	r3, [r7, #13]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d009      	beq.n	8013e84 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d005      	beq.n	8013e84 <lwip_netconn_do_close_internal+0x224>
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	2102      	movs	r1, #2
 8013e80:	6878      	ldr	r0, [r7, #4]
 8013e82:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8013e84:	78fb      	ldrb	r3, [r7, #3]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d002      	beq.n	8013e90 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8013e8a:	68b8      	ldr	r0, [r7, #8]
 8013e8c:	f00e f800 	bl	8021e90 <sys_sem_signal>
    }
    return ERR_OK;
 8013e90:	2300      	movs	r3, #0
 8013e92:	e03c      	b.n	8013f0e <lwip_netconn_do_close_internal+0x2ae>
 8013e94:	08027950 	.word	0x08027950
 8013e98:	08027c24 	.word	0x08027c24
 8013e9c:	08027994 	.word	0x08027994
 8013ea0:	08027c34 	.word	0x08027c34
 8013ea4:	08027c54 	.word	0x08027c54
 8013ea8:	08027c78 	.word	0x08027c78
 8013eac:	08027ab8 	.word	0x08027ab8
  }
  if (!close_finished) {
 8013eb0:	7d7b      	ldrb	r3, [r7, #21]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d11e      	bne.n	8013ef4 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8013eb6:	693b      	ldr	r3, [r7, #16]
 8013eb8:	7d1b      	ldrb	r3, [r3, #20]
 8013eba:	2b01      	cmp	r3, #1
 8013ebc:	d106      	bne.n	8013ecc <lwip_netconn_do_close_internal+0x26c>
 8013ebe:	4b16      	ldr	r3, [pc, #88]	; (8013f18 <lwip_netconn_do_close_internal+0x2b8>)
 8013ec0:	f240 4241 	movw	r2, #1089	; 0x441
 8013ec4:	4915      	ldr	r1, [pc, #84]	; (8013f1c <lwip_netconn_do_close_internal+0x2bc>)
 8013ec6:	4816      	ldr	r0, [pc, #88]	; (8013f20 <lwip_netconn_do_close_internal+0x2c0>)
 8013ec8:	f010 f886 	bl	8023fd8 <iprintf>
    if (shut_tx) {
 8013ecc:	7b7b      	ldrb	r3, [r7, #13]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d003      	beq.n	8013eda <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8013ed2:	4914      	ldr	r1, [pc, #80]	; (8013f24 <lwip_netconn_do_close_internal+0x2c4>)
 8013ed4:	6938      	ldr	r0, [r7, #16]
 8013ed6:	f004 f9db 	bl	8018290 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8013eda:	2201      	movs	r2, #1
 8013edc:	4912      	ldr	r1, [pc, #72]	; (8013f28 <lwip_netconn_do_close_internal+0x2c8>)
 8013ede:	6938      	ldr	r0, [r7, #16]
 8013ee0:	f004 fa32 	bl	8018348 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8013ee4:	4911      	ldr	r1, [pc, #68]	; (8013f2c <lwip_netconn_do_close_internal+0x2cc>)
 8013ee6:	6938      	ldr	r0, [r7, #16]
 8013ee8:	f004 f9f4 	bl	80182d4 <tcp_err>
    tcp_arg(tpcb, conn);
 8013eec:	6879      	ldr	r1, [r7, #4]
 8013eee:	6938      	ldr	r0, [r7, #16]
 8013ef0:	f004 f99a 	bl	8018228 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8013ef4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d106      	bne.n	8013f0a <lwip_netconn_do_close_internal+0x2aa>
 8013efc:	4b06      	ldr	r3, [pc, #24]	; (8013f18 <lwip_netconn_do_close_internal+0x2b8>)
 8013efe:	f240 424d 	movw	r2, #1101	; 0x44d
 8013f02:	490b      	ldr	r1, [pc, #44]	; (8013f30 <lwip_netconn_do_close_internal+0x2d0>)
 8013f04:	4806      	ldr	r0, [pc, #24]	; (8013f20 <lwip_netconn_do_close_internal+0x2c0>)
 8013f06:	f010 f867 	bl	8023fd8 <iprintf>
  return err;
 8013f0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013f0e:	4618      	mov	r0, r3
 8013f10:	3718      	adds	r7, #24
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd80      	pop	{r7, pc}
 8013f16:	bf00      	nop
 8013f18:	08027950 	.word	0x08027950
 8013f1c:	08027c8c 	.word	0x08027c8c
 8013f20:	08027994 	.word	0x08027994
 8013f24:	080134c5 	.word	0x080134c5
 8013f28:	080133f5 	.word	0x080133f5
 8013f2c:	08013571 	.word	0x08013571
 8013f30:	08027cb0 	.word	0x08027cb0

08013f34 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b084      	sub	sp, #16
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	785b      	ldrb	r3, [r3, #1]
 8013f46:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8013f48:	7afb      	ldrb	r3, [r7, #11]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d00d      	beq.n	8013f6a <lwip_netconn_do_delconn+0x36>
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	781b      	ldrb	r3, [r3, #0]
 8013f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013f58:	2b10      	cmp	r3, #16
 8013f5a:	d006      	beq.n	8013f6a <lwip_netconn_do_delconn+0x36>
 8013f5c:	4b61      	ldr	r3, [pc, #388]	; (80140e4 <lwip_netconn_do_delconn+0x1b0>)
 8013f5e:	f240 425e 	movw	r2, #1118	; 0x45e
 8013f62:	4961      	ldr	r1, [pc, #388]	; (80140e8 <lwip_netconn_do_delconn+0x1b4>)
 8013f64:	4861      	ldr	r0, [pc, #388]	; (80140ec <lwip_netconn_do_delconn+0x1b8>)
 8013f66:	f010 f837 	bl	8023fd8 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8013f6a:	7afb      	ldrb	r3, [r7, #11]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d005      	beq.n	8013f7c <lwip_netconn_do_delconn+0x48>
 8013f70:	7afb      	ldrb	r3, [r7, #11]
 8013f72:	2b02      	cmp	r3, #2
 8013f74:	d002      	beq.n	8013f7c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8013f76:	7afb      	ldrb	r3, [r7, #11]
 8013f78:	2b03      	cmp	r3, #3
 8013f7a:	d10a      	bne.n	8013f92 <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 8013f7c:	7afb      	ldrb	r3, [r7, #11]
 8013f7e:	2b03      	cmp	r3, #3
 8013f80:	d10b      	bne.n	8013f9a <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013f8a:	f003 0304 	and.w	r3, r3, #4
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d103      	bne.n	8013f9a <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	22fb      	movs	r2, #251	; 0xfb
 8013f96:	711a      	strb	r2, [r3, #4]
 8013f98:	e098      	b.n	80140cc <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8013f9a:	7afb      	ldrb	r3, [r7, #11]
 8013f9c:	2b03      	cmp	r3, #3
 8013f9e:	d10e      	bne.n	8013fbe <lwip_netconn_do_delconn+0x8a>
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013fa8:	f003 0304 	and.w	r3, r3, #4
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d106      	bne.n	8013fbe <lwip_netconn_do_delconn+0x8a>
 8013fb0:	4b4c      	ldr	r3, [pc, #304]	; (80140e4 <lwip_netconn_do_delconn+0x1b0>)
 8013fb2:	f240 427a 	movw	r2, #1146	; 0x47a
 8013fb6:	494e      	ldr	r1, [pc, #312]	; (80140f0 <lwip_netconn_do_delconn+0x1bc>)
 8013fb8:	484c      	ldr	r0, [pc, #304]	; (80140ec <lwip_netconn_do_delconn+0x1b8>)
 8013fba:	f010 f80d 	bl	8023fd8 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	2200      	movs	r2, #0
 8013fc2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	4618      	mov	r0, r3
 8013fca:	f7ff fdcb 	bl	8013b64 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	685b      	ldr	r3, [r3, #4]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d05f      	beq.n	8014098 <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	781b      	ldrb	r3, [r3, #0]
 8013fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013fe2:	2b10      	cmp	r3, #16
 8013fe4:	d00d      	beq.n	8014002 <lwip_netconn_do_delconn+0xce>
 8013fe6:	2b20      	cmp	r3, #32
 8013fe8:	d151      	bne.n	801408e <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	685b      	ldr	r3, [r3, #4]
 8013ff0:	2200      	movs	r2, #0
 8013ff2:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	685b      	ldr	r3, [r3, #4]
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	f009 fb88 	bl	801d710 <udp_remove>
          break;
 8014000:	e046      	b.n	8014090 <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014008:	2b00      	cmp	r3, #0
 801400a:	d006      	beq.n	801401a <lwip_netconn_do_delconn+0xe6>
 801400c:	4b35      	ldr	r3, [pc, #212]	; (80140e4 <lwip_netconn_do_delconn+0x1b0>)
 801400e:	f240 4294 	movw	r2, #1172	; 0x494
 8014012:	4938      	ldr	r1, [pc, #224]	; (80140f4 <lwip_netconn_do_delconn+0x1c0>)
 8014014:	4835      	ldr	r0, [pc, #212]	; (80140ec <lwip_netconn_do_delconn+0x1b8>)
 8014016:	f00f ffdf 	bl	8023fd8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	2204      	movs	r2, #4
 8014020:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	2203      	movs	r2, #3
 8014026:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	68fa      	ldr	r2, [r7, #12]
 801402e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	2100      	movs	r1, #0
 8014036:	4618      	mov	r0, r3
 8014038:	f7ff fe12 	bl	8013c60 <lwip_netconn_do_close_internal>
 801403c:	4603      	mov	r3, r0
 801403e:	2b00      	cmp	r3, #0
 8014040:	d04b      	beq.n	80140da <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	785b      	ldrb	r3, [r3, #1]
 8014048:	2b04      	cmp	r3, #4
 801404a:	d006      	beq.n	801405a <lwip_netconn_do_delconn+0x126>
 801404c:	4b25      	ldr	r3, [pc, #148]	; (80140e4 <lwip_netconn_do_delconn+0x1b0>)
 801404e:	f240 429a 	movw	r2, #1178	; 0x49a
 8014052:	4929      	ldr	r1, [pc, #164]	; (80140f8 <lwip_netconn_do_delconn+0x1c4>)
 8014054:	4825      	ldr	r0, [pc, #148]	; (80140ec <lwip_netconn_do_delconn+0x1b8>)
 8014056:	f00f ffbf 	bl	8023fd8 <iprintf>
            UNLOCK_TCPIP_CORE();
 801405a:	4828      	ldr	r0, [pc, #160]	; (80140fc <lwip_netconn_do_delconn+0x1c8>)
 801405c:	f00d ff89 	bl	8021f72 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	330c      	adds	r3, #12
 8014066:	2100      	movs	r1, #0
 8014068:	4618      	mov	r0, r3
 801406a:	f00d fee0 	bl	8021e2e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 801406e:	4823      	ldr	r0, [pc, #140]	; (80140fc <lwip_netconn_do_delconn+0x1c8>)
 8014070:	f00d ff70 	bl	8021f54 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	785b      	ldrb	r3, [r3, #1]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d02d      	beq.n	80140da <lwip_netconn_do_delconn+0x1a6>
 801407e:	4b19      	ldr	r3, [pc, #100]	; (80140e4 <lwip_netconn_do_delconn+0x1b0>)
 8014080:	f240 429e 	movw	r2, #1182	; 0x49e
 8014084:	491c      	ldr	r1, [pc, #112]	; (80140f8 <lwip_netconn_do_delconn+0x1c4>)
 8014086:	4819      	ldr	r0, [pc, #100]	; (80140ec <lwip_netconn_do_delconn+0x1b8>)
 8014088:	f00f ffa6 	bl	8023fd8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 801408c:	e025      	b.n	80140da <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 801408e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	2200      	movs	r2, #0
 8014096:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d007      	beq.n	80140b2 <lwip_netconn_do_delconn+0x17e>
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140a8:	68fa      	ldr	r2, [r7, #12]
 80140aa:	6810      	ldr	r0, [r2, #0]
 80140ac:	2200      	movs	r2, #0
 80140ae:	2100      	movs	r1, #0
 80140b0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d007      	beq.n	80140cc <lwip_netconn_do_delconn+0x198>
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140c2:	68fa      	ldr	r2, [r7, #12]
 80140c4:	6810      	ldr	r0, [r2, #0]
 80140c6:	2200      	movs	r2, #0
 80140c8:	2102      	movs	r1, #2
 80140ca:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	330c      	adds	r3, #12
 80140d2:	4618      	mov	r0, r3
 80140d4:	f00d fef6 	bl	8021ec4 <sys_sem_valid>
 80140d8:	e000      	b.n	80140dc <lwip_netconn_do_delconn+0x1a8>
          return;
 80140da:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80140dc:	3710      	adds	r7, #16
 80140de:	46bd      	mov	sp, r7
 80140e0:	bd80      	pop	{r7, pc}
 80140e2:	bf00      	nop
 80140e4:	08027950 	.word	0x08027950
 80140e8:	08027cc0 	.word	0x08027cc0
 80140ec:	08027994 	.word	0x08027994
 80140f0:	08027cd4 	.word	0x08027cd4
 80140f4:	08027cf4 	.word	0x08027cf4
 80140f8:	08027d10 	.word	0x08027d10
 80140fc:	2000fa80 	.word	0x2000fa80

08014100 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8014100:	b580      	push	{r7, lr}
 8014102:	b084      	sub	sp, #16
 8014104:	af00      	add	r7, sp, #0
 8014106:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 801410c:	68bb      	ldr	r3, [r7, #8]
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	685b      	ldr	r3, [r3, #4]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d025      	beq.n	8014162 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8014116:	68bb      	ldr	r3, [r7, #8]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	781b      	ldrb	r3, [r3, #0]
 801411c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014120:	2b10      	cmp	r3, #16
 8014122:	d00e      	beq.n	8014142 <lwip_netconn_do_bind+0x42>
 8014124:	2b20      	cmp	r3, #32
 8014126:	d119      	bne.n	801415c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8014128:	68bb      	ldr	r3, [r7, #8]
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	6858      	ldr	r0, [r3, #4]
 801412e:	68bb      	ldr	r3, [r7, #8]
 8014130:	6899      	ldr	r1, [r3, #8]
 8014132:	68bb      	ldr	r3, [r7, #8]
 8014134:	899b      	ldrh	r3, [r3, #12]
 8014136:	461a      	mov	r2, r3
 8014138:	f009 f9c8 	bl	801d4cc <udp_bind>
 801413c:	4603      	mov	r3, r0
 801413e:	73fb      	strb	r3, [r7, #15]
        break;
 8014140:	e011      	b.n	8014166 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8014142:	68bb      	ldr	r3, [r7, #8]
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	6858      	ldr	r0, [r3, #4]
 8014148:	68bb      	ldr	r3, [r7, #8]
 801414a:	6899      	ldr	r1, [r3, #8]
 801414c:	68bb      	ldr	r3, [r7, #8]
 801414e:	899b      	ldrh	r3, [r3, #12]
 8014150:	461a      	mov	r2, r3
 8014152:	f002 ffa7 	bl	80170a4 <tcp_bind>
 8014156:	4603      	mov	r3, r0
 8014158:	73fb      	strb	r3, [r7, #15]
        break;
 801415a:	e004      	b.n	8014166 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 801415c:	23fa      	movs	r3, #250	; 0xfa
 801415e:	73fb      	strb	r3, [r7, #15]
        break;
 8014160:	e001      	b.n	8014166 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8014162:	23fa      	movs	r3, #250	; 0xfa
 8014164:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8014166:	68bb      	ldr	r3, [r7, #8]
 8014168:	7bfa      	ldrb	r2, [r7, #15]
 801416a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801416c:	bf00      	nop
 801416e:	3710      	adds	r7, #16
 8014170:	46bd      	mov	sp, r7
 8014172:	bd80      	pop	{r7, pc}

08014174 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b086      	sub	sp, #24
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8014180:	697b      	ldr	r3, [r7, #20]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	685b      	ldr	r3, [r3, #4]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d07f      	beq.n	801428a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801418a:	697b      	ldr	r3, [r7, #20]
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	781b      	ldrb	r3, [r3, #0]
 8014190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014194:	2b10      	cmp	r3, #16
 8014196:	d175      	bne.n	8014284 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8014198:	697b      	ldr	r3, [r7, #20]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	785b      	ldrb	r3, [r3, #1]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d165      	bne.n	801426e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80141a2:	697b      	ldr	r3, [r7, #20]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	685b      	ldr	r3, [r3, #4]
 80141a8:	7d1b      	ldrb	r3, [r3, #20]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d002      	beq.n	80141b4 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 80141ae:	23fa      	movs	r3, #250	; 0xfa
 80141b0:	72fb      	strb	r3, [r7, #11]
 80141b2:	e06c      	b.n	801428e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 80141b4:	23ff      	movs	r3, #255	; 0xff
 80141b6:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80141b8:	697b      	ldr	r3, [r7, #20]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	685b      	ldr	r3, [r3, #4]
 80141be:	f107 020b 	add.w	r2, r7, #11
 80141c2:	7cf9      	ldrb	r1, [r7, #19]
 80141c4:	4618      	mov	r0, r3
 80141c6:	f003 f839 	bl	801723c <tcp_listen_with_backlog_and_err>
 80141ca:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d05d      	beq.n	801428e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80141d2:	697b      	ldr	r3, [r7, #20]
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	3310      	adds	r3, #16
 80141d8:	4618      	mov	r0, r3
 80141da:	f00d fde2 	bl	8021da2 <sys_mbox_valid>
 80141de:	4603      	mov	r3, r0
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d00b      	beq.n	80141fc <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 80141e4:	697b      	ldr	r3, [r7, #20]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	3310      	adds	r3, #16
 80141ea:	4618      	mov	r0, r3
 80141ec:	f00d fd52 	bl	8021c94 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80141f0:	697b      	ldr	r3, [r7, #20]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	3310      	adds	r3, #16
 80141f6:	4618      	mov	r0, r3
 80141f8:	f00d fde4 	bl	8021dc4 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80141fc:	2300      	movs	r3, #0
 80141fe:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8014200:	697b      	ldr	r3, [r7, #20]
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	3314      	adds	r3, #20
 8014206:	4618      	mov	r0, r3
 8014208:	f00d fdcb 	bl	8021da2 <sys_mbox_valid>
 801420c:	4603      	mov	r3, r0
 801420e:	2b00      	cmp	r3, #0
 8014210:	d108      	bne.n	8014224 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8014212:	697b      	ldr	r3, [r7, #20]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	3314      	adds	r3, #20
 8014218:	2106      	movs	r1, #6
 801421a:	4618      	mov	r0, r3
 801421c:	f00d fd18 	bl	8021c50 <sys_mbox_new>
 8014220:	4603      	mov	r3, r0
 8014222:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8014224:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d118      	bne.n	801425e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 801422c:	697b      	ldr	r3, [r7, #20]
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	2202      	movs	r2, #2
 8014232:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8014234:	697b      	ldr	r3, [r7, #20]
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	68fa      	ldr	r2, [r7, #12]
 801423a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 801423c:	697b      	ldr	r3, [r7, #20]
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	685a      	ldr	r2, [r3, #4]
 8014242:	697b      	ldr	r3, [r7, #20]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	4619      	mov	r1, r3
 8014248:	4610      	mov	r0, r2
 801424a:	f003 ffed 	bl	8018228 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 801424e:	697b      	ldr	r3, [r7, #20]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	685b      	ldr	r3, [r3, #4]
 8014254:	4912      	ldr	r1, [pc, #72]	; (80142a0 <lwip_netconn_do_listen+0x12c>)
 8014256:	4618      	mov	r0, r3
 8014258:	f004 f85e 	bl	8018318 <tcp_accept>
 801425c:	e017      	b.n	801428e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 801425e:	68f8      	ldr	r0, [r7, #12]
 8014260:	f002 fdce 	bl	8016e00 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8014264:	697b      	ldr	r3, [r7, #20]
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	2200      	movs	r2, #0
 801426a:	605a      	str	r2, [r3, #4]
 801426c:	e00f      	b.n	801428e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 801426e:	697b      	ldr	r3, [r7, #20]
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	785b      	ldrb	r3, [r3, #1]
 8014274:	2b02      	cmp	r3, #2
 8014276:	d102      	bne.n	801427e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8014278:	2300      	movs	r3, #0
 801427a:	72fb      	strb	r3, [r7, #11]
 801427c:	e007      	b.n	801428e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 801427e:	23f5      	movs	r3, #245	; 0xf5
 8014280:	72fb      	strb	r3, [r7, #11]
 8014282:	e004      	b.n	801428e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8014284:	23f0      	movs	r3, #240	; 0xf0
 8014286:	72fb      	strb	r3, [r7, #11]
 8014288:	e001      	b.n	801428e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 801428a:	23f5      	movs	r3, #245	; 0xf5
 801428c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 801428e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8014292:	697b      	ldr	r3, [r7, #20]
 8014294:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8014296:	bf00      	nop
 8014298:	3718      	adds	r7, #24
 801429a:	46bd      	mov	sp, r7
 801429c:	bd80      	pop	{r7, pc}
 801429e:	bf00      	nop
 80142a0:	08013775 	.word	0x08013775

080142a4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b086      	sub	sp, #24
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80142b0:	693b      	ldr	r3, [r7, #16]
 80142b2:	2200      	movs	r2, #0
 80142b4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80142b6:	693b      	ldr	r3, [r7, #16]
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	685b      	ldr	r3, [r3, #4]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d022      	beq.n	8014306 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80142c0:	693b      	ldr	r3, [r7, #16]
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	781b      	ldrb	r3, [r3, #0]
 80142c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80142ca:	2b10      	cmp	r3, #16
 80142cc:	d11b      	bne.n	8014306 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80142ce:	693b      	ldr	r3, [r7, #16]
 80142d0:	689b      	ldr	r3, [r3, #8]
 80142d2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80142da:	d202      	bcs.n	80142e2 <lwip_netconn_do_recv+0x3e>
 80142dc:	697b      	ldr	r3, [r7, #20]
 80142de:	b29b      	uxth	r3, r3
 80142e0:	e001      	b.n	80142e6 <lwip_netconn_do_recv+0x42>
 80142e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80142e6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80142e8:	693b      	ldr	r3, [r7, #16]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	685b      	ldr	r3, [r3, #4]
 80142ee:	89fa      	ldrh	r2, [r7, #14]
 80142f0:	4611      	mov	r1, r2
 80142f2:	4618      	mov	r0, r3
 80142f4:	f003 f8c6 	bl	8017484 <tcp_recved>
        remaining -= recved;
 80142f8:	89fb      	ldrh	r3, [r7, #14]
 80142fa:	697a      	ldr	r2, [r7, #20]
 80142fc:	1ad3      	subs	r3, r2, r3
 80142fe:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8014300:	697b      	ldr	r3, [r7, #20]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d1e6      	bne.n	80142d4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8014306:	bf00      	nop
 8014308:	3718      	adds	r7, #24
 801430a:	46bd      	mov	sp, r7
 801430c:	bd80      	pop	{r7, pc}
	...

08014310 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8014310:	b580      	push	{r7, lr}
 8014312:	b088      	sub	sp, #32
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
 8014318:	460b      	mov	r3, r1
 801431a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 801431c:	2300      	movs	r3, #0
 801431e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d106      	bne.n	8014334 <lwip_netconn_do_writemore+0x24>
 8014326:	4b61      	ldr	r3, [pc, #388]	; (80144ac <lwip_netconn_do_writemore+0x19c>)
 8014328:	f240 6273 	movw	r2, #1651	; 0x673
 801432c:	4960      	ldr	r1, [pc, #384]	; (80144b0 <lwip_netconn_do_writemore+0x1a0>)
 801432e:	4861      	ldr	r0, [pc, #388]	; (80144b4 <lwip_netconn_do_writemore+0x1a4>)
 8014330:	f00f fe52 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	785b      	ldrb	r3, [r3, #1]
 8014338:	2b01      	cmp	r3, #1
 801433a:	d006      	beq.n	801434a <lwip_netconn_do_writemore+0x3a>
 801433c:	4b5b      	ldr	r3, [pc, #364]	; (80144ac <lwip_netconn_do_writemore+0x19c>)
 801433e:	f240 6274 	movw	r2, #1652	; 0x674
 8014342:	495d      	ldr	r1, [pc, #372]	; (80144b8 <lwip_netconn_do_writemore+0x1a8>)
 8014344:	485b      	ldr	r0, [pc, #364]	; (80144b4 <lwip_netconn_do_writemore+0x1a4>)
 8014346:	f00f fe47 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801434e:	2b00      	cmp	r3, #0
 8014350:	d106      	bne.n	8014360 <lwip_netconn_do_writemore+0x50>
 8014352:	4b56      	ldr	r3, [pc, #344]	; (80144ac <lwip_netconn_do_writemore+0x19c>)
 8014354:	f240 6275 	movw	r2, #1653	; 0x675
 8014358:	4958      	ldr	r1, [pc, #352]	; (80144bc <lwip_netconn_do_writemore+0x1ac>)
 801435a:	4856      	ldr	r0, [pc, #344]	; (80144b4 <lwip_netconn_do_writemore+0x1a4>)
 801435c:	f00f fe3c 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	685b      	ldr	r3, [r3, #4]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d106      	bne.n	8014376 <lwip_netconn_do_writemore+0x66>
 8014368:	4b50      	ldr	r3, [pc, #320]	; (80144ac <lwip_netconn_do_writemore+0x19c>)
 801436a:	f240 6276 	movw	r2, #1654	; 0x676
 801436e:	4954      	ldr	r1, [pc, #336]	; (80144c0 <lwip_netconn_do_writemore+0x1b0>)
 8014370:	4850      	ldr	r0, [pc, #320]	; (80144b4 <lwip_netconn_do_writemore+0x1a4>)
 8014372:	f00f fe31 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801437a:	699a      	ldr	r2, [r3, #24]
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014380:	695b      	ldr	r3, [r3, #20]
 8014382:	429a      	cmp	r2, r3
 8014384:	d306      	bcc.n	8014394 <lwip_netconn_do_writemore+0x84>
 8014386:	4b49      	ldr	r3, [pc, #292]	; (80144ac <lwip_netconn_do_writemore+0x19c>)
 8014388:	f240 6277 	movw	r2, #1655	; 0x677
 801438c:	494d      	ldr	r1, [pc, #308]	; (80144c4 <lwip_netconn_do_writemore+0x1b4>)
 801438e:	4849      	ldr	r0, [pc, #292]	; (80144b4 <lwip_netconn_do_writemore+0x1a4>)
 8014390:	f00f fe22 	bl	8023fd8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014398:	899b      	ldrh	r3, [r3, #12]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d106      	bne.n	80143ac <lwip_netconn_do_writemore+0x9c>
 801439e:	4b43      	ldr	r3, [pc, #268]	; (80144ac <lwip_netconn_do_writemore+0x19c>)
 80143a0:	f240 6279 	movw	r2, #1657	; 0x679
 80143a4:	4948      	ldr	r1, [pc, #288]	; (80144c8 <lwip_netconn_do_writemore+0x1b8>)
 80143a6:	4843      	ldr	r0, [pc, #268]	; (80144b4 <lwip_netconn_do_writemore+0x1a4>)
 80143a8:	f00f fe16 	bl	8023fd8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143b0:	7f1b      	ldrb	r3, [r3, #28]
 80143b2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80143ba:	f003 0302 	and.w	r3, r3, #2
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d104      	bne.n	80143cc <lwip_netconn_do_writemore+0xbc>
 80143c2:	7ebb      	ldrb	r3, [r7, #26]
 80143c4:	f003 0304 	and.w	r3, r3, #4
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d001      	beq.n	80143d0 <lwip_netconn_do_writemore+0xc0>
 80143cc:	2301      	movs	r3, #1
 80143ce:	e000      	b.n	80143d2 <lwip_netconn_do_writemore+0xc2>
 80143d0:	2300      	movs	r3, #0
 80143d2:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143d8:	689b      	ldr	r3, [r3, #8]
 80143da:	681a      	ldr	r2, [r3, #0]
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143e0:	691b      	ldr	r3, [r3, #16]
 80143e2:	4413      	add	r3, r2
 80143e4:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143ea:	689b      	ldr	r3, [r3, #8]
 80143ec:	685a      	ldr	r2, [r3, #4]
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143f2:	691b      	ldr	r3, [r3, #16]
 80143f4:	1ad3      	subs	r3, r2, r3
 80143f6:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80143f8:	693b      	ldr	r3, [r7, #16]
 80143fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80143fe:	d307      	bcc.n	8014410 <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 8014400:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014404:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8014406:	7ebb      	ldrb	r3, [r7, #26]
 8014408:	f043 0302 	orr.w	r3, r3, #2
 801440c:	76bb      	strb	r3, [r7, #26]
 801440e:	e001      	b.n	8014414 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 8014410:	693b      	ldr	r3, [r7, #16]
 8014412:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	685b      	ldr	r3, [r3, #4]
 8014418:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801441c:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 801441e:	89fa      	ldrh	r2, [r7, #14]
 8014420:	8bbb      	ldrh	r3, [r7, #28]
 8014422:	429a      	cmp	r2, r3
 8014424:	d216      	bcs.n	8014454 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 8014426:	89fb      	ldrh	r3, [r7, #14]
 8014428:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 801442a:	7e3b      	ldrb	r3, [r7, #24]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d00d      	beq.n	801444c <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 8014430:	8bbb      	ldrh	r3, [r7, #28]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d10e      	bne.n	8014454 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801443a:	699b      	ldr	r3, [r3, #24]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d102      	bne.n	8014446 <lwip_netconn_do_writemore+0x136>
 8014440:	f06f 0306 	mvn.w	r3, #6
 8014444:	e000      	b.n	8014448 <lwip_netconn_do_writemore+0x138>
 8014446:	2300      	movs	r3, #0
 8014448:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 801444a:	e08f      	b.n	801456c <lwip_netconn_do_writemore+0x25c>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 801444c:	7ebb      	ldrb	r3, [r7, #26]
 801444e:	f043 0302 	orr.w	r3, r3, #2
 8014452:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014458:	691a      	ldr	r2, [r3, #16]
 801445a:	8bbb      	ldrh	r3, [r7, #28]
 801445c:	441a      	add	r2, r3
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014462:	689b      	ldr	r3, [r3, #8]
 8014464:	685b      	ldr	r3, [r3, #4]
 8014466:	429a      	cmp	r2, r3
 8014468:	d906      	bls.n	8014478 <lwip_netconn_do_writemore+0x168>
 801446a:	4b10      	ldr	r3, [pc, #64]	; (80144ac <lwip_netconn_do_writemore+0x19c>)
 801446c:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8014470:	4916      	ldr	r1, [pc, #88]	; (80144cc <lwip_netconn_do_writemore+0x1bc>)
 8014472:	4810      	ldr	r0, [pc, #64]	; (80144b4 <lwip_netconn_do_writemore+0x1a4>)
 8014474:	f00f fdb0 	bl	8023fd8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8014478:	8bbb      	ldrh	r3, [r7, #28]
 801447a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801447e:	4293      	cmp	r3, r2
 8014480:	d103      	bne.n	801448a <lwip_netconn_do_writemore+0x17a>
 8014482:	693b      	ldr	r3, [r7, #16]
 8014484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014488:	d209      	bcs.n	801449e <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 801448a:	693b      	ldr	r3, [r7, #16]
 801448c:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 801448e:	8bba      	ldrh	r2, [r7, #28]
 8014490:	429a      	cmp	r2, r3
 8014492:	d11d      	bne.n	80144d0 <lwip_netconn_do_writemore+0x1c0>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014498:	899b      	ldrh	r3, [r3, #12]
 801449a:	2b01      	cmp	r3, #1
 801449c:	d918      	bls.n	80144d0 <lwip_netconn_do_writemore+0x1c0>
        write_more = 1;
 801449e:	2301      	movs	r3, #1
 80144a0:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80144a2:	7ebb      	ldrb	r3, [r7, #26]
 80144a4:	f043 0302 	orr.w	r3, r3, #2
 80144a8:	76bb      	strb	r3, [r7, #26]
 80144aa:	e013      	b.n	80144d4 <lwip_netconn_do_writemore+0x1c4>
 80144ac:	08027950 	.word	0x08027950
 80144b0:	08027aa8 	.word	0x08027aa8
 80144b4:	08027994 	.word	0x08027994
 80144b8:	08027db0 	.word	0x08027db0
 80144bc:	08027ab8 	.word	0x08027ab8
 80144c0:	08027dd0 	.word	0x08027dd0
 80144c4:	08027de8 	.word	0x08027de8
 80144c8:	08027e28 	.word	0x08027e28
 80144cc:	08027e50 	.word	0x08027e50
      } else {
        write_more = 0;
 80144d0:	2300      	movs	r3, #0
 80144d2:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	6858      	ldr	r0, [r3, #4]
 80144d8:	7ebb      	ldrb	r3, [r7, #26]
 80144da:	8bba      	ldrh	r2, [r7, #28]
 80144dc:	6979      	ldr	r1, [r7, #20]
 80144de:	f006 fdf3 	bl	801b0c8 <tcp_write>
 80144e2:	4603      	mov	r3, r0
 80144e4:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80144e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d12c      	bne.n	8014548 <lwip_netconn_do_writemore+0x238>
        conn->current_msg->msg.w.offset += len;
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144f2:	6999      	ldr	r1, [r3, #24]
 80144f4:	8bba      	ldrh	r2, [r7, #28]
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144fa:	440a      	add	r2, r1
 80144fc:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014502:	6919      	ldr	r1, [r3, #16]
 8014504:	8bba      	ldrh	r2, [r7, #28]
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801450a:	440a      	add	r2, r1
 801450c:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014512:	691a      	ldr	r2, [r3, #16]
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014518:	689b      	ldr	r3, [r3, #8]
 801451a:	685b      	ldr	r3, [r3, #4]
 801451c:	429a      	cmp	r2, r3
 801451e:	d113      	bne.n	8014548 <lwip_netconn_do_writemore+0x238>
          conn->current_msg->msg.w.vector_cnt--;
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014524:	899a      	ldrh	r2, [r3, #12]
 8014526:	3a01      	subs	r2, #1
 8014528:	b292      	uxth	r2, r2
 801452a:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014530:	899b      	ldrh	r3, [r3, #12]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d008      	beq.n	8014548 <lwip_netconn_do_writemore+0x238>
            conn->current_msg->msg.w.vector++;
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801453a:	689a      	ldr	r2, [r3, #8]
 801453c:	3208      	adds	r2, #8
 801453e:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014544:	2200      	movs	r2, #0
 8014546:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8014548:	7e7b      	ldrb	r3, [r7, #25]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d004      	beq.n	8014558 <lwip_netconn_do_writemore+0x248>
 801454e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014552:	2b00      	cmp	r3, #0
 8014554:	f43f af3e 	beq.w	80143d4 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8014558:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d004      	beq.n	801456a <lwip_netconn_do_writemore+0x25a>
 8014560:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014568:	d136      	bne.n	80145d8 <lwip_netconn_do_writemore+0x2c8>
err_mem:
 801456a:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 801456c:	7e3b      	ldrb	r3, [r7, #24]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d01b      	beq.n	80145aa <lwip_netconn_do_writemore+0x29a>
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014576:	699a      	ldr	r2, [r3, #24]
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801457c:	695b      	ldr	r3, [r3, #20]
 801457e:	429a      	cmp	r2, r3
 8014580:	d213      	bcs.n	80145aa <lwip_netconn_do_writemore+0x29a>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014586:	2b00      	cmp	r3, #0
 8014588:	d005      	beq.n	8014596 <lwip_netconn_do_writemore+0x286>
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801458e:	2200      	movs	r2, #0
 8014590:	2103      	movs	r1, #3
 8014592:	6878      	ldr	r0, [r7, #4]
 8014594:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	f893 3020 	ldrb.w	r3, [r3, #32]
 801459c:	f043 0310 	orr.w	r3, r3, #16
 80145a0:	b2da      	uxtb	r2, r3
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	f883 2020 	strb.w	r2, [r3, #32]
 80145a8:	e016      	b.n	80145d8 <lwip_netconn_do_writemore+0x2c8>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	685b      	ldr	r3, [r3, #4]
 80145ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80145b2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80145b6:	d305      	bcc.n	80145c4 <lwip_netconn_do_writemore+0x2b4>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	685b      	ldr	r3, [r3, #4]
 80145bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80145c0:	2b04      	cmp	r3, #4
 80145c2:	d909      	bls.n	80145d8 <lwip_netconn_do_writemore+0x2c8>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d005      	beq.n	80145d8 <lwip_netconn_do_writemore+0x2c8>
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145d0:	2200      	movs	r2, #0
 80145d2:	2103      	movs	r1, #3
 80145d4:	6878      	ldr	r0, [r7, #4]
 80145d6:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80145d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d11d      	bne.n	801461c <lwip_netconn_do_writemore+0x30c>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145e4:	699a      	ldr	r2, [r3, #24]
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145ea:	695b      	ldr	r3, [r3, #20]
 80145ec:	429a      	cmp	r2, r3
 80145ee:	d002      	beq.n	80145f6 <lwip_netconn_do_writemore+0x2e6>
 80145f0:	7e3b      	ldrb	r3, [r7, #24]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d001      	beq.n	80145fa <lwip_netconn_do_writemore+0x2ea>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80145f6:	2301      	movs	r3, #1
 80145f8:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	685b      	ldr	r3, [r3, #4]
 80145fe:	4618      	mov	r0, r3
 8014600:	f007 fb4c 	bl	801bc9c <tcp_output>
 8014604:	4603      	mov	r3, r0
 8014606:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8014608:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801460c:	f113 0f04 	cmn.w	r3, #4
 8014610:	d12c      	bne.n	801466c <lwip_netconn_do_writemore+0x35c>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8014612:	7b3b      	ldrb	r3, [r7, #12]
 8014614:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8014616:	2301      	movs	r3, #1
 8014618:	76fb      	strb	r3, [r7, #27]
 801461a:	e027      	b.n	801466c <lwip_netconn_do_writemore+0x35c>
      }
    } else if (err == ERR_MEM) {
 801461c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014624:	d120      	bne.n	8014668 <lwip_netconn_do_writemore+0x358>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	685b      	ldr	r3, [r3, #4]
 801462a:	4618      	mov	r0, r3
 801462c:	f007 fb36 	bl	801bc9c <tcp_output>
 8014630:	4603      	mov	r3, r0
 8014632:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8014634:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8014638:	f113 0f04 	cmn.w	r3, #4
 801463c:	d104      	bne.n	8014648 <lwip_netconn_do_writemore+0x338>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801463e:	7b7b      	ldrb	r3, [r7, #13]
 8014640:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8014642:	2301      	movs	r3, #1
 8014644:	76fb      	strb	r3, [r7, #27]
 8014646:	e011      	b.n	801466c <lwip_netconn_do_writemore+0x35c>
      } else if (dontblock) {
 8014648:	7e3b      	ldrb	r3, [r7, #24]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d00e      	beq.n	801466c <lwip_netconn_do_writemore+0x35c>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014652:	699b      	ldr	r3, [r3, #24]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d102      	bne.n	801465e <lwip_netconn_do_writemore+0x34e>
 8014658:	f06f 0306 	mvn.w	r3, #6
 801465c:	e000      	b.n	8014660 <lwip_netconn_do_writemore+0x350>
 801465e:	2300      	movs	r3, #0
 8014660:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8014662:	2301      	movs	r3, #1
 8014664:	76fb      	strb	r3, [r7, #27]
 8014666:	e001      	b.n	801466c <lwip_netconn_do_writemore+0x35c>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8014668:	2301      	movs	r3, #1
 801466a:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 801466c:	7efb      	ldrb	r3, [r7, #27]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d015      	beq.n	801469e <lwip_netconn_do_writemore+0x38e>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	330c      	adds	r3, #12
 801467a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014680:	7ffa      	ldrb	r2, [r7, #31]
 8014682:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	2200      	movs	r2, #0
 8014688:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	2200      	movs	r2, #0
 801468e:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8014690:	78fb      	ldrb	r3, [r7, #3]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d006      	beq.n	80146a4 <lwip_netconn_do_writemore+0x394>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8014696:	68b8      	ldr	r0, [r7, #8]
 8014698:	f00d fbfa 	bl	8021e90 <sys_sem_signal>
 801469c:	e002      	b.n	80146a4 <lwip_netconn_do_writemore+0x394>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 801469e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80146a2:	e000      	b.n	80146a6 <lwip_netconn_do_writemore+0x396>
  }
#endif
  return ERR_OK;
 80146a4:	2300      	movs	r3, #0
}
 80146a6:	4618      	mov	r0, r3
 80146a8:	3720      	adds	r7, #32
 80146aa:	46bd      	mov	sp, r7
 80146ac:	bd80      	pop	{r7, pc}
 80146ae:	bf00      	nop

080146b0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b084      	sub	sp, #16
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80146bc:	68bb      	ldr	r3, [r7, #8]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	4618      	mov	r0, r3
 80146c2:	f7fe fd08 	bl	80130d6 <netconn_err>
 80146c6:	4603      	mov	r3, r0
 80146c8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80146ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d166      	bne.n	80147a0 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80146d2:	68bb      	ldr	r3, [r7, #8]
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	781b      	ldrb	r3, [r3, #0]
 80146d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80146dc:	2b10      	cmp	r3, #16
 80146de:	d15d      	bne.n	801479c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 80146e0:	68bb      	ldr	r3, [r7, #8]
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	785b      	ldrb	r3, [r3, #1]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d002      	beq.n	80146f0 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 80146ea:	23fb      	movs	r3, #251	; 0xfb
 80146ec:	73fb      	strb	r3, [r7, #15]
 80146ee:	e057      	b.n	80147a0 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 80146f0:	68bb      	ldr	r3, [r7, #8]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	685b      	ldr	r3, [r3, #4]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d04d      	beq.n	8014796 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 80146fa:	68bb      	ldr	r3, [r7, #8]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	2201      	movs	r2, #1
 8014700:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8014702:	68bb      	ldr	r3, [r7, #8]
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014708:	2b00      	cmp	r3, #0
 801470a:	d006      	beq.n	801471a <lwip_netconn_do_write+0x6a>
 801470c:	4b28      	ldr	r3, [pc, #160]	; (80147b0 <lwip_netconn_do_write+0x100>)
 801470e:	f240 7223 	movw	r2, #1827	; 0x723
 8014712:	4928      	ldr	r1, [pc, #160]	; (80147b4 <lwip_netconn_do_write+0x104>)
 8014714:	4828      	ldr	r0, [pc, #160]	; (80147b8 <lwip_netconn_do_write+0x108>)
 8014716:	f00f fc5f 	bl	8023fd8 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 801471a:	68bb      	ldr	r3, [r7, #8]
 801471c:	695b      	ldr	r3, [r3, #20]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d106      	bne.n	8014730 <lwip_netconn_do_write+0x80>
 8014722:	4b23      	ldr	r3, [pc, #140]	; (80147b0 <lwip_netconn_do_write+0x100>)
 8014724:	f240 7224 	movw	r2, #1828	; 0x724
 8014728:	4924      	ldr	r1, [pc, #144]	; (80147bc <lwip_netconn_do_write+0x10c>)
 801472a:	4823      	ldr	r0, [pc, #140]	; (80147b8 <lwip_netconn_do_write+0x108>)
 801472c:	f00f fc54 	bl	8023fd8 <iprintf>
        msg->conn->current_msg = msg;
 8014730:	68bb      	ldr	r3, [r7, #8]
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	68ba      	ldr	r2, [r7, #8]
 8014736:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8014738:	68bb      	ldr	r3, [r7, #8]
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	2100      	movs	r1, #0
 801473e:	4618      	mov	r0, r3
 8014740:	f7ff fde6 	bl	8014310 <lwip_netconn_do_writemore>
 8014744:	4603      	mov	r3, r0
 8014746:	2b00      	cmp	r3, #0
 8014748:	d02e      	beq.n	80147a8 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 801474a:	68bb      	ldr	r3, [r7, #8]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	785b      	ldrb	r3, [r3, #1]
 8014750:	2b01      	cmp	r3, #1
 8014752:	d006      	beq.n	8014762 <lwip_netconn_do_write+0xb2>
 8014754:	4b16      	ldr	r3, [pc, #88]	; (80147b0 <lwip_netconn_do_write+0x100>)
 8014756:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 801475a:	4919      	ldr	r1, [pc, #100]	; (80147c0 <lwip_netconn_do_write+0x110>)
 801475c:	4816      	ldr	r0, [pc, #88]	; (80147b8 <lwip_netconn_do_write+0x108>)
 801475e:	f00f fc3b 	bl	8023fd8 <iprintf>
          UNLOCK_TCPIP_CORE();
 8014762:	4818      	ldr	r0, [pc, #96]	; (80147c4 <lwip_netconn_do_write+0x114>)
 8014764:	f00d fc05 	bl	8021f72 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8014768:	68bb      	ldr	r3, [r7, #8]
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	330c      	adds	r3, #12
 801476e:	2100      	movs	r1, #0
 8014770:	4618      	mov	r0, r3
 8014772:	f00d fb5c 	bl	8021e2e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8014776:	4813      	ldr	r0, [pc, #76]	; (80147c4 <lwip_netconn_do_write+0x114>)
 8014778:	f00d fbec 	bl	8021f54 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 801477c:	68bb      	ldr	r3, [r7, #8]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	785b      	ldrb	r3, [r3, #1]
 8014782:	2b01      	cmp	r3, #1
 8014784:	d110      	bne.n	80147a8 <lwip_netconn_do_write+0xf8>
 8014786:	4b0a      	ldr	r3, [pc, #40]	; (80147b0 <lwip_netconn_do_write+0x100>)
 8014788:	f240 722c 	movw	r2, #1836	; 0x72c
 801478c:	490c      	ldr	r1, [pc, #48]	; (80147c0 <lwip_netconn_do_write+0x110>)
 801478e:	480a      	ldr	r0, [pc, #40]	; (80147b8 <lwip_netconn_do_write+0x108>)
 8014790:	f00f fc22 	bl	8023fd8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8014794:	e008      	b.n	80147a8 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8014796:	23f5      	movs	r3, #245	; 0xf5
 8014798:	73fb      	strb	r3, [r7, #15]
 801479a:	e001      	b.n	80147a0 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 801479c:	23fa      	movs	r3, #250	; 0xfa
 801479e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 80147a0:	68bb      	ldr	r3, [r7, #8]
 80147a2:	7bfa      	ldrb	r2, [r7, #15]
 80147a4:	711a      	strb	r2, [r3, #4]
 80147a6:	e000      	b.n	80147aa <lwip_netconn_do_write+0xfa>
        return;
 80147a8:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 80147aa:	3710      	adds	r7, #16
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd80      	pop	{r7, pc}
 80147b0:	08027950 	.word	0x08027950
 80147b4:	08027cf4 	.word	0x08027cf4
 80147b8:	08027994 	.word	0x08027994
 80147bc:	08027e7c 	.word	0x08027e7c
 80147c0:	08027d10 	.word	0x08027d10
 80147c4:	2000fa80 	.word	0x2000fa80

080147c8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b084      	sub	sp, #16
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	785b      	ldrb	r3, [r3, #1]
 80147da:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	685b      	ldr	r3, [r3, #4]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d069      	beq.n	80148ba <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	781b      	ldrb	r3, [r3, #0]
 80147ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 80147f0:	2b10      	cmp	r3, #16
 80147f2:	d162      	bne.n	80148ba <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80147f8:	2b03      	cmp	r3, #3
 80147fa:	d002      	beq.n	8014802 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80147fc:	7afb      	ldrb	r3, [r7, #11]
 80147fe:	2b02      	cmp	r3, #2
 8014800:	d05b      	beq.n	80148ba <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8014802:	7afb      	ldrb	r3, [r7, #11]
 8014804:	2b03      	cmp	r3, #3
 8014806:	d103      	bne.n	8014810 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	22f5      	movs	r2, #245	; 0xf5
 801480c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801480e:	e059      	b.n	80148c4 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8014810:	7afb      	ldrb	r3, [r7, #11]
 8014812:	2b01      	cmp	r3, #1
 8014814:	d103      	bne.n	801481e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	22fb      	movs	r2, #251	; 0xfb
 801481a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801481c:	e052      	b.n	80148c4 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	7a1b      	ldrb	r3, [r3, #8]
 8014822:	f003 0301 	and.w	r3, r3, #1
 8014826:	2b00      	cmp	r3, #0
 8014828:	d004      	beq.n	8014834 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	4618      	mov	r0, r3
 8014830:	f7ff f998 	bl	8013b64 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801483a:	2b00      	cmp	r3, #0
 801483c:	d006      	beq.n	801484c <lwip_netconn_do_close+0x84>
 801483e:	4b23      	ldr	r3, [pc, #140]	; (80148cc <lwip_netconn_do_close+0x104>)
 8014840:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8014844:	4922      	ldr	r1, [pc, #136]	; (80148d0 <lwip_netconn_do_close+0x108>)
 8014846:	4823      	ldr	r0, [pc, #140]	; (80148d4 <lwip_netconn_do_close+0x10c>)
 8014848:	f00f fbc6 	bl	8023fd8 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	2204      	movs	r2, #4
 8014852:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	68fa      	ldr	r2, [r7, #12]
 801485a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	2100      	movs	r1, #0
 8014862:	4618      	mov	r0, r3
 8014864:	f7ff f9fc 	bl	8013c60 <lwip_netconn_do_close_internal>
 8014868:	4603      	mov	r3, r0
 801486a:	2b00      	cmp	r3, #0
 801486c:	d029      	beq.n	80148c2 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	785b      	ldrb	r3, [r3, #1]
 8014874:	2b04      	cmp	r3, #4
 8014876:	d006      	beq.n	8014886 <lwip_netconn_do_close+0xbe>
 8014878:	4b14      	ldr	r3, [pc, #80]	; (80148cc <lwip_netconn_do_close+0x104>)
 801487a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 801487e:	4916      	ldr	r1, [pc, #88]	; (80148d8 <lwip_netconn_do_close+0x110>)
 8014880:	4814      	ldr	r0, [pc, #80]	; (80148d4 <lwip_netconn_do_close+0x10c>)
 8014882:	f00f fba9 	bl	8023fd8 <iprintf>
        UNLOCK_TCPIP_CORE();
 8014886:	4815      	ldr	r0, [pc, #84]	; (80148dc <lwip_netconn_do_close+0x114>)
 8014888:	f00d fb73 	bl	8021f72 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	330c      	adds	r3, #12
 8014892:	2100      	movs	r1, #0
 8014894:	4618      	mov	r0, r3
 8014896:	f00d faca 	bl	8021e2e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 801489a:	4810      	ldr	r0, [pc, #64]	; (80148dc <lwip_netconn_do_close+0x114>)
 801489c:	f00d fb5a 	bl	8021f54 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	785b      	ldrb	r3, [r3, #1]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d00b      	beq.n	80148c2 <lwip_netconn_do_close+0xfa>
 80148aa:	4b08      	ldr	r3, [pc, #32]	; (80148cc <lwip_netconn_do_close+0x104>)
 80148ac:	f240 72c6 	movw	r2, #1990	; 0x7c6
 80148b0:	4909      	ldr	r1, [pc, #36]	; (80148d8 <lwip_netconn_do_close+0x110>)
 80148b2:	4808      	ldr	r0, [pc, #32]	; (80148d4 <lwip_netconn_do_close+0x10c>)
 80148b4:	f00f fb90 	bl	8023fd8 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80148b8:	e003      	b.n	80148c2 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	22f5      	movs	r2, #245	; 0xf5
 80148be:	711a      	strb	r2, [r3, #4]
 80148c0:	e000      	b.n	80148c4 <lwip_netconn_do_close+0xfc>
      return;
 80148c2:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80148c4:	3710      	adds	r7, #16
 80148c6:	46bd      	mov	sp, r7
 80148c8:	bd80      	pop	{r7, pc}
 80148ca:	bf00      	nop
 80148cc:	08027950 	.word	0x08027950
 80148d0:	08027cf4 	.word	0x08027cf4
 80148d4:	08027994 	.word	0x08027994
 80148d8:	08027d10 	.word	0x08027d10
 80148dc:	2000fa80 	.word	0x2000fa80

080148e0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b082      	sub	sp, #8
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d013      	beq.n	8014916 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d00b      	beq.n	801490e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	4618      	mov	r0, r3
 80148fc:	f001 fdc6 	bl	801648c <pbuf_free>
      buf->p = buf->ptr = NULL;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	2200      	movs	r2, #0
 8014904:	605a      	str	r2, [r3, #4]
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	685a      	ldr	r2, [r3, #4]
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 801490e:	6879      	ldr	r1, [r7, #4]
 8014910:	2006      	movs	r0, #6
 8014912:	f000 ff0b 	bl	801572c <memp_free>
  }
}
 8014916:	bf00      	nop
 8014918:	3708      	adds	r7, #8
 801491a:	46bd      	mov	sp, r7
 801491c:	bd80      	pop	{r7, pc}
	...

08014920 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8014920:	b580      	push	{r7, lr}
 8014922:	b084      	sub	sp, #16
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
 8014928:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801492a:	f008 fa6f 	bl	801ce0c <sys_timeouts_sleeptime>
 801492e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014936:	d10b      	bne.n	8014950 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8014938:	4813      	ldr	r0, [pc, #76]	; (8014988 <tcpip_timeouts_mbox_fetch+0x68>)
 801493a:	f00d fb1a 	bl	8021f72 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801493e:	2200      	movs	r2, #0
 8014940:	6839      	ldr	r1, [r7, #0]
 8014942:	6878      	ldr	r0, [r7, #4]
 8014944:	f00d f9d2 	bl	8021cec <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8014948:	480f      	ldr	r0, [pc, #60]	; (8014988 <tcpip_timeouts_mbox_fetch+0x68>)
 801494a:	f00d fb03 	bl	8021f54 <sys_mutex_lock>
    return;
 801494e:	e018      	b.n	8014982 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d102      	bne.n	801495c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8014956:	f008 fa1f 	bl	801cd98 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801495a:	e7e6      	b.n	801492a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801495c:	480a      	ldr	r0, [pc, #40]	; (8014988 <tcpip_timeouts_mbox_fetch+0x68>)
 801495e:	f00d fb08 	bl	8021f72 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8014962:	68fa      	ldr	r2, [r7, #12]
 8014964:	6839      	ldr	r1, [r7, #0]
 8014966:	6878      	ldr	r0, [r7, #4]
 8014968:	f00d f9c0 	bl	8021cec <sys_arch_mbox_fetch>
 801496c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801496e:	4806      	ldr	r0, [pc, #24]	; (8014988 <tcpip_timeouts_mbox_fetch+0x68>)
 8014970:	f00d faf0 	bl	8021f54 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8014974:	68bb      	ldr	r3, [r7, #8]
 8014976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801497a:	d102      	bne.n	8014982 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801497c:	f008 fa0c 	bl	801cd98 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8014980:	e7d3      	b.n	801492a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8014982:	3710      	adds	r7, #16
 8014984:	46bd      	mov	sp, r7
 8014986:	bd80      	pop	{r7, pc}
 8014988:	2000fa80 	.word	0x2000fa80

0801498c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b084      	sub	sp, #16
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8014994:	4810      	ldr	r0, [pc, #64]	; (80149d8 <tcpip_thread+0x4c>)
 8014996:	f00d fadd 	bl	8021f54 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801499a:	4b10      	ldr	r3, [pc, #64]	; (80149dc <tcpip_thread+0x50>)
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d005      	beq.n	80149ae <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80149a2:	4b0e      	ldr	r3, [pc, #56]	; (80149dc <tcpip_thread+0x50>)
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	4a0e      	ldr	r2, [pc, #56]	; (80149e0 <tcpip_thread+0x54>)
 80149a8:	6812      	ldr	r2, [r2, #0]
 80149aa:	4610      	mov	r0, r2
 80149ac:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80149ae:	f107 030c 	add.w	r3, r7, #12
 80149b2:	4619      	mov	r1, r3
 80149b4:	480b      	ldr	r0, [pc, #44]	; (80149e4 <tcpip_thread+0x58>)
 80149b6:	f7ff ffb3 	bl	8014920 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d106      	bne.n	80149ce <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80149c0:	4b09      	ldr	r3, [pc, #36]	; (80149e8 <tcpip_thread+0x5c>)
 80149c2:	2291      	movs	r2, #145	; 0x91
 80149c4:	4909      	ldr	r1, [pc, #36]	; (80149ec <tcpip_thread+0x60>)
 80149c6:	480a      	ldr	r0, [pc, #40]	; (80149f0 <tcpip_thread+0x64>)
 80149c8:	f00f fb06 	bl	8023fd8 <iprintf>
      continue;
 80149cc:	e003      	b.n	80149d6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	4618      	mov	r0, r3
 80149d2:	f000 f80f 	bl	80149f4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80149d6:	e7ea      	b.n	80149ae <tcpip_thread+0x22>
 80149d8:	2000fa80 	.word	0x2000fa80
 80149dc:	2000fa74 	.word	0x2000fa74
 80149e0:	2000fa78 	.word	0x2000fa78
 80149e4:	2000fa7c 	.word	0x2000fa7c
 80149e8:	08027ea8 	.word	0x08027ea8
 80149ec:	08027ed8 	.word	0x08027ed8
 80149f0:	08027ef8 	.word	0x08027ef8

080149f4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b082      	sub	sp, #8
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	781b      	ldrb	r3, [r3, #0]
 8014a00:	2b02      	cmp	r3, #2
 8014a02:	d026      	beq.n	8014a52 <tcpip_thread_handle_msg+0x5e>
 8014a04:	2b02      	cmp	r3, #2
 8014a06:	dc2b      	bgt.n	8014a60 <tcpip_thread_handle_msg+0x6c>
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d002      	beq.n	8014a12 <tcpip_thread_handle_msg+0x1e>
 8014a0c:	2b01      	cmp	r3, #1
 8014a0e:	d015      	beq.n	8014a3c <tcpip_thread_handle_msg+0x48>
 8014a10:	e026      	b.n	8014a60 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	68db      	ldr	r3, [r3, #12]
 8014a16:	687a      	ldr	r2, [r7, #4]
 8014a18:	6850      	ldr	r0, [r2, #4]
 8014a1a:	687a      	ldr	r2, [r7, #4]
 8014a1c:	6892      	ldr	r2, [r2, #8]
 8014a1e:	4611      	mov	r1, r2
 8014a20:	4798      	blx	r3
 8014a22:	4603      	mov	r3, r0
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d004      	beq.n	8014a32 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	685b      	ldr	r3, [r3, #4]
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f001 fd2d 	bl	801648c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8014a32:	6879      	ldr	r1, [r7, #4]
 8014a34:	2009      	movs	r0, #9
 8014a36:	f000 fe79 	bl	801572c <memp_free>
      break;
 8014a3a:	e018      	b.n	8014a6e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	685b      	ldr	r3, [r3, #4]
 8014a40:	687a      	ldr	r2, [r7, #4]
 8014a42:	6892      	ldr	r2, [r2, #8]
 8014a44:	4610      	mov	r0, r2
 8014a46:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8014a48:	6879      	ldr	r1, [r7, #4]
 8014a4a:	2008      	movs	r0, #8
 8014a4c:	f000 fe6e 	bl	801572c <memp_free>
      break;
 8014a50:	e00d      	b.n	8014a6e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	685b      	ldr	r3, [r3, #4]
 8014a56:	687a      	ldr	r2, [r7, #4]
 8014a58:	6892      	ldr	r2, [r2, #8]
 8014a5a:	4610      	mov	r0, r2
 8014a5c:	4798      	blx	r3
      break;
 8014a5e:	e006      	b.n	8014a6e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8014a60:	4b05      	ldr	r3, [pc, #20]	; (8014a78 <tcpip_thread_handle_msg+0x84>)
 8014a62:	22cf      	movs	r2, #207	; 0xcf
 8014a64:	4905      	ldr	r1, [pc, #20]	; (8014a7c <tcpip_thread_handle_msg+0x88>)
 8014a66:	4806      	ldr	r0, [pc, #24]	; (8014a80 <tcpip_thread_handle_msg+0x8c>)
 8014a68:	f00f fab6 	bl	8023fd8 <iprintf>
      break;
 8014a6c:	bf00      	nop
  }
}
 8014a6e:	bf00      	nop
 8014a70:	3708      	adds	r7, #8
 8014a72:	46bd      	mov	sp, r7
 8014a74:	bd80      	pop	{r7, pc}
 8014a76:	bf00      	nop
 8014a78:	08027ea8 	.word	0x08027ea8
 8014a7c:	08027ed8 	.word	0x08027ed8
 8014a80:	08027ef8 	.word	0x08027ef8

08014a84 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b086      	sub	sp, #24
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	60f8      	str	r0, [r7, #12]
 8014a8c:	60b9      	str	r1, [r7, #8]
 8014a8e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8014a90:	481a      	ldr	r0, [pc, #104]	; (8014afc <tcpip_inpkt+0x78>)
 8014a92:	f00d f986 	bl	8021da2 <sys_mbox_valid>
 8014a96:	4603      	mov	r3, r0
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d105      	bne.n	8014aa8 <tcpip_inpkt+0x24>
 8014a9c:	4b18      	ldr	r3, [pc, #96]	; (8014b00 <tcpip_inpkt+0x7c>)
 8014a9e:	22fc      	movs	r2, #252	; 0xfc
 8014aa0:	4918      	ldr	r1, [pc, #96]	; (8014b04 <tcpip_inpkt+0x80>)
 8014aa2:	4819      	ldr	r0, [pc, #100]	; (8014b08 <tcpip_inpkt+0x84>)
 8014aa4:	f00f fa98 	bl	8023fd8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8014aa8:	2009      	movs	r0, #9
 8014aaa:	f000 fdc9 	bl	8015640 <memp_malloc>
 8014aae:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8014ab0:	697b      	ldr	r3, [r7, #20]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d102      	bne.n	8014abc <tcpip_inpkt+0x38>
    return ERR_MEM;
 8014ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014aba:	e01a      	b.n	8014af2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8014abc:	697b      	ldr	r3, [r7, #20]
 8014abe:	2200      	movs	r2, #0
 8014ac0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8014ac2:	697b      	ldr	r3, [r7, #20]
 8014ac4:	68fa      	ldr	r2, [r7, #12]
 8014ac6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8014ac8:	697b      	ldr	r3, [r7, #20]
 8014aca:	68ba      	ldr	r2, [r7, #8]
 8014acc:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8014ace:	697b      	ldr	r3, [r7, #20]
 8014ad0:	687a      	ldr	r2, [r7, #4]
 8014ad2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8014ad4:	6979      	ldr	r1, [r7, #20]
 8014ad6:	4809      	ldr	r0, [pc, #36]	; (8014afc <tcpip_inpkt+0x78>)
 8014ad8:	f00d f8ee 	bl	8021cb8 <sys_mbox_trypost>
 8014adc:	4603      	mov	r3, r0
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d006      	beq.n	8014af0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8014ae2:	6979      	ldr	r1, [r7, #20]
 8014ae4:	2009      	movs	r0, #9
 8014ae6:	f000 fe21 	bl	801572c <memp_free>
    return ERR_MEM;
 8014aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014aee:	e000      	b.n	8014af2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8014af0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8014af2:	4618      	mov	r0, r3
 8014af4:	3718      	adds	r7, #24
 8014af6:	46bd      	mov	sp, r7
 8014af8:	bd80      	pop	{r7, pc}
 8014afa:	bf00      	nop
 8014afc:	2000fa7c 	.word	0x2000fa7c
 8014b00:	08027ea8 	.word	0x08027ea8
 8014b04:	08027f20 	.word	0x08027f20
 8014b08:	08027ef8 	.word	0x08027ef8

08014b0c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b082      	sub	sp, #8
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
 8014b14:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8014b16:	683b      	ldr	r3, [r7, #0]
 8014b18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014b1c:	f003 0318 	and.w	r3, r3, #24
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d006      	beq.n	8014b32 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8014b24:	4a08      	ldr	r2, [pc, #32]	; (8014b48 <tcpip_input+0x3c>)
 8014b26:	6839      	ldr	r1, [r7, #0]
 8014b28:	6878      	ldr	r0, [r7, #4]
 8014b2a:	f7ff ffab 	bl	8014a84 <tcpip_inpkt>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	e005      	b.n	8014b3e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8014b32:	4a06      	ldr	r2, [pc, #24]	; (8014b4c <tcpip_input+0x40>)
 8014b34:	6839      	ldr	r1, [r7, #0]
 8014b36:	6878      	ldr	r0, [r7, #4]
 8014b38:	f7ff ffa4 	bl	8014a84 <tcpip_inpkt>
 8014b3c:	4603      	mov	r3, r0
}
 8014b3e:	4618      	mov	r0, r3
 8014b40:	3708      	adds	r7, #8
 8014b42:	46bd      	mov	sp, r7
 8014b44:	bd80      	pop	{r7, pc}
 8014b46:	bf00      	nop
 8014b48:	08021aa5 	.word	0x08021aa5
 8014b4c:	08020851 	.word	0x08020851

08014b50 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b084      	sub	sp, #16
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]
 8014b58:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8014b5a:	4819      	ldr	r0, [pc, #100]	; (8014bc0 <tcpip_try_callback+0x70>)
 8014b5c:	f00d f921 	bl	8021da2 <sys_mbox_valid>
 8014b60:	4603      	mov	r3, r0
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d106      	bne.n	8014b74 <tcpip_try_callback+0x24>
 8014b66:	4b17      	ldr	r3, [pc, #92]	; (8014bc4 <tcpip_try_callback+0x74>)
 8014b68:	f240 125d 	movw	r2, #349	; 0x15d
 8014b6c:	4916      	ldr	r1, [pc, #88]	; (8014bc8 <tcpip_try_callback+0x78>)
 8014b6e:	4817      	ldr	r0, [pc, #92]	; (8014bcc <tcpip_try_callback+0x7c>)
 8014b70:	f00f fa32 	bl	8023fd8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8014b74:	2008      	movs	r0, #8
 8014b76:	f000 fd63 	bl	8015640 <memp_malloc>
 8014b7a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d102      	bne.n	8014b88 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8014b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b86:	e017      	b.n	8014bb8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	2201      	movs	r2, #1
 8014b8c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	687a      	ldr	r2, [r7, #4]
 8014b92:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	683a      	ldr	r2, [r7, #0]
 8014b98:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8014b9a:	68f9      	ldr	r1, [r7, #12]
 8014b9c:	4808      	ldr	r0, [pc, #32]	; (8014bc0 <tcpip_try_callback+0x70>)
 8014b9e:	f00d f88b 	bl	8021cb8 <sys_mbox_trypost>
 8014ba2:	4603      	mov	r3, r0
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d006      	beq.n	8014bb6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8014ba8:	68f9      	ldr	r1, [r7, #12]
 8014baa:	2008      	movs	r0, #8
 8014bac:	f000 fdbe 	bl	801572c <memp_free>
    return ERR_MEM;
 8014bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014bb4:	e000      	b.n	8014bb8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8014bb6:	2300      	movs	r3, #0
}
 8014bb8:	4618      	mov	r0, r3
 8014bba:	3710      	adds	r7, #16
 8014bbc:	46bd      	mov	sp, r7
 8014bbe:	bd80      	pop	{r7, pc}
 8014bc0:	2000fa7c 	.word	0x2000fa7c
 8014bc4:	08027ea8 	.word	0x08027ea8
 8014bc8:	08027f20 	.word	0x08027f20
 8014bcc:	08027ef8 	.word	0x08027ef8

08014bd0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b084      	sub	sp, #16
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	60f8      	str	r0, [r7, #12]
 8014bd8:	60b9      	str	r1, [r7, #8]
 8014bda:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8014bdc:	4806      	ldr	r0, [pc, #24]	; (8014bf8 <tcpip_send_msg_wait_sem+0x28>)
 8014bde:	f00d f9b9 	bl	8021f54 <sys_mutex_lock>
  fn(apimsg);
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	68b8      	ldr	r0, [r7, #8]
 8014be6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8014be8:	4803      	ldr	r0, [pc, #12]	; (8014bf8 <tcpip_send_msg_wait_sem+0x28>)
 8014bea:	f00d f9c2 	bl	8021f72 <sys_mutex_unlock>
  return ERR_OK;
 8014bee:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	3710      	adds	r7, #16
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	bd80      	pop	{r7, pc}
 8014bf8:	2000fa80 	.word	0x2000fa80

08014bfc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b084      	sub	sp, #16
 8014c00:	af02      	add	r7, sp, #8
 8014c02:	6078      	str	r0, [r7, #4]
 8014c04:	6039      	str	r1, [r7, #0]
  lwip_init();
 8014c06:	f000 f871 	bl	8014cec <lwip_init>

  tcpip_init_done = initfunc;
 8014c0a:	4a17      	ldr	r2, [pc, #92]	; (8014c68 <tcpip_init+0x6c>)
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8014c10:	4a16      	ldr	r2, [pc, #88]	; (8014c6c <tcpip_init+0x70>)
 8014c12:	683b      	ldr	r3, [r7, #0]
 8014c14:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8014c16:	2106      	movs	r1, #6
 8014c18:	4815      	ldr	r0, [pc, #84]	; (8014c70 <tcpip_init+0x74>)
 8014c1a:	f00d f819 	bl	8021c50 <sys_mbox_new>
 8014c1e:	4603      	mov	r3, r0
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d006      	beq.n	8014c32 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8014c24:	4b13      	ldr	r3, [pc, #76]	; (8014c74 <tcpip_init+0x78>)
 8014c26:	f240 2261 	movw	r2, #609	; 0x261
 8014c2a:	4913      	ldr	r1, [pc, #76]	; (8014c78 <tcpip_init+0x7c>)
 8014c2c:	4813      	ldr	r0, [pc, #76]	; (8014c7c <tcpip_init+0x80>)
 8014c2e:	f00f f9d3 	bl	8023fd8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8014c32:	4813      	ldr	r0, [pc, #76]	; (8014c80 <tcpip_init+0x84>)
 8014c34:	f00d f972 	bl	8021f1c <sys_mutex_new>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d006      	beq.n	8014c4c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8014c3e:	4b0d      	ldr	r3, [pc, #52]	; (8014c74 <tcpip_init+0x78>)
 8014c40:	f240 2265 	movw	r2, #613	; 0x265
 8014c44:	490f      	ldr	r1, [pc, #60]	; (8014c84 <tcpip_init+0x88>)
 8014c46:	480d      	ldr	r0, [pc, #52]	; (8014c7c <tcpip_init+0x80>)
 8014c48:	f00f f9c6 	bl	8023fd8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	9300      	str	r3, [sp, #0]
 8014c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014c54:	2200      	movs	r2, #0
 8014c56:	490c      	ldr	r1, [pc, #48]	; (8014c88 <tcpip_init+0x8c>)
 8014c58:	480c      	ldr	r0, [pc, #48]	; (8014c8c <tcpip_init+0x90>)
 8014c5a:	f00d f997 	bl	8021f8c <sys_thread_new>
}
 8014c5e:	bf00      	nop
 8014c60:	3708      	adds	r7, #8
 8014c62:	46bd      	mov	sp, r7
 8014c64:	bd80      	pop	{r7, pc}
 8014c66:	bf00      	nop
 8014c68:	2000fa74 	.word	0x2000fa74
 8014c6c:	2000fa78 	.word	0x2000fa78
 8014c70:	2000fa7c 	.word	0x2000fa7c
 8014c74:	08027ea8 	.word	0x08027ea8
 8014c78:	08027f30 	.word	0x08027f30
 8014c7c:	08027ef8 	.word	0x08027ef8
 8014c80:	2000fa80 	.word	0x2000fa80
 8014c84:	08027f54 	.word	0x08027f54
 8014c88:	0801498d 	.word	0x0801498d
 8014c8c:	08027f78 	.word	0x08027f78

08014c90 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8014c90:	b480      	push	{r7}
 8014c92:	b083      	sub	sp, #12
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	4603      	mov	r3, r0
 8014c98:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8014c9a:	88fb      	ldrh	r3, [r7, #6]
 8014c9c:	021b      	lsls	r3, r3, #8
 8014c9e:	b21a      	sxth	r2, r3
 8014ca0:	88fb      	ldrh	r3, [r7, #6]
 8014ca2:	0a1b      	lsrs	r3, r3, #8
 8014ca4:	b29b      	uxth	r3, r3
 8014ca6:	b21b      	sxth	r3, r3
 8014ca8:	4313      	orrs	r3, r2
 8014caa:	b21b      	sxth	r3, r3
 8014cac:	b29b      	uxth	r3, r3
}
 8014cae:	4618      	mov	r0, r3
 8014cb0:	370c      	adds	r7, #12
 8014cb2:	46bd      	mov	sp, r7
 8014cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb8:	4770      	bx	lr

08014cba <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8014cba:	b480      	push	{r7}
 8014cbc:	b083      	sub	sp, #12
 8014cbe:	af00      	add	r7, sp, #0
 8014cc0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	061a      	lsls	r2, r3, #24
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	021b      	lsls	r3, r3, #8
 8014cca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8014cce:	431a      	orrs	r2, r3
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	0a1b      	lsrs	r3, r3, #8
 8014cd4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014cd8:	431a      	orrs	r2, r3
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	0e1b      	lsrs	r3, r3, #24
 8014cde:	4313      	orrs	r3, r2
}
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	370c      	adds	r7, #12
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cea:	4770      	bx	lr

08014cec <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b082      	sub	sp, #8
 8014cf0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8014cf6:	f00d f903 	bl	8021f00 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8014cfa:	f000 f8d5 	bl	8014ea8 <mem_init>
  memp_init();
 8014cfe:	f000 fc31 	bl	8015564 <memp_init>
  pbuf_init();
  netif_init();
 8014d02:	f000 fd3d 	bl	8015780 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8014d06:	f008 f8b9 	bl	801ce7c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8014d0a:	f001 fe69 	bl	80169e0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8014d0e:	f007 fffb 	bl	801cd08 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8014d12:	bf00      	nop
 8014d14:	3708      	adds	r7, #8
 8014d16:	46bd      	mov	sp, r7
 8014d18:	bd80      	pop	{r7, pc}
	...

08014d1c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8014d1c:	b480      	push	{r7}
 8014d1e:	b083      	sub	sp, #12
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	4603      	mov	r3, r0
 8014d24:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8014d26:	4b05      	ldr	r3, [pc, #20]	; (8014d3c <ptr_to_mem+0x20>)
 8014d28:	681a      	ldr	r2, [r3, #0]
 8014d2a:	88fb      	ldrh	r3, [r7, #6]
 8014d2c:	4413      	add	r3, r2
}
 8014d2e:	4618      	mov	r0, r3
 8014d30:	370c      	adds	r7, #12
 8014d32:	46bd      	mov	sp, r7
 8014d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d38:	4770      	bx	lr
 8014d3a:	bf00      	nop
 8014d3c:	200100f0 	.word	0x200100f0

08014d40 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8014d40:	b480      	push	{r7}
 8014d42:	b083      	sub	sp, #12
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8014d48:	4b05      	ldr	r3, [pc, #20]	; (8014d60 <mem_to_ptr+0x20>)
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	687a      	ldr	r2, [r7, #4]
 8014d4e:	1ad3      	subs	r3, r2, r3
 8014d50:	b29b      	uxth	r3, r3
}
 8014d52:	4618      	mov	r0, r3
 8014d54:	370c      	adds	r7, #12
 8014d56:	46bd      	mov	sp, r7
 8014d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5c:	4770      	bx	lr
 8014d5e:	bf00      	nop
 8014d60:	200100f0 	.word	0x200100f0

08014d64 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8014d64:	b590      	push	{r4, r7, lr}
 8014d66:	b085      	sub	sp, #20
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8014d6c:	4b45      	ldr	r3, [pc, #276]	; (8014e84 <plug_holes+0x120>)
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	687a      	ldr	r2, [r7, #4]
 8014d72:	429a      	cmp	r2, r3
 8014d74:	d206      	bcs.n	8014d84 <plug_holes+0x20>
 8014d76:	4b44      	ldr	r3, [pc, #272]	; (8014e88 <plug_holes+0x124>)
 8014d78:	f240 12df 	movw	r2, #479	; 0x1df
 8014d7c:	4943      	ldr	r1, [pc, #268]	; (8014e8c <plug_holes+0x128>)
 8014d7e:	4844      	ldr	r0, [pc, #272]	; (8014e90 <plug_holes+0x12c>)
 8014d80:	f00f f92a 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8014d84:	4b43      	ldr	r3, [pc, #268]	; (8014e94 <plug_holes+0x130>)
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	687a      	ldr	r2, [r7, #4]
 8014d8a:	429a      	cmp	r2, r3
 8014d8c:	d306      	bcc.n	8014d9c <plug_holes+0x38>
 8014d8e:	4b3e      	ldr	r3, [pc, #248]	; (8014e88 <plug_holes+0x124>)
 8014d90:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014d94:	4940      	ldr	r1, [pc, #256]	; (8014e98 <plug_holes+0x134>)
 8014d96:	483e      	ldr	r0, [pc, #248]	; (8014e90 <plug_holes+0x12c>)
 8014d98:	f00f f91e 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	791b      	ldrb	r3, [r3, #4]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d006      	beq.n	8014db2 <plug_holes+0x4e>
 8014da4:	4b38      	ldr	r3, [pc, #224]	; (8014e88 <plug_holes+0x124>)
 8014da6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8014daa:	493c      	ldr	r1, [pc, #240]	; (8014e9c <plug_holes+0x138>)
 8014dac:	4838      	ldr	r0, [pc, #224]	; (8014e90 <plug_holes+0x12c>)
 8014dae:	f00f f913 	bl	8023fd8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	881b      	ldrh	r3, [r3, #0]
 8014db6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014dba:	d906      	bls.n	8014dca <plug_holes+0x66>
 8014dbc:	4b32      	ldr	r3, [pc, #200]	; (8014e88 <plug_holes+0x124>)
 8014dbe:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8014dc2:	4937      	ldr	r1, [pc, #220]	; (8014ea0 <plug_holes+0x13c>)
 8014dc4:	4832      	ldr	r0, [pc, #200]	; (8014e90 <plug_holes+0x12c>)
 8014dc6:	f00f f907 	bl	8023fd8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	881b      	ldrh	r3, [r3, #0]
 8014dce:	4618      	mov	r0, r3
 8014dd0:	f7ff ffa4 	bl	8014d1c <ptr_to_mem>
 8014dd4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8014dd6:	687a      	ldr	r2, [r7, #4]
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	429a      	cmp	r2, r3
 8014ddc:	d024      	beq.n	8014e28 <plug_holes+0xc4>
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	791b      	ldrb	r3, [r3, #4]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d120      	bne.n	8014e28 <plug_holes+0xc4>
 8014de6:	4b2b      	ldr	r3, [pc, #172]	; (8014e94 <plug_holes+0x130>)
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	68fa      	ldr	r2, [r7, #12]
 8014dec:	429a      	cmp	r2, r3
 8014dee:	d01b      	beq.n	8014e28 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8014df0:	4b2c      	ldr	r3, [pc, #176]	; (8014ea4 <plug_holes+0x140>)
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	68fa      	ldr	r2, [r7, #12]
 8014df6:	429a      	cmp	r2, r3
 8014df8:	d102      	bne.n	8014e00 <plug_holes+0x9c>
      lfree = mem;
 8014dfa:	4a2a      	ldr	r2, [pc, #168]	; (8014ea4 <plug_holes+0x140>)
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	881a      	ldrh	r2, [r3, #0]
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	881b      	ldrh	r3, [r3, #0]
 8014e0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014e10:	d00a      	beq.n	8014e28 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	881b      	ldrh	r3, [r3, #0]
 8014e16:	4618      	mov	r0, r3
 8014e18:	f7ff ff80 	bl	8014d1c <ptr_to_mem>
 8014e1c:	4604      	mov	r4, r0
 8014e1e:	6878      	ldr	r0, [r7, #4]
 8014e20:	f7ff ff8e 	bl	8014d40 <mem_to_ptr>
 8014e24:	4603      	mov	r3, r0
 8014e26:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	885b      	ldrh	r3, [r3, #2]
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f7ff ff75 	bl	8014d1c <ptr_to_mem>
 8014e32:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8014e34:	68ba      	ldr	r2, [r7, #8]
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	429a      	cmp	r2, r3
 8014e3a:	d01f      	beq.n	8014e7c <plug_holes+0x118>
 8014e3c:	68bb      	ldr	r3, [r7, #8]
 8014e3e:	791b      	ldrb	r3, [r3, #4]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d11b      	bne.n	8014e7c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8014e44:	4b17      	ldr	r3, [pc, #92]	; (8014ea4 <plug_holes+0x140>)
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	687a      	ldr	r2, [r7, #4]
 8014e4a:	429a      	cmp	r2, r3
 8014e4c:	d102      	bne.n	8014e54 <plug_holes+0xf0>
      lfree = pmem;
 8014e4e:	4a15      	ldr	r2, [pc, #84]	; (8014ea4 <plug_holes+0x140>)
 8014e50:	68bb      	ldr	r3, [r7, #8]
 8014e52:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	881a      	ldrh	r2, [r3, #0]
 8014e58:	68bb      	ldr	r3, [r7, #8]
 8014e5a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	881b      	ldrh	r3, [r3, #0]
 8014e60:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014e64:	d00a      	beq.n	8014e7c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	881b      	ldrh	r3, [r3, #0]
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f7ff ff56 	bl	8014d1c <ptr_to_mem>
 8014e70:	4604      	mov	r4, r0
 8014e72:	68b8      	ldr	r0, [r7, #8]
 8014e74:	f7ff ff64 	bl	8014d40 <mem_to_ptr>
 8014e78:	4603      	mov	r3, r0
 8014e7a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8014e7c:	bf00      	nop
 8014e7e:	3714      	adds	r7, #20
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd90      	pop	{r4, r7, pc}
 8014e84:	200100f0 	.word	0x200100f0
 8014e88:	08027f88 	.word	0x08027f88
 8014e8c:	08027fb8 	.word	0x08027fb8
 8014e90:	08027fd0 	.word	0x08027fd0
 8014e94:	200100f4 	.word	0x200100f4
 8014e98:	08027ff8 	.word	0x08027ff8
 8014e9c:	08028014 	.word	0x08028014
 8014ea0:	08028030 	.word	0x08028030
 8014ea4:	200100fc 	.word	0x200100fc

08014ea8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b082      	sub	sp, #8
 8014eac:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8014eae:	4b1f      	ldr	r3, [pc, #124]	; (8014f2c <mem_init+0x84>)
 8014eb0:	3303      	adds	r3, #3
 8014eb2:	f023 0303 	bic.w	r3, r3, #3
 8014eb6:	461a      	mov	r2, r3
 8014eb8:	4b1d      	ldr	r3, [pc, #116]	; (8014f30 <mem_init+0x88>)
 8014eba:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8014ebc:	4b1c      	ldr	r3, [pc, #112]	; (8014f30 <mem_init+0x88>)
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8014ec8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	2200      	movs	r2, #0
 8014ece:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8014ed6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8014eda:	f7ff ff1f 	bl	8014d1c <ptr_to_mem>
 8014ede:	4603      	mov	r3, r0
 8014ee0:	4a14      	ldr	r2, [pc, #80]	; (8014f34 <mem_init+0x8c>)
 8014ee2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8014ee4:	4b13      	ldr	r3, [pc, #76]	; (8014f34 <mem_init+0x8c>)
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	2201      	movs	r2, #1
 8014eea:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8014eec:	4b11      	ldr	r3, [pc, #68]	; (8014f34 <mem_init+0x8c>)
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8014ef4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8014ef6:	4b0f      	ldr	r3, [pc, #60]	; (8014f34 <mem_init+0x8c>)
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8014efe:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8014f00:	4b0b      	ldr	r3, [pc, #44]	; (8014f30 <mem_init+0x88>)
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	4a0c      	ldr	r2, [pc, #48]	; (8014f38 <mem_init+0x90>)
 8014f06:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8014f08:	480c      	ldr	r0, [pc, #48]	; (8014f3c <mem_init+0x94>)
 8014f0a:	f00d f807 	bl	8021f1c <sys_mutex_new>
 8014f0e:	4603      	mov	r3, r0
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d006      	beq.n	8014f22 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8014f14:	4b0a      	ldr	r3, [pc, #40]	; (8014f40 <mem_init+0x98>)
 8014f16:	f240 221f 	movw	r2, #543	; 0x21f
 8014f1a:	490a      	ldr	r1, [pc, #40]	; (8014f44 <mem_init+0x9c>)
 8014f1c:	480a      	ldr	r0, [pc, #40]	; (8014f48 <mem_init+0xa0>)
 8014f1e:	f00f f85b 	bl	8023fd8 <iprintf>
  }
}
 8014f22:	bf00      	nop
 8014f24:	3708      	adds	r7, #8
 8014f26:	46bd      	mov	sp, r7
 8014f28:	bd80      	pop	{r7, pc}
 8014f2a:	bf00      	nop
 8014f2c:	2000fa9c 	.word	0x2000fa9c
 8014f30:	200100f0 	.word	0x200100f0
 8014f34:	200100f4 	.word	0x200100f4
 8014f38:	200100fc 	.word	0x200100fc
 8014f3c:	200100f8 	.word	0x200100f8
 8014f40:	08027f88 	.word	0x08027f88
 8014f44:	0802805c 	.word	0x0802805c
 8014f48:	08027fd0 	.word	0x08027fd0

08014f4c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b086      	sub	sp, #24
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8014f54:	6878      	ldr	r0, [r7, #4]
 8014f56:	f7ff fef3 	bl	8014d40 <mem_to_ptr>
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	881b      	ldrh	r3, [r3, #0]
 8014f62:	4618      	mov	r0, r3
 8014f64:	f7ff feda 	bl	8014d1c <ptr_to_mem>
 8014f68:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	885b      	ldrh	r3, [r3, #2]
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f7ff fed4 	bl	8014d1c <ptr_to_mem>
 8014f74:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	881b      	ldrh	r3, [r3, #0]
 8014f7a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014f7e:	d818      	bhi.n	8014fb2 <mem_link_valid+0x66>
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	885b      	ldrh	r3, [r3, #2]
 8014f84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014f88:	d813      	bhi.n	8014fb2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8014f8e:	8afa      	ldrh	r2, [r7, #22]
 8014f90:	429a      	cmp	r2, r3
 8014f92:	d004      	beq.n	8014f9e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	881b      	ldrh	r3, [r3, #0]
 8014f98:	8afa      	ldrh	r2, [r7, #22]
 8014f9a:	429a      	cmp	r2, r3
 8014f9c:	d109      	bne.n	8014fb2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014f9e:	4b08      	ldr	r3, [pc, #32]	; (8014fc0 <mem_link_valid+0x74>)
 8014fa0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014fa2:	693a      	ldr	r2, [r7, #16]
 8014fa4:	429a      	cmp	r2, r3
 8014fa6:	d006      	beq.n	8014fb6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014fa8:	693b      	ldr	r3, [r7, #16]
 8014faa:	885b      	ldrh	r3, [r3, #2]
 8014fac:	8afa      	ldrh	r2, [r7, #22]
 8014fae:	429a      	cmp	r2, r3
 8014fb0:	d001      	beq.n	8014fb6 <mem_link_valid+0x6a>
    return 0;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	e000      	b.n	8014fb8 <mem_link_valid+0x6c>
  }
  return 1;
 8014fb6:	2301      	movs	r3, #1
}
 8014fb8:	4618      	mov	r0, r3
 8014fba:	3718      	adds	r7, #24
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}
 8014fc0:	200100f4 	.word	0x200100f4

08014fc4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b088      	sub	sp, #32
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d070      	beq.n	80150b4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	f003 0303 	and.w	r3, r3, #3
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d00d      	beq.n	8014ff8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8014fdc:	4b37      	ldr	r3, [pc, #220]	; (80150bc <mem_free+0xf8>)
 8014fde:	f240 2273 	movw	r2, #627	; 0x273
 8014fe2:	4937      	ldr	r1, [pc, #220]	; (80150c0 <mem_free+0xfc>)
 8014fe4:	4837      	ldr	r0, [pc, #220]	; (80150c4 <mem_free+0x100>)
 8014fe6:	f00e fff7 	bl	8023fd8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014fea:	f00c fff5 	bl	8021fd8 <sys_arch_protect>
 8014fee:	60f8      	str	r0, [r7, #12]
 8014ff0:	68f8      	ldr	r0, [r7, #12]
 8014ff2:	f00c ffff 	bl	8021ff4 <sys_arch_unprotect>
    return;
 8014ff6:	e05e      	b.n	80150b6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	3b08      	subs	r3, #8
 8014ffc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8014ffe:	4b32      	ldr	r3, [pc, #200]	; (80150c8 <mem_free+0x104>)
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	69fa      	ldr	r2, [r7, #28]
 8015004:	429a      	cmp	r2, r3
 8015006:	d306      	bcc.n	8015016 <mem_free+0x52>
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	f103 020c 	add.w	r2, r3, #12
 801500e:	4b2f      	ldr	r3, [pc, #188]	; (80150cc <mem_free+0x108>)
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	429a      	cmp	r2, r3
 8015014:	d90d      	bls.n	8015032 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8015016:	4b29      	ldr	r3, [pc, #164]	; (80150bc <mem_free+0xf8>)
 8015018:	f240 227f 	movw	r2, #639	; 0x27f
 801501c:	492c      	ldr	r1, [pc, #176]	; (80150d0 <mem_free+0x10c>)
 801501e:	4829      	ldr	r0, [pc, #164]	; (80150c4 <mem_free+0x100>)
 8015020:	f00e ffda 	bl	8023fd8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015024:	f00c ffd8 	bl	8021fd8 <sys_arch_protect>
 8015028:	6138      	str	r0, [r7, #16]
 801502a:	6938      	ldr	r0, [r7, #16]
 801502c:	f00c ffe2 	bl	8021ff4 <sys_arch_unprotect>
    return;
 8015030:	e041      	b.n	80150b6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8015032:	4828      	ldr	r0, [pc, #160]	; (80150d4 <mem_free+0x110>)
 8015034:	f00c ff8e 	bl	8021f54 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8015038:	69fb      	ldr	r3, [r7, #28]
 801503a:	791b      	ldrb	r3, [r3, #4]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d110      	bne.n	8015062 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8015040:	4b1e      	ldr	r3, [pc, #120]	; (80150bc <mem_free+0xf8>)
 8015042:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8015046:	4924      	ldr	r1, [pc, #144]	; (80150d8 <mem_free+0x114>)
 8015048:	481e      	ldr	r0, [pc, #120]	; (80150c4 <mem_free+0x100>)
 801504a:	f00e ffc5 	bl	8023fd8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801504e:	4821      	ldr	r0, [pc, #132]	; (80150d4 <mem_free+0x110>)
 8015050:	f00c ff8f 	bl	8021f72 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015054:	f00c ffc0 	bl	8021fd8 <sys_arch_protect>
 8015058:	6178      	str	r0, [r7, #20]
 801505a:	6978      	ldr	r0, [r7, #20]
 801505c:	f00c ffca 	bl	8021ff4 <sys_arch_unprotect>
    return;
 8015060:	e029      	b.n	80150b6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8015062:	69f8      	ldr	r0, [r7, #28]
 8015064:	f7ff ff72 	bl	8014f4c <mem_link_valid>
 8015068:	4603      	mov	r3, r0
 801506a:	2b00      	cmp	r3, #0
 801506c:	d110      	bne.n	8015090 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801506e:	4b13      	ldr	r3, [pc, #76]	; (80150bc <mem_free+0xf8>)
 8015070:	f240 2295 	movw	r2, #661	; 0x295
 8015074:	4919      	ldr	r1, [pc, #100]	; (80150dc <mem_free+0x118>)
 8015076:	4813      	ldr	r0, [pc, #76]	; (80150c4 <mem_free+0x100>)
 8015078:	f00e ffae 	bl	8023fd8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801507c:	4815      	ldr	r0, [pc, #84]	; (80150d4 <mem_free+0x110>)
 801507e:	f00c ff78 	bl	8021f72 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015082:	f00c ffa9 	bl	8021fd8 <sys_arch_protect>
 8015086:	61b8      	str	r0, [r7, #24]
 8015088:	69b8      	ldr	r0, [r7, #24]
 801508a:	f00c ffb3 	bl	8021ff4 <sys_arch_unprotect>
    return;
 801508e:	e012      	b.n	80150b6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8015090:	69fb      	ldr	r3, [r7, #28]
 8015092:	2200      	movs	r2, #0
 8015094:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8015096:	4b12      	ldr	r3, [pc, #72]	; (80150e0 <mem_free+0x11c>)
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	69fa      	ldr	r2, [r7, #28]
 801509c:	429a      	cmp	r2, r3
 801509e:	d202      	bcs.n	80150a6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80150a0:	4a0f      	ldr	r2, [pc, #60]	; (80150e0 <mem_free+0x11c>)
 80150a2:	69fb      	ldr	r3, [r7, #28]
 80150a4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80150a6:	69f8      	ldr	r0, [r7, #28]
 80150a8:	f7ff fe5c 	bl	8014d64 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80150ac:	4809      	ldr	r0, [pc, #36]	; (80150d4 <mem_free+0x110>)
 80150ae:	f00c ff60 	bl	8021f72 <sys_mutex_unlock>
 80150b2:	e000      	b.n	80150b6 <mem_free+0xf2>
    return;
 80150b4:	bf00      	nop
}
 80150b6:	3720      	adds	r7, #32
 80150b8:	46bd      	mov	sp, r7
 80150ba:	bd80      	pop	{r7, pc}
 80150bc:	08027f88 	.word	0x08027f88
 80150c0:	08028078 	.word	0x08028078
 80150c4:	08027fd0 	.word	0x08027fd0
 80150c8:	200100f0 	.word	0x200100f0
 80150cc:	200100f4 	.word	0x200100f4
 80150d0:	0802809c 	.word	0x0802809c
 80150d4:	200100f8 	.word	0x200100f8
 80150d8:	080280b8 	.word	0x080280b8
 80150dc:	080280e0 	.word	0x080280e0
 80150e0:	200100fc 	.word	0x200100fc

080150e4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b088      	sub	sp, #32
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
 80150ec:	460b      	mov	r3, r1
 80150ee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80150f0:	887b      	ldrh	r3, [r7, #2]
 80150f2:	3303      	adds	r3, #3
 80150f4:	b29b      	uxth	r3, r3
 80150f6:	f023 0303 	bic.w	r3, r3, #3
 80150fa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80150fc:	8bfb      	ldrh	r3, [r7, #30]
 80150fe:	2b0b      	cmp	r3, #11
 8015100:	d801      	bhi.n	8015106 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8015102:	230c      	movs	r3, #12
 8015104:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8015106:	8bfb      	ldrh	r3, [r7, #30]
 8015108:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801510c:	d803      	bhi.n	8015116 <mem_trim+0x32>
 801510e:	8bfa      	ldrh	r2, [r7, #30]
 8015110:	887b      	ldrh	r3, [r7, #2]
 8015112:	429a      	cmp	r2, r3
 8015114:	d201      	bcs.n	801511a <mem_trim+0x36>
    return NULL;
 8015116:	2300      	movs	r3, #0
 8015118:	e0d8      	b.n	80152cc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801511a:	4b6e      	ldr	r3, [pc, #440]	; (80152d4 <mem_trim+0x1f0>)
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	687a      	ldr	r2, [r7, #4]
 8015120:	429a      	cmp	r2, r3
 8015122:	d304      	bcc.n	801512e <mem_trim+0x4a>
 8015124:	4b6c      	ldr	r3, [pc, #432]	; (80152d8 <mem_trim+0x1f4>)
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	687a      	ldr	r2, [r7, #4]
 801512a:	429a      	cmp	r2, r3
 801512c:	d306      	bcc.n	801513c <mem_trim+0x58>
 801512e:	4b6b      	ldr	r3, [pc, #428]	; (80152dc <mem_trim+0x1f8>)
 8015130:	f240 22d1 	movw	r2, #721	; 0x2d1
 8015134:	496a      	ldr	r1, [pc, #424]	; (80152e0 <mem_trim+0x1fc>)
 8015136:	486b      	ldr	r0, [pc, #428]	; (80152e4 <mem_trim+0x200>)
 8015138:	f00e ff4e 	bl	8023fd8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801513c:	4b65      	ldr	r3, [pc, #404]	; (80152d4 <mem_trim+0x1f0>)
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	687a      	ldr	r2, [r7, #4]
 8015142:	429a      	cmp	r2, r3
 8015144:	d304      	bcc.n	8015150 <mem_trim+0x6c>
 8015146:	4b64      	ldr	r3, [pc, #400]	; (80152d8 <mem_trim+0x1f4>)
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	687a      	ldr	r2, [r7, #4]
 801514c:	429a      	cmp	r2, r3
 801514e:	d307      	bcc.n	8015160 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015150:	f00c ff42 	bl	8021fd8 <sys_arch_protect>
 8015154:	60b8      	str	r0, [r7, #8]
 8015156:	68b8      	ldr	r0, [r7, #8]
 8015158:	f00c ff4c 	bl	8021ff4 <sys_arch_unprotect>
    return rmem;
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	e0b5      	b.n	80152cc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	3b08      	subs	r3, #8
 8015164:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8015166:	69b8      	ldr	r0, [r7, #24]
 8015168:	f7ff fdea 	bl	8014d40 <mem_to_ptr>
 801516c:	4603      	mov	r3, r0
 801516e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8015170:	69bb      	ldr	r3, [r7, #24]
 8015172:	881a      	ldrh	r2, [r3, #0]
 8015174:	8afb      	ldrh	r3, [r7, #22]
 8015176:	1ad3      	subs	r3, r2, r3
 8015178:	b29b      	uxth	r3, r3
 801517a:	3b08      	subs	r3, #8
 801517c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801517e:	8bfa      	ldrh	r2, [r7, #30]
 8015180:	8abb      	ldrh	r3, [r7, #20]
 8015182:	429a      	cmp	r2, r3
 8015184:	d906      	bls.n	8015194 <mem_trim+0xb0>
 8015186:	4b55      	ldr	r3, [pc, #340]	; (80152dc <mem_trim+0x1f8>)
 8015188:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801518c:	4956      	ldr	r1, [pc, #344]	; (80152e8 <mem_trim+0x204>)
 801518e:	4855      	ldr	r0, [pc, #340]	; (80152e4 <mem_trim+0x200>)
 8015190:	f00e ff22 	bl	8023fd8 <iprintf>
  if (newsize > size) {
 8015194:	8bfa      	ldrh	r2, [r7, #30]
 8015196:	8abb      	ldrh	r3, [r7, #20]
 8015198:	429a      	cmp	r2, r3
 801519a:	d901      	bls.n	80151a0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 801519c:	2300      	movs	r3, #0
 801519e:	e095      	b.n	80152cc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80151a0:	8bfa      	ldrh	r2, [r7, #30]
 80151a2:	8abb      	ldrh	r3, [r7, #20]
 80151a4:	429a      	cmp	r2, r3
 80151a6:	d101      	bne.n	80151ac <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	e08f      	b.n	80152cc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80151ac:	484f      	ldr	r0, [pc, #316]	; (80152ec <mem_trim+0x208>)
 80151ae:	f00c fed1 	bl	8021f54 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80151b2:	69bb      	ldr	r3, [r7, #24]
 80151b4:	881b      	ldrh	r3, [r3, #0]
 80151b6:	4618      	mov	r0, r3
 80151b8:	f7ff fdb0 	bl	8014d1c <ptr_to_mem>
 80151bc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80151be:	693b      	ldr	r3, [r7, #16]
 80151c0:	791b      	ldrb	r3, [r3, #4]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d13f      	bne.n	8015246 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80151c6:	69bb      	ldr	r3, [r7, #24]
 80151c8:	881b      	ldrh	r3, [r3, #0]
 80151ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80151ce:	d106      	bne.n	80151de <mem_trim+0xfa>
 80151d0:	4b42      	ldr	r3, [pc, #264]	; (80152dc <mem_trim+0x1f8>)
 80151d2:	f240 22f5 	movw	r2, #757	; 0x2f5
 80151d6:	4946      	ldr	r1, [pc, #280]	; (80152f0 <mem_trim+0x20c>)
 80151d8:	4842      	ldr	r0, [pc, #264]	; (80152e4 <mem_trim+0x200>)
 80151da:	f00e fefd 	bl	8023fd8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80151de:	693b      	ldr	r3, [r7, #16]
 80151e0:	881b      	ldrh	r3, [r3, #0]
 80151e2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80151e4:	8afa      	ldrh	r2, [r7, #22]
 80151e6:	8bfb      	ldrh	r3, [r7, #30]
 80151e8:	4413      	add	r3, r2
 80151ea:	b29b      	uxth	r3, r3
 80151ec:	3308      	adds	r3, #8
 80151ee:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80151f0:	4b40      	ldr	r3, [pc, #256]	; (80152f4 <mem_trim+0x210>)
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	693a      	ldr	r2, [r7, #16]
 80151f6:	429a      	cmp	r2, r3
 80151f8:	d106      	bne.n	8015208 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80151fa:	89fb      	ldrh	r3, [r7, #14]
 80151fc:	4618      	mov	r0, r3
 80151fe:	f7ff fd8d 	bl	8014d1c <ptr_to_mem>
 8015202:	4603      	mov	r3, r0
 8015204:	4a3b      	ldr	r2, [pc, #236]	; (80152f4 <mem_trim+0x210>)
 8015206:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8015208:	89fb      	ldrh	r3, [r7, #14]
 801520a:	4618      	mov	r0, r3
 801520c:	f7ff fd86 	bl	8014d1c <ptr_to_mem>
 8015210:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8015212:	693b      	ldr	r3, [r7, #16]
 8015214:	2200      	movs	r2, #0
 8015216:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8015218:	693b      	ldr	r3, [r7, #16]
 801521a:	89ba      	ldrh	r2, [r7, #12]
 801521c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801521e:	693b      	ldr	r3, [r7, #16]
 8015220:	8afa      	ldrh	r2, [r7, #22]
 8015222:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8015224:	69bb      	ldr	r3, [r7, #24]
 8015226:	89fa      	ldrh	r2, [r7, #14]
 8015228:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801522a:	693b      	ldr	r3, [r7, #16]
 801522c:	881b      	ldrh	r3, [r3, #0]
 801522e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015232:	d047      	beq.n	80152c4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8015234:	693b      	ldr	r3, [r7, #16]
 8015236:	881b      	ldrh	r3, [r3, #0]
 8015238:	4618      	mov	r0, r3
 801523a:	f7ff fd6f 	bl	8014d1c <ptr_to_mem>
 801523e:	4602      	mov	r2, r0
 8015240:	89fb      	ldrh	r3, [r7, #14]
 8015242:	8053      	strh	r3, [r2, #2]
 8015244:	e03e      	b.n	80152c4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8015246:	8bfb      	ldrh	r3, [r7, #30]
 8015248:	f103 0214 	add.w	r2, r3, #20
 801524c:	8abb      	ldrh	r3, [r7, #20]
 801524e:	429a      	cmp	r2, r3
 8015250:	d838      	bhi.n	80152c4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015252:	8afa      	ldrh	r2, [r7, #22]
 8015254:	8bfb      	ldrh	r3, [r7, #30]
 8015256:	4413      	add	r3, r2
 8015258:	b29b      	uxth	r3, r3
 801525a:	3308      	adds	r3, #8
 801525c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801525e:	69bb      	ldr	r3, [r7, #24]
 8015260:	881b      	ldrh	r3, [r3, #0]
 8015262:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015266:	d106      	bne.n	8015276 <mem_trim+0x192>
 8015268:	4b1c      	ldr	r3, [pc, #112]	; (80152dc <mem_trim+0x1f8>)
 801526a:	f240 3216 	movw	r2, #790	; 0x316
 801526e:	4920      	ldr	r1, [pc, #128]	; (80152f0 <mem_trim+0x20c>)
 8015270:	481c      	ldr	r0, [pc, #112]	; (80152e4 <mem_trim+0x200>)
 8015272:	f00e feb1 	bl	8023fd8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8015276:	89fb      	ldrh	r3, [r7, #14]
 8015278:	4618      	mov	r0, r3
 801527a:	f7ff fd4f 	bl	8014d1c <ptr_to_mem>
 801527e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8015280:	4b1c      	ldr	r3, [pc, #112]	; (80152f4 <mem_trim+0x210>)
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	693a      	ldr	r2, [r7, #16]
 8015286:	429a      	cmp	r2, r3
 8015288:	d202      	bcs.n	8015290 <mem_trim+0x1ac>
      lfree = mem2;
 801528a:	4a1a      	ldr	r2, [pc, #104]	; (80152f4 <mem_trim+0x210>)
 801528c:	693b      	ldr	r3, [r7, #16]
 801528e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8015290:	693b      	ldr	r3, [r7, #16]
 8015292:	2200      	movs	r2, #0
 8015294:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8015296:	69bb      	ldr	r3, [r7, #24]
 8015298:	881a      	ldrh	r2, [r3, #0]
 801529a:	693b      	ldr	r3, [r7, #16]
 801529c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801529e:	693b      	ldr	r3, [r7, #16]
 80152a0:	8afa      	ldrh	r2, [r7, #22]
 80152a2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80152a4:	69bb      	ldr	r3, [r7, #24]
 80152a6:	89fa      	ldrh	r2, [r7, #14]
 80152a8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80152aa:	693b      	ldr	r3, [r7, #16]
 80152ac:	881b      	ldrh	r3, [r3, #0]
 80152ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80152b2:	d007      	beq.n	80152c4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80152b4:	693b      	ldr	r3, [r7, #16]
 80152b6:	881b      	ldrh	r3, [r3, #0]
 80152b8:	4618      	mov	r0, r3
 80152ba:	f7ff fd2f 	bl	8014d1c <ptr_to_mem>
 80152be:	4602      	mov	r2, r0
 80152c0:	89fb      	ldrh	r3, [r7, #14]
 80152c2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80152c4:	4809      	ldr	r0, [pc, #36]	; (80152ec <mem_trim+0x208>)
 80152c6:	f00c fe54 	bl	8021f72 <sys_mutex_unlock>
  return rmem;
 80152ca:	687b      	ldr	r3, [r7, #4]
}
 80152cc:	4618      	mov	r0, r3
 80152ce:	3720      	adds	r7, #32
 80152d0:	46bd      	mov	sp, r7
 80152d2:	bd80      	pop	{r7, pc}
 80152d4:	200100f0 	.word	0x200100f0
 80152d8:	200100f4 	.word	0x200100f4
 80152dc:	08027f88 	.word	0x08027f88
 80152e0:	08028114 	.word	0x08028114
 80152e4:	08027fd0 	.word	0x08027fd0
 80152e8:	0802812c 	.word	0x0802812c
 80152ec:	200100f8 	.word	0x200100f8
 80152f0:	0802814c 	.word	0x0802814c
 80152f4:	200100fc 	.word	0x200100fc

080152f8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b088      	sub	sp, #32
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	4603      	mov	r3, r0
 8015300:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8015302:	88fb      	ldrh	r3, [r7, #6]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d101      	bne.n	801530c <mem_malloc+0x14>
    return NULL;
 8015308:	2300      	movs	r3, #0
 801530a:	e0e2      	b.n	80154d2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801530c:	88fb      	ldrh	r3, [r7, #6]
 801530e:	3303      	adds	r3, #3
 8015310:	b29b      	uxth	r3, r3
 8015312:	f023 0303 	bic.w	r3, r3, #3
 8015316:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8015318:	8bbb      	ldrh	r3, [r7, #28]
 801531a:	2b0b      	cmp	r3, #11
 801531c:	d801      	bhi.n	8015322 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801531e:	230c      	movs	r3, #12
 8015320:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8015322:	8bbb      	ldrh	r3, [r7, #28]
 8015324:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015328:	d803      	bhi.n	8015332 <mem_malloc+0x3a>
 801532a:	8bba      	ldrh	r2, [r7, #28]
 801532c:	88fb      	ldrh	r3, [r7, #6]
 801532e:	429a      	cmp	r2, r3
 8015330:	d201      	bcs.n	8015336 <mem_malloc+0x3e>
    return NULL;
 8015332:	2300      	movs	r3, #0
 8015334:	e0cd      	b.n	80154d2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8015336:	4869      	ldr	r0, [pc, #420]	; (80154dc <mem_malloc+0x1e4>)
 8015338:	f00c fe0c 	bl	8021f54 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801533c:	4b68      	ldr	r3, [pc, #416]	; (80154e0 <mem_malloc+0x1e8>)
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	4618      	mov	r0, r3
 8015342:	f7ff fcfd 	bl	8014d40 <mem_to_ptr>
 8015346:	4603      	mov	r3, r0
 8015348:	83fb      	strh	r3, [r7, #30]
 801534a:	e0b7      	b.n	80154bc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801534c:	8bfb      	ldrh	r3, [r7, #30]
 801534e:	4618      	mov	r0, r3
 8015350:	f7ff fce4 	bl	8014d1c <ptr_to_mem>
 8015354:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8015356:	697b      	ldr	r3, [r7, #20]
 8015358:	791b      	ldrb	r3, [r3, #4]
 801535a:	2b00      	cmp	r3, #0
 801535c:	f040 80a7 	bne.w	80154ae <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8015360:	697b      	ldr	r3, [r7, #20]
 8015362:	881b      	ldrh	r3, [r3, #0]
 8015364:	461a      	mov	r2, r3
 8015366:	8bfb      	ldrh	r3, [r7, #30]
 8015368:	1ad3      	subs	r3, r2, r3
 801536a:	f1a3 0208 	sub.w	r2, r3, #8
 801536e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8015370:	429a      	cmp	r2, r3
 8015372:	f0c0 809c 	bcc.w	80154ae <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8015376:	697b      	ldr	r3, [r7, #20]
 8015378:	881b      	ldrh	r3, [r3, #0]
 801537a:	461a      	mov	r2, r3
 801537c:	8bfb      	ldrh	r3, [r7, #30]
 801537e:	1ad3      	subs	r3, r2, r3
 8015380:	f1a3 0208 	sub.w	r2, r3, #8
 8015384:	8bbb      	ldrh	r3, [r7, #28]
 8015386:	3314      	adds	r3, #20
 8015388:	429a      	cmp	r2, r3
 801538a:	d333      	bcc.n	80153f4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801538c:	8bfa      	ldrh	r2, [r7, #30]
 801538e:	8bbb      	ldrh	r3, [r7, #28]
 8015390:	4413      	add	r3, r2
 8015392:	b29b      	uxth	r3, r3
 8015394:	3308      	adds	r3, #8
 8015396:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8015398:	8a7b      	ldrh	r3, [r7, #18]
 801539a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801539e:	d106      	bne.n	80153ae <mem_malloc+0xb6>
 80153a0:	4b50      	ldr	r3, [pc, #320]	; (80154e4 <mem_malloc+0x1ec>)
 80153a2:	f240 3287 	movw	r2, #903	; 0x387
 80153a6:	4950      	ldr	r1, [pc, #320]	; (80154e8 <mem_malloc+0x1f0>)
 80153a8:	4850      	ldr	r0, [pc, #320]	; (80154ec <mem_malloc+0x1f4>)
 80153aa:	f00e fe15 	bl	8023fd8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80153ae:	8a7b      	ldrh	r3, [r7, #18]
 80153b0:	4618      	mov	r0, r3
 80153b2:	f7ff fcb3 	bl	8014d1c <ptr_to_mem>
 80153b6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	2200      	movs	r2, #0
 80153bc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80153be:	697b      	ldr	r3, [r7, #20]
 80153c0:	881a      	ldrh	r2, [r3, #0]
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	8bfa      	ldrh	r2, [r7, #30]
 80153ca:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80153cc:	697b      	ldr	r3, [r7, #20]
 80153ce:	8a7a      	ldrh	r2, [r7, #18]
 80153d0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80153d2:	697b      	ldr	r3, [r7, #20]
 80153d4:	2201      	movs	r2, #1
 80153d6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	881b      	ldrh	r3, [r3, #0]
 80153dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80153e0:	d00b      	beq.n	80153fa <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	881b      	ldrh	r3, [r3, #0]
 80153e6:	4618      	mov	r0, r3
 80153e8:	f7ff fc98 	bl	8014d1c <ptr_to_mem>
 80153ec:	4602      	mov	r2, r0
 80153ee:	8a7b      	ldrh	r3, [r7, #18]
 80153f0:	8053      	strh	r3, [r2, #2]
 80153f2:	e002      	b.n	80153fa <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80153f4:	697b      	ldr	r3, [r7, #20]
 80153f6:	2201      	movs	r2, #1
 80153f8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80153fa:	4b39      	ldr	r3, [pc, #228]	; (80154e0 <mem_malloc+0x1e8>)
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	697a      	ldr	r2, [r7, #20]
 8015400:	429a      	cmp	r2, r3
 8015402:	d127      	bne.n	8015454 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8015404:	4b36      	ldr	r3, [pc, #216]	; (80154e0 <mem_malloc+0x1e8>)
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801540a:	e005      	b.n	8015418 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801540c:	69bb      	ldr	r3, [r7, #24]
 801540e:	881b      	ldrh	r3, [r3, #0]
 8015410:	4618      	mov	r0, r3
 8015412:	f7ff fc83 	bl	8014d1c <ptr_to_mem>
 8015416:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8015418:	69bb      	ldr	r3, [r7, #24]
 801541a:	791b      	ldrb	r3, [r3, #4]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d004      	beq.n	801542a <mem_malloc+0x132>
 8015420:	4b33      	ldr	r3, [pc, #204]	; (80154f0 <mem_malloc+0x1f8>)
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	69ba      	ldr	r2, [r7, #24]
 8015426:	429a      	cmp	r2, r3
 8015428:	d1f0      	bne.n	801540c <mem_malloc+0x114>
          }
          lfree = cur;
 801542a:	4a2d      	ldr	r2, [pc, #180]	; (80154e0 <mem_malloc+0x1e8>)
 801542c:	69bb      	ldr	r3, [r7, #24]
 801542e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8015430:	4b2b      	ldr	r3, [pc, #172]	; (80154e0 <mem_malloc+0x1e8>)
 8015432:	681a      	ldr	r2, [r3, #0]
 8015434:	4b2e      	ldr	r3, [pc, #184]	; (80154f0 <mem_malloc+0x1f8>)
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	429a      	cmp	r2, r3
 801543a:	d00b      	beq.n	8015454 <mem_malloc+0x15c>
 801543c:	4b28      	ldr	r3, [pc, #160]	; (80154e0 <mem_malloc+0x1e8>)
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	791b      	ldrb	r3, [r3, #4]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d006      	beq.n	8015454 <mem_malloc+0x15c>
 8015446:	4b27      	ldr	r3, [pc, #156]	; (80154e4 <mem_malloc+0x1ec>)
 8015448:	f240 32b5 	movw	r2, #949	; 0x3b5
 801544c:	4929      	ldr	r1, [pc, #164]	; (80154f4 <mem_malloc+0x1fc>)
 801544e:	4827      	ldr	r0, [pc, #156]	; (80154ec <mem_malloc+0x1f4>)
 8015450:	f00e fdc2 	bl	8023fd8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8015454:	4821      	ldr	r0, [pc, #132]	; (80154dc <mem_malloc+0x1e4>)
 8015456:	f00c fd8c 	bl	8021f72 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801545a:	8bba      	ldrh	r2, [r7, #28]
 801545c:	697b      	ldr	r3, [r7, #20]
 801545e:	4413      	add	r3, r2
 8015460:	3308      	adds	r3, #8
 8015462:	4a23      	ldr	r2, [pc, #140]	; (80154f0 <mem_malloc+0x1f8>)
 8015464:	6812      	ldr	r2, [r2, #0]
 8015466:	4293      	cmp	r3, r2
 8015468:	d906      	bls.n	8015478 <mem_malloc+0x180>
 801546a:	4b1e      	ldr	r3, [pc, #120]	; (80154e4 <mem_malloc+0x1ec>)
 801546c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8015470:	4921      	ldr	r1, [pc, #132]	; (80154f8 <mem_malloc+0x200>)
 8015472:	481e      	ldr	r0, [pc, #120]	; (80154ec <mem_malloc+0x1f4>)
 8015474:	f00e fdb0 	bl	8023fd8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8015478:	697b      	ldr	r3, [r7, #20]
 801547a:	f003 0303 	and.w	r3, r3, #3
 801547e:	2b00      	cmp	r3, #0
 8015480:	d006      	beq.n	8015490 <mem_malloc+0x198>
 8015482:	4b18      	ldr	r3, [pc, #96]	; (80154e4 <mem_malloc+0x1ec>)
 8015484:	f240 32bb 	movw	r2, #955	; 0x3bb
 8015488:	491c      	ldr	r1, [pc, #112]	; (80154fc <mem_malloc+0x204>)
 801548a:	4818      	ldr	r0, [pc, #96]	; (80154ec <mem_malloc+0x1f4>)
 801548c:	f00e fda4 	bl	8023fd8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8015490:	697b      	ldr	r3, [r7, #20]
 8015492:	f003 0303 	and.w	r3, r3, #3
 8015496:	2b00      	cmp	r3, #0
 8015498:	d006      	beq.n	80154a8 <mem_malloc+0x1b0>
 801549a:	4b12      	ldr	r3, [pc, #72]	; (80154e4 <mem_malloc+0x1ec>)
 801549c:	f240 32bd 	movw	r2, #957	; 0x3bd
 80154a0:	4917      	ldr	r1, [pc, #92]	; (8015500 <mem_malloc+0x208>)
 80154a2:	4812      	ldr	r0, [pc, #72]	; (80154ec <mem_malloc+0x1f4>)
 80154a4:	f00e fd98 	bl	8023fd8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80154a8:	697b      	ldr	r3, [r7, #20]
 80154aa:	3308      	adds	r3, #8
 80154ac:	e011      	b.n	80154d2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80154ae:	8bfb      	ldrh	r3, [r7, #30]
 80154b0:	4618      	mov	r0, r3
 80154b2:	f7ff fc33 	bl	8014d1c <ptr_to_mem>
 80154b6:	4603      	mov	r3, r0
 80154b8:	881b      	ldrh	r3, [r3, #0]
 80154ba:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80154bc:	8bfa      	ldrh	r2, [r7, #30]
 80154be:	8bbb      	ldrh	r3, [r7, #28]
 80154c0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80154c4:	429a      	cmp	r2, r3
 80154c6:	f4ff af41 	bcc.w	801534c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80154ca:	4804      	ldr	r0, [pc, #16]	; (80154dc <mem_malloc+0x1e4>)
 80154cc:	f00c fd51 	bl	8021f72 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80154d0:	2300      	movs	r3, #0
}
 80154d2:	4618      	mov	r0, r3
 80154d4:	3720      	adds	r7, #32
 80154d6:	46bd      	mov	sp, r7
 80154d8:	bd80      	pop	{r7, pc}
 80154da:	bf00      	nop
 80154dc:	200100f8 	.word	0x200100f8
 80154e0:	200100fc 	.word	0x200100fc
 80154e4:	08027f88 	.word	0x08027f88
 80154e8:	0802814c 	.word	0x0802814c
 80154ec:	08027fd0 	.word	0x08027fd0
 80154f0:	200100f4 	.word	0x200100f4
 80154f4:	08028160 	.word	0x08028160
 80154f8:	0802817c 	.word	0x0802817c
 80154fc:	080281ac 	.word	0x080281ac
 8015500:	080281dc 	.word	0x080281dc

08015504 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8015504:	b480      	push	{r7}
 8015506:	b085      	sub	sp, #20
 8015508:	af00      	add	r7, sp, #0
 801550a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	689b      	ldr	r3, [r3, #8]
 8015510:	2200      	movs	r2, #0
 8015512:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	685b      	ldr	r3, [r3, #4]
 8015518:	3303      	adds	r3, #3
 801551a:	f023 0303 	bic.w	r3, r3, #3
 801551e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8015520:	2300      	movs	r3, #0
 8015522:	60fb      	str	r3, [r7, #12]
 8015524:	e011      	b.n	801554a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	689b      	ldr	r3, [r3, #8]
 801552a:	681a      	ldr	r2, [r3, #0]
 801552c:	68bb      	ldr	r3, [r7, #8]
 801552e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	689b      	ldr	r3, [r3, #8]
 8015534:	68ba      	ldr	r2, [r7, #8]
 8015536:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	881b      	ldrh	r3, [r3, #0]
 801553c:	461a      	mov	r2, r3
 801553e:	68bb      	ldr	r3, [r7, #8]
 8015540:	4413      	add	r3, r2
 8015542:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	3301      	adds	r3, #1
 8015548:	60fb      	str	r3, [r7, #12]
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	885b      	ldrh	r3, [r3, #2]
 801554e:	461a      	mov	r2, r3
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	4293      	cmp	r3, r2
 8015554:	dbe7      	blt.n	8015526 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8015556:	bf00      	nop
 8015558:	bf00      	nop
 801555a:	3714      	adds	r7, #20
 801555c:	46bd      	mov	sp, r7
 801555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015562:	4770      	bx	lr

08015564 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8015564:	b580      	push	{r7, lr}
 8015566:	b082      	sub	sp, #8
 8015568:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801556a:	2300      	movs	r3, #0
 801556c:	80fb      	strh	r3, [r7, #6]
 801556e:	e009      	b.n	8015584 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8015570:	88fb      	ldrh	r3, [r7, #6]
 8015572:	4a08      	ldr	r2, [pc, #32]	; (8015594 <memp_init+0x30>)
 8015574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015578:	4618      	mov	r0, r3
 801557a:	f7ff ffc3 	bl	8015504 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801557e:	88fb      	ldrh	r3, [r7, #6]
 8015580:	3301      	adds	r3, #1
 8015582:	80fb      	strh	r3, [r7, #6]
 8015584:	88fb      	ldrh	r3, [r7, #6]
 8015586:	2b0c      	cmp	r3, #12
 8015588:	d9f2      	bls.n	8015570 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801558a:	bf00      	nop
 801558c:	bf00      	nop
 801558e:	3708      	adds	r7, #8
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}
 8015594:	0802aeec 	.word	0x0802aeec

08015598 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b084      	sub	sp, #16
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80155a0:	f00c fd1a 	bl	8021fd8 <sys_arch_protect>
 80155a4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	689b      	ldr	r3, [r3, #8]
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80155ae:	68bb      	ldr	r3, [r7, #8]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d015      	beq.n	80155e0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	689b      	ldr	r3, [r3, #8]
 80155b8:	68ba      	ldr	r2, [r7, #8]
 80155ba:	6812      	ldr	r2, [r2, #0]
 80155bc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80155be:	68bb      	ldr	r3, [r7, #8]
 80155c0:	f003 0303 	and.w	r3, r3, #3
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d006      	beq.n	80155d6 <do_memp_malloc_pool+0x3e>
 80155c8:	4b09      	ldr	r3, [pc, #36]	; (80155f0 <do_memp_malloc_pool+0x58>)
 80155ca:	f44f 728c 	mov.w	r2, #280	; 0x118
 80155ce:	4909      	ldr	r1, [pc, #36]	; (80155f4 <do_memp_malloc_pool+0x5c>)
 80155d0:	4809      	ldr	r0, [pc, #36]	; (80155f8 <do_memp_malloc_pool+0x60>)
 80155d2:	f00e fd01 	bl	8023fd8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80155d6:	68f8      	ldr	r0, [r7, #12]
 80155d8:	f00c fd0c 	bl	8021ff4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80155dc:	68bb      	ldr	r3, [r7, #8]
 80155de:	e003      	b.n	80155e8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80155e0:	68f8      	ldr	r0, [r7, #12]
 80155e2:	f00c fd07 	bl	8021ff4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80155e6:	2300      	movs	r3, #0
}
 80155e8:	4618      	mov	r0, r3
 80155ea:	3710      	adds	r7, #16
 80155ec:	46bd      	mov	sp, r7
 80155ee:	bd80      	pop	{r7, pc}
 80155f0:	08028200 	.word	0x08028200
 80155f4:	08028230 	.word	0x08028230
 80155f8:	08028254 	.word	0x08028254

080155fc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b082      	sub	sp, #8
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d106      	bne.n	8015618 <memp_malloc_pool+0x1c>
 801560a:	4b0a      	ldr	r3, [pc, #40]	; (8015634 <memp_malloc_pool+0x38>)
 801560c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8015610:	4909      	ldr	r1, [pc, #36]	; (8015638 <memp_malloc_pool+0x3c>)
 8015612:	480a      	ldr	r0, [pc, #40]	; (801563c <memp_malloc_pool+0x40>)
 8015614:	f00e fce0 	bl	8023fd8 <iprintf>
  if (desc == NULL) {
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d101      	bne.n	8015622 <memp_malloc_pool+0x26>
    return NULL;
 801561e:	2300      	movs	r3, #0
 8015620:	e003      	b.n	801562a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8015622:	6878      	ldr	r0, [r7, #4]
 8015624:	f7ff ffb8 	bl	8015598 <do_memp_malloc_pool>
 8015628:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801562a:	4618      	mov	r0, r3
 801562c:	3708      	adds	r7, #8
 801562e:	46bd      	mov	sp, r7
 8015630:	bd80      	pop	{r7, pc}
 8015632:	bf00      	nop
 8015634:	08028200 	.word	0x08028200
 8015638:	0802827c 	.word	0x0802827c
 801563c:	08028254 	.word	0x08028254

08015640 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8015640:	b580      	push	{r7, lr}
 8015642:	b084      	sub	sp, #16
 8015644:	af00      	add	r7, sp, #0
 8015646:	4603      	mov	r3, r0
 8015648:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801564a:	79fb      	ldrb	r3, [r7, #7]
 801564c:	2b0c      	cmp	r3, #12
 801564e:	d908      	bls.n	8015662 <memp_malloc+0x22>
 8015650:	4b0a      	ldr	r3, [pc, #40]	; (801567c <memp_malloc+0x3c>)
 8015652:	f240 1257 	movw	r2, #343	; 0x157
 8015656:	490a      	ldr	r1, [pc, #40]	; (8015680 <memp_malloc+0x40>)
 8015658:	480a      	ldr	r0, [pc, #40]	; (8015684 <memp_malloc+0x44>)
 801565a:	f00e fcbd 	bl	8023fd8 <iprintf>
 801565e:	2300      	movs	r3, #0
 8015660:	e008      	b.n	8015674 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8015662:	79fb      	ldrb	r3, [r7, #7]
 8015664:	4a08      	ldr	r2, [pc, #32]	; (8015688 <memp_malloc+0x48>)
 8015666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801566a:	4618      	mov	r0, r3
 801566c:	f7ff ff94 	bl	8015598 <do_memp_malloc_pool>
 8015670:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8015672:	68fb      	ldr	r3, [r7, #12]
}
 8015674:	4618      	mov	r0, r3
 8015676:	3710      	adds	r7, #16
 8015678:	46bd      	mov	sp, r7
 801567a:	bd80      	pop	{r7, pc}
 801567c:	08028200 	.word	0x08028200
 8015680:	08028290 	.word	0x08028290
 8015684:	08028254 	.word	0x08028254
 8015688:	0802aeec 	.word	0x0802aeec

0801568c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b084      	sub	sp, #16
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
 8015694:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8015696:	683b      	ldr	r3, [r7, #0]
 8015698:	f003 0303 	and.w	r3, r3, #3
 801569c:	2b00      	cmp	r3, #0
 801569e:	d006      	beq.n	80156ae <do_memp_free_pool+0x22>
 80156a0:	4b0d      	ldr	r3, [pc, #52]	; (80156d8 <do_memp_free_pool+0x4c>)
 80156a2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80156a6:	490d      	ldr	r1, [pc, #52]	; (80156dc <do_memp_free_pool+0x50>)
 80156a8:	480d      	ldr	r0, [pc, #52]	; (80156e0 <do_memp_free_pool+0x54>)
 80156aa:	f00e fc95 	bl	8023fd8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80156ae:	683b      	ldr	r3, [r7, #0]
 80156b0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80156b2:	f00c fc91 	bl	8021fd8 <sys_arch_protect>
 80156b6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	689b      	ldr	r3, [r3, #8]
 80156bc:	681a      	ldr	r2, [r3, #0]
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	689b      	ldr	r3, [r3, #8]
 80156c6:	68fa      	ldr	r2, [r7, #12]
 80156c8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80156ca:	68b8      	ldr	r0, [r7, #8]
 80156cc:	f00c fc92 	bl	8021ff4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80156d0:	bf00      	nop
 80156d2:	3710      	adds	r7, #16
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd80      	pop	{r7, pc}
 80156d8:	08028200 	.word	0x08028200
 80156dc:	080282b0 	.word	0x080282b0
 80156e0:	08028254 	.word	0x08028254

080156e4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b082      	sub	sp, #8
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
 80156ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d106      	bne.n	8015702 <memp_free_pool+0x1e>
 80156f4:	4b0a      	ldr	r3, [pc, #40]	; (8015720 <memp_free_pool+0x3c>)
 80156f6:	f240 1295 	movw	r2, #405	; 0x195
 80156fa:	490a      	ldr	r1, [pc, #40]	; (8015724 <memp_free_pool+0x40>)
 80156fc:	480a      	ldr	r0, [pc, #40]	; (8015728 <memp_free_pool+0x44>)
 80156fe:	f00e fc6b 	bl	8023fd8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d007      	beq.n	8015718 <memp_free_pool+0x34>
 8015708:	683b      	ldr	r3, [r7, #0]
 801570a:	2b00      	cmp	r3, #0
 801570c:	d004      	beq.n	8015718 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801570e:	6839      	ldr	r1, [r7, #0]
 8015710:	6878      	ldr	r0, [r7, #4]
 8015712:	f7ff ffbb 	bl	801568c <do_memp_free_pool>
 8015716:	e000      	b.n	801571a <memp_free_pool+0x36>
    return;
 8015718:	bf00      	nop
}
 801571a:	3708      	adds	r7, #8
 801571c:	46bd      	mov	sp, r7
 801571e:	bd80      	pop	{r7, pc}
 8015720:	08028200 	.word	0x08028200
 8015724:	0802827c 	.word	0x0802827c
 8015728:	08028254 	.word	0x08028254

0801572c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801572c:	b580      	push	{r7, lr}
 801572e:	b082      	sub	sp, #8
 8015730:	af00      	add	r7, sp, #0
 8015732:	4603      	mov	r3, r0
 8015734:	6039      	str	r1, [r7, #0]
 8015736:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8015738:	79fb      	ldrb	r3, [r7, #7]
 801573a:	2b0c      	cmp	r3, #12
 801573c:	d907      	bls.n	801574e <memp_free+0x22>
 801573e:	4b0c      	ldr	r3, [pc, #48]	; (8015770 <memp_free+0x44>)
 8015740:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8015744:	490b      	ldr	r1, [pc, #44]	; (8015774 <memp_free+0x48>)
 8015746:	480c      	ldr	r0, [pc, #48]	; (8015778 <memp_free+0x4c>)
 8015748:	f00e fc46 	bl	8023fd8 <iprintf>
 801574c:	e00c      	b.n	8015768 <memp_free+0x3c>

  if (mem == NULL) {
 801574e:	683b      	ldr	r3, [r7, #0]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d008      	beq.n	8015766 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8015754:	79fb      	ldrb	r3, [r7, #7]
 8015756:	4a09      	ldr	r2, [pc, #36]	; (801577c <memp_free+0x50>)
 8015758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801575c:	6839      	ldr	r1, [r7, #0]
 801575e:	4618      	mov	r0, r3
 8015760:	f7ff ff94 	bl	801568c <do_memp_free_pool>
 8015764:	e000      	b.n	8015768 <memp_free+0x3c>
    return;
 8015766:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8015768:	3708      	adds	r7, #8
 801576a:	46bd      	mov	sp, r7
 801576c:	bd80      	pop	{r7, pc}
 801576e:	bf00      	nop
 8015770:	08028200 	.word	0x08028200
 8015774:	080282d0 	.word	0x080282d0
 8015778:	08028254 	.word	0x08028254
 801577c:	0802aeec 	.word	0x0802aeec

08015780 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8015780:	b480      	push	{r7}
 8015782:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8015784:	bf00      	nop
 8015786:	46bd      	mov	sp, r7
 8015788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801578c:	4770      	bx	lr
	...

08015790 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8015790:	b580      	push	{r7, lr}
 8015792:	b086      	sub	sp, #24
 8015794:	af00      	add	r7, sp, #0
 8015796:	60f8      	str	r0, [r7, #12]
 8015798:	60b9      	str	r1, [r7, #8]
 801579a:	607a      	str	r2, [r7, #4]
 801579c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d108      	bne.n	80157b6 <netif_add+0x26>
 80157a4:	4b5b      	ldr	r3, [pc, #364]	; (8015914 <netif_add+0x184>)
 80157a6:	f240 1227 	movw	r2, #295	; 0x127
 80157aa:	495b      	ldr	r1, [pc, #364]	; (8015918 <netif_add+0x188>)
 80157ac:	485b      	ldr	r0, [pc, #364]	; (801591c <netif_add+0x18c>)
 80157ae:	f00e fc13 	bl	8023fd8 <iprintf>
 80157b2:	2300      	movs	r3, #0
 80157b4:	e0a9      	b.n	801590a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80157b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d108      	bne.n	80157ce <netif_add+0x3e>
 80157bc:	4b55      	ldr	r3, [pc, #340]	; (8015914 <netif_add+0x184>)
 80157be:	f44f 7294 	mov.w	r2, #296	; 0x128
 80157c2:	4957      	ldr	r1, [pc, #348]	; (8015920 <netif_add+0x190>)
 80157c4:	4855      	ldr	r0, [pc, #340]	; (801591c <netif_add+0x18c>)
 80157c6:	f00e fc07 	bl	8023fd8 <iprintf>
 80157ca:	2300      	movs	r3, #0
 80157cc:	e09d      	b.n	801590a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80157ce:	68bb      	ldr	r3, [r7, #8]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d101      	bne.n	80157d8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80157d4:	4b53      	ldr	r3, [pc, #332]	; (8015924 <netif_add+0x194>)
 80157d6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d101      	bne.n	80157e2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80157de:	4b51      	ldr	r3, [pc, #324]	; (8015924 <netif_add+0x194>)
 80157e0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80157e2:	683b      	ldr	r3, [r7, #0]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d101      	bne.n	80157ec <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80157e8:	4b4e      	ldr	r3, [pc, #312]	; (8015924 <netif_add+0x194>)
 80157ea:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	2200      	movs	r2, #0
 80157f0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	2200      	movs	r2, #0
 80157f6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	2200      	movs	r2, #0
 80157fc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	4a49      	ldr	r2, [pc, #292]	; (8015928 <netif_add+0x198>)
 8015802:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	2200      	movs	r2, #0
 8015808:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	2200      	movs	r2, #0
 801580e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	3324      	adds	r3, #36	; 0x24
 8015816:	2204      	movs	r2, #4
 8015818:	2100      	movs	r1, #0
 801581a:	4618      	mov	r0, r3
 801581c:	f00e fda0 	bl	8024360 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	2200      	movs	r2, #0
 8015824:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	6a3a      	ldr	r2, [r7, #32]
 801582a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801582c:	4b3f      	ldr	r3, [pc, #252]	; (801592c <netif_add+0x19c>)
 801582e:	781a      	ldrb	r2, [r3, #0]
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801583a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801583c:	683b      	ldr	r3, [r7, #0]
 801583e:	687a      	ldr	r2, [r7, #4]
 8015840:	68b9      	ldr	r1, [r7, #8]
 8015842:	68f8      	ldr	r0, [r7, #12]
 8015844:	f000 f914 	bl	8015a70 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8015848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801584a:	68f8      	ldr	r0, [r7, #12]
 801584c:	4798      	blx	r3
 801584e:	4603      	mov	r3, r0
 8015850:	2b00      	cmp	r3, #0
 8015852:	d001      	beq.n	8015858 <netif_add+0xc8>
    return NULL;
 8015854:	2300      	movs	r3, #0
 8015856:	e058      	b.n	801590a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801585e:	2bff      	cmp	r3, #255	; 0xff
 8015860:	d103      	bne.n	801586a <netif_add+0xda>
        netif->num = 0;
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	2200      	movs	r2, #0
 8015866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801586a:	2300      	movs	r3, #0
 801586c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801586e:	4b30      	ldr	r3, [pc, #192]	; (8015930 <netif_add+0x1a0>)
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	617b      	str	r3, [r7, #20]
 8015874:	e02b      	b.n	80158ce <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8015876:	697a      	ldr	r2, [r7, #20]
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	429a      	cmp	r2, r3
 801587c:	d106      	bne.n	801588c <netif_add+0xfc>
 801587e:	4b25      	ldr	r3, [pc, #148]	; (8015914 <netif_add+0x184>)
 8015880:	f240 128b 	movw	r2, #395	; 0x18b
 8015884:	492b      	ldr	r1, [pc, #172]	; (8015934 <netif_add+0x1a4>)
 8015886:	4825      	ldr	r0, [pc, #148]	; (801591c <netif_add+0x18c>)
 8015888:	f00e fba6 	bl	8023fd8 <iprintf>
        num_netifs++;
 801588c:	693b      	ldr	r3, [r7, #16]
 801588e:	3301      	adds	r3, #1
 8015890:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8015892:	693b      	ldr	r3, [r7, #16]
 8015894:	2bff      	cmp	r3, #255	; 0xff
 8015896:	dd06      	ble.n	80158a6 <netif_add+0x116>
 8015898:	4b1e      	ldr	r3, [pc, #120]	; (8015914 <netif_add+0x184>)
 801589a:	f240 128d 	movw	r2, #397	; 0x18d
 801589e:	4926      	ldr	r1, [pc, #152]	; (8015938 <netif_add+0x1a8>)
 80158a0:	481e      	ldr	r0, [pc, #120]	; (801591c <netif_add+0x18c>)
 80158a2:	f00e fb99 	bl	8023fd8 <iprintf>
        if (netif2->num == netif->num) {
 80158a6:	697b      	ldr	r3, [r7, #20]
 80158a8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80158b2:	429a      	cmp	r2, r3
 80158b4:	d108      	bne.n	80158c8 <netif_add+0x138>
          netif->num++;
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80158bc:	3301      	adds	r3, #1
 80158be:	b2da      	uxtb	r2, r3
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80158c6:	e005      	b.n	80158d4 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80158c8:	697b      	ldr	r3, [r7, #20]
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	617b      	str	r3, [r7, #20]
 80158ce:	697b      	ldr	r3, [r7, #20]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d1d0      	bne.n	8015876 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80158d4:	697b      	ldr	r3, [r7, #20]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d1be      	bne.n	8015858 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80158e0:	2bfe      	cmp	r3, #254	; 0xfe
 80158e2:	d103      	bne.n	80158ec <netif_add+0x15c>
    netif_num = 0;
 80158e4:	4b11      	ldr	r3, [pc, #68]	; (801592c <netif_add+0x19c>)
 80158e6:	2200      	movs	r2, #0
 80158e8:	701a      	strb	r2, [r3, #0]
 80158ea:	e006      	b.n	80158fa <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80158f2:	3301      	adds	r3, #1
 80158f4:	b2da      	uxtb	r2, r3
 80158f6:	4b0d      	ldr	r3, [pc, #52]	; (801592c <netif_add+0x19c>)
 80158f8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80158fa:	4b0d      	ldr	r3, [pc, #52]	; (8015930 <netif_add+0x1a0>)
 80158fc:	681a      	ldr	r2, [r3, #0]
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8015902:	4a0b      	ldr	r2, [pc, #44]	; (8015930 <netif_add+0x1a0>)
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8015908:	68fb      	ldr	r3, [r7, #12]
}
 801590a:	4618      	mov	r0, r3
 801590c:	3718      	adds	r7, #24
 801590e:	46bd      	mov	sp, r7
 8015910:	bd80      	pop	{r7, pc}
 8015912:	bf00      	nop
 8015914:	080282ec 	.word	0x080282ec
 8015918:	08028380 	.word	0x08028380
 801591c:	0802833c 	.word	0x0802833c
 8015920:	0802839c 	.word	0x0802839c
 8015924:	0802af70 	.word	0x0802af70
 8015928:	08015d53 	.word	0x08015d53
 801592c:	2001322c 	.word	0x2001322c
 8015930:	20013224 	.word	0x20013224
 8015934:	080283c0 	.word	0x080283c0
 8015938:	080283d4 	.word	0x080283d4

0801593c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801593c:	b580      	push	{r7, lr}
 801593e:	b082      	sub	sp, #8
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]
 8015944:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8015946:	6839      	ldr	r1, [r7, #0]
 8015948:	6878      	ldr	r0, [r7, #4]
 801594a:	f002 fea3 	bl	8018694 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801594e:	6839      	ldr	r1, [r7, #0]
 8015950:	6878      	ldr	r0, [r7, #4]
 8015952:	f007 ff43 	bl	801d7dc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8015956:	bf00      	nop
 8015958:	3708      	adds	r7, #8
 801595a:	46bd      	mov	sp, r7
 801595c:	bd80      	pop	{r7, pc}
	...

08015960 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b086      	sub	sp, #24
 8015964:	af00      	add	r7, sp, #0
 8015966:	60f8      	str	r0, [r7, #12]
 8015968:	60b9      	str	r1, [r7, #8]
 801596a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801596c:	68bb      	ldr	r3, [r7, #8]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d106      	bne.n	8015980 <netif_do_set_ipaddr+0x20>
 8015972:	4b1d      	ldr	r3, [pc, #116]	; (80159e8 <netif_do_set_ipaddr+0x88>)
 8015974:	f240 12cb 	movw	r2, #459	; 0x1cb
 8015978:	491c      	ldr	r1, [pc, #112]	; (80159ec <netif_do_set_ipaddr+0x8c>)
 801597a:	481d      	ldr	r0, [pc, #116]	; (80159f0 <netif_do_set_ipaddr+0x90>)
 801597c:	f00e fb2c 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d106      	bne.n	8015994 <netif_do_set_ipaddr+0x34>
 8015986:	4b18      	ldr	r3, [pc, #96]	; (80159e8 <netif_do_set_ipaddr+0x88>)
 8015988:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801598c:	4917      	ldr	r1, [pc, #92]	; (80159ec <netif_do_set_ipaddr+0x8c>)
 801598e:	4818      	ldr	r0, [pc, #96]	; (80159f0 <netif_do_set_ipaddr+0x90>)
 8015990:	f00e fb22 	bl	8023fd8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8015994:	68bb      	ldr	r3, [r7, #8]
 8015996:	681a      	ldr	r2, [r3, #0]
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	3304      	adds	r3, #4
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	429a      	cmp	r2, r3
 80159a0:	d01c      	beq.n	80159dc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80159a2:	68bb      	ldr	r3, [r7, #8]
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	3304      	adds	r3, #4
 80159ac:	681a      	ldr	r2, [r3, #0]
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80159b2:	f107 0314 	add.w	r3, r7, #20
 80159b6:	4619      	mov	r1, r3
 80159b8:	6878      	ldr	r0, [r7, #4]
 80159ba:	f7ff ffbf 	bl	801593c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80159be:	68bb      	ldr	r3, [r7, #8]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d002      	beq.n	80159ca <netif_do_set_ipaddr+0x6a>
 80159c4:	68bb      	ldr	r3, [r7, #8]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	e000      	b.n	80159cc <netif_do_set_ipaddr+0x6c>
 80159ca:	2300      	movs	r3, #0
 80159cc:	68fa      	ldr	r2, [r7, #12]
 80159ce:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80159d0:	2101      	movs	r1, #1
 80159d2:	68f8      	ldr	r0, [r7, #12]
 80159d4:	f000 f8d2 	bl	8015b7c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80159d8:	2301      	movs	r3, #1
 80159da:	e000      	b.n	80159de <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80159dc:	2300      	movs	r3, #0
}
 80159de:	4618      	mov	r0, r3
 80159e0:	3718      	adds	r7, #24
 80159e2:	46bd      	mov	sp, r7
 80159e4:	bd80      	pop	{r7, pc}
 80159e6:	bf00      	nop
 80159e8:	080282ec 	.word	0x080282ec
 80159ec:	08028404 	.word	0x08028404
 80159f0:	0802833c 	.word	0x0802833c

080159f4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80159f4:	b480      	push	{r7}
 80159f6:	b085      	sub	sp, #20
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	60f8      	str	r0, [r7, #12]
 80159fc:	60b9      	str	r1, [r7, #8]
 80159fe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8015a00:	68bb      	ldr	r3, [r7, #8]
 8015a02:	681a      	ldr	r2, [r3, #0]
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	3308      	adds	r3, #8
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	429a      	cmp	r2, r3
 8015a0c:	d00a      	beq.n	8015a24 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8015a0e:	68bb      	ldr	r3, [r7, #8]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d002      	beq.n	8015a1a <netif_do_set_netmask+0x26>
 8015a14:	68bb      	ldr	r3, [r7, #8]
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	e000      	b.n	8015a1c <netif_do_set_netmask+0x28>
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	68fa      	ldr	r2, [r7, #12]
 8015a1e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8015a20:	2301      	movs	r3, #1
 8015a22:	e000      	b.n	8015a26 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8015a24:	2300      	movs	r3, #0
}
 8015a26:	4618      	mov	r0, r3
 8015a28:	3714      	adds	r7, #20
 8015a2a:	46bd      	mov	sp, r7
 8015a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a30:	4770      	bx	lr

08015a32 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8015a32:	b480      	push	{r7}
 8015a34:	b085      	sub	sp, #20
 8015a36:	af00      	add	r7, sp, #0
 8015a38:	60f8      	str	r0, [r7, #12]
 8015a3a:	60b9      	str	r1, [r7, #8]
 8015a3c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8015a3e:	68bb      	ldr	r3, [r7, #8]
 8015a40:	681a      	ldr	r2, [r3, #0]
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	330c      	adds	r3, #12
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	429a      	cmp	r2, r3
 8015a4a:	d00a      	beq.n	8015a62 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8015a4c:	68bb      	ldr	r3, [r7, #8]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d002      	beq.n	8015a58 <netif_do_set_gw+0x26>
 8015a52:	68bb      	ldr	r3, [r7, #8]
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	e000      	b.n	8015a5a <netif_do_set_gw+0x28>
 8015a58:	2300      	movs	r3, #0
 8015a5a:	68fa      	ldr	r2, [r7, #12]
 8015a5c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8015a5e:	2301      	movs	r3, #1
 8015a60:	e000      	b.n	8015a64 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8015a62:	2300      	movs	r3, #0
}
 8015a64:	4618      	mov	r0, r3
 8015a66:	3714      	adds	r7, #20
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a6e:	4770      	bx	lr

08015a70 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8015a70:	b580      	push	{r7, lr}
 8015a72:	b088      	sub	sp, #32
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	60f8      	str	r0, [r7, #12]
 8015a78:	60b9      	str	r1, [r7, #8]
 8015a7a:	607a      	str	r2, [r7, #4]
 8015a7c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8015a7e:	2300      	movs	r3, #0
 8015a80:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8015a82:	2300      	movs	r3, #0
 8015a84:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015a86:	68bb      	ldr	r3, [r7, #8]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d101      	bne.n	8015a90 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8015a8c:	4b1c      	ldr	r3, [pc, #112]	; (8015b00 <netif_set_addr+0x90>)
 8015a8e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d101      	bne.n	8015a9a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8015a96:	4b1a      	ldr	r3, [pc, #104]	; (8015b00 <netif_set_addr+0x90>)
 8015a98:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8015a9a:	683b      	ldr	r3, [r7, #0]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d101      	bne.n	8015aa4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8015aa0:	4b17      	ldr	r3, [pc, #92]	; (8015b00 <netif_set_addr+0x90>)
 8015aa2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8015aa4:	68bb      	ldr	r3, [r7, #8]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d003      	beq.n	8015ab2 <netif_set_addr+0x42>
 8015aaa:	68bb      	ldr	r3, [r7, #8]
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d101      	bne.n	8015ab6 <netif_set_addr+0x46>
 8015ab2:	2301      	movs	r3, #1
 8015ab4:	e000      	b.n	8015ab8 <netif_set_addr+0x48>
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	617b      	str	r3, [r7, #20]
  if (remove) {
 8015aba:	697b      	ldr	r3, [r7, #20]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d006      	beq.n	8015ace <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8015ac0:	f107 0310 	add.w	r3, r7, #16
 8015ac4:	461a      	mov	r2, r3
 8015ac6:	68b9      	ldr	r1, [r7, #8]
 8015ac8:	68f8      	ldr	r0, [r7, #12]
 8015aca:	f7ff ff49 	bl	8015960 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8015ace:	69fa      	ldr	r2, [r7, #28]
 8015ad0:	6879      	ldr	r1, [r7, #4]
 8015ad2:	68f8      	ldr	r0, [r7, #12]
 8015ad4:	f7ff ff8e 	bl	80159f4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8015ad8:	69ba      	ldr	r2, [r7, #24]
 8015ada:	6839      	ldr	r1, [r7, #0]
 8015adc:	68f8      	ldr	r0, [r7, #12]
 8015ade:	f7ff ffa8 	bl	8015a32 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8015ae2:	697b      	ldr	r3, [r7, #20]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d106      	bne.n	8015af6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8015ae8:	f107 0310 	add.w	r3, r7, #16
 8015aec:	461a      	mov	r2, r3
 8015aee:	68b9      	ldr	r1, [r7, #8]
 8015af0:	68f8      	ldr	r0, [r7, #12]
 8015af2:	f7ff ff35 	bl	8015960 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8015af6:	bf00      	nop
 8015af8:	3720      	adds	r7, #32
 8015afa:	46bd      	mov	sp, r7
 8015afc:	bd80      	pop	{r7, pc}
 8015afe:	bf00      	nop
 8015b00:	0802af70 	.word	0x0802af70

08015b04 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8015b04:	b480      	push	{r7}
 8015b06:	b083      	sub	sp, #12
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8015b0c:	4a04      	ldr	r2, [pc, #16]	; (8015b20 <netif_set_default+0x1c>)
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8015b12:	bf00      	nop
 8015b14:	370c      	adds	r7, #12
 8015b16:	46bd      	mov	sp, r7
 8015b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b1c:	4770      	bx	lr
 8015b1e:	bf00      	nop
 8015b20:	20013228 	.word	0x20013228

08015b24 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8015b24:	b580      	push	{r7, lr}
 8015b26:	b082      	sub	sp, #8
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d107      	bne.n	8015b42 <netif_set_up+0x1e>
 8015b32:	4b0f      	ldr	r3, [pc, #60]	; (8015b70 <netif_set_up+0x4c>)
 8015b34:	f44f 7254 	mov.w	r2, #848	; 0x350
 8015b38:	490e      	ldr	r1, [pc, #56]	; (8015b74 <netif_set_up+0x50>)
 8015b3a:	480f      	ldr	r0, [pc, #60]	; (8015b78 <netif_set_up+0x54>)
 8015b3c:	f00e fa4c 	bl	8023fd8 <iprintf>
 8015b40:	e013      	b.n	8015b6a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015b48:	f003 0301 	and.w	r3, r3, #1
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d10c      	bne.n	8015b6a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015b56:	f043 0301 	orr.w	r3, r3, #1
 8015b5a:	b2da      	uxtb	r2, r3
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8015b62:	2103      	movs	r1, #3
 8015b64:	6878      	ldr	r0, [r7, #4]
 8015b66:	f000 f809 	bl	8015b7c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8015b6a:	3708      	adds	r7, #8
 8015b6c:	46bd      	mov	sp, r7
 8015b6e:	bd80      	pop	{r7, pc}
 8015b70:	080282ec 	.word	0x080282ec
 8015b74:	08028474 	.word	0x08028474
 8015b78:	0802833c 	.word	0x0802833c

08015b7c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8015b7c:	b580      	push	{r7, lr}
 8015b7e:	b082      	sub	sp, #8
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	6078      	str	r0, [r7, #4]
 8015b84:	460b      	mov	r3, r1
 8015b86:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d106      	bne.n	8015b9c <netif_issue_reports+0x20>
 8015b8e:	4b18      	ldr	r3, [pc, #96]	; (8015bf0 <netif_issue_reports+0x74>)
 8015b90:	f240 326d 	movw	r2, #877	; 0x36d
 8015b94:	4917      	ldr	r1, [pc, #92]	; (8015bf4 <netif_issue_reports+0x78>)
 8015b96:	4818      	ldr	r0, [pc, #96]	; (8015bf8 <netif_issue_reports+0x7c>)
 8015b98:	f00e fa1e 	bl	8023fd8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015ba2:	f003 0304 	and.w	r3, r3, #4
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d01e      	beq.n	8015be8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015bb0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d017      	beq.n	8015be8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8015bb8:	78fb      	ldrb	r3, [r7, #3]
 8015bba:	f003 0301 	and.w	r3, r3, #1
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d013      	beq.n	8015bea <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	3304      	adds	r3, #4
 8015bc6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d00e      	beq.n	8015bea <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015bd2:	f003 0308 	and.w	r3, r3, #8
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d007      	beq.n	8015bea <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	3304      	adds	r3, #4
 8015bde:	4619      	mov	r1, r3
 8015be0:	6878      	ldr	r0, [r7, #4]
 8015be2:	f00a fbfb 	bl	80203dc <etharp_request>
 8015be6:	e000      	b.n	8015bea <netif_issue_reports+0x6e>
    return;
 8015be8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8015bea:	3708      	adds	r7, #8
 8015bec:	46bd      	mov	sp, r7
 8015bee:	bd80      	pop	{r7, pc}
 8015bf0:	080282ec 	.word	0x080282ec
 8015bf4:	08028490 	.word	0x08028490
 8015bf8:	0802833c 	.word	0x0802833c

08015bfc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8015bfc:	b580      	push	{r7, lr}
 8015bfe:	b082      	sub	sp, #8
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d107      	bne.n	8015c1a <netif_set_down+0x1e>
 8015c0a:	4b12      	ldr	r3, [pc, #72]	; (8015c54 <netif_set_down+0x58>)
 8015c0c:	f240 329b 	movw	r2, #923	; 0x39b
 8015c10:	4911      	ldr	r1, [pc, #68]	; (8015c58 <netif_set_down+0x5c>)
 8015c12:	4812      	ldr	r0, [pc, #72]	; (8015c5c <netif_set_down+0x60>)
 8015c14:	f00e f9e0 	bl	8023fd8 <iprintf>
 8015c18:	e019      	b.n	8015c4e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015c20:	f003 0301 	and.w	r3, r3, #1
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d012      	beq.n	8015c4e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015c2e:	f023 0301 	bic.w	r3, r3, #1
 8015c32:	b2da      	uxtb	r2, r3
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015c40:	f003 0308 	and.w	r3, r3, #8
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d002      	beq.n	8015c4e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8015c48:	6878      	ldr	r0, [r7, #4]
 8015c4a:	f009 ff81 	bl	801fb50 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8015c4e:	3708      	adds	r7, #8
 8015c50:	46bd      	mov	sp, r7
 8015c52:	bd80      	pop	{r7, pc}
 8015c54:	080282ec 	.word	0x080282ec
 8015c58:	080284b4 	.word	0x080284b4
 8015c5c:	0802833c 	.word	0x0802833c

08015c60 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8015c60:	b580      	push	{r7, lr}
 8015c62:	b082      	sub	sp, #8
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d107      	bne.n	8015c7e <netif_set_link_up+0x1e>
 8015c6e:	4b15      	ldr	r3, [pc, #84]	; (8015cc4 <netif_set_link_up+0x64>)
 8015c70:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8015c74:	4914      	ldr	r1, [pc, #80]	; (8015cc8 <netif_set_link_up+0x68>)
 8015c76:	4815      	ldr	r0, [pc, #84]	; (8015ccc <netif_set_link_up+0x6c>)
 8015c78:	f00e f9ae 	bl	8023fd8 <iprintf>
 8015c7c:	e01e      	b.n	8015cbc <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015c84:	f003 0304 	and.w	r3, r3, #4
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d117      	bne.n	8015cbc <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015c92:	f043 0304 	orr.w	r3, r3, #4
 8015c96:	b2da      	uxtb	r2, r3
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8015c9e:	6878      	ldr	r0, [r7, #4]
 8015ca0:	f008 f9c6 	bl	801e030 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8015ca4:	2103      	movs	r1, #3
 8015ca6:	6878      	ldr	r0, [r7, #4]
 8015ca8:	f7ff ff68 	bl	8015b7c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	69db      	ldr	r3, [r3, #28]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d003      	beq.n	8015cbc <netif_set_link_up+0x5c>
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	69db      	ldr	r3, [r3, #28]
 8015cb8:	6878      	ldr	r0, [r7, #4]
 8015cba:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8015cbc:	3708      	adds	r7, #8
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	bd80      	pop	{r7, pc}
 8015cc2:	bf00      	nop
 8015cc4:	080282ec 	.word	0x080282ec
 8015cc8:	080284d4 	.word	0x080284d4
 8015ccc:	0802833c 	.word	0x0802833c

08015cd0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b082      	sub	sp, #8
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d107      	bne.n	8015cee <netif_set_link_down+0x1e>
 8015cde:	4b11      	ldr	r3, [pc, #68]	; (8015d24 <netif_set_link_down+0x54>)
 8015ce0:	f240 4206 	movw	r2, #1030	; 0x406
 8015ce4:	4910      	ldr	r1, [pc, #64]	; (8015d28 <netif_set_link_down+0x58>)
 8015ce6:	4811      	ldr	r0, [pc, #68]	; (8015d2c <netif_set_link_down+0x5c>)
 8015ce8:	f00e f976 	bl	8023fd8 <iprintf>
 8015cec:	e017      	b.n	8015d1e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015cf4:	f003 0304 	and.w	r3, r3, #4
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d010      	beq.n	8015d1e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015d02:	f023 0304 	bic.w	r3, r3, #4
 8015d06:	b2da      	uxtb	r2, r3
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	69db      	ldr	r3, [r3, #28]
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d003      	beq.n	8015d1e <netif_set_link_down+0x4e>
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	69db      	ldr	r3, [r3, #28]
 8015d1a:	6878      	ldr	r0, [r7, #4]
 8015d1c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8015d1e:	3708      	adds	r7, #8
 8015d20:	46bd      	mov	sp, r7
 8015d22:	bd80      	pop	{r7, pc}
 8015d24:	080282ec 	.word	0x080282ec
 8015d28:	080284f8 	.word	0x080284f8
 8015d2c:	0802833c 	.word	0x0802833c

08015d30 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8015d30:	b480      	push	{r7}
 8015d32:	b083      	sub	sp, #12
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	6078      	str	r0, [r7, #4]
 8015d38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d002      	beq.n	8015d46 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	683a      	ldr	r2, [r7, #0]
 8015d44:	61da      	str	r2, [r3, #28]
  }
}
 8015d46:	bf00      	nop
 8015d48:	370c      	adds	r7, #12
 8015d4a:	46bd      	mov	sp, r7
 8015d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d50:	4770      	bx	lr

08015d52 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8015d52:	b480      	push	{r7}
 8015d54:	b085      	sub	sp, #20
 8015d56:	af00      	add	r7, sp, #0
 8015d58:	60f8      	str	r0, [r7, #12]
 8015d5a:	60b9      	str	r1, [r7, #8]
 8015d5c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8015d5e:	f06f 030b 	mvn.w	r3, #11
}
 8015d62:	4618      	mov	r0, r3
 8015d64:	3714      	adds	r7, #20
 8015d66:	46bd      	mov	sp, r7
 8015d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6c:	4770      	bx	lr
	...

08015d70 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8015d70:	b480      	push	{r7}
 8015d72:	b085      	sub	sp, #20
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	4603      	mov	r3, r0
 8015d78:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8015d7a:	79fb      	ldrb	r3, [r7, #7]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d013      	beq.n	8015da8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8015d80:	4b0d      	ldr	r3, [pc, #52]	; (8015db8 <netif_get_by_index+0x48>)
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	60fb      	str	r3, [r7, #12]
 8015d86:	e00c      	b.n	8015da2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015d8e:	3301      	adds	r3, #1
 8015d90:	b2db      	uxtb	r3, r3
 8015d92:	79fa      	ldrb	r2, [r7, #7]
 8015d94:	429a      	cmp	r2, r3
 8015d96:	d101      	bne.n	8015d9c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	e006      	b.n	8015daa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	60fb      	str	r3, [r7, #12]
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d1ef      	bne.n	8015d88 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8015da8:	2300      	movs	r3, #0
}
 8015daa:	4618      	mov	r0, r3
 8015dac:	3714      	adds	r7, #20
 8015dae:	46bd      	mov	sp, r7
 8015db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db4:	4770      	bx	lr
 8015db6:	bf00      	nop
 8015db8:	20013224 	.word	0x20013224

08015dbc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b082      	sub	sp, #8
 8015dc0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8015dc2:	f00c f909 	bl	8021fd8 <sys_arch_protect>
 8015dc6:	6038      	str	r0, [r7, #0]
 8015dc8:	4b0d      	ldr	r3, [pc, #52]	; (8015e00 <pbuf_free_ooseq+0x44>)
 8015dca:	2200      	movs	r2, #0
 8015dcc:	701a      	strb	r2, [r3, #0]
 8015dce:	6838      	ldr	r0, [r7, #0]
 8015dd0:	f00c f910 	bl	8021ff4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015dd4:	4b0b      	ldr	r3, [pc, #44]	; (8015e04 <pbuf_free_ooseq+0x48>)
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	607b      	str	r3, [r7, #4]
 8015dda:	e00a      	b.n	8015df2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d003      	beq.n	8015dec <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8015de4:	6878      	ldr	r0, [r7, #4]
 8015de6:	f002 fc93 	bl	8018710 <tcp_free_ooseq>
      return;
 8015dea:	e005      	b.n	8015df8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	68db      	ldr	r3, [r3, #12]
 8015df0:	607b      	str	r3, [r7, #4]
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d1f1      	bne.n	8015ddc <pbuf_free_ooseq+0x20>
    }
  }
}
 8015df8:	3708      	adds	r7, #8
 8015dfa:	46bd      	mov	sp, r7
 8015dfc:	bd80      	pop	{r7, pc}
 8015dfe:	bf00      	nop
 8015e00:	2001322d 	.word	0x2001322d
 8015e04:	2001323c 	.word	0x2001323c

08015e08 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b082      	sub	sp, #8
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8015e10:	f7ff ffd4 	bl	8015dbc <pbuf_free_ooseq>
}
 8015e14:	bf00      	nop
 8015e16:	3708      	adds	r7, #8
 8015e18:	46bd      	mov	sp, r7
 8015e1a:	bd80      	pop	{r7, pc}

08015e1c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b082      	sub	sp, #8
 8015e20:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8015e22:	f00c f8d9 	bl	8021fd8 <sys_arch_protect>
 8015e26:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8015e28:	4b0f      	ldr	r3, [pc, #60]	; (8015e68 <pbuf_pool_is_empty+0x4c>)
 8015e2a:	781b      	ldrb	r3, [r3, #0]
 8015e2c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8015e2e:	4b0e      	ldr	r3, [pc, #56]	; (8015e68 <pbuf_pool_is_empty+0x4c>)
 8015e30:	2201      	movs	r2, #1
 8015e32:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8015e34:	6878      	ldr	r0, [r7, #4]
 8015e36:	f00c f8dd 	bl	8021ff4 <sys_arch_unprotect>

  if (!queued) {
 8015e3a:	78fb      	ldrb	r3, [r7, #3]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d10f      	bne.n	8015e60 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8015e40:	2100      	movs	r1, #0
 8015e42:	480a      	ldr	r0, [pc, #40]	; (8015e6c <pbuf_pool_is_empty+0x50>)
 8015e44:	f7fe fe84 	bl	8014b50 <tcpip_try_callback>
 8015e48:	4603      	mov	r3, r0
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d008      	beq.n	8015e60 <pbuf_pool_is_empty+0x44>
 8015e4e:	f00c f8c3 	bl	8021fd8 <sys_arch_protect>
 8015e52:	6078      	str	r0, [r7, #4]
 8015e54:	4b04      	ldr	r3, [pc, #16]	; (8015e68 <pbuf_pool_is_empty+0x4c>)
 8015e56:	2200      	movs	r2, #0
 8015e58:	701a      	strb	r2, [r3, #0]
 8015e5a:	6878      	ldr	r0, [r7, #4]
 8015e5c:	f00c f8ca 	bl	8021ff4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8015e60:	bf00      	nop
 8015e62:	3708      	adds	r7, #8
 8015e64:	46bd      	mov	sp, r7
 8015e66:	bd80      	pop	{r7, pc}
 8015e68:	2001322d 	.word	0x2001322d
 8015e6c:	08015e09 	.word	0x08015e09

08015e70 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8015e70:	b480      	push	{r7}
 8015e72:	b085      	sub	sp, #20
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	60f8      	str	r0, [r7, #12]
 8015e78:	60b9      	str	r1, [r7, #8]
 8015e7a:	4611      	mov	r1, r2
 8015e7c:	461a      	mov	r2, r3
 8015e7e:	460b      	mov	r3, r1
 8015e80:	80fb      	strh	r3, [r7, #6]
 8015e82:	4613      	mov	r3, r2
 8015e84:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	2200      	movs	r2, #0
 8015e8a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	68ba      	ldr	r2, [r7, #8]
 8015e90:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	88fa      	ldrh	r2, [r7, #6]
 8015e96:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	88ba      	ldrh	r2, [r7, #4]
 8015e9c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8015e9e:	8b3b      	ldrh	r3, [r7, #24]
 8015ea0:	b2da      	uxtb	r2, r3
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	7f3a      	ldrb	r2, [r7, #28]
 8015eaa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	2201      	movs	r2, #1
 8015eb0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	2200      	movs	r2, #0
 8015eb6:	73da      	strb	r2, [r3, #15]
}
 8015eb8:	bf00      	nop
 8015eba:	3714      	adds	r7, #20
 8015ebc:	46bd      	mov	sp, r7
 8015ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec2:	4770      	bx	lr

08015ec4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b08c      	sub	sp, #48	; 0x30
 8015ec8:	af02      	add	r7, sp, #8
 8015eca:	4603      	mov	r3, r0
 8015ecc:	71fb      	strb	r3, [r7, #7]
 8015ece:	460b      	mov	r3, r1
 8015ed0:	80bb      	strh	r3, [r7, #4]
 8015ed2:	4613      	mov	r3, r2
 8015ed4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8015ed6:	79fb      	ldrb	r3, [r7, #7]
 8015ed8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8015eda:	887b      	ldrh	r3, [r7, #2]
 8015edc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8015ee0:	d07f      	beq.n	8015fe2 <pbuf_alloc+0x11e>
 8015ee2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8015ee6:	f300 80c8 	bgt.w	801607a <pbuf_alloc+0x1b6>
 8015eea:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8015eee:	d010      	beq.n	8015f12 <pbuf_alloc+0x4e>
 8015ef0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8015ef4:	f300 80c1 	bgt.w	801607a <pbuf_alloc+0x1b6>
 8015ef8:	2b01      	cmp	r3, #1
 8015efa:	d002      	beq.n	8015f02 <pbuf_alloc+0x3e>
 8015efc:	2b41      	cmp	r3, #65	; 0x41
 8015efe:	f040 80bc 	bne.w	801607a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8015f02:	887a      	ldrh	r2, [r7, #2]
 8015f04:	88bb      	ldrh	r3, [r7, #4]
 8015f06:	4619      	mov	r1, r3
 8015f08:	2000      	movs	r0, #0
 8015f0a:	f000 f8d1 	bl	80160b0 <pbuf_alloc_reference>
 8015f0e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8015f10:	e0bd      	b.n	801608e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8015f12:	2300      	movs	r3, #0
 8015f14:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8015f16:	2300      	movs	r3, #0
 8015f18:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8015f1a:	88bb      	ldrh	r3, [r7, #4]
 8015f1c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8015f1e:	200c      	movs	r0, #12
 8015f20:	f7ff fb8e 	bl	8015640 <memp_malloc>
 8015f24:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8015f26:	693b      	ldr	r3, [r7, #16]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d109      	bne.n	8015f40 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8015f2c:	f7ff ff76 	bl	8015e1c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8015f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d002      	beq.n	8015f3c <pbuf_alloc+0x78>
            pbuf_free(p);
 8015f36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f38:	f000 faa8 	bl	801648c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8015f3c:	2300      	movs	r3, #0
 8015f3e:	e0a7      	b.n	8016090 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8015f40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015f42:	3303      	adds	r3, #3
 8015f44:	b29b      	uxth	r3, r3
 8015f46:	f023 0303 	bic.w	r3, r3, #3
 8015f4a:	b29b      	uxth	r3, r3
 8015f4c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8015f50:	b29b      	uxth	r3, r3
 8015f52:	8b7a      	ldrh	r2, [r7, #26]
 8015f54:	4293      	cmp	r3, r2
 8015f56:	bf28      	it	cs
 8015f58:	4613      	movcs	r3, r2
 8015f5a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8015f5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015f5e:	3310      	adds	r3, #16
 8015f60:	693a      	ldr	r2, [r7, #16]
 8015f62:	4413      	add	r3, r2
 8015f64:	3303      	adds	r3, #3
 8015f66:	f023 0303 	bic.w	r3, r3, #3
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	89f9      	ldrh	r1, [r7, #14]
 8015f6e:	8b7a      	ldrh	r2, [r7, #26]
 8015f70:	2300      	movs	r3, #0
 8015f72:	9301      	str	r3, [sp, #4]
 8015f74:	887b      	ldrh	r3, [r7, #2]
 8015f76:	9300      	str	r3, [sp, #0]
 8015f78:	460b      	mov	r3, r1
 8015f7a:	4601      	mov	r1, r0
 8015f7c:	6938      	ldr	r0, [r7, #16]
 8015f7e:	f7ff ff77 	bl	8015e70 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8015f82:	693b      	ldr	r3, [r7, #16]
 8015f84:	685b      	ldr	r3, [r3, #4]
 8015f86:	f003 0303 	and.w	r3, r3, #3
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d006      	beq.n	8015f9c <pbuf_alloc+0xd8>
 8015f8e:	4b42      	ldr	r3, [pc, #264]	; (8016098 <pbuf_alloc+0x1d4>)
 8015f90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015f94:	4941      	ldr	r1, [pc, #260]	; (801609c <pbuf_alloc+0x1d8>)
 8015f96:	4842      	ldr	r0, [pc, #264]	; (80160a0 <pbuf_alloc+0x1dc>)
 8015f98:	f00e f81e 	bl	8023fd8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8015f9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015f9e:	3303      	adds	r3, #3
 8015fa0:	f023 0303 	bic.w	r3, r3, #3
 8015fa4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8015fa8:	d106      	bne.n	8015fb8 <pbuf_alloc+0xf4>
 8015faa:	4b3b      	ldr	r3, [pc, #236]	; (8016098 <pbuf_alloc+0x1d4>)
 8015fac:	f44f 7281 	mov.w	r2, #258	; 0x102
 8015fb0:	493c      	ldr	r1, [pc, #240]	; (80160a4 <pbuf_alloc+0x1e0>)
 8015fb2:	483b      	ldr	r0, [pc, #236]	; (80160a0 <pbuf_alloc+0x1dc>)
 8015fb4:	f00e f810 	bl	8023fd8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8015fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d102      	bne.n	8015fc4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8015fbe:	693b      	ldr	r3, [r7, #16]
 8015fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8015fc2:	e002      	b.n	8015fca <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8015fc4:	69fb      	ldr	r3, [r7, #28]
 8015fc6:	693a      	ldr	r2, [r7, #16]
 8015fc8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8015fca:	693b      	ldr	r3, [r7, #16]
 8015fcc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8015fce:	8b7a      	ldrh	r2, [r7, #26]
 8015fd0:	89fb      	ldrh	r3, [r7, #14]
 8015fd2:	1ad3      	subs	r3, r2, r3
 8015fd4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8015fda:	8b7b      	ldrh	r3, [r7, #26]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d19e      	bne.n	8015f1e <pbuf_alloc+0x5a>
      break;
 8015fe0:	e055      	b.n	801608e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8015fe2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015fe4:	3303      	adds	r3, #3
 8015fe6:	b29b      	uxth	r3, r3
 8015fe8:	f023 0303 	bic.w	r3, r3, #3
 8015fec:	b29a      	uxth	r2, r3
 8015fee:	88bb      	ldrh	r3, [r7, #4]
 8015ff0:	3303      	adds	r3, #3
 8015ff2:	b29b      	uxth	r3, r3
 8015ff4:	f023 0303 	bic.w	r3, r3, #3
 8015ff8:	b29b      	uxth	r3, r3
 8015ffa:	4413      	add	r3, r2
 8015ffc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8015ffe:	8b3b      	ldrh	r3, [r7, #24]
 8016000:	3310      	adds	r3, #16
 8016002:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8016004:	8b3a      	ldrh	r2, [r7, #24]
 8016006:	88bb      	ldrh	r3, [r7, #4]
 8016008:	3303      	adds	r3, #3
 801600a:	f023 0303 	bic.w	r3, r3, #3
 801600e:	429a      	cmp	r2, r3
 8016010:	d306      	bcc.n	8016020 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8016012:	8afa      	ldrh	r2, [r7, #22]
 8016014:	88bb      	ldrh	r3, [r7, #4]
 8016016:	3303      	adds	r3, #3
 8016018:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801601c:	429a      	cmp	r2, r3
 801601e:	d201      	bcs.n	8016024 <pbuf_alloc+0x160>
        return NULL;
 8016020:	2300      	movs	r3, #0
 8016022:	e035      	b.n	8016090 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8016024:	8afb      	ldrh	r3, [r7, #22]
 8016026:	4618      	mov	r0, r3
 8016028:	f7ff f966 	bl	80152f8 <mem_malloc>
 801602c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016030:	2b00      	cmp	r3, #0
 8016032:	d101      	bne.n	8016038 <pbuf_alloc+0x174>
        return NULL;
 8016034:	2300      	movs	r3, #0
 8016036:	e02b      	b.n	8016090 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8016038:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801603a:	3310      	adds	r3, #16
 801603c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801603e:	4413      	add	r3, r2
 8016040:	3303      	adds	r3, #3
 8016042:	f023 0303 	bic.w	r3, r3, #3
 8016046:	4618      	mov	r0, r3
 8016048:	88b9      	ldrh	r1, [r7, #4]
 801604a:	88ba      	ldrh	r2, [r7, #4]
 801604c:	2300      	movs	r3, #0
 801604e:	9301      	str	r3, [sp, #4]
 8016050:	887b      	ldrh	r3, [r7, #2]
 8016052:	9300      	str	r3, [sp, #0]
 8016054:	460b      	mov	r3, r1
 8016056:	4601      	mov	r1, r0
 8016058:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801605a:	f7ff ff09 	bl	8015e70 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016060:	685b      	ldr	r3, [r3, #4]
 8016062:	f003 0303 	and.w	r3, r3, #3
 8016066:	2b00      	cmp	r3, #0
 8016068:	d010      	beq.n	801608c <pbuf_alloc+0x1c8>
 801606a:	4b0b      	ldr	r3, [pc, #44]	; (8016098 <pbuf_alloc+0x1d4>)
 801606c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8016070:	490d      	ldr	r1, [pc, #52]	; (80160a8 <pbuf_alloc+0x1e4>)
 8016072:	480b      	ldr	r0, [pc, #44]	; (80160a0 <pbuf_alloc+0x1dc>)
 8016074:	f00d ffb0 	bl	8023fd8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8016078:	e008      	b.n	801608c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801607a:	4b07      	ldr	r3, [pc, #28]	; (8016098 <pbuf_alloc+0x1d4>)
 801607c:	f240 1227 	movw	r2, #295	; 0x127
 8016080:	490a      	ldr	r1, [pc, #40]	; (80160ac <pbuf_alloc+0x1e8>)
 8016082:	4807      	ldr	r0, [pc, #28]	; (80160a0 <pbuf_alloc+0x1dc>)
 8016084:	f00d ffa8 	bl	8023fd8 <iprintf>
      return NULL;
 8016088:	2300      	movs	r3, #0
 801608a:	e001      	b.n	8016090 <pbuf_alloc+0x1cc>
      break;
 801608c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016090:	4618      	mov	r0, r3
 8016092:	3728      	adds	r7, #40	; 0x28
 8016094:	46bd      	mov	sp, r7
 8016096:	bd80      	pop	{r7, pc}
 8016098:	0802851c 	.word	0x0802851c
 801609c:	0802854c 	.word	0x0802854c
 80160a0:	0802857c 	.word	0x0802857c
 80160a4:	080285a4 	.word	0x080285a4
 80160a8:	080285d8 	.word	0x080285d8
 80160ac:	08028604 	.word	0x08028604

080160b0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b086      	sub	sp, #24
 80160b4:	af02      	add	r7, sp, #8
 80160b6:	6078      	str	r0, [r7, #4]
 80160b8:	460b      	mov	r3, r1
 80160ba:	807b      	strh	r3, [r7, #2]
 80160bc:	4613      	mov	r3, r2
 80160be:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80160c0:	883b      	ldrh	r3, [r7, #0]
 80160c2:	2b41      	cmp	r3, #65	; 0x41
 80160c4:	d009      	beq.n	80160da <pbuf_alloc_reference+0x2a>
 80160c6:	883b      	ldrh	r3, [r7, #0]
 80160c8:	2b01      	cmp	r3, #1
 80160ca:	d006      	beq.n	80160da <pbuf_alloc_reference+0x2a>
 80160cc:	4b0f      	ldr	r3, [pc, #60]	; (801610c <pbuf_alloc_reference+0x5c>)
 80160ce:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80160d2:	490f      	ldr	r1, [pc, #60]	; (8016110 <pbuf_alloc_reference+0x60>)
 80160d4:	480f      	ldr	r0, [pc, #60]	; (8016114 <pbuf_alloc_reference+0x64>)
 80160d6:	f00d ff7f 	bl	8023fd8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80160da:	200b      	movs	r0, #11
 80160dc:	f7ff fab0 	bl	8015640 <memp_malloc>
 80160e0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d101      	bne.n	80160ec <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80160e8:	2300      	movs	r3, #0
 80160ea:	e00b      	b.n	8016104 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80160ec:	8879      	ldrh	r1, [r7, #2]
 80160ee:	887a      	ldrh	r2, [r7, #2]
 80160f0:	2300      	movs	r3, #0
 80160f2:	9301      	str	r3, [sp, #4]
 80160f4:	883b      	ldrh	r3, [r7, #0]
 80160f6:	9300      	str	r3, [sp, #0]
 80160f8:	460b      	mov	r3, r1
 80160fa:	6879      	ldr	r1, [r7, #4]
 80160fc:	68f8      	ldr	r0, [r7, #12]
 80160fe:	f7ff feb7 	bl	8015e70 <pbuf_init_alloced_pbuf>
  return p;
 8016102:	68fb      	ldr	r3, [r7, #12]
}
 8016104:	4618      	mov	r0, r3
 8016106:	3710      	adds	r7, #16
 8016108:	46bd      	mov	sp, r7
 801610a:	bd80      	pop	{r7, pc}
 801610c:	0802851c 	.word	0x0802851c
 8016110:	08028620 	.word	0x08028620
 8016114:	0802857c 	.word	0x0802857c

08016118 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b088      	sub	sp, #32
 801611c:	af02      	add	r7, sp, #8
 801611e:	607b      	str	r3, [r7, #4]
 8016120:	4603      	mov	r3, r0
 8016122:	73fb      	strb	r3, [r7, #15]
 8016124:	460b      	mov	r3, r1
 8016126:	81bb      	strh	r3, [r7, #12]
 8016128:	4613      	mov	r3, r2
 801612a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801612c:	7bfb      	ldrb	r3, [r7, #15]
 801612e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8016130:	8a7b      	ldrh	r3, [r7, #18]
 8016132:	3303      	adds	r3, #3
 8016134:	f023 0203 	bic.w	r2, r3, #3
 8016138:	89bb      	ldrh	r3, [r7, #12]
 801613a:	441a      	add	r2, r3
 801613c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801613e:	429a      	cmp	r2, r3
 8016140:	d901      	bls.n	8016146 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8016142:	2300      	movs	r3, #0
 8016144:	e018      	b.n	8016178 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8016146:	6a3b      	ldr	r3, [r7, #32]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d007      	beq.n	801615c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801614c:	8a7b      	ldrh	r3, [r7, #18]
 801614e:	3303      	adds	r3, #3
 8016150:	f023 0303 	bic.w	r3, r3, #3
 8016154:	6a3a      	ldr	r2, [r7, #32]
 8016156:	4413      	add	r3, r2
 8016158:	617b      	str	r3, [r7, #20]
 801615a:	e001      	b.n	8016160 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801615c:	2300      	movs	r3, #0
 801615e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8016160:	6878      	ldr	r0, [r7, #4]
 8016162:	89b9      	ldrh	r1, [r7, #12]
 8016164:	89ba      	ldrh	r2, [r7, #12]
 8016166:	2302      	movs	r3, #2
 8016168:	9301      	str	r3, [sp, #4]
 801616a:	897b      	ldrh	r3, [r7, #10]
 801616c:	9300      	str	r3, [sp, #0]
 801616e:	460b      	mov	r3, r1
 8016170:	6979      	ldr	r1, [r7, #20]
 8016172:	f7ff fe7d 	bl	8015e70 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8016176:	687b      	ldr	r3, [r7, #4]
}
 8016178:	4618      	mov	r0, r3
 801617a:	3718      	adds	r7, #24
 801617c:	46bd      	mov	sp, r7
 801617e:	bd80      	pop	{r7, pc}

08016180 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8016180:	b580      	push	{r7, lr}
 8016182:	b084      	sub	sp, #16
 8016184:	af00      	add	r7, sp, #0
 8016186:	6078      	str	r0, [r7, #4]
 8016188:	460b      	mov	r3, r1
 801618a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	2b00      	cmp	r3, #0
 8016190:	d106      	bne.n	80161a0 <pbuf_realloc+0x20>
 8016192:	4b3a      	ldr	r3, [pc, #232]	; (801627c <pbuf_realloc+0xfc>)
 8016194:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8016198:	4939      	ldr	r1, [pc, #228]	; (8016280 <pbuf_realloc+0x100>)
 801619a:	483a      	ldr	r0, [pc, #232]	; (8016284 <pbuf_realloc+0x104>)
 801619c:	f00d ff1c 	bl	8023fd8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	891b      	ldrh	r3, [r3, #8]
 80161a4:	887a      	ldrh	r2, [r7, #2]
 80161a6:	429a      	cmp	r2, r3
 80161a8:	d263      	bcs.n	8016272 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	891a      	ldrh	r2, [r3, #8]
 80161ae:	887b      	ldrh	r3, [r7, #2]
 80161b0:	1ad3      	subs	r3, r2, r3
 80161b2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80161b4:	887b      	ldrh	r3, [r7, #2]
 80161b6:	817b      	strh	r3, [r7, #10]
  q = p;
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80161bc:	e018      	b.n	80161f0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	895b      	ldrh	r3, [r3, #10]
 80161c2:	897a      	ldrh	r2, [r7, #10]
 80161c4:	1ad3      	subs	r3, r2, r3
 80161c6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	891a      	ldrh	r2, [r3, #8]
 80161cc:	893b      	ldrh	r3, [r7, #8]
 80161ce:	1ad3      	subs	r3, r2, r3
 80161d0:	b29a      	uxth	r2, r3
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d106      	bne.n	80161f0 <pbuf_realloc+0x70>
 80161e2:	4b26      	ldr	r3, [pc, #152]	; (801627c <pbuf_realloc+0xfc>)
 80161e4:	f240 12af 	movw	r2, #431	; 0x1af
 80161e8:	4927      	ldr	r1, [pc, #156]	; (8016288 <pbuf_realloc+0x108>)
 80161ea:	4826      	ldr	r0, [pc, #152]	; (8016284 <pbuf_realloc+0x104>)
 80161ec:	f00d fef4 	bl	8023fd8 <iprintf>
  while (rem_len > q->len) {
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	895b      	ldrh	r3, [r3, #10]
 80161f4:	897a      	ldrh	r2, [r7, #10]
 80161f6:	429a      	cmp	r2, r3
 80161f8:	d8e1      	bhi.n	80161be <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	7b1b      	ldrb	r3, [r3, #12]
 80161fe:	f003 030f 	and.w	r3, r3, #15
 8016202:	2b00      	cmp	r3, #0
 8016204:	d121      	bne.n	801624a <pbuf_realloc+0xca>
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	895b      	ldrh	r3, [r3, #10]
 801620a:	897a      	ldrh	r2, [r7, #10]
 801620c:	429a      	cmp	r2, r3
 801620e:	d01c      	beq.n	801624a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	7b5b      	ldrb	r3, [r3, #13]
 8016214:	f003 0302 	and.w	r3, r3, #2
 8016218:	2b00      	cmp	r3, #0
 801621a:	d116      	bne.n	801624a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	685a      	ldr	r2, [r3, #4]
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	1ad3      	subs	r3, r2, r3
 8016224:	b29a      	uxth	r2, r3
 8016226:	897b      	ldrh	r3, [r7, #10]
 8016228:	4413      	add	r3, r2
 801622a:	b29b      	uxth	r3, r3
 801622c:	4619      	mov	r1, r3
 801622e:	68f8      	ldr	r0, [r7, #12]
 8016230:	f7fe ff58 	bl	80150e4 <mem_trim>
 8016234:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d106      	bne.n	801624a <pbuf_realloc+0xca>
 801623c:	4b0f      	ldr	r3, [pc, #60]	; (801627c <pbuf_realloc+0xfc>)
 801623e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8016242:	4912      	ldr	r1, [pc, #72]	; (801628c <pbuf_realloc+0x10c>)
 8016244:	480f      	ldr	r0, [pc, #60]	; (8016284 <pbuf_realloc+0x104>)
 8016246:	f00d fec7 	bl	8023fd8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	897a      	ldrh	r2, [r7, #10]
 801624e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	895a      	ldrh	r2, [r3, #10]
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d004      	beq.n	801626a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	4618      	mov	r0, r3
 8016266:	f000 f911 	bl	801648c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	2200      	movs	r2, #0
 801626e:	601a      	str	r2, [r3, #0]
 8016270:	e000      	b.n	8016274 <pbuf_realloc+0xf4>
    return;
 8016272:	bf00      	nop

}
 8016274:	3710      	adds	r7, #16
 8016276:	46bd      	mov	sp, r7
 8016278:	bd80      	pop	{r7, pc}
 801627a:	bf00      	nop
 801627c:	0802851c 	.word	0x0802851c
 8016280:	08028634 	.word	0x08028634
 8016284:	0802857c 	.word	0x0802857c
 8016288:	0802864c 	.word	0x0802864c
 801628c:	08028664 	.word	0x08028664

08016290 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8016290:	b580      	push	{r7, lr}
 8016292:	b086      	sub	sp, #24
 8016294:	af00      	add	r7, sp, #0
 8016296:	60f8      	str	r0, [r7, #12]
 8016298:	60b9      	str	r1, [r7, #8]
 801629a:	4613      	mov	r3, r2
 801629c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d106      	bne.n	80162b2 <pbuf_add_header_impl+0x22>
 80162a4:	4b2b      	ldr	r3, [pc, #172]	; (8016354 <pbuf_add_header_impl+0xc4>)
 80162a6:	f240 12df 	movw	r2, #479	; 0x1df
 80162aa:	492b      	ldr	r1, [pc, #172]	; (8016358 <pbuf_add_header_impl+0xc8>)
 80162ac:	482b      	ldr	r0, [pc, #172]	; (801635c <pbuf_add_header_impl+0xcc>)
 80162ae:	f00d fe93 	bl	8023fd8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d003      	beq.n	80162c0 <pbuf_add_header_impl+0x30>
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80162be:	d301      	bcc.n	80162c4 <pbuf_add_header_impl+0x34>
    return 1;
 80162c0:	2301      	movs	r3, #1
 80162c2:	e043      	b.n	801634c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80162c4:	68bb      	ldr	r3, [r7, #8]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d101      	bne.n	80162ce <pbuf_add_header_impl+0x3e>
    return 0;
 80162ca:	2300      	movs	r3, #0
 80162cc:	e03e      	b.n	801634c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80162ce:	68bb      	ldr	r3, [r7, #8]
 80162d0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	891a      	ldrh	r2, [r3, #8]
 80162d6:	8a7b      	ldrh	r3, [r7, #18]
 80162d8:	4413      	add	r3, r2
 80162da:	b29b      	uxth	r3, r3
 80162dc:	8a7a      	ldrh	r2, [r7, #18]
 80162de:	429a      	cmp	r2, r3
 80162e0:	d901      	bls.n	80162e6 <pbuf_add_header_impl+0x56>
    return 1;
 80162e2:	2301      	movs	r3, #1
 80162e4:	e032      	b.n	801634c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	7b1b      	ldrb	r3, [r3, #12]
 80162ea:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80162ec:	8a3b      	ldrh	r3, [r7, #16]
 80162ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d00c      	beq.n	8016310 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	685a      	ldr	r2, [r3, #4]
 80162fa:	68bb      	ldr	r3, [r7, #8]
 80162fc:	425b      	negs	r3, r3
 80162fe:	4413      	add	r3, r2
 8016300:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	3310      	adds	r3, #16
 8016306:	697a      	ldr	r2, [r7, #20]
 8016308:	429a      	cmp	r2, r3
 801630a:	d20d      	bcs.n	8016328 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801630c:	2301      	movs	r3, #1
 801630e:	e01d      	b.n	801634c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8016310:	79fb      	ldrb	r3, [r7, #7]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d006      	beq.n	8016324 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	685a      	ldr	r2, [r3, #4]
 801631a:	68bb      	ldr	r3, [r7, #8]
 801631c:	425b      	negs	r3, r3
 801631e:	4413      	add	r3, r2
 8016320:	617b      	str	r3, [r7, #20]
 8016322:	e001      	b.n	8016328 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8016324:	2301      	movs	r3, #1
 8016326:	e011      	b.n	801634c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	697a      	ldr	r2, [r7, #20]
 801632c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	895a      	ldrh	r2, [r3, #10]
 8016332:	8a7b      	ldrh	r3, [r7, #18]
 8016334:	4413      	add	r3, r2
 8016336:	b29a      	uxth	r2, r3
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	891a      	ldrh	r2, [r3, #8]
 8016340:	8a7b      	ldrh	r3, [r7, #18]
 8016342:	4413      	add	r3, r2
 8016344:	b29a      	uxth	r2, r3
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	811a      	strh	r2, [r3, #8]


  return 0;
 801634a:	2300      	movs	r3, #0
}
 801634c:	4618      	mov	r0, r3
 801634e:	3718      	adds	r7, #24
 8016350:	46bd      	mov	sp, r7
 8016352:	bd80      	pop	{r7, pc}
 8016354:	0802851c 	.word	0x0802851c
 8016358:	08028680 	.word	0x08028680
 801635c:	0802857c 	.word	0x0802857c

08016360 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8016360:	b580      	push	{r7, lr}
 8016362:	b082      	sub	sp, #8
 8016364:	af00      	add	r7, sp, #0
 8016366:	6078      	str	r0, [r7, #4]
 8016368:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801636a:	2200      	movs	r2, #0
 801636c:	6839      	ldr	r1, [r7, #0]
 801636e:	6878      	ldr	r0, [r7, #4]
 8016370:	f7ff ff8e 	bl	8016290 <pbuf_add_header_impl>
 8016374:	4603      	mov	r3, r0
}
 8016376:	4618      	mov	r0, r3
 8016378:	3708      	adds	r7, #8
 801637a:	46bd      	mov	sp, r7
 801637c:	bd80      	pop	{r7, pc}
	...

08016380 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b084      	sub	sp, #16
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
 8016388:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d106      	bne.n	801639e <pbuf_remove_header+0x1e>
 8016390:	4b20      	ldr	r3, [pc, #128]	; (8016414 <pbuf_remove_header+0x94>)
 8016392:	f240 224b 	movw	r2, #587	; 0x24b
 8016396:	4920      	ldr	r1, [pc, #128]	; (8016418 <pbuf_remove_header+0x98>)
 8016398:	4820      	ldr	r0, [pc, #128]	; (801641c <pbuf_remove_header+0x9c>)
 801639a:	f00d fe1d 	bl	8023fd8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d003      	beq.n	80163ac <pbuf_remove_header+0x2c>
 80163a4:	683b      	ldr	r3, [r7, #0]
 80163a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80163aa:	d301      	bcc.n	80163b0 <pbuf_remove_header+0x30>
    return 1;
 80163ac:	2301      	movs	r3, #1
 80163ae:	e02c      	b.n	801640a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80163b0:	683b      	ldr	r3, [r7, #0]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d101      	bne.n	80163ba <pbuf_remove_header+0x3a>
    return 0;
 80163b6:	2300      	movs	r3, #0
 80163b8:	e027      	b.n	801640a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80163ba:	683b      	ldr	r3, [r7, #0]
 80163bc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	895b      	ldrh	r3, [r3, #10]
 80163c2:	89fa      	ldrh	r2, [r7, #14]
 80163c4:	429a      	cmp	r2, r3
 80163c6:	d908      	bls.n	80163da <pbuf_remove_header+0x5a>
 80163c8:	4b12      	ldr	r3, [pc, #72]	; (8016414 <pbuf_remove_header+0x94>)
 80163ca:	f240 2255 	movw	r2, #597	; 0x255
 80163ce:	4914      	ldr	r1, [pc, #80]	; (8016420 <pbuf_remove_header+0xa0>)
 80163d0:	4812      	ldr	r0, [pc, #72]	; (801641c <pbuf_remove_header+0x9c>)
 80163d2:	f00d fe01 	bl	8023fd8 <iprintf>
 80163d6:	2301      	movs	r3, #1
 80163d8:	e017      	b.n	801640a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	685b      	ldr	r3, [r3, #4]
 80163de:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	685a      	ldr	r2, [r3, #4]
 80163e4:	683b      	ldr	r3, [r7, #0]
 80163e6:	441a      	add	r2, r3
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	895a      	ldrh	r2, [r3, #10]
 80163f0:	89fb      	ldrh	r3, [r7, #14]
 80163f2:	1ad3      	subs	r3, r2, r3
 80163f4:	b29a      	uxth	r2, r3
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	891a      	ldrh	r2, [r3, #8]
 80163fe:	89fb      	ldrh	r3, [r7, #14]
 8016400:	1ad3      	subs	r3, r2, r3
 8016402:	b29a      	uxth	r2, r3
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8016408:	2300      	movs	r3, #0
}
 801640a:	4618      	mov	r0, r3
 801640c:	3710      	adds	r7, #16
 801640e:	46bd      	mov	sp, r7
 8016410:	bd80      	pop	{r7, pc}
 8016412:	bf00      	nop
 8016414:	0802851c 	.word	0x0802851c
 8016418:	08028680 	.word	0x08028680
 801641c:	0802857c 	.word	0x0802857c
 8016420:	0802868c 	.word	0x0802868c

08016424 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8016424:	b580      	push	{r7, lr}
 8016426:	b082      	sub	sp, #8
 8016428:	af00      	add	r7, sp, #0
 801642a:	6078      	str	r0, [r7, #4]
 801642c:	460b      	mov	r3, r1
 801642e:	807b      	strh	r3, [r7, #2]
 8016430:	4613      	mov	r3, r2
 8016432:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8016434:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016438:	2b00      	cmp	r3, #0
 801643a:	da08      	bge.n	801644e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801643c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016440:	425b      	negs	r3, r3
 8016442:	4619      	mov	r1, r3
 8016444:	6878      	ldr	r0, [r7, #4]
 8016446:	f7ff ff9b 	bl	8016380 <pbuf_remove_header>
 801644a:	4603      	mov	r3, r0
 801644c:	e007      	b.n	801645e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801644e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016452:	787a      	ldrb	r2, [r7, #1]
 8016454:	4619      	mov	r1, r3
 8016456:	6878      	ldr	r0, [r7, #4]
 8016458:	f7ff ff1a 	bl	8016290 <pbuf_add_header_impl>
 801645c:	4603      	mov	r3, r0
  }
}
 801645e:	4618      	mov	r0, r3
 8016460:	3708      	adds	r7, #8
 8016462:	46bd      	mov	sp, r7
 8016464:	bd80      	pop	{r7, pc}

08016466 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8016466:	b580      	push	{r7, lr}
 8016468:	b082      	sub	sp, #8
 801646a:	af00      	add	r7, sp, #0
 801646c:	6078      	str	r0, [r7, #4]
 801646e:	460b      	mov	r3, r1
 8016470:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8016472:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016476:	2201      	movs	r2, #1
 8016478:	4619      	mov	r1, r3
 801647a:	6878      	ldr	r0, [r7, #4]
 801647c:	f7ff ffd2 	bl	8016424 <pbuf_header_impl>
 8016480:	4603      	mov	r3, r0
}
 8016482:	4618      	mov	r0, r3
 8016484:	3708      	adds	r7, #8
 8016486:	46bd      	mov	sp, r7
 8016488:	bd80      	pop	{r7, pc}
	...

0801648c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801648c:	b580      	push	{r7, lr}
 801648e:	b088      	sub	sp, #32
 8016490:	af00      	add	r7, sp, #0
 8016492:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d10b      	bne.n	80164b2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	2b00      	cmp	r3, #0
 801649e:	d106      	bne.n	80164ae <pbuf_free+0x22>
 80164a0:	4b3b      	ldr	r3, [pc, #236]	; (8016590 <pbuf_free+0x104>)
 80164a2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80164a6:	493b      	ldr	r1, [pc, #236]	; (8016594 <pbuf_free+0x108>)
 80164a8:	483b      	ldr	r0, [pc, #236]	; (8016598 <pbuf_free+0x10c>)
 80164aa:	f00d fd95 	bl	8023fd8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80164ae:	2300      	movs	r3, #0
 80164b0:	e069      	b.n	8016586 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80164b2:	2300      	movs	r3, #0
 80164b4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80164b6:	e062      	b.n	801657e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80164b8:	f00b fd8e 	bl	8021fd8 <sys_arch_protect>
 80164bc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	7b9b      	ldrb	r3, [r3, #14]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d106      	bne.n	80164d4 <pbuf_free+0x48>
 80164c6:	4b32      	ldr	r3, [pc, #200]	; (8016590 <pbuf_free+0x104>)
 80164c8:	f240 22f1 	movw	r2, #753	; 0x2f1
 80164cc:	4933      	ldr	r1, [pc, #204]	; (801659c <pbuf_free+0x110>)
 80164ce:	4832      	ldr	r0, [pc, #200]	; (8016598 <pbuf_free+0x10c>)
 80164d0:	f00d fd82 	bl	8023fd8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	7b9b      	ldrb	r3, [r3, #14]
 80164d8:	3b01      	subs	r3, #1
 80164da:	b2da      	uxtb	r2, r3
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	739a      	strb	r2, [r3, #14]
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	7b9b      	ldrb	r3, [r3, #14]
 80164e4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80164e6:	69b8      	ldr	r0, [r7, #24]
 80164e8:	f00b fd84 	bl	8021ff4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80164ec:	7dfb      	ldrb	r3, [r7, #23]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d143      	bne.n	801657a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	7b1b      	ldrb	r3, [r3, #12]
 80164fc:	f003 030f 	and.w	r3, r3, #15
 8016500:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	7b5b      	ldrb	r3, [r3, #13]
 8016506:	f003 0302 	and.w	r3, r3, #2
 801650a:	2b00      	cmp	r3, #0
 801650c:	d011      	beq.n	8016532 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8016512:	68bb      	ldr	r3, [r7, #8]
 8016514:	691b      	ldr	r3, [r3, #16]
 8016516:	2b00      	cmp	r3, #0
 8016518:	d106      	bne.n	8016528 <pbuf_free+0x9c>
 801651a:	4b1d      	ldr	r3, [pc, #116]	; (8016590 <pbuf_free+0x104>)
 801651c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8016520:	491f      	ldr	r1, [pc, #124]	; (80165a0 <pbuf_free+0x114>)
 8016522:	481d      	ldr	r0, [pc, #116]	; (8016598 <pbuf_free+0x10c>)
 8016524:	f00d fd58 	bl	8023fd8 <iprintf>
        pc->custom_free_function(p);
 8016528:	68bb      	ldr	r3, [r7, #8]
 801652a:	691b      	ldr	r3, [r3, #16]
 801652c:	6878      	ldr	r0, [r7, #4]
 801652e:	4798      	blx	r3
 8016530:	e01d      	b.n	801656e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8016532:	7bfb      	ldrb	r3, [r7, #15]
 8016534:	2b02      	cmp	r3, #2
 8016536:	d104      	bne.n	8016542 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8016538:	6879      	ldr	r1, [r7, #4]
 801653a:	200c      	movs	r0, #12
 801653c:	f7ff f8f6 	bl	801572c <memp_free>
 8016540:	e015      	b.n	801656e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8016542:	7bfb      	ldrb	r3, [r7, #15]
 8016544:	2b01      	cmp	r3, #1
 8016546:	d104      	bne.n	8016552 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8016548:	6879      	ldr	r1, [r7, #4]
 801654a:	200b      	movs	r0, #11
 801654c:	f7ff f8ee 	bl	801572c <memp_free>
 8016550:	e00d      	b.n	801656e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8016552:	7bfb      	ldrb	r3, [r7, #15]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d103      	bne.n	8016560 <pbuf_free+0xd4>
          mem_free(p);
 8016558:	6878      	ldr	r0, [r7, #4]
 801655a:	f7fe fd33 	bl	8014fc4 <mem_free>
 801655e:	e006      	b.n	801656e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8016560:	4b0b      	ldr	r3, [pc, #44]	; (8016590 <pbuf_free+0x104>)
 8016562:	f240 320f 	movw	r2, #783	; 0x30f
 8016566:	490f      	ldr	r1, [pc, #60]	; (80165a4 <pbuf_free+0x118>)
 8016568:	480b      	ldr	r0, [pc, #44]	; (8016598 <pbuf_free+0x10c>)
 801656a:	f00d fd35 	bl	8023fd8 <iprintf>
        }
      }
      count++;
 801656e:	7ffb      	ldrb	r3, [r7, #31]
 8016570:	3301      	adds	r3, #1
 8016572:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8016574:	693b      	ldr	r3, [r7, #16]
 8016576:	607b      	str	r3, [r7, #4]
 8016578:	e001      	b.n	801657e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801657a:	2300      	movs	r3, #0
 801657c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d199      	bne.n	80164b8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8016584:	7ffb      	ldrb	r3, [r7, #31]
}
 8016586:	4618      	mov	r0, r3
 8016588:	3720      	adds	r7, #32
 801658a:	46bd      	mov	sp, r7
 801658c:	bd80      	pop	{r7, pc}
 801658e:	bf00      	nop
 8016590:	0802851c 	.word	0x0802851c
 8016594:	08028680 	.word	0x08028680
 8016598:	0802857c 	.word	0x0802857c
 801659c:	080286ac 	.word	0x080286ac
 80165a0:	080286c4 	.word	0x080286c4
 80165a4:	080286e8 	.word	0x080286e8

080165a8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80165a8:	b480      	push	{r7}
 80165aa:	b085      	sub	sp, #20
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80165b0:	2300      	movs	r3, #0
 80165b2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80165b4:	e005      	b.n	80165c2 <pbuf_clen+0x1a>
    ++len;
 80165b6:	89fb      	ldrh	r3, [r7, #14]
 80165b8:	3301      	adds	r3, #1
 80165ba:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d1f6      	bne.n	80165b6 <pbuf_clen+0xe>
  }
  return len;
 80165c8:	89fb      	ldrh	r3, [r7, #14]
}
 80165ca:	4618      	mov	r0, r3
 80165cc:	3714      	adds	r7, #20
 80165ce:	46bd      	mov	sp, r7
 80165d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d4:	4770      	bx	lr
	...

080165d8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80165d8:	b580      	push	{r7, lr}
 80165da:	b084      	sub	sp, #16
 80165dc:	af00      	add	r7, sp, #0
 80165de:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d016      	beq.n	8016614 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80165e6:	f00b fcf7 	bl	8021fd8 <sys_arch_protect>
 80165ea:	60f8      	str	r0, [r7, #12]
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	7b9b      	ldrb	r3, [r3, #14]
 80165f0:	3301      	adds	r3, #1
 80165f2:	b2da      	uxtb	r2, r3
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	739a      	strb	r2, [r3, #14]
 80165f8:	68f8      	ldr	r0, [r7, #12]
 80165fa:	f00b fcfb 	bl	8021ff4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	7b9b      	ldrb	r3, [r3, #14]
 8016602:	2b00      	cmp	r3, #0
 8016604:	d106      	bne.n	8016614 <pbuf_ref+0x3c>
 8016606:	4b05      	ldr	r3, [pc, #20]	; (801661c <pbuf_ref+0x44>)
 8016608:	f240 3242 	movw	r2, #834	; 0x342
 801660c:	4904      	ldr	r1, [pc, #16]	; (8016620 <pbuf_ref+0x48>)
 801660e:	4805      	ldr	r0, [pc, #20]	; (8016624 <pbuf_ref+0x4c>)
 8016610:	f00d fce2 	bl	8023fd8 <iprintf>
  }
}
 8016614:	bf00      	nop
 8016616:	3710      	adds	r7, #16
 8016618:	46bd      	mov	sp, r7
 801661a:	bd80      	pop	{r7, pc}
 801661c:	0802851c 	.word	0x0802851c
 8016620:	080286fc 	.word	0x080286fc
 8016624:	0802857c 	.word	0x0802857c

08016628 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8016628:	b580      	push	{r7, lr}
 801662a:	b084      	sub	sp, #16
 801662c:	af00      	add	r7, sp, #0
 801662e:	6078      	str	r0, [r7, #4]
 8016630:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d002      	beq.n	801663e <pbuf_cat+0x16>
 8016638:	683b      	ldr	r3, [r7, #0]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d107      	bne.n	801664e <pbuf_cat+0x26>
 801663e:	4b20      	ldr	r3, [pc, #128]	; (80166c0 <pbuf_cat+0x98>)
 8016640:	f240 3259 	movw	r2, #857	; 0x359
 8016644:	491f      	ldr	r1, [pc, #124]	; (80166c4 <pbuf_cat+0x9c>)
 8016646:	4820      	ldr	r0, [pc, #128]	; (80166c8 <pbuf_cat+0xa0>)
 8016648:	f00d fcc6 	bl	8023fd8 <iprintf>
 801664c:	e034      	b.n	80166b8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	60fb      	str	r3, [r7, #12]
 8016652:	e00a      	b.n	801666a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	891a      	ldrh	r2, [r3, #8]
 8016658:	683b      	ldr	r3, [r7, #0]
 801665a:	891b      	ldrh	r3, [r3, #8]
 801665c:	4413      	add	r3, r2
 801665e:	b29a      	uxth	r2, r3
 8016660:	68fb      	ldr	r3, [r7, #12]
 8016662:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	60fb      	str	r3, [r7, #12]
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d1f0      	bne.n	8016654 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	891a      	ldrh	r2, [r3, #8]
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	895b      	ldrh	r3, [r3, #10]
 801667a:	429a      	cmp	r2, r3
 801667c:	d006      	beq.n	801668c <pbuf_cat+0x64>
 801667e:	4b10      	ldr	r3, [pc, #64]	; (80166c0 <pbuf_cat+0x98>)
 8016680:	f240 3262 	movw	r2, #866	; 0x362
 8016684:	4911      	ldr	r1, [pc, #68]	; (80166cc <pbuf_cat+0xa4>)
 8016686:	4810      	ldr	r0, [pc, #64]	; (80166c8 <pbuf_cat+0xa0>)
 8016688:	f00d fca6 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	2b00      	cmp	r3, #0
 8016692:	d006      	beq.n	80166a2 <pbuf_cat+0x7a>
 8016694:	4b0a      	ldr	r3, [pc, #40]	; (80166c0 <pbuf_cat+0x98>)
 8016696:	f240 3263 	movw	r2, #867	; 0x363
 801669a:	490d      	ldr	r1, [pc, #52]	; (80166d0 <pbuf_cat+0xa8>)
 801669c:	480a      	ldr	r0, [pc, #40]	; (80166c8 <pbuf_cat+0xa0>)
 801669e:	f00d fc9b 	bl	8023fd8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	891a      	ldrh	r2, [r3, #8]
 80166a6:	683b      	ldr	r3, [r7, #0]
 80166a8:	891b      	ldrh	r3, [r3, #8]
 80166aa:	4413      	add	r3, r2
 80166ac:	b29a      	uxth	r2, r3
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80166b2:	68fb      	ldr	r3, [r7, #12]
 80166b4:	683a      	ldr	r2, [r7, #0]
 80166b6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80166b8:	3710      	adds	r7, #16
 80166ba:	46bd      	mov	sp, r7
 80166bc:	bd80      	pop	{r7, pc}
 80166be:	bf00      	nop
 80166c0:	0802851c 	.word	0x0802851c
 80166c4:	08028710 	.word	0x08028710
 80166c8:	0802857c 	.word	0x0802857c
 80166cc:	08028748 	.word	0x08028748
 80166d0:	08028778 	.word	0x08028778

080166d4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b082      	sub	sp, #8
 80166d8:	af00      	add	r7, sp, #0
 80166da:	6078      	str	r0, [r7, #4]
 80166dc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80166de:	6839      	ldr	r1, [r7, #0]
 80166e0:	6878      	ldr	r0, [r7, #4]
 80166e2:	f7ff ffa1 	bl	8016628 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80166e6:	6838      	ldr	r0, [r7, #0]
 80166e8:	f7ff ff76 	bl	80165d8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80166ec:	bf00      	nop
 80166ee:	3708      	adds	r7, #8
 80166f0:	46bd      	mov	sp, r7
 80166f2:	bd80      	pop	{r7, pc}

080166f4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80166f4:	b580      	push	{r7, lr}
 80166f6:	b086      	sub	sp, #24
 80166f8:	af00      	add	r7, sp, #0
 80166fa:	6078      	str	r0, [r7, #4]
 80166fc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80166fe:	2300      	movs	r3, #0
 8016700:	617b      	str	r3, [r7, #20]
 8016702:	2300      	movs	r3, #0
 8016704:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d008      	beq.n	801671e <pbuf_copy+0x2a>
 801670c:	683b      	ldr	r3, [r7, #0]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d005      	beq.n	801671e <pbuf_copy+0x2a>
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	891a      	ldrh	r2, [r3, #8]
 8016716:	683b      	ldr	r3, [r7, #0]
 8016718:	891b      	ldrh	r3, [r3, #8]
 801671a:	429a      	cmp	r2, r3
 801671c:	d209      	bcs.n	8016732 <pbuf_copy+0x3e>
 801671e:	4b57      	ldr	r3, [pc, #348]	; (801687c <pbuf_copy+0x188>)
 8016720:	f240 32c9 	movw	r2, #969	; 0x3c9
 8016724:	4956      	ldr	r1, [pc, #344]	; (8016880 <pbuf_copy+0x18c>)
 8016726:	4857      	ldr	r0, [pc, #348]	; (8016884 <pbuf_copy+0x190>)
 8016728:	f00d fc56 	bl	8023fd8 <iprintf>
 801672c:	f06f 030f 	mvn.w	r3, #15
 8016730:	e09f      	b.n	8016872 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	895b      	ldrh	r3, [r3, #10]
 8016736:	461a      	mov	r2, r3
 8016738:	697b      	ldr	r3, [r7, #20]
 801673a:	1ad2      	subs	r2, r2, r3
 801673c:	683b      	ldr	r3, [r7, #0]
 801673e:	895b      	ldrh	r3, [r3, #10]
 8016740:	4619      	mov	r1, r3
 8016742:	693b      	ldr	r3, [r7, #16]
 8016744:	1acb      	subs	r3, r1, r3
 8016746:	429a      	cmp	r2, r3
 8016748:	d306      	bcc.n	8016758 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801674a:	683b      	ldr	r3, [r7, #0]
 801674c:	895b      	ldrh	r3, [r3, #10]
 801674e:	461a      	mov	r2, r3
 8016750:	693b      	ldr	r3, [r7, #16]
 8016752:	1ad3      	subs	r3, r2, r3
 8016754:	60fb      	str	r3, [r7, #12]
 8016756:	e005      	b.n	8016764 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	895b      	ldrh	r3, [r3, #10]
 801675c:	461a      	mov	r2, r3
 801675e:	697b      	ldr	r3, [r7, #20]
 8016760:	1ad3      	subs	r3, r2, r3
 8016762:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	685a      	ldr	r2, [r3, #4]
 8016768:	697b      	ldr	r3, [r7, #20]
 801676a:	18d0      	adds	r0, r2, r3
 801676c:	683b      	ldr	r3, [r7, #0]
 801676e:	685a      	ldr	r2, [r3, #4]
 8016770:	693b      	ldr	r3, [r7, #16]
 8016772:	4413      	add	r3, r2
 8016774:	68fa      	ldr	r2, [r7, #12]
 8016776:	4619      	mov	r1, r3
 8016778:	f00d ff17 	bl	80245aa <memcpy>
    offset_to += len;
 801677c:	697a      	ldr	r2, [r7, #20]
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	4413      	add	r3, r2
 8016782:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8016784:	693a      	ldr	r2, [r7, #16]
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	4413      	add	r3, r2
 801678a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	895b      	ldrh	r3, [r3, #10]
 8016790:	461a      	mov	r2, r3
 8016792:	697b      	ldr	r3, [r7, #20]
 8016794:	4293      	cmp	r3, r2
 8016796:	d906      	bls.n	80167a6 <pbuf_copy+0xb2>
 8016798:	4b38      	ldr	r3, [pc, #224]	; (801687c <pbuf_copy+0x188>)
 801679a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801679e:	493a      	ldr	r1, [pc, #232]	; (8016888 <pbuf_copy+0x194>)
 80167a0:	4838      	ldr	r0, [pc, #224]	; (8016884 <pbuf_copy+0x190>)
 80167a2:	f00d fc19 	bl	8023fd8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80167a6:	683b      	ldr	r3, [r7, #0]
 80167a8:	895b      	ldrh	r3, [r3, #10]
 80167aa:	461a      	mov	r2, r3
 80167ac:	693b      	ldr	r3, [r7, #16]
 80167ae:	4293      	cmp	r3, r2
 80167b0:	d906      	bls.n	80167c0 <pbuf_copy+0xcc>
 80167b2:	4b32      	ldr	r3, [pc, #200]	; (801687c <pbuf_copy+0x188>)
 80167b4:	f240 32da 	movw	r2, #986	; 0x3da
 80167b8:	4934      	ldr	r1, [pc, #208]	; (801688c <pbuf_copy+0x198>)
 80167ba:	4832      	ldr	r0, [pc, #200]	; (8016884 <pbuf_copy+0x190>)
 80167bc:	f00d fc0c 	bl	8023fd8 <iprintf>
    if (offset_from >= p_from->len) {
 80167c0:	683b      	ldr	r3, [r7, #0]
 80167c2:	895b      	ldrh	r3, [r3, #10]
 80167c4:	461a      	mov	r2, r3
 80167c6:	693b      	ldr	r3, [r7, #16]
 80167c8:	4293      	cmp	r3, r2
 80167ca:	d304      	bcc.n	80167d6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80167cc:	2300      	movs	r3, #0
 80167ce:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80167d0:	683b      	ldr	r3, [r7, #0]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	895b      	ldrh	r3, [r3, #10]
 80167da:	461a      	mov	r2, r3
 80167dc:	697b      	ldr	r3, [r7, #20]
 80167de:	4293      	cmp	r3, r2
 80167e0:	d114      	bne.n	801680c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80167e2:	2300      	movs	r3, #0
 80167e4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d10c      	bne.n	801680c <pbuf_copy+0x118>
 80167f2:	683b      	ldr	r3, [r7, #0]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d009      	beq.n	801680c <pbuf_copy+0x118>
 80167f8:	4b20      	ldr	r3, [pc, #128]	; (801687c <pbuf_copy+0x188>)
 80167fa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80167fe:	4924      	ldr	r1, [pc, #144]	; (8016890 <pbuf_copy+0x19c>)
 8016800:	4820      	ldr	r0, [pc, #128]	; (8016884 <pbuf_copy+0x190>)
 8016802:	f00d fbe9 	bl	8023fd8 <iprintf>
 8016806:	f06f 030f 	mvn.w	r3, #15
 801680a:	e032      	b.n	8016872 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801680c:	683b      	ldr	r3, [r7, #0]
 801680e:	2b00      	cmp	r3, #0
 8016810:	d013      	beq.n	801683a <pbuf_copy+0x146>
 8016812:	683b      	ldr	r3, [r7, #0]
 8016814:	895a      	ldrh	r2, [r3, #10]
 8016816:	683b      	ldr	r3, [r7, #0]
 8016818:	891b      	ldrh	r3, [r3, #8]
 801681a:	429a      	cmp	r2, r3
 801681c:	d10d      	bne.n	801683a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801681e:	683b      	ldr	r3, [r7, #0]
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	2b00      	cmp	r3, #0
 8016824:	d009      	beq.n	801683a <pbuf_copy+0x146>
 8016826:	4b15      	ldr	r3, [pc, #84]	; (801687c <pbuf_copy+0x188>)
 8016828:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801682c:	4919      	ldr	r1, [pc, #100]	; (8016894 <pbuf_copy+0x1a0>)
 801682e:	4815      	ldr	r0, [pc, #84]	; (8016884 <pbuf_copy+0x190>)
 8016830:	f00d fbd2 	bl	8023fd8 <iprintf>
 8016834:	f06f 0305 	mvn.w	r3, #5
 8016838:	e01b      	b.n	8016872 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d013      	beq.n	8016868 <pbuf_copy+0x174>
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	895a      	ldrh	r2, [r3, #10]
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	891b      	ldrh	r3, [r3, #8]
 8016848:	429a      	cmp	r2, r3
 801684a:	d10d      	bne.n	8016868 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	2b00      	cmp	r3, #0
 8016852:	d009      	beq.n	8016868 <pbuf_copy+0x174>
 8016854:	4b09      	ldr	r3, [pc, #36]	; (801687c <pbuf_copy+0x188>)
 8016856:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801685a:	490e      	ldr	r1, [pc, #56]	; (8016894 <pbuf_copy+0x1a0>)
 801685c:	4809      	ldr	r0, [pc, #36]	; (8016884 <pbuf_copy+0x190>)
 801685e:	f00d fbbb 	bl	8023fd8 <iprintf>
 8016862:	f06f 0305 	mvn.w	r3, #5
 8016866:	e004      	b.n	8016872 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8016868:	683b      	ldr	r3, [r7, #0]
 801686a:	2b00      	cmp	r3, #0
 801686c:	f47f af61 	bne.w	8016732 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8016870:	2300      	movs	r3, #0
}
 8016872:	4618      	mov	r0, r3
 8016874:	3718      	adds	r7, #24
 8016876:	46bd      	mov	sp, r7
 8016878:	bd80      	pop	{r7, pc}
 801687a:	bf00      	nop
 801687c:	0802851c 	.word	0x0802851c
 8016880:	080287c4 	.word	0x080287c4
 8016884:	0802857c 	.word	0x0802857c
 8016888:	080287f4 	.word	0x080287f4
 801688c:	0802880c 	.word	0x0802880c
 8016890:	08028828 	.word	0x08028828
 8016894:	08028838 	.word	0x08028838

08016898 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8016898:	b580      	push	{r7, lr}
 801689a:	b088      	sub	sp, #32
 801689c:	af00      	add	r7, sp, #0
 801689e:	60f8      	str	r0, [r7, #12]
 80168a0:	60b9      	str	r1, [r7, #8]
 80168a2:	4611      	mov	r1, r2
 80168a4:	461a      	mov	r2, r3
 80168a6:	460b      	mov	r3, r1
 80168a8:	80fb      	strh	r3, [r7, #6]
 80168aa:	4613      	mov	r3, r2
 80168ac:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80168ae:	2300      	movs	r3, #0
 80168b0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80168b2:	2300      	movs	r3, #0
 80168b4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d108      	bne.n	80168ce <pbuf_copy_partial+0x36>
 80168bc:	4b2b      	ldr	r3, [pc, #172]	; (801696c <pbuf_copy_partial+0xd4>)
 80168be:	f240 420a 	movw	r2, #1034	; 0x40a
 80168c2:	492b      	ldr	r1, [pc, #172]	; (8016970 <pbuf_copy_partial+0xd8>)
 80168c4:	482b      	ldr	r0, [pc, #172]	; (8016974 <pbuf_copy_partial+0xdc>)
 80168c6:	f00d fb87 	bl	8023fd8 <iprintf>
 80168ca:	2300      	movs	r3, #0
 80168cc:	e04a      	b.n	8016964 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80168ce:	68bb      	ldr	r3, [r7, #8]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d108      	bne.n	80168e6 <pbuf_copy_partial+0x4e>
 80168d4:	4b25      	ldr	r3, [pc, #148]	; (801696c <pbuf_copy_partial+0xd4>)
 80168d6:	f240 420b 	movw	r2, #1035	; 0x40b
 80168da:	4927      	ldr	r1, [pc, #156]	; (8016978 <pbuf_copy_partial+0xe0>)
 80168dc:	4825      	ldr	r0, [pc, #148]	; (8016974 <pbuf_copy_partial+0xdc>)
 80168de:	f00d fb7b 	bl	8023fd8 <iprintf>
 80168e2:	2300      	movs	r3, #0
 80168e4:	e03e      	b.n	8016964 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	61fb      	str	r3, [r7, #28]
 80168ea:	e034      	b.n	8016956 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80168ec:	88bb      	ldrh	r3, [r7, #4]
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d00a      	beq.n	8016908 <pbuf_copy_partial+0x70>
 80168f2:	69fb      	ldr	r3, [r7, #28]
 80168f4:	895b      	ldrh	r3, [r3, #10]
 80168f6:	88ba      	ldrh	r2, [r7, #4]
 80168f8:	429a      	cmp	r2, r3
 80168fa:	d305      	bcc.n	8016908 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80168fc:	69fb      	ldr	r3, [r7, #28]
 80168fe:	895b      	ldrh	r3, [r3, #10]
 8016900:	88ba      	ldrh	r2, [r7, #4]
 8016902:	1ad3      	subs	r3, r2, r3
 8016904:	80bb      	strh	r3, [r7, #4]
 8016906:	e023      	b.n	8016950 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8016908:	69fb      	ldr	r3, [r7, #28]
 801690a:	895a      	ldrh	r2, [r3, #10]
 801690c:	88bb      	ldrh	r3, [r7, #4]
 801690e:	1ad3      	subs	r3, r2, r3
 8016910:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8016912:	8b3a      	ldrh	r2, [r7, #24]
 8016914:	88fb      	ldrh	r3, [r7, #6]
 8016916:	429a      	cmp	r2, r3
 8016918:	d901      	bls.n	801691e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801691a:	88fb      	ldrh	r3, [r7, #6]
 801691c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801691e:	8b7b      	ldrh	r3, [r7, #26]
 8016920:	68ba      	ldr	r2, [r7, #8]
 8016922:	18d0      	adds	r0, r2, r3
 8016924:	69fb      	ldr	r3, [r7, #28]
 8016926:	685a      	ldr	r2, [r3, #4]
 8016928:	88bb      	ldrh	r3, [r7, #4]
 801692a:	4413      	add	r3, r2
 801692c:	8b3a      	ldrh	r2, [r7, #24]
 801692e:	4619      	mov	r1, r3
 8016930:	f00d fe3b 	bl	80245aa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8016934:	8afa      	ldrh	r2, [r7, #22]
 8016936:	8b3b      	ldrh	r3, [r7, #24]
 8016938:	4413      	add	r3, r2
 801693a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801693c:	8b7a      	ldrh	r2, [r7, #26]
 801693e:	8b3b      	ldrh	r3, [r7, #24]
 8016940:	4413      	add	r3, r2
 8016942:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8016944:	88fa      	ldrh	r2, [r7, #6]
 8016946:	8b3b      	ldrh	r3, [r7, #24]
 8016948:	1ad3      	subs	r3, r2, r3
 801694a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801694c:	2300      	movs	r3, #0
 801694e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016950:	69fb      	ldr	r3, [r7, #28]
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	61fb      	str	r3, [r7, #28]
 8016956:	88fb      	ldrh	r3, [r7, #6]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d002      	beq.n	8016962 <pbuf_copy_partial+0xca>
 801695c:	69fb      	ldr	r3, [r7, #28]
 801695e:	2b00      	cmp	r3, #0
 8016960:	d1c4      	bne.n	80168ec <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8016962:	8afb      	ldrh	r3, [r7, #22]
}
 8016964:	4618      	mov	r0, r3
 8016966:	3720      	adds	r7, #32
 8016968:	46bd      	mov	sp, r7
 801696a:	bd80      	pop	{r7, pc}
 801696c:	0802851c 	.word	0x0802851c
 8016970:	08028864 	.word	0x08028864
 8016974:	0802857c 	.word	0x0802857c
 8016978:	08028884 	.word	0x08028884

0801697c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801697c:	b580      	push	{r7, lr}
 801697e:	b084      	sub	sp, #16
 8016980:	af00      	add	r7, sp, #0
 8016982:	4603      	mov	r3, r0
 8016984:	603a      	str	r2, [r7, #0]
 8016986:	71fb      	strb	r3, [r7, #7]
 8016988:	460b      	mov	r3, r1
 801698a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801698c:	683b      	ldr	r3, [r7, #0]
 801698e:	8919      	ldrh	r1, [r3, #8]
 8016990:	88ba      	ldrh	r2, [r7, #4]
 8016992:	79fb      	ldrb	r3, [r7, #7]
 8016994:	4618      	mov	r0, r3
 8016996:	f7ff fa95 	bl	8015ec4 <pbuf_alloc>
 801699a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d101      	bne.n	80169a6 <pbuf_clone+0x2a>
    return NULL;
 80169a2:	2300      	movs	r3, #0
 80169a4:	e011      	b.n	80169ca <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80169a6:	6839      	ldr	r1, [r7, #0]
 80169a8:	68f8      	ldr	r0, [r7, #12]
 80169aa:	f7ff fea3 	bl	80166f4 <pbuf_copy>
 80169ae:	4603      	mov	r3, r0
 80169b0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80169b2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d006      	beq.n	80169c8 <pbuf_clone+0x4c>
 80169ba:	4b06      	ldr	r3, [pc, #24]	; (80169d4 <pbuf_clone+0x58>)
 80169bc:	f240 5224 	movw	r2, #1316	; 0x524
 80169c0:	4905      	ldr	r1, [pc, #20]	; (80169d8 <pbuf_clone+0x5c>)
 80169c2:	4806      	ldr	r0, [pc, #24]	; (80169dc <pbuf_clone+0x60>)
 80169c4:	f00d fb08 	bl	8023fd8 <iprintf>
  return q;
 80169c8:	68fb      	ldr	r3, [r7, #12]
}
 80169ca:	4618      	mov	r0, r3
 80169cc:	3710      	adds	r7, #16
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bd80      	pop	{r7, pc}
 80169d2:	bf00      	nop
 80169d4:	0802851c 	.word	0x0802851c
 80169d8:	08028990 	.word	0x08028990
 80169dc:	0802857c 	.word	0x0802857c

080169e0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80169e0:	b580      	push	{r7, lr}
 80169e2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80169e4:	f00c fd80 	bl	80234e8 <rand>
 80169e8:	4603      	mov	r3, r0
 80169ea:	b29b      	uxth	r3, r3
 80169ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80169f0:	b29b      	uxth	r3, r3
 80169f2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80169f6:	b29a      	uxth	r2, r3
 80169f8:	4b01      	ldr	r3, [pc, #4]	; (8016a00 <tcp_init+0x20>)
 80169fa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80169fc:	bf00      	nop
 80169fe:	bd80      	pop	{r7, pc}
 8016a00:	20000028 	.word	0x20000028

08016a04 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b082      	sub	sp, #8
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	7d1b      	ldrb	r3, [r3, #20]
 8016a10:	2b01      	cmp	r3, #1
 8016a12:	d105      	bne.n	8016a20 <tcp_free+0x1c>
 8016a14:	4b06      	ldr	r3, [pc, #24]	; (8016a30 <tcp_free+0x2c>)
 8016a16:	22d4      	movs	r2, #212	; 0xd4
 8016a18:	4906      	ldr	r1, [pc, #24]	; (8016a34 <tcp_free+0x30>)
 8016a1a:	4807      	ldr	r0, [pc, #28]	; (8016a38 <tcp_free+0x34>)
 8016a1c:	f00d fadc 	bl	8023fd8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8016a20:	6879      	ldr	r1, [r7, #4]
 8016a22:	2001      	movs	r0, #1
 8016a24:	f7fe fe82 	bl	801572c <memp_free>
}
 8016a28:	bf00      	nop
 8016a2a:	3708      	adds	r7, #8
 8016a2c:	46bd      	mov	sp, r7
 8016a2e:	bd80      	pop	{r7, pc}
 8016a30:	08028a1c 	.word	0x08028a1c
 8016a34:	08028a4c 	.word	0x08028a4c
 8016a38:	08028a60 	.word	0x08028a60

08016a3c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8016a3c:	b580      	push	{r7, lr}
 8016a3e:	b082      	sub	sp, #8
 8016a40:	af00      	add	r7, sp, #0
 8016a42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	7d1b      	ldrb	r3, [r3, #20]
 8016a48:	2b01      	cmp	r3, #1
 8016a4a:	d105      	bne.n	8016a58 <tcp_free_listen+0x1c>
 8016a4c:	4b06      	ldr	r3, [pc, #24]	; (8016a68 <tcp_free_listen+0x2c>)
 8016a4e:	22df      	movs	r2, #223	; 0xdf
 8016a50:	4906      	ldr	r1, [pc, #24]	; (8016a6c <tcp_free_listen+0x30>)
 8016a52:	4807      	ldr	r0, [pc, #28]	; (8016a70 <tcp_free_listen+0x34>)
 8016a54:	f00d fac0 	bl	8023fd8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8016a58:	6879      	ldr	r1, [r7, #4]
 8016a5a:	2002      	movs	r0, #2
 8016a5c:	f7fe fe66 	bl	801572c <memp_free>
}
 8016a60:	bf00      	nop
 8016a62:	3708      	adds	r7, #8
 8016a64:	46bd      	mov	sp, r7
 8016a66:	bd80      	pop	{r7, pc}
 8016a68:	08028a1c 	.word	0x08028a1c
 8016a6c:	08028a88 	.word	0x08028a88
 8016a70:	08028a60 	.word	0x08028a60

08016a74 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8016a74:	b580      	push	{r7, lr}
 8016a76:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8016a78:	f001 f8dc 	bl	8017c34 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8016a7c:	4b07      	ldr	r3, [pc, #28]	; (8016a9c <tcp_tmr+0x28>)
 8016a7e:	781b      	ldrb	r3, [r3, #0]
 8016a80:	3301      	adds	r3, #1
 8016a82:	b2da      	uxtb	r2, r3
 8016a84:	4b05      	ldr	r3, [pc, #20]	; (8016a9c <tcp_tmr+0x28>)
 8016a86:	701a      	strb	r2, [r3, #0]
 8016a88:	4b04      	ldr	r3, [pc, #16]	; (8016a9c <tcp_tmr+0x28>)
 8016a8a:	781b      	ldrb	r3, [r3, #0]
 8016a8c:	f003 0301 	and.w	r3, r3, #1
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d001      	beq.n	8016a98 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8016a94:	f000 fd8c 	bl	80175b0 <tcp_slowtmr>
  }
}
 8016a98:	bf00      	nop
 8016a9a:	bd80      	pop	{r7, pc}
 8016a9c:	20013245 	.word	0x20013245

08016aa0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	b084      	sub	sp, #16
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	6078      	str	r0, [r7, #4]
 8016aa8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8016aaa:	683b      	ldr	r3, [r7, #0]
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d105      	bne.n	8016abc <tcp_remove_listener+0x1c>
 8016ab0:	4b0d      	ldr	r3, [pc, #52]	; (8016ae8 <tcp_remove_listener+0x48>)
 8016ab2:	22ff      	movs	r2, #255	; 0xff
 8016ab4:	490d      	ldr	r1, [pc, #52]	; (8016aec <tcp_remove_listener+0x4c>)
 8016ab6:	480e      	ldr	r0, [pc, #56]	; (8016af0 <tcp_remove_listener+0x50>)
 8016ab8:	f00d fa8e 	bl	8023fd8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	60fb      	str	r3, [r7, #12]
 8016ac0:	e00a      	b.n	8016ad8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016ac6:	683a      	ldr	r2, [r7, #0]
 8016ac8:	429a      	cmp	r2, r3
 8016aca:	d102      	bne.n	8016ad2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	2200      	movs	r2, #0
 8016ad0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	68db      	ldr	r3, [r3, #12]
 8016ad6:	60fb      	str	r3, [r7, #12]
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d1f1      	bne.n	8016ac2 <tcp_remove_listener+0x22>
    }
  }
}
 8016ade:	bf00      	nop
 8016ae0:	bf00      	nop
 8016ae2:	3710      	adds	r7, #16
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	bd80      	pop	{r7, pc}
 8016ae8:	08028a1c 	.word	0x08028a1c
 8016aec:	08028aa4 	.word	0x08028aa4
 8016af0:	08028a60 	.word	0x08028a60

08016af4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b084      	sub	sp, #16
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d106      	bne.n	8016b10 <tcp_listen_closed+0x1c>
 8016b02:	4b14      	ldr	r3, [pc, #80]	; (8016b54 <tcp_listen_closed+0x60>)
 8016b04:	f240 1211 	movw	r2, #273	; 0x111
 8016b08:	4913      	ldr	r1, [pc, #76]	; (8016b58 <tcp_listen_closed+0x64>)
 8016b0a:	4814      	ldr	r0, [pc, #80]	; (8016b5c <tcp_listen_closed+0x68>)
 8016b0c:	f00d fa64 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	7d1b      	ldrb	r3, [r3, #20]
 8016b14:	2b01      	cmp	r3, #1
 8016b16:	d006      	beq.n	8016b26 <tcp_listen_closed+0x32>
 8016b18:	4b0e      	ldr	r3, [pc, #56]	; (8016b54 <tcp_listen_closed+0x60>)
 8016b1a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8016b1e:	4910      	ldr	r1, [pc, #64]	; (8016b60 <tcp_listen_closed+0x6c>)
 8016b20:	480e      	ldr	r0, [pc, #56]	; (8016b5c <tcp_listen_closed+0x68>)
 8016b22:	f00d fa59 	bl	8023fd8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8016b26:	2301      	movs	r3, #1
 8016b28:	60fb      	str	r3, [r7, #12]
 8016b2a:	e00b      	b.n	8016b44 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8016b2c:	4a0d      	ldr	r2, [pc, #52]	; (8016b64 <tcp_listen_closed+0x70>)
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	6879      	ldr	r1, [r7, #4]
 8016b38:	4618      	mov	r0, r3
 8016b3a:	f7ff ffb1 	bl	8016aa0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	3301      	adds	r3, #1
 8016b42:	60fb      	str	r3, [r7, #12]
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	2b03      	cmp	r3, #3
 8016b48:	d9f0      	bls.n	8016b2c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8016b4a:	bf00      	nop
 8016b4c:	bf00      	nop
 8016b4e:	3710      	adds	r7, #16
 8016b50:	46bd      	mov	sp, r7
 8016b52:	bd80      	pop	{r7, pc}
 8016b54:	08028a1c 	.word	0x08028a1c
 8016b58:	08028acc 	.word	0x08028acc
 8016b5c:	08028a60 	.word	0x08028a60
 8016b60:	08028ad8 	.word	0x08028ad8
 8016b64:	0802af38 	.word	0x0802af38

08016b68 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8016b68:	b5b0      	push	{r4, r5, r7, lr}
 8016b6a:	b088      	sub	sp, #32
 8016b6c:	af04      	add	r7, sp, #16
 8016b6e:	6078      	str	r0, [r7, #4]
 8016b70:	460b      	mov	r3, r1
 8016b72:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d106      	bne.n	8016b88 <tcp_close_shutdown+0x20>
 8016b7a:	4b63      	ldr	r3, [pc, #396]	; (8016d08 <tcp_close_shutdown+0x1a0>)
 8016b7c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8016b80:	4962      	ldr	r1, [pc, #392]	; (8016d0c <tcp_close_shutdown+0x1a4>)
 8016b82:	4863      	ldr	r0, [pc, #396]	; (8016d10 <tcp_close_shutdown+0x1a8>)
 8016b84:	f00d fa28 	bl	8023fd8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8016b88:	78fb      	ldrb	r3, [r7, #3]
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d066      	beq.n	8016c5c <tcp_close_shutdown+0xf4>
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	7d1b      	ldrb	r3, [r3, #20]
 8016b92:	2b04      	cmp	r3, #4
 8016b94:	d003      	beq.n	8016b9e <tcp_close_shutdown+0x36>
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	7d1b      	ldrb	r3, [r3, #20]
 8016b9a:	2b07      	cmp	r3, #7
 8016b9c:	d15e      	bne.n	8016c5c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d104      	bne.n	8016bb0 <tcp_close_shutdown+0x48>
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016baa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016bae:	d055      	beq.n	8016c5c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	8b5b      	ldrh	r3, [r3, #26]
 8016bb4:	f003 0310 	and.w	r3, r3, #16
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d106      	bne.n	8016bca <tcp_close_shutdown+0x62>
 8016bbc:	4b52      	ldr	r3, [pc, #328]	; (8016d08 <tcp_close_shutdown+0x1a0>)
 8016bbe:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8016bc2:	4954      	ldr	r1, [pc, #336]	; (8016d14 <tcp_close_shutdown+0x1ac>)
 8016bc4:	4852      	ldr	r0, [pc, #328]	; (8016d10 <tcp_close_shutdown+0x1a8>)
 8016bc6:	f00d fa07 	bl	8023fd8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016bd2:	687d      	ldr	r5, [r7, #4]
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	3304      	adds	r3, #4
 8016bd8:	687a      	ldr	r2, [r7, #4]
 8016bda:	8ad2      	ldrh	r2, [r2, #22]
 8016bdc:	6879      	ldr	r1, [r7, #4]
 8016bde:	8b09      	ldrh	r1, [r1, #24]
 8016be0:	9102      	str	r1, [sp, #8]
 8016be2:	9201      	str	r2, [sp, #4]
 8016be4:	9300      	str	r3, [sp, #0]
 8016be6:	462b      	mov	r3, r5
 8016be8:	4622      	mov	r2, r4
 8016bea:	4601      	mov	r1, r0
 8016bec:	6878      	ldr	r0, [r7, #4]
 8016bee:	f005 fe09 	bl	801c804 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8016bf2:	6878      	ldr	r0, [r7, #4]
 8016bf4:	f001 fbd8 	bl	80183a8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8016bf8:	4b47      	ldr	r3, [pc, #284]	; (8016d18 <tcp_close_shutdown+0x1b0>)
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	687a      	ldr	r2, [r7, #4]
 8016bfe:	429a      	cmp	r2, r3
 8016c00:	d105      	bne.n	8016c0e <tcp_close_shutdown+0xa6>
 8016c02:	4b45      	ldr	r3, [pc, #276]	; (8016d18 <tcp_close_shutdown+0x1b0>)
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	68db      	ldr	r3, [r3, #12]
 8016c08:	4a43      	ldr	r2, [pc, #268]	; (8016d18 <tcp_close_shutdown+0x1b0>)
 8016c0a:	6013      	str	r3, [r2, #0]
 8016c0c:	e013      	b.n	8016c36 <tcp_close_shutdown+0xce>
 8016c0e:	4b42      	ldr	r3, [pc, #264]	; (8016d18 <tcp_close_shutdown+0x1b0>)
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	60fb      	str	r3, [r7, #12]
 8016c14:	e00c      	b.n	8016c30 <tcp_close_shutdown+0xc8>
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	68db      	ldr	r3, [r3, #12]
 8016c1a:	687a      	ldr	r2, [r7, #4]
 8016c1c:	429a      	cmp	r2, r3
 8016c1e:	d104      	bne.n	8016c2a <tcp_close_shutdown+0xc2>
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	68da      	ldr	r2, [r3, #12]
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	60da      	str	r2, [r3, #12]
 8016c28:	e005      	b.n	8016c36 <tcp_close_shutdown+0xce>
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	68db      	ldr	r3, [r3, #12]
 8016c2e:	60fb      	str	r3, [r7, #12]
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d1ef      	bne.n	8016c16 <tcp_close_shutdown+0xae>
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	2200      	movs	r2, #0
 8016c3a:	60da      	str	r2, [r3, #12]
 8016c3c:	4b37      	ldr	r3, [pc, #220]	; (8016d1c <tcp_close_shutdown+0x1b4>)
 8016c3e:	2201      	movs	r2, #1
 8016c40:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8016c42:	4b37      	ldr	r3, [pc, #220]	; (8016d20 <tcp_close_shutdown+0x1b8>)
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	687a      	ldr	r2, [r7, #4]
 8016c48:	429a      	cmp	r2, r3
 8016c4a:	d102      	bne.n	8016c52 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8016c4c:	f004 f87e 	bl	801ad4c <tcp_trigger_input_pcb_close>
 8016c50:	e002      	b.n	8016c58 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8016c52:	6878      	ldr	r0, [r7, #4]
 8016c54:	f7ff fed6 	bl	8016a04 <tcp_free>
      }
      return ERR_OK;
 8016c58:	2300      	movs	r3, #0
 8016c5a:	e050      	b.n	8016cfe <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	7d1b      	ldrb	r3, [r3, #20]
 8016c60:	2b02      	cmp	r3, #2
 8016c62:	d03b      	beq.n	8016cdc <tcp_close_shutdown+0x174>
 8016c64:	2b02      	cmp	r3, #2
 8016c66:	dc44      	bgt.n	8016cf2 <tcp_close_shutdown+0x18a>
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d002      	beq.n	8016c72 <tcp_close_shutdown+0x10a>
 8016c6c:	2b01      	cmp	r3, #1
 8016c6e:	d02a      	beq.n	8016cc6 <tcp_close_shutdown+0x15e>
 8016c70:	e03f      	b.n	8016cf2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	8adb      	ldrh	r3, [r3, #22]
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d021      	beq.n	8016cbe <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8016c7a:	4b2a      	ldr	r3, [pc, #168]	; (8016d24 <tcp_close_shutdown+0x1bc>)
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	687a      	ldr	r2, [r7, #4]
 8016c80:	429a      	cmp	r2, r3
 8016c82:	d105      	bne.n	8016c90 <tcp_close_shutdown+0x128>
 8016c84:	4b27      	ldr	r3, [pc, #156]	; (8016d24 <tcp_close_shutdown+0x1bc>)
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	68db      	ldr	r3, [r3, #12]
 8016c8a:	4a26      	ldr	r2, [pc, #152]	; (8016d24 <tcp_close_shutdown+0x1bc>)
 8016c8c:	6013      	str	r3, [r2, #0]
 8016c8e:	e013      	b.n	8016cb8 <tcp_close_shutdown+0x150>
 8016c90:	4b24      	ldr	r3, [pc, #144]	; (8016d24 <tcp_close_shutdown+0x1bc>)
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	60bb      	str	r3, [r7, #8]
 8016c96:	e00c      	b.n	8016cb2 <tcp_close_shutdown+0x14a>
 8016c98:	68bb      	ldr	r3, [r7, #8]
 8016c9a:	68db      	ldr	r3, [r3, #12]
 8016c9c:	687a      	ldr	r2, [r7, #4]
 8016c9e:	429a      	cmp	r2, r3
 8016ca0:	d104      	bne.n	8016cac <tcp_close_shutdown+0x144>
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	68da      	ldr	r2, [r3, #12]
 8016ca6:	68bb      	ldr	r3, [r7, #8]
 8016ca8:	60da      	str	r2, [r3, #12]
 8016caa:	e005      	b.n	8016cb8 <tcp_close_shutdown+0x150>
 8016cac:	68bb      	ldr	r3, [r7, #8]
 8016cae:	68db      	ldr	r3, [r3, #12]
 8016cb0:	60bb      	str	r3, [r7, #8]
 8016cb2:	68bb      	ldr	r3, [r7, #8]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d1ef      	bne.n	8016c98 <tcp_close_shutdown+0x130>
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	2200      	movs	r2, #0
 8016cbc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8016cbe:	6878      	ldr	r0, [r7, #4]
 8016cc0:	f7ff fea0 	bl	8016a04 <tcp_free>
      break;
 8016cc4:	e01a      	b.n	8016cfc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8016cc6:	6878      	ldr	r0, [r7, #4]
 8016cc8:	f7ff ff14 	bl	8016af4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8016ccc:	6879      	ldr	r1, [r7, #4]
 8016cce:	4816      	ldr	r0, [pc, #88]	; (8016d28 <tcp_close_shutdown+0x1c0>)
 8016cd0:	f001 fbba 	bl	8018448 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8016cd4:	6878      	ldr	r0, [r7, #4]
 8016cd6:	f7ff feb1 	bl	8016a3c <tcp_free_listen>
      break;
 8016cda:	e00f      	b.n	8016cfc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016cdc:	6879      	ldr	r1, [r7, #4]
 8016cde:	480e      	ldr	r0, [pc, #56]	; (8016d18 <tcp_close_shutdown+0x1b0>)
 8016ce0:	f001 fbb2 	bl	8018448 <tcp_pcb_remove>
 8016ce4:	4b0d      	ldr	r3, [pc, #52]	; (8016d1c <tcp_close_shutdown+0x1b4>)
 8016ce6:	2201      	movs	r2, #1
 8016ce8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8016cea:	6878      	ldr	r0, [r7, #4]
 8016cec:	f7ff fe8a 	bl	8016a04 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8016cf0:	e004      	b.n	8016cfc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8016cf2:	6878      	ldr	r0, [r7, #4]
 8016cf4:	f000 f81a 	bl	8016d2c <tcp_close_shutdown_fin>
 8016cf8:	4603      	mov	r3, r0
 8016cfa:	e000      	b.n	8016cfe <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8016cfc:	2300      	movs	r3, #0
}
 8016cfe:	4618      	mov	r0, r3
 8016d00:	3710      	adds	r7, #16
 8016d02:	46bd      	mov	sp, r7
 8016d04:	bdb0      	pop	{r4, r5, r7, pc}
 8016d06:	bf00      	nop
 8016d08:	08028a1c 	.word	0x08028a1c
 8016d0c:	08028af0 	.word	0x08028af0
 8016d10:	08028a60 	.word	0x08028a60
 8016d14:	08028b10 	.word	0x08028b10
 8016d18:	2001323c 	.word	0x2001323c
 8016d1c:	20013244 	.word	0x20013244
 8016d20:	2001327c 	.word	0x2001327c
 8016d24:	20013234 	.word	0x20013234
 8016d28:	20013238 	.word	0x20013238

08016d2c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b084      	sub	sp, #16
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d106      	bne.n	8016d48 <tcp_close_shutdown_fin+0x1c>
 8016d3a:	4b2e      	ldr	r3, [pc, #184]	; (8016df4 <tcp_close_shutdown_fin+0xc8>)
 8016d3c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8016d40:	492d      	ldr	r1, [pc, #180]	; (8016df8 <tcp_close_shutdown_fin+0xcc>)
 8016d42:	482e      	ldr	r0, [pc, #184]	; (8016dfc <tcp_close_shutdown_fin+0xd0>)
 8016d44:	f00d f948 	bl	8023fd8 <iprintf>

  switch (pcb->state) {
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	7d1b      	ldrb	r3, [r3, #20]
 8016d4c:	2b07      	cmp	r3, #7
 8016d4e:	d020      	beq.n	8016d92 <tcp_close_shutdown_fin+0x66>
 8016d50:	2b07      	cmp	r3, #7
 8016d52:	dc2b      	bgt.n	8016dac <tcp_close_shutdown_fin+0x80>
 8016d54:	2b03      	cmp	r3, #3
 8016d56:	d002      	beq.n	8016d5e <tcp_close_shutdown_fin+0x32>
 8016d58:	2b04      	cmp	r3, #4
 8016d5a:	d00d      	beq.n	8016d78 <tcp_close_shutdown_fin+0x4c>
 8016d5c:	e026      	b.n	8016dac <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8016d5e:	6878      	ldr	r0, [r7, #4]
 8016d60:	f004 fe5e 	bl	801ba20 <tcp_send_fin>
 8016d64:	4603      	mov	r3, r0
 8016d66:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d11f      	bne.n	8016db0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	2205      	movs	r2, #5
 8016d74:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016d76:	e01b      	b.n	8016db0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8016d78:	6878      	ldr	r0, [r7, #4]
 8016d7a:	f004 fe51 	bl	801ba20 <tcp_send_fin>
 8016d7e:	4603      	mov	r3, r0
 8016d80:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d114      	bne.n	8016db4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	2205      	movs	r2, #5
 8016d8e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016d90:	e010      	b.n	8016db4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8016d92:	6878      	ldr	r0, [r7, #4]
 8016d94:	f004 fe44 	bl	801ba20 <tcp_send_fin>
 8016d98:	4603      	mov	r3, r0
 8016d9a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d109      	bne.n	8016db8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	2209      	movs	r2, #9
 8016da8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016daa:	e005      	b.n	8016db8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8016dac:	2300      	movs	r3, #0
 8016dae:	e01c      	b.n	8016dea <tcp_close_shutdown_fin+0xbe>
      break;
 8016db0:	bf00      	nop
 8016db2:	e002      	b.n	8016dba <tcp_close_shutdown_fin+0x8e>
      break;
 8016db4:	bf00      	nop
 8016db6:	e000      	b.n	8016dba <tcp_close_shutdown_fin+0x8e>
      break;
 8016db8:	bf00      	nop
  }

  if (err == ERR_OK) {
 8016dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d103      	bne.n	8016dca <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8016dc2:	6878      	ldr	r0, [r7, #4]
 8016dc4:	f004 ff6a 	bl	801bc9c <tcp_output>
 8016dc8:	e00d      	b.n	8016de6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8016dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016dce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016dd2:	d108      	bne.n	8016de6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	8b5b      	ldrh	r3, [r3, #26]
 8016dd8:	f043 0308 	orr.w	r3, r3, #8
 8016ddc:	b29a      	uxth	r2, r3
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8016de2:	2300      	movs	r3, #0
 8016de4:	e001      	b.n	8016dea <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8016de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016dea:	4618      	mov	r0, r3
 8016dec:	3710      	adds	r7, #16
 8016dee:	46bd      	mov	sp, r7
 8016df0:	bd80      	pop	{r7, pc}
 8016df2:	bf00      	nop
 8016df4:	08028a1c 	.word	0x08028a1c
 8016df8:	08028acc 	.word	0x08028acc
 8016dfc:	08028a60 	.word	0x08028a60

08016e00 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b082      	sub	sp, #8
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d109      	bne.n	8016e22 <tcp_close+0x22>
 8016e0e:	4b0f      	ldr	r3, [pc, #60]	; (8016e4c <tcp_close+0x4c>)
 8016e10:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8016e14:	490e      	ldr	r1, [pc, #56]	; (8016e50 <tcp_close+0x50>)
 8016e16:	480f      	ldr	r0, [pc, #60]	; (8016e54 <tcp_close+0x54>)
 8016e18:	f00d f8de 	bl	8023fd8 <iprintf>
 8016e1c:	f06f 030f 	mvn.w	r3, #15
 8016e20:	e00f      	b.n	8016e42 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	7d1b      	ldrb	r3, [r3, #20]
 8016e26:	2b01      	cmp	r3, #1
 8016e28:	d006      	beq.n	8016e38 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	8b5b      	ldrh	r3, [r3, #26]
 8016e2e:	f043 0310 	orr.w	r3, r3, #16
 8016e32:	b29a      	uxth	r2, r3
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8016e38:	2101      	movs	r1, #1
 8016e3a:	6878      	ldr	r0, [r7, #4]
 8016e3c:	f7ff fe94 	bl	8016b68 <tcp_close_shutdown>
 8016e40:	4603      	mov	r3, r0
}
 8016e42:	4618      	mov	r0, r3
 8016e44:	3708      	adds	r7, #8
 8016e46:	46bd      	mov	sp, r7
 8016e48:	bd80      	pop	{r7, pc}
 8016e4a:	bf00      	nop
 8016e4c:	08028a1c 	.word	0x08028a1c
 8016e50:	08028b2c 	.word	0x08028b2c
 8016e54:	08028a60 	.word	0x08028a60

08016e58 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8016e58:	b580      	push	{r7, lr}
 8016e5a:	b084      	sub	sp, #16
 8016e5c:	af00      	add	r7, sp, #0
 8016e5e:	60f8      	str	r0, [r7, #12]
 8016e60:	60b9      	str	r1, [r7, #8]
 8016e62:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d109      	bne.n	8016e7e <tcp_shutdown+0x26>
 8016e6a:	4b26      	ldr	r3, [pc, #152]	; (8016f04 <tcp_shutdown+0xac>)
 8016e6c:	f240 2207 	movw	r2, #519	; 0x207
 8016e70:	4925      	ldr	r1, [pc, #148]	; (8016f08 <tcp_shutdown+0xb0>)
 8016e72:	4826      	ldr	r0, [pc, #152]	; (8016f0c <tcp_shutdown+0xb4>)
 8016e74:	f00d f8b0 	bl	8023fd8 <iprintf>
 8016e78:	f06f 030f 	mvn.w	r3, #15
 8016e7c:	e03d      	b.n	8016efa <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8016e7e:	68fb      	ldr	r3, [r7, #12]
 8016e80:	7d1b      	ldrb	r3, [r3, #20]
 8016e82:	2b01      	cmp	r3, #1
 8016e84:	d102      	bne.n	8016e8c <tcp_shutdown+0x34>
    return ERR_CONN;
 8016e86:	f06f 030a 	mvn.w	r3, #10
 8016e8a:	e036      	b.n	8016efa <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8016e8c:	68bb      	ldr	r3, [r7, #8]
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d01b      	beq.n	8016eca <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	8b5b      	ldrh	r3, [r3, #26]
 8016e96:	f043 0310 	orr.w	r3, r3, #16
 8016e9a:	b29a      	uxth	r2, r3
 8016e9c:	68fb      	ldr	r3, [r7, #12]
 8016e9e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d005      	beq.n	8016eb2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8016ea6:	2101      	movs	r1, #1
 8016ea8:	68f8      	ldr	r0, [r7, #12]
 8016eaa:	f7ff fe5d 	bl	8016b68 <tcp_close_shutdown>
 8016eae:	4603      	mov	r3, r0
 8016eb0:	e023      	b.n	8016efa <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d007      	beq.n	8016eca <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	f7ff fae4 	bl	801648c <pbuf_free>
      pcb->refused_data = NULL;
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	2200      	movs	r2, #0
 8016ec8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d013      	beq.n	8016ef8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	7d1b      	ldrb	r3, [r3, #20]
 8016ed4:	2b04      	cmp	r3, #4
 8016ed6:	dc02      	bgt.n	8016ede <tcp_shutdown+0x86>
 8016ed8:	2b03      	cmp	r3, #3
 8016eda:	da02      	bge.n	8016ee2 <tcp_shutdown+0x8a>
 8016edc:	e009      	b.n	8016ef2 <tcp_shutdown+0x9a>
 8016ede:	2b07      	cmp	r3, #7
 8016ee0:	d107      	bne.n	8016ef2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8016ee2:	68bb      	ldr	r3, [r7, #8]
 8016ee4:	b2db      	uxtb	r3, r3
 8016ee6:	4619      	mov	r1, r3
 8016ee8:	68f8      	ldr	r0, [r7, #12]
 8016eea:	f7ff fe3d 	bl	8016b68 <tcp_close_shutdown>
 8016eee:	4603      	mov	r3, r0
 8016ef0:	e003      	b.n	8016efa <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8016ef2:	f06f 030a 	mvn.w	r3, #10
 8016ef6:	e000      	b.n	8016efa <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8016ef8:	2300      	movs	r3, #0
}
 8016efa:	4618      	mov	r0, r3
 8016efc:	3710      	adds	r7, #16
 8016efe:	46bd      	mov	sp, r7
 8016f00:	bd80      	pop	{r7, pc}
 8016f02:	bf00      	nop
 8016f04:	08028a1c 	.word	0x08028a1c
 8016f08:	08028b44 	.word	0x08028b44
 8016f0c:	08028a60 	.word	0x08028a60

08016f10 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8016f10:	b580      	push	{r7, lr}
 8016f12:	b08e      	sub	sp, #56	; 0x38
 8016f14:	af04      	add	r7, sp, #16
 8016f16:	6078      	str	r0, [r7, #4]
 8016f18:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d107      	bne.n	8016f30 <tcp_abandon+0x20>
 8016f20:	4b52      	ldr	r3, [pc, #328]	; (801706c <tcp_abandon+0x15c>)
 8016f22:	f240 223d 	movw	r2, #573	; 0x23d
 8016f26:	4952      	ldr	r1, [pc, #328]	; (8017070 <tcp_abandon+0x160>)
 8016f28:	4852      	ldr	r0, [pc, #328]	; (8017074 <tcp_abandon+0x164>)
 8016f2a:	f00d f855 	bl	8023fd8 <iprintf>
 8016f2e:	e099      	b.n	8017064 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	7d1b      	ldrb	r3, [r3, #20]
 8016f34:	2b01      	cmp	r3, #1
 8016f36:	d106      	bne.n	8016f46 <tcp_abandon+0x36>
 8016f38:	4b4c      	ldr	r3, [pc, #304]	; (801706c <tcp_abandon+0x15c>)
 8016f3a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8016f3e:	494e      	ldr	r1, [pc, #312]	; (8017078 <tcp_abandon+0x168>)
 8016f40:	484c      	ldr	r0, [pc, #304]	; (8017074 <tcp_abandon+0x164>)
 8016f42:	f00d f849 	bl	8023fd8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	7d1b      	ldrb	r3, [r3, #20]
 8016f4a:	2b0a      	cmp	r3, #10
 8016f4c:	d107      	bne.n	8016f5e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8016f4e:	6879      	ldr	r1, [r7, #4]
 8016f50:	484a      	ldr	r0, [pc, #296]	; (801707c <tcp_abandon+0x16c>)
 8016f52:	f001 fa79 	bl	8018448 <tcp_pcb_remove>
    tcp_free(pcb);
 8016f56:	6878      	ldr	r0, [r7, #4]
 8016f58:	f7ff fd54 	bl	8016a04 <tcp_free>
 8016f5c:	e082      	b.n	8017064 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8016f5e:	2300      	movs	r3, #0
 8016f60:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8016f62:	2300      	movs	r3, #0
 8016f64:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016f6a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f70:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016f78:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	691b      	ldr	r3, [r3, #16]
 8016f7e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	7d1b      	ldrb	r3, [r3, #20]
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d126      	bne.n	8016fd6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	8adb      	ldrh	r3, [r3, #22]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d02e      	beq.n	8016fee <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8016f90:	4b3b      	ldr	r3, [pc, #236]	; (8017080 <tcp_abandon+0x170>)
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	687a      	ldr	r2, [r7, #4]
 8016f96:	429a      	cmp	r2, r3
 8016f98:	d105      	bne.n	8016fa6 <tcp_abandon+0x96>
 8016f9a:	4b39      	ldr	r3, [pc, #228]	; (8017080 <tcp_abandon+0x170>)
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	68db      	ldr	r3, [r3, #12]
 8016fa0:	4a37      	ldr	r2, [pc, #220]	; (8017080 <tcp_abandon+0x170>)
 8016fa2:	6013      	str	r3, [r2, #0]
 8016fa4:	e013      	b.n	8016fce <tcp_abandon+0xbe>
 8016fa6:	4b36      	ldr	r3, [pc, #216]	; (8017080 <tcp_abandon+0x170>)
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	61fb      	str	r3, [r7, #28]
 8016fac:	e00c      	b.n	8016fc8 <tcp_abandon+0xb8>
 8016fae:	69fb      	ldr	r3, [r7, #28]
 8016fb0:	68db      	ldr	r3, [r3, #12]
 8016fb2:	687a      	ldr	r2, [r7, #4]
 8016fb4:	429a      	cmp	r2, r3
 8016fb6:	d104      	bne.n	8016fc2 <tcp_abandon+0xb2>
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	68da      	ldr	r2, [r3, #12]
 8016fbc:	69fb      	ldr	r3, [r7, #28]
 8016fbe:	60da      	str	r2, [r3, #12]
 8016fc0:	e005      	b.n	8016fce <tcp_abandon+0xbe>
 8016fc2:	69fb      	ldr	r3, [r7, #28]
 8016fc4:	68db      	ldr	r3, [r3, #12]
 8016fc6:	61fb      	str	r3, [r7, #28]
 8016fc8:	69fb      	ldr	r3, [r7, #28]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d1ef      	bne.n	8016fae <tcp_abandon+0x9e>
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	2200      	movs	r2, #0
 8016fd2:	60da      	str	r2, [r3, #12]
 8016fd4:	e00b      	b.n	8016fee <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8016fd6:	683b      	ldr	r3, [r7, #0]
 8016fd8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	8adb      	ldrh	r3, [r3, #22]
 8016fde:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016fe0:	6879      	ldr	r1, [r7, #4]
 8016fe2:	4828      	ldr	r0, [pc, #160]	; (8017084 <tcp_abandon+0x174>)
 8016fe4:	f001 fa30 	bl	8018448 <tcp_pcb_remove>
 8016fe8:	4b27      	ldr	r3, [pc, #156]	; (8017088 <tcp_abandon+0x178>)
 8016fea:	2201      	movs	r2, #1
 8016fec:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d004      	beq.n	8017000 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	f000 fefa 	bl	8017df4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017004:	2b00      	cmp	r3, #0
 8017006:	d004      	beq.n	8017012 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801700c:	4618      	mov	r0, r3
 801700e:	f000 fef1 	bl	8017df4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017016:	2b00      	cmp	r3, #0
 8017018:	d004      	beq.n	8017024 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801701e:	4618      	mov	r0, r3
 8017020:	f000 fee8 	bl	8017df4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8017024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017026:	2b00      	cmp	r3, #0
 8017028:	d00e      	beq.n	8017048 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801702a:	6879      	ldr	r1, [r7, #4]
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	3304      	adds	r3, #4
 8017030:	687a      	ldr	r2, [r7, #4]
 8017032:	8b12      	ldrh	r2, [r2, #24]
 8017034:	9202      	str	r2, [sp, #8]
 8017036:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017038:	9201      	str	r2, [sp, #4]
 801703a:	9300      	str	r3, [sp, #0]
 801703c:	460b      	mov	r3, r1
 801703e:	697a      	ldr	r2, [r7, #20]
 8017040:	69b9      	ldr	r1, [r7, #24]
 8017042:	6878      	ldr	r0, [r7, #4]
 8017044:	f005 fbde 	bl	801c804 <tcp_rst>
    }
    last_state = pcb->state;
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	7d1b      	ldrb	r3, [r3, #20]
 801704c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801704e:	6878      	ldr	r0, [r7, #4]
 8017050:	f7ff fcd8 	bl	8016a04 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8017054:	693b      	ldr	r3, [r7, #16]
 8017056:	2b00      	cmp	r3, #0
 8017058:	d004      	beq.n	8017064 <tcp_abandon+0x154>
 801705a:	693b      	ldr	r3, [r7, #16]
 801705c:	f06f 010c 	mvn.w	r1, #12
 8017060:	68f8      	ldr	r0, [r7, #12]
 8017062:	4798      	blx	r3
  }
}
 8017064:	3728      	adds	r7, #40	; 0x28
 8017066:	46bd      	mov	sp, r7
 8017068:	bd80      	pop	{r7, pc}
 801706a:	bf00      	nop
 801706c:	08028a1c 	.word	0x08028a1c
 8017070:	08028b60 	.word	0x08028b60
 8017074:	08028a60 	.word	0x08028a60
 8017078:	08028b7c 	.word	0x08028b7c
 801707c:	20013240 	.word	0x20013240
 8017080:	20013234 	.word	0x20013234
 8017084:	2001323c 	.word	0x2001323c
 8017088:	20013244 	.word	0x20013244

0801708c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801708c:	b580      	push	{r7, lr}
 801708e:	b082      	sub	sp, #8
 8017090:	af00      	add	r7, sp, #0
 8017092:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8017094:	2101      	movs	r1, #1
 8017096:	6878      	ldr	r0, [r7, #4]
 8017098:	f7ff ff3a 	bl	8016f10 <tcp_abandon>
}
 801709c:	bf00      	nop
 801709e:	3708      	adds	r7, #8
 80170a0:	46bd      	mov	sp, r7
 80170a2:	bd80      	pop	{r7, pc}

080170a4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80170a4:	b580      	push	{r7, lr}
 80170a6:	b088      	sub	sp, #32
 80170a8:	af00      	add	r7, sp, #0
 80170aa:	60f8      	str	r0, [r7, #12]
 80170ac:	60b9      	str	r1, [r7, #8]
 80170ae:	4613      	mov	r3, r2
 80170b0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80170b2:	2304      	movs	r3, #4
 80170b4:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80170b6:	68bb      	ldr	r3, [r7, #8]
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d101      	bne.n	80170c0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80170bc:	4b48      	ldr	r3, [pc, #288]	; (80171e0 <tcp_bind+0x13c>)
 80170be:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d109      	bne.n	80170da <tcp_bind+0x36>
 80170c6:	4b47      	ldr	r3, [pc, #284]	; (80171e4 <tcp_bind+0x140>)
 80170c8:	f240 22a9 	movw	r2, #681	; 0x2a9
 80170cc:	4946      	ldr	r1, [pc, #280]	; (80171e8 <tcp_bind+0x144>)
 80170ce:	4847      	ldr	r0, [pc, #284]	; (80171ec <tcp_bind+0x148>)
 80170d0:	f00c ff82 	bl	8023fd8 <iprintf>
 80170d4:	f06f 030f 	mvn.w	r3, #15
 80170d8:	e07e      	b.n	80171d8 <tcp_bind+0x134>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	7d1b      	ldrb	r3, [r3, #20]
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d009      	beq.n	80170f6 <tcp_bind+0x52>
 80170e2:	4b40      	ldr	r3, [pc, #256]	; (80171e4 <tcp_bind+0x140>)
 80170e4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80170e8:	4941      	ldr	r1, [pc, #260]	; (80171f0 <tcp_bind+0x14c>)
 80170ea:	4840      	ldr	r0, [pc, #256]	; (80171ec <tcp_bind+0x148>)
 80170ec:	f00c ff74 	bl	8023fd8 <iprintf>
 80170f0:	f06f 0305 	mvn.w	r3, #5
 80170f4:	e070      	b.n	80171d8 <tcp_bind+0x134>
  /* Unless the REUSEADDR flag is set,
     we have to check the pcbs in TIME-WAIT state, also.
     We do not dump TIME_WAIT pcb's; they can still be matched by incoming
     packets using both local and remote IP addresses and ports to distinguish.
   */
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	7a5b      	ldrb	r3, [r3, #9]
 80170fa:	f003 0304 	and.w	r3, r3, #4
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d001      	beq.n	8017106 <tcp_bind+0x62>
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
 8017102:	2303      	movs	r3, #3
 8017104:	61bb      	str	r3, [r7, #24]
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8017106:	88fb      	ldrh	r3, [r7, #6]
 8017108:	2b00      	cmp	r3, #0
 801710a:	d109      	bne.n	8017120 <tcp_bind+0x7c>
    port = tcp_new_port();
 801710c:	f000 fa0a 	bl	8017524 <tcp_new_port>
 8017110:	4603      	mov	r3, r0
 8017112:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8017114:	88fb      	ldrh	r3, [r7, #6]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d141      	bne.n	801719e <tcp_bind+0xfa>
      return ERR_BUF;
 801711a:	f06f 0301 	mvn.w	r3, #1
 801711e:	e05b      	b.n	80171d8 <tcp_bind+0x134>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8017120:	2300      	movs	r3, #0
 8017122:	61fb      	str	r3, [r7, #28]
 8017124:	e037      	b.n	8017196 <tcp_bind+0xf2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8017126:	4a33      	ldr	r2, [pc, #204]	; (80171f4 <tcp_bind+0x150>)
 8017128:	69fb      	ldr	r3, [r7, #28]
 801712a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801712e:	681b      	ldr	r3, [r3, #0]
 8017130:	617b      	str	r3, [r7, #20]
 8017132:	e02a      	b.n	801718a <tcp_bind+0xe6>
        if (cpcb->local_port == port) {
 8017134:	697b      	ldr	r3, [r7, #20]
 8017136:	8adb      	ldrh	r3, [r3, #22]
 8017138:	88fa      	ldrh	r2, [r7, #6]
 801713a:	429a      	cmp	r2, r3
 801713c:	d122      	bne.n	8017184 <tcp_bind+0xe0>
#if SO_REUSE
          /* Omit checking for the same port if both pcbs have REUSEADDR set.
             For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
             tcp_connect. */
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	7a5b      	ldrb	r3, [r3, #9]
 8017142:	f003 0304 	and.w	r3, r3, #4
 8017146:	2b00      	cmp	r3, #0
 8017148:	d005      	beq.n	8017156 <tcp_bind+0xb2>
              !ip_get_option(cpcb, SOF_REUSEADDR))
 801714a:	697b      	ldr	r3, [r7, #20]
 801714c:	7a5b      	ldrb	r3, [r3, #9]
 801714e:	f003 0304 	and.w	r3, r3, #4
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 8017152:	2b00      	cmp	r3, #0
 8017154:	d116      	bne.n	8017184 <tcp_bind+0xe0>
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8017156:	697b      	ldr	r3, [r7, #20]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8017158:	2b00      	cmp	r3, #0
 801715a:	d010      	beq.n	801717e <tcp_bind+0xda>
                (ip_addr_isany(&cpcb->local_ip) ||
 801715c:	697b      	ldr	r3, [r7, #20]
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	2b00      	cmp	r3, #0
 8017162:	d00c      	beq.n	801717e <tcp_bind+0xda>
 8017164:	68bb      	ldr	r3, [r7, #8]
 8017166:	2b00      	cmp	r3, #0
 8017168:	d009      	beq.n	801717e <tcp_bind+0xda>
                 ip_addr_isany(ipaddr) ||
 801716a:	68bb      	ldr	r3, [r7, #8]
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	2b00      	cmp	r3, #0
 8017170:	d005      	beq.n	801717e <tcp_bind+0xda>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8017172:	697b      	ldr	r3, [r7, #20]
 8017174:	681a      	ldr	r2, [r3, #0]
 8017176:	68bb      	ldr	r3, [r7, #8]
 8017178:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801717a:	429a      	cmp	r2, r3
 801717c:	d102      	bne.n	8017184 <tcp_bind+0xe0>
              return ERR_USE;
 801717e:	f06f 0307 	mvn.w	r3, #7
 8017182:	e029      	b.n	80171d8 <tcp_bind+0x134>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8017184:	697b      	ldr	r3, [r7, #20]
 8017186:	68db      	ldr	r3, [r3, #12]
 8017188:	617b      	str	r3, [r7, #20]
 801718a:	697b      	ldr	r3, [r7, #20]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d1d1      	bne.n	8017134 <tcp_bind+0x90>
    for (i = 0; i < max_pcb_list; i++) {
 8017190:	69fb      	ldr	r3, [r7, #28]
 8017192:	3301      	adds	r3, #1
 8017194:	61fb      	str	r3, [r7, #28]
 8017196:	69fa      	ldr	r2, [r7, #28]
 8017198:	69bb      	ldr	r3, [r7, #24]
 801719a:	429a      	cmp	r2, r3
 801719c:	dbc3      	blt.n	8017126 <tcp_bind+0x82>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801719e:	68bb      	ldr	r3, [r7, #8]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d00c      	beq.n	80171be <tcp_bind+0x11a>
 80171a4:	68bb      	ldr	r3, [r7, #8]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d008      	beq.n	80171be <tcp_bind+0x11a>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80171ac:	68bb      	ldr	r3, [r7, #8]
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d002      	beq.n	80171b8 <tcp_bind+0x114>
 80171b2:	68bb      	ldr	r3, [r7, #8]
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	e000      	b.n	80171ba <tcp_bind+0x116>
 80171b8:	2300      	movs	r3, #0
 80171ba:	68fa      	ldr	r2, [r7, #12]
 80171bc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	88fa      	ldrh	r2, [r7, #6]
 80171c2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80171c4:	4b0c      	ldr	r3, [pc, #48]	; (80171f8 <tcp_bind+0x154>)
 80171c6:	681a      	ldr	r2, [r3, #0]
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	60da      	str	r2, [r3, #12]
 80171cc:	4a0a      	ldr	r2, [pc, #40]	; (80171f8 <tcp_bind+0x154>)
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	6013      	str	r3, [r2, #0]
 80171d2:	f005 fcd9 	bl	801cb88 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80171d6:	2300      	movs	r3, #0
}
 80171d8:	4618      	mov	r0, r3
 80171da:	3720      	adds	r7, #32
 80171dc:	46bd      	mov	sp, r7
 80171de:	bd80      	pop	{r7, pc}
 80171e0:	0802af70 	.word	0x0802af70
 80171e4:	08028a1c 	.word	0x08028a1c
 80171e8:	08028bb0 	.word	0x08028bb0
 80171ec:	08028a60 	.word	0x08028a60
 80171f0:	08028bc8 	.word	0x08028bc8
 80171f4:	0802af38 	.word	0x0802af38
 80171f8:	20013234 	.word	0x20013234

080171fc <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80171fc:	b580      	push	{r7, lr}
 80171fe:	b084      	sub	sp, #16
 8017200:	af00      	add	r7, sp, #0
 8017202:	60f8      	str	r0, [r7, #12]
 8017204:	60b9      	str	r1, [r7, #8]
 8017206:	4613      	mov	r3, r2
 8017208:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801720a:	68bb      	ldr	r3, [r7, #8]
 801720c:	2b00      	cmp	r3, #0
 801720e:	d106      	bne.n	801721e <tcp_accept_null+0x22>
 8017210:	4b07      	ldr	r3, [pc, #28]	; (8017230 <tcp_accept_null+0x34>)
 8017212:	f240 320f 	movw	r2, #783	; 0x30f
 8017216:	4907      	ldr	r1, [pc, #28]	; (8017234 <tcp_accept_null+0x38>)
 8017218:	4807      	ldr	r0, [pc, #28]	; (8017238 <tcp_accept_null+0x3c>)
 801721a:	f00c fedd 	bl	8023fd8 <iprintf>

  tcp_abort(pcb);
 801721e:	68b8      	ldr	r0, [r7, #8]
 8017220:	f7ff ff34 	bl	801708c <tcp_abort>

  return ERR_ABRT;
 8017224:	f06f 030c 	mvn.w	r3, #12
}
 8017228:	4618      	mov	r0, r3
 801722a:	3710      	adds	r7, #16
 801722c:	46bd      	mov	sp, r7
 801722e:	bd80      	pop	{r7, pc}
 8017230:	08028a1c 	.word	0x08028a1c
 8017234:	08028bf0 	.word	0x08028bf0
 8017238:	08028a60 	.word	0x08028a60

0801723c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 801723c:	b580      	push	{r7, lr}
 801723e:	b088      	sub	sp, #32
 8017240:	af00      	add	r7, sp, #0
 8017242:	60f8      	str	r0, [r7, #12]
 8017244:	460b      	mov	r3, r1
 8017246:	607a      	str	r2, [r7, #4]
 8017248:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801724a:	2300      	movs	r3, #0
 801724c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d109      	bne.n	8017268 <tcp_listen_with_backlog_and_err+0x2c>
 8017254:	4b57      	ldr	r3, [pc, #348]	; (80173b4 <tcp_listen_with_backlog_and_err+0x178>)
 8017256:	f240 3259 	movw	r2, #857	; 0x359
 801725a:	4957      	ldr	r1, [pc, #348]	; (80173b8 <tcp_listen_with_backlog_and_err+0x17c>)
 801725c:	4857      	ldr	r0, [pc, #348]	; (80173bc <tcp_listen_with_backlog_and_err+0x180>)
 801725e:	f00c febb 	bl	8023fd8 <iprintf>
 8017262:	23f0      	movs	r3, #240	; 0xf0
 8017264:	76fb      	strb	r3, [r7, #27]
 8017266:	e09a      	b.n	801739e <tcp_listen_with_backlog_and_err+0x162>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	7d1b      	ldrb	r3, [r3, #20]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d009      	beq.n	8017284 <tcp_listen_with_backlog_and_err+0x48>
 8017270:	4b50      	ldr	r3, [pc, #320]	; (80173b4 <tcp_listen_with_backlog_and_err+0x178>)
 8017272:	f240 325a 	movw	r2, #858	; 0x35a
 8017276:	4952      	ldr	r1, [pc, #328]	; (80173c0 <tcp_listen_with_backlog_and_err+0x184>)
 8017278:	4850      	ldr	r0, [pc, #320]	; (80173bc <tcp_listen_with_backlog_and_err+0x180>)
 801727a:	f00c fead 	bl	8023fd8 <iprintf>
 801727e:	23f1      	movs	r3, #241	; 0xf1
 8017280:	76fb      	strb	r3, [r7, #27]
 8017282:	e08c      	b.n	801739e <tcp_listen_with_backlog_and_err+0x162>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	7d1b      	ldrb	r3, [r3, #20]
 8017288:	2b01      	cmp	r3, #1
 801728a:	d104      	bne.n	8017296 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8017290:	23f7      	movs	r3, #247	; 0xf7
 8017292:	76fb      	strb	r3, [r7, #27]
    goto done;
 8017294:	e083      	b.n	801739e <tcp_listen_with_backlog_and_err+0x162>
  }
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	7a5b      	ldrb	r3, [r3, #9]
 801729a:	f003 0304 	and.w	r3, r3, #4
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d01a      	beq.n	80172d8 <tcp_listen_with_backlog_and_err+0x9c>
    /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
       is declared (listen-/connection-pcb), we have to make sure now that
       this port is only used once for every local IP. */
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80172a2:	4b48      	ldr	r3, [pc, #288]	; (80173c4 <tcp_listen_with_backlog_and_err+0x188>)
 80172a4:	681b      	ldr	r3, [r3, #0]
 80172a6:	61fb      	str	r3, [r7, #28]
 80172a8:	e013      	b.n	80172d2 <tcp_listen_with_backlog_and_err+0x96>
      if ((lpcb->local_port == pcb->local_port) &&
 80172aa:	69fb      	ldr	r3, [r7, #28]
 80172ac:	8ada      	ldrh	r2, [r3, #22]
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	8adb      	ldrh	r3, [r3, #22]
 80172b2:	429a      	cmp	r2, r3
 80172b4:	d10a      	bne.n	80172cc <tcp_listen_with_backlog_and_err+0x90>
          ip_addr_cmp(&lpcb->local_ip, &pcb->local_ip)) {
 80172b6:	69fb      	ldr	r3, [r7, #28]
 80172b8:	681a      	ldr	r2, [r3, #0]
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	681b      	ldr	r3, [r3, #0]
      if ((lpcb->local_port == pcb->local_port) &&
 80172be:	429a      	cmp	r2, r3
 80172c0:	d104      	bne.n	80172cc <tcp_listen_with_backlog_and_err+0x90>
        /* this address/port is already used */
        lpcb = NULL;
 80172c2:	2300      	movs	r3, #0
 80172c4:	61fb      	str	r3, [r7, #28]
        res = ERR_USE;
 80172c6:	23f8      	movs	r3, #248	; 0xf8
 80172c8:	76fb      	strb	r3, [r7, #27]
        goto done;
 80172ca:	e068      	b.n	801739e <tcp_listen_with_backlog_and_err+0x162>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80172cc:	69fb      	ldr	r3, [r7, #28]
 80172ce:	68db      	ldr	r3, [r3, #12]
 80172d0:	61fb      	str	r3, [r7, #28]
 80172d2:	69fb      	ldr	r3, [r7, #28]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d1e8      	bne.n	80172aa <tcp_listen_with_backlog_and_err+0x6e>
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80172d8:	2002      	movs	r0, #2
 80172da:	f7fe f9b1 	bl	8015640 <memp_malloc>
 80172de:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80172e0:	69fb      	ldr	r3, [r7, #28]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d102      	bne.n	80172ec <tcp_listen_with_backlog_and_err+0xb0>
    res = ERR_MEM;
 80172e6:	23ff      	movs	r3, #255	; 0xff
 80172e8:	76fb      	strb	r3, [r7, #27]
    goto done;
 80172ea:	e058      	b.n	801739e <tcp_listen_with_backlog_and_err+0x162>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	691a      	ldr	r2, [r3, #16]
 80172f0:	69fb      	ldr	r3, [r7, #28]
 80172f2:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	8ada      	ldrh	r2, [r3, #22]
 80172f8:	69fb      	ldr	r3, [r7, #28]
 80172fa:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80172fc:	69fb      	ldr	r3, [r7, #28]
 80172fe:	2201      	movs	r2, #1
 8017300:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	7d5a      	ldrb	r2, [r3, #21]
 8017306:	69fb      	ldr	r3, [r7, #28]
 8017308:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	7a5a      	ldrb	r2, [r3, #9]
 801730e:	69fb      	ldr	r3, [r7, #28]
 8017310:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8017312:	69fb      	ldr	r3, [r7, #28]
 8017314:	2200      	movs	r2, #0
 8017316:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8017318:	68fb      	ldr	r3, [r7, #12]
 801731a:	7ada      	ldrb	r2, [r3, #11]
 801731c:	69fb      	ldr	r3, [r7, #28]
 801731e:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8017320:	68fb      	ldr	r3, [r7, #12]
 8017322:	7a9a      	ldrb	r2, [r3, #10]
 8017324:	69fb      	ldr	r3, [r7, #28]
 8017326:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	681a      	ldr	r2, [r3, #0]
 801732c:	69fb      	ldr	r3, [r7, #28]
 801732e:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	8adb      	ldrh	r3, [r3, #22]
 8017334:	2b00      	cmp	r3, #0
 8017336:	d021      	beq.n	801737c <tcp_listen_with_backlog_and_err+0x140>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8017338:	4b23      	ldr	r3, [pc, #140]	; (80173c8 <tcp_listen_with_backlog_and_err+0x18c>)
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	68fa      	ldr	r2, [r7, #12]
 801733e:	429a      	cmp	r2, r3
 8017340:	d105      	bne.n	801734e <tcp_listen_with_backlog_and_err+0x112>
 8017342:	4b21      	ldr	r3, [pc, #132]	; (80173c8 <tcp_listen_with_backlog_and_err+0x18c>)
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	68db      	ldr	r3, [r3, #12]
 8017348:	4a1f      	ldr	r2, [pc, #124]	; (80173c8 <tcp_listen_with_backlog_and_err+0x18c>)
 801734a:	6013      	str	r3, [r2, #0]
 801734c:	e013      	b.n	8017376 <tcp_listen_with_backlog_and_err+0x13a>
 801734e:	4b1e      	ldr	r3, [pc, #120]	; (80173c8 <tcp_listen_with_backlog_and_err+0x18c>)
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	617b      	str	r3, [r7, #20]
 8017354:	e00c      	b.n	8017370 <tcp_listen_with_backlog_and_err+0x134>
 8017356:	697b      	ldr	r3, [r7, #20]
 8017358:	68db      	ldr	r3, [r3, #12]
 801735a:	68fa      	ldr	r2, [r7, #12]
 801735c:	429a      	cmp	r2, r3
 801735e:	d104      	bne.n	801736a <tcp_listen_with_backlog_and_err+0x12e>
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	68da      	ldr	r2, [r3, #12]
 8017364:	697b      	ldr	r3, [r7, #20]
 8017366:	60da      	str	r2, [r3, #12]
 8017368:	e005      	b.n	8017376 <tcp_listen_with_backlog_and_err+0x13a>
 801736a:	697b      	ldr	r3, [r7, #20]
 801736c:	68db      	ldr	r3, [r3, #12]
 801736e:	617b      	str	r3, [r7, #20]
 8017370:	697b      	ldr	r3, [r7, #20]
 8017372:	2b00      	cmp	r3, #0
 8017374:	d1ef      	bne.n	8017356 <tcp_listen_with_backlog_and_err+0x11a>
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	2200      	movs	r2, #0
 801737a:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801737c:	68f8      	ldr	r0, [r7, #12]
 801737e:	f7ff fb41 	bl	8016a04 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8017382:	69fb      	ldr	r3, [r7, #28]
 8017384:	4a11      	ldr	r2, [pc, #68]	; (80173cc <tcp_listen_with_backlog_and_err+0x190>)
 8017386:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8017388:	4b0e      	ldr	r3, [pc, #56]	; (80173c4 <tcp_listen_with_backlog_and_err+0x188>)
 801738a:	681a      	ldr	r2, [r3, #0]
 801738c:	69fb      	ldr	r3, [r7, #28]
 801738e:	60da      	str	r2, [r3, #12]
 8017390:	4a0c      	ldr	r2, [pc, #48]	; (80173c4 <tcp_listen_with_backlog_and_err+0x188>)
 8017392:	69fb      	ldr	r3, [r7, #28]
 8017394:	6013      	str	r3, [r2, #0]
 8017396:	f005 fbf7 	bl	801cb88 <tcp_timer_needed>
  res = ERR_OK;
 801739a:	2300      	movs	r3, #0
 801739c:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d002      	beq.n	80173aa <tcp_listen_with_backlog_and_err+0x16e>
    *err = res;
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	7efa      	ldrb	r2, [r7, #27]
 80173a8:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80173aa:	69fb      	ldr	r3, [r7, #28]
}
 80173ac:	4618      	mov	r0, r3
 80173ae:	3720      	adds	r7, #32
 80173b0:	46bd      	mov	sp, r7
 80173b2:	bd80      	pop	{r7, pc}
 80173b4:	08028a1c 	.word	0x08028a1c
 80173b8:	08028c10 	.word	0x08028c10
 80173bc:	08028a60 	.word	0x08028a60
 80173c0:	08028c40 	.word	0x08028c40
 80173c4:	20013238 	.word	0x20013238
 80173c8:	20013234 	.word	0x20013234
 80173cc:	080171fd 	.word	0x080171fd

080173d0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b084      	sub	sp, #16
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d106      	bne.n	80173ec <tcp_update_rcv_ann_wnd+0x1c>
 80173de:	4b25      	ldr	r3, [pc, #148]	; (8017474 <tcp_update_rcv_ann_wnd+0xa4>)
 80173e0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80173e4:	4924      	ldr	r1, [pc, #144]	; (8017478 <tcp_update_rcv_ann_wnd+0xa8>)
 80173e6:	4825      	ldr	r0, [pc, #148]	; (801747c <tcp_update_rcv_ann_wnd+0xac>)
 80173e8:	f00c fdf6 	bl	8023fd8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173f0:	687a      	ldr	r2, [r7, #4]
 80173f2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80173f4:	4413      	add	r3, r2
 80173f6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173fc:	687a      	ldr	r2, [r7, #4]
 80173fe:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8017400:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8017404:	bf28      	it	cs
 8017406:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801740a:	b292      	uxth	r2, r2
 801740c:	4413      	add	r3, r2
 801740e:	68fa      	ldr	r2, [r7, #12]
 8017410:	1ad3      	subs	r3, r2, r3
 8017412:	2b00      	cmp	r3, #0
 8017414:	db08      	blt.n	8017428 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017422:	68fa      	ldr	r2, [r7, #12]
 8017424:	1ad3      	subs	r3, r2, r3
 8017426:	e020      	b.n	801746a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017430:	1ad3      	subs	r3, r2, r3
 8017432:	2b00      	cmp	r3, #0
 8017434:	dd03      	ble.n	801743e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	2200      	movs	r2, #0
 801743a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801743c:	e014      	b.n	8017468 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017446:	1ad3      	subs	r3, r2, r3
 8017448:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801744a:	68bb      	ldr	r3, [r7, #8]
 801744c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017450:	d306      	bcc.n	8017460 <tcp_update_rcv_ann_wnd+0x90>
 8017452:	4b08      	ldr	r3, [pc, #32]	; (8017474 <tcp_update_rcv_ann_wnd+0xa4>)
 8017454:	f240 32b6 	movw	r2, #950	; 0x3b6
 8017458:	4909      	ldr	r1, [pc, #36]	; (8017480 <tcp_update_rcv_ann_wnd+0xb0>)
 801745a:	4808      	ldr	r0, [pc, #32]	; (801747c <tcp_update_rcv_ann_wnd+0xac>)
 801745c:	f00c fdbc 	bl	8023fd8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8017460:	68bb      	ldr	r3, [r7, #8]
 8017462:	b29a      	uxth	r2, r3
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8017468:	2300      	movs	r3, #0
  }
}
 801746a:	4618      	mov	r0, r3
 801746c:	3710      	adds	r7, #16
 801746e:	46bd      	mov	sp, r7
 8017470:	bd80      	pop	{r7, pc}
 8017472:	bf00      	nop
 8017474:	08028a1c 	.word	0x08028a1c
 8017478:	08028c78 	.word	0x08028c78
 801747c:	08028a60 	.word	0x08028a60
 8017480:	08028c9c 	.word	0x08028c9c

08017484 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8017484:	b580      	push	{r7, lr}
 8017486:	b084      	sub	sp, #16
 8017488:	af00      	add	r7, sp, #0
 801748a:	6078      	str	r0, [r7, #4]
 801748c:	460b      	mov	r3, r1
 801748e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	2b00      	cmp	r3, #0
 8017494:	d107      	bne.n	80174a6 <tcp_recved+0x22>
 8017496:	4b1f      	ldr	r3, [pc, #124]	; (8017514 <tcp_recved+0x90>)
 8017498:	f240 32cf 	movw	r2, #975	; 0x3cf
 801749c:	491e      	ldr	r1, [pc, #120]	; (8017518 <tcp_recved+0x94>)
 801749e:	481f      	ldr	r0, [pc, #124]	; (801751c <tcp_recved+0x98>)
 80174a0:	f00c fd9a 	bl	8023fd8 <iprintf>
 80174a4:	e032      	b.n	801750c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	7d1b      	ldrb	r3, [r3, #20]
 80174aa:	2b01      	cmp	r3, #1
 80174ac:	d106      	bne.n	80174bc <tcp_recved+0x38>
 80174ae:	4b19      	ldr	r3, [pc, #100]	; (8017514 <tcp_recved+0x90>)
 80174b0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80174b4:	491a      	ldr	r1, [pc, #104]	; (8017520 <tcp_recved+0x9c>)
 80174b6:	4819      	ldr	r0, [pc, #100]	; (801751c <tcp_recved+0x98>)
 80174b8:	f00c fd8e 	bl	8023fd8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80174c0:	887b      	ldrh	r3, [r7, #2]
 80174c2:	4413      	add	r3, r2
 80174c4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80174c6:	89fb      	ldrh	r3, [r7, #14]
 80174c8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80174cc:	d804      	bhi.n	80174d8 <tcp_recved+0x54>
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80174d2:	89fa      	ldrh	r2, [r7, #14]
 80174d4:	429a      	cmp	r2, r3
 80174d6:	d204      	bcs.n	80174e2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80174de:	851a      	strh	r2, [r3, #40]	; 0x28
 80174e0:	e002      	b.n	80174e8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	89fa      	ldrh	r2, [r7, #14]
 80174e6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80174e8:	6878      	ldr	r0, [r7, #4]
 80174ea:	f7ff ff71 	bl	80173d0 <tcp_update_rcv_ann_wnd>
 80174ee:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80174f0:	68bb      	ldr	r3, [r7, #8]
 80174f2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80174f6:	d309      	bcc.n	801750c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	8b5b      	ldrh	r3, [r3, #26]
 80174fc:	f043 0302 	orr.w	r3, r3, #2
 8017500:	b29a      	uxth	r2, r3
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017506:	6878      	ldr	r0, [r7, #4]
 8017508:	f004 fbc8 	bl	801bc9c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801750c:	3710      	adds	r7, #16
 801750e:	46bd      	mov	sp, r7
 8017510:	bd80      	pop	{r7, pc}
 8017512:	bf00      	nop
 8017514:	08028a1c 	.word	0x08028a1c
 8017518:	08028cb8 	.word	0x08028cb8
 801751c:	08028a60 	.word	0x08028a60
 8017520:	08028cd0 	.word	0x08028cd0

08017524 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8017524:	b480      	push	{r7}
 8017526:	b083      	sub	sp, #12
 8017528:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801752a:	2300      	movs	r3, #0
 801752c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801752e:	4b1e      	ldr	r3, [pc, #120]	; (80175a8 <tcp_new_port+0x84>)
 8017530:	881b      	ldrh	r3, [r3, #0]
 8017532:	3301      	adds	r3, #1
 8017534:	b29a      	uxth	r2, r3
 8017536:	4b1c      	ldr	r3, [pc, #112]	; (80175a8 <tcp_new_port+0x84>)
 8017538:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801753a:	4b1b      	ldr	r3, [pc, #108]	; (80175a8 <tcp_new_port+0x84>)
 801753c:	881b      	ldrh	r3, [r3, #0]
 801753e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017542:	4293      	cmp	r3, r2
 8017544:	d103      	bne.n	801754e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8017546:	4b18      	ldr	r3, [pc, #96]	; (80175a8 <tcp_new_port+0x84>)
 8017548:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801754c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801754e:	2300      	movs	r3, #0
 8017550:	71fb      	strb	r3, [r7, #7]
 8017552:	e01e      	b.n	8017592 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8017554:	79fb      	ldrb	r3, [r7, #7]
 8017556:	4a15      	ldr	r2, [pc, #84]	; (80175ac <tcp_new_port+0x88>)
 8017558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	603b      	str	r3, [r7, #0]
 8017560:	e011      	b.n	8017586 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8017562:	683b      	ldr	r3, [r7, #0]
 8017564:	8ada      	ldrh	r2, [r3, #22]
 8017566:	4b10      	ldr	r3, [pc, #64]	; (80175a8 <tcp_new_port+0x84>)
 8017568:	881b      	ldrh	r3, [r3, #0]
 801756a:	429a      	cmp	r2, r3
 801756c:	d108      	bne.n	8017580 <tcp_new_port+0x5c>
        n++;
 801756e:	88bb      	ldrh	r3, [r7, #4]
 8017570:	3301      	adds	r3, #1
 8017572:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8017574:	88bb      	ldrh	r3, [r7, #4]
 8017576:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801757a:	d3d8      	bcc.n	801752e <tcp_new_port+0xa>
          return 0;
 801757c:	2300      	movs	r3, #0
 801757e:	e00d      	b.n	801759c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8017580:	683b      	ldr	r3, [r7, #0]
 8017582:	68db      	ldr	r3, [r3, #12]
 8017584:	603b      	str	r3, [r7, #0]
 8017586:	683b      	ldr	r3, [r7, #0]
 8017588:	2b00      	cmp	r3, #0
 801758a:	d1ea      	bne.n	8017562 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801758c:	79fb      	ldrb	r3, [r7, #7]
 801758e:	3301      	adds	r3, #1
 8017590:	71fb      	strb	r3, [r7, #7]
 8017592:	79fb      	ldrb	r3, [r7, #7]
 8017594:	2b03      	cmp	r3, #3
 8017596:	d9dd      	bls.n	8017554 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8017598:	4b03      	ldr	r3, [pc, #12]	; (80175a8 <tcp_new_port+0x84>)
 801759a:	881b      	ldrh	r3, [r3, #0]
}
 801759c:	4618      	mov	r0, r3
 801759e:	370c      	adds	r7, #12
 80175a0:	46bd      	mov	sp, r7
 80175a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a6:	4770      	bx	lr
 80175a8:	20000028 	.word	0x20000028
 80175ac:	0802af38 	.word	0x0802af38

080175b0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80175b0:	b5b0      	push	{r4, r5, r7, lr}
 80175b2:	b090      	sub	sp, #64	; 0x40
 80175b4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80175b6:	2300      	movs	r3, #0
 80175b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80175bc:	4b94      	ldr	r3, [pc, #592]	; (8017810 <tcp_slowtmr+0x260>)
 80175be:	681b      	ldr	r3, [r3, #0]
 80175c0:	3301      	adds	r3, #1
 80175c2:	4a93      	ldr	r2, [pc, #588]	; (8017810 <tcp_slowtmr+0x260>)
 80175c4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80175c6:	4b93      	ldr	r3, [pc, #588]	; (8017814 <tcp_slowtmr+0x264>)
 80175c8:	781b      	ldrb	r3, [r3, #0]
 80175ca:	3301      	adds	r3, #1
 80175cc:	b2da      	uxtb	r2, r3
 80175ce:	4b91      	ldr	r3, [pc, #580]	; (8017814 <tcp_slowtmr+0x264>)
 80175d0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80175d2:	2300      	movs	r3, #0
 80175d4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80175d6:	4b90      	ldr	r3, [pc, #576]	; (8017818 <tcp_slowtmr+0x268>)
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80175dc:	e2b7      	b.n	8017b4e <tcp_slowtmr+0x59e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80175de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175e0:	7d1b      	ldrb	r3, [r3, #20]
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d106      	bne.n	80175f4 <tcp_slowtmr+0x44>
 80175e6:	4b8d      	ldr	r3, [pc, #564]	; (801781c <tcp_slowtmr+0x26c>)
 80175e8:	f240 42be 	movw	r2, #1214	; 0x4be
 80175ec:	498c      	ldr	r1, [pc, #560]	; (8017820 <tcp_slowtmr+0x270>)
 80175ee:	488d      	ldr	r0, [pc, #564]	; (8017824 <tcp_slowtmr+0x274>)
 80175f0:	f00c fcf2 	bl	8023fd8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80175f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175f6:	7d1b      	ldrb	r3, [r3, #20]
 80175f8:	2b01      	cmp	r3, #1
 80175fa:	d106      	bne.n	801760a <tcp_slowtmr+0x5a>
 80175fc:	4b87      	ldr	r3, [pc, #540]	; (801781c <tcp_slowtmr+0x26c>)
 80175fe:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8017602:	4989      	ldr	r1, [pc, #548]	; (8017828 <tcp_slowtmr+0x278>)
 8017604:	4887      	ldr	r0, [pc, #540]	; (8017824 <tcp_slowtmr+0x274>)
 8017606:	f00c fce7 	bl	8023fd8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801760a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801760c:	7d1b      	ldrb	r3, [r3, #20]
 801760e:	2b0a      	cmp	r3, #10
 8017610:	d106      	bne.n	8017620 <tcp_slowtmr+0x70>
 8017612:	4b82      	ldr	r3, [pc, #520]	; (801781c <tcp_slowtmr+0x26c>)
 8017614:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8017618:	4984      	ldr	r1, [pc, #528]	; (801782c <tcp_slowtmr+0x27c>)
 801761a:	4882      	ldr	r0, [pc, #520]	; (8017824 <tcp_slowtmr+0x274>)
 801761c:	f00c fcdc 	bl	8023fd8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8017620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017622:	7f9a      	ldrb	r2, [r3, #30]
 8017624:	4b7b      	ldr	r3, [pc, #492]	; (8017814 <tcp_slowtmr+0x264>)
 8017626:	781b      	ldrb	r3, [r3, #0]
 8017628:	429a      	cmp	r2, r3
 801762a:	d105      	bne.n	8017638 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801762c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801762e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017632:	68db      	ldr	r3, [r3, #12]
 8017634:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8017636:	e28a      	b.n	8017b4e <tcp_slowtmr+0x59e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8017638:	4b76      	ldr	r3, [pc, #472]	; (8017814 <tcp_slowtmr+0x264>)
 801763a:	781a      	ldrb	r2, [r3, #0]
 801763c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801763e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8017640:	2300      	movs	r3, #0
 8017642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8017646:	2300      	movs	r3, #0
 8017648:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801764c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801764e:	7d1b      	ldrb	r3, [r3, #20]
 8017650:	2b02      	cmp	r3, #2
 8017652:	d10a      	bne.n	801766a <tcp_slowtmr+0xba>
 8017654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017656:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801765a:	2b05      	cmp	r3, #5
 801765c:	d905      	bls.n	801766a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801765e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017662:	3301      	adds	r3, #1
 8017664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017668:	e11e      	b.n	80178a8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801766a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801766c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017670:	2b0b      	cmp	r3, #11
 8017672:	d905      	bls.n	8017680 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8017674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017678:	3301      	adds	r3, #1
 801767a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801767e:	e113      	b.n	80178a8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8017680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017682:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8017686:	2b00      	cmp	r3, #0
 8017688:	d075      	beq.n	8017776 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801768a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801768c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801768e:	2b00      	cmp	r3, #0
 8017690:	d006      	beq.n	80176a0 <tcp_slowtmr+0xf0>
 8017692:	4b62      	ldr	r3, [pc, #392]	; (801781c <tcp_slowtmr+0x26c>)
 8017694:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8017698:	4965      	ldr	r1, [pc, #404]	; (8017830 <tcp_slowtmr+0x280>)
 801769a:	4862      	ldr	r0, [pc, #392]	; (8017824 <tcp_slowtmr+0x274>)
 801769c:	f00c fc9c 	bl	8023fd8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80176a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d106      	bne.n	80176b6 <tcp_slowtmr+0x106>
 80176a8:	4b5c      	ldr	r3, [pc, #368]	; (801781c <tcp_slowtmr+0x26c>)
 80176aa:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80176ae:	4961      	ldr	r1, [pc, #388]	; (8017834 <tcp_slowtmr+0x284>)
 80176b0:	485c      	ldr	r0, [pc, #368]	; (8017824 <tcp_slowtmr+0x274>)
 80176b2:	f00c fc91 	bl	8023fd8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80176b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176b8:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80176bc:	2b0b      	cmp	r3, #11
 80176be:	d905      	bls.n	80176cc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80176c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80176c4:	3301      	adds	r3, #1
 80176c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80176ca:	e0ed      	b.n	80178a8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80176cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176ce:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80176d2:	3b01      	subs	r3, #1
 80176d4:	4a58      	ldr	r2, [pc, #352]	; (8017838 <tcp_slowtmr+0x288>)
 80176d6:	5cd3      	ldrb	r3, [r2, r3]
 80176d8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80176da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176dc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80176e0:	7c7a      	ldrb	r2, [r7, #17]
 80176e2:	429a      	cmp	r2, r3
 80176e4:	d907      	bls.n	80176f6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80176e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176e8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80176ec:	3301      	adds	r3, #1
 80176ee:	b2da      	uxtb	r2, r3
 80176f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80176f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176f8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80176fc:	7c7a      	ldrb	r2, [r7, #17]
 80176fe:	429a      	cmp	r2, r3
 8017700:	f200 80d2 	bhi.w	80178a8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8017704:	2301      	movs	r3, #1
 8017706:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8017708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801770a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801770e:	2b00      	cmp	r3, #0
 8017710:	d108      	bne.n	8017724 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8017712:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017714:	f005 f96a 	bl	801c9ec <tcp_zero_window_probe>
 8017718:	4603      	mov	r3, r0
 801771a:	2b00      	cmp	r3, #0
 801771c:	d014      	beq.n	8017748 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801771e:	2300      	movs	r3, #0
 8017720:	623b      	str	r3, [r7, #32]
 8017722:	e011      	b.n	8017748 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8017724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017726:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801772a:	4619      	mov	r1, r3
 801772c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801772e:	f004 f82f 	bl	801b790 <tcp_split_unsent_seg>
 8017732:	4603      	mov	r3, r0
 8017734:	2b00      	cmp	r3, #0
 8017736:	d107      	bne.n	8017748 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8017738:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801773a:	f004 faaf 	bl	801bc9c <tcp_output>
 801773e:	4603      	mov	r3, r0
 8017740:	2b00      	cmp	r3, #0
 8017742:	d101      	bne.n	8017748 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8017744:	2300      	movs	r3, #0
 8017746:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8017748:	6a3b      	ldr	r3, [r7, #32]
 801774a:	2b00      	cmp	r3, #0
 801774c:	f000 80ac 	beq.w	80178a8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8017750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017752:	2200      	movs	r2, #0
 8017754:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8017758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801775a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 801775e:	2b06      	cmp	r3, #6
 8017760:	f200 80a2 	bhi.w	80178a8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8017764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017766:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 801776a:	3301      	adds	r3, #1
 801776c:	b2da      	uxtb	r2, r3
 801776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017770:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8017774:	e098      	b.n	80178a8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8017776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017778:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801777c:	2b00      	cmp	r3, #0
 801777e:	db0f      	blt.n	80177a0 <tcp_slowtmr+0x1f0>
 8017780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017782:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017786:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801778a:	4293      	cmp	r3, r2
 801778c:	d008      	beq.n	80177a0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017790:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017794:	b29b      	uxth	r3, r3
 8017796:	3301      	adds	r3, #1
 8017798:	b29b      	uxth	r3, r3
 801779a:	b21a      	sxth	r2, r3
 801779c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801779e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80177a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177a2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80177a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177a8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80177ac:	429a      	cmp	r2, r3
 80177ae:	db7b      	blt.n	80178a8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80177b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80177b2:	f004 fd67 	bl	801c284 <tcp_rexmit_rto_prepare>
 80177b6:	4603      	mov	r3, r0
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d007      	beq.n	80177cc <tcp_slowtmr+0x21c>
 80177bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d171      	bne.n	80178a8 <tcp_slowtmr+0x2f8>
 80177c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d06d      	beq.n	80178a8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80177cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177ce:	7d1b      	ldrb	r3, [r3, #20]
 80177d0:	2b02      	cmp	r3, #2
 80177d2:	d03a      	beq.n	801784a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80177d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80177da:	2b0c      	cmp	r3, #12
 80177dc:	bf28      	it	cs
 80177de:	230c      	movcs	r3, #12
 80177e0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80177e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80177e8:	10db      	asrs	r3, r3, #3
 80177ea:	b21b      	sxth	r3, r3
 80177ec:	461a      	mov	r2, r3
 80177ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80177f4:	4413      	add	r3, r2
 80177f6:	7efa      	ldrb	r2, [r7, #27]
 80177f8:	4910      	ldr	r1, [pc, #64]	; (801783c <tcp_slowtmr+0x28c>)
 80177fa:	5c8a      	ldrb	r2, [r1, r2]
 80177fc:	4093      	lsls	r3, r2
 80177fe:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8017800:	697b      	ldr	r3, [r7, #20]
 8017802:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8017806:	4293      	cmp	r3, r2
 8017808:	dc1a      	bgt.n	8017840 <tcp_slowtmr+0x290>
 801780a:	697b      	ldr	r3, [r7, #20]
 801780c:	b21a      	sxth	r2, r3
 801780e:	e019      	b.n	8017844 <tcp_slowtmr+0x294>
 8017810:	20013230 	.word	0x20013230
 8017814:	20013246 	.word	0x20013246
 8017818:	2001323c 	.word	0x2001323c
 801781c:	08028a1c 	.word	0x08028a1c
 8017820:	08028d60 	.word	0x08028d60
 8017824:	08028a60 	.word	0x08028a60
 8017828:	08028d8c 	.word	0x08028d8c
 801782c:	08028db8 	.word	0x08028db8
 8017830:	08028de8 	.word	0x08028de8
 8017834:	08028e1c 	.word	0x08028e1c
 8017838:	0802af30 	.word	0x0802af30
 801783c:	0802af20 	.word	0x0802af20
 8017840:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017846:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801784a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801784c:	2200      	movs	r2, #0
 801784e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8017850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017852:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017858:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801785c:	4293      	cmp	r3, r2
 801785e:	bf28      	it	cs
 8017860:	4613      	movcs	r3, r2
 8017862:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8017864:	8a7b      	ldrh	r3, [r7, #18]
 8017866:	085b      	lsrs	r3, r3, #1
 8017868:	b29a      	uxth	r2, r3
 801786a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801786c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8017870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017872:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017878:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801787a:	005b      	lsls	r3, r3, #1
 801787c:	b29b      	uxth	r3, r3
 801787e:	429a      	cmp	r2, r3
 8017880:	d206      	bcs.n	8017890 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8017882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017884:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017886:	005b      	lsls	r3, r3, #1
 8017888:	b29a      	uxth	r2, r3
 801788a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801788c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8017890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017892:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8017894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017896:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801789a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801789c:	2200      	movs	r2, #0
 801789e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80178a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80178a4:	f004 fd5e 	bl	801c364 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80178a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178aa:	7d1b      	ldrb	r3, [r3, #20]
 80178ac:	2b06      	cmp	r3, #6
 80178ae:	d111      	bne.n	80178d4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80178b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178b2:	8b5b      	ldrh	r3, [r3, #26]
 80178b4:	f003 0310 	and.w	r3, r3, #16
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d00b      	beq.n	80178d4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80178bc:	4b98      	ldr	r3, [pc, #608]	; (8017b20 <tcp_slowtmr+0x570>)
 80178be:	681a      	ldr	r2, [r3, #0]
 80178c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178c2:	6a1b      	ldr	r3, [r3, #32]
 80178c4:	1ad3      	subs	r3, r2, r3
 80178c6:	2b28      	cmp	r3, #40	; 0x28
 80178c8:	d904      	bls.n	80178d4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80178ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80178ce:	3301      	adds	r3, #1
 80178d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80178d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178d6:	7a5b      	ldrb	r3, [r3, #9]
 80178d8:	f003 0308 	and.w	r3, r3, #8
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d053      	beq.n	8017988 <tcp_slowtmr+0x3d8>
        ((pcb->state == ESTABLISHED) ||
 80178e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178e2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80178e4:	2b04      	cmp	r3, #4
 80178e6:	d003      	beq.n	80178f0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80178e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178ea:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80178ec:	2b07      	cmp	r3, #7
 80178ee:	d14b      	bne.n	8017988 <tcp_slowtmr+0x3d8>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80178f0:	4b8b      	ldr	r3, [pc, #556]	; (8017b20 <tcp_slowtmr+0x570>)
 80178f2:	681a      	ldr	r2, [r3, #0]
 80178f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178f6:	6a1b      	ldr	r3, [r3, #32]
 80178f8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80178fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178fc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8017900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017902:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017906:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017908:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 801790c:	fb00 f303 	mul.w	r3, r0, r3
 8017910:	440b      	add	r3, r1
 8017912:	4984      	ldr	r1, [pc, #528]	; (8017b24 <tcp_slowtmr+0x574>)
 8017914:	fba1 1303 	umull	r1, r3, r1, r3
 8017918:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801791a:	429a      	cmp	r2, r3
 801791c:	d90a      	bls.n	8017934 <tcp_slowtmr+0x384>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801791e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017922:	3301      	adds	r3, #1
 8017924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8017928:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801792c:	3301      	adds	r3, #1
 801792e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017932:	e029      	b.n	8017988 <tcp_slowtmr+0x3d8>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017934:	4b7a      	ldr	r3, [pc, #488]	; (8017b20 <tcp_slowtmr+0x570>)
 8017936:	681a      	ldr	r2, [r3, #0]
 8017938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801793a:	6a1b      	ldr	r3, [r3, #32]
 801793c:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801793e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017940:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8017944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017946:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 801794a:	4618      	mov	r0, r3
 801794c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801794e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017952:	fb00 f303 	mul.w	r3, r0, r3
 8017956:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8017958:	4972      	ldr	r1, [pc, #456]	; (8017b24 <tcp_slowtmr+0x574>)
 801795a:	fba1 1303 	umull	r1, r3, r1, r3
 801795e:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017960:	429a      	cmp	r2, r3
 8017962:	d911      	bls.n	8017988 <tcp_slowtmr+0x3d8>
        err = tcp_keepalive(pcb);
 8017964:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017966:	f005 f801 	bl	801c96c <tcp_keepalive>
 801796a:	4603      	mov	r3, r0
 801796c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8017970:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8017974:	2b00      	cmp	r3, #0
 8017976:	d107      	bne.n	8017988 <tcp_slowtmr+0x3d8>
          pcb->keep_cnt_sent++;
 8017978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801797a:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 801797e:	3301      	adds	r3, #1
 8017980:	b2da      	uxtb	r2, r3
 8017982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017984:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8017988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801798a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801798c:	2b00      	cmp	r3, #0
 801798e:	d011      	beq.n	80179b4 <tcp_slowtmr+0x404>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8017990:	4b63      	ldr	r3, [pc, #396]	; (8017b20 <tcp_slowtmr+0x570>)
 8017992:	681a      	ldr	r2, [r3, #0]
 8017994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017996:	6a1b      	ldr	r3, [r3, #32]
 8017998:	1ad2      	subs	r2, r2, r3
 801799a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801799c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80179a0:	4619      	mov	r1, r3
 80179a2:	460b      	mov	r3, r1
 80179a4:	005b      	lsls	r3, r3, #1
 80179a6:	440b      	add	r3, r1
 80179a8:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80179aa:	429a      	cmp	r2, r3
 80179ac:	d302      	bcc.n	80179b4 <tcp_slowtmr+0x404>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80179ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80179b0:	f000 feae 	bl	8018710 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80179b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179b6:	7d1b      	ldrb	r3, [r3, #20]
 80179b8:	2b03      	cmp	r3, #3
 80179ba:	d10b      	bne.n	80179d4 <tcp_slowtmr+0x424>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80179bc:	4b58      	ldr	r3, [pc, #352]	; (8017b20 <tcp_slowtmr+0x570>)
 80179be:	681a      	ldr	r2, [r3, #0]
 80179c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179c2:	6a1b      	ldr	r3, [r3, #32]
 80179c4:	1ad3      	subs	r3, r2, r3
 80179c6:	2b28      	cmp	r3, #40	; 0x28
 80179c8:	d904      	bls.n	80179d4 <tcp_slowtmr+0x424>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80179ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80179ce:	3301      	adds	r3, #1
 80179d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80179d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179d6:	7d1b      	ldrb	r3, [r3, #20]
 80179d8:	2b09      	cmp	r3, #9
 80179da:	d10b      	bne.n	80179f4 <tcp_slowtmr+0x444>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80179dc:	4b50      	ldr	r3, [pc, #320]	; (8017b20 <tcp_slowtmr+0x570>)
 80179de:	681a      	ldr	r2, [r3, #0]
 80179e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179e2:	6a1b      	ldr	r3, [r3, #32]
 80179e4:	1ad3      	subs	r3, r2, r3
 80179e6:	2bf0      	cmp	r3, #240	; 0xf0
 80179e8:	d904      	bls.n	80179f4 <tcp_slowtmr+0x444>
        ++pcb_remove;
 80179ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80179ee:	3301      	adds	r3, #1
 80179f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80179f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d060      	beq.n	8017abe <tcp_slowtmr+0x50e>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80179fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017a02:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8017a04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017a06:	f000 fccf 	bl	80183a8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8017a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	d010      	beq.n	8017a32 <tcp_slowtmr+0x482>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8017a10:	4b45      	ldr	r3, [pc, #276]	; (8017b28 <tcp_slowtmr+0x578>)
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017a16:	429a      	cmp	r2, r3
 8017a18:	d106      	bne.n	8017a28 <tcp_slowtmr+0x478>
 8017a1a:	4b44      	ldr	r3, [pc, #272]	; (8017b2c <tcp_slowtmr+0x57c>)
 8017a1c:	f240 526d 	movw	r2, #1389	; 0x56d
 8017a20:	4943      	ldr	r1, [pc, #268]	; (8017b30 <tcp_slowtmr+0x580>)
 8017a22:	4844      	ldr	r0, [pc, #272]	; (8017b34 <tcp_slowtmr+0x584>)
 8017a24:	f00c fad8 	bl	8023fd8 <iprintf>
        prev->next = pcb->next;
 8017a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a2a:	68da      	ldr	r2, [r3, #12]
 8017a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a2e:	60da      	str	r2, [r3, #12]
 8017a30:	e00f      	b.n	8017a52 <tcp_slowtmr+0x4a2>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8017a32:	4b3d      	ldr	r3, [pc, #244]	; (8017b28 <tcp_slowtmr+0x578>)
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017a38:	429a      	cmp	r2, r3
 8017a3a:	d006      	beq.n	8017a4a <tcp_slowtmr+0x49a>
 8017a3c:	4b3b      	ldr	r3, [pc, #236]	; (8017b2c <tcp_slowtmr+0x57c>)
 8017a3e:	f240 5271 	movw	r2, #1393	; 0x571
 8017a42:	493d      	ldr	r1, [pc, #244]	; (8017b38 <tcp_slowtmr+0x588>)
 8017a44:	483b      	ldr	r0, [pc, #236]	; (8017b34 <tcp_slowtmr+0x584>)
 8017a46:	f00c fac7 	bl	8023fd8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8017a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a4c:	68db      	ldr	r3, [r3, #12]
 8017a4e:	4a36      	ldr	r2, [pc, #216]	; (8017b28 <tcp_slowtmr+0x578>)
 8017a50:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8017a52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d013      	beq.n	8017a82 <tcp_slowtmr+0x4d2>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8017a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a5c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8017a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a60:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017a62:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8017a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a66:	3304      	adds	r3, #4
 8017a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017a6a:	8ad2      	ldrh	r2, [r2, #22]
 8017a6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017a6e:	8b09      	ldrh	r1, [r1, #24]
 8017a70:	9102      	str	r1, [sp, #8]
 8017a72:	9201      	str	r2, [sp, #4]
 8017a74:	9300      	str	r3, [sp, #0]
 8017a76:	462b      	mov	r3, r5
 8017a78:	4622      	mov	r2, r4
 8017a7a:	4601      	mov	r1, r0
 8017a7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017a7e:	f004 fec1 	bl	801c804 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8017a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a84:	691b      	ldr	r3, [r3, #16]
 8017a86:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8017a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a8a:	7d1b      	ldrb	r3, [r3, #20]
 8017a8c:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8017a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a90:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8017a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a94:	68db      	ldr	r3, [r3, #12]
 8017a96:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8017a98:	6838      	ldr	r0, [r7, #0]
 8017a9a:	f7fe ffb3 	bl	8016a04 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8017a9e:	4b27      	ldr	r3, [pc, #156]	; (8017b3c <tcp_slowtmr+0x58c>)
 8017aa0:	2200      	movs	r2, #0
 8017aa2:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d004      	beq.n	8017ab4 <tcp_slowtmr+0x504>
 8017aaa:	68fb      	ldr	r3, [r7, #12]
 8017aac:	f06f 010c 	mvn.w	r1, #12
 8017ab0:	68b8      	ldr	r0, [r7, #8]
 8017ab2:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8017ab4:	4b21      	ldr	r3, [pc, #132]	; (8017b3c <tcp_slowtmr+0x58c>)
 8017ab6:	781b      	ldrb	r3, [r3, #0]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d048      	beq.n	8017b4e <tcp_slowtmr+0x59e>
        goto tcp_slowtmr_start;
 8017abc:	e589      	b.n	80175d2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8017abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ac0:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ac4:	68db      	ldr	r3, [r3, #12]
 8017ac6:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8017ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017aca:	7f1b      	ldrb	r3, [r3, #28]
 8017acc:	3301      	adds	r3, #1
 8017ace:	b2da      	uxtb	r2, r3
 8017ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ad2:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8017ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ad6:	7f1a      	ldrb	r2, [r3, #28]
 8017ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ada:	7f5b      	ldrb	r3, [r3, #29]
 8017adc:	429a      	cmp	r2, r3
 8017ade:	d336      	bcc.n	8017b4e <tcp_slowtmr+0x59e>
        prev->polltmr = 0;
 8017ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ae2:	2200      	movs	r2, #0
 8017ae4:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8017ae6:	4b15      	ldr	r3, [pc, #84]	; (8017b3c <tcp_slowtmr+0x58c>)
 8017ae8:	2200      	movs	r2, #0
 8017aea:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8017aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d00b      	beq.n	8017b0e <tcp_slowtmr+0x55e>
 8017af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017afc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017afe:	6912      	ldr	r2, [r2, #16]
 8017b00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017b02:	4610      	mov	r0, r2
 8017b04:	4798      	blx	r3
 8017b06:	4603      	mov	r3, r0
 8017b08:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8017b0c:	e002      	b.n	8017b14 <tcp_slowtmr+0x564>
 8017b0e:	2300      	movs	r3, #0
 8017b10:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8017b14:	4b09      	ldr	r3, [pc, #36]	; (8017b3c <tcp_slowtmr+0x58c>)
 8017b16:	781b      	ldrb	r3, [r3, #0]
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d011      	beq.n	8017b40 <tcp_slowtmr+0x590>
          goto tcp_slowtmr_start;
 8017b1c:	e559      	b.n	80175d2 <tcp_slowtmr+0x22>
 8017b1e:	bf00      	nop
 8017b20:	20013230 	.word	0x20013230
 8017b24:	10624dd3 	.word	0x10624dd3
 8017b28:	2001323c 	.word	0x2001323c
 8017b2c:	08028a1c 	.word	0x08028a1c
 8017b30:	08028e54 	.word	0x08028e54
 8017b34:	08028a60 	.word	0x08028a60
 8017b38:	08028e80 	.word	0x08028e80
 8017b3c:	20013244 	.word	0x20013244
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8017b40:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d102      	bne.n	8017b4e <tcp_slowtmr+0x59e>
          tcp_output(prev);
 8017b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017b4a:	f004 f8a7 	bl	801bc9c <tcp_output>
  while (pcb != NULL) {
 8017b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	f47f ad44 	bne.w	80175de <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8017b56:	2300      	movs	r3, #0
 8017b58:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8017b5a:	4b2f      	ldr	r3, [pc, #188]	; (8017c18 <tcp_slowtmr+0x668>)
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8017b60:	e052      	b.n	8017c08 <tcp_slowtmr+0x658>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b64:	7d1b      	ldrb	r3, [r3, #20]
 8017b66:	2b0a      	cmp	r3, #10
 8017b68:	d006      	beq.n	8017b78 <tcp_slowtmr+0x5c8>
 8017b6a:	4b2c      	ldr	r3, [pc, #176]	; (8017c1c <tcp_slowtmr+0x66c>)
 8017b6c:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8017b70:	492b      	ldr	r1, [pc, #172]	; (8017c20 <tcp_slowtmr+0x670>)
 8017b72:	482c      	ldr	r0, [pc, #176]	; (8017c24 <tcp_slowtmr+0x674>)
 8017b74:	f00c fa30 	bl	8023fd8 <iprintf>
    pcb_remove = 0;
 8017b78:	2300      	movs	r3, #0
 8017b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8017b7e:	4b2a      	ldr	r3, [pc, #168]	; (8017c28 <tcp_slowtmr+0x678>)
 8017b80:	681a      	ldr	r2, [r3, #0]
 8017b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b84:	6a1b      	ldr	r3, [r3, #32]
 8017b86:	1ad3      	subs	r3, r2, r3
 8017b88:	2bf0      	cmp	r3, #240	; 0xf0
 8017b8a:	d904      	bls.n	8017b96 <tcp_slowtmr+0x5e6>
      ++pcb_remove;
 8017b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b90:	3301      	adds	r3, #1
 8017b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8017b96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d02f      	beq.n	8017bfe <tcp_slowtmr+0x64e>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8017b9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017ba0:	f000 fc02 	bl	80183a8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8017ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d010      	beq.n	8017bcc <tcp_slowtmr+0x61c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8017baa:	4b1b      	ldr	r3, [pc, #108]	; (8017c18 <tcp_slowtmr+0x668>)
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017bb0:	429a      	cmp	r2, r3
 8017bb2:	d106      	bne.n	8017bc2 <tcp_slowtmr+0x612>
 8017bb4:	4b19      	ldr	r3, [pc, #100]	; (8017c1c <tcp_slowtmr+0x66c>)
 8017bb6:	f240 52af 	movw	r2, #1455	; 0x5af
 8017bba:	491c      	ldr	r1, [pc, #112]	; (8017c2c <tcp_slowtmr+0x67c>)
 8017bbc:	4819      	ldr	r0, [pc, #100]	; (8017c24 <tcp_slowtmr+0x674>)
 8017bbe:	f00c fa0b 	bl	8023fd8 <iprintf>
        prev->next = pcb->next;
 8017bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bc4:	68da      	ldr	r2, [r3, #12]
 8017bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bc8:	60da      	str	r2, [r3, #12]
 8017bca:	e00f      	b.n	8017bec <tcp_slowtmr+0x63c>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8017bcc:	4b12      	ldr	r3, [pc, #72]	; (8017c18 <tcp_slowtmr+0x668>)
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017bd2:	429a      	cmp	r2, r3
 8017bd4:	d006      	beq.n	8017be4 <tcp_slowtmr+0x634>
 8017bd6:	4b11      	ldr	r3, [pc, #68]	; (8017c1c <tcp_slowtmr+0x66c>)
 8017bd8:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8017bdc:	4914      	ldr	r1, [pc, #80]	; (8017c30 <tcp_slowtmr+0x680>)
 8017bde:	4811      	ldr	r0, [pc, #68]	; (8017c24 <tcp_slowtmr+0x674>)
 8017be0:	f00c f9fa 	bl	8023fd8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8017be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017be6:	68db      	ldr	r3, [r3, #12]
 8017be8:	4a0b      	ldr	r2, [pc, #44]	; (8017c18 <tcp_slowtmr+0x668>)
 8017bea:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8017bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bee:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8017bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bf2:	68db      	ldr	r3, [r3, #12]
 8017bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8017bf6:	69f8      	ldr	r0, [r7, #28]
 8017bf8:	f7fe ff04 	bl	8016a04 <tcp_free>
 8017bfc:	e004      	b.n	8017c08 <tcp_slowtmr+0x658>
    } else {
      prev = pcb;
 8017bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c00:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c04:	68db      	ldr	r3, [r3, #12]
 8017c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8017c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d1a9      	bne.n	8017b62 <tcp_slowtmr+0x5b2>
    }
  }
}
 8017c0e:	bf00      	nop
 8017c10:	bf00      	nop
 8017c12:	3730      	adds	r7, #48	; 0x30
 8017c14:	46bd      	mov	sp, r7
 8017c16:	bdb0      	pop	{r4, r5, r7, pc}
 8017c18:	20013240 	.word	0x20013240
 8017c1c:	08028a1c 	.word	0x08028a1c
 8017c20:	08028eac 	.word	0x08028eac
 8017c24:	08028a60 	.word	0x08028a60
 8017c28:	20013230 	.word	0x20013230
 8017c2c:	08028edc 	.word	0x08028edc
 8017c30:	08028f04 	.word	0x08028f04

08017c34 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8017c34:	b580      	push	{r7, lr}
 8017c36:	b082      	sub	sp, #8
 8017c38:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8017c3a:	4b2d      	ldr	r3, [pc, #180]	; (8017cf0 <tcp_fasttmr+0xbc>)
 8017c3c:	781b      	ldrb	r3, [r3, #0]
 8017c3e:	3301      	adds	r3, #1
 8017c40:	b2da      	uxtb	r2, r3
 8017c42:	4b2b      	ldr	r3, [pc, #172]	; (8017cf0 <tcp_fasttmr+0xbc>)
 8017c44:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8017c46:	4b2b      	ldr	r3, [pc, #172]	; (8017cf4 <tcp_fasttmr+0xc0>)
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8017c4c:	e048      	b.n	8017ce0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	7f9a      	ldrb	r2, [r3, #30]
 8017c52:	4b27      	ldr	r3, [pc, #156]	; (8017cf0 <tcp_fasttmr+0xbc>)
 8017c54:	781b      	ldrb	r3, [r3, #0]
 8017c56:	429a      	cmp	r2, r3
 8017c58:	d03f      	beq.n	8017cda <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8017c5a:	4b25      	ldr	r3, [pc, #148]	; (8017cf0 <tcp_fasttmr+0xbc>)
 8017c5c:	781a      	ldrb	r2, [r3, #0]
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	8b5b      	ldrh	r3, [r3, #26]
 8017c66:	f003 0301 	and.w	r3, r3, #1
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d010      	beq.n	8017c90 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	8b5b      	ldrh	r3, [r3, #26]
 8017c72:	f043 0302 	orr.w	r3, r3, #2
 8017c76:	b29a      	uxth	r2, r3
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8017c7c:	6878      	ldr	r0, [r7, #4]
 8017c7e:	f004 f80d 	bl	801bc9c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	8b5b      	ldrh	r3, [r3, #26]
 8017c86:	f023 0303 	bic.w	r3, r3, #3
 8017c8a:	b29a      	uxth	r2, r3
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	8b5b      	ldrh	r3, [r3, #26]
 8017c94:	f003 0308 	and.w	r3, r3, #8
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d009      	beq.n	8017cb0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	8b5b      	ldrh	r3, [r3, #26]
 8017ca0:	f023 0308 	bic.w	r3, r3, #8
 8017ca4:	b29a      	uxth	r2, r3
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8017caa:	6878      	ldr	r0, [r7, #4]
 8017cac:	f7ff f83e 	bl	8016d2c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	68db      	ldr	r3, [r3, #12]
 8017cb4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d00a      	beq.n	8017cd4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8017cbe:	4b0e      	ldr	r3, [pc, #56]	; (8017cf8 <tcp_fasttmr+0xc4>)
 8017cc0:	2200      	movs	r2, #0
 8017cc2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8017cc4:	6878      	ldr	r0, [r7, #4]
 8017cc6:	f000 f819 	bl	8017cfc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8017cca:	4b0b      	ldr	r3, [pc, #44]	; (8017cf8 <tcp_fasttmr+0xc4>)
 8017ccc:	781b      	ldrb	r3, [r3, #0]
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d000      	beq.n	8017cd4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8017cd2:	e7b8      	b.n	8017c46 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8017cd4:	683b      	ldr	r3, [r7, #0]
 8017cd6:	607b      	str	r3, [r7, #4]
 8017cd8:	e002      	b.n	8017ce0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	68db      	ldr	r3, [r3, #12]
 8017cde:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d1b3      	bne.n	8017c4e <tcp_fasttmr+0x1a>
    }
  }
}
 8017ce6:	bf00      	nop
 8017ce8:	bf00      	nop
 8017cea:	3708      	adds	r7, #8
 8017cec:	46bd      	mov	sp, r7
 8017cee:	bd80      	pop	{r7, pc}
 8017cf0:	20013246 	.word	0x20013246
 8017cf4:	2001323c 	.word	0x2001323c
 8017cf8:	20013244 	.word	0x20013244

08017cfc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8017cfc:	b590      	push	{r4, r7, lr}
 8017cfe:	b085      	sub	sp, #20
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d109      	bne.n	8017d1e <tcp_process_refused_data+0x22>
 8017d0a:	4b37      	ldr	r3, [pc, #220]	; (8017de8 <tcp_process_refused_data+0xec>)
 8017d0c:	f240 6209 	movw	r2, #1545	; 0x609
 8017d10:	4936      	ldr	r1, [pc, #216]	; (8017dec <tcp_process_refused_data+0xf0>)
 8017d12:	4837      	ldr	r0, [pc, #220]	; (8017df0 <tcp_process_refused_data+0xf4>)
 8017d14:	f00c f960 	bl	8023fd8 <iprintf>
 8017d18:	f06f 030f 	mvn.w	r3, #15
 8017d1c:	e060      	b.n	8017de0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017d22:	7b5b      	ldrb	r3, [r3, #13]
 8017d24:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017d2a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	2200      	movs	r2, #0
 8017d30:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d00b      	beq.n	8017d54 <tcp_process_refused_data+0x58>
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	6918      	ldr	r0, [r3, #16]
 8017d46:	2300      	movs	r3, #0
 8017d48:	68ba      	ldr	r2, [r7, #8]
 8017d4a:	6879      	ldr	r1, [r7, #4]
 8017d4c:	47a0      	blx	r4
 8017d4e:	4603      	mov	r3, r0
 8017d50:	73fb      	strb	r3, [r7, #15]
 8017d52:	e007      	b.n	8017d64 <tcp_process_refused_data+0x68>
 8017d54:	2300      	movs	r3, #0
 8017d56:	68ba      	ldr	r2, [r7, #8]
 8017d58:	6879      	ldr	r1, [r7, #4]
 8017d5a:	2000      	movs	r0, #0
 8017d5c:	f000 f8a4 	bl	8017ea8 <tcp_recv_null>
 8017d60:	4603      	mov	r3, r0
 8017d62:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8017d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d12a      	bne.n	8017dc2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8017d6c:	7bbb      	ldrb	r3, [r7, #14]
 8017d6e:	f003 0320 	and.w	r3, r3, #32
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d033      	beq.n	8017dde <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017d7a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8017d7e:	d005      	beq.n	8017d8c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017d84:	3301      	adds	r3, #1
 8017d86:	b29a      	uxth	r2, r3
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d00b      	beq.n	8017dae <tcp_process_refused_data+0xb2>
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	6918      	ldr	r0, [r3, #16]
 8017da0:	2300      	movs	r3, #0
 8017da2:	2200      	movs	r2, #0
 8017da4:	6879      	ldr	r1, [r7, #4]
 8017da6:	47a0      	blx	r4
 8017da8:	4603      	mov	r3, r0
 8017daa:	73fb      	strb	r3, [r7, #15]
 8017dac:	e001      	b.n	8017db2 <tcp_process_refused_data+0xb6>
 8017dae:	2300      	movs	r3, #0
 8017db0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8017db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017db6:	f113 0f0d 	cmn.w	r3, #13
 8017dba:	d110      	bne.n	8017dde <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8017dbc:	f06f 030c 	mvn.w	r3, #12
 8017dc0:	e00e      	b.n	8017de0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8017dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017dc6:	f113 0f0d 	cmn.w	r3, #13
 8017dca:	d102      	bne.n	8017dd2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8017dcc:	f06f 030c 	mvn.w	r3, #12
 8017dd0:	e006      	b.n	8017de0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	68ba      	ldr	r2, [r7, #8]
 8017dd6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8017dd8:	f06f 0304 	mvn.w	r3, #4
 8017ddc:	e000      	b.n	8017de0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8017dde:	2300      	movs	r3, #0
}
 8017de0:	4618      	mov	r0, r3
 8017de2:	3714      	adds	r7, #20
 8017de4:	46bd      	mov	sp, r7
 8017de6:	bd90      	pop	{r4, r7, pc}
 8017de8:	08028a1c 	.word	0x08028a1c
 8017dec:	08028f2c 	.word	0x08028f2c
 8017df0:	08028a60 	.word	0x08028a60

08017df4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8017df4:	b580      	push	{r7, lr}
 8017df6:	b084      	sub	sp, #16
 8017df8:	af00      	add	r7, sp, #0
 8017dfa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8017dfc:	e007      	b.n	8017e0e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8017e04:	6878      	ldr	r0, [r7, #4]
 8017e06:	f000 f80a 	bl	8017e1e <tcp_seg_free>
    seg = next;
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d1f4      	bne.n	8017dfe <tcp_segs_free+0xa>
  }
}
 8017e14:	bf00      	nop
 8017e16:	bf00      	nop
 8017e18:	3710      	adds	r7, #16
 8017e1a:	46bd      	mov	sp, r7
 8017e1c:	bd80      	pop	{r7, pc}

08017e1e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8017e1e:	b580      	push	{r7, lr}
 8017e20:	b082      	sub	sp, #8
 8017e22:	af00      	add	r7, sp, #0
 8017e24:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d00c      	beq.n	8017e46 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	685b      	ldr	r3, [r3, #4]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d004      	beq.n	8017e3e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	685b      	ldr	r3, [r3, #4]
 8017e38:	4618      	mov	r0, r3
 8017e3a:	f7fe fb27 	bl	801648c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8017e3e:	6879      	ldr	r1, [r7, #4]
 8017e40:	2003      	movs	r0, #3
 8017e42:	f7fd fc73 	bl	801572c <memp_free>
  }
}
 8017e46:	bf00      	nop
 8017e48:	3708      	adds	r7, #8
 8017e4a:	46bd      	mov	sp, r7
 8017e4c:	bd80      	pop	{r7, pc}
	...

08017e50 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8017e50:	b580      	push	{r7, lr}
 8017e52:	b084      	sub	sp, #16
 8017e54:	af00      	add	r7, sp, #0
 8017e56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d106      	bne.n	8017e6c <tcp_seg_copy+0x1c>
 8017e5e:	4b0f      	ldr	r3, [pc, #60]	; (8017e9c <tcp_seg_copy+0x4c>)
 8017e60:	f240 6282 	movw	r2, #1666	; 0x682
 8017e64:	490e      	ldr	r1, [pc, #56]	; (8017ea0 <tcp_seg_copy+0x50>)
 8017e66:	480f      	ldr	r0, [pc, #60]	; (8017ea4 <tcp_seg_copy+0x54>)
 8017e68:	f00c f8b6 	bl	8023fd8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8017e6c:	2003      	movs	r0, #3
 8017e6e:	f7fd fbe7 	bl	8015640 <memp_malloc>
 8017e72:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	d101      	bne.n	8017e7e <tcp_seg_copy+0x2e>
    return NULL;
 8017e7a:	2300      	movs	r3, #0
 8017e7c:	e00a      	b.n	8017e94 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8017e7e:	2210      	movs	r2, #16
 8017e80:	6879      	ldr	r1, [r7, #4]
 8017e82:	68f8      	ldr	r0, [r7, #12]
 8017e84:	f00c fb91 	bl	80245aa <memcpy>
  pbuf_ref(cseg->p);
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	685b      	ldr	r3, [r3, #4]
 8017e8c:	4618      	mov	r0, r3
 8017e8e:	f7fe fba3 	bl	80165d8 <pbuf_ref>
  return cseg;
 8017e92:	68fb      	ldr	r3, [r7, #12]
}
 8017e94:	4618      	mov	r0, r3
 8017e96:	3710      	adds	r7, #16
 8017e98:	46bd      	mov	sp, r7
 8017e9a:	bd80      	pop	{r7, pc}
 8017e9c:	08028a1c 	.word	0x08028a1c
 8017ea0:	08028f70 	.word	0x08028f70
 8017ea4:	08028a60 	.word	0x08028a60

08017ea8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8017ea8:	b580      	push	{r7, lr}
 8017eaa:	b084      	sub	sp, #16
 8017eac:	af00      	add	r7, sp, #0
 8017eae:	60f8      	str	r0, [r7, #12]
 8017eb0:	60b9      	str	r1, [r7, #8]
 8017eb2:	607a      	str	r2, [r7, #4]
 8017eb4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8017eb6:	68bb      	ldr	r3, [r7, #8]
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d109      	bne.n	8017ed0 <tcp_recv_null+0x28>
 8017ebc:	4b12      	ldr	r3, [pc, #72]	; (8017f08 <tcp_recv_null+0x60>)
 8017ebe:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017ec2:	4912      	ldr	r1, [pc, #72]	; (8017f0c <tcp_recv_null+0x64>)
 8017ec4:	4812      	ldr	r0, [pc, #72]	; (8017f10 <tcp_recv_null+0x68>)
 8017ec6:	f00c f887 	bl	8023fd8 <iprintf>
 8017eca:	f06f 030f 	mvn.w	r3, #15
 8017ece:	e016      	b.n	8017efe <tcp_recv_null+0x56>

  if (p != NULL) {
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d009      	beq.n	8017eea <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	891b      	ldrh	r3, [r3, #8]
 8017eda:	4619      	mov	r1, r3
 8017edc:	68b8      	ldr	r0, [r7, #8]
 8017ede:	f7ff fad1 	bl	8017484 <tcp_recved>
    pbuf_free(p);
 8017ee2:	6878      	ldr	r0, [r7, #4]
 8017ee4:	f7fe fad2 	bl	801648c <pbuf_free>
 8017ee8:	e008      	b.n	8017efc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8017eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d104      	bne.n	8017efc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8017ef2:	68b8      	ldr	r0, [r7, #8]
 8017ef4:	f7fe ff84 	bl	8016e00 <tcp_close>
 8017ef8:	4603      	mov	r3, r0
 8017efa:	e000      	b.n	8017efe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8017efc:	2300      	movs	r3, #0
}
 8017efe:	4618      	mov	r0, r3
 8017f00:	3710      	adds	r7, #16
 8017f02:	46bd      	mov	sp, r7
 8017f04:	bd80      	pop	{r7, pc}
 8017f06:	bf00      	nop
 8017f08:	08028a1c 	.word	0x08028a1c
 8017f0c:	08028f8c 	.word	0x08028f8c
 8017f10:	08028a60 	.word	0x08028a60

08017f14 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8017f14:	b580      	push	{r7, lr}
 8017f16:	b086      	sub	sp, #24
 8017f18:	af00      	add	r7, sp, #0
 8017f1a:	4603      	mov	r3, r0
 8017f1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8017f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	db01      	blt.n	8017f2a <tcp_kill_prio+0x16>
 8017f26:	79fb      	ldrb	r3, [r7, #7]
 8017f28:	e000      	b.n	8017f2c <tcp_kill_prio+0x18>
 8017f2a:	237f      	movs	r3, #127	; 0x7f
 8017f2c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8017f2e:	7afb      	ldrb	r3, [r7, #11]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d034      	beq.n	8017f9e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8017f34:	7afb      	ldrb	r3, [r7, #11]
 8017f36:	3b01      	subs	r3, #1
 8017f38:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017f3e:	2300      	movs	r3, #0
 8017f40:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f42:	4b19      	ldr	r3, [pc, #100]	; (8017fa8 <tcp_kill_prio+0x94>)
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	617b      	str	r3, [r7, #20]
 8017f48:	e01f      	b.n	8017f8a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8017f4a:	697b      	ldr	r3, [r7, #20]
 8017f4c:	7d5b      	ldrb	r3, [r3, #21]
 8017f4e:	7afa      	ldrb	r2, [r7, #11]
 8017f50:	429a      	cmp	r2, r3
 8017f52:	d80c      	bhi.n	8017f6e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017f54:	697b      	ldr	r3, [r7, #20]
 8017f56:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8017f58:	7afa      	ldrb	r2, [r7, #11]
 8017f5a:	429a      	cmp	r2, r3
 8017f5c:	d112      	bne.n	8017f84 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017f5e:	4b13      	ldr	r3, [pc, #76]	; (8017fac <tcp_kill_prio+0x98>)
 8017f60:	681a      	ldr	r2, [r3, #0]
 8017f62:	697b      	ldr	r3, [r7, #20]
 8017f64:	6a1b      	ldr	r3, [r3, #32]
 8017f66:	1ad3      	subs	r3, r2, r3
 8017f68:	68fa      	ldr	r2, [r7, #12]
 8017f6a:	429a      	cmp	r2, r3
 8017f6c:	d80a      	bhi.n	8017f84 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8017f6e:	4b0f      	ldr	r3, [pc, #60]	; (8017fac <tcp_kill_prio+0x98>)
 8017f70:	681a      	ldr	r2, [r3, #0]
 8017f72:	697b      	ldr	r3, [r7, #20]
 8017f74:	6a1b      	ldr	r3, [r3, #32]
 8017f76:	1ad3      	subs	r3, r2, r3
 8017f78:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8017f7a:	697b      	ldr	r3, [r7, #20]
 8017f7c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8017f7e:	697b      	ldr	r3, [r7, #20]
 8017f80:	7d5b      	ldrb	r3, [r3, #21]
 8017f82:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f84:	697b      	ldr	r3, [r7, #20]
 8017f86:	68db      	ldr	r3, [r3, #12]
 8017f88:	617b      	str	r3, [r7, #20]
 8017f8a:	697b      	ldr	r3, [r7, #20]
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d1dc      	bne.n	8017f4a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8017f90:	693b      	ldr	r3, [r7, #16]
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d004      	beq.n	8017fa0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8017f96:	6938      	ldr	r0, [r7, #16]
 8017f98:	f7ff f878 	bl	801708c <tcp_abort>
 8017f9c:	e000      	b.n	8017fa0 <tcp_kill_prio+0x8c>
    return;
 8017f9e:	bf00      	nop
  }
}
 8017fa0:	3718      	adds	r7, #24
 8017fa2:	46bd      	mov	sp, r7
 8017fa4:	bd80      	pop	{r7, pc}
 8017fa6:	bf00      	nop
 8017fa8:	2001323c 	.word	0x2001323c
 8017fac:	20013230 	.word	0x20013230

08017fb0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8017fb0:	b580      	push	{r7, lr}
 8017fb2:	b086      	sub	sp, #24
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8017fba:	79fb      	ldrb	r3, [r7, #7]
 8017fbc:	2b08      	cmp	r3, #8
 8017fbe:	d009      	beq.n	8017fd4 <tcp_kill_state+0x24>
 8017fc0:	79fb      	ldrb	r3, [r7, #7]
 8017fc2:	2b09      	cmp	r3, #9
 8017fc4:	d006      	beq.n	8017fd4 <tcp_kill_state+0x24>
 8017fc6:	4b1a      	ldr	r3, [pc, #104]	; (8018030 <tcp_kill_state+0x80>)
 8017fc8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8017fcc:	4919      	ldr	r1, [pc, #100]	; (8018034 <tcp_kill_state+0x84>)
 8017fce:	481a      	ldr	r0, [pc, #104]	; (8018038 <tcp_kill_state+0x88>)
 8017fd0:	f00c f802 	bl	8023fd8 <iprintf>

  inactivity = 0;
 8017fd4:	2300      	movs	r3, #0
 8017fd6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017fd8:	2300      	movs	r3, #0
 8017fda:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017fdc:	4b17      	ldr	r3, [pc, #92]	; (801803c <tcp_kill_state+0x8c>)
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	617b      	str	r3, [r7, #20]
 8017fe2:	e017      	b.n	8018014 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8017fe4:	697b      	ldr	r3, [r7, #20]
 8017fe6:	7d1b      	ldrb	r3, [r3, #20]
 8017fe8:	79fa      	ldrb	r2, [r7, #7]
 8017fea:	429a      	cmp	r2, r3
 8017fec:	d10f      	bne.n	801800e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017fee:	4b14      	ldr	r3, [pc, #80]	; (8018040 <tcp_kill_state+0x90>)
 8017ff0:	681a      	ldr	r2, [r3, #0]
 8017ff2:	697b      	ldr	r3, [r7, #20]
 8017ff4:	6a1b      	ldr	r3, [r3, #32]
 8017ff6:	1ad3      	subs	r3, r2, r3
 8017ff8:	68fa      	ldr	r2, [r7, #12]
 8017ffa:	429a      	cmp	r2, r3
 8017ffc:	d807      	bhi.n	801800e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8017ffe:	4b10      	ldr	r3, [pc, #64]	; (8018040 <tcp_kill_state+0x90>)
 8018000:	681a      	ldr	r2, [r3, #0]
 8018002:	697b      	ldr	r3, [r7, #20]
 8018004:	6a1b      	ldr	r3, [r3, #32]
 8018006:	1ad3      	subs	r3, r2, r3
 8018008:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801800a:	697b      	ldr	r3, [r7, #20]
 801800c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801800e:	697b      	ldr	r3, [r7, #20]
 8018010:	68db      	ldr	r3, [r3, #12]
 8018012:	617b      	str	r3, [r7, #20]
 8018014:	697b      	ldr	r3, [r7, #20]
 8018016:	2b00      	cmp	r3, #0
 8018018:	d1e4      	bne.n	8017fe4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801801a:	693b      	ldr	r3, [r7, #16]
 801801c:	2b00      	cmp	r3, #0
 801801e:	d003      	beq.n	8018028 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8018020:	2100      	movs	r1, #0
 8018022:	6938      	ldr	r0, [r7, #16]
 8018024:	f7fe ff74 	bl	8016f10 <tcp_abandon>
  }
}
 8018028:	bf00      	nop
 801802a:	3718      	adds	r7, #24
 801802c:	46bd      	mov	sp, r7
 801802e:	bd80      	pop	{r7, pc}
 8018030:	08028a1c 	.word	0x08028a1c
 8018034:	08028fa8 	.word	0x08028fa8
 8018038:	08028a60 	.word	0x08028a60
 801803c:	2001323c 	.word	0x2001323c
 8018040:	20013230 	.word	0x20013230

08018044 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8018044:	b580      	push	{r7, lr}
 8018046:	b084      	sub	sp, #16
 8018048:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801804a:	2300      	movs	r3, #0
 801804c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801804e:	2300      	movs	r3, #0
 8018050:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018052:	4b12      	ldr	r3, [pc, #72]	; (801809c <tcp_kill_timewait+0x58>)
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	60fb      	str	r3, [r7, #12]
 8018058:	e012      	b.n	8018080 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801805a:	4b11      	ldr	r3, [pc, #68]	; (80180a0 <tcp_kill_timewait+0x5c>)
 801805c:	681a      	ldr	r2, [r3, #0]
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	6a1b      	ldr	r3, [r3, #32]
 8018062:	1ad3      	subs	r3, r2, r3
 8018064:	687a      	ldr	r2, [r7, #4]
 8018066:	429a      	cmp	r2, r3
 8018068:	d807      	bhi.n	801807a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801806a:	4b0d      	ldr	r3, [pc, #52]	; (80180a0 <tcp_kill_timewait+0x5c>)
 801806c:	681a      	ldr	r2, [r3, #0]
 801806e:	68fb      	ldr	r3, [r7, #12]
 8018070:	6a1b      	ldr	r3, [r3, #32]
 8018072:	1ad3      	subs	r3, r2, r3
 8018074:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	68db      	ldr	r3, [r3, #12]
 801807e:	60fb      	str	r3, [r7, #12]
 8018080:	68fb      	ldr	r3, [r7, #12]
 8018082:	2b00      	cmp	r3, #0
 8018084:	d1e9      	bne.n	801805a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8018086:	68bb      	ldr	r3, [r7, #8]
 8018088:	2b00      	cmp	r3, #0
 801808a:	d002      	beq.n	8018092 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801808c:	68b8      	ldr	r0, [r7, #8]
 801808e:	f7fe fffd 	bl	801708c <tcp_abort>
  }
}
 8018092:	bf00      	nop
 8018094:	3710      	adds	r7, #16
 8018096:	46bd      	mov	sp, r7
 8018098:	bd80      	pop	{r7, pc}
 801809a:	bf00      	nop
 801809c:	20013240 	.word	0x20013240
 80180a0:	20013230 	.word	0x20013230

080180a4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80180a4:	b580      	push	{r7, lr}
 80180a6:	b082      	sub	sp, #8
 80180a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80180aa:	4b10      	ldr	r3, [pc, #64]	; (80180ec <tcp_handle_closepend+0x48>)
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80180b0:	e014      	b.n	80180dc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	68db      	ldr	r3, [r3, #12]
 80180b6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	8b5b      	ldrh	r3, [r3, #26]
 80180bc:	f003 0308 	and.w	r3, r3, #8
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d009      	beq.n	80180d8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	8b5b      	ldrh	r3, [r3, #26]
 80180c8:	f023 0308 	bic.w	r3, r3, #8
 80180cc:	b29a      	uxth	r2, r3
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80180d2:	6878      	ldr	r0, [r7, #4]
 80180d4:	f7fe fe2a 	bl	8016d2c <tcp_close_shutdown_fin>
    }
    pcb = next;
 80180d8:	683b      	ldr	r3, [r7, #0]
 80180da:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d1e7      	bne.n	80180b2 <tcp_handle_closepend+0xe>
  }
}
 80180e2:	bf00      	nop
 80180e4:	bf00      	nop
 80180e6:	3708      	adds	r7, #8
 80180e8:	46bd      	mov	sp, r7
 80180ea:	bd80      	pop	{r7, pc}
 80180ec:	2001323c 	.word	0x2001323c

080180f0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	b084      	sub	sp, #16
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	4603      	mov	r3, r0
 80180f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80180fa:	2001      	movs	r0, #1
 80180fc:	f7fd faa0 	bl	8015640 <memp_malloc>
 8018100:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8018102:	68fb      	ldr	r3, [r7, #12]
 8018104:	2b00      	cmp	r3, #0
 8018106:	d126      	bne.n	8018156 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8018108:	f7ff ffcc 	bl	80180a4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801810c:	f7ff ff9a 	bl	8018044 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018110:	2001      	movs	r0, #1
 8018112:	f7fd fa95 	bl	8015640 <memp_malloc>
 8018116:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	2b00      	cmp	r3, #0
 801811c:	d11b      	bne.n	8018156 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801811e:	2009      	movs	r0, #9
 8018120:	f7ff ff46 	bl	8017fb0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018124:	2001      	movs	r0, #1
 8018126:	f7fd fa8b 	bl	8015640 <memp_malloc>
 801812a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d111      	bne.n	8018156 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8018132:	2008      	movs	r0, #8
 8018134:	f7ff ff3c 	bl	8017fb0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018138:	2001      	movs	r0, #1
 801813a:	f7fd fa81 	bl	8015640 <memp_malloc>
 801813e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	2b00      	cmp	r3, #0
 8018144:	d107      	bne.n	8018156 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8018146:	79fb      	ldrb	r3, [r7, #7]
 8018148:	4618      	mov	r0, r3
 801814a:	f7ff fee3 	bl	8017f14 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801814e:	2001      	movs	r0, #1
 8018150:	f7fd fa76 	bl	8015640 <memp_malloc>
 8018154:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8018156:	68fb      	ldr	r3, [r7, #12]
 8018158:	2b00      	cmp	r3, #0
 801815a:	d047      	beq.n	80181ec <tcp_alloc+0xfc>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801815c:	22a4      	movs	r2, #164	; 0xa4
 801815e:	2100      	movs	r1, #0
 8018160:	68f8      	ldr	r0, [r7, #12]
 8018162:	f00c f8fd 	bl	8024360 <memset>
    pcb->prio = prio;
 8018166:	68fb      	ldr	r3, [r7, #12]
 8018168:	79fa      	ldrb	r2, [r7, #7]
 801816a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8018172:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801817c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801817e:	68fb      	ldr	r3, [r7, #12]
 8018180:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8018182:	68fb      	ldr	r3, [r7, #12]
 8018184:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8018186:	68fb      	ldr	r3, [r7, #12]
 8018188:	22ff      	movs	r2, #255	; 0xff
 801818a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801818c:	68fb      	ldr	r3, [r7, #12]
 801818e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8018192:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	2206      	movs	r2, #6
 8018198:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	2206      	movs	r2, #6
 80181a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80181a2:	68fb      	ldr	r3, [r7, #12]
 80181a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80181a8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80181aa:	68fb      	ldr	r3, [r7, #12]
 80181ac:	2201      	movs	r2, #1
 80181ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80181b2:	4b11      	ldr	r3, [pc, #68]	; (80181f8 <tcp_alloc+0x108>)
 80181b4:	681a      	ldr	r2, [r3, #0]
 80181b6:	68fb      	ldr	r3, [r7, #12]
 80181b8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80181ba:	4b10      	ldr	r3, [pc, #64]	; (80181fc <tcp_alloc+0x10c>)
 80181bc:	781a      	ldrb	r2, [r3, #0]
 80181be:	68fb      	ldr	r3, [r7, #12]
 80181c0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80181c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80181cc:	68fb      	ldr	r3, [r7, #12]
 80181ce:	4a0c      	ldr	r2, [pc, #48]	; (8018200 <tcp_alloc+0x110>)
 80181d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80181d4:	68fb      	ldr	r3, [r7, #12]
 80181d6:	4a0b      	ldr	r2, [pc, #44]	; (8018204 <tcp_alloc+0x114>)
 80181d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 80181dc:	68fb      	ldr	r3, [r7, #12]
 80181de:	4a0a      	ldr	r2, [pc, #40]	; (8018208 <tcp_alloc+0x118>)
 80181e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	2209      	movs	r2, #9
 80181e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80181ec:	68fb      	ldr	r3, [r7, #12]
}
 80181ee:	4618      	mov	r0, r3
 80181f0:	3710      	adds	r7, #16
 80181f2:	46bd      	mov	sp, r7
 80181f4:	bd80      	pop	{r7, pc}
 80181f6:	bf00      	nop
 80181f8:	20013230 	.word	0x20013230
 80181fc:	20013246 	.word	0x20013246
 8018200:	08017ea9 	.word	0x08017ea9
 8018204:	006ddd00 	.word	0x006ddd00
 8018208:	000124f8 	.word	0x000124f8

0801820c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801820c:	b580      	push	{r7, lr}
 801820e:	b084      	sub	sp, #16
 8018210:	af00      	add	r7, sp, #0
 8018212:	4603      	mov	r3, r0
 8018214:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8018216:	2040      	movs	r0, #64	; 0x40
 8018218:	f7ff ff6a 	bl	80180f0 <tcp_alloc>
 801821c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801821e:	68fb      	ldr	r3, [r7, #12]
}
 8018220:	4618      	mov	r0, r3
 8018222:	3710      	adds	r7, #16
 8018224:	46bd      	mov	sp, r7
 8018226:	bd80      	pop	{r7, pc}

08018228 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8018228:	b480      	push	{r7}
 801822a:	b083      	sub	sp, #12
 801822c:	af00      	add	r7, sp, #0
 801822e:	6078      	str	r0, [r7, #4]
 8018230:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	2b00      	cmp	r3, #0
 8018236:	d002      	beq.n	801823e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	683a      	ldr	r2, [r7, #0]
 801823c:	611a      	str	r2, [r3, #16]
  }
}
 801823e:	bf00      	nop
 8018240:	370c      	adds	r7, #12
 8018242:	46bd      	mov	sp, r7
 8018244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018248:	4770      	bx	lr
	...

0801824c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801824c:	b580      	push	{r7, lr}
 801824e:	b082      	sub	sp, #8
 8018250:	af00      	add	r7, sp, #0
 8018252:	6078      	str	r0, [r7, #4]
 8018254:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d00e      	beq.n	801827a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	7d1b      	ldrb	r3, [r3, #20]
 8018260:	2b01      	cmp	r3, #1
 8018262:	d106      	bne.n	8018272 <tcp_recv+0x26>
 8018264:	4b07      	ldr	r3, [pc, #28]	; (8018284 <tcp_recv+0x38>)
 8018266:	f240 72df 	movw	r2, #2015	; 0x7df
 801826a:	4907      	ldr	r1, [pc, #28]	; (8018288 <tcp_recv+0x3c>)
 801826c:	4807      	ldr	r0, [pc, #28]	; (801828c <tcp_recv+0x40>)
 801826e:	f00b feb3 	bl	8023fd8 <iprintf>
    pcb->recv = recv;
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	683a      	ldr	r2, [r7, #0]
 8018276:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801827a:	bf00      	nop
 801827c:	3708      	adds	r7, #8
 801827e:	46bd      	mov	sp, r7
 8018280:	bd80      	pop	{r7, pc}
 8018282:	bf00      	nop
 8018284:	08028a1c 	.word	0x08028a1c
 8018288:	08028fb8 	.word	0x08028fb8
 801828c:	08028a60 	.word	0x08028a60

08018290 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8018290:	b580      	push	{r7, lr}
 8018292:	b082      	sub	sp, #8
 8018294:	af00      	add	r7, sp, #0
 8018296:	6078      	str	r0, [r7, #4]
 8018298:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	2b00      	cmp	r3, #0
 801829e:	d00e      	beq.n	80182be <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	7d1b      	ldrb	r3, [r3, #20]
 80182a4:	2b01      	cmp	r3, #1
 80182a6:	d106      	bne.n	80182b6 <tcp_sent+0x26>
 80182a8:	4b07      	ldr	r3, [pc, #28]	; (80182c8 <tcp_sent+0x38>)
 80182aa:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80182ae:	4907      	ldr	r1, [pc, #28]	; (80182cc <tcp_sent+0x3c>)
 80182b0:	4807      	ldr	r0, [pc, #28]	; (80182d0 <tcp_sent+0x40>)
 80182b2:	f00b fe91 	bl	8023fd8 <iprintf>
    pcb->sent = sent;
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	683a      	ldr	r2, [r7, #0]
 80182ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80182be:	bf00      	nop
 80182c0:	3708      	adds	r7, #8
 80182c2:	46bd      	mov	sp, r7
 80182c4:	bd80      	pop	{r7, pc}
 80182c6:	bf00      	nop
 80182c8:	08028a1c 	.word	0x08028a1c
 80182cc:	08028fe0 	.word	0x08028fe0
 80182d0:	08028a60 	.word	0x08028a60

080182d4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80182d4:	b580      	push	{r7, lr}
 80182d6:	b082      	sub	sp, #8
 80182d8:	af00      	add	r7, sp, #0
 80182da:	6078      	str	r0, [r7, #4]
 80182dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d00e      	beq.n	8018302 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	7d1b      	ldrb	r3, [r3, #20]
 80182e8:	2b01      	cmp	r3, #1
 80182ea:	d106      	bne.n	80182fa <tcp_err+0x26>
 80182ec:	4b07      	ldr	r3, [pc, #28]	; (801830c <tcp_err+0x38>)
 80182ee:	f640 020d 	movw	r2, #2061	; 0x80d
 80182f2:	4907      	ldr	r1, [pc, #28]	; (8018310 <tcp_err+0x3c>)
 80182f4:	4807      	ldr	r0, [pc, #28]	; (8018314 <tcp_err+0x40>)
 80182f6:	f00b fe6f 	bl	8023fd8 <iprintf>
    pcb->errf = err;
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	683a      	ldr	r2, [r7, #0]
 80182fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8018302:	bf00      	nop
 8018304:	3708      	adds	r7, #8
 8018306:	46bd      	mov	sp, r7
 8018308:	bd80      	pop	{r7, pc}
 801830a:	bf00      	nop
 801830c:	08028a1c 	.word	0x08028a1c
 8018310:	08029008 	.word	0x08029008
 8018314:	08028a60 	.word	0x08028a60

08018318 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8018318:	b480      	push	{r7}
 801831a:	b085      	sub	sp, #20
 801831c:	af00      	add	r7, sp, #0
 801831e:	6078      	str	r0, [r7, #4]
 8018320:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	2b00      	cmp	r3, #0
 8018326:	d008      	beq.n	801833a <tcp_accept+0x22>
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	7d1b      	ldrb	r3, [r3, #20]
 801832c:	2b01      	cmp	r3, #1
 801832e:	d104      	bne.n	801833a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8018334:	68fb      	ldr	r3, [r7, #12]
 8018336:	683a      	ldr	r2, [r7, #0]
 8018338:	619a      	str	r2, [r3, #24]
  }
}
 801833a:	bf00      	nop
 801833c:	3714      	adds	r7, #20
 801833e:	46bd      	mov	sp, r7
 8018340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018344:	4770      	bx	lr
	...

08018348 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8018348:	b580      	push	{r7, lr}
 801834a:	b084      	sub	sp, #16
 801834c:	af00      	add	r7, sp, #0
 801834e:	60f8      	str	r0, [r7, #12]
 8018350:	60b9      	str	r1, [r7, #8]
 8018352:	4613      	mov	r3, r2
 8018354:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	2b00      	cmp	r3, #0
 801835a:	d107      	bne.n	801836c <tcp_poll+0x24>
 801835c:	4b0e      	ldr	r3, [pc, #56]	; (8018398 <tcp_poll+0x50>)
 801835e:	f640 023d 	movw	r2, #2109	; 0x83d
 8018362:	490e      	ldr	r1, [pc, #56]	; (801839c <tcp_poll+0x54>)
 8018364:	480e      	ldr	r0, [pc, #56]	; (80183a0 <tcp_poll+0x58>)
 8018366:	f00b fe37 	bl	8023fd8 <iprintf>
 801836a:	e011      	b.n	8018390 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	7d1b      	ldrb	r3, [r3, #20]
 8018370:	2b01      	cmp	r3, #1
 8018372:	d106      	bne.n	8018382 <tcp_poll+0x3a>
 8018374:	4b08      	ldr	r3, [pc, #32]	; (8018398 <tcp_poll+0x50>)
 8018376:	f640 023e 	movw	r2, #2110	; 0x83e
 801837a:	490a      	ldr	r1, [pc, #40]	; (80183a4 <tcp_poll+0x5c>)
 801837c:	4808      	ldr	r0, [pc, #32]	; (80183a0 <tcp_poll+0x58>)
 801837e:	f00b fe2b 	bl	8023fd8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	68ba      	ldr	r2, [r7, #8]
 8018386:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801838a:	68fb      	ldr	r3, [r7, #12]
 801838c:	79fa      	ldrb	r2, [r7, #7]
 801838e:	775a      	strb	r2, [r3, #29]
}
 8018390:	3710      	adds	r7, #16
 8018392:	46bd      	mov	sp, r7
 8018394:	bd80      	pop	{r7, pc}
 8018396:	bf00      	nop
 8018398:	08028a1c 	.word	0x08028a1c
 801839c:	08029030 	.word	0x08029030
 80183a0:	08028a60 	.word	0x08028a60
 80183a4:	08029048 	.word	0x08029048

080183a8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80183a8:	b580      	push	{r7, lr}
 80183aa:	b082      	sub	sp, #8
 80183ac:	af00      	add	r7, sp, #0
 80183ae:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d107      	bne.n	80183c6 <tcp_pcb_purge+0x1e>
 80183b6:	4b21      	ldr	r3, [pc, #132]	; (801843c <tcp_pcb_purge+0x94>)
 80183b8:	f640 0251 	movw	r2, #2129	; 0x851
 80183bc:	4920      	ldr	r1, [pc, #128]	; (8018440 <tcp_pcb_purge+0x98>)
 80183be:	4821      	ldr	r0, [pc, #132]	; (8018444 <tcp_pcb_purge+0x9c>)
 80183c0:	f00b fe0a 	bl	8023fd8 <iprintf>
 80183c4:	e037      	b.n	8018436 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	7d1b      	ldrb	r3, [r3, #20]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d033      	beq.n	8018436 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80183d2:	2b0a      	cmp	r3, #10
 80183d4:	d02f      	beq.n	8018436 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80183da:	2b01      	cmp	r3, #1
 80183dc:	d02b      	beq.n	8018436 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	d007      	beq.n	80183f6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80183ea:	4618      	mov	r0, r3
 80183ec:	f7fe f84e 	bl	801648c <pbuf_free>
      pcb->refused_data = NULL;
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	2200      	movs	r2, #0
 80183f4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d002      	beq.n	8018404 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80183fe:	6878      	ldr	r0, [r7, #4]
 8018400:	f000 f986 	bl	8018710 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801840a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018410:	4618      	mov	r0, r3
 8018412:	f7ff fcef 	bl	8017df4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801841a:	4618      	mov	r0, r3
 801841c:	f7ff fcea 	bl	8017df4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	2200      	movs	r2, #0
 8018424:	66da      	str	r2, [r3, #108]	; 0x6c
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	2200      	movs	r2, #0
 8018432:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8018436:	3708      	adds	r7, #8
 8018438:	46bd      	mov	sp, r7
 801843a:	bd80      	pop	{r7, pc}
 801843c:	08028a1c 	.word	0x08028a1c
 8018440:	08029068 	.word	0x08029068
 8018444:	08028a60 	.word	0x08028a60

08018448 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8018448:	b580      	push	{r7, lr}
 801844a:	b084      	sub	sp, #16
 801844c:	af00      	add	r7, sp, #0
 801844e:	6078      	str	r0, [r7, #4]
 8018450:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8018452:	683b      	ldr	r3, [r7, #0]
 8018454:	2b00      	cmp	r3, #0
 8018456:	d106      	bne.n	8018466 <tcp_pcb_remove+0x1e>
 8018458:	4b3e      	ldr	r3, [pc, #248]	; (8018554 <tcp_pcb_remove+0x10c>)
 801845a:	f640 0283 	movw	r2, #2179	; 0x883
 801845e:	493e      	ldr	r1, [pc, #248]	; (8018558 <tcp_pcb_remove+0x110>)
 8018460:	483e      	ldr	r0, [pc, #248]	; (801855c <tcp_pcb_remove+0x114>)
 8018462:	f00b fdb9 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	2b00      	cmp	r3, #0
 801846a:	d106      	bne.n	801847a <tcp_pcb_remove+0x32>
 801846c:	4b39      	ldr	r3, [pc, #228]	; (8018554 <tcp_pcb_remove+0x10c>)
 801846e:	f640 0284 	movw	r2, #2180	; 0x884
 8018472:	493b      	ldr	r1, [pc, #236]	; (8018560 <tcp_pcb_remove+0x118>)
 8018474:	4839      	ldr	r0, [pc, #228]	; (801855c <tcp_pcb_remove+0x114>)
 8018476:	f00b fdaf 	bl	8023fd8 <iprintf>

  TCP_RMV(pcblist, pcb);
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	683a      	ldr	r2, [r7, #0]
 8018480:	429a      	cmp	r2, r3
 8018482:	d105      	bne.n	8018490 <tcp_pcb_remove+0x48>
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	68da      	ldr	r2, [r3, #12]
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	601a      	str	r2, [r3, #0]
 801848e:	e013      	b.n	80184b8 <tcp_pcb_remove+0x70>
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	60fb      	str	r3, [r7, #12]
 8018496:	e00c      	b.n	80184b2 <tcp_pcb_remove+0x6a>
 8018498:	68fb      	ldr	r3, [r7, #12]
 801849a:	68db      	ldr	r3, [r3, #12]
 801849c:	683a      	ldr	r2, [r7, #0]
 801849e:	429a      	cmp	r2, r3
 80184a0:	d104      	bne.n	80184ac <tcp_pcb_remove+0x64>
 80184a2:	683b      	ldr	r3, [r7, #0]
 80184a4:	68da      	ldr	r2, [r3, #12]
 80184a6:	68fb      	ldr	r3, [r7, #12]
 80184a8:	60da      	str	r2, [r3, #12]
 80184aa:	e005      	b.n	80184b8 <tcp_pcb_remove+0x70>
 80184ac:	68fb      	ldr	r3, [r7, #12]
 80184ae:	68db      	ldr	r3, [r3, #12]
 80184b0:	60fb      	str	r3, [r7, #12]
 80184b2:	68fb      	ldr	r3, [r7, #12]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d1ef      	bne.n	8018498 <tcp_pcb_remove+0x50>
 80184b8:	683b      	ldr	r3, [r7, #0]
 80184ba:	2200      	movs	r2, #0
 80184bc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80184be:	6838      	ldr	r0, [r7, #0]
 80184c0:	f7ff ff72 	bl	80183a8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80184c4:	683b      	ldr	r3, [r7, #0]
 80184c6:	7d1b      	ldrb	r3, [r3, #20]
 80184c8:	2b0a      	cmp	r3, #10
 80184ca:	d013      	beq.n	80184f4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80184cc:	683b      	ldr	r3, [r7, #0]
 80184ce:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80184d0:	2b01      	cmp	r3, #1
 80184d2:	d00f      	beq.n	80184f4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80184d4:	683b      	ldr	r3, [r7, #0]
 80184d6:	8b5b      	ldrh	r3, [r3, #26]
 80184d8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d009      	beq.n	80184f4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80184e0:	683b      	ldr	r3, [r7, #0]
 80184e2:	8b5b      	ldrh	r3, [r3, #26]
 80184e4:	f043 0302 	orr.w	r3, r3, #2
 80184e8:	b29a      	uxth	r2, r3
 80184ea:	683b      	ldr	r3, [r7, #0]
 80184ec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80184ee:	6838      	ldr	r0, [r7, #0]
 80184f0:	f003 fbd4 	bl	801bc9c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80184f4:	683b      	ldr	r3, [r7, #0]
 80184f6:	7d1b      	ldrb	r3, [r3, #20]
 80184f8:	2b01      	cmp	r3, #1
 80184fa:	d020      	beq.n	801853e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80184fc:	683b      	ldr	r3, [r7, #0]
 80184fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018500:	2b00      	cmp	r3, #0
 8018502:	d006      	beq.n	8018512 <tcp_pcb_remove+0xca>
 8018504:	4b13      	ldr	r3, [pc, #76]	; (8018554 <tcp_pcb_remove+0x10c>)
 8018506:	f640 0293 	movw	r2, #2195	; 0x893
 801850a:	4916      	ldr	r1, [pc, #88]	; (8018564 <tcp_pcb_remove+0x11c>)
 801850c:	4813      	ldr	r0, [pc, #76]	; (801855c <tcp_pcb_remove+0x114>)
 801850e:	f00b fd63 	bl	8023fd8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8018512:	683b      	ldr	r3, [r7, #0]
 8018514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018516:	2b00      	cmp	r3, #0
 8018518:	d006      	beq.n	8018528 <tcp_pcb_remove+0xe0>
 801851a:	4b0e      	ldr	r3, [pc, #56]	; (8018554 <tcp_pcb_remove+0x10c>)
 801851c:	f640 0294 	movw	r2, #2196	; 0x894
 8018520:	4911      	ldr	r1, [pc, #68]	; (8018568 <tcp_pcb_remove+0x120>)
 8018522:	480e      	ldr	r0, [pc, #56]	; (801855c <tcp_pcb_remove+0x114>)
 8018524:	f00b fd58 	bl	8023fd8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8018528:	683b      	ldr	r3, [r7, #0]
 801852a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801852c:	2b00      	cmp	r3, #0
 801852e:	d006      	beq.n	801853e <tcp_pcb_remove+0xf6>
 8018530:	4b08      	ldr	r3, [pc, #32]	; (8018554 <tcp_pcb_remove+0x10c>)
 8018532:	f640 0296 	movw	r2, #2198	; 0x896
 8018536:	490d      	ldr	r1, [pc, #52]	; (801856c <tcp_pcb_remove+0x124>)
 8018538:	4808      	ldr	r0, [pc, #32]	; (801855c <tcp_pcb_remove+0x114>)
 801853a:	f00b fd4d 	bl	8023fd8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801853e:	683b      	ldr	r3, [r7, #0]
 8018540:	2200      	movs	r2, #0
 8018542:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8018544:	683b      	ldr	r3, [r7, #0]
 8018546:	2200      	movs	r2, #0
 8018548:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801854a:	bf00      	nop
 801854c:	3710      	adds	r7, #16
 801854e:	46bd      	mov	sp, r7
 8018550:	bd80      	pop	{r7, pc}
 8018552:	bf00      	nop
 8018554:	08028a1c 	.word	0x08028a1c
 8018558:	08029084 	.word	0x08029084
 801855c:	08028a60 	.word	0x08028a60
 8018560:	080290a0 	.word	0x080290a0
 8018564:	080290c0 	.word	0x080290c0
 8018568:	080290d8 	.word	0x080290d8
 801856c:	080290f4 	.word	0x080290f4

08018570 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8018570:	b580      	push	{r7, lr}
 8018572:	b082      	sub	sp, #8
 8018574:	af00      	add	r7, sp, #0
 8018576:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d106      	bne.n	801858c <tcp_next_iss+0x1c>
 801857e:	4b0a      	ldr	r3, [pc, #40]	; (80185a8 <tcp_next_iss+0x38>)
 8018580:	f640 02af 	movw	r2, #2223	; 0x8af
 8018584:	4909      	ldr	r1, [pc, #36]	; (80185ac <tcp_next_iss+0x3c>)
 8018586:	480a      	ldr	r0, [pc, #40]	; (80185b0 <tcp_next_iss+0x40>)
 8018588:	f00b fd26 	bl	8023fd8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801858c:	4b09      	ldr	r3, [pc, #36]	; (80185b4 <tcp_next_iss+0x44>)
 801858e:	681a      	ldr	r2, [r3, #0]
 8018590:	4b09      	ldr	r3, [pc, #36]	; (80185b8 <tcp_next_iss+0x48>)
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	4413      	add	r3, r2
 8018596:	4a07      	ldr	r2, [pc, #28]	; (80185b4 <tcp_next_iss+0x44>)
 8018598:	6013      	str	r3, [r2, #0]
  return iss;
 801859a:	4b06      	ldr	r3, [pc, #24]	; (80185b4 <tcp_next_iss+0x44>)
 801859c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801859e:	4618      	mov	r0, r3
 80185a0:	3708      	adds	r7, #8
 80185a2:	46bd      	mov	sp, r7
 80185a4:	bd80      	pop	{r7, pc}
 80185a6:	bf00      	nop
 80185a8:	08028a1c 	.word	0x08028a1c
 80185ac:	0802910c 	.word	0x0802910c
 80185b0:	08028a60 	.word	0x08028a60
 80185b4:	2000002c 	.word	0x2000002c
 80185b8:	20013230 	.word	0x20013230

080185bc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	b086      	sub	sp, #24
 80185c0:	af00      	add	r7, sp, #0
 80185c2:	4603      	mov	r3, r0
 80185c4:	60b9      	str	r1, [r7, #8]
 80185c6:	607a      	str	r2, [r7, #4]
 80185c8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d106      	bne.n	80185de <tcp_eff_send_mss_netif+0x22>
 80185d0:	4b14      	ldr	r3, [pc, #80]	; (8018624 <tcp_eff_send_mss_netif+0x68>)
 80185d2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80185d6:	4914      	ldr	r1, [pc, #80]	; (8018628 <tcp_eff_send_mss_netif+0x6c>)
 80185d8:	4814      	ldr	r0, [pc, #80]	; (801862c <tcp_eff_send_mss_netif+0x70>)
 80185da:	f00b fcfd 	bl	8023fd8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80185de:	68bb      	ldr	r3, [r7, #8]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d101      	bne.n	80185e8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80185e4:	89fb      	ldrh	r3, [r7, #14]
 80185e6:	e019      	b.n	801861c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80185e8:	68bb      	ldr	r3, [r7, #8]
 80185ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80185ec:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80185ee:	8afb      	ldrh	r3, [r7, #22]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d012      	beq.n	801861a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80185f4:	2328      	movs	r3, #40	; 0x28
 80185f6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80185f8:	8afa      	ldrh	r2, [r7, #22]
 80185fa:	8abb      	ldrh	r3, [r7, #20]
 80185fc:	429a      	cmp	r2, r3
 80185fe:	d904      	bls.n	801860a <tcp_eff_send_mss_netif+0x4e>
 8018600:	8afa      	ldrh	r2, [r7, #22]
 8018602:	8abb      	ldrh	r3, [r7, #20]
 8018604:	1ad3      	subs	r3, r2, r3
 8018606:	b29b      	uxth	r3, r3
 8018608:	e000      	b.n	801860c <tcp_eff_send_mss_netif+0x50>
 801860a:	2300      	movs	r3, #0
 801860c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801860e:	8a7a      	ldrh	r2, [r7, #18]
 8018610:	89fb      	ldrh	r3, [r7, #14]
 8018612:	4293      	cmp	r3, r2
 8018614:	bf28      	it	cs
 8018616:	4613      	movcs	r3, r2
 8018618:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801861a:	89fb      	ldrh	r3, [r7, #14]
}
 801861c:	4618      	mov	r0, r3
 801861e:	3718      	adds	r7, #24
 8018620:	46bd      	mov	sp, r7
 8018622:	bd80      	pop	{r7, pc}
 8018624:	08028a1c 	.word	0x08028a1c
 8018628:	08029128 	.word	0x08029128
 801862c:	08028a60 	.word	0x08028a60

08018630 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8018630:	b580      	push	{r7, lr}
 8018632:	b084      	sub	sp, #16
 8018634:	af00      	add	r7, sp, #0
 8018636:	6078      	str	r0, [r7, #4]
 8018638:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801863a:	683b      	ldr	r3, [r7, #0]
 801863c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	2b00      	cmp	r3, #0
 8018642:	d119      	bne.n	8018678 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8018644:	4b10      	ldr	r3, [pc, #64]	; (8018688 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8018646:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801864a:	4910      	ldr	r1, [pc, #64]	; (801868c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801864c:	4810      	ldr	r0, [pc, #64]	; (8018690 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801864e:	f00b fcc3 	bl	8023fd8 <iprintf>

  while (pcb != NULL) {
 8018652:	e011      	b.n	8018678 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8018654:	68fb      	ldr	r3, [r7, #12]
 8018656:	681a      	ldr	r2, [r3, #0]
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	429a      	cmp	r2, r3
 801865e:	d108      	bne.n	8018672 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	68db      	ldr	r3, [r3, #12]
 8018664:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8018666:	68f8      	ldr	r0, [r7, #12]
 8018668:	f7fe fd10 	bl	801708c <tcp_abort>
      pcb = next;
 801866c:	68bb      	ldr	r3, [r7, #8]
 801866e:	60fb      	str	r3, [r7, #12]
 8018670:	e002      	b.n	8018678 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8018672:	68fb      	ldr	r3, [r7, #12]
 8018674:	68db      	ldr	r3, [r3, #12]
 8018676:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	2b00      	cmp	r3, #0
 801867c:	d1ea      	bne.n	8018654 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801867e:	bf00      	nop
 8018680:	bf00      	nop
 8018682:	3710      	adds	r7, #16
 8018684:	46bd      	mov	sp, r7
 8018686:	bd80      	pop	{r7, pc}
 8018688:	08028a1c 	.word	0x08028a1c
 801868c:	08029150 	.word	0x08029150
 8018690:	08028a60 	.word	0x08028a60

08018694 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018694:	b580      	push	{r7, lr}
 8018696:	b084      	sub	sp, #16
 8018698:	af00      	add	r7, sp, #0
 801869a:	6078      	str	r0, [r7, #4]
 801869c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d02a      	beq.n	80186fa <tcp_netif_ip_addr_changed+0x66>
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d026      	beq.n	80186fa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80186ac:	4b15      	ldr	r3, [pc, #84]	; (8018704 <tcp_netif_ip_addr_changed+0x70>)
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	4619      	mov	r1, r3
 80186b2:	6878      	ldr	r0, [r7, #4]
 80186b4:	f7ff ffbc 	bl	8018630 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80186b8:	4b13      	ldr	r3, [pc, #76]	; (8018708 <tcp_netif_ip_addr_changed+0x74>)
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	4619      	mov	r1, r3
 80186be:	6878      	ldr	r0, [r7, #4]
 80186c0:	f7ff ffb6 	bl	8018630 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80186c4:	683b      	ldr	r3, [r7, #0]
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	d017      	beq.n	80186fa <tcp_netif_ip_addr_changed+0x66>
 80186ca:	683b      	ldr	r3, [r7, #0]
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d013      	beq.n	80186fa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80186d2:	4b0e      	ldr	r3, [pc, #56]	; (801870c <tcp_netif_ip_addr_changed+0x78>)
 80186d4:	681b      	ldr	r3, [r3, #0]
 80186d6:	60fb      	str	r3, [r7, #12]
 80186d8:	e00c      	b.n	80186f4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80186da:	68fb      	ldr	r3, [r7, #12]
 80186dc:	681a      	ldr	r2, [r3, #0]
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	429a      	cmp	r2, r3
 80186e4:	d103      	bne.n	80186ee <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80186e6:	683b      	ldr	r3, [r7, #0]
 80186e8:	681a      	ldr	r2, [r3, #0]
 80186ea:	68fb      	ldr	r3, [r7, #12]
 80186ec:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	68db      	ldr	r3, [r3, #12]
 80186f2:	60fb      	str	r3, [r7, #12]
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d1ef      	bne.n	80186da <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80186fa:	bf00      	nop
 80186fc:	3710      	adds	r7, #16
 80186fe:	46bd      	mov	sp, r7
 8018700:	bd80      	pop	{r7, pc}
 8018702:	bf00      	nop
 8018704:	2001323c 	.word	0x2001323c
 8018708:	20013234 	.word	0x20013234
 801870c:	20013238 	.word	0x20013238

08018710 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8018710:	b580      	push	{r7, lr}
 8018712:	b082      	sub	sp, #8
 8018714:	af00      	add	r7, sp, #0
 8018716:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801871c:	2b00      	cmp	r3, #0
 801871e:	d007      	beq.n	8018730 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018724:	4618      	mov	r0, r3
 8018726:	f7ff fb65 	bl	8017df4 <tcp_segs_free>
    pcb->ooseq = NULL;
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	2200      	movs	r2, #0
 801872e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8018730:	bf00      	nop
 8018732:	3708      	adds	r7, #8
 8018734:	46bd      	mov	sp, r7
 8018736:	bd80      	pop	{r7, pc}

08018738 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8018738:	b590      	push	{r4, r7, lr}
 801873a:	b08f      	sub	sp, #60	; 0x3c
 801873c:	af04      	add	r7, sp, #16
 801873e:	6078      	str	r0, [r7, #4]
 8018740:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb, *prev;
  struct tcp_pcb_listen *lpcb;
#if SO_REUSE
  struct tcp_pcb *lpcb_prev = NULL;
 8018742:	2300      	movs	r3, #0
 8018744:	61bb      	str	r3, [r7, #24]
  struct tcp_pcb_listen *lpcb_any = NULL;
 8018746:	2300      	movs	r3, #0
 8018748:	617b      	str	r3, [r7, #20]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	2b00      	cmp	r3, #0
 801874e:	d105      	bne.n	801875c <tcp_input+0x24>
 8018750:	4b9b      	ldr	r3, [pc, #620]	; (80189c0 <tcp_input+0x288>)
 8018752:	2283      	movs	r2, #131	; 0x83
 8018754:	499b      	ldr	r1, [pc, #620]	; (80189c4 <tcp_input+0x28c>)
 8018756:	489c      	ldr	r0, [pc, #624]	; (80189c8 <tcp_input+0x290>)
 8018758:	f00b fc3e 	bl	8023fd8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	685b      	ldr	r3, [r3, #4]
 8018760:	4a9a      	ldr	r2, [pc, #616]	; (80189cc <tcp_input+0x294>)
 8018762:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	895b      	ldrh	r3, [r3, #10]
 8018768:	2b13      	cmp	r3, #19
 801876a:	f240 83db 	bls.w	8018f24 <tcp_input+0x7ec>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801876e:	4b98      	ldr	r3, [pc, #608]	; (80189d0 <tcp_input+0x298>)
 8018770:	695b      	ldr	r3, [r3, #20]
 8018772:	4a97      	ldr	r2, [pc, #604]	; (80189d0 <tcp_input+0x298>)
 8018774:	6812      	ldr	r2, [r2, #0]
 8018776:	4611      	mov	r1, r2
 8018778:	4618      	mov	r0, r3
 801877a:	f008 fa83 	bl	8020c84 <ip4_addr_isbroadcast_u32>
 801877e:	4603      	mov	r3, r0
 8018780:	2b00      	cmp	r3, #0
 8018782:	f040 83d1 	bne.w	8018f28 <tcp_input+0x7f0>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8018786:	4b92      	ldr	r3, [pc, #584]	; (80189d0 <tcp_input+0x298>)
 8018788:	695b      	ldr	r3, [r3, #20]
 801878a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801878e:	2be0      	cmp	r3, #224	; 0xe0
 8018790:	f000 83ca 	beq.w	8018f28 <tcp_input+0x7f0>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8018794:	4b8d      	ldr	r3, [pc, #564]	; (80189cc <tcp_input+0x294>)
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	899b      	ldrh	r3, [r3, #12]
 801879a:	b29b      	uxth	r3, r3
 801879c:	4618      	mov	r0, r3
 801879e:	f7fc fa77 	bl	8014c90 <lwip_htons>
 80187a2:	4603      	mov	r3, r0
 80187a4:	0b1b      	lsrs	r3, r3, #12
 80187a6:	b29b      	uxth	r3, r3
 80187a8:	b2db      	uxtb	r3, r3
 80187aa:	009b      	lsls	r3, r3, #2
 80187ac:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80187ae:	7cbb      	ldrb	r3, [r7, #18]
 80187b0:	2b13      	cmp	r3, #19
 80187b2:	f240 83bb 	bls.w	8018f2c <tcp_input+0x7f4>
 80187b6:	7cbb      	ldrb	r3, [r7, #18]
 80187b8:	b29a      	uxth	r2, r3
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	891b      	ldrh	r3, [r3, #8]
 80187be:	429a      	cmp	r2, r3
 80187c0:	f200 83b4 	bhi.w	8018f2c <tcp_input+0x7f4>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80187c4:	7cbb      	ldrb	r3, [r7, #18]
 80187c6:	b29b      	uxth	r3, r3
 80187c8:	3b14      	subs	r3, #20
 80187ca:	b29a      	uxth	r2, r3
 80187cc:	4b81      	ldr	r3, [pc, #516]	; (80189d4 <tcp_input+0x29c>)
 80187ce:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80187d0:	4b81      	ldr	r3, [pc, #516]	; (80189d8 <tcp_input+0x2a0>)
 80187d2:	2200      	movs	r2, #0
 80187d4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	895a      	ldrh	r2, [r3, #10]
 80187da:	7cbb      	ldrb	r3, [r7, #18]
 80187dc:	b29b      	uxth	r3, r3
 80187de:	429a      	cmp	r2, r3
 80187e0:	d309      	bcc.n	80187f6 <tcp_input+0xbe>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80187e2:	4b7c      	ldr	r3, [pc, #496]	; (80189d4 <tcp_input+0x29c>)
 80187e4:	881a      	ldrh	r2, [r3, #0]
 80187e6:	4b7d      	ldr	r3, [pc, #500]	; (80189dc <tcp_input+0x2a4>)
 80187e8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80187ea:	7cbb      	ldrb	r3, [r7, #18]
 80187ec:	4619      	mov	r1, r3
 80187ee:	6878      	ldr	r0, [r7, #4]
 80187f0:	f7fd fdc6 	bl	8016380 <pbuf_remove_header>
 80187f4:	e04e      	b.n	8018894 <tcp_input+0x15c>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d105      	bne.n	801880a <tcp_input+0xd2>
 80187fe:	4b70      	ldr	r3, [pc, #448]	; (80189c0 <tcp_input+0x288>)
 8018800:	22c2      	movs	r2, #194	; 0xc2
 8018802:	4977      	ldr	r1, [pc, #476]	; (80189e0 <tcp_input+0x2a8>)
 8018804:	4870      	ldr	r0, [pc, #448]	; (80189c8 <tcp_input+0x290>)
 8018806:	f00b fbe7 	bl	8023fd8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801880a:	2114      	movs	r1, #20
 801880c:	6878      	ldr	r0, [r7, #4]
 801880e:	f7fd fdb7 	bl	8016380 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	895a      	ldrh	r2, [r3, #10]
 8018816:	4b71      	ldr	r3, [pc, #452]	; (80189dc <tcp_input+0x2a4>)
 8018818:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801881a:	4b6e      	ldr	r3, [pc, #440]	; (80189d4 <tcp_input+0x29c>)
 801881c:	881a      	ldrh	r2, [r3, #0]
 801881e:	4b6f      	ldr	r3, [pc, #444]	; (80189dc <tcp_input+0x2a4>)
 8018820:	881b      	ldrh	r3, [r3, #0]
 8018822:	1ad3      	subs	r3, r2, r3
 8018824:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8018826:	4b6d      	ldr	r3, [pc, #436]	; (80189dc <tcp_input+0x2a4>)
 8018828:	881b      	ldrh	r3, [r3, #0]
 801882a:	4619      	mov	r1, r3
 801882c:	6878      	ldr	r0, [r7, #4]
 801882e:	f7fd fda7 	bl	8016380 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	895b      	ldrh	r3, [r3, #10]
 8018838:	8a3a      	ldrh	r2, [r7, #16]
 801883a:	429a      	cmp	r2, r3
 801883c:	f200 8378 	bhi.w	8018f30 <tcp_input+0x7f8>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	681b      	ldr	r3, [r3, #0]
 8018844:	685b      	ldr	r3, [r3, #4]
 8018846:	4a64      	ldr	r2, [pc, #400]	; (80189d8 <tcp_input+0x2a0>)
 8018848:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	8a3a      	ldrh	r2, [r7, #16]
 8018850:	4611      	mov	r1, r2
 8018852:	4618      	mov	r0, r3
 8018854:	f7fd fd94 	bl	8016380 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	891a      	ldrh	r2, [r3, #8]
 801885c:	8a3b      	ldrh	r3, [r7, #16]
 801885e:	1ad3      	subs	r3, r2, r3
 8018860:	b29a      	uxth	r2, r3
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	895b      	ldrh	r3, [r3, #10]
 801886a:	2b00      	cmp	r3, #0
 801886c:	d005      	beq.n	801887a <tcp_input+0x142>
 801886e:	4b54      	ldr	r3, [pc, #336]	; (80189c0 <tcp_input+0x288>)
 8018870:	22df      	movs	r2, #223	; 0xdf
 8018872:	495c      	ldr	r1, [pc, #368]	; (80189e4 <tcp_input+0x2ac>)
 8018874:	4854      	ldr	r0, [pc, #336]	; (80189c8 <tcp_input+0x290>)
 8018876:	f00b fbaf 	bl	8023fd8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	891a      	ldrh	r2, [r3, #8]
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	891b      	ldrh	r3, [r3, #8]
 8018884:	429a      	cmp	r2, r3
 8018886:	d005      	beq.n	8018894 <tcp_input+0x15c>
 8018888:	4b4d      	ldr	r3, [pc, #308]	; (80189c0 <tcp_input+0x288>)
 801888a:	22e0      	movs	r2, #224	; 0xe0
 801888c:	4956      	ldr	r1, [pc, #344]	; (80189e8 <tcp_input+0x2b0>)
 801888e:	484e      	ldr	r0, [pc, #312]	; (80189c8 <tcp_input+0x290>)
 8018890:	f00b fba2 	bl	8023fd8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8018894:	4b4d      	ldr	r3, [pc, #308]	; (80189cc <tcp_input+0x294>)
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	881b      	ldrh	r3, [r3, #0]
 801889a:	b29b      	uxth	r3, r3
 801889c:	4a4b      	ldr	r2, [pc, #300]	; (80189cc <tcp_input+0x294>)
 801889e:	6814      	ldr	r4, [r2, #0]
 80188a0:	4618      	mov	r0, r3
 80188a2:	f7fc f9f5 	bl	8014c90 <lwip_htons>
 80188a6:	4603      	mov	r3, r0
 80188a8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80188aa:	4b48      	ldr	r3, [pc, #288]	; (80189cc <tcp_input+0x294>)
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	885b      	ldrh	r3, [r3, #2]
 80188b0:	b29b      	uxth	r3, r3
 80188b2:	4a46      	ldr	r2, [pc, #280]	; (80189cc <tcp_input+0x294>)
 80188b4:	6814      	ldr	r4, [r2, #0]
 80188b6:	4618      	mov	r0, r3
 80188b8:	f7fc f9ea 	bl	8014c90 <lwip_htons>
 80188bc:	4603      	mov	r3, r0
 80188be:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80188c0:	4b42      	ldr	r3, [pc, #264]	; (80189cc <tcp_input+0x294>)
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	685b      	ldr	r3, [r3, #4]
 80188c6:	4a41      	ldr	r2, [pc, #260]	; (80189cc <tcp_input+0x294>)
 80188c8:	6814      	ldr	r4, [r2, #0]
 80188ca:	4618      	mov	r0, r3
 80188cc:	f7fc f9f5 	bl	8014cba <lwip_htonl>
 80188d0:	4603      	mov	r3, r0
 80188d2:	6063      	str	r3, [r4, #4]
 80188d4:	6863      	ldr	r3, [r4, #4]
 80188d6:	4a45      	ldr	r2, [pc, #276]	; (80189ec <tcp_input+0x2b4>)
 80188d8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80188da:	4b3c      	ldr	r3, [pc, #240]	; (80189cc <tcp_input+0x294>)
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	689b      	ldr	r3, [r3, #8]
 80188e0:	4a3a      	ldr	r2, [pc, #232]	; (80189cc <tcp_input+0x294>)
 80188e2:	6814      	ldr	r4, [r2, #0]
 80188e4:	4618      	mov	r0, r3
 80188e6:	f7fc f9e8 	bl	8014cba <lwip_htonl>
 80188ea:	4603      	mov	r3, r0
 80188ec:	60a3      	str	r3, [r4, #8]
 80188ee:	68a3      	ldr	r3, [r4, #8]
 80188f0:	4a3f      	ldr	r2, [pc, #252]	; (80189f0 <tcp_input+0x2b8>)
 80188f2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80188f4:	4b35      	ldr	r3, [pc, #212]	; (80189cc <tcp_input+0x294>)
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	89db      	ldrh	r3, [r3, #14]
 80188fa:	b29b      	uxth	r3, r3
 80188fc:	4a33      	ldr	r2, [pc, #204]	; (80189cc <tcp_input+0x294>)
 80188fe:	6814      	ldr	r4, [r2, #0]
 8018900:	4618      	mov	r0, r3
 8018902:	f7fc f9c5 	bl	8014c90 <lwip_htons>
 8018906:	4603      	mov	r3, r0
 8018908:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801890a:	4b30      	ldr	r3, [pc, #192]	; (80189cc <tcp_input+0x294>)
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	899b      	ldrh	r3, [r3, #12]
 8018910:	b29b      	uxth	r3, r3
 8018912:	4618      	mov	r0, r3
 8018914:	f7fc f9bc 	bl	8014c90 <lwip_htons>
 8018918:	4603      	mov	r3, r0
 801891a:	b2db      	uxtb	r3, r3
 801891c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018920:	b2da      	uxtb	r2, r3
 8018922:	4b34      	ldr	r3, [pc, #208]	; (80189f4 <tcp_input+0x2bc>)
 8018924:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	891a      	ldrh	r2, [r3, #8]
 801892a:	4b33      	ldr	r3, [pc, #204]	; (80189f8 <tcp_input+0x2c0>)
 801892c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801892e:	4b31      	ldr	r3, [pc, #196]	; (80189f4 <tcp_input+0x2bc>)
 8018930:	781b      	ldrb	r3, [r3, #0]
 8018932:	f003 0303 	and.w	r3, r3, #3
 8018936:	2b00      	cmp	r3, #0
 8018938:	d00c      	beq.n	8018954 <tcp_input+0x21c>
    tcplen++;
 801893a:	4b2f      	ldr	r3, [pc, #188]	; (80189f8 <tcp_input+0x2c0>)
 801893c:	881b      	ldrh	r3, [r3, #0]
 801893e:	3301      	adds	r3, #1
 8018940:	b29a      	uxth	r2, r3
 8018942:	4b2d      	ldr	r3, [pc, #180]	; (80189f8 <tcp_input+0x2c0>)
 8018944:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	891a      	ldrh	r2, [r3, #8]
 801894a:	4b2b      	ldr	r3, [pc, #172]	; (80189f8 <tcp_input+0x2c0>)
 801894c:	881b      	ldrh	r3, [r3, #0]
 801894e:	429a      	cmp	r2, r3
 8018950:	f200 82f0 	bhi.w	8018f34 <tcp_input+0x7fc>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8018954:	2300      	movs	r3, #0
 8018956:	623b      	str	r3, [r7, #32]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018958:	4b28      	ldr	r3, [pc, #160]	; (80189fc <tcp_input+0x2c4>)
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	627b      	str	r3, [r7, #36]	; 0x24
 801895e:	e09d      	b.n	8018a9c <tcp_input+0x364>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8018960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018962:	7d1b      	ldrb	r3, [r3, #20]
 8018964:	2b00      	cmp	r3, #0
 8018966:	d105      	bne.n	8018974 <tcp_input+0x23c>
 8018968:	4b15      	ldr	r3, [pc, #84]	; (80189c0 <tcp_input+0x288>)
 801896a:	22fb      	movs	r2, #251	; 0xfb
 801896c:	4924      	ldr	r1, [pc, #144]	; (8018a00 <tcp_input+0x2c8>)
 801896e:	4816      	ldr	r0, [pc, #88]	; (80189c8 <tcp_input+0x290>)
 8018970:	f00b fb32 	bl	8023fd8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8018974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018976:	7d1b      	ldrb	r3, [r3, #20]
 8018978:	2b0a      	cmp	r3, #10
 801897a:	d105      	bne.n	8018988 <tcp_input+0x250>
 801897c:	4b10      	ldr	r3, [pc, #64]	; (80189c0 <tcp_input+0x288>)
 801897e:	22fc      	movs	r2, #252	; 0xfc
 8018980:	4920      	ldr	r1, [pc, #128]	; (8018a04 <tcp_input+0x2cc>)
 8018982:	4811      	ldr	r0, [pc, #68]	; (80189c8 <tcp_input+0x290>)
 8018984:	f00b fb28 	bl	8023fd8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8018988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801898a:	7d1b      	ldrb	r3, [r3, #20]
 801898c:	2b01      	cmp	r3, #1
 801898e:	d105      	bne.n	801899c <tcp_input+0x264>
 8018990:	4b0b      	ldr	r3, [pc, #44]	; (80189c0 <tcp_input+0x288>)
 8018992:	22fd      	movs	r2, #253	; 0xfd
 8018994:	491c      	ldr	r1, [pc, #112]	; (8018a08 <tcp_input+0x2d0>)
 8018996:	480c      	ldr	r0, [pc, #48]	; (80189c8 <tcp_input+0x290>)
 8018998:	f00b fb1e 	bl	8023fd8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801899e:	7a1b      	ldrb	r3, [r3, #8]
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d033      	beq.n	8018a0c <tcp_input+0x2d4>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80189a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189a6:	7a1a      	ldrb	r2, [r3, #8]
 80189a8:	4b09      	ldr	r3, [pc, #36]	; (80189d0 <tcp_input+0x298>)
 80189aa:	685b      	ldr	r3, [r3, #4]
 80189ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80189b0:	3301      	adds	r3, #1
 80189b2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80189b4:	429a      	cmp	r2, r3
 80189b6:	d029      	beq.n	8018a0c <tcp_input+0x2d4>
      prev = pcb;
 80189b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189ba:	623b      	str	r3, [r7, #32]
      continue;
 80189bc:	e06b      	b.n	8018a96 <tcp_input+0x35e>
 80189be:	bf00      	nop
 80189c0:	08029184 	.word	0x08029184
 80189c4:	080291b8 	.word	0x080291b8
 80189c8:	080291d0 	.word	0x080291d0
 80189cc:	20013258 	.word	0x20013258
 80189d0:	2000fa84 	.word	0x2000fa84
 80189d4:	2001325c 	.word	0x2001325c
 80189d8:	20013260 	.word	0x20013260
 80189dc:	2001325e 	.word	0x2001325e
 80189e0:	080291f8 	.word	0x080291f8
 80189e4:	08029208 	.word	0x08029208
 80189e8:	08029214 	.word	0x08029214
 80189ec:	20013268 	.word	0x20013268
 80189f0:	2001326c 	.word	0x2001326c
 80189f4:	20013274 	.word	0x20013274
 80189f8:	20013272 	.word	0x20013272
 80189fc:	2001323c 	.word	0x2001323c
 8018a00:	08029234 	.word	0x08029234
 8018a04:	0802925c 	.word	0x0802925c
 8018a08:	08029288 	.word	0x08029288
    }

    if (pcb->remote_port == tcphdr->src &&
 8018a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a0e:	8b1a      	ldrh	r2, [r3, #24]
 8018a10:	4b77      	ldr	r3, [pc, #476]	; (8018bf0 <tcp_input+0x4b8>)
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	881b      	ldrh	r3, [r3, #0]
 8018a16:	b29b      	uxth	r3, r3
 8018a18:	429a      	cmp	r2, r3
 8018a1a:	d13a      	bne.n	8018a92 <tcp_input+0x35a>
        pcb->local_port == tcphdr->dest &&
 8018a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a1e:	8ada      	ldrh	r2, [r3, #22]
 8018a20:	4b73      	ldr	r3, [pc, #460]	; (8018bf0 <tcp_input+0x4b8>)
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	885b      	ldrh	r3, [r3, #2]
 8018a26:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8018a28:	429a      	cmp	r2, r3
 8018a2a:	d132      	bne.n	8018a92 <tcp_input+0x35a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a2e:	685a      	ldr	r2, [r3, #4]
 8018a30:	4b70      	ldr	r3, [pc, #448]	; (8018bf4 <tcp_input+0x4bc>)
 8018a32:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8018a34:	429a      	cmp	r2, r3
 8018a36:	d12c      	bne.n	8018a92 <tcp_input+0x35a>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a3a:	681a      	ldr	r2, [r3, #0]
 8018a3c:	4b6d      	ldr	r3, [pc, #436]	; (8018bf4 <tcp_input+0x4bc>)
 8018a3e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018a40:	429a      	cmp	r2, r3
 8018a42:	d126      	bne.n	8018a92 <tcp_input+0x35a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8018a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a46:	68db      	ldr	r3, [r3, #12]
 8018a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a4a:	429a      	cmp	r2, r3
 8018a4c:	d106      	bne.n	8018a5c <tcp_input+0x324>
 8018a4e:	4b6a      	ldr	r3, [pc, #424]	; (8018bf8 <tcp_input+0x4c0>)
 8018a50:	f240 120d 	movw	r2, #269	; 0x10d
 8018a54:	4969      	ldr	r1, [pc, #420]	; (8018bfc <tcp_input+0x4c4>)
 8018a56:	486a      	ldr	r0, [pc, #424]	; (8018c00 <tcp_input+0x4c8>)
 8018a58:	f00b fabe 	bl	8023fd8 <iprintf>
      if (prev != NULL) {
 8018a5c:	6a3b      	ldr	r3, [r7, #32]
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d00a      	beq.n	8018a78 <tcp_input+0x340>
        prev->next = pcb->next;
 8018a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a64:	68da      	ldr	r2, [r3, #12]
 8018a66:	6a3b      	ldr	r3, [r7, #32]
 8018a68:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8018a6a:	4b66      	ldr	r3, [pc, #408]	; (8018c04 <tcp_input+0x4cc>)
 8018a6c:	681a      	ldr	r2, [r3, #0]
 8018a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a70:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8018a72:	4a64      	ldr	r2, [pc, #400]	; (8018c04 <tcp_input+0x4cc>)
 8018a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a76:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8018a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a7a:	68db      	ldr	r3, [r3, #12]
 8018a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a7e:	429a      	cmp	r2, r3
 8018a80:	d111      	bne.n	8018aa6 <tcp_input+0x36e>
 8018a82:	4b5d      	ldr	r3, [pc, #372]	; (8018bf8 <tcp_input+0x4c0>)
 8018a84:	f240 1215 	movw	r2, #277	; 0x115
 8018a88:	495f      	ldr	r1, [pc, #380]	; (8018c08 <tcp_input+0x4d0>)
 8018a8a:	485d      	ldr	r0, [pc, #372]	; (8018c00 <tcp_input+0x4c8>)
 8018a8c:	f00b faa4 	bl	8023fd8 <iprintf>
      break;
 8018a90:	e009      	b.n	8018aa6 <tcp_input+0x36e>
    }
    prev = pcb;
 8018a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a94:	623b      	str	r3, [r7, #32]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a98:	68db      	ldr	r3, [r3, #12]
 8018a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8018a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	f47f af5e 	bne.w	8018960 <tcp_input+0x228>
 8018aa4:	e000      	b.n	8018aa8 <tcp_input+0x370>
      break;
 8018aa6:	bf00      	nop
  }

  if (pcb == NULL) {
 8018aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	f040 80b4 	bne.w	8018c18 <tcp_input+0x4e0>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018ab0:	4b56      	ldr	r3, [pc, #344]	; (8018c0c <tcp_input+0x4d4>)
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8018ab6:	e03f      	b.n	8018b38 <tcp_input+0x400>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8018ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aba:	7d1b      	ldrb	r3, [r3, #20]
 8018abc:	2b0a      	cmp	r3, #10
 8018abe:	d006      	beq.n	8018ace <tcp_input+0x396>
 8018ac0:	4b4d      	ldr	r3, [pc, #308]	; (8018bf8 <tcp_input+0x4c0>)
 8018ac2:	f240 121f 	movw	r2, #287	; 0x11f
 8018ac6:	4952      	ldr	r1, [pc, #328]	; (8018c10 <tcp_input+0x4d8>)
 8018ac8:	484d      	ldr	r0, [pc, #308]	; (8018c00 <tcp_input+0x4c8>)
 8018aca:	f00b fa85 	bl	8023fd8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ad0:	7a1b      	ldrb	r3, [r3, #8]
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d009      	beq.n	8018aea <tcp_input+0x3b2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ad8:	7a1a      	ldrb	r2, [r3, #8]
 8018ada:	4b46      	ldr	r3, [pc, #280]	; (8018bf4 <tcp_input+0x4bc>)
 8018adc:	685b      	ldr	r3, [r3, #4]
 8018ade:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018ae2:	3301      	adds	r3, #1
 8018ae4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018ae6:	429a      	cmp	r2, r3
 8018ae8:	d122      	bne.n	8018b30 <tcp_input+0x3f8>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8018aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aec:	8b1a      	ldrh	r2, [r3, #24]
 8018aee:	4b40      	ldr	r3, [pc, #256]	; (8018bf0 <tcp_input+0x4b8>)
 8018af0:	681b      	ldr	r3, [r3, #0]
 8018af2:	881b      	ldrh	r3, [r3, #0]
 8018af4:	b29b      	uxth	r3, r3
 8018af6:	429a      	cmp	r2, r3
 8018af8:	d11b      	bne.n	8018b32 <tcp_input+0x3fa>
          pcb->local_port == tcphdr->dest &&
 8018afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018afc:	8ada      	ldrh	r2, [r3, #22]
 8018afe:	4b3c      	ldr	r3, [pc, #240]	; (8018bf0 <tcp_input+0x4b8>)
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	885b      	ldrh	r3, [r3, #2]
 8018b04:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8018b06:	429a      	cmp	r2, r3
 8018b08:	d113      	bne.n	8018b32 <tcp_input+0x3fa>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b0c:	685a      	ldr	r2, [r3, #4]
 8018b0e:	4b39      	ldr	r3, [pc, #228]	; (8018bf4 <tcp_input+0x4bc>)
 8018b10:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8018b12:	429a      	cmp	r2, r3
 8018b14:	d10d      	bne.n	8018b32 <tcp_input+0x3fa>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b18:	681a      	ldr	r2, [r3, #0]
 8018b1a:	4b36      	ldr	r3, [pc, #216]	; (8018bf4 <tcp_input+0x4bc>)
 8018b1c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018b1e:	429a      	cmp	r2, r3
 8018b20:	d107      	bne.n	8018b32 <tcp_input+0x3fa>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8018b22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b24:	f000 fb60 	bl	80191e8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8018b28:	6878      	ldr	r0, [r7, #4]
 8018b2a:	f7fd fcaf 	bl	801648c <pbuf_free>
        return;
 8018b2e:	e207      	b.n	8018f40 <tcp_input+0x808>
        continue;
 8018b30:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b34:	68db      	ldr	r3, [r3, #12]
 8018b36:	627b      	str	r3, [r7, #36]	; 0x24
 8018b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d1bc      	bne.n	8018ab8 <tcp_input+0x380>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8018b3e:	2300      	movs	r3, #0
 8018b40:	623b      	str	r3, [r7, #32]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018b42:	4b34      	ldr	r3, [pc, #208]	; (8018c14 <tcp_input+0x4dc>)
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	61fb      	str	r3, [r7, #28]
 8018b48:	e02e      	b.n	8018ba8 <tcp_input+0x470>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8018b4a:	69fb      	ldr	r3, [r7, #28]
 8018b4c:	7a1b      	ldrb	r3, [r3, #8]
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d00c      	beq.n	8018b6c <tcp_input+0x434>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018b52:	69fb      	ldr	r3, [r7, #28]
 8018b54:	7a1a      	ldrb	r2, [r3, #8]
 8018b56:	4b27      	ldr	r3, [pc, #156]	; (8018bf4 <tcp_input+0x4bc>)
 8018b58:	685b      	ldr	r3, [r3, #4]
 8018b5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018b5e:	3301      	adds	r3, #1
 8018b60:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8018b62:	429a      	cmp	r2, r3
 8018b64:	d002      	beq.n	8018b6c <tcp_input+0x434>
        prev = (struct tcp_pcb *)lpcb;
 8018b66:	69fb      	ldr	r3, [r7, #28]
 8018b68:	623b      	str	r3, [r7, #32]
        continue;
 8018b6a:	e01a      	b.n	8018ba2 <tcp_input+0x46a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8018b6c:	69fb      	ldr	r3, [r7, #28]
 8018b6e:	8ada      	ldrh	r2, [r3, #22]
 8018b70:	4b1f      	ldr	r3, [pc, #124]	; (8018bf0 <tcp_input+0x4b8>)
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	885b      	ldrh	r3, [r3, #2]
 8018b76:	b29b      	uxth	r3, r3
 8018b78:	429a      	cmp	r2, r3
 8018b7a:	d110      	bne.n	8018b9e <tcp_input+0x466>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8018b7c:	69fb      	ldr	r3, [r7, #28]
 8018b7e:	681a      	ldr	r2, [r3, #0]
 8018b80:	4b1c      	ldr	r3, [pc, #112]	; (8018bf4 <tcp_input+0x4bc>)
 8018b82:	695b      	ldr	r3, [r3, #20]
 8018b84:	429a      	cmp	r2, r3
 8018b86:	d013      	beq.n	8018bb0 <tcp_input+0x478>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8018b88:	69fb      	ldr	r3, [r7, #28]
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d003      	beq.n	8018b96 <tcp_input+0x45e>
 8018b8e:	69fb      	ldr	r3, [r7, #28]
 8018b90:	681b      	ldr	r3, [r3, #0]
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d103      	bne.n	8018b9e <tcp_input+0x466>
            /* found an ANY-match */
#if SO_REUSE
            lpcb_any = lpcb;
 8018b96:	69fb      	ldr	r3, [r7, #28]
 8018b98:	617b      	str	r3, [r7, #20]
            lpcb_prev = prev;
 8018b9a:	6a3b      	ldr	r3, [r7, #32]
 8018b9c:	61bb      	str	r3, [r7, #24]
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8018b9e:	69fb      	ldr	r3, [r7, #28]
 8018ba0:	623b      	str	r3, [r7, #32]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018ba2:	69fb      	ldr	r3, [r7, #28]
 8018ba4:	68db      	ldr	r3, [r3, #12]
 8018ba6:	61fb      	str	r3, [r7, #28]
 8018ba8:	69fb      	ldr	r3, [r7, #28]
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d1cd      	bne.n	8018b4a <tcp_input+0x412>
 8018bae:	e000      	b.n	8018bb2 <tcp_input+0x47a>
            break;
 8018bb0:	bf00      	nop
    }
#if SO_REUSE
    /* first try specific local IP */
    if (lpcb == NULL) {
 8018bb2:	69fb      	ldr	r3, [r7, #28]
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d103      	bne.n	8018bc0 <tcp_input+0x488>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
 8018bb8:	697b      	ldr	r3, [r7, #20]
 8018bba:	61fb      	str	r3, [r7, #28]
      prev = lpcb_prev;
 8018bbc:	69bb      	ldr	r3, [r7, #24]
 8018bbe:	623b      	str	r3, [r7, #32]
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8018bc0:	69fb      	ldr	r3, [r7, #28]
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d028      	beq.n	8018c18 <tcp_input+0x4e0>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8018bc6:	6a3b      	ldr	r3, [r7, #32]
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d00a      	beq.n	8018be2 <tcp_input+0x4aa>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8018bcc:	69fb      	ldr	r3, [r7, #28]
 8018bce:	68da      	ldr	r2, [r3, #12]
 8018bd0:	6a3b      	ldr	r3, [r7, #32]
 8018bd2:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8018bd4:	4b0f      	ldr	r3, [pc, #60]	; (8018c14 <tcp_input+0x4dc>)
 8018bd6:	681a      	ldr	r2, [r3, #0]
 8018bd8:	69fb      	ldr	r3, [r7, #28]
 8018bda:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8018bdc:	4a0d      	ldr	r2, [pc, #52]	; (8018c14 <tcp_input+0x4dc>)
 8018bde:	69fb      	ldr	r3, [r7, #28]
 8018be0:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8018be2:	69f8      	ldr	r0, [r7, #28]
 8018be4:	f000 fa02 	bl	8018fec <tcp_listen_input>
      }
      pbuf_free(p);
 8018be8:	6878      	ldr	r0, [r7, #4]
 8018bea:	f7fd fc4f 	bl	801648c <pbuf_free>
      return;
 8018bee:	e1a7      	b.n	8018f40 <tcp_input+0x808>
 8018bf0:	20013258 	.word	0x20013258
 8018bf4:	2000fa84 	.word	0x2000fa84
 8018bf8:	08029184 	.word	0x08029184
 8018bfc:	080292b0 	.word	0x080292b0
 8018c00:	080291d0 	.word	0x080291d0
 8018c04:	2001323c 	.word	0x2001323c
 8018c08:	080292dc 	.word	0x080292dc
 8018c0c:	20013240 	.word	0x20013240
 8018c10:	08029308 	.word	0x08029308
 8018c14:	20013238 	.word	0x20013238
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8018c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	f000 8158 	beq.w	8018ed0 <tcp_input+0x798>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8018c20:	4b95      	ldr	r3, [pc, #596]	; (8018e78 <tcp_input+0x740>)
 8018c22:	2200      	movs	r2, #0
 8018c24:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	891a      	ldrh	r2, [r3, #8]
 8018c2a:	4b93      	ldr	r3, [pc, #588]	; (8018e78 <tcp_input+0x740>)
 8018c2c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8018c2e:	4a92      	ldr	r2, [pc, #584]	; (8018e78 <tcp_input+0x740>)
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8018c34:	4b91      	ldr	r3, [pc, #580]	; (8018e7c <tcp_input+0x744>)
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	4a8f      	ldr	r2, [pc, #572]	; (8018e78 <tcp_input+0x740>)
 8018c3a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8018c3c:	4b90      	ldr	r3, [pc, #576]	; (8018e80 <tcp_input+0x748>)
 8018c3e:	2200      	movs	r2, #0
 8018c40:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8018c42:	4b90      	ldr	r3, [pc, #576]	; (8018e84 <tcp_input+0x74c>)
 8018c44:	2200      	movs	r2, #0
 8018c46:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8018c48:	4b8f      	ldr	r3, [pc, #572]	; (8018e88 <tcp_input+0x750>)
 8018c4a:	2200      	movs	r2, #0
 8018c4c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8018c4e:	4b8f      	ldr	r3, [pc, #572]	; (8018e8c <tcp_input+0x754>)
 8018c50:	781b      	ldrb	r3, [r3, #0]
 8018c52:	f003 0308 	and.w	r3, r3, #8
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d006      	beq.n	8018c68 <tcp_input+0x530>
      p->flags |= PBUF_FLAG_PUSH;
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	7b5b      	ldrb	r3, [r3, #13]
 8018c5e:	f043 0301 	orr.w	r3, r3, #1
 8018c62:	b2da      	uxtb	r2, r3
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8018c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d017      	beq.n	8018ca0 <tcp_input+0x568>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8018c70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018c72:	f7ff f843 	bl	8017cfc <tcp_process_refused_data>
 8018c76:	4603      	mov	r3, r0
 8018c78:	f113 0f0d 	cmn.w	r3, #13
 8018c7c:	d007      	beq.n	8018c8e <tcp_input+0x556>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8018c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d00c      	beq.n	8018ca0 <tcp_input+0x568>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8018c86:	4b82      	ldr	r3, [pc, #520]	; (8018e90 <tcp_input+0x758>)
 8018c88:	881b      	ldrh	r3, [r3, #0]
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d008      	beq.n	8018ca0 <tcp_input+0x568>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8018c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	f040 80e3 	bne.w	8018e5e <tcp_input+0x726>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8018c98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018c9a:	f003 fe05 	bl	801c8a8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8018c9e:	e0de      	b.n	8018e5e <tcp_input+0x726>
      }
    }
    tcp_input_pcb = pcb;
 8018ca0:	4a7c      	ldr	r2, [pc, #496]	; (8018e94 <tcp_input+0x75c>)
 8018ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ca4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8018ca6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018ca8:	f000 fb18 	bl	80192dc <tcp_process>
 8018cac:	4603      	mov	r3, r0
 8018cae:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8018cb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018cb4:	f113 0f0d 	cmn.w	r3, #13
 8018cb8:	f000 80d3 	beq.w	8018e62 <tcp_input+0x72a>
      if (recv_flags & TF_RESET) {
 8018cbc:	4b71      	ldr	r3, [pc, #452]	; (8018e84 <tcp_input+0x74c>)
 8018cbe:	781b      	ldrb	r3, [r3, #0]
 8018cc0:	f003 0308 	and.w	r3, r3, #8
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d015      	beq.n	8018cf4 <tcp_input+0x5bc>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8018cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d008      	beq.n	8018ce4 <tcp_input+0x5ac>
 8018cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018cda:	6912      	ldr	r2, [r2, #16]
 8018cdc:	f06f 010d 	mvn.w	r1, #13
 8018ce0:	4610      	mov	r0, r2
 8018ce2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018ce4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018ce6:	486c      	ldr	r0, [pc, #432]	; (8018e98 <tcp_input+0x760>)
 8018ce8:	f7ff fbae 	bl	8018448 <tcp_pcb_remove>
        tcp_free(pcb);
 8018cec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018cee:	f7fd fe89 	bl	8016a04 <tcp_free>
 8018cf2:	e0da      	b.n	8018eaa <tcp_input+0x772>
      } else {
        err = ERR_OK;
 8018cf4:	2300      	movs	r3, #0
 8018cf6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8018cf8:	4b63      	ldr	r3, [pc, #396]	; (8018e88 <tcp_input+0x750>)
 8018cfa:	881b      	ldrh	r3, [r3, #0]
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d01d      	beq.n	8018d3c <tcp_input+0x604>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8018d00:	4b61      	ldr	r3, [pc, #388]	; (8018e88 <tcp_input+0x750>)
 8018d02:	881b      	ldrh	r3, [r3, #0]
 8018d04:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8018d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d00a      	beq.n	8018d26 <tcp_input+0x5ee>
 8018d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018d18:	6910      	ldr	r0, [r2, #16]
 8018d1a:	89fa      	ldrh	r2, [r7, #14]
 8018d1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018d1e:	4798      	blx	r3
 8018d20:	4603      	mov	r3, r0
 8018d22:	74fb      	strb	r3, [r7, #19]
 8018d24:	e001      	b.n	8018d2a <tcp_input+0x5f2>
 8018d26:	2300      	movs	r3, #0
 8018d28:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8018d2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018d2e:	f113 0f0d 	cmn.w	r3, #13
 8018d32:	f000 8098 	beq.w	8018e66 <tcp_input+0x72e>
              goto aborted;
            }
          }
          recv_acked = 0;
 8018d36:	4b54      	ldr	r3, [pc, #336]	; (8018e88 <tcp_input+0x750>)
 8018d38:	2200      	movs	r2, #0
 8018d3a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8018d3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018d3e:	f000 f915 	bl	8018f6c <tcp_input_delayed_close>
 8018d42:	4603      	mov	r3, r0
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	f040 8090 	bne.w	8018e6a <tcp_input+0x732>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8018d4a:	4b4d      	ldr	r3, [pc, #308]	; (8018e80 <tcp_input+0x748>)
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d041      	beq.n	8018dd6 <tcp_input+0x69e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8018d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	d006      	beq.n	8018d68 <tcp_input+0x630>
 8018d5a:	4b50      	ldr	r3, [pc, #320]	; (8018e9c <tcp_input+0x764>)
 8018d5c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8018d60:	494f      	ldr	r1, [pc, #316]	; (8018ea0 <tcp_input+0x768>)
 8018d62:	4850      	ldr	r0, [pc, #320]	; (8018ea4 <tcp_input+0x76c>)
 8018d64:	f00b f938 	bl	8023fd8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8018d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d6a:	8b5b      	ldrh	r3, [r3, #26]
 8018d6c:	f003 0310 	and.w	r3, r3, #16
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d008      	beq.n	8018d86 <tcp_input+0x64e>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8018d74:	4b42      	ldr	r3, [pc, #264]	; (8018e80 <tcp_input+0x748>)
 8018d76:	681b      	ldr	r3, [r3, #0]
 8018d78:	4618      	mov	r0, r3
 8018d7a:	f7fd fb87 	bl	801648c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8018d7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018d80:	f7fe f984 	bl	801708c <tcp_abort>
            goto aborted;
 8018d84:	e091      	b.n	8018eaa <tcp_input+0x772>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8018d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d00c      	beq.n	8018daa <tcp_input+0x672>
 8018d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d92:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d98:	6918      	ldr	r0, [r3, #16]
 8018d9a:	4b39      	ldr	r3, [pc, #228]	; (8018e80 <tcp_input+0x748>)
 8018d9c:	681a      	ldr	r2, [r3, #0]
 8018d9e:	2300      	movs	r3, #0
 8018da0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018da2:	47a0      	blx	r4
 8018da4:	4603      	mov	r3, r0
 8018da6:	74fb      	strb	r3, [r7, #19]
 8018da8:	e008      	b.n	8018dbc <tcp_input+0x684>
 8018daa:	4b35      	ldr	r3, [pc, #212]	; (8018e80 <tcp_input+0x748>)
 8018dac:	681a      	ldr	r2, [r3, #0]
 8018dae:	2300      	movs	r3, #0
 8018db0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018db2:	2000      	movs	r0, #0
 8018db4:	f7ff f878 	bl	8017ea8 <tcp_recv_null>
 8018db8:	4603      	mov	r3, r0
 8018dba:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8018dbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018dc0:	f113 0f0d 	cmn.w	r3, #13
 8018dc4:	d053      	beq.n	8018e6e <tcp_input+0x736>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8018dc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d003      	beq.n	8018dd6 <tcp_input+0x69e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8018dce:	4b2c      	ldr	r3, [pc, #176]	; (8018e80 <tcp_input+0x748>)
 8018dd0:	681a      	ldr	r2, [r3, #0]
 8018dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dd4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8018dd6:	4b2b      	ldr	r3, [pc, #172]	; (8018e84 <tcp_input+0x74c>)
 8018dd8:	781b      	ldrb	r3, [r3, #0]
 8018dda:	f003 0320 	and.w	r3, r3, #32
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	d030      	beq.n	8018e44 <tcp_input+0x70c>
          if (pcb->refused_data != NULL) {
 8018de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018de4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d009      	beq.n	8018dfe <tcp_input+0x6c6>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8018dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018dee:	7b5a      	ldrb	r2, [r3, #13]
 8018df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018df2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018df4:	f042 0220 	orr.w	r2, r2, #32
 8018df8:	b2d2      	uxtb	r2, r2
 8018dfa:	735a      	strb	r2, [r3, #13]
 8018dfc:	e022      	b.n	8018e44 <tcp_input+0x70c>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8018dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018e02:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8018e06:	d005      	beq.n	8018e14 <tcp_input+0x6dc>
              pcb->rcv_wnd++;
 8018e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018e0c:	3301      	adds	r3, #1
 8018e0e:	b29a      	uxth	r2, r3
 8018e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e12:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8018e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d00b      	beq.n	8018e36 <tcp_input+0x6fe>
 8018e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e20:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e26:	6918      	ldr	r0, [r3, #16]
 8018e28:	2300      	movs	r3, #0
 8018e2a:	2200      	movs	r2, #0
 8018e2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018e2e:	47a0      	blx	r4
 8018e30:	4603      	mov	r3, r0
 8018e32:	74fb      	strb	r3, [r7, #19]
 8018e34:	e001      	b.n	8018e3a <tcp_input+0x702>
 8018e36:	2300      	movs	r3, #0
 8018e38:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8018e3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018e3e:	f113 0f0d 	cmn.w	r3, #13
 8018e42:	d016      	beq.n	8018e72 <tcp_input+0x73a>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8018e44:	4b13      	ldr	r3, [pc, #76]	; (8018e94 <tcp_input+0x75c>)
 8018e46:	2200      	movs	r2, #0
 8018e48:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8018e4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018e4c:	f000 f88e 	bl	8018f6c <tcp_input_delayed_close>
 8018e50:	4603      	mov	r3, r0
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d128      	bne.n	8018ea8 <tcp_input+0x770>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8018e56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018e58:	f002 ff20 	bl	801bc9c <tcp_output>
 8018e5c:	e025      	b.n	8018eaa <tcp_input+0x772>
        goto aborted;
 8018e5e:	bf00      	nop
 8018e60:	e023      	b.n	8018eaa <tcp_input+0x772>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8018e62:	bf00      	nop
 8018e64:	e021      	b.n	8018eaa <tcp_input+0x772>
              goto aborted;
 8018e66:	bf00      	nop
 8018e68:	e01f      	b.n	8018eaa <tcp_input+0x772>
          goto aborted;
 8018e6a:	bf00      	nop
 8018e6c:	e01d      	b.n	8018eaa <tcp_input+0x772>
            goto aborted;
 8018e6e:	bf00      	nop
 8018e70:	e01b      	b.n	8018eaa <tcp_input+0x772>
              goto aborted;
 8018e72:	bf00      	nop
 8018e74:	e019      	b.n	8018eaa <tcp_input+0x772>
 8018e76:	bf00      	nop
 8018e78:	20013248 	.word	0x20013248
 8018e7c:	20013258 	.word	0x20013258
 8018e80:	20013278 	.word	0x20013278
 8018e84:	20013275 	.word	0x20013275
 8018e88:	20013270 	.word	0x20013270
 8018e8c:	20013274 	.word	0x20013274
 8018e90:	20013272 	.word	0x20013272
 8018e94:	2001327c 	.word	0x2001327c
 8018e98:	2001323c 	.word	0x2001323c
 8018e9c:	08029184 	.word	0x08029184
 8018ea0:	08029338 	.word	0x08029338
 8018ea4:	080291d0 	.word	0x080291d0
          goto aborted;
 8018ea8:	bf00      	nop
    tcp_input_pcb = NULL;
 8018eaa:	4b27      	ldr	r3, [pc, #156]	; (8018f48 <tcp_input+0x810>)
 8018eac:	2200      	movs	r2, #0
 8018eae:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8018eb0:	4b26      	ldr	r3, [pc, #152]	; (8018f4c <tcp_input+0x814>)
 8018eb2:	2200      	movs	r2, #0
 8018eb4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8018eb6:	4b26      	ldr	r3, [pc, #152]	; (8018f50 <tcp_input+0x818>)
 8018eb8:	685b      	ldr	r3, [r3, #4]
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d03f      	beq.n	8018f3e <tcp_input+0x806>
      pbuf_free(inseg.p);
 8018ebe:	4b24      	ldr	r3, [pc, #144]	; (8018f50 <tcp_input+0x818>)
 8018ec0:	685b      	ldr	r3, [r3, #4]
 8018ec2:	4618      	mov	r0, r3
 8018ec4:	f7fd fae2 	bl	801648c <pbuf_free>
      inseg.p = NULL;
 8018ec8:	4b21      	ldr	r3, [pc, #132]	; (8018f50 <tcp_input+0x818>)
 8018eca:	2200      	movs	r2, #0
 8018ecc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8018ece:	e036      	b.n	8018f3e <tcp_input+0x806>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8018ed0:	4b20      	ldr	r3, [pc, #128]	; (8018f54 <tcp_input+0x81c>)
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	899b      	ldrh	r3, [r3, #12]
 8018ed6:	b29b      	uxth	r3, r3
 8018ed8:	4618      	mov	r0, r3
 8018eda:	f7fb fed9 	bl	8014c90 <lwip_htons>
 8018ede:	4603      	mov	r3, r0
 8018ee0:	b2db      	uxtb	r3, r3
 8018ee2:	f003 0304 	and.w	r3, r3, #4
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d118      	bne.n	8018f1c <tcp_input+0x7e4>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018eea:	4b1b      	ldr	r3, [pc, #108]	; (8018f58 <tcp_input+0x820>)
 8018eec:	6819      	ldr	r1, [r3, #0]
 8018eee:	4b1b      	ldr	r3, [pc, #108]	; (8018f5c <tcp_input+0x824>)
 8018ef0:	881b      	ldrh	r3, [r3, #0]
 8018ef2:	461a      	mov	r2, r3
 8018ef4:	4b1a      	ldr	r3, [pc, #104]	; (8018f60 <tcp_input+0x828>)
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018efa:	4b16      	ldr	r3, [pc, #88]	; (8018f54 <tcp_input+0x81c>)
 8018efc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018efe:	885b      	ldrh	r3, [r3, #2]
 8018f00:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018f02:	4a14      	ldr	r2, [pc, #80]	; (8018f54 <tcp_input+0x81c>)
 8018f04:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018f06:	8812      	ldrh	r2, [r2, #0]
 8018f08:	b292      	uxth	r2, r2
 8018f0a:	9202      	str	r2, [sp, #8]
 8018f0c:	9301      	str	r3, [sp, #4]
 8018f0e:	4b15      	ldr	r3, [pc, #84]	; (8018f64 <tcp_input+0x82c>)
 8018f10:	9300      	str	r3, [sp, #0]
 8018f12:	4b15      	ldr	r3, [pc, #84]	; (8018f68 <tcp_input+0x830>)
 8018f14:	4602      	mov	r2, r0
 8018f16:	2000      	movs	r0, #0
 8018f18:	f003 fc74 	bl	801c804 <tcp_rst>
    pbuf_free(p);
 8018f1c:	6878      	ldr	r0, [r7, #4]
 8018f1e:	f7fd fab5 	bl	801648c <pbuf_free>
  return;
 8018f22:	e00c      	b.n	8018f3e <tcp_input+0x806>
    goto dropped;
 8018f24:	bf00      	nop
 8018f26:	e006      	b.n	8018f36 <tcp_input+0x7fe>
    goto dropped;
 8018f28:	bf00      	nop
 8018f2a:	e004      	b.n	8018f36 <tcp_input+0x7fe>
    goto dropped;
 8018f2c:	bf00      	nop
 8018f2e:	e002      	b.n	8018f36 <tcp_input+0x7fe>
      goto dropped;
 8018f30:	bf00      	nop
 8018f32:	e000      	b.n	8018f36 <tcp_input+0x7fe>
      goto dropped;
 8018f34:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8018f36:	6878      	ldr	r0, [r7, #4]
 8018f38:	f7fd faa8 	bl	801648c <pbuf_free>
 8018f3c:	e000      	b.n	8018f40 <tcp_input+0x808>
  return;
 8018f3e:	bf00      	nop
}
 8018f40:	372c      	adds	r7, #44	; 0x2c
 8018f42:	46bd      	mov	sp, r7
 8018f44:	bd90      	pop	{r4, r7, pc}
 8018f46:	bf00      	nop
 8018f48:	2001327c 	.word	0x2001327c
 8018f4c:	20013278 	.word	0x20013278
 8018f50:	20013248 	.word	0x20013248
 8018f54:	20013258 	.word	0x20013258
 8018f58:	2001326c 	.word	0x2001326c
 8018f5c:	20013272 	.word	0x20013272
 8018f60:	20013268 	.word	0x20013268
 8018f64:	2000fa94 	.word	0x2000fa94
 8018f68:	2000fa98 	.word	0x2000fa98

08018f6c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8018f6c:	b580      	push	{r7, lr}
 8018f6e:	b082      	sub	sp, #8
 8018f70:	af00      	add	r7, sp, #0
 8018f72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d106      	bne.n	8018f88 <tcp_input_delayed_close+0x1c>
 8018f7a:	4b17      	ldr	r3, [pc, #92]	; (8018fd8 <tcp_input_delayed_close+0x6c>)
 8018f7c:	f240 225a 	movw	r2, #602	; 0x25a
 8018f80:	4916      	ldr	r1, [pc, #88]	; (8018fdc <tcp_input_delayed_close+0x70>)
 8018f82:	4817      	ldr	r0, [pc, #92]	; (8018fe0 <tcp_input_delayed_close+0x74>)
 8018f84:	f00b f828 	bl	8023fd8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8018f88:	4b16      	ldr	r3, [pc, #88]	; (8018fe4 <tcp_input_delayed_close+0x78>)
 8018f8a:	781b      	ldrb	r3, [r3, #0]
 8018f8c:	f003 0310 	and.w	r3, r3, #16
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d01c      	beq.n	8018fce <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	8b5b      	ldrh	r3, [r3, #26]
 8018f98:	f003 0310 	and.w	r3, r3, #16
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d10d      	bne.n	8018fbc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d008      	beq.n	8018fbc <tcp_input_delayed_close+0x50>
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018fb0:	687a      	ldr	r2, [r7, #4]
 8018fb2:	6912      	ldr	r2, [r2, #16]
 8018fb4:	f06f 010e 	mvn.w	r1, #14
 8018fb8:	4610      	mov	r0, r2
 8018fba:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018fbc:	6879      	ldr	r1, [r7, #4]
 8018fbe:	480a      	ldr	r0, [pc, #40]	; (8018fe8 <tcp_input_delayed_close+0x7c>)
 8018fc0:	f7ff fa42 	bl	8018448 <tcp_pcb_remove>
    tcp_free(pcb);
 8018fc4:	6878      	ldr	r0, [r7, #4]
 8018fc6:	f7fd fd1d 	bl	8016a04 <tcp_free>
    return 1;
 8018fca:	2301      	movs	r3, #1
 8018fcc:	e000      	b.n	8018fd0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8018fce:	2300      	movs	r3, #0
}
 8018fd0:	4618      	mov	r0, r3
 8018fd2:	3708      	adds	r7, #8
 8018fd4:	46bd      	mov	sp, r7
 8018fd6:	bd80      	pop	{r7, pc}
 8018fd8:	08029184 	.word	0x08029184
 8018fdc:	08029354 	.word	0x08029354
 8018fe0:	080291d0 	.word	0x080291d0
 8018fe4:	20013275 	.word	0x20013275
 8018fe8:	2001323c 	.word	0x2001323c

08018fec <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8018fec:	b590      	push	{r4, r7, lr}
 8018fee:	b08b      	sub	sp, #44	; 0x2c
 8018ff0:	af04      	add	r7, sp, #16
 8018ff2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8018ff4:	4b6f      	ldr	r3, [pc, #444]	; (80191b4 <tcp_listen_input+0x1c8>)
 8018ff6:	781b      	ldrb	r3, [r3, #0]
 8018ff8:	f003 0304 	and.w	r3, r3, #4
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	f040 80d2 	bne.w	80191a6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	2b00      	cmp	r3, #0
 8019006:	d106      	bne.n	8019016 <tcp_listen_input+0x2a>
 8019008:	4b6b      	ldr	r3, [pc, #428]	; (80191b8 <tcp_listen_input+0x1cc>)
 801900a:	f240 2281 	movw	r2, #641	; 0x281
 801900e:	496b      	ldr	r1, [pc, #428]	; (80191bc <tcp_listen_input+0x1d0>)
 8019010:	486b      	ldr	r0, [pc, #428]	; (80191c0 <tcp_listen_input+0x1d4>)
 8019012:	f00a ffe1 	bl	8023fd8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8019016:	4b67      	ldr	r3, [pc, #412]	; (80191b4 <tcp_listen_input+0x1c8>)
 8019018:	781b      	ldrb	r3, [r3, #0]
 801901a:	f003 0310 	and.w	r3, r3, #16
 801901e:	2b00      	cmp	r3, #0
 8019020:	d019      	beq.n	8019056 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019022:	4b68      	ldr	r3, [pc, #416]	; (80191c4 <tcp_listen_input+0x1d8>)
 8019024:	6819      	ldr	r1, [r3, #0]
 8019026:	4b68      	ldr	r3, [pc, #416]	; (80191c8 <tcp_listen_input+0x1dc>)
 8019028:	881b      	ldrh	r3, [r3, #0]
 801902a:	461a      	mov	r2, r3
 801902c:	4b67      	ldr	r3, [pc, #412]	; (80191cc <tcp_listen_input+0x1e0>)
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019032:	4b67      	ldr	r3, [pc, #412]	; (80191d0 <tcp_listen_input+0x1e4>)
 8019034:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019036:	885b      	ldrh	r3, [r3, #2]
 8019038:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801903a:	4a65      	ldr	r2, [pc, #404]	; (80191d0 <tcp_listen_input+0x1e4>)
 801903c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801903e:	8812      	ldrh	r2, [r2, #0]
 8019040:	b292      	uxth	r2, r2
 8019042:	9202      	str	r2, [sp, #8]
 8019044:	9301      	str	r3, [sp, #4]
 8019046:	4b63      	ldr	r3, [pc, #396]	; (80191d4 <tcp_listen_input+0x1e8>)
 8019048:	9300      	str	r3, [sp, #0]
 801904a:	4b63      	ldr	r3, [pc, #396]	; (80191d8 <tcp_listen_input+0x1ec>)
 801904c:	4602      	mov	r2, r0
 801904e:	6878      	ldr	r0, [r7, #4]
 8019050:	f003 fbd8 	bl	801c804 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8019054:	e0a9      	b.n	80191aa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8019056:	4b57      	ldr	r3, [pc, #348]	; (80191b4 <tcp_listen_input+0x1c8>)
 8019058:	781b      	ldrb	r3, [r3, #0]
 801905a:	f003 0302 	and.w	r3, r3, #2
 801905e:	2b00      	cmp	r3, #0
 8019060:	f000 80a3 	beq.w	80191aa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	7d5b      	ldrb	r3, [r3, #21]
 8019068:	4618      	mov	r0, r3
 801906a:	f7ff f841 	bl	80180f0 <tcp_alloc>
 801906e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8019070:	697b      	ldr	r3, [r7, #20]
 8019072:	2b00      	cmp	r3, #0
 8019074:	d111      	bne.n	801909a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	699b      	ldr	r3, [r3, #24]
 801907a:	2b00      	cmp	r3, #0
 801907c:	d00a      	beq.n	8019094 <tcp_listen_input+0xa8>
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	699b      	ldr	r3, [r3, #24]
 8019082:	687a      	ldr	r2, [r7, #4]
 8019084:	6910      	ldr	r0, [r2, #16]
 8019086:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801908a:	2100      	movs	r1, #0
 801908c:	4798      	blx	r3
 801908e:	4603      	mov	r3, r0
 8019090:	73bb      	strb	r3, [r7, #14]
      return;
 8019092:	e08b      	b.n	80191ac <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8019094:	23f0      	movs	r3, #240	; 0xf0
 8019096:	73bb      	strb	r3, [r7, #14]
      return;
 8019098:	e088      	b.n	80191ac <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801909a:	4b50      	ldr	r3, [pc, #320]	; (80191dc <tcp_listen_input+0x1f0>)
 801909c:	695a      	ldr	r2, [r3, #20]
 801909e:	697b      	ldr	r3, [r7, #20]
 80190a0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80190a2:	4b4e      	ldr	r3, [pc, #312]	; (80191dc <tcp_listen_input+0x1f0>)
 80190a4:	691a      	ldr	r2, [r3, #16]
 80190a6:	697b      	ldr	r3, [r7, #20]
 80190a8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	8ada      	ldrh	r2, [r3, #22]
 80190ae:	697b      	ldr	r3, [r7, #20]
 80190b0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80190b2:	4b47      	ldr	r3, [pc, #284]	; (80191d0 <tcp_listen_input+0x1e4>)
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	881b      	ldrh	r3, [r3, #0]
 80190b8:	b29a      	uxth	r2, r3
 80190ba:	697b      	ldr	r3, [r7, #20]
 80190bc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80190be:	697b      	ldr	r3, [r7, #20]
 80190c0:	2203      	movs	r2, #3
 80190c2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80190c4:	4b41      	ldr	r3, [pc, #260]	; (80191cc <tcp_listen_input+0x1e0>)
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	1c5a      	adds	r2, r3, #1
 80190ca:	697b      	ldr	r3, [r7, #20]
 80190cc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80190ce:	697b      	ldr	r3, [r7, #20]
 80190d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80190d2:	697b      	ldr	r3, [r7, #20]
 80190d4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80190d6:	6978      	ldr	r0, [r7, #20]
 80190d8:	f7ff fa4a 	bl	8018570 <tcp_next_iss>
 80190dc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80190de:	697b      	ldr	r3, [r7, #20]
 80190e0:	693a      	ldr	r2, [r7, #16]
 80190e2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80190e4:	697b      	ldr	r3, [r7, #20]
 80190e6:	693a      	ldr	r2, [r7, #16]
 80190e8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80190ea:	697b      	ldr	r3, [r7, #20]
 80190ec:	693a      	ldr	r2, [r7, #16]
 80190ee:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80190f0:	697b      	ldr	r3, [r7, #20]
 80190f2:	693a      	ldr	r2, [r7, #16]
 80190f4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80190f6:	4b35      	ldr	r3, [pc, #212]	; (80191cc <tcp_listen_input+0x1e0>)
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	1e5a      	subs	r2, r3, #1
 80190fc:	697b      	ldr	r3, [r7, #20]
 80190fe:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	691a      	ldr	r2, [r3, #16]
 8019104:	697b      	ldr	r3, [r7, #20]
 8019106:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8019108:	697b      	ldr	r3, [r7, #20]
 801910a:	687a      	ldr	r2, [r7, #4]
 801910c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	7a5b      	ldrb	r3, [r3, #9]
 8019112:	f003 030c 	and.w	r3, r3, #12
 8019116:	b2da      	uxtb	r2, r3
 8019118:	697b      	ldr	r3, [r7, #20]
 801911a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	7a1a      	ldrb	r2, [r3, #8]
 8019120:	697b      	ldr	r3, [r7, #20]
 8019122:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8019124:	4b2e      	ldr	r3, [pc, #184]	; (80191e0 <tcp_listen_input+0x1f4>)
 8019126:	681a      	ldr	r2, [r3, #0]
 8019128:	697b      	ldr	r3, [r7, #20]
 801912a:	60da      	str	r2, [r3, #12]
 801912c:	4a2c      	ldr	r2, [pc, #176]	; (80191e0 <tcp_listen_input+0x1f4>)
 801912e:	697b      	ldr	r3, [r7, #20]
 8019130:	6013      	str	r3, [r2, #0]
 8019132:	f003 fd29 	bl	801cb88 <tcp_timer_needed>
 8019136:	4b2b      	ldr	r3, [pc, #172]	; (80191e4 <tcp_listen_input+0x1f8>)
 8019138:	2201      	movs	r2, #1
 801913a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801913c:	6978      	ldr	r0, [r7, #20]
 801913e:	f001 fd8f 	bl	801ac60 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8019142:	4b23      	ldr	r3, [pc, #140]	; (80191d0 <tcp_listen_input+0x1e4>)
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	89db      	ldrh	r3, [r3, #14]
 8019148:	b29a      	uxth	r2, r3
 801914a:	697b      	ldr	r3, [r7, #20]
 801914c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8019150:	697b      	ldr	r3, [r7, #20]
 8019152:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019156:	697b      	ldr	r3, [r7, #20]
 8019158:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801915c:	697b      	ldr	r3, [r7, #20]
 801915e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8019160:	697b      	ldr	r3, [r7, #20]
 8019162:	3304      	adds	r3, #4
 8019164:	4618      	mov	r0, r3
 8019166:	f007 fad9 	bl	802071c <ip4_route>
 801916a:	4601      	mov	r1, r0
 801916c:	697b      	ldr	r3, [r7, #20]
 801916e:	3304      	adds	r3, #4
 8019170:	461a      	mov	r2, r3
 8019172:	4620      	mov	r0, r4
 8019174:	f7ff fa22 	bl	80185bc <tcp_eff_send_mss_netif>
 8019178:	4603      	mov	r3, r0
 801917a:	461a      	mov	r2, r3
 801917c:	697b      	ldr	r3, [r7, #20]
 801917e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8019180:	2112      	movs	r1, #18
 8019182:	6978      	ldr	r0, [r7, #20]
 8019184:	f002 fc9c 	bl	801bac0 <tcp_enqueue_flags>
 8019188:	4603      	mov	r3, r0
 801918a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801918c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019190:	2b00      	cmp	r3, #0
 8019192:	d004      	beq.n	801919e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8019194:	2100      	movs	r1, #0
 8019196:	6978      	ldr	r0, [r7, #20]
 8019198:	f7fd feba 	bl	8016f10 <tcp_abandon>
      return;
 801919c:	e006      	b.n	80191ac <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801919e:	6978      	ldr	r0, [r7, #20]
 80191a0:	f002 fd7c 	bl	801bc9c <tcp_output>
  return;
 80191a4:	e001      	b.n	80191aa <tcp_listen_input+0x1be>
    return;
 80191a6:	bf00      	nop
 80191a8:	e000      	b.n	80191ac <tcp_listen_input+0x1c0>
  return;
 80191aa:	bf00      	nop
}
 80191ac:	371c      	adds	r7, #28
 80191ae:	46bd      	mov	sp, r7
 80191b0:	bd90      	pop	{r4, r7, pc}
 80191b2:	bf00      	nop
 80191b4:	20013274 	.word	0x20013274
 80191b8:	08029184 	.word	0x08029184
 80191bc:	0802937c 	.word	0x0802937c
 80191c0:	080291d0 	.word	0x080291d0
 80191c4:	2001326c 	.word	0x2001326c
 80191c8:	20013272 	.word	0x20013272
 80191cc:	20013268 	.word	0x20013268
 80191d0:	20013258 	.word	0x20013258
 80191d4:	2000fa94 	.word	0x2000fa94
 80191d8:	2000fa98 	.word	0x2000fa98
 80191dc:	2000fa84 	.word	0x2000fa84
 80191e0:	2001323c 	.word	0x2001323c
 80191e4:	20013244 	.word	0x20013244

080191e8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80191e8:	b580      	push	{r7, lr}
 80191ea:	b086      	sub	sp, #24
 80191ec:	af04      	add	r7, sp, #16
 80191ee:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80191f0:	4b2f      	ldr	r3, [pc, #188]	; (80192b0 <tcp_timewait_input+0xc8>)
 80191f2:	781b      	ldrb	r3, [r3, #0]
 80191f4:	f003 0304 	and.w	r3, r3, #4
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d153      	bne.n	80192a4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d106      	bne.n	8019210 <tcp_timewait_input+0x28>
 8019202:	4b2c      	ldr	r3, [pc, #176]	; (80192b4 <tcp_timewait_input+0xcc>)
 8019204:	f240 22ee 	movw	r2, #750	; 0x2ee
 8019208:	492b      	ldr	r1, [pc, #172]	; (80192b8 <tcp_timewait_input+0xd0>)
 801920a:	482c      	ldr	r0, [pc, #176]	; (80192bc <tcp_timewait_input+0xd4>)
 801920c:	f00a fee4 	bl	8023fd8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8019210:	4b27      	ldr	r3, [pc, #156]	; (80192b0 <tcp_timewait_input+0xc8>)
 8019212:	781b      	ldrb	r3, [r3, #0]
 8019214:	f003 0302 	and.w	r3, r3, #2
 8019218:	2b00      	cmp	r3, #0
 801921a:	d02a      	beq.n	8019272 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801921c:	4b28      	ldr	r3, [pc, #160]	; (80192c0 <tcp_timewait_input+0xd8>)
 801921e:	681a      	ldr	r2, [r3, #0]
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019224:	1ad3      	subs	r3, r2, r3
 8019226:	2b00      	cmp	r3, #0
 8019228:	db2d      	blt.n	8019286 <tcp_timewait_input+0x9e>
 801922a:	4b25      	ldr	r3, [pc, #148]	; (80192c0 <tcp_timewait_input+0xd8>)
 801922c:	681a      	ldr	r2, [r3, #0]
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019232:	6879      	ldr	r1, [r7, #4]
 8019234:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019236:	440b      	add	r3, r1
 8019238:	1ad3      	subs	r3, r2, r3
 801923a:	2b00      	cmp	r3, #0
 801923c:	dc23      	bgt.n	8019286 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801923e:	4b21      	ldr	r3, [pc, #132]	; (80192c4 <tcp_timewait_input+0xdc>)
 8019240:	6819      	ldr	r1, [r3, #0]
 8019242:	4b21      	ldr	r3, [pc, #132]	; (80192c8 <tcp_timewait_input+0xe0>)
 8019244:	881b      	ldrh	r3, [r3, #0]
 8019246:	461a      	mov	r2, r3
 8019248:	4b1d      	ldr	r3, [pc, #116]	; (80192c0 <tcp_timewait_input+0xd8>)
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801924e:	4b1f      	ldr	r3, [pc, #124]	; (80192cc <tcp_timewait_input+0xe4>)
 8019250:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019252:	885b      	ldrh	r3, [r3, #2]
 8019254:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019256:	4a1d      	ldr	r2, [pc, #116]	; (80192cc <tcp_timewait_input+0xe4>)
 8019258:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801925a:	8812      	ldrh	r2, [r2, #0]
 801925c:	b292      	uxth	r2, r2
 801925e:	9202      	str	r2, [sp, #8]
 8019260:	9301      	str	r3, [sp, #4]
 8019262:	4b1b      	ldr	r3, [pc, #108]	; (80192d0 <tcp_timewait_input+0xe8>)
 8019264:	9300      	str	r3, [sp, #0]
 8019266:	4b1b      	ldr	r3, [pc, #108]	; (80192d4 <tcp_timewait_input+0xec>)
 8019268:	4602      	mov	r2, r0
 801926a:	6878      	ldr	r0, [r7, #4]
 801926c:	f003 faca 	bl	801c804 <tcp_rst>
      return;
 8019270:	e01b      	b.n	80192aa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8019272:	4b0f      	ldr	r3, [pc, #60]	; (80192b0 <tcp_timewait_input+0xc8>)
 8019274:	781b      	ldrb	r3, [r3, #0]
 8019276:	f003 0301 	and.w	r3, r3, #1
 801927a:	2b00      	cmp	r3, #0
 801927c:	d003      	beq.n	8019286 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801927e:	4b16      	ldr	r3, [pc, #88]	; (80192d8 <tcp_timewait_input+0xf0>)
 8019280:	681a      	ldr	r2, [r3, #0]
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8019286:	4b10      	ldr	r3, [pc, #64]	; (80192c8 <tcp_timewait_input+0xe0>)
 8019288:	881b      	ldrh	r3, [r3, #0]
 801928a:	2b00      	cmp	r3, #0
 801928c:	d00c      	beq.n	80192a8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	8b5b      	ldrh	r3, [r3, #26]
 8019292:	f043 0302 	orr.w	r3, r3, #2
 8019296:	b29a      	uxth	r2, r3
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801929c:	6878      	ldr	r0, [r7, #4]
 801929e:	f002 fcfd 	bl	801bc9c <tcp_output>
  }
  return;
 80192a2:	e001      	b.n	80192a8 <tcp_timewait_input+0xc0>
    return;
 80192a4:	bf00      	nop
 80192a6:	e000      	b.n	80192aa <tcp_timewait_input+0xc2>
  return;
 80192a8:	bf00      	nop
}
 80192aa:	3708      	adds	r7, #8
 80192ac:	46bd      	mov	sp, r7
 80192ae:	bd80      	pop	{r7, pc}
 80192b0:	20013274 	.word	0x20013274
 80192b4:	08029184 	.word	0x08029184
 80192b8:	0802939c 	.word	0x0802939c
 80192bc:	080291d0 	.word	0x080291d0
 80192c0:	20013268 	.word	0x20013268
 80192c4:	2001326c 	.word	0x2001326c
 80192c8:	20013272 	.word	0x20013272
 80192cc:	20013258 	.word	0x20013258
 80192d0:	2000fa94 	.word	0x2000fa94
 80192d4:	2000fa98 	.word	0x2000fa98
 80192d8:	20013230 	.word	0x20013230

080192dc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80192dc:	b590      	push	{r4, r7, lr}
 80192de:	b08d      	sub	sp, #52	; 0x34
 80192e0:	af04      	add	r7, sp, #16
 80192e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80192e4:	2300      	movs	r3, #0
 80192e6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80192e8:	2300      	movs	r3, #0
 80192ea:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d106      	bne.n	8019300 <tcp_process+0x24>
 80192f2:	4b9d      	ldr	r3, [pc, #628]	; (8019568 <tcp_process+0x28c>)
 80192f4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80192f8:	499c      	ldr	r1, [pc, #624]	; (801956c <tcp_process+0x290>)
 80192fa:	489d      	ldr	r0, [pc, #628]	; (8019570 <tcp_process+0x294>)
 80192fc:	f00a fe6c 	bl	8023fd8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8019300:	4b9c      	ldr	r3, [pc, #624]	; (8019574 <tcp_process+0x298>)
 8019302:	781b      	ldrb	r3, [r3, #0]
 8019304:	f003 0304 	and.w	r3, r3, #4
 8019308:	2b00      	cmp	r3, #0
 801930a:	d04e      	beq.n	80193aa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	7d1b      	ldrb	r3, [r3, #20]
 8019310:	2b02      	cmp	r3, #2
 8019312:	d108      	bne.n	8019326 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019318:	4b97      	ldr	r3, [pc, #604]	; (8019578 <tcp_process+0x29c>)
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	429a      	cmp	r2, r3
 801931e:	d123      	bne.n	8019368 <tcp_process+0x8c>
        acceptable = 1;
 8019320:	2301      	movs	r3, #1
 8019322:	76fb      	strb	r3, [r7, #27]
 8019324:	e020      	b.n	8019368 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801932a:	4b94      	ldr	r3, [pc, #592]	; (801957c <tcp_process+0x2a0>)
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	429a      	cmp	r2, r3
 8019330:	d102      	bne.n	8019338 <tcp_process+0x5c>
        acceptable = 1;
 8019332:	2301      	movs	r3, #1
 8019334:	76fb      	strb	r3, [r7, #27]
 8019336:	e017      	b.n	8019368 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019338:	4b90      	ldr	r3, [pc, #576]	; (801957c <tcp_process+0x2a0>)
 801933a:	681a      	ldr	r2, [r3, #0]
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019340:	1ad3      	subs	r3, r2, r3
 8019342:	2b00      	cmp	r3, #0
 8019344:	db10      	blt.n	8019368 <tcp_process+0x8c>
 8019346:	4b8d      	ldr	r3, [pc, #564]	; (801957c <tcp_process+0x2a0>)
 8019348:	681a      	ldr	r2, [r3, #0]
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801934e:	6879      	ldr	r1, [r7, #4]
 8019350:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019352:	440b      	add	r3, r1
 8019354:	1ad3      	subs	r3, r2, r3
 8019356:	2b00      	cmp	r3, #0
 8019358:	dc06      	bgt.n	8019368 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	8b5b      	ldrh	r3, [r3, #26]
 801935e:	f043 0302 	orr.w	r3, r3, #2
 8019362:	b29a      	uxth	r2, r3
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8019368:	7efb      	ldrb	r3, [r7, #27]
 801936a:	2b00      	cmp	r3, #0
 801936c:	d01b      	beq.n	80193a6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	7d1b      	ldrb	r3, [r3, #20]
 8019372:	2b00      	cmp	r3, #0
 8019374:	d106      	bne.n	8019384 <tcp_process+0xa8>
 8019376:	4b7c      	ldr	r3, [pc, #496]	; (8019568 <tcp_process+0x28c>)
 8019378:	f44f 724e 	mov.w	r2, #824	; 0x338
 801937c:	4980      	ldr	r1, [pc, #512]	; (8019580 <tcp_process+0x2a4>)
 801937e:	487c      	ldr	r0, [pc, #496]	; (8019570 <tcp_process+0x294>)
 8019380:	f00a fe2a 	bl	8023fd8 <iprintf>
      recv_flags |= TF_RESET;
 8019384:	4b7f      	ldr	r3, [pc, #508]	; (8019584 <tcp_process+0x2a8>)
 8019386:	781b      	ldrb	r3, [r3, #0]
 8019388:	f043 0308 	orr.w	r3, r3, #8
 801938c:	b2da      	uxtb	r2, r3
 801938e:	4b7d      	ldr	r3, [pc, #500]	; (8019584 <tcp_process+0x2a8>)
 8019390:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	8b5b      	ldrh	r3, [r3, #26]
 8019396:	f023 0301 	bic.w	r3, r3, #1
 801939a:	b29a      	uxth	r2, r3
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80193a0:	f06f 030d 	mvn.w	r3, #13
 80193a4:	e37a      	b.n	8019a9c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80193a6:	2300      	movs	r3, #0
 80193a8:	e378      	b.n	8019a9c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80193aa:	4b72      	ldr	r3, [pc, #456]	; (8019574 <tcp_process+0x298>)
 80193ac:	781b      	ldrb	r3, [r3, #0]
 80193ae:	f003 0302 	and.w	r3, r3, #2
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d010      	beq.n	80193d8 <tcp_process+0xfc>
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	7d1b      	ldrb	r3, [r3, #20]
 80193ba:	2b02      	cmp	r3, #2
 80193bc:	d00c      	beq.n	80193d8 <tcp_process+0xfc>
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	7d1b      	ldrb	r3, [r3, #20]
 80193c2:	2b03      	cmp	r3, #3
 80193c4:	d008      	beq.n	80193d8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	8b5b      	ldrh	r3, [r3, #26]
 80193ca:	f043 0302 	orr.w	r3, r3, #2
 80193ce:	b29a      	uxth	r2, r3
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80193d4:	2300      	movs	r3, #0
 80193d6:	e361      	b.n	8019a9c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	8b5b      	ldrh	r3, [r3, #26]
 80193dc:	f003 0310 	and.w	r3, r3, #16
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d103      	bne.n	80193ec <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80193e4:	4b68      	ldr	r3, [pc, #416]	; (8019588 <tcp_process+0x2ac>)
 80193e6:	681a      	ldr	r2, [r3, #0]
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	2200      	movs	r2, #0
 80193f0:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
  pcb->persist_probe = 0;
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	2200      	movs	r2, #0
 80193f8:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2

  tcp_parseopt(pcb);
 80193fc:	6878      	ldr	r0, [r7, #4]
 80193fe:	f001 fc2f 	bl	801ac60 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	7d1b      	ldrb	r3, [r3, #20]
 8019406:	3b02      	subs	r3, #2
 8019408:	2b07      	cmp	r3, #7
 801940a:	f200 8337 	bhi.w	8019a7c <tcp_process+0x7a0>
 801940e:	a201      	add	r2, pc, #4	; (adr r2, 8019414 <tcp_process+0x138>)
 8019410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019414:	08019435 	.word	0x08019435
 8019418:	08019665 	.word	0x08019665
 801941c:	080197dd 	.word	0x080197dd
 8019420:	08019807 	.word	0x08019807
 8019424:	0801992b 	.word	0x0801992b
 8019428:	080197dd 	.word	0x080197dd
 801942c:	080199b7 	.word	0x080199b7
 8019430:	08019a47 	.word	0x08019a47
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8019434:	4b4f      	ldr	r3, [pc, #316]	; (8019574 <tcp_process+0x298>)
 8019436:	781b      	ldrb	r3, [r3, #0]
 8019438:	f003 0310 	and.w	r3, r3, #16
 801943c:	2b00      	cmp	r3, #0
 801943e:	f000 80e4 	beq.w	801960a <tcp_process+0x32e>
 8019442:	4b4c      	ldr	r3, [pc, #304]	; (8019574 <tcp_process+0x298>)
 8019444:	781b      	ldrb	r3, [r3, #0]
 8019446:	f003 0302 	and.w	r3, r3, #2
 801944a:	2b00      	cmp	r3, #0
 801944c:	f000 80dd 	beq.w	801960a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019454:	1c5a      	adds	r2, r3, #1
 8019456:	4b48      	ldr	r3, [pc, #288]	; (8019578 <tcp_process+0x29c>)
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	429a      	cmp	r2, r3
 801945c:	f040 80d5 	bne.w	801960a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8019460:	4b46      	ldr	r3, [pc, #280]	; (801957c <tcp_process+0x2a0>)
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	1c5a      	adds	r2, r3, #1
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8019472:	4b41      	ldr	r3, [pc, #260]	; (8019578 <tcp_process+0x29c>)
 8019474:	681a      	ldr	r2, [r3, #0]
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801947a:	4b44      	ldr	r3, [pc, #272]	; (801958c <tcp_process+0x2b0>)
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	89db      	ldrh	r3, [r3, #14]
 8019480:	b29a      	uxth	r2, r3
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8019494:	4b39      	ldr	r3, [pc, #228]	; (801957c <tcp_process+0x2a0>)
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	1e5a      	subs	r2, r3, #1
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	2204      	movs	r2, #4
 80194a2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	3304      	adds	r3, #4
 80194ac:	4618      	mov	r0, r3
 80194ae:	f007 f935 	bl	802071c <ip4_route>
 80194b2:	4601      	mov	r1, r0
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	3304      	adds	r3, #4
 80194b8:	461a      	mov	r2, r3
 80194ba:	4620      	mov	r0, r4
 80194bc:	f7ff f87e 	bl	80185bc <tcp_eff_send_mss_netif>
 80194c0:	4603      	mov	r3, r0
 80194c2:	461a      	mov	r2, r3
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80194cc:	009a      	lsls	r2, r3, #2
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80194d2:	005b      	lsls	r3, r3, #1
 80194d4:	f241 111c 	movw	r1, #4380	; 0x111c
 80194d8:	428b      	cmp	r3, r1
 80194da:	bf38      	it	cc
 80194dc:	460b      	movcc	r3, r1
 80194de:	429a      	cmp	r2, r3
 80194e0:	d204      	bcs.n	80194ec <tcp_process+0x210>
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80194e6:	009b      	lsls	r3, r3, #2
 80194e8:	b29b      	uxth	r3, r3
 80194ea:	e00d      	b.n	8019508 <tcp_process+0x22c>
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80194f0:	005b      	lsls	r3, r3, #1
 80194f2:	f241 121c 	movw	r2, #4380	; 0x111c
 80194f6:	4293      	cmp	r3, r2
 80194f8:	d904      	bls.n	8019504 <tcp_process+0x228>
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80194fe:	005b      	lsls	r3, r3, #1
 8019500:	b29b      	uxth	r3, r3
 8019502:	e001      	b.n	8019508 <tcp_process+0x22c>
 8019504:	f241 131c 	movw	r3, #4380	; 0x111c
 8019508:	687a      	ldr	r2, [r7, #4]
 801950a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019514:	2b00      	cmp	r3, #0
 8019516:	d106      	bne.n	8019526 <tcp_process+0x24a>
 8019518:	4b13      	ldr	r3, [pc, #76]	; (8019568 <tcp_process+0x28c>)
 801951a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801951e:	491c      	ldr	r1, [pc, #112]	; (8019590 <tcp_process+0x2b4>)
 8019520:	4813      	ldr	r0, [pc, #76]	; (8019570 <tcp_process+0x294>)
 8019522:	f00a fd59 	bl	8023fd8 <iprintf>
        --pcb->snd_queuelen;
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801952c:	3b01      	subs	r3, #1
 801952e:	b29a      	uxth	r2, r3
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801953a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801953c:	69fb      	ldr	r3, [r7, #28]
 801953e:	2b00      	cmp	r3, #0
 8019540:	d12a      	bne.n	8019598 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019546:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8019548:	69fb      	ldr	r3, [r7, #28]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d106      	bne.n	801955c <tcp_process+0x280>
 801954e:	4b06      	ldr	r3, [pc, #24]	; (8019568 <tcp_process+0x28c>)
 8019550:	f44f 725d 	mov.w	r2, #884	; 0x374
 8019554:	490f      	ldr	r1, [pc, #60]	; (8019594 <tcp_process+0x2b8>)
 8019556:	4806      	ldr	r0, [pc, #24]	; (8019570 <tcp_process+0x294>)
 8019558:	f00a fd3e 	bl	8023fd8 <iprintf>
          pcb->unsent = rseg->next;
 801955c:	69fb      	ldr	r3, [r7, #28]
 801955e:	681a      	ldr	r2, [r3, #0]
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	66da      	str	r2, [r3, #108]	; 0x6c
 8019564:	e01c      	b.n	80195a0 <tcp_process+0x2c4>
 8019566:	bf00      	nop
 8019568:	08029184 	.word	0x08029184
 801956c:	080293bc 	.word	0x080293bc
 8019570:	080291d0 	.word	0x080291d0
 8019574:	20013274 	.word	0x20013274
 8019578:	2001326c 	.word	0x2001326c
 801957c:	20013268 	.word	0x20013268
 8019580:	080293d8 	.word	0x080293d8
 8019584:	20013275 	.word	0x20013275
 8019588:	20013230 	.word	0x20013230
 801958c:	20013258 	.word	0x20013258
 8019590:	080293f8 	.word	0x080293f8
 8019594:	08029410 	.word	0x08029410
        } else {
          pcb->unacked = rseg->next;
 8019598:	69fb      	ldr	r3, [r7, #28]
 801959a:	681a      	ldr	r2, [r3, #0]
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80195a0:	69f8      	ldr	r0, [r7, #28]
 80195a2:	f7fe fc3c 	bl	8017e1e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d104      	bne.n	80195b8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80195b4:	861a      	strh	r2, [r3, #48]	; 0x30
 80195b6:	e006      	b.n	80195c6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	2200      	movs	r2, #0
 80195bc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	2200      	movs	r2, #0
 80195c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d00a      	beq.n	80195e6 <tcp_process+0x30a>
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80195d6:	687a      	ldr	r2, [r7, #4]
 80195d8:	6910      	ldr	r0, [r2, #16]
 80195da:	2200      	movs	r2, #0
 80195dc:	6879      	ldr	r1, [r7, #4]
 80195de:	4798      	blx	r3
 80195e0:	4603      	mov	r3, r0
 80195e2:	76bb      	strb	r3, [r7, #26]
 80195e4:	e001      	b.n	80195ea <tcp_process+0x30e>
 80195e6:	2300      	movs	r3, #0
 80195e8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80195ea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80195ee:	f113 0f0d 	cmn.w	r3, #13
 80195f2:	d102      	bne.n	80195fa <tcp_process+0x31e>
          return ERR_ABRT;
 80195f4:	f06f 030c 	mvn.w	r3, #12
 80195f8:	e250      	b.n	8019a9c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	8b5b      	ldrh	r3, [r3, #26]
 80195fe:	f043 0302 	orr.w	r3, r3, #2
 8019602:	b29a      	uxth	r2, r3
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8019608:	e23a      	b.n	8019a80 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801960a:	4b98      	ldr	r3, [pc, #608]	; (801986c <tcp_process+0x590>)
 801960c:	781b      	ldrb	r3, [r3, #0]
 801960e:	f003 0310 	and.w	r3, r3, #16
 8019612:	2b00      	cmp	r3, #0
 8019614:	f000 8234 	beq.w	8019a80 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019618:	4b95      	ldr	r3, [pc, #596]	; (8019870 <tcp_process+0x594>)
 801961a:	6819      	ldr	r1, [r3, #0]
 801961c:	4b95      	ldr	r3, [pc, #596]	; (8019874 <tcp_process+0x598>)
 801961e:	881b      	ldrh	r3, [r3, #0]
 8019620:	461a      	mov	r2, r3
 8019622:	4b95      	ldr	r3, [pc, #596]	; (8019878 <tcp_process+0x59c>)
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019628:	4b94      	ldr	r3, [pc, #592]	; (801987c <tcp_process+0x5a0>)
 801962a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801962c:	885b      	ldrh	r3, [r3, #2]
 801962e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019630:	4a92      	ldr	r2, [pc, #584]	; (801987c <tcp_process+0x5a0>)
 8019632:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019634:	8812      	ldrh	r2, [r2, #0]
 8019636:	b292      	uxth	r2, r2
 8019638:	9202      	str	r2, [sp, #8]
 801963a:	9301      	str	r3, [sp, #4]
 801963c:	4b90      	ldr	r3, [pc, #576]	; (8019880 <tcp_process+0x5a4>)
 801963e:	9300      	str	r3, [sp, #0]
 8019640:	4b90      	ldr	r3, [pc, #576]	; (8019884 <tcp_process+0x5a8>)
 8019642:	4602      	mov	r2, r0
 8019644:	6878      	ldr	r0, [r7, #4]
 8019646:	f003 f8dd 	bl	801c804 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019650:	2b05      	cmp	r3, #5
 8019652:	f200 8215 	bhi.w	8019a80 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	2200      	movs	r2, #0
 801965a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801965c:	6878      	ldr	r0, [r7, #4]
 801965e:	f002 fea9 	bl	801c3b4 <tcp_rexmit_rto>
      break;
 8019662:	e20d      	b.n	8019a80 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8019664:	4b81      	ldr	r3, [pc, #516]	; (801986c <tcp_process+0x590>)
 8019666:	781b      	ldrb	r3, [r3, #0]
 8019668:	f003 0310 	and.w	r3, r3, #16
 801966c:	2b00      	cmp	r3, #0
 801966e:	f000 80a1 	beq.w	80197b4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019672:	4b7f      	ldr	r3, [pc, #508]	; (8019870 <tcp_process+0x594>)
 8019674:	681a      	ldr	r2, [r3, #0]
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801967a:	1ad3      	subs	r3, r2, r3
 801967c:	3b01      	subs	r3, #1
 801967e:	2b00      	cmp	r3, #0
 8019680:	db7e      	blt.n	8019780 <tcp_process+0x4a4>
 8019682:	4b7b      	ldr	r3, [pc, #492]	; (8019870 <tcp_process+0x594>)
 8019684:	681a      	ldr	r2, [r3, #0]
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801968a:	1ad3      	subs	r3, r2, r3
 801968c:	2b00      	cmp	r3, #0
 801968e:	dc77      	bgt.n	8019780 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	2204      	movs	r2, #4
 8019694:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801969a:	2b00      	cmp	r3, #0
 801969c:	d102      	bne.n	80196a4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801969e:	23fa      	movs	r3, #250	; 0xfa
 80196a0:	76bb      	strb	r3, [r7, #26]
 80196a2:	e01d      	b.n	80196e0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80196a8:	699b      	ldr	r3, [r3, #24]
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d106      	bne.n	80196bc <tcp_process+0x3e0>
 80196ae:	4b76      	ldr	r3, [pc, #472]	; (8019888 <tcp_process+0x5ac>)
 80196b0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80196b4:	4975      	ldr	r1, [pc, #468]	; (801988c <tcp_process+0x5b0>)
 80196b6:	4876      	ldr	r0, [pc, #472]	; (8019890 <tcp_process+0x5b4>)
 80196b8:	f00a fc8e 	bl	8023fd8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80196c0:	699b      	ldr	r3, [r3, #24]
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d00a      	beq.n	80196dc <tcp_process+0x400>
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80196ca:	699b      	ldr	r3, [r3, #24]
 80196cc:	687a      	ldr	r2, [r7, #4]
 80196ce:	6910      	ldr	r0, [r2, #16]
 80196d0:	2200      	movs	r2, #0
 80196d2:	6879      	ldr	r1, [r7, #4]
 80196d4:	4798      	blx	r3
 80196d6:	4603      	mov	r3, r0
 80196d8:	76bb      	strb	r3, [r7, #26]
 80196da:	e001      	b.n	80196e0 <tcp_process+0x404>
 80196dc:	23f0      	movs	r3, #240	; 0xf0
 80196de:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80196e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d00a      	beq.n	80196fe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80196e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80196ec:	f113 0f0d 	cmn.w	r3, #13
 80196f0:	d002      	beq.n	80196f8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80196f2:	6878      	ldr	r0, [r7, #4]
 80196f4:	f7fd fcca 	bl	801708c <tcp_abort>
            }
            return ERR_ABRT;
 80196f8:	f06f 030c 	mvn.w	r3, #12
 80196fc:	e1ce      	b.n	8019a9c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80196fe:	6878      	ldr	r0, [r7, #4]
 8019700:	f000 fae0 	bl	8019cc4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8019704:	4b63      	ldr	r3, [pc, #396]	; (8019894 <tcp_process+0x5b8>)
 8019706:	881b      	ldrh	r3, [r3, #0]
 8019708:	2b00      	cmp	r3, #0
 801970a:	d005      	beq.n	8019718 <tcp_process+0x43c>
            recv_acked--;
 801970c:	4b61      	ldr	r3, [pc, #388]	; (8019894 <tcp_process+0x5b8>)
 801970e:	881b      	ldrh	r3, [r3, #0]
 8019710:	3b01      	subs	r3, #1
 8019712:	b29a      	uxth	r2, r3
 8019714:	4b5f      	ldr	r3, [pc, #380]	; (8019894 <tcp_process+0x5b8>)
 8019716:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801971c:	009a      	lsls	r2, r3, #2
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019722:	005b      	lsls	r3, r3, #1
 8019724:	f241 111c 	movw	r1, #4380	; 0x111c
 8019728:	428b      	cmp	r3, r1
 801972a:	bf38      	it	cc
 801972c:	460b      	movcc	r3, r1
 801972e:	429a      	cmp	r2, r3
 8019730:	d204      	bcs.n	801973c <tcp_process+0x460>
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019736:	009b      	lsls	r3, r3, #2
 8019738:	b29b      	uxth	r3, r3
 801973a:	e00d      	b.n	8019758 <tcp_process+0x47c>
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019740:	005b      	lsls	r3, r3, #1
 8019742:	f241 121c 	movw	r2, #4380	; 0x111c
 8019746:	4293      	cmp	r3, r2
 8019748:	d904      	bls.n	8019754 <tcp_process+0x478>
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801974e:	005b      	lsls	r3, r3, #1
 8019750:	b29b      	uxth	r3, r3
 8019752:	e001      	b.n	8019758 <tcp_process+0x47c>
 8019754:	f241 131c 	movw	r3, #4380	; 0x111c
 8019758:	687a      	ldr	r2, [r7, #4]
 801975a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801975e:	4b4e      	ldr	r3, [pc, #312]	; (8019898 <tcp_process+0x5bc>)
 8019760:	781b      	ldrb	r3, [r3, #0]
 8019762:	f003 0320 	and.w	r3, r3, #32
 8019766:	2b00      	cmp	r3, #0
 8019768:	d037      	beq.n	80197da <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	8b5b      	ldrh	r3, [r3, #26]
 801976e:	f043 0302 	orr.w	r3, r3, #2
 8019772:	b29a      	uxth	r2, r3
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	2207      	movs	r2, #7
 801977c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801977e:	e02c      	b.n	80197da <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019780:	4b3b      	ldr	r3, [pc, #236]	; (8019870 <tcp_process+0x594>)
 8019782:	6819      	ldr	r1, [r3, #0]
 8019784:	4b3b      	ldr	r3, [pc, #236]	; (8019874 <tcp_process+0x598>)
 8019786:	881b      	ldrh	r3, [r3, #0]
 8019788:	461a      	mov	r2, r3
 801978a:	4b3b      	ldr	r3, [pc, #236]	; (8019878 <tcp_process+0x59c>)
 801978c:	681b      	ldr	r3, [r3, #0]
 801978e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019790:	4b3a      	ldr	r3, [pc, #232]	; (801987c <tcp_process+0x5a0>)
 8019792:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019794:	885b      	ldrh	r3, [r3, #2]
 8019796:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019798:	4a38      	ldr	r2, [pc, #224]	; (801987c <tcp_process+0x5a0>)
 801979a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801979c:	8812      	ldrh	r2, [r2, #0]
 801979e:	b292      	uxth	r2, r2
 80197a0:	9202      	str	r2, [sp, #8]
 80197a2:	9301      	str	r3, [sp, #4]
 80197a4:	4b36      	ldr	r3, [pc, #216]	; (8019880 <tcp_process+0x5a4>)
 80197a6:	9300      	str	r3, [sp, #0]
 80197a8:	4b36      	ldr	r3, [pc, #216]	; (8019884 <tcp_process+0x5a8>)
 80197aa:	4602      	mov	r2, r0
 80197ac:	6878      	ldr	r0, [r7, #4]
 80197ae:	f003 f829 	bl	801c804 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80197b2:	e167      	b.n	8019a84 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80197b4:	4b2d      	ldr	r3, [pc, #180]	; (801986c <tcp_process+0x590>)
 80197b6:	781b      	ldrb	r3, [r3, #0]
 80197b8:	f003 0302 	and.w	r3, r3, #2
 80197bc:	2b00      	cmp	r3, #0
 80197be:	f000 8161 	beq.w	8019a84 <tcp_process+0x7a8>
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197c6:	1e5a      	subs	r2, r3, #1
 80197c8:	4b2b      	ldr	r3, [pc, #172]	; (8019878 <tcp_process+0x59c>)
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	429a      	cmp	r2, r3
 80197ce:	f040 8159 	bne.w	8019a84 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80197d2:	6878      	ldr	r0, [r7, #4]
 80197d4:	f002 fe10 	bl	801c3f8 <tcp_rexmit>
      break;
 80197d8:	e154      	b.n	8019a84 <tcp_process+0x7a8>
 80197da:	e153      	b.n	8019a84 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80197dc:	6878      	ldr	r0, [r7, #4]
 80197de:	f000 fa71 	bl	8019cc4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80197e2:	4b2d      	ldr	r3, [pc, #180]	; (8019898 <tcp_process+0x5bc>)
 80197e4:	781b      	ldrb	r3, [r3, #0]
 80197e6:	f003 0320 	and.w	r3, r3, #32
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	f000 814c 	beq.w	8019a88 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	8b5b      	ldrh	r3, [r3, #26]
 80197f4:	f043 0302 	orr.w	r3, r3, #2
 80197f8:	b29a      	uxth	r2, r3
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	2207      	movs	r2, #7
 8019802:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019804:	e140      	b.n	8019a88 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8019806:	6878      	ldr	r0, [r7, #4]
 8019808:	f000 fa5c 	bl	8019cc4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801980c:	4b22      	ldr	r3, [pc, #136]	; (8019898 <tcp_process+0x5bc>)
 801980e:	781b      	ldrb	r3, [r3, #0]
 8019810:	f003 0320 	and.w	r3, r3, #32
 8019814:	2b00      	cmp	r3, #0
 8019816:	d071      	beq.n	80198fc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019818:	4b14      	ldr	r3, [pc, #80]	; (801986c <tcp_process+0x590>)
 801981a:	781b      	ldrb	r3, [r3, #0]
 801981c:	f003 0310 	and.w	r3, r3, #16
 8019820:	2b00      	cmp	r3, #0
 8019822:	d060      	beq.n	80198e6 <tcp_process+0x60a>
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019828:	4b11      	ldr	r3, [pc, #68]	; (8019870 <tcp_process+0x594>)
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	429a      	cmp	r2, r3
 801982e:	d15a      	bne.n	80198e6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019834:	2b00      	cmp	r3, #0
 8019836:	d156      	bne.n	80198e6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	8b5b      	ldrh	r3, [r3, #26]
 801983c:	f043 0302 	orr.w	r3, r3, #2
 8019840:	b29a      	uxth	r2, r3
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8019846:	6878      	ldr	r0, [r7, #4]
 8019848:	f7fe fdae 	bl	80183a8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801984c:	4b13      	ldr	r3, [pc, #76]	; (801989c <tcp_process+0x5c0>)
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	687a      	ldr	r2, [r7, #4]
 8019852:	429a      	cmp	r2, r3
 8019854:	d105      	bne.n	8019862 <tcp_process+0x586>
 8019856:	4b11      	ldr	r3, [pc, #68]	; (801989c <tcp_process+0x5c0>)
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	68db      	ldr	r3, [r3, #12]
 801985c:	4a0f      	ldr	r2, [pc, #60]	; (801989c <tcp_process+0x5c0>)
 801985e:	6013      	str	r3, [r2, #0]
 8019860:	e02e      	b.n	80198c0 <tcp_process+0x5e4>
 8019862:	4b0e      	ldr	r3, [pc, #56]	; (801989c <tcp_process+0x5c0>)
 8019864:	681b      	ldr	r3, [r3, #0]
 8019866:	617b      	str	r3, [r7, #20]
 8019868:	e027      	b.n	80198ba <tcp_process+0x5de>
 801986a:	bf00      	nop
 801986c:	20013274 	.word	0x20013274
 8019870:	2001326c 	.word	0x2001326c
 8019874:	20013272 	.word	0x20013272
 8019878:	20013268 	.word	0x20013268
 801987c:	20013258 	.word	0x20013258
 8019880:	2000fa94 	.word	0x2000fa94
 8019884:	2000fa98 	.word	0x2000fa98
 8019888:	08029184 	.word	0x08029184
 801988c:	08029424 	.word	0x08029424
 8019890:	080291d0 	.word	0x080291d0
 8019894:	20013270 	.word	0x20013270
 8019898:	20013275 	.word	0x20013275
 801989c:	2001323c 	.word	0x2001323c
 80198a0:	697b      	ldr	r3, [r7, #20]
 80198a2:	68db      	ldr	r3, [r3, #12]
 80198a4:	687a      	ldr	r2, [r7, #4]
 80198a6:	429a      	cmp	r2, r3
 80198a8:	d104      	bne.n	80198b4 <tcp_process+0x5d8>
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	68da      	ldr	r2, [r3, #12]
 80198ae:	697b      	ldr	r3, [r7, #20]
 80198b0:	60da      	str	r2, [r3, #12]
 80198b2:	e005      	b.n	80198c0 <tcp_process+0x5e4>
 80198b4:	697b      	ldr	r3, [r7, #20]
 80198b6:	68db      	ldr	r3, [r3, #12]
 80198b8:	617b      	str	r3, [r7, #20]
 80198ba:	697b      	ldr	r3, [r7, #20]
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d1ef      	bne.n	80198a0 <tcp_process+0x5c4>
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	2200      	movs	r2, #0
 80198c4:	60da      	str	r2, [r3, #12]
 80198c6:	4b77      	ldr	r3, [pc, #476]	; (8019aa4 <tcp_process+0x7c8>)
 80198c8:	2201      	movs	r2, #1
 80198ca:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	220a      	movs	r2, #10
 80198d0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80198d2:	4b75      	ldr	r3, [pc, #468]	; (8019aa8 <tcp_process+0x7cc>)
 80198d4:	681a      	ldr	r2, [r3, #0]
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	60da      	str	r2, [r3, #12]
 80198da:	4a73      	ldr	r2, [pc, #460]	; (8019aa8 <tcp_process+0x7cc>)
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	6013      	str	r3, [r2, #0]
 80198e0:	f003 f952 	bl	801cb88 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80198e4:	e0d2      	b.n	8019a8c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	8b5b      	ldrh	r3, [r3, #26]
 80198ea:	f043 0302 	orr.w	r3, r3, #2
 80198ee:	b29a      	uxth	r2, r3
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	2208      	movs	r2, #8
 80198f8:	751a      	strb	r2, [r3, #20]
      break;
 80198fa:	e0c7      	b.n	8019a8c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80198fc:	4b6b      	ldr	r3, [pc, #428]	; (8019aac <tcp_process+0x7d0>)
 80198fe:	781b      	ldrb	r3, [r3, #0]
 8019900:	f003 0310 	and.w	r3, r3, #16
 8019904:	2b00      	cmp	r3, #0
 8019906:	f000 80c1 	beq.w	8019a8c <tcp_process+0x7b0>
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801990e:	4b68      	ldr	r3, [pc, #416]	; (8019ab0 <tcp_process+0x7d4>)
 8019910:	681b      	ldr	r3, [r3, #0]
 8019912:	429a      	cmp	r2, r3
 8019914:	f040 80ba 	bne.w	8019a8c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801991c:	2b00      	cmp	r3, #0
 801991e:	f040 80b5 	bne.w	8019a8c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	2206      	movs	r2, #6
 8019926:	751a      	strb	r2, [r3, #20]
      break;
 8019928:	e0b0      	b.n	8019a8c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801992a:	6878      	ldr	r0, [r7, #4]
 801992c:	f000 f9ca 	bl	8019cc4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8019930:	4b60      	ldr	r3, [pc, #384]	; (8019ab4 <tcp_process+0x7d8>)
 8019932:	781b      	ldrb	r3, [r3, #0]
 8019934:	f003 0320 	and.w	r3, r3, #32
 8019938:	2b00      	cmp	r3, #0
 801993a:	f000 80a9 	beq.w	8019a90 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	8b5b      	ldrh	r3, [r3, #26]
 8019942:	f043 0302 	orr.w	r3, r3, #2
 8019946:	b29a      	uxth	r2, r3
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801994c:	6878      	ldr	r0, [r7, #4]
 801994e:	f7fe fd2b 	bl	80183a8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8019952:	4b59      	ldr	r3, [pc, #356]	; (8019ab8 <tcp_process+0x7dc>)
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	687a      	ldr	r2, [r7, #4]
 8019958:	429a      	cmp	r2, r3
 801995a:	d105      	bne.n	8019968 <tcp_process+0x68c>
 801995c:	4b56      	ldr	r3, [pc, #344]	; (8019ab8 <tcp_process+0x7dc>)
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	68db      	ldr	r3, [r3, #12]
 8019962:	4a55      	ldr	r2, [pc, #340]	; (8019ab8 <tcp_process+0x7dc>)
 8019964:	6013      	str	r3, [r2, #0]
 8019966:	e013      	b.n	8019990 <tcp_process+0x6b4>
 8019968:	4b53      	ldr	r3, [pc, #332]	; (8019ab8 <tcp_process+0x7dc>)
 801996a:	681b      	ldr	r3, [r3, #0]
 801996c:	613b      	str	r3, [r7, #16]
 801996e:	e00c      	b.n	801998a <tcp_process+0x6ae>
 8019970:	693b      	ldr	r3, [r7, #16]
 8019972:	68db      	ldr	r3, [r3, #12]
 8019974:	687a      	ldr	r2, [r7, #4]
 8019976:	429a      	cmp	r2, r3
 8019978:	d104      	bne.n	8019984 <tcp_process+0x6a8>
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	68da      	ldr	r2, [r3, #12]
 801997e:	693b      	ldr	r3, [r7, #16]
 8019980:	60da      	str	r2, [r3, #12]
 8019982:	e005      	b.n	8019990 <tcp_process+0x6b4>
 8019984:	693b      	ldr	r3, [r7, #16]
 8019986:	68db      	ldr	r3, [r3, #12]
 8019988:	613b      	str	r3, [r7, #16]
 801998a:	693b      	ldr	r3, [r7, #16]
 801998c:	2b00      	cmp	r3, #0
 801998e:	d1ef      	bne.n	8019970 <tcp_process+0x694>
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	2200      	movs	r2, #0
 8019994:	60da      	str	r2, [r3, #12]
 8019996:	4b43      	ldr	r3, [pc, #268]	; (8019aa4 <tcp_process+0x7c8>)
 8019998:	2201      	movs	r2, #1
 801999a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	220a      	movs	r2, #10
 80199a0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80199a2:	4b41      	ldr	r3, [pc, #260]	; (8019aa8 <tcp_process+0x7cc>)
 80199a4:	681a      	ldr	r2, [r3, #0]
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	60da      	str	r2, [r3, #12]
 80199aa:	4a3f      	ldr	r2, [pc, #252]	; (8019aa8 <tcp_process+0x7cc>)
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	6013      	str	r3, [r2, #0]
 80199b0:	f003 f8ea 	bl	801cb88 <tcp_timer_needed>
      }
      break;
 80199b4:	e06c      	b.n	8019a90 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80199b6:	6878      	ldr	r0, [r7, #4]
 80199b8:	f000 f984 	bl	8019cc4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80199bc:	4b3b      	ldr	r3, [pc, #236]	; (8019aac <tcp_process+0x7d0>)
 80199be:	781b      	ldrb	r3, [r3, #0]
 80199c0:	f003 0310 	and.w	r3, r3, #16
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d065      	beq.n	8019a94 <tcp_process+0x7b8>
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80199cc:	4b38      	ldr	r3, [pc, #224]	; (8019ab0 <tcp_process+0x7d4>)
 80199ce:	681b      	ldr	r3, [r3, #0]
 80199d0:	429a      	cmp	r2, r3
 80199d2:	d15f      	bne.n	8019a94 <tcp_process+0x7b8>
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d15b      	bne.n	8019a94 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80199dc:	6878      	ldr	r0, [r7, #4]
 80199de:	f7fe fce3 	bl	80183a8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80199e2:	4b35      	ldr	r3, [pc, #212]	; (8019ab8 <tcp_process+0x7dc>)
 80199e4:	681b      	ldr	r3, [r3, #0]
 80199e6:	687a      	ldr	r2, [r7, #4]
 80199e8:	429a      	cmp	r2, r3
 80199ea:	d105      	bne.n	80199f8 <tcp_process+0x71c>
 80199ec:	4b32      	ldr	r3, [pc, #200]	; (8019ab8 <tcp_process+0x7dc>)
 80199ee:	681b      	ldr	r3, [r3, #0]
 80199f0:	68db      	ldr	r3, [r3, #12]
 80199f2:	4a31      	ldr	r2, [pc, #196]	; (8019ab8 <tcp_process+0x7dc>)
 80199f4:	6013      	str	r3, [r2, #0]
 80199f6:	e013      	b.n	8019a20 <tcp_process+0x744>
 80199f8:	4b2f      	ldr	r3, [pc, #188]	; (8019ab8 <tcp_process+0x7dc>)
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	60fb      	str	r3, [r7, #12]
 80199fe:	e00c      	b.n	8019a1a <tcp_process+0x73e>
 8019a00:	68fb      	ldr	r3, [r7, #12]
 8019a02:	68db      	ldr	r3, [r3, #12]
 8019a04:	687a      	ldr	r2, [r7, #4]
 8019a06:	429a      	cmp	r2, r3
 8019a08:	d104      	bne.n	8019a14 <tcp_process+0x738>
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	68da      	ldr	r2, [r3, #12]
 8019a0e:	68fb      	ldr	r3, [r7, #12]
 8019a10:	60da      	str	r2, [r3, #12]
 8019a12:	e005      	b.n	8019a20 <tcp_process+0x744>
 8019a14:	68fb      	ldr	r3, [r7, #12]
 8019a16:	68db      	ldr	r3, [r3, #12]
 8019a18:	60fb      	str	r3, [r7, #12]
 8019a1a:	68fb      	ldr	r3, [r7, #12]
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d1ef      	bne.n	8019a00 <tcp_process+0x724>
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	2200      	movs	r2, #0
 8019a24:	60da      	str	r2, [r3, #12]
 8019a26:	4b1f      	ldr	r3, [pc, #124]	; (8019aa4 <tcp_process+0x7c8>)
 8019a28:	2201      	movs	r2, #1
 8019a2a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	220a      	movs	r2, #10
 8019a30:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019a32:	4b1d      	ldr	r3, [pc, #116]	; (8019aa8 <tcp_process+0x7cc>)
 8019a34:	681a      	ldr	r2, [r3, #0]
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	60da      	str	r2, [r3, #12]
 8019a3a:	4a1b      	ldr	r2, [pc, #108]	; (8019aa8 <tcp_process+0x7cc>)
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	6013      	str	r3, [r2, #0]
 8019a40:	f003 f8a2 	bl	801cb88 <tcp_timer_needed>
      }
      break;
 8019a44:	e026      	b.n	8019a94 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8019a46:	6878      	ldr	r0, [r7, #4]
 8019a48:	f000 f93c 	bl	8019cc4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8019a4c:	4b17      	ldr	r3, [pc, #92]	; (8019aac <tcp_process+0x7d0>)
 8019a4e:	781b      	ldrb	r3, [r3, #0]
 8019a50:	f003 0310 	and.w	r3, r3, #16
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d01f      	beq.n	8019a98 <tcp_process+0x7bc>
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019a5c:	4b14      	ldr	r3, [pc, #80]	; (8019ab0 <tcp_process+0x7d4>)
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	429a      	cmp	r2, r3
 8019a62:	d119      	bne.n	8019a98 <tcp_process+0x7bc>
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d115      	bne.n	8019a98 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8019a6c:	4b11      	ldr	r3, [pc, #68]	; (8019ab4 <tcp_process+0x7d8>)
 8019a6e:	781b      	ldrb	r3, [r3, #0]
 8019a70:	f043 0310 	orr.w	r3, r3, #16
 8019a74:	b2da      	uxtb	r2, r3
 8019a76:	4b0f      	ldr	r3, [pc, #60]	; (8019ab4 <tcp_process+0x7d8>)
 8019a78:	701a      	strb	r2, [r3, #0]
      }
      break;
 8019a7a:	e00d      	b.n	8019a98 <tcp_process+0x7bc>
    default:
      break;
 8019a7c:	bf00      	nop
 8019a7e:	e00c      	b.n	8019a9a <tcp_process+0x7be>
      break;
 8019a80:	bf00      	nop
 8019a82:	e00a      	b.n	8019a9a <tcp_process+0x7be>
      break;
 8019a84:	bf00      	nop
 8019a86:	e008      	b.n	8019a9a <tcp_process+0x7be>
      break;
 8019a88:	bf00      	nop
 8019a8a:	e006      	b.n	8019a9a <tcp_process+0x7be>
      break;
 8019a8c:	bf00      	nop
 8019a8e:	e004      	b.n	8019a9a <tcp_process+0x7be>
      break;
 8019a90:	bf00      	nop
 8019a92:	e002      	b.n	8019a9a <tcp_process+0x7be>
      break;
 8019a94:	bf00      	nop
 8019a96:	e000      	b.n	8019a9a <tcp_process+0x7be>
      break;
 8019a98:	bf00      	nop
  }
  return ERR_OK;
 8019a9a:	2300      	movs	r3, #0
}
 8019a9c:	4618      	mov	r0, r3
 8019a9e:	3724      	adds	r7, #36	; 0x24
 8019aa0:	46bd      	mov	sp, r7
 8019aa2:	bd90      	pop	{r4, r7, pc}
 8019aa4:	20013244 	.word	0x20013244
 8019aa8:	20013240 	.word	0x20013240
 8019aac:	20013274 	.word	0x20013274
 8019ab0:	2001326c 	.word	0x2001326c
 8019ab4:	20013275 	.word	0x20013275
 8019ab8:	2001323c 	.word	0x2001323c

08019abc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8019abc:	b590      	push	{r4, r7, lr}
 8019abe:	b085      	sub	sp, #20
 8019ac0:	af00      	add	r7, sp, #0
 8019ac2:	6078      	str	r0, [r7, #4]
 8019ac4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	d106      	bne.n	8019ada <tcp_oos_insert_segment+0x1e>
 8019acc:	4b3b      	ldr	r3, [pc, #236]	; (8019bbc <tcp_oos_insert_segment+0x100>)
 8019ace:	f240 421f 	movw	r2, #1055	; 0x41f
 8019ad2:	493b      	ldr	r1, [pc, #236]	; (8019bc0 <tcp_oos_insert_segment+0x104>)
 8019ad4:	483b      	ldr	r0, [pc, #236]	; (8019bc4 <tcp_oos_insert_segment+0x108>)
 8019ad6:	f00a fa7f 	bl	8023fd8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	68db      	ldr	r3, [r3, #12]
 8019ade:	899b      	ldrh	r3, [r3, #12]
 8019ae0:	b29b      	uxth	r3, r3
 8019ae2:	4618      	mov	r0, r3
 8019ae4:	f7fb f8d4 	bl	8014c90 <lwip_htons>
 8019ae8:	4603      	mov	r3, r0
 8019aea:	b2db      	uxtb	r3, r3
 8019aec:	f003 0301 	and.w	r3, r3, #1
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d028      	beq.n	8019b46 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8019af4:	6838      	ldr	r0, [r7, #0]
 8019af6:	f7fe f97d 	bl	8017df4 <tcp_segs_free>
    next = NULL;
 8019afa:	2300      	movs	r3, #0
 8019afc:	603b      	str	r3, [r7, #0]
 8019afe:	e056      	b.n	8019bae <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019b00:	683b      	ldr	r3, [r7, #0]
 8019b02:	68db      	ldr	r3, [r3, #12]
 8019b04:	899b      	ldrh	r3, [r3, #12]
 8019b06:	b29b      	uxth	r3, r3
 8019b08:	4618      	mov	r0, r3
 8019b0a:	f7fb f8c1 	bl	8014c90 <lwip_htons>
 8019b0e:	4603      	mov	r3, r0
 8019b10:	b2db      	uxtb	r3, r3
 8019b12:	f003 0301 	and.w	r3, r3, #1
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	d00d      	beq.n	8019b36 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	68db      	ldr	r3, [r3, #12]
 8019b1e:	899b      	ldrh	r3, [r3, #12]
 8019b20:	b29c      	uxth	r4, r3
 8019b22:	2001      	movs	r0, #1
 8019b24:	f7fb f8b4 	bl	8014c90 <lwip_htons>
 8019b28:	4603      	mov	r3, r0
 8019b2a:	461a      	mov	r2, r3
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	68db      	ldr	r3, [r3, #12]
 8019b30:	4322      	orrs	r2, r4
 8019b32:	b292      	uxth	r2, r2
 8019b34:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8019b36:	683b      	ldr	r3, [r7, #0]
 8019b38:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8019b3a:	683b      	ldr	r3, [r7, #0]
 8019b3c:	681b      	ldr	r3, [r3, #0]
 8019b3e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8019b40:	68f8      	ldr	r0, [r7, #12]
 8019b42:	f7fe f96c 	bl	8017e1e <tcp_seg_free>
    while (next &&
 8019b46:	683b      	ldr	r3, [r7, #0]
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d00e      	beq.n	8019b6a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	891b      	ldrh	r3, [r3, #8]
 8019b50:	461a      	mov	r2, r3
 8019b52:	4b1d      	ldr	r3, [pc, #116]	; (8019bc8 <tcp_oos_insert_segment+0x10c>)
 8019b54:	681b      	ldr	r3, [r3, #0]
 8019b56:	441a      	add	r2, r3
 8019b58:	683b      	ldr	r3, [r7, #0]
 8019b5a:	68db      	ldr	r3, [r3, #12]
 8019b5c:	685b      	ldr	r3, [r3, #4]
 8019b5e:	6839      	ldr	r1, [r7, #0]
 8019b60:	8909      	ldrh	r1, [r1, #8]
 8019b62:	440b      	add	r3, r1
 8019b64:	1ad3      	subs	r3, r2, r3
    while (next &&
 8019b66:	2b00      	cmp	r3, #0
 8019b68:	daca      	bge.n	8019b00 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8019b6a:	683b      	ldr	r3, [r7, #0]
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d01e      	beq.n	8019bae <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	891b      	ldrh	r3, [r3, #8]
 8019b74:	461a      	mov	r2, r3
 8019b76:	4b14      	ldr	r3, [pc, #80]	; (8019bc8 <tcp_oos_insert_segment+0x10c>)
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	441a      	add	r2, r3
 8019b7c:	683b      	ldr	r3, [r7, #0]
 8019b7e:	68db      	ldr	r3, [r3, #12]
 8019b80:	685b      	ldr	r3, [r3, #4]
 8019b82:	1ad3      	subs	r3, r2, r3
    if (next &&
 8019b84:	2b00      	cmp	r3, #0
 8019b86:	dd12      	ble.n	8019bae <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8019b88:	683b      	ldr	r3, [r7, #0]
 8019b8a:	68db      	ldr	r3, [r3, #12]
 8019b8c:	685b      	ldr	r3, [r3, #4]
 8019b8e:	b29a      	uxth	r2, r3
 8019b90:	4b0d      	ldr	r3, [pc, #52]	; (8019bc8 <tcp_oos_insert_segment+0x10c>)
 8019b92:	681b      	ldr	r3, [r3, #0]
 8019b94:	b29b      	uxth	r3, r3
 8019b96:	1ad3      	subs	r3, r2, r3
 8019b98:	b29a      	uxth	r2, r3
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	685a      	ldr	r2, [r3, #4]
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	891b      	ldrh	r3, [r3, #8]
 8019ba6:	4619      	mov	r1, r3
 8019ba8:	4610      	mov	r0, r2
 8019baa:	f7fc fae9 	bl	8016180 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	683a      	ldr	r2, [r7, #0]
 8019bb2:	601a      	str	r2, [r3, #0]
}
 8019bb4:	bf00      	nop
 8019bb6:	3714      	adds	r7, #20
 8019bb8:	46bd      	mov	sp, r7
 8019bba:	bd90      	pop	{r4, r7, pc}
 8019bbc:	08029184 	.word	0x08029184
 8019bc0:	08029444 	.word	0x08029444
 8019bc4:	080291d0 	.word	0x080291d0
 8019bc8:	20013268 	.word	0x20013268

08019bcc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8019bcc:	b5b0      	push	{r4, r5, r7, lr}
 8019bce:	b086      	sub	sp, #24
 8019bd0:	af00      	add	r7, sp, #0
 8019bd2:	60f8      	str	r0, [r7, #12]
 8019bd4:	60b9      	str	r1, [r7, #8]
 8019bd6:	607a      	str	r2, [r7, #4]
 8019bd8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8019bda:	e03e      	b.n	8019c5a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8019bdc:	68bb      	ldr	r3, [r7, #8]
 8019bde:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8019be0:	68bb      	ldr	r3, [r7, #8]
 8019be2:	681b      	ldr	r3, [r3, #0]
 8019be4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8019be6:	697b      	ldr	r3, [r7, #20]
 8019be8:	685b      	ldr	r3, [r3, #4]
 8019bea:	4618      	mov	r0, r3
 8019bec:	f7fc fcdc 	bl	80165a8 <pbuf_clen>
 8019bf0:	4603      	mov	r3, r0
 8019bf2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8019bf4:	68fb      	ldr	r3, [r7, #12]
 8019bf6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019bfa:	8a7a      	ldrh	r2, [r7, #18]
 8019bfc:	429a      	cmp	r2, r3
 8019bfe:	d906      	bls.n	8019c0e <tcp_free_acked_segments+0x42>
 8019c00:	4b2a      	ldr	r3, [pc, #168]	; (8019cac <tcp_free_acked_segments+0xe0>)
 8019c02:	f240 4257 	movw	r2, #1111	; 0x457
 8019c06:	492a      	ldr	r1, [pc, #168]	; (8019cb0 <tcp_free_acked_segments+0xe4>)
 8019c08:	482a      	ldr	r0, [pc, #168]	; (8019cb4 <tcp_free_acked_segments+0xe8>)
 8019c0a:	f00a f9e5 	bl	8023fd8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8019c0e:	68fb      	ldr	r3, [r7, #12]
 8019c10:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8019c14:	8a7b      	ldrh	r3, [r7, #18]
 8019c16:	1ad3      	subs	r3, r2, r3
 8019c18:	b29a      	uxth	r2, r3
 8019c1a:	68fb      	ldr	r3, [r7, #12]
 8019c1c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8019c20:	697b      	ldr	r3, [r7, #20]
 8019c22:	891a      	ldrh	r2, [r3, #8]
 8019c24:	4b24      	ldr	r3, [pc, #144]	; (8019cb8 <tcp_free_acked_segments+0xec>)
 8019c26:	881b      	ldrh	r3, [r3, #0]
 8019c28:	4413      	add	r3, r2
 8019c2a:	b29a      	uxth	r2, r3
 8019c2c:	4b22      	ldr	r3, [pc, #136]	; (8019cb8 <tcp_free_acked_segments+0xec>)
 8019c2e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8019c30:	6978      	ldr	r0, [r7, #20]
 8019c32:	f7fe f8f4 	bl	8017e1e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8019c36:	68fb      	ldr	r3, [r7, #12]
 8019c38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d00c      	beq.n	8019c5a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8019c40:	68bb      	ldr	r3, [r7, #8]
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d109      	bne.n	8019c5a <tcp_free_acked_segments+0x8e>
 8019c46:	683b      	ldr	r3, [r7, #0]
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	d106      	bne.n	8019c5a <tcp_free_acked_segments+0x8e>
 8019c4c:	4b17      	ldr	r3, [pc, #92]	; (8019cac <tcp_free_acked_segments+0xe0>)
 8019c4e:	f240 4261 	movw	r2, #1121	; 0x461
 8019c52:	491a      	ldr	r1, [pc, #104]	; (8019cbc <tcp_free_acked_segments+0xf0>)
 8019c54:	4817      	ldr	r0, [pc, #92]	; (8019cb4 <tcp_free_acked_segments+0xe8>)
 8019c56:	f00a f9bf 	bl	8023fd8 <iprintf>
  while (seg_list != NULL &&
 8019c5a:	68bb      	ldr	r3, [r7, #8]
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	d020      	beq.n	8019ca2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8019c60:	68bb      	ldr	r3, [r7, #8]
 8019c62:	68db      	ldr	r3, [r3, #12]
 8019c64:	685b      	ldr	r3, [r3, #4]
 8019c66:	4618      	mov	r0, r3
 8019c68:	f7fb f827 	bl	8014cba <lwip_htonl>
 8019c6c:	4604      	mov	r4, r0
 8019c6e:	68bb      	ldr	r3, [r7, #8]
 8019c70:	891b      	ldrh	r3, [r3, #8]
 8019c72:	461d      	mov	r5, r3
 8019c74:	68bb      	ldr	r3, [r7, #8]
 8019c76:	68db      	ldr	r3, [r3, #12]
 8019c78:	899b      	ldrh	r3, [r3, #12]
 8019c7a:	b29b      	uxth	r3, r3
 8019c7c:	4618      	mov	r0, r3
 8019c7e:	f7fb f807 	bl	8014c90 <lwip_htons>
 8019c82:	4603      	mov	r3, r0
 8019c84:	b2db      	uxtb	r3, r3
 8019c86:	f003 0303 	and.w	r3, r3, #3
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d001      	beq.n	8019c92 <tcp_free_acked_segments+0xc6>
 8019c8e:	2301      	movs	r3, #1
 8019c90:	e000      	b.n	8019c94 <tcp_free_acked_segments+0xc8>
 8019c92:	2300      	movs	r3, #0
 8019c94:	442b      	add	r3, r5
 8019c96:	18e2      	adds	r2, r4, r3
 8019c98:	4b09      	ldr	r3, [pc, #36]	; (8019cc0 <tcp_free_acked_segments+0xf4>)
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	dd9c      	ble.n	8019bdc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8019ca2:	68bb      	ldr	r3, [r7, #8]
}
 8019ca4:	4618      	mov	r0, r3
 8019ca6:	3718      	adds	r7, #24
 8019ca8:	46bd      	mov	sp, r7
 8019caa:	bdb0      	pop	{r4, r5, r7, pc}
 8019cac:	08029184 	.word	0x08029184
 8019cb0:	0802946c 	.word	0x0802946c
 8019cb4:	080291d0 	.word	0x080291d0
 8019cb8:	20013270 	.word	0x20013270
 8019cbc:	08029494 	.word	0x08029494
 8019cc0:	2001326c 	.word	0x2001326c

08019cc4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8019cc4:	b5b0      	push	{r4, r5, r7, lr}
 8019cc6:	b094      	sub	sp, #80	; 0x50
 8019cc8:	af00      	add	r7, sp, #0
 8019cca:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8019ccc:	2300      	movs	r3, #0
 8019cce:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8019cd0:	687b      	ldr	r3, [r7, #4]
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d106      	bne.n	8019ce4 <tcp_receive+0x20>
 8019cd6:	4b91      	ldr	r3, [pc, #580]	; (8019f1c <tcp_receive+0x258>)
 8019cd8:	f240 427b 	movw	r2, #1147	; 0x47b
 8019cdc:	4990      	ldr	r1, [pc, #576]	; (8019f20 <tcp_receive+0x25c>)
 8019cde:	4891      	ldr	r0, [pc, #580]	; (8019f24 <tcp_receive+0x260>)
 8019ce0:	f00a f97a 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	7d1b      	ldrb	r3, [r3, #20]
 8019ce8:	2b03      	cmp	r3, #3
 8019cea:	d806      	bhi.n	8019cfa <tcp_receive+0x36>
 8019cec:	4b8b      	ldr	r3, [pc, #556]	; (8019f1c <tcp_receive+0x258>)
 8019cee:	f240 427c 	movw	r2, #1148	; 0x47c
 8019cf2:	498d      	ldr	r1, [pc, #564]	; (8019f28 <tcp_receive+0x264>)
 8019cf4:	488b      	ldr	r0, [pc, #556]	; (8019f24 <tcp_receive+0x260>)
 8019cf6:	f00a f96f 	bl	8023fd8 <iprintf>

  if (flags & TCP_ACK) {
 8019cfa:	4b8c      	ldr	r3, [pc, #560]	; (8019f2c <tcp_receive+0x268>)
 8019cfc:	781b      	ldrb	r3, [r3, #0]
 8019cfe:	f003 0310 	and.w	r3, r3, #16
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	f000 8264 	beq.w	801a1d0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019d0e:	461a      	mov	r2, r3
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019d14:	4413      	add	r3, r2
 8019d16:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8019d1c:	4b84      	ldr	r3, [pc, #528]	; (8019f30 <tcp_receive+0x26c>)
 8019d1e:	681b      	ldr	r3, [r3, #0]
 8019d20:	1ad3      	subs	r3, r2, r3
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	db1b      	blt.n	8019d5e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8019d2a:	4b81      	ldr	r3, [pc, #516]	; (8019f30 <tcp_receive+0x26c>)
 8019d2c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8019d2e:	429a      	cmp	r2, r3
 8019d30:	d106      	bne.n	8019d40 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019d36:	4b7f      	ldr	r3, [pc, #508]	; (8019f34 <tcp_receive+0x270>)
 8019d38:	681b      	ldr	r3, [r3, #0]
 8019d3a:	1ad3      	subs	r3, r2, r3
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	db0e      	blt.n	8019d5e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019d44:	4b7b      	ldr	r3, [pc, #492]	; (8019f34 <tcp_receive+0x270>)
 8019d46:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019d48:	429a      	cmp	r2, r3
 8019d4a:	d125      	bne.n	8019d98 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019d4c:	4b7a      	ldr	r3, [pc, #488]	; (8019f38 <tcp_receive+0x274>)
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	89db      	ldrh	r3, [r3, #14]
 8019d52:	b29a      	uxth	r2, r3
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019d5a:	429a      	cmp	r2, r3
 8019d5c:	d91c      	bls.n	8019d98 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8019d5e:	4b76      	ldr	r3, [pc, #472]	; (8019f38 <tcp_receive+0x274>)
 8019d60:	681b      	ldr	r3, [r3, #0]
 8019d62:	89db      	ldrh	r3, [r3, #14]
 8019d64:	b29a      	uxth	r2, r3
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019d78:	429a      	cmp	r2, r3
 8019d7a:	d205      	bcs.n	8019d88 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8019d88:	4b69      	ldr	r3, [pc, #420]	; (8019f30 <tcp_receive+0x26c>)
 8019d8a:	681a      	ldr	r2, [r3, #0]
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8019d90:	4b68      	ldr	r3, [pc, #416]	; (8019f34 <tcp_receive+0x270>)
 8019d92:	681a      	ldr	r2, [r3, #0]
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8019d98:	4b66      	ldr	r3, [pc, #408]	; (8019f34 <tcp_receive+0x270>)
 8019d9a:	681a      	ldr	r2, [r3, #0]
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019da0:	1ad3      	subs	r3, r2, r3
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	dc58      	bgt.n	8019e58 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8019da6:	4b65      	ldr	r3, [pc, #404]	; (8019f3c <tcp_receive+0x278>)
 8019da8:	881b      	ldrh	r3, [r3, #0]
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d14b      	bne.n	8019e46 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019db2:	687a      	ldr	r2, [r7, #4]
 8019db4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8019db8:	4413      	add	r3, r2
 8019dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019dbc:	429a      	cmp	r2, r3
 8019dbe:	d142      	bne.n	8019e46 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	db3d      	blt.n	8019e46 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019dce:	4b59      	ldr	r3, [pc, #356]	; (8019f34 <tcp_receive+0x270>)
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	429a      	cmp	r2, r3
 8019dd4:	d137      	bne.n	8019e46 <tcp_receive+0x182>
              found_dupack = 1;
 8019dd6:	2301      	movs	r3, #1
 8019dd8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019de0:	2bff      	cmp	r3, #255	; 0xff
 8019de2:	d007      	beq.n	8019df4 <tcp_receive+0x130>
                ++pcb->dupacks;
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019dea:	3301      	adds	r3, #1
 8019dec:	b2da      	uxtb	r2, r3
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019dfa:	2b03      	cmp	r3, #3
 8019dfc:	d91b      	bls.n	8019e36 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019e08:	4413      	add	r3, r2
 8019e0a:	b29a      	uxth	r2, r3
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019e12:	429a      	cmp	r2, r3
 8019e14:	d30a      	bcc.n	8019e2c <tcp_receive+0x168>
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019e20:	4413      	add	r3, r2
 8019e22:	b29a      	uxth	r2, r3
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019e2a:	e004      	b.n	8019e36 <tcp_receive+0x172>
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019e32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019e3c:	2b02      	cmp	r3, #2
 8019e3e:	d902      	bls.n	8019e46 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8019e40:	6878      	ldr	r0, [r7, #4]
 8019e42:	f002 fb45 	bl	801c4d0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8019e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	f040 8161 	bne.w	801a110 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	2200      	movs	r2, #0
 8019e52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019e56:	e15b      	b.n	801a110 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019e58:	4b36      	ldr	r3, [pc, #216]	; (8019f34 <tcp_receive+0x270>)
 8019e5a:	681a      	ldr	r2, [r3, #0]
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019e60:	1ad3      	subs	r3, r2, r3
 8019e62:	3b01      	subs	r3, #1
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	f2c0 814e 	blt.w	801a106 <tcp_receive+0x442>
 8019e6a:	4b32      	ldr	r3, [pc, #200]	; (8019f34 <tcp_receive+0x270>)
 8019e6c:	681a      	ldr	r2, [r3, #0]
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019e72:	1ad3      	subs	r3, r2, r3
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	f300 8146 	bgt.w	801a106 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	8b5b      	ldrh	r3, [r3, #26]
 8019e7e:	f003 0304 	and.w	r3, r3, #4
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	d010      	beq.n	8019ea8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	8b5b      	ldrh	r3, [r3, #26]
 8019e8a:	f023 0304 	bic.w	r3, r3, #4
 8019e8e:	b29a      	uxth	r2, r3
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	2200      	movs	r2, #0
 8019ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	2200      	movs	r2, #0
 8019eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019eb6:	10db      	asrs	r3, r3, #3
 8019eb8:	b21b      	sxth	r3, r3
 8019eba:	b29a      	uxth	r2, r3
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019ec2:	b29b      	uxth	r3, r3
 8019ec4:	4413      	add	r3, r2
 8019ec6:	b29b      	uxth	r3, r3
 8019ec8:	b21a      	sxth	r2, r3
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8019ed0:	4b18      	ldr	r3, [pc, #96]	; (8019f34 <tcp_receive+0x270>)
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	b29a      	uxth	r2, r3
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019eda:	b29b      	uxth	r3, r3
 8019edc:	1ad3      	subs	r3, r2, r3
 8019ede:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	2200      	movs	r2, #0
 8019ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8019ee8:	4b12      	ldr	r3, [pc, #72]	; (8019f34 <tcp_receive+0x270>)
 8019eea:	681a      	ldr	r2, [r3, #0]
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	7d1b      	ldrb	r3, [r3, #20]
 8019ef4:	2b03      	cmp	r3, #3
 8019ef6:	f240 8097 	bls.w	801a028 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8019f06:	429a      	cmp	r2, r3
 8019f08:	d245      	bcs.n	8019f96 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	8b5b      	ldrh	r3, [r3, #26]
 8019f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d014      	beq.n	8019f40 <tcp_receive+0x27c>
 8019f16:	2301      	movs	r3, #1
 8019f18:	e013      	b.n	8019f42 <tcp_receive+0x27e>
 8019f1a:	bf00      	nop
 8019f1c:	08029184 	.word	0x08029184
 8019f20:	080294b4 	.word	0x080294b4
 8019f24:	080291d0 	.word	0x080291d0
 8019f28:	080294d0 	.word	0x080294d0
 8019f2c:	20013274 	.word	0x20013274
 8019f30:	20013268 	.word	0x20013268
 8019f34:	2001326c 	.word	0x2001326c
 8019f38:	20013258 	.word	0x20013258
 8019f3c:	20013272 	.word	0x20013272
 8019f40:	2302      	movs	r3, #2
 8019f42:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8019f46:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8019f4a:	b29a      	uxth	r2, r3
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019f50:	fb12 f303 	smulbb	r3, r2, r3
 8019f54:	b29b      	uxth	r3, r3
 8019f56:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019f58:	4293      	cmp	r3, r2
 8019f5a:	bf28      	it	cs
 8019f5c:	4613      	movcs	r3, r2
 8019f5e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019f66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019f68:	4413      	add	r3, r2
 8019f6a:	b29a      	uxth	r2, r3
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019f72:	429a      	cmp	r2, r3
 8019f74:	d309      	bcc.n	8019f8a <tcp_receive+0x2c6>
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019f7c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019f7e:	4413      	add	r3, r2
 8019f80:	b29a      	uxth	r2, r3
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019f88:	e04e      	b.n	801a028 <tcp_receive+0x364>
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019f90:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019f94:	e048      	b.n	801a028 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019f9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019f9e:	4413      	add	r3, r2
 8019fa0:	b29a      	uxth	r2, r3
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8019fa8:	429a      	cmp	r2, r3
 8019faa:	d309      	bcc.n	8019fc0 <tcp_receive+0x2fc>
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019fb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019fb4:	4413      	add	r3, r2
 8019fb6:	b29a      	uxth	r2, r3
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8019fbe:	e004      	b.n	8019fca <tcp_receive+0x306>
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019fc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019fd6:	429a      	cmp	r2, r3
 8019fd8:	d326      	bcc.n	801a028 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019fe6:	1ad3      	subs	r3, r2, r3
 8019fe8:	b29a      	uxth	r2, r3
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019ffa:	4413      	add	r3, r2
 8019ffc:	b29a      	uxth	r2, r3
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a004:	429a      	cmp	r2, r3
 801a006:	d30a      	bcc.n	801a01e <tcp_receive+0x35a>
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a012:	4413      	add	r3, r2
 801a014:	b29a      	uxth	r2, r3
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801a01c:	e004      	b.n	801a028 <tcp_receive+0x364>
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a024:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a030:	4a98      	ldr	r2, [pc, #608]	; (801a294 <tcp_receive+0x5d0>)
 801a032:	6878      	ldr	r0, [r7, #4]
 801a034:	f7ff fdca 	bl	8019bcc <tcp_free_acked_segments>
 801a038:	4602      	mov	r2, r0
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a046:	4a94      	ldr	r2, [pc, #592]	; (801a298 <tcp_receive+0x5d4>)
 801a048:	6878      	ldr	r0, [r7, #4]
 801a04a:	f7ff fdbf 	bl	8019bcc <tcp_free_acked_segments>
 801a04e:	4602      	mov	r2, r0
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a058:	2b00      	cmp	r3, #0
 801a05a:	d104      	bne.n	801a066 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a062:	861a      	strh	r2, [r3, #48]	; 0x30
 801a064:	e002      	b.n	801a06c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	2200      	movs	r2, #0
 801a06a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	2200      	movs	r2, #0
 801a070:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a076:	2b00      	cmp	r3, #0
 801a078:	d103      	bne.n	801a082 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	2200      	movs	r2, #0
 801a07e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801a088:	4b84      	ldr	r3, [pc, #528]	; (801a29c <tcp_receive+0x5d8>)
 801a08a:	881b      	ldrh	r3, [r3, #0]
 801a08c:	4413      	add	r3, r2
 801a08e:	b29a      	uxth	r2, r3
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	8b5b      	ldrh	r3, [r3, #26]
 801a09a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d035      	beq.n	801a10e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d118      	bne.n	801a0dc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	d00c      	beq.n	801a0cc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a0ba:	68db      	ldr	r3, [r3, #12]
 801a0bc:	685b      	ldr	r3, [r3, #4]
 801a0be:	4618      	mov	r0, r3
 801a0c0:	f7fa fdfb 	bl	8014cba <lwip_htonl>
 801a0c4:	4603      	mov	r3, r0
 801a0c6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	dc20      	bgt.n	801a10e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	8b5b      	ldrh	r3, [r3, #26]
 801a0d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a0d4:	b29a      	uxth	r2, r3
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a0da:	e018      	b.n	801a10e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a0e4:	68db      	ldr	r3, [r3, #12]
 801a0e6:	685b      	ldr	r3, [r3, #4]
 801a0e8:	4618      	mov	r0, r3
 801a0ea:	f7fa fde6 	bl	8014cba <lwip_htonl>
 801a0ee:	4603      	mov	r3, r0
 801a0f0:	1ae3      	subs	r3, r4, r3
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	dc0b      	bgt.n	801a10e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	8b5b      	ldrh	r3, [r3, #26]
 801a0fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a0fe:	b29a      	uxth	r2, r3
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a104:	e003      	b.n	801a10e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801a106:	6878      	ldr	r0, [r7, #4]
 801a108:	f002 fbce 	bl	801c8a8 <tcp_send_empty_ack>
 801a10c:	e000      	b.n	801a110 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a10e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a114:	2b00      	cmp	r3, #0
 801a116:	d05b      	beq.n	801a1d0 <tcp_receive+0x50c>
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a11c:	4b60      	ldr	r3, [pc, #384]	; (801a2a0 <tcp_receive+0x5dc>)
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	1ad3      	subs	r3, r2, r3
 801a122:	2b00      	cmp	r3, #0
 801a124:	da54      	bge.n	801a1d0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801a126:	4b5f      	ldr	r3, [pc, #380]	; (801a2a4 <tcp_receive+0x5e0>)
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	b29a      	uxth	r2, r3
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a130:	b29b      	uxth	r3, r3
 801a132:	1ad3      	subs	r3, r2, r3
 801a134:	b29b      	uxth	r3, r3
 801a136:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801a13a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a144:	10db      	asrs	r3, r3, #3
 801a146:	b21b      	sxth	r3, r3
 801a148:	b29b      	uxth	r3, r3
 801a14a:	1ad3      	subs	r3, r2, r3
 801a14c:	b29b      	uxth	r3, r3
 801a14e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a158:	b29a      	uxth	r2, r3
 801a15a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801a15e:	4413      	add	r3, r2
 801a160:	b29b      	uxth	r3, r3
 801a162:	b21a      	sxth	r2, r3
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801a168:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	da05      	bge.n	801a17c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801a170:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801a174:	425b      	negs	r3, r3
 801a176:	b29b      	uxth	r3, r3
 801a178:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801a17c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a186:	109b      	asrs	r3, r3, #2
 801a188:	b21b      	sxth	r3, r3
 801a18a:	b29b      	uxth	r3, r3
 801a18c:	1ad3      	subs	r3, r2, r3
 801a18e:	b29b      	uxth	r3, r3
 801a190:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a19a:	b29a      	uxth	r2, r3
 801a19c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801a1a0:	4413      	add	r3, r2
 801a1a2:	b29b      	uxth	r3, r3
 801a1a4:	b21a      	sxth	r2, r3
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a1b0:	10db      	asrs	r3, r3, #3
 801a1b2:	b21b      	sxth	r3, r3
 801a1b4:	b29a      	uxth	r2, r3
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a1bc:	b29b      	uxth	r3, r3
 801a1be:	4413      	add	r3, r2
 801a1c0:	b29b      	uxth	r3, r3
 801a1c2:	b21a      	sxth	r2, r3
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	2200      	movs	r2, #0
 801a1ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801a1d0:	4b35      	ldr	r3, [pc, #212]	; (801a2a8 <tcp_receive+0x5e4>)
 801a1d2:	881b      	ldrh	r3, [r3, #0]
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	f000 84e2 	beq.w	801ab9e <tcp_receive+0xeda>
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	7d1b      	ldrb	r3, [r3, #20]
 801a1de:	2b06      	cmp	r3, #6
 801a1e0:	f200 84dd 	bhi.w	801ab9e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a1e8:	4b30      	ldr	r3, [pc, #192]	; (801a2ac <tcp_receive+0x5e8>)
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	1ad3      	subs	r3, r2, r3
 801a1ee:	3b01      	subs	r3, #1
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	f2c0 808f 	blt.w	801a314 <tcp_receive+0x650>
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a1fa:	4b2b      	ldr	r3, [pc, #172]	; (801a2a8 <tcp_receive+0x5e4>)
 801a1fc:	881b      	ldrh	r3, [r3, #0]
 801a1fe:	4619      	mov	r1, r3
 801a200:	4b2a      	ldr	r3, [pc, #168]	; (801a2ac <tcp_receive+0x5e8>)
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	440b      	add	r3, r1
 801a206:	1ad3      	subs	r3, r2, r3
 801a208:	3301      	adds	r3, #1
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	f300 8082 	bgt.w	801a314 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801a210:	4b27      	ldr	r3, [pc, #156]	; (801a2b0 <tcp_receive+0x5ec>)
 801a212:	685b      	ldr	r3, [r3, #4]
 801a214:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a21a:	4b24      	ldr	r3, [pc, #144]	; (801a2ac <tcp_receive+0x5e8>)
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	1ad3      	subs	r3, r2, r3
 801a220:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801a222:	4b23      	ldr	r3, [pc, #140]	; (801a2b0 <tcp_receive+0x5ec>)
 801a224:	685b      	ldr	r3, [r3, #4]
 801a226:	2b00      	cmp	r3, #0
 801a228:	d106      	bne.n	801a238 <tcp_receive+0x574>
 801a22a:	4b22      	ldr	r3, [pc, #136]	; (801a2b4 <tcp_receive+0x5f0>)
 801a22c:	f240 5294 	movw	r2, #1428	; 0x594
 801a230:	4921      	ldr	r1, [pc, #132]	; (801a2b8 <tcp_receive+0x5f4>)
 801a232:	4822      	ldr	r0, [pc, #136]	; (801a2bc <tcp_receive+0x5f8>)
 801a234:	f009 fed0 	bl	8023fd8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801a238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a23a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a23e:	4293      	cmp	r3, r2
 801a240:	d906      	bls.n	801a250 <tcp_receive+0x58c>
 801a242:	4b1c      	ldr	r3, [pc, #112]	; (801a2b4 <tcp_receive+0x5f0>)
 801a244:	f240 5295 	movw	r2, #1429	; 0x595
 801a248:	491d      	ldr	r1, [pc, #116]	; (801a2c0 <tcp_receive+0x5fc>)
 801a24a:	481c      	ldr	r0, [pc, #112]	; (801a2bc <tcp_receive+0x5f8>)
 801a24c:	f009 fec4 	bl	8023fd8 <iprintf>
      off = (u16_t)off32;
 801a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a252:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801a256:	4b16      	ldr	r3, [pc, #88]	; (801a2b0 <tcp_receive+0x5ec>)
 801a258:	685b      	ldr	r3, [r3, #4]
 801a25a:	891b      	ldrh	r3, [r3, #8]
 801a25c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a260:	429a      	cmp	r2, r3
 801a262:	d906      	bls.n	801a272 <tcp_receive+0x5ae>
 801a264:	4b13      	ldr	r3, [pc, #76]	; (801a2b4 <tcp_receive+0x5f0>)
 801a266:	f240 5297 	movw	r2, #1431	; 0x597
 801a26a:	4916      	ldr	r1, [pc, #88]	; (801a2c4 <tcp_receive+0x600>)
 801a26c:	4813      	ldr	r0, [pc, #76]	; (801a2bc <tcp_receive+0x5f8>)
 801a26e:	f009 feb3 	bl	8023fd8 <iprintf>
      inseg.len -= off;
 801a272:	4b0f      	ldr	r3, [pc, #60]	; (801a2b0 <tcp_receive+0x5ec>)
 801a274:	891a      	ldrh	r2, [r3, #8]
 801a276:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a27a:	1ad3      	subs	r3, r2, r3
 801a27c:	b29a      	uxth	r2, r3
 801a27e:	4b0c      	ldr	r3, [pc, #48]	; (801a2b0 <tcp_receive+0x5ec>)
 801a280:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801a282:	4b0b      	ldr	r3, [pc, #44]	; (801a2b0 <tcp_receive+0x5ec>)
 801a284:	685b      	ldr	r3, [r3, #4]
 801a286:	891a      	ldrh	r2, [r3, #8]
 801a288:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a28c:	1ad3      	subs	r3, r2, r3
 801a28e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801a290:	e02a      	b.n	801a2e8 <tcp_receive+0x624>
 801a292:	bf00      	nop
 801a294:	080294ec 	.word	0x080294ec
 801a298:	080294f4 	.word	0x080294f4
 801a29c:	20013270 	.word	0x20013270
 801a2a0:	2001326c 	.word	0x2001326c
 801a2a4:	20013230 	.word	0x20013230
 801a2a8:	20013272 	.word	0x20013272
 801a2ac:	20013268 	.word	0x20013268
 801a2b0:	20013248 	.word	0x20013248
 801a2b4:	08029184 	.word	0x08029184
 801a2b8:	080294fc 	.word	0x080294fc
 801a2bc:	080291d0 	.word	0x080291d0
 801a2c0:	0802950c 	.word	0x0802950c
 801a2c4:	0802951c 	.word	0x0802951c
        off -= p->len;
 801a2c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a2ca:	895b      	ldrh	r3, [r3, #10]
 801a2cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a2d0:	1ad3      	subs	r3, r2, r3
 801a2d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801a2d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a2d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a2da:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801a2dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a2de:	2200      	movs	r2, #0
 801a2e0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801a2e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801a2e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a2ea:	895b      	ldrh	r3, [r3, #10]
 801a2ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a2f0:	429a      	cmp	r2, r3
 801a2f2:	d8e9      	bhi.n	801a2c8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801a2f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a2f8:	4619      	mov	r1, r3
 801a2fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801a2fc:	f7fc f840 	bl	8016380 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a304:	4a91      	ldr	r2, [pc, #580]	; (801a54c <tcp_receive+0x888>)
 801a306:	6013      	str	r3, [r2, #0]
 801a308:	4b91      	ldr	r3, [pc, #580]	; (801a550 <tcp_receive+0x88c>)
 801a30a:	68db      	ldr	r3, [r3, #12]
 801a30c:	4a8f      	ldr	r2, [pc, #572]	; (801a54c <tcp_receive+0x888>)
 801a30e:	6812      	ldr	r2, [r2, #0]
 801a310:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801a312:	e00d      	b.n	801a330 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801a314:	4b8d      	ldr	r3, [pc, #564]	; (801a54c <tcp_receive+0x888>)
 801a316:	681a      	ldr	r2, [r3, #0]
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a31c:	1ad3      	subs	r3, r2, r3
 801a31e:	2b00      	cmp	r3, #0
 801a320:	da06      	bge.n	801a330 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	8b5b      	ldrh	r3, [r3, #26]
 801a326:	f043 0302 	orr.w	r3, r3, #2
 801a32a:	b29a      	uxth	r2, r3
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a330:	4b86      	ldr	r3, [pc, #536]	; (801a54c <tcp_receive+0x888>)
 801a332:	681a      	ldr	r2, [r3, #0]
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a338:	1ad3      	subs	r3, r2, r3
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	f2c0 842a 	blt.w	801ab94 <tcp_receive+0xed0>
 801a340:	4b82      	ldr	r3, [pc, #520]	; (801a54c <tcp_receive+0x888>)
 801a342:	681a      	ldr	r2, [r3, #0]
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a348:	6879      	ldr	r1, [r7, #4]
 801a34a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a34c:	440b      	add	r3, r1
 801a34e:	1ad3      	subs	r3, r2, r3
 801a350:	3301      	adds	r3, #1
 801a352:	2b00      	cmp	r3, #0
 801a354:	f300 841e 	bgt.w	801ab94 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801a358:	687b      	ldr	r3, [r7, #4]
 801a35a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a35c:	4b7b      	ldr	r3, [pc, #492]	; (801a54c <tcp_receive+0x888>)
 801a35e:	681b      	ldr	r3, [r3, #0]
 801a360:	429a      	cmp	r2, r3
 801a362:	f040 829a 	bne.w	801a89a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801a366:	4b7a      	ldr	r3, [pc, #488]	; (801a550 <tcp_receive+0x88c>)
 801a368:	891c      	ldrh	r4, [r3, #8]
 801a36a:	4b79      	ldr	r3, [pc, #484]	; (801a550 <tcp_receive+0x88c>)
 801a36c:	68db      	ldr	r3, [r3, #12]
 801a36e:	899b      	ldrh	r3, [r3, #12]
 801a370:	b29b      	uxth	r3, r3
 801a372:	4618      	mov	r0, r3
 801a374:	f7fa fc8c 	bl	8014c90 <lwip_htons>
 801a378:	4603      	mov	r3, r0
 801a37a:	b2db      	uxtb	r3, r3
 801a37c:	f003 0303 	and.w	r3, r3, #3
 801a380:	2b00      	cmp	r3, #0
 801a382:	d001      	beq.n	801a388 <tcp_receive+0x6c4>
 801a384:	2301      	movs	r3, #1
 801a386:	e000      	b.n	801a38a <tcp_receive+0x6c6>
 801a388:	2300      	movs	r3, #0
 801a38a:	4423      	add	r3, r4
 801a38c:	b29a      	uxth	r2, r3
 801a38e:	4b71      	ldr	r3, [pc, #452]	; (801a554 <tcp_receive+0x890>)
 801a390:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a396:	4b6f      	ldr	r3, [pc, #444]	; (801a554 <tcp_receive+0x890>)
 801a398:	881b      	ldrh	r3, [r3, #0]
 801a39a:	429a      	cmp	r2, r3
 801a39c:	d275      	bcs.n	801a48a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a39e:	4b6c      	ldr	r3, [pc, #432]	; (801a550 <tcp_receive+0x88c>)
 801a3a0:	68db      	ldr	r3, [r3, #12]
 801a3a2:	899b      	ldrh	r3, [r3, #12]
 801a3a4:	b29b      	uxth	r3, r3
 801a3a6:	4618      	mov	r0, r3
 801a3a8:	f7fa fc72 	bl	8014c90 <lwip_htons>
 801a3ac:	4603      	mov	r3, r0
 801a3ae:	b2db      	uxtb	r3, r3
 801a3b0:	f003 0301 	and.w	r3, r3, #1
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	d01f      	beq.n	801a3f8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801a3b8:	4b65      	ldr	r3, [pc, #404]	; (801a550 <tcp_receive+0x88c>)
 801a3ba:	68db      	ldr	r3, [r3, #12]
 801a3bc:	899b      	ldrh	r3, [r3, #12]
 801a3be:	b29b      	uxth	r3, r3
 801a3c0:	b21b      	sxth	r3, r3
 801a3c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801a3c6:	b21c      	sxth	r4, r3
 801a3c8:	4b61      	ldr	r3, [pc, #388]	; (801a550 <tcp_receive+0x88c>)
 801a3ca:	68db      	ldr	r3, [r3, #12]
 801a3cc:	899b      	ldrh	r3, [r3, #12]
 801a3ce:	b29b      	uxth	r3, r3
 801a3d0:	4618      	mov	r0, r3
 801a3d2:	f7fa fc5d 	bl	8014c90 <lwip_htons>
 801a3d6:	4603      	mov	r3, r0
 801a3d8:	b2db      	uxtb	r3, r3
 801a3da:	b29b      	uxth	r3, r3
 801a3dc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801a3e0:	b29b      	uxth	r3, r3
 801a3e2:	4618      	mov	r0, r3
 801a3e4:	f7fa fc54 	bl	8014c90 <lwip_htons>
 801a3e8:	4603      	mov	r3, r0
 801a3ea:	b21b      	sxth	r3, r3
 801a3ec:	4323      	orrs	r3, r4
 801a3ee:	b21a      	sxth	r2, r3
 801a3f0:	4b57      	ldr	r3, [pc, #348]	; (801a550 <tcp_receive+0x88c>)
 801a3f2:	68db      	ldr	r3, [r3, #12]
 801a3f4:	b292      	uxth	r2, r2
 801a3f6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a3fc:	4b54      	ldr	r3, [pc, #336]	; (801a550 <tcp_receive+0x88c>)
 801a3fe:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801a400:	4b53      	ldr	r3, [pc, #332]	; (801a550 <tcp_receive+0x88c>)
 801a402:	68db      	ldr	r3, [r3, #12]
 801a404:	899b      	ldrh	r3, [r3, #12]
 801a406:	b29b      	uxth	r3, r3
 801a408:	4618      	mov	r0, r3
 801a40a:	f7fa fc41 	bl	8014c90 <lwip_htons>
 801a40e:	4603      	mov	r3, r0
 801a410:	b2db      	uxtb	r3, r3
 801a412:	f003 0302 	and.w	r3, r3, #2
 801a416:	2b00      	cmp	r3, #0
 801a418:	d005      	beq.n	801a426 <tcp_receive+0x762>
            inseg.len -= 1;
 801a41a:	4b4d      	ldr	r3, [pc, #308]	; (801a550 <tcp_receive+0x88c>)
 801a41c:	891b      	ldrh	r3, [r3, #8]
 801a41e:	3b01      	subs	r3, #1
 801a420:	b29a      	uxth	r2, r3
 801a422:	4b4b      	ldr	r3, [pc, #300]	; (801a550 <tcp_receive+0x88c>)
 801a424:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801a426:	4b4a      	ldr	r3, [pc, #296]	; (801a550 <tcp_receive+0x88c>)
 801a428:	685b      	ldr	r3, [r3, #4]
 801a42a:	4a49      	ldr	r2, [pc, #292]	; (801a550 <tcp_receive+0x88c>)
 801a42c:	8912      	ldrh	r2, [r2, #8]
 801a42e:	4611      	mov	r1, r2
 801a430:	4618      	mov	r0, r3
 801a432:	f7fb fea5 	bl	8016180 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801a436:	4b46      	ldr	r3, [pc, #280]	; (801a550 <tcp_receive+0x88c>)
 801a438:	891c      	ldrh	r4, [r3, #8]
 801a43a:	4b45      	ldr	r3, [pc, #276]	; (801a550 <tcp_receive+0x88c>)
 801a43c:	68db      	ldr	r3, [r3, #12]
 801a43e:	899b      	ldrh	r3, [r3, #12]
 801a440:	b29b      	uxth	r3, r3
 801a442:	4618      	mov	r0, r3
 801a444:	f7fa fc24 	bl	8014c90 <lwip_htons>
 801a448:	4603      	mov	r3, r0
 801a44a:	b2db      	uxtb	r3, r3
 801a44c:	f003 0303 	and.w	r3, r3, #3
 801a450:	2b00      	cmp	r3, #0
 801a452:	d001      	beq.n	801a458 <tcp_receive+0x794>
 801a454:	2301      	movs	r3, #1
 801a456:	e000      	b.n	801a45a <tcp_receive+0x796>
 801a458:	2300      	movs	r3, #0
 801a45a:	4423      	add	r3, r4
 801a45c:	b29a      	uxth	r2, r3
 801a45e:	4b3d      	ldr	r3, [pc, #244]	; (801a554 <tcp_receive+0x890>)
 801a460:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a462:	4b3c      	ldr	r3, [pc, #240]	; (801a554 <tcp_receive+0x890>)
 801a464:	881b      	ldrh	r3, [r3, #0]
 801a466:	461a      	mov	r2, r3
 801a468:	4b38      	ldr	r3, [pc, #224]	; (801a54c <tcp_receive+0x888>)
 801a46a:	681b      	ldr	r3, [r3, #0]
 801a46c:	441a      	add	r2, r3
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a472:	6879      	ldr	r1, [r7, #4]
 801a474:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a476:	440b      	add	r3, r1
 801a478:	429a      	cmp	r2, r3
 801a47a:	d006      	beq.n	801a48a <tcp_receive+0x7c6>
 801a47c:	4b36      	ldr	r3, [pc, #216]	; (801a558 <tcp_receive+0x894>)
 801a47e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801a482:	4936      	ldr	r1, [pc, #216]	; (801a55c <tcp_receive+0x898>)
 801a484:	4836      	ldr	r0, [pc, #216]	; (801a560 <tcp_receive+0x89c>)
 801a486:	f009 fda7 	bl	8023fd8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a48e:	2b00      	cmp	r3, #0
 801a490:	f000 80e7 	beq.w	801a662 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a494:	4b2e      	ldr	r3, [pc, #184]	; (801a550 <tcp_receive+0x88c>)
 801a496:	68db      	ldr	r3, [r3, #12]
 801a498:	899b      	ldrh	r3, [r3, #12]
 801a49a:	b29b      	uxth	r3, r3
 801a49c:	4618      	mov	r0, r3
 801a49e:	f7fa fbf7 	bl	8014c90 <lwip_htons>
 801a4a2:	4603      	mov	r3, r0
 801a4a4:	b2db      	uxtb	r3, r3
 801a4a6:	f003 0301 	and.w	r3, r3, #1
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d010      	beq.n	801a4d0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801a4ae:	e00a      	b.n	801a4c6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a4b4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a4ba:	681a      	ldr	r2, [r3, #0]
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801a4c0:	68f8      	ldr	r0, [r7, #12]
 801a4c2:	f7fd fcac 	bl	8017e1e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	d1f0      	bne.n	801a4b0 <tcp_receive+0x7ec>
 801a4ce:	e0c8      	b.n	801a662 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801a4d6:	e052      	b.n	801a57e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801a4d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a4da:	68db      	ldr	r3, [r3, #12]
 801a4dc:	899b      	ldrh	r3, [r3, #12]
 801a4de:	b29b      	uxth	r3, r3
 801a4e0:	4618      	mov	r0, r3
 801a4e2:	f7fa fbd5 	bl	8014c90 <lwip_htons>
 801a4e6:	4603      	mov	r3, r0
 801a4e8:	b2db      	uxtb	r3, r3
 801a4ea:	f003 0301 	and.w	r3, r3, #1
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	d03d      	beq.n	801a56e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801a4f2:	4b17      	ldr	r3, [pc, #92]	; (801a550 <tcp_receive+0x88c>)
 801a4f4:	68db      	ldr	r3, [r3, #12]
 801a4f6:	899b      	ldrh	r3, [r3, #12]
 801a4f8:	b29b      	uxth	r3, r3
 801a4fa:	4618      	mov	r0, r3
 801a4fc:	f7fa fbc8 	bl	8014c90 <lwip_htons>
 801a500:	4603      	mov	r3, r0
 801a502:	b2db      	uxtb	r3, r3
 801a504:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801a508:	2b00      	cmp	r3, #0
 801a50a:	d130      	bne.n	801a56e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801a50c:	4b10      	ldr	r3, [pc, #64]	; (801a550 <tcp_receive+0x88c>)
 801a50e:	68db      	ldr	r3, [r3, #12]
 801a510:	899b      	ldrh	r3, [r3, #12]
 801a512:	b29c      	uxth	r4, r3
 801a514:	2001      	movs	r0, #1
 801a516:	f7fa fbbb 	bl	8014c90 <lwip_htons>
 801a51a:	4603      	mov	r3, r0
 801a51c:	461a      	mov	r2, r3
 801a51e:	4b0c      	ldr	r3, [pc, #48]	; (801a550 <tcp_receive+0x88c>)
 801a520:	68db      	ldr	r3, [r3, #12]
 801a522:	4322      	orrs	r2, r4
 801a524:	b292      	uxth	r2, r2
 801a526:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801a528:	4b09      	ldr	r3, [pc, #36]	; (801a550 <tcp_receive+0x88c>)
 801a52a:	891c      	ldrh	r4, [r3, #8]
 801a52c:	4b08      	ldr	r3, [pc, #32]	; (801a550 <tcp_receive+0x88c>)
 801a52e:	68db      	ldr	r3, [r3, #12]
 801a530:	899b      	ldrh	r3, [r3, #12]
 801a532:	b29b      	uxth	r3, r3
 801a534:	4618      	mov	r0, r3
 801a536:	f7fa fbab 	bl	8014c90 <lwip_htons>
 801a53a:	4603      	mov	r3, r0
 801a53c:	b2db      	uxtb	r3, r3
 801a53e:	f003 0303 	and.w	r3, r3, #3
 801a542:	2b00      	cmp	r3, #0
 801a544:	d00e      	beq.n	801a564 <tcp_receive+0x8a0>
 801a546:	2301      	movs	r3, #1
 801a548:	e00d      	b.n	801a566 <tcp_receive+0x8a2>
 801a54a:	bf00      	nop
 801a54c:	20013268 	.word	0x20013268
 801a550:	20013248 	.word	0x20013248
 801a554:	20013272 	.word	0x20013272
 801a558:	08029184 	.word	0x08029184
 801a55c:	0802952c 	.word	0x0802952c
 801a560:	080291d0 	.word	0x080291d0
 801a564:	2300      	movs	r3, #0
 801a566:	4423      	add	r3, r4
 801a568:	b29a      	uxth	r2, r3
 801a56a:	4b98      	ldr	r3, [pc, #608]	; (801a7cc <tcp_receive+0xb08>)
 801a56c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801a56e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a570:	613b      	str	r3, [r7, #16]
              next = next->next;
 801a572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801a578:	6938      	ldr	r0, [r7, #16]
 801a57a:	f7fd fc50 	bl	8017e1e <tcp_seg_free>
            while (next &&
 801a57e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a580:	2b00      	cmp	r3, #0
 801a582:	d00e      	beq.n	801a5a2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801a584:	4b91      	ldr	r3, [pc, #580]	; (801a7cc <tcp_receive+0xb08>)
 801a586:	881b      	ldrh	r3, [r3, #0]
 801a588:	461a      	mov	r2, r3
 801a58a:	4b91      	ldr	r3, [pc, #580]	; (801a7d0 <tcp_receive+0xb0c>)
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	441a      	add	r2, r3
 801a590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a592:	68db      	ldr	r3, [r3, #12]
 801a594:	685b      	ldr	r3, [r3, #4]
 801a596:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801a598:	8909      	ldrh	r1, [r1, #8]
 801a59a:	440b      	add	r3, r1
 801a59c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	da9a      	bge.n	801a4d8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801a5a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d059      	beq.n	801a65c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801a5a8:	4b88      	ldr	r3, [pc, #544]	; (801a7cc <tcp_receive+0xb08>)
 801a5aa:	881b      	ldrh	r3, [r3, #0]
 801a5ac:	461a      	mov	r2, r3
 801a5ae:	4b88      	ldr	r3, [pc, #544]	; (801a7d0 <tcp_receive+0xb0c>)
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	441a      	add	r2, r3
 801a5b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a5b6:	68db      	ldr	r3, [r3, #12]
 801a5b8:	685b      	ldr	r3, [r3, #4]
 801a5ba:	1ad3      	subs	r3, r2, r3
            if (next &&
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	dd4d      	ble.n	801a65c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801a5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a5c2:	68db      	ldr	r3, [r3, #12]
 801a5c4:	685b      	ldr	r3, [r3, #4]
 801a5c6:	b29a      	uxth	r2, r3
 801a5c8:	4b81      	ldr	r3, [pc, #516]	; (801a7d0 <tcp_receive+0xb0c>)
 801a5ca:	681b      	ldr	r3, [r3, #0]
 801a5cc:	b29b      	uxth	r3, r3
 801a5ce:	1ad3      	subs	r3, r2, r3
 801a5d0:	b29a      	uxth	r2, r3
 801a5d2:	4b80      	ldr	r3, [pc, #512]	; (801a7d4 <tcp_receive+0xb10>)
 801a5d4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801a5d6:	4b7f      	ldr	r3, [pc, #508]	; (801a7d4 <tcp_receive+0xb10>)
 801a5d8:	68db      	ldr	r3, [r3, #12]
 801a5da:	899b      	ldrh	r3, [r3, #12]
 801a5dc:	b29b      	uxth	r3, r3
 801a5de:	4618      	mov	r0, r3
 801a5e0:	f7fa fb56 	bl	8014c90 <lwip_htons>
 801a5e4:	4603      	mov	r3, r0
 801a5e6:	b2db      	uxtb	r3, r3
 801a5e8:	f003 0302 	and.w	r3, r3, #2
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d005      	beq.n	801a5fc <tcp_receive+0x938>
                inseg.len -= 1;
 801a5f0:	4b78      	ldr	r3, [pc, #480]	; (801a7d4 <tcp_receive+0xb10>)
 801a5f2:	891b      	ldrh	r3, [r3, #8]
 801a5f4:	3b01      	subs	r3, #1
 801a5f6:	b29a      	uxth	r2, r3
 801a5f8:	4b76      	ldr	r3, [pc, #472]	; (801a7d4 <tcp_receive+0xb10>)
 801a5fa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801a5fc:	4b75      	ldr	r3, [pc, #468]	; (801a7d4 <tcp_receive+0xb10>)
 801a5fe:	685b      	ldr	r3, [r3, #4]
 801a600:	4a74      	ldr	r2, [pc, #464]	; (801a7d4 <tcp_receive+0xb10>)
 801a602:	8912      	ldrh	r2, [r2, #8]
 801a604:	4611      	mov	r1, r2
 801a606:	4618      	mov	r0, r3
 801a608:	f7fb fdba 	bl	8016180 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801a60c:	4b71      	ldr	r3, [pc, #452]	; (801a7d4 <tcp_receive+0xb10>)
 801a60e:	891c      	ldrh	r4, [r3, #8]
 801a610:	4b70      	ldr	r3, [pc, #448]	; (801a7d4 <tcp_receive+0xb10>)
 801a612:	68db      	ldr	r3, [r3, #12]
 801a614:	899b      	ldrh	r3, [r3, #12]
 801a616:	b29b      	uxth	r3, r3
 801a618:	4618      	mov	r0, r3
 801a61a:	f7fa fb39 	bl	8014c90 <lwip_htons>
 801a61e:	4603      	mov	r3, r0
 801a620:	b2db      	uxtb	r3, r3
 801a622:	f003 0303 	and.w	r3, r3, #3
 801a626:	2b00      	cmp	r3, #0
 801a628:	d001      	beq.n	801a62e <tcp_receive+0x96a>
 801a62a:	2301      	movs	r3, #1
 801a62c:	e000      	b.n	801a630 <tcp_receive+0x96c>
 801a62e:	2300      	movs	r3, #0
 801a630:	4423      	add	r3, r4
 801a632:	b29a      	uxth	r2, r3
 801a634:	4b65      	ldr	r3, [pc, #404]	; (801a7cc <tcp_receive+0xb08>)
 801a636:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801a638:	4b64      	ldr	r3, [pc, #400]	; (801a7cc <tcp_receive+0xb08>)
 801a63a:	881b      	ldrh	r3, [r3, #0]
 801a63c:	461a      	mov	r2, r3
 801a63e:	4b64      	ldr	r3, [pc, #400]	; (801a7d0 <tcp_receive+0xb0c>)
 801a640:	681b      	ldr	r3, [r3, #0]
 801a642:	441a      	add	r2, r3
 801a644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a646:	68db      	ldr	r3, [r3, #12]
 801a648:	685b      	ldr	r3, [r3, #4]
 801a64a:	429a      	cmp	r2, r3
 801a64c:	d006      	beq.n	801a65c <tcp_receive+0x998>
 801a64e:	4b62      	ldr	r3, [pc, #392]	; (801a7d8 <tcp_receive+0xb14>)
 801a650:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801a654:	4961      	ldr	r1, [pc, #388]	; (801a7dc <tcp_receive+0xb18>)
 801a656:	4862      	ldr	r0, [pc, #392]	; (801a7e0 <tcp_receive+0xb1c>)
 801a658:	f009 fcbe 	bl	8023fd8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a660:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801a662:	4b5a      	ldr	r3, [pc, #360]	; (801a7cc <tcp_receive+0xb08>)
 801a664:	881b      	ldrh	r3, [r3, #0]
 801a666:	461a      	mov	r2, r3
 801a668:	4b59      	ldr	r3, [pc, #356]	; (801a7d0 <tcp_receive+0xb0c>)
 801a66a:	681b      	ldr	r3, [r3, #0]
 801a66c:	441a      	add	r2, r3
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a676:	4b55      	ldr	r3, [pc, #340]	; (801a7cc <tcp_receive+0xb08>)
 801a678:	881b      	ldrh	r3, [r3, #0]
 801a67a:	429a      	cmp	r2, r3
 801a67c:	d206      	bcs.n	801a68c <tcp_receive+0x9c8>
 801a67e:	4b56      	ldr	r3, [pc, #344]	; (801a7d8 <tcp_receive+0xb14>)
 801a680:	f240 6207 	movw	r2, #1543	; 0x607
 801a684:	4957      	ldr	r1, [pc, #348]	; (801a7e4 <tcp_receive+0xb20>)
 801a686:	4856      	ldr	r0, [pc, #344]	; (801a7e0 <tcp_receive+0xb1c>)
 801a688:	f009 fca6 	bl	8023fd8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a690:	4b4e      	ldr	r3, [pc, #312]	; (801a7cc <tcp_receive+0xb08>)
 801a692:	881b      	ldrh	r3, [r3, #0]
 801a694:	1ad3      	subs	r3, r2, r3
 801a696:	b29a      	uxth	r2, r3
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801a69c:	6878      	ldr	r0, [r7, #4]
 801a69e:	f7fc fe97 	bl	80173d0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801a6a2:	4b4c      	ldr	r3, [pc, #304]	; (801a7d4 <tcp_receive+0xb10>)
 801a6a4:	685b      	ldr	r3, [r3, #4]
 801a6a6:	891b      	ldrh	r3, [r3, #8]
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d006      	beq.n	801a6ba <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801a6ac:	4b49      	ldr	r3, [pc, #292]	; (801a7d4 <tcp_receive+0xb10>)
 801a6ae:	685b      	ldr	r3, [r3, #4]
 801a6b0:	4a4d      	ldr	r2, [pc, #308]	; (801a7e8 <tcp_receive+0xb24>)
 801a6b2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801a6b4:	4b47      	ldr	r3, [pc, #284]	; (801a7d4 <tcp_receive+0xb10>)
 801a6b6:	2200      	movs	r2, #0
 801a6b8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a6ba:	4b46      	ldr	r3, [pc, #280]	; (801a7d4 <tcp_receive+0xb10>)
 801a6bc:	68db      	ldr	r3, [r3, #12]
 801a6be:	899b      	ldrh	r3, [r3, #12]
 801a6c0:	b29b      	uxth	r3, r3
 801a6c2:	4618      	mov	r0, r3
 801a6c4:	f7fa fae4 	bl	8014c90 <lwip_htons>
 801a6c8:	4603      	mov	r3, r0
 801a6ca:	b2db      	uxtb	r3, r3
 801a6cc:	f003 0301 	and.w	r3, r3, #1
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	f000 80b8 	beq.w	801a846 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801a6d6:	4b45      	ldr	r3, [pc, #276]	; (801a7ec <tcp_receive+0xb28>)
 801a6d8:	781b      	ldrb	r3, [r3, #0]
 801a6da:	f043 0320 	orr.w	r3, r3, #32
 801a6de:	b2da      	uxtb	r2, r3
 801a6e0:	4b42      	ldr	r3, [pc, #264]	; (801a7ec <tcp_receive+0xb28>)
 801a6e2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801a6e4:	e0af      	b.n	801a846 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a6ea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a6f0:	68db      	ldr	r3, [r3, #12]
 801a6f2:	685b      	ldr	r3, [r3, #4]
 801a6f4:	4a36      	ldr	r2, [pc, #216]	; (801a7d0 <tcp_receive+0xb0c>)
 801a6f6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801a6f8:	68bb      	ldr	r3, [r7, #8]
 801a6fa:	891b      	ldrh	r3, [r3, #8]
 801a6fc:	461c      	mov	r4, r3
 801a6fe:	68bb      	ldr	r3, [r7, #8]
 801a700:	68db      	ldr	r3, [r3, #12]
 801a702:	899b      	ldrh	r3, [r3, #12]
 801a704:	b29b      	uxth	r3, r3
 801a706:	4618      	mov	r0, r3
 801a708:	f7fa fac2 	bl	8014c90 <lwip_htons>
 801a70c:	4603      	mov	r3, r0
 801a70e:	b2db      	uxtb	r3, r3
 801a710:	f003 0303 	and.w	r3, r3, #3
 801a714:	2b00      	cmp	r3, #0
 801a716:	d001      	beq.n	801a71c <tcp_receive+0xa58>
 801a718:	2301      	movs	r3, #1
 801a71a:	e000      	b.n	801a71e <tcp_receive+0xa5a>
 801a71c:	2300      	movs	r3, #0
 801a71e:	191a      	adds	r2, r3, r4
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a724:	441a      	add	r2, r3
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a72e:	461c      	mov	r4, r3
 801a730:	68bb      	ldr	r3, [r7, #8]
 801a732:	891b      	ldrh	r3, [r3, #8]
 801a734:	461d      	mov	r5, r3
 801a736:	68bb      	ldr	r3, [r7, #8]
 801a738:	68db      	ldr	r3, [r3, #12]
 801a73a:	899b      	ldrh	r3, [r3, #12]
 801a73c:	b29b      	uxth	r3, r3
 801a73e:	4618      	mov	r0, r3
 801a740:	f7fa faa6 	bl	8014c90 <lwip_htons>
 801a744:	4603      	mov	r3, r0
 801a746:	b2db      	uxtb	r3, r3
 801a748:	f003 0303 	and.w	r3, r3, #3
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	d001      	beq.n	801a754 <tcp_receive+0xa90>
 801a750:	2301      	movs	r3, #1
 801a752:	e000      	b.n	801a756 <tcp_receive+0xa92>
 801a754:	2300      	movs	r3, #0
 801a756:	442b      	add	r3, r5
 801a758:	429c      	cmp	r4, r3
 801a75a:	d206      	bcs.n	801a76a <tcp_receive+0xaa6>
 801a75c:	4b1e      	ldr	r3, [pc, #120]	; (801a7d8 <tcp_receive+0xb14>)
 801a75e:	f240 622b 	movw	r2, #1579	; 0x62b
 801a762:	4923      	ldr	r1, [pc, #140]	; (801a7f0 <tcp_receive+0xb2c>)
 801a764:	481e      	ldr	r0, [pc, #120]	; (801a7e0 <tcp_receive+0xb1c>)
 801a766:	f009 fc37 	bl	8023fd8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801a76a:	68bb      	ldr	r3, [r7, #8]
 801a76c:	891b      	ldrh	r3, [r3, #8]
 801a76e:	461c      	mov	r4, r3
 801a770:	68bb      	ldr	r3, [r7, #8]
 801a772:	68db      	ldr	r3, [r3, #12]
 801a774:	899b      	ldrh	r3, [r3, #12]
 801a776:	b29b      	uxth	r3, r3
 801a778:	4618      	mov	r0, r3
 801a77a:	f7fa fa89 	bl	8014c90 <lwip_htons>
 801a77e:	4603      	mov	r3, r0
 801a780:	b2db      	uxtb	r3, r3
 801a782:	f003 0303 	and.w	r3, r3, #3
 801a786:	2b00      	cmp	r3, #0
 801a788:	d001      	beq.n	801a78e <tcp_receive+0xaca>
 801a78a:	2301      	movs	r3, #1
 801a78c:	e000      	b.n	801a790 <tcp_receive+0xacc>
 801a78e:	2300      	movs	r3, #0
 801a790:	1919      	adds	r1, r3, r4
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a796:	b28b      	uxth	r3, r1
 801a798:	1ad3      	subs	r3, r2, r3
 801a79a:	b29a      	uxth	r2, r3
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801a7a0:	6878      	ldr	r0, [r7, #4]
 801a7a2:	f7fc fe15 	bl	80173d0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801a7a6:	68bb      	ldr	r3, [r7, #8]
 801a7a8:	685b      	ldr	r3, [r3, #4]
 801a7aa:	891b      	ldrh	r3, [r3, #8]
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	d028      	beq.n	801a802 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801a7b0:	4b0d      	ldr	r3, [pc, #52]	; (801a7e8 <tcp_receive+0xb24>)
 801a7b2:	681b      	ldr	r3, [r3, #0]
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	d01d      	beq.n	801a7f4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801a7b8:	4b0b      	ldr	r3, [pc, #44]	; (801a7e8 <tcp_receive+0xb24>)
 801a7ba:	681a      	ldr	r2, [r3, #0]
 801a7bc:	68bb      	ldr	r3, [r7, #8]
 801a7be:	685b      	ldr	r3, [r3, #4]
 801a7c0:	4619      	mov	r1, r3
 801a7c2:	4610      	mov	r0, r2
 801a7c4:	f7fb ff30 	bl	8016628 <pbuf_cat>
 801a7c8:	e018      	b.n	801a7fc <tcp_receive+0xb38>
 801a7ca:	bf00      	nop
 801a7cc:	20013272 	.word	0x20013272
 801a7d0:	20013268 	.word	0x20013268
 801a7d4:	20013248 	.word	0x20013248
 801a7d8:	08029184 	.word	0x08029184
 801a7dc:	08029564 	.word	0x08029564
 801a7e0:	080291d0 	.word	0x080291d0
 801a7e4:	080295a0 	.word	0x080295a0
 801a7e8:	20013278 	.word	0x20013278
 801a7ec:	20013275 	.word	0x20013275
 801a7f0:	080295c0 	.word	0x080295c0
            } else {
              recv_data = cseg->p;
 801a7f4:	68bb      	ldr	r3, [r7, #8]
 801a7f6:	685b      	ldr	r3, [r3, #4]
 801a7f8:	4a70      	ldr	r2, [pc, #448]	; (801a9bc <tcp_receive+0xcf8>)
 801a7fa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801a7fc:	68bb      	ldr	r3, [r7, #8]
 801a7fe:	2200      	movs	r2, #0
 801a800:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801a802:	68bb      	ldr	r3, [r7, #8]
 801a804:	68db      	ldr	r3, [r3, #12]
 801a806:	899b      	ldrh	r3, [r3, #12]
 801a808:	b29b      	uxth	r3, r3
 801a80a:	4618      	mov	r0, r3
 801a80c:	f7fa fa40 	bl	8014c90 <lwip_htons>
 801a810:	4603      	mov	r3, r0
 801a812:	b2db      	uxtb	r3, r3
 801a814:	f003 0301 	and.w	r3, r3, #1
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d00d      	beq.n	801a838 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801a81c:	4b68      	ldr	r3, [pc, #416]	; (801a9c0 <tcp_receive+0xcfc>)
 801a81e:	781b      	ldrb	r3, [r3, #0]
 801a820:	f043 0320 	orr.w	r3, r3, #32
 801a824:	b2da      	uxtb	r2, r3
 801a826:	4b66      	ldr	r3, [pc, #408]	; (801a9c0 <tcp_receive+0xcfc>)
 801a828:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	7d1b      	ldrb	r3, [r3, #20]
 801a82e:	2b04      	cmp	r3, #4
 801a830:	d102      	bne.n	801a838 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	2207      	movs	r2, #7
 801a836:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801a838:	68bb      	ldr	r3, [r7, #8]
 801a83a:	681a      	ldr	r2, [r3, #0]
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801a840:	68b8      	ldr	r0, [r7, #8]
 801a842:	f7fd faec 	bl	8017e1e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	d008      	beq.n	801a860 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a852:	68db      	ldr	r3, [r3, #12]
 801a854:	685a      	ldr	r2, [r3, #4]
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801a85a:	429a      	cmp	r2, r3
 801a85c:	f43f af43 	beq.w	801a6e6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801a860:	687b      	ldr	r3, [r7, #4]
 801a862:	8b5b      	ldrh	r3, [r3, #26]
 801a864:	f003 0301 	and.w	r3, r3, #1
 801a868:	2b00      	cmp	r3, #0
 801a86a:	d00e      	beq.n	801a88a <tcp_receive+0xbc6>
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	8b5b      	ldrh	r3, [r3, #26]
 801a870:	f023 0301 	bic.w	r3, r3, #1
 801a874:	b29a      	uxth	r2, r3
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	835a      	strh	r2, [r3, #26]
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	8b5b      	ldrh	r3, [r3, #26]
 801a87e:	f043 0302 	orr.w	r3, r3, #2
 801a882:	b29a      	uxth	r2, r3
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a888:	e188      	b.n	801ab9c <tcp_receive+0xed8>
        tcp_ack(pcb);
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	8b5b      	ldrh	r3, [r3, #26]
 801a88e:	f043 0301 	orr.w	r3, r3, #1
 801a892:	b29a      	uxth	r2, r3
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a898:	e180      	b.n	801ab9c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	d106      	bne.n	801a8b0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801a8a2:	4848      	ldr	r0, [pc, #288]	; (801a9c4 <tcp_receive+0xd00>)
 801a8a4:	f7fd fad4 	bl	8017e50 <tcp_seg_copy>
 801a8a8:	4602      	mov	r2, r0
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	675a      	str	r2, [r3, #116]	; 0x74
 801a8ae:	e16d      	b.n	801ab8c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801a8b0:	2300      	movs	r3, #0
 801a8b2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a8b8:	63bb      	str	r3, [r7, #56]	; 0x38
 801a8ba:	e157      	b.n	801ab6c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801a8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a8be:	68db      	ldr	r3, [r3, #12]
 801a8c0:	685a      	ldr	r2, [r3, #4]
 801a8c2:	4b41      	ldr	r3, [pc, #260]	; (801a9c8 <tcp_receive+0xd04>)
 801a8c4:	681b      	ldr	r3, [r3, #0]
 801a8c6:	429a      	cmp	r2, r3
 801a8c8:	d11d      	bne.n	801a906 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801a8ca:	4b3e      	ldr	r3, [pc, #248]	; (801a9c4 <tcp_receive+0xd00>)
 801a8cc:	891a      	ldrh	r2, [r3, #8]
 801a8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a8d0:	891b      	ldrh	r3, [r3, #8]
 801a8d2:	429a      	cmp	r2, r3
 801a8d4:	f240 814f 	bls.w	801ab76 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a8d8:	483a      	ldr	r0, [pc, #232]	; (801a9c4 <tcp_receive+0xd00>)
 801a8da:	f7fd fab9 	bl	8017e50 <tcp_seg_copy>
 801a8de:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801a8e0:	697b      	ldr	r3, [r7, #20]
 801a8e2:	2b00      	cmp	r3, #0
 801a8e4:	f000 8149 	beq.w	801ab7a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801a8e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	d003      	beq.n	801a8f6 <tcp_receive+0xc32>
                    prev->next = cseg;
 801a8ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8f0:	697a      	ldr	r2, [r7, #20]
 801a8f2:	601a      	str	r2, [r3, #0]
 801a8f4:	e002      	b.n	801a8fc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	697a      	ldr	r2, [r7, #20]
 801a8fa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801a8fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a8fe:	6978      	ldr	r0, [r7, #20]
 801a900:	f7ff f8dc 	bl	8019abc <tcp_oos_insert_segment>
                }
                break;
 801a904:	e139      	b.n	801ab7a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801a906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a908:	2b00      	cmp	r3, #0
 801a90a:	d117      	bne.n	801a93c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801a90c:	4b2e      	ldr	r3, [pc, #184]	; (801a9c8 <tcp_receive+0xd04>)
 801a90e:	681a      	ldr	r2, [r3, #0]
 801a910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a912:	68db      	ldr	r3, [r3, #12]
 801a914:	685b      	ldr	r3, [r3, #4]
 801a916:	1ad3      	subs	r3, r2, r3
 801a918:	2b00      	cmp	r3, #0
 801a91a:	da57      	bge.n	801a9cc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a91c:	4829      	ldr	r0, [pc, #164]	; (801a9c4 <tcp_receive+0xd00>)
 801a91e:	f7fd fa97 	bl	8017e50 <tcp_seg_copy>
 801a922:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801a924:	69bb      	ldr	r3, [r7, #24]
 801a926:	2b00      	cmp	r3, #0
 801a928:	f000 8129 	beq.w	801ab7e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	69ba      	ldr	r2, [r7, #24]
 801a930:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801a932:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a934:	69b8      	ldr	r0, [r7, #24]
 801a936:	f7ff f8c1 	bl	8019abc <tcp_oos_insert_segment>
                  }
                  break;
 801a93a:	e120      	b.n	801ab7e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801a93c:	4b22      	ldr	r3, [pc, #136]	; (801a9c8 <tcp_receive+0xd04>)
 801a93e:	681a      	ldr	r2, [r3, #0]
 801a940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a942:	68db      	ldr	r3, [r3, #12]
 801a944:	685b      	ldr	r3, [r3, #4]
 801a946:	1ad3      	subs	r3, r2, r3
 801a948:	3b01      	subs	r3, #1
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	db3e      	blt.n	801a9cc <tcp_receive+0xd08>
 801a94e:	4b1e      	ldr	r3, [pc, #120]	; (801a9c8 <tcp_receive+0xd04>)
 801a950:	681a      	ldr	r2, [r3, #0]
 801a952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a954:	68db      	ldr	r3, [r3, #12]
 801a956:	685b      	ldr	r3, [r3, #4]
 801a958:	1ad3      	subs	r3, r2, r3
 801a95a:	3301      	adds	r3, #1
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	dc35      	bgt.n	801a9cc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a960:	4818      	ldr	r0, [pc, #96]	; (801a9c4 <tcp_receive+0xd00>)
 801a962:	f7fd fa75 	bl	8017e50 <tcp_seg_copy>
 801a966:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801a968:	69fb      	ldr	r3, [r7, #28]
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	f000 8109 	beq.w	801ab82 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801a970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a972:	68db      	ldr	r3, [r3, #12]
 801a974:	685b      	ldr	r3, [r3, #4]
 801a976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a978:	8912      	ldrh	r2, [r2, #8]
 801a97a:	441a      	add	r2, r3
 801a97c:	4b12      	ldr	r3, [pc, #72]	; (801a9c8 <tcp_receive+0xd04>)
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	1ad3      	subs	r3, r2, r3
 801a982:	2b00      	cmp	r3, #0
 801a984:	dd12      	ble.n	801a9ac <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801a986:	4b10      	ldr	r3, [pc, #64]	; (801a9c8 <tcp_receive+0xd04>)
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	b29a      	uxth	r2, r3
 801a98c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a98e:	68db      	ldr	r3, [r3, #12]
 801a990:	685b      	ldr	r3, [r3, #4]
 801a992:	b29b      	uxth	r3, r3
 801a994:	1ad3      	subs	r3, r2, r3
 801a996:	b29a      	uxth	r2, r3
 801a998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a99a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801a99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a99e:	685a      	ldr	r2, [r3, #4]
 801a9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9a2:	891b      	ldrh	r3, [r3, #8]
 801a9a4:	4619      	mov	r1, r3
 801a9a6:	4610      	mov	r0, r2
 801a9a8:	f7fb fbea 	bl	8016180 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801a9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9ae:	69fa      	ldr	r2, [r7, #28]
 801a9b0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801a9b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a9b4:	69f8      	ldr	r0, [r7, #28]
 801a9b6:	f7ff f881 	bl	8019abc <tcp_oos_insert_segment>
                  }
                  break;
 801a9ba:	e0e2      	b.n	801ab82 <tcp_receive+0xebe>
 801a9bc:	20013278 	.word	0x20013278
 801a9c0:	20013275 	.word	0x20013275
 801a9c4:	20013248 	.word	0x20013248
 801a9c8:	20013268 	.word	0x20013268
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801a9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a9ce:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801a9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a9d2:	681b      	ldr	r3, [r3, #0]
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	f040 80c6 	bne.w	801ab66 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801a9da:	4b80      	ldr	r3, [pc, #512]	; (801abdc <tcp_receive+0xf18>)
 801a9dc:	681a      	ldr	r2, [r3, #0]
 801a9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a9e0:	68db      	ldr	r3, [r3, #12]
 801a9e2:	685b      	ldr	r3, [r3, #4]
 801a9e4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	f340 80bd 	ble.w	801ab66 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a9ee:	68db      	ldr	r3, [r3, #12]
 801a9f0:	899b      	ldrh	r3, [r3, #12]
 801a9f2:	b29b      	uxth	r3, r3
 801a9f4:	4618      	mov	r0, r3
 801a9f6:	f7fa f94b 	bl	8014c90 <lwip_htons>
 801a9fa:	4603      	mov	r3, r0
 801a9fc:	b2db      	uxtb	r3, r3
 801a9fe:	f003 0301 	and.w	r3, r3, #1
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	f040 80bf 	bne.w	801ab86 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801aa08:	4875      	ldr	r0, [pc, #468]	; (801abe0 <tcp_receive+0xf1c>)
 801aa0a:	f7fd fa21 	bl	8017e50 <tcp_seg_copy>
 801aa0e:	4602      	mov	r2, r0
 801aa10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa12:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801aa14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa16:	681b      	ldr	r3, [r3, #0]
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	f000 80b6 	beq.w	801ab8a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801aa1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa20:	68db      	ldr	r3, [r3, #12]
 801aa22:	685b      	ldr	r3, [r3, #4]
 801aa24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801aa26:	8912      	ldrh	r2, [r2, #8]
 801aa28:	441a      	add	r2, r3
 801aa2a:	4b6c      	ldr	r3, [pc, #432]	; (801abdc <tcp_receive+0xf18>)
 801aa2c:	681b      	ldr	r3, [r3, #0]
 801aa2e:	1ad3      	subs	r3, r2, r3
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	dd12      	ble.n	801aa5a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801aa34:	4b69      	ldr	r3, [pc, #420]	; (801abdc <tcp_receive+0xf18>)
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	b29a      	uxth	r2, r3
 801aa3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa3c:	68db      	ldr	r3, [r3, #12]
 801aa3e:	685b      	ldr	r3, [r3, #4]
 801aa40:	b29b      	uxth	r3, r3
 801aa42:	1ad3      	subs	r3, r2, r3
 801aa44:	b29a      	uxth	r2, r3
 801aa46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa48:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801aa4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa4c:	685a      	ldr	r2, [r3, #4]
 801aa4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa50:	891b      	ldrh	r3, [r3, #8]
 801aa52:	4619      	mov	r1, r3
 801aa54:	4610      	mov	r0, r2
 801aa56:	f7fb fb93 	bl	8016180 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801aa5a:	4b62      	ldr	r3, [pc, #392]	; (801abe4 <tcp_receive+0xf20>)
 801aa5c:	881b      	ldrh	r3, [r3, #0]
 801aa5e:	461a      	mov	r2, r3
 801aa60:	4b5e      	ldr	r3, [pc, #376]	; (801abdc <tcp_receive+0xf18>)
 801aa62:	681b      	ldr	r3, [r3, #0]
 801aa64:	441a      	add	r2, r3
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa6a:	6879      	ldr	r1, [r7, #4]
 801aa6c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801aa6e:	440b      	add	r3, r1
 801aa70:	1ad3      	subs	r3, r2, r3
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	f340 8089 	ble.w	801ab8a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801aa78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	68db      	ldr	r3, [r3, #12]
 801aa7e:	899b      	ldrh	r3, [r3, #12]
 801aa80:	b29b      	uxth	r3, r3
 801aa82:	4618      	mov	r0, r3
 801aa84:	f7fa f904 	bl	8014c90 <lwip_htons>
 801aa88:	4603      	mov	r3, r0
 801aa8a:	b2db      	uxtb	r3, r3
 801aa8c:	f003 0301 	and.w	r3, r3, #1
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	d022      	beq.n	801aada <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801aa94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa96:	681b      	ldr	r3, [r3, #0]
 801aa98:	68db      	ldr	r3, [r3, #12]
 801aa9a:	899b      	ldrh	r3, [r3, #12]
 801aa9c:	b29b      	uxth	r3, r3
 801aa9e:	b21b      	sxth	r3, r3
 801aaa0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801aaa4:	b21c      	sxth	r4, r3
 801aaa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	68db      	ldr	r3, [r3, #12]
 801aaac:	899b      	ldrh	r3, [r3, #12]
 801aaae:	b29b      	uxth	r3, r3
 801aab0:	4618      	mov	r0, r3
 801aab2:	f7fa f8ed 	bl	8014c90 <lwip_htons>
 801aab6:	4603      	mov	r3, r0
 801aab8:	b2db      	uxtb	r3, r3
 801aaba:	b29b      	uxth	r3, r3
 801aabc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801aac0:	b29b      	uxth	r3, r3
 801aac2:	4618      	mov	r0, r3
 801aac4:	f7fa f8e4 	bl	8014c90 <lwip_htons>
 801aac8:	4603      	mov	r3, r0
 801aaca:	b21b      	sxth	r3, r3
 801aacc:	4323      	orrs	r3, r4
 801aace:	b21a      	sxth	r2, r3
 801aad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aad2:	681b      	ldr	r3, [r3, #0]
 801aad4:	68db      	ldr	r3, [r3, #12]
 801aad6:	b292      	uxth	r2, r2
 801aad8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aade:	b29a      	uxth	r2, r3
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801aae4:	4413      	add	r3, r2
 801aae6:	b299      	uxth	r1, r3
 801aae8:	4b3c      	ldr	r3, [pc, #240]	; (801abdc <tcp_receive+0xf18>)
 801aaea:	681b      	ldr	r3, [r3, #0]
 801aaec:	b29a      	uxth	r2, r3
 801aaee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aaf0:	681b      	ldr	r3, [r3, #0]
 801aaf2:	1a8a      	subs	r2, r1, r2
 801aaf4:	b292      	uxth	r2, r2
 801aaf6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801aaf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	685a      	ldr	r2, [r3, #4]
 801aafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ab00:	681b      	ldr	r3, [r3, #0]
 801ab02:	891b      	ldrh	r3, [r3, #8]
 801ab04:	4619      	mov	r1, r3
 801ab06:	4610      	mov	r0, r2
 801ab08:	f7fb fb3a 	bl	8016180 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801ab0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ab0e:	681b      	ldr	r3, [r3, #0]
 801ab10:	891c      	ldrh	r4, [r3, #8]
 801ab12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ab14:	681b      	ldr	r3, [r3, #0]
 801ab16:	68db      	ldr	r3, [r3, #12]
 801ab18:	899b      	ldrh	r3, [r3, #12]
 801ab1a:	b29b      	uxth	r3, r3
 801ab1c:	4618      	mov	r0, r3
 801ab1e:	f7fa f8b7 	bl	8014c90 <lwip_htons>
 801ab22:	4603      	mov	r3, r0
 801ab24:	b2db      	uxtb	r3, r3
 801ab26:	f003 0303 	and.w	r3, r3, #3
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	d001      	beq.n	801ab32 <tcp_receive+0xe6e>
 801ab2e:	2301      	movs	r3, #1
 801ab30:	e000      	b.n	801ab34 <tcp_receive+0xe70>
 801ab32:	2300      	movs	r3, #0
 801ab34:	4423      	add	r3, r4
 801ab36:	b29a      	uxth	r2, r3
 801ab38:	4b2a      	ldr	r3, [pc, #168]	; (801abe4 <tcp_receive+0xf20>)
 801ab3a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801ab3c:	4b29      	ldr	r3, [pc, #164]	; (801abe4 <tcp_receive+0xf20>)
 801ab3e:	881b      	ldrh	r3, [r3, #0]
 801ab40:	461a      	mov	r2, r3
 801ab42:	4b26      	ldr	r3, [pc, #152]	; (801abdc <tcp_receive+0xf18>)
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	441a      	add	r2, r3
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab4c:	6879      	ldr	r1, [r7, #4]
 801ab4e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801ab50:	440b      	add	r3, r1
 801ab52:	429a      	cmp	r2, r3
 801ab54:	d019      	beq.n	801ab8a <tcp_receive+0xec6>
 801ab56:	4b24      	ldr	r3, [pc, #144]	; (801abe8 <tcp_receive+0xf24>)
 801ab58:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801ab5c:	4923      	ldr	r1, [pc, #140]	; (801abec <tcp_receive+0xf28>)
 801ab5e:	4824      	ldr	r0, [pc, #144]	; (801abf0 <tcp_receive+0xf2c>)
 801ab60:	f009 fa3a 	bl	8023fd8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801ab64:	e011      	b.n	801ab8a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801ab66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ab68:	681b      	ldr	r3, [r3, #0]
 801ab6a:	63bb      	str	r3, [r7, #56]	; 0x38
 801ab6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	f47f aea4 	bne.w	801a8bc <tcp_receive+0xbf8>
 801ab74:	e00a      	b.n	801ab8c <tcp_receive+0xec8>
                break;
 801ab76:	bf00      	nop
 801ab78:	e008      	b.n	801ab8c <tcp_receive+0xec8>
                break;
 801ab7a:	bf00      	nop
 801ab7c:	e006      	b.n	801ab8c <tcp_receive+0xec8>
                  break;
 801ab7e:	bf00      	nop
 801ab80:	e004      	b.n	801ab8c <tcp_receive+0xec8>
                  break;
 801ab82:	bf00      	nop
 801ab84:	e002      	b.n	801ab8c <tcp_receive+0xec8>
                  break;
 801ab86:	bf00      	nop
 801ab88:	e000      	b.n	801ab8c <tcp_receive+0xec8>
                break;
 801ab8a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801ab8c:	6878      	ldr	r0, [r7, #4]
 801ab8e:	f001 fe8b 	bl	801c8a8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801ab92:	e003      	b.n	801ab9c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801ab94:	6878      	ldr	r0, [r7, #4]
 801ab96:	f001 fe87 	bl	801c8a8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801ab9a:	e01a      	b.n	801abd2 <tcp_receive+0xf0e>
 801ab9c:	e019      	b.n	801abd2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801ab9e:	4b0f      	ldr	r3, [pc, #60]	; (801abdc <tcp_receive+0xf18>)
 801aba0:	681a      	ldr	r2, [r3, #0]
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aba6:	1ad3      	subs	r3, r2, r3
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	db0a      	blt.n	801abc2 <tcp_receive+0xefe>
 801abac:	4b0b      	ldr	r3, [pc, #44]	; (801abdc <tcp_receive+0xf18>)
 801abae:	681a      	ldr	r2, [r3, #0]
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abb4:	6879      	ldr	r1, [r7, #4]
 801abb6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801abb8:	440b      	add	r3, r1
 801abba:	1ad3      	subs	r3, r2, r3
 801abbc:	3301      	adds	r3, #1
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	dd07      	ble.n	801abd2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	8b5b      	ldrh	r3, [r3, #26]
 801abc6:	f043 0302 	orr.w	r3, r3, #2
 801abca:	b29a      	uxth	r2, r3
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801abd0:	e7ff      	b.n	801abd2 <tcp_receive+0xf0e>
 801abd2:	bf00      	nop
 801abd4:	3750      	adds	r7, #80	; 0x50
 801abd6:	46bd      	mov	sp, r7
 801abd8:	bdb0      	pop	{r4, r5, r7, pc}
 801abda:	bf00      	nop
 801abdc:	20013268 	.word	0x20013268
 801abe0:	20013248 	.word	0x20013248
 801abe4:	20013272 	.word	0x20013272
 801abe8:	08029184 	.word	0x08029184
 801abec:	0802952c 	.word	0x0802952c
 801abf0:	080291d0 	.word	0x080291d0

0801abf4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801abf4:	b480      	push	{r7}
 801abf6:	b083      	sub	sp, #12
 801abf8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801abfa:	4b15      	ldr	r3, [pc, #84]	; (801ac50 <tcp_get_next_optbyte+0x5c>)
 801abfc:	881b      	ldrh	r3, [r3, #0]
 801abfe:	1c5a      	adds	r2, r3, #1
 801ac00:	b291      	uxth	r1, r2
 801ac02:	4a13      	ldr	r2, [pc, #76]	; (801ac50 <tcp_get_next_optbyte+0x5c>)
 801ac04:	8011      	strh	r1, [r2, #0]
 801ac06:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ac08:	4b12      	ldr	r3, [pc, #72]	; (801ac54 <tcp_get_next_optbyte+0x60>)
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	d004      	beq.n	801ac1a <tcp_get_next_optbyte+0x26>
 801ac10:	4b11      	ldr	r3, [pc, #68]	; (801ac58 <tcp_get_next_optbyte+0x64>)
 801ac12:	881b      	ldrh	r3, [r3, #0]
 801ac14:	88fa      	ldrh	r2, [r7, #6]
 801ac16:	429a      	cmp	r2, r3
 801ac18:	d208      	bcs.n	801ac2c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801ac1a:	4b10      	ldr	r3, [pc, #64]	; (801ac5c <tcp_get_next_optbyte+0x68>)
 801ac1c:	681b      	ldr	r3, [r3, #0]
 801ac1e:	3314      	adds	r3, #20
 801ac20:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801ac22:	88fb      	ldrh	r3, [r7, #6]
 801ac24:	683a      	ldr	r2, [r7, #0]
 801ac26:	4413      	add	r3, r2
 801ac28:	781b      	ldrb	r3, [r3, #0]
 801ac2a:	e00b      	b.n	801ac44 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801ac2c:	88fb      	ldrh	r3, [r7, #6]
 801ac2e:	b2da      	uxtb	r2, r3
 801ac30:	4b09      	ldr	r3, [pc, #36]	; (801ac58 <tcp_get_next_optbyte+0x64>)
 801ac32:	881b      	ldrh	r3, [r3, #0]
 801ac34:	b2db      	uxtb	r3, r3
 801ac36:	1ad3      	subs	r3, r2, r3
 801ac38:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801ac3a:	4b06      	ldr	r3, [pc, #24]	; (801ac54 <tcp_get_next_optbyte+0x60>)
 801ac3c:	681a      	ldr	r2, [r3, #0]
 801ac3e:	797b      	ldrb	r3, [r7, #5]
 801ac40:	4413      	add	r3, r2
 801ac42:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ac44:	4618      	mov	r0, r3
 801ac46:	370c      	adds	r7, #12
 801ac48:	46bd      	mov	sp, r7
 801ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac4e:	4770      	bx	lr
 801ac50:	20013264 	.word	0x20013264
 801ac54:	20013260 	.word	0x20013260
 801ac58:	2001325e 	.word	0x2001325e
 801ac5c:	20013258 	.word	0x20013258

0801ac60 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801ac60:	b580      	push	{r7, lr}
 801ac62:	b084      	sub	sp, #16
 801ac64:	af00      	add	r7, sp, #0
 801ac66:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801ac68:	687b      	ldr	r3, [r7, #4]
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	d106      	bne.n	801ac7c <tcp_parseopt+0x1c>
 801ac6e:	4b32      	ldr	r3, [pc, #200]	; (801ad38 <tcp_parseopt+0xd8>)
 801ac70:	f240 727d 	movw	r2, #1917	; 0x77d
 801ac74:	4931      	ldr	r1, [pc, #196]	; (801ad3c <tcp_parseopt+0xdc>)
 801ac76:	4832      	ldr	r0, [pc, #200]	; (801ad40 <tcp_parseopt+0xe0>)
 801ac78:	f009 f9ae 	bl	8023fd8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801ac7c:	4b31      	ldr	r3, [pc, #196]	; (801ad44 <tcp_parseopt+0xe4>)
 801ac7e:	881b      	ldrh	r3, [r3, #0]
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	d055      	beq.n	801ad30 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ac84:	4b30      	ldr	r3, [pc, #192]	; (801ad48 <tcp_parseopt+0xe8>)
 801ac86:	2200      	movs	r2, #0
 801ac88:	801a      	strh	r2, [r3, #0]
 801ac8a:	e045      	b.n	801ad18 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801ac8c:	f7ff ffb2 	bl	801abf4 <tcp_get_next_optbyte>
 801ac90:	4603      	mov	r3, r0
 801ac92:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801ac94:	7bfb      	ldrb	r3, [r7, #15]
 801ac96:	2b02      	cmp	r3, #2
 801ac98:	d006      	beq.n	801aca8 <tcp_parseopt+0x48>
 801ac9a:	2b02      	cmp	r3, #2
 801ac9c:	dc2b      	bgt.n	801acf6 <tcp_parseopt+0x96>
 801ac9e:	2b00      	cmp	r3, #0
 801aca0:	d041      	beq.n	801ad26 <tcp_parseopt+0xc6>
 801aca2:	2b01      	cmp	r3, #1
 801aca4:	d127      	bne.n	801acf6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801aca6:	e037      	b.n	801ad18 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801aca8:	f7ff ffa4 	bl	801abf4 <tcp_get_next_optbyte>
 801acac:	4603      	mov	r3, r0
 801acae:	2b04      	cmp	r3, #4
 801acb0:	d13b      	bne.n	801ad2a <tcp_parseopt+0xca>
 801acb2:	4b25      	ldr	r3, [pc, #148]	; (801ad48 <tcp_parseopt+0xe8>)
 801acb4:	881b      	ldrh	r3, [r3, #0]
 801acb6:	3301      	adds	r3, #1
 801acb8:	4a22      	ldr	r2, [pc, #136]	; (801ad44 <tcp_parseopt+0xe4>)
 801acba:	8812      	ldrh	r2, [r2, #0]
 801acbc:	4293      	cmp	r3, r2
 801acbe:	da34      	bge.n	801ad2a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801acc0:	f7ff ff98 	bl	801abf4 <tcp_get_next_optbyte>
 801acc4:	4603      	mov	r3, r0
 801acc6:	b29b      	uxth	r3, r3
 801acc8:	021b      	lsls	r3, r3, #8
 801acca:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801accc:	f7ff ff92 	bl	801abf4 <tcp_get_next_optbyte>
 801acd0:	4603      	mov	r3, r0
 801acd2:	b29a      	uxth	r2, r3
 801acd4:	89bb      	ldrh	r3, [r7, #12]
 801acd6:	4313      	orrs	r3, r2
 801acd8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801acda:	89bb      	ldrh	r3, [r7, #12]
 801acdc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801ace0:	d804      	bhi.n	801acec <tcp_parseopt+0x8c>
 801ace2:	89bb      	ldrh	r3, [r7, #12]
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	d001      	beq.n	801acec <tcp_parseopt+0x8c>
 801ace8:	89ba      	ldrh	r2, [r7, #12]
 801acea:	e001      	b.n	801acf0 <tcp_parseopt+0x90>
 801acec:	f44f 7206 	mov.w	r2, #536	; 0x218
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801acf4:	e010      	b.n	801ad18 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801acf6:	f7ff ff7d 	bl	801abf4 <tcp_get_next_optbyte>
 801acfa:	4603      	mov	r3, r0
 801acfc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801acfe:	7afb      	ldrb	r3, [r7, #11]
 801ad00:	2b01      	cmp	r3, #1
 801ad02:	d914      	bls.n	801ad2e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801ad04:	7afb      	ldrb	r3, [r7, #11]
 801ad06:	b29a      	uxth	r2, r3
 801ad08:	4b0f      	ldr	r3, [pc, #60]	; (801ad48 <tcp_parseopt+0xe8>)
 801ad0a:	881b      	ldrh	r3, [r3, #0]
 801ad0c:	4413      	add	r3, r2
 801ad0e:	b29b      	uxth	r3, r3
 801ad10:	3b02      	subs	r3, #2
 801ad12:	b29a      	uxth	r2, r3
 801ad14:	4b0c      	ldr	r3, [pc, #48]	; (801ad48 <tcp_parseopt+0xe8>)
 801ad16:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ad18:	4b0b      	ldr	r3, [pc, #44]	; (801ad48 <tcp_parseopt+0xe8>)
 801ad1a:	881a      	ldrh	r2, [r3, #0]
 801ad1c:	4b09      	ldr	r3, [pc, #36]	; (801ad44 <tcp_parseopt+0xe4>)
 801ad1e:	881b      	ldrh	r3, [r3, #0]
 801ad20:	429a      	cmp	r2, r3
 801ad22:	d3b3      	bcc.n	801ac8c <tcp_parseopt+0x2c>
 801ad24:	e004      	b.n	801ad30 <tcp_parseopt+0xd0>
          return;
 801ad26:	bf00      	nop
 801ad28:	e002      	b.n	801ad30 <tcp_parseopt+0xd0>
            return;
 801ad2a:	bf00      	nop
 801ad2c:	e000      	b.n	801ad30 <tcp_parseopt+0xd0>
            return;
 801ad2e:	bf00      	nop
      }
    }
  }
}
 801ad30:	3710      	adds	r7, #16
 801ad32:	46bd      	mov	sp, r7
 801ad34:	bd80      	pop	{r7, pc}
 801ad36:	bf00      	nop
 801ad38:	08029184 	.word	0x08029184
 801ad3c:	080295e8 	.word	0x080295e8
 801ad40:	080291d0 	.word	0x080291d0
 801ad44:	2001325c 	.word	0x2001325c
 801ad48:	20013264 	.word	0x20013264

0801ad4c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801ad4c:	b480      	push	{r7}
 801ad4e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801ad50:	4b05      	ldr	r3, [pc, #20]	; (801ad68 <tcp_trigger_input_pcb_close+0x1c>)
 801ad52:	781b      	ldrb	r3, [r3, #0]
 801ad54:	f043 0310 	orr.w	r3, r3, #16
 801ad58:	b2da      	uxtb	r2, r3
 801ad5a:	4b03      	ldr	r3, [pc, #12]	; (801ad68 <tcp_trigger_input_pcb_close+0x1c>)
 801ad5c:	701a      	strb	r2, [r3, #0]
}
 801ad5e:	bf00      	nop
 801ad60:	46bd      	mov	sp, r7
 801ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad66:	4770      	bx	lr
 801ad68:	20013275 	.word	0x20013275

0801ad6c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801ad6c:	b580      	push	{r7, lr}
 801ad6e:	b084      	sub	sp, #16
 801ad70:	af00      	add	r7, sp, #0
 801ad72:	60f8      	str	r0, [r7, #12]
 801ad74:	60b9      	str	r1, [r7, #8]
 801ad76:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801ad78:	68fb      	ldr	r3, [r7, #12]
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	d00a      	beq.n	801ad94 <tcp_route+0x28>
 801ad7e:	68fb      	ldr	r3, [r7, #12]
 801ad80:	7a1b      	ldrb	r3, [r3, #8]
 801ad82:	2b00      	cmp	r3, #0
 801ad84:	d006      	beq.n	801ad94 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801ad86:	68fb      	ldr	r3, [r7, #12]
 801ad88:	7a1b      	ldrb	r3, [r3, #8]
 801ad8a:	4618      	mov	r0, r3
 801ad8c:	f7fa fff0 	bl	8015d70 <netif_get_by_index>
 801ad90:	4603      	mov	r3, r0
 801ad92:	e003      	b.n	801ad9c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801ad94:	6878      	ldr	r0, [r7, #4]
 801ad96:	f005 fcc1 	bl	802071c <ip4_route>
 801ad9a:	4603      	mov	r3, r0
  }
}
 801ad9c:	4618      	mov	r0, r3
 801ad9e:	3710      	adds	r7, #16
 801ada0:	46bd      	mov	sp, r7
 801ada2:	bd80      	pop	{r7, pc}

0801ada4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801ada4:	b590      	push	{r4, r7, lr}
 801ada6:	b087      	sub	sp, #28
 801ada8:	af00      	add	r7, sp, #0
 801adaa:	60f8      	str	r0, [r7, #12]
 801adac:	60b9      	str	r1, [r7, #8]
 801adae:	603b      	str	r3, [r7, #0]
 801adb0:	4613      	mov	r3, r2
 801adb2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801adb4:	68fb      	ldr	r3, [r7, #12]
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	d105      	bne.n	801adc6 <tcp_create_segment+0x22>
 801adba:	4b44      	ldr	r3, [pc, #272]	; (801aecc <tcp_create_segment+0x128>)
 801adbc:	22a3      	movs	r2, #163	; 0xa3
 801adbe:	4944      	ldr	r1, [pc, #272]	; (801aed0 <tcp_create_segment+0x12c>)
 801adc0:	4844      	ldr	r0, [pc, #272]	; (801aed4 <tcp_create_segment+0x130>)
 801adc2:	f009 f909 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801adc6:	68bb      	ldr	r3, [r7, #8]
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d105      	bne.n	801add8 <tcp_create_segment+0x34>
 801adcc:	4b3f      	ldr	r3, [pc, #252]	; (801aecc <tcp_create_segment+0x128>)
 801adce:	22a4      	movs	r2, #164	; 0xa4
 801add0:	4941      	ldr	r1, [pc, #260]	; (801aed8 <tcp_create_segment+0x134>)
 801add2:	4840      	ldr	r0, [pc, #256]	; (801aed4 <tcp_create_segment+0x130>)
 801add4:	f009 f900 	bl	8023fd8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801add8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801addc:	009b      	lsls	r3, r3, #2
 801adde:	b2db      	uxtb	r3, r3
 801ade0:	f003 0304 	and.w	r3, r3, #4
 801ade4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801ade6:	2003      	movs	r0, #3
 801ade8:	f7fa fc2a 	bl	8015640 <memp_malloc>
 801adec:	6138      	str	r0, [r7, #16]
 801adee:	693b      	ldr	r3, [r7, #16]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d104      	bne.n	801adfe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801adf4:	68b8      	ldr	r0, [r7, #8]
 801adf6:	f7fb fb49 	bl	801648c <pbuf_free>
    return NULL;
 801adfa:	2300      	movs	r3, #0
 801adfc:	e061      	b.n	801aec2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801adfe:	693b      	ldr	r3, [r7, #16]
 801ae00:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801ae04:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801ae06:	693b      	ldr	r3, [r7, #16]
 801ae08:	2200      	movs	r2, #0
 801ae0a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801ae0c:	693b      	ldr	r3, [r7, #16]
 801ae0e:	68ba      	ldr	r2, [r7, #8]
 801ae10:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801ae12:	68bb      	ldr	r3, [r7, #8]
 801ae14:	891a      	ldrh	r2, [r3, #8]
 801ae16:	7dfb      	ldrb	r3, [r7, #23]
 801ae18:	b29b      	uxth	r3, r3
 801ae1a:	429a      	cmp	r2, r3
 801ae1c:	d205      	bcs.n	801ae2a <tcp_create_segment+0x86>
 801ae1e:	4b2b      	ldr	r3, [pc, #172]	; (801aecc <tcp_create_segment+0x128>)
 801ae20:	22b0      	movs	r2, #176	; 0xb0
 801ae22:	492e      	ldr	r1, [pc, #184]	; (801aedc <tcp_create_segment+0x138>)
 801ae24:	482b      	ldr	r0, [pc, #172]	; (801aed4 <tcp_create_segment+0x130>)
 801ae26:	f009 f8d7 	bl	8023fd8 <iprintf>
  seg->len = p->tot_len - optlen;
 801ae2a:	68bb      	ldr	r3, [r7, #8]
 801ae2c:	891a      	ldrh	r2, [r3, #8]
 801ae2e:	7dfb      	ldrb	r3, [r7, #23]
 801ae30:	b29b      	uxth	r3, r3
 801ae32:	1ad3      	subs	r3, r2, r3
 801ae34:	b29a      	uxth	r2, r3
 801ae36:	693b      	ldr	r3, [r7, #16]
 801ae38:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801ae3a:	2114      	movs	r1, #20
 801ae3c:	68b8      	ldr	r0, [r7, #8]
 801ae3e:	f7fb fa8f 	bl	8016360 <pbuf_add_header>
 801ae42:	4603      	mov	r3, r0
 801ae44:	2b00      	cmp	r3, #0
 801ae46:	d004      	beq.n	801ae52 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801ae48:	6938      	ldr	r0, [r7, #16]
 801ae4a:	f7fc ffe8 	bl	8017e1e <tcp_seg_free>
    return NULL;
 801ae4e:	2300      	movs	r3, #0
 801ae50:	e037      	b.n	801aec2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801ae52:	693b      	ldr	r3, [r7, #16]
 801ae54:	685b      	ldr	r3, [r3, #4]
 801ae56:	685a      	ldr	r2, [r3, #4]
 801ae58:	693b      	ldr	r3, [r7, #16]
 801ae5a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801ae5c:	68fb      	ldr	r3, [r7, #12]
 801ae5e:	8ada      	ldrh	r2, [r3, #22]
 801ae60:	693b      	ldr	r3, [r7, #16]
 801ae62:	68dc      	ldr	r4, [r3, #12]
 801ae64:	4610      	mov	r0, r2
 801ae66:	f7f9 ff13 	bl	8014c90 <lwip_htons>
 801ae6a:	4603      	mov	r3, r0
 801ae6c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801ae6e:	68fb      	ldr	r3, [r7, #12]
 801ae70:	8b1a      	ldrh	r2, [r3, #24]
 801ae72:	693b      	ldr	r3, [r7, #16]
 801ae74:	68dc      	ldr	r4, [r3, #12]
 801ae76:	4610      	mov	r0, r2
 801ae78:	f7f9 ff0a 	bl	8014c90 <lwip_htons>
 801ae7c:	4603      	mov	r3, r0
 801ae7e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801ae80:	693b      	ldr	r3, [r7, #16]
 801ae82:	68dc      	ldr	r4, [r3, #12]
 801ae84:	6838      	ldr	r0, [r7, #0]
 801ae86:	f7f9 ff18 	bl	8014cba <lwip_htonl>
 801ae8a:	4603      	mov	r3, r0
 801ae8c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801ae8e:	7dfb      	ldrb	r3, [r7, #23]
 801ae90:	089b      	lsrs	r3, r3, #2
 801ae92:	b2db      	uxtb	r3, r3
 801ae94:	b29b      	uxth	r3, r3
 801ae96:	3305      	adds	r3, #5
 801ae98:	b29b      	uxth	r3, r3
 801ae9a:	031b      	lsls	r3, r3, #12
 801ae9c:	b29a      	uxth	r2, r3
 801ae9e:	79fb      	ldrb	r3, [r7, #7]
 801aea0:	b29b      	uxth	r3, r3
 801aea2:	4313      	orrs	r3, r2
 801aea4:	b29a      	uxth	r2, r3
 801aea6:	693b      	ldr	r3, [r7, #16]
 801aea8:	68dc      	ldr	r4, [r3, #12]
 801aeaa:	4610      	mov	r0, r2
 801aeac:	f7f9 fef0 	bl	8014c90 <lwip_htons>
 801aeb0:	4603      	mov	r3, r0
 801aeb2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801aeb4:	693b      	ldr	r3, [r7, #16]
 801aeb6:	68db      	ldr	r3, [r3, #12]
 801aeb8:	2200      	movs	r2, #0
 801aeba:	749a      	strb	r2, [r3, #18]
 801aebc:	2200      	movs	r2, #0
 801aebe:	74da      	strb	r2, [r3, #19]
  return seg;
 801aec0:	693b      	ldr	r3, [r7, #16]
}
 801aec2:	4618      	mov	r0, r3
 801aec4:	371c      	adds	r7, #28
 801aec6:	46bd      	mov	sp, r7
 801aec8:	bd90      	pop	{r4, r7, pc}
 801aeca:	bf00      	nop
 801aecc:	08029604 	.word	0x08029604
 801aed0:	08029638 	.word	0x08029638
 801aed4:	08029658 	.word	0x08029658
 801aed8:	08029680 	.word	0x08029680
 801aedc:	080296a4 	.word	0x080296a4

0801aee0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801aee0:	b580      	push	{r7, lr}
 801aee2:	b086      	sub	sp, #24
 801aee4:	af00      	add	r7, sp, #0
 801aee6:	607b      	str	r3, [r7, #4]
 801aee8:	4603      	mov	r3, r0
 801aeea:	73fb      	strb	r3, [r7, #15]
 801aeec:	460b      	mov	r3, r1
 801aeee:	81bb      	strh	r3, [r7, #12]
 801aef0:	4613      	mov	r3, r2
 801aef2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801aef4:	89bb      	ldrh	r3, [r7, #12]
 801aef6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801aef8:	687b      	ldr	r3, [r7, #4]
 801aefa:	2b00      	cmp	r3, #0
 801aefc:	d105      	bne.n	801af0a <tcp_pbuf_prealloc+0x2a>
 801aefe:	4b30      	ldr	r3, [pc, #192]	; (801afc0 <tcp_pbuf_prealloc+0xe0>)
 801af00:	22e8      	movs	r2, #232	; 0xe8
 801af02:	4930      	ldr	r1, [pc, #192]	; (801afc4 <tcp_pbuf_prealloc+0xe4>)
 801af04:	4830      	ldr	r0, [pc, #192]	; (801afc8 <tcp_pbuf_prealloc+0xe8>)
 801af06:	f009 f867 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801af0a:	6a3b      	ldr	r3, [r7, #32]
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	d105      	bne.n	801af1c <tcp_pbuf_prealloc+0x3c>
 801af10:	4b2b      	ldr	r3, [pc, #172]	; (801afc0 <tcp_pbuf_prealloc+0xe0>)
 801af12:	22e9      	movs	r2, #233	; 0xe9
 801af14:	492d      	ldr	r1, [pc, #180]	; (801afcc <tcp_pbuf_prealloc+0xec>)
 801af16:	482c      	ldr	r0, [pc, #176]	; (801afc8 <tcp_pbuf_prealloc+0xe8>)
 801af18:	f009 f85e 	bl	8023fd8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801af1c:	89ba      	ldrh	r2, [r7, #12]
 801af1e:	897b      	ldrh	r3, [r7, #10]
 801af20:	429a      	cmp	r2, r3
 801af22:	d221      	bcs.n	801af68 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801af24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801af28:	f003 0302 	and.w	r3, r3, #2
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d111      	bne.n	801af54 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801af30:	6a3b      	ldr	r3, [r7, #32]
 801af32:	8b5b      	ldrh	r3, [r3, #26]
 801af34:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801af38:	2b00      	cmp	r3, #0
 801af3a:	d115      	bne.n	801af68 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801af3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801af40:	2b00      	cmp	r3, #0
 801af42:	d007      	beq.n	801af54 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801af44:	6a3b      	ldr	r3, [r7, #32]
 801af46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801af48:	2b00      	cmp	r3, #0
 801af4a:	d103      	bne.n	801af54 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801af4c:	6a3b      	ldr	r3, [r7, #32]
 801af4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801af50:	2b00      	cmp	r3, #0
 801af52:	d009      	beq.n	801af68 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801af54:	89bb      	ldrh	r3, [r7, #12]
 801af56:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801af5a:	f023 0203 	bic.w	r2, r3, #3
 801af5e:	897b      	ldrh	r3, [r7, #10]
 801af60:	4293      	cmp	r3, r2
 801af62:	bf28      	it	cs
 801af64:	4613      	movcs	r3, r2
 801af66:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801af68:	8af9      	ldrh	r1, [r7, #22]
 801af6a:	7bfb      	ldrb	r3, [r7, #15]
 801af6c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801af70:	4618      	mov	r0, r3
 801af72:	f7fa ffa7 	bl	8015ec4 <pbuf_alloc>
 801af76:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801af78:	693b      	ldr	r3, [r7, #16]
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	d101      	bne.n	801af82 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801af7e:	2300      	movs	r3, #0
 801af80:	e019      	b.n	801afb6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801af82:	693b      	ldr	r3, [r7, #16]
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	2b00      	cmp	r3, #0
 801af88:	d006      	beq.n	801af98 <tcp_pbuf_prealloc+0xb8>
 801af8a:	4b0d      	ldr	r3, [pc, #52]	; (801afc0 <tcp_pbuf_prealloc+0xe0>)
 801af8c:	f240 120b 	movw	r2, #267	; 0x10b
 801af90:	490f      	ldr	r1, [pc, #60]	; (801afd0 <tcp_pbuf_prealloc+0xf0>)
 801af92:	480d      	ldr	r0, [pc, #52]	; (801afc8 <tcp_pbuf_prealloc+0xe8>)
 801af94:	f009 f820 	bl	8023fd8 <iprintf>
  *oversize = p->len - length;
 801af98:	693b      	ldr	r3, [r7, #16]
 801af9a:	895a      	ldrh	r2, [r3, #10]
 801af9c:	89bb      	ldrh	r3, [r7, #12]
 801af9e:	1ad3      	subs	r3, r2, r3
 801afa0:	b29a      	uxth	r2, r3
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801afa6:	693b      	ldr	r3, [r7, #16]
 801afa8:	89ba      	ldrh	r2, [r7, #12]
 801afaa:	811a      	strh	r2, [r3, #8]
 801afac:	693b      	ldr	r3, [r7, #16]
 801afae:	891a      	ldrh	r2, [r3, #8]
 801afb0:	693b      	ldr	r3, [r7, #16]
 801afb2:	815a      	strh	r2, [r3, #10]
  return p;
 801afb4:	693b      	ldr	r3, [r7, #16]
}
 801afb6:	4618      	mov	r0, r3
 801afb8:	3718      	adds	r7, #24
 801afba:	46bd      	mov	sp, r7
 801afbc:	bd80      	pop	{r7, pc}
 801afbe:	bf00      	nop
 801afc0:	08029604 	.word	0x08029604
 801afc4:	080296bc 	.word	0x080296bc
 801afc8:	08029658 	.word	0x08029658
 801afcc:	080296e0 	.word	0x080296e0
 801afd0:	08029700 	.word	0x08029700

0801afd4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801afd4:	b580      	push	{r7, lr}
 801afd6:	b082      	sub	sp, #8
 801afd8:	af00      	add	r7, sp, #0
 801afda:	6078      	str	r0, [r7, #4]
 801afdc:	460b      	mov	r3, r1
 801afde:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	2b00      	cmp	r3, #0
 801afe4:	d106      	bne.n	801aff4 <tcp_write_checks+0x20>
 801afe6:	4b33      	ldr	r3, [pc, #204]	; (801b0b4 <tcp_write_checks+0xe0>)
 801afe8:	f240 1233 	movw	r2, #307	; 0x133
 801afec:	4932      	ldr	r1, [pc, #200]	; (801b0b8 <tcp_write_checks+0xe4>)
 801afee:	4833      	ldr	r0, [pc, #204]	; (801b0bc <tcp_write_checks+0xe8>)
 801aff0:	f008 fff2 	bl	8023fd8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	7d1b      	ldrb	r3, [r3, #20]
 801aff8:	2b04      	cmp	r3, #4
 801affa:	d00e      	beq.n	801b01a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801b000:	2b07      	cmp	r3, #7
 801b002:	d00a      	beq.n	801b01a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801b008:	2b02      	cmp	r3, #2
 801b00a:	d006      	beq.n	801b01a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801b010:	2b03      	cmp	r3, #3
 801b012:	d002      	beq.n	801b01a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801b014:	f06f 030a 	mvn.w	r3, #10
 801b018:	e048      	b.n	801b0ac <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801b01a:	887b      	ldrh	r3, [r7, #2]
 801b01c:	2b00      	cmp	r3, #0
 801b01e:	d101      	bne.n	801b024 <tcp_write_checks+0x50>
    return ERR_OK;
 801b020:	2300      	movs	r3, #0
 801b022:	e043      	b.n	801b0ac <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801b02a:	887a      	ldrh	r2, [r7, #2]
 801b02c:	429a      	cmp	r2, r3
 801b02e:	d909      	bls.n	801b044 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	8b5b      	ldrh	r3, [r3, #26]
 801b034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b038:	b29a      	uxth	r2, r3
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801b03e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b042:	e033      	b.n	801b0ac <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b04a:	2b08      	cmp	r3, #8
 801b04c:	d909      	bls.n	801b062 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	8b5b      	ldrh	r3, [r3, #26]
 801b052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b056:	b29a      	uxth	r2, r3
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801b05c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b060:	e024      	b.n	801b0ac <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801b062:	687b      	ldr	r3, [r7, #4]
 801b064:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b068:	2b00      	cmp	r3, #0
 801b06a:	d00f      	beq.n	801b08c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801b06c:	687b      	ldr	r3, [r7, #4]
 801b06e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b070:	2b00      	cmp	r3, #0
 801b072:	d11a      	bne.n	801b0aa <tcp_write_checks+0xd6>
 801b074:	687b      	ldr	r3, [r7, #4]
 801b076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b078:	2b00      	cmp	r3, #0
 801b07a:	d116      	bne.n	801b0aa <tcp_write_checks+0xd6>
 801b07c:	4b0d      	ldr	r3, [pc, #52]	; (801b0b4 <tcp_write_checks+0xe0>)
 801b07e:	f240 1255 	movw	r2, #341	; 0x155
 801b082:	490f      	ldr	r1, [pc, #60]	; (801b0c0 <tcp_write_checks+0xec>)
 801b084:	480d      	ldr	r0, [pc, #52]	; (801b0bc <tcp_write_checks+0xe8>)
 801b086:	f008 ffa7 	bl	8023fd8 <iprintf>
 801b08a:	e00e      	b.n	801b0aa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b090:	2b00      	cmp	r3, #0
 801b092:	d103      	bne.n	801b09c <tcp_write_checks+0xc8>
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d006      	beq.n	801b0aa <tcp_write_checks+0xd6>
 801b09c:	4b05      	ldr	r3, [pc, #20]	; (801b0b4 <tcp_write_checks+0xe0>)
 801b09e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801b0a2:	4908      	ldr	r1, [pc, #32]	; (801b0c4 <tcp_write_checks+0xf0>)
 801b0a4:	4805      	ldr	r0, [pc, #20]	; (801b0bc <tcp_write_checks+0xe8>)
 801b0a6:	f008 ff97 	bl	8023fd8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801b0aa:	2300      	movs	r3, #0
}
 801b0ac:	4618      	mov	r0, r3
 801b0ae:	3708      	adds	r7, #8
 801b0b0:	46bd      	mov	sp, r7
 801b0b2:	bd80      	pop	{r7, pc}
 801b0b4:	08029604 	.word	0x08029604
 801b0b8:	08029714 	.word	0x08029714
 801b0bc:	08029658 	.word	0x08029658
 801b0c0:	08029734 	.word	0x08029734
 801b0c4:	08029770 	.word	0x08029770

0801b0c8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801b0c8:	b590      	push	{r4, r7, lr}
 801b0ca:	b09b      	sub	sp, #108	; 0x6c
 801b0cc:	af04      	add	r7, sp, #16
 801b0ce:	60f8      	str	r0, [r7, #12]
 801b0d0:	60b9      	str	r1, [r7, #8]
 801b0d2:	4611      	mov	r1, r2
 801b0d4:	461a      	mov	r2, r3
 801b0d6:	460b      	mov	r3, r1
 801b0d8:	80fb      	strh	r3, [r7, #6]
 801b0da:	4613      	mov	r3, r2
 801b0dc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801b0de:	2300      	movs	r3, #0
 801b0e0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801b0e2:	2300      	movs	r3, #0
 801b0e4:	653b      	str	r3, [r7, #80]	; 0x50
 801b0e6:	2300      	movs	r3, #0
 801b0e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b0ea:	2300      	movs	r3, #0
 801b0ec:	64bb      	str	r3, [r7, #72]	; 0x48
 801b0ee:	2300      	movs	r3, #0
 801b0f0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801b0f2:	2300      	movs	r3, #0
 801b0f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801b0f8:	2300      	movs	r3, #0
 801b0fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801b0fe:	2300      	movs	r3, #0
 801b100:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801b102:	2300      	movs	r3, #0
 801b104:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801b106:	2300      	movs	r3, #0
 801b108:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801b10a:	68fb      	ldr	r3, [r7, #12]
 801b10c:	2b00      	cmp	r3, #0
 801b10e:	d109      	bne.n	801b124 <tcp_write+0x5c>
 801b110:	4ba4      	ldr	r3, [pc, #656]	; (801b3a4 <tcp_write+0x2dc>)
 801b112:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801b116:	49a4      	ldr	r1, [pc, #656]	; (801b3a8 <tcp_write+0x2e0>)
 801b118:	48a4      	ldr	r0, [pc, #656]	; (801b3ac <tcp_write+0x2e4>)
 801b11a:	f008 ff5d 	bl	8023fd8 <iprintf>
 801b11e:	f06f 030f 	mvn.w	r3, #15
 801b122:	e32a      	b.n	801b77a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801b124:	68fb      	ldr	r3, [r7, #12]
 801b126:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801b12a:	085b      	lsrs	r3, r3, #1
 801b12c:	b29a      	uxth	r2, r3
 801b12e:	68fb      	ldr	r3, [r7, #12]
 801b130:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b132:	4293      	cmp	r3, r2
 801b134:	bf28      	it	cs
 801b136:	4613      	movcs	r3, r2
 801b138:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801b13a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	d102      	bne.n	801b146 <tcp_write+0x7e>
 801b140:	68fb      	ldr	r3, [r7, #12]
 801b142:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b144:	e000      	b.n	801b148 <tcp_write+0x80>
 801b146:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b148:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801b14a:	68bb      	ldr	r3, [r7, #8]
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	d109      	bne.n	801b164 <tcp_write+0x9c>
 801b150:	4b94      	ldr	r3, [pc, #592]	; (801b3a4 <tcp_write+0x2dc>)
 801b152:	f240 12ad 	movw	r2, #429	; 0x1ad
 801b156:	4996      	ldr	r1, [pc, #600]	; (801b3b0 <tcp_write+0x2e8>)
 801b158:	4894      	ldr	r0, [pc, #592]	; (801b3ac <tcp_write+0x2e4>)
 801b15a:	f008 ff3d 	bl	8023fd8 <iprintf>
 801b15e:	f06f 030f 	mvn.w	r3, #15
 801b162:	e30a      	b.n	801b77a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801b164:	88fb      	ldrh	r3, [r7, #6]
 801b166:	4619      	mov	r1, r3
 801b168:	68f8      	ldr	r0, [r7, #12]
 801b16a:	f7ff ff33 	bl	801afd4 <tcp_write_checks>
 801b16e:	4603      	mov	r3, r0
 801b170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801b174:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801b178:	2b00      	cmp	r3, #0
 801b17a:	d002      	beq.n	801b182 <tcp_write+0xba>
    return err;
 801b17c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801b180:	e2fb      	b.n	801b77a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801b182:	68fb      	ldr	r3, [r7, #12]
 801b184:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b188:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b18c:	2300      	movs	r3, #0
 801b18e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801b192:	68fb      	ldr	r3, [r7, #12]
 801b194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b196:	2b00      	cmp	r3, #0
 801b198:	f000 80f6 	beq.w	801b388 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b19c:	68fb      	ldr	r3, [r7, #12]
 801b19e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b1a0:	653b      	str	r3, [r7, #80]	; 0x50
 801b1a2:	e002      	b.n	801b1aa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801b1a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b1a6:	681b      	ldr	r3, [r3, #0]
 801b1a8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b1aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	d1f8      	bne.n	801b1a4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801b1b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b1b4:	7a9b      	ldrb	r3, [r3, #10]
 801b1b6:	009b      	lsls	r3, r3, #2
 801b1b8:	b29b      	uxth	r3, r3
 801b1ba:	f003 0304 	and.w	r3, r3, #4
 801b1be:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801b1c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b1c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b1c4:	891b      	ldrh	r3, [r3, #8]
 801b1c6:	4619      	mov	r1, r3
 801b1c8:	8c3b      	ldrh	r3, [r7, #32]
 801b1ca:	440b      	add	r3, r1
 801b1cc:	429a      	cmp	r2, r3
 801b1ce:	da06      	bge.n	801b1de <tcp_write+0x116>
 801b1d0:	4b74      	ldr	r3, [pc, #464]	; (801b3a4 <tcp_write+0x2dc>)
 801b1d2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801b1d6:	4977      	ldr	r1, [pc, #476]	; (801b3b4 <tcp_write+0x2ec>)
 801b1d8:	4874      	ldr	r0, [pc, #464]	; (801b3ac <tcp_write+0x2e4>)
 801b1da:	f008 fefd 	bl	8023fd8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801b1de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b1e0:	891a      	ldrh	r2, [r3, #8]
 801b1e2:	8c3b      	ldrh	r3, [r7, #32]
 801b1e4:	4413      	add	r3, r2
 801b1e6:	b29b      	uxth	r3, r3
 801b1e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b1ea:	1ad3      	subs	r3, r2, r3
 801b1ec:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801b1ee:	68fb      	ldr	r3, [r7, #12]
 801b1f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801b1f4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801b1f6:	8a7b      	ldrh	r3, [r7, #18]
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d026      	beq.n	801b24a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801b1fc:	8a7b      	ldrh	r3, [r7, #18]
 801b1fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b200:	429a      	cmp	r2, r3
 801b202:	d206      	bcs.n	801b212 <tcp_write+0x14a>
 801b204:	4b67      	ldr	r3, [pc, #412]	; (801b3a4 <tcp_write+0x2dc>)
 801b206:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801b20a:	496b      	ldr	r1, [pc, #428]	; (801b3b8 <tcp_write+0x2f0>)
 801b20c:	4867      	ldr	r0, [pc, #412]	; (801b3ac <tcp_write+0x2e4>)
 801b20e:	f008 fee3 	bl	8023fd8 <iprintf>
      seg = last_unsent;
 801b212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b214:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801b216:	8a7b      	ldrh	r3, [r7, #18]
 801b218:	88fa      	ldrh	r2, [r7, #6]
 801b21a:	4293      	cmp	r3, r2
 801b21c:	bf28      	it	cs
 801b21e:	4613      	movcs	r3, r2
 801b220:	b29b      	uxth	r3, r3
 801b222:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b224:	4293      	cmp	r3, r2
 801b226:	bf28      	it	cs
 801b228:	4613      	movcs	r3, r2
 801b22a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801b22c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b230:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b232:	4413      	add	r3, r2
 801b234:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801b238:	8a7a      	ldrh	r2, [r7, #18]
 801b23a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b23c:	1ad3      	subs	r3, r2, r3
 801b23e:	b29b      	uxth	r3, r3
 801b240:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801b242:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b244:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b246:	1ad3      	subs	r3, r2, r3
 801b248:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801b24a:	8a7b      	ldrh	r3, [r7, #18]
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	d00b      	beq.n	801b268 <tcp_write+0x1a0>
 801b250:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b254:	88fb      	ldrh	r3, [r7, #6]
 801b256:	429a      	cmp	r2, r3
 801b258:	d006      	beq.n	801b268 <tcp_write+0x1a0>
 801b25a:	4b52      	ldr	r3, [pc, #328]	; (801b3a4 <tcp_write+0x2dc>)
 801b25c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b260:	4956      	ldr	r1, [pc, #344]	; (801b3bc <tcp_write+0x2f4>)
 801b262:	4852      	ldr	r0, [pc, #328]	; (801b3ac <tcp_write+0x2e4>)
 801b264:	f008 feb8 	bl	8023fd8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801b268:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b26c:	88fb      	ldrh	r3, [r7, #6]
 801b26e:	429a      	cmp	r2, r3
 801b270:	f080 8167 	bcs.w	801b542 <tcp_write+0x47a>
 801b274:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b276:	2b00      	cmp	r3, #0
 801b278:	f000 8163 	beq.w	801b542 <tcp_write+0x47a>
 801b27c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b27e:	891b      	ldrh	r3, [r3, #8]
 801b280:	2b00      	cmp	r3, #0
 801b282:	f000 815e 	beq.w	801b542 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801b286:	88fa      	ldrh	r2, [r7, #6]
 801b288:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b28c:	1ad2      	subs	r2, r2, r3
 801b28e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b290:	4293      	cmp	r3, r2
 801b292:	bfa8      	it	ge
 801b294:	4613      	movge	r3, r2
 801b296:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801b298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b29a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801b29c:	797b      	ldrb	r3, [r7, #5]
 801b29e:	f003 0301 	and.w	r3, r3, #1
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	d027      	beq.n	801b2f6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801b2a6:	f107 0012 	add.w	r0, r7, #18
 801b2aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b2ac:	8bf9      	ldrh	r1, [r7, #30]
 801b2ae:	2301      	movs	r3, #1
 801b2b0:	9302      	str	r3, [sp, #8]
 801b2b2:	797b      	ldrb	r3, [r7, #5]
 801b2b4:	9301      	str	r3, [sp, #4]
 801b2b6:	68fb      	ldr	r3, [r7, #12]
 801b2b8:	9300      	str	r3, [sp, #0]
 801b2ba:	4603      	mov	r3, r0
 801b2bc:	2000      	movs	r0, #0
 801b2be:	f7ff fe0f 	bl	801aee0 <tcp_pbuf_prealloc>
 801b2c2:	6578      	str	r0, [r7, #84]	; 0x54
 801b2c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	f000 8225 	beq.w	801b716 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801b2cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b2ce:	6858      	ldr	r0, [r3, #4]
 801b2d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b2d4:	68ba      	ldr	r2, [r7, #8]
 801b2d6:	4413      	add	r3, r2
 801b2d8:	8bfa      	ldrh	r2, [r7, #30]
 801b2da:	4619      	mov	r1, r3
 801b2dc:	f009 f965 	bl	80245aa <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801b2e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b2e2:	f7fb f961 	bl	80165a8 <pbuf_clen>
 801b2e6:	4603      	mov	r3, r0
 801b2e8:	461a      	mov	r2, r3
 801b2ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b2ee:	4413      	add	r3, r2
 801b2f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801b2f4:	e041      	b.n	801b37a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801b2f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b2f8:	685b      	ldr	r3, [r3, #4]
 801b2fa:	637b      	str	r3, [r7, #52]	; 0x34
 801b2fc:	e002      	b.n	801b304 <tcp_write+0x23c>
 801b2fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b300:	681b      	ldr	r3, [r3, #0]
 801b302:	637b      	str	r3, [r7, #52]	; 0x34
 801b304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b306:	681b      	ldr	r3, [r3, #0]
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d1f8      	bne.n	801b2fe <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801b30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b30e:	7b1b      	ldrb	r3, [r3, #12]
 801b310:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801b314:	2b00      	cmp	r3, #0
 801b316:	d115      	bne.n	801b344 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801b318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b31a:	685b      	ldr	r3, [r3, #4]
 801b31c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b31e:	8952      	ldrh	r2, [r2, #10]
 801b320:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801b322:	68ba      	ldr	r2, [r7, #8]
 801b324:	429a      	cmp	r2, r3
 801b326:	d10d      	bne.n	801b344 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801b328:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	d006      	beq.n	801b33e <tcp_write+0x276>
 801b330:	4b1c      	ldr	r3, [pc, #112]	; (801b3a4 <tcp_write+0x2dc>)
 801b332:	f240 2231 	movw	r2, #561	; 0x231
 801b336:	4922      	ldr	r1, [pc, #136]	; (801b3c0 <tcp_write+0x2f8>)
 801b338:	481c      	ldr	r0, [pc, #112]	; (801b3ac <tcp_write+0x2e4>)
 801b33a:	f008 fe4d 	bl	8023fd8 <iprintf>
          extendlen = seglen;
 801b33e:	8bfb      	ldrh	r3, [r7, #30]
 801b340:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801b342:	e01a      	b.n	801b37a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801b344:	8bfb      	ldrh	r3, [r7, #30]
 801b346:	2201      	movs	r2, #1
 801b348:	4619      	mov	r1, r3
 801b34a:	2000      	movs	r0, #0
 801b34c:	f7fa fdba 	bl	8015ec4 <pbuf_alloc>
 801b350:	6578      	str	r0, [r7, #84]	; 0x54
 801b352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b354:	2b00      	cmp	r3, #0
 801b356:	f000 81e0 	beq.w	801b71a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801b35a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b35e:	68ba      	ldr	r2, [r7, #8]
 801b360:	441a      	add	r2, r3
 801b362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b364:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801b366:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b368:	f7fb f91e 	bl	80165a8 <pbuf_clen>
 801b36c:	4603      	mov	r3, r0
 801b36e:	461a      	mov	r2, r3
 801b370:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b374:	4413      	add	r3, r2
 801b376:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801b37a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b37e:	8bfb      	ldrh	r3, [r7, #30]
 801b380:	4413      	add	r3, r2
 801b382:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801b386:	e0dc      	b.n	801b542 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801b388:	68fb      	ldr	r3, [r7, #12]
 801b38a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801b38e:	2b00      	cmp	r3, #0
 801b390:	f000 80d7 	beq.w	801b542 <tcp_write+0x47a>
 801b394:	4b03      	ldr	r3, [pc, #12]	; (801b3a4 <tcp_write+0x2dc>)
 801b396:	f240 224a 	movw	r2, #586	; 0x24a
 801b39a:	490a      	ldr	r1, [pc, #40]	; (801b3c4 <tcp_write+0x2fc>)
 801b39c:	4803      	ldr	r0, [pc, #12]	; (801b3ac <tcp_write+0x2e4>)
 801b39e:	f008 fe1b 	bl	8023fd8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801b3a2:	e0ce      	b.n	801b542 <tcp_write+0x47a>
 801b3a4:	08029604 	.word	0x08029604
 801b3a8:	080297a4 	.word	0x080297a4
 801b3ac:	08029658 	.word	0x08029658
 801b3b0:	080297bc 	.word	0x080297bc
 801b3b4:	080297f0 	.word	0x080297f0
 801b3b8:	08029808 	.word	0x08029808
 801b3bc:	08029828 	.word	0x08029828
 801b3c0:	08029848 	.word	0x08029848
 801b3c4:	08029874 	.word	0x08029874
    struct pbuf *p;
    u16_t left = len - pos;
 801b3c8:	88fa      	ldrh	r2, [r7, #6]
 801b3ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b3ce:	1ad3      	subs	r3, r2, r3
 801b3d0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801b3d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801b3d6:	b29b      	uxth	r3, r3
 801b3d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b3da:	1ad3      	subs	r3, r2, r3
 801b3dc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801b3de:	8b7a      	ldrh	r2, [r7, #26]
 801b3e0:	8bbb      	ldrh	r3, [r7, #28]
 801b3e2:	4293      	cmp	r3, r2
 801b3e4:	bf28      	it	cs
 801b3e6:	4613      	movcs	r3, r2
 801b3e8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801b3ea:	797b      	ldrb	r3, [r7, #5]
 801b3ec:	f003 0301 	and.w	r3, r3, #1
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	d036      	beq.n	801b462 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801b3f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801b3f8:	b29a      	uxth	r2, r3
 801b3fa:	8b3b      	ldrh	r3, [r7, #24]
 801b3fc:	4413      	add	r3, r2
 801b3fe:	b299      	uxth	r1, r3
 801b400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b402:	2b00      	cmp	r3, #0
 801b404:	bf0c      	ite	eq
 801b406:	2301      	moveq	r3, #1
 801b408:	2300      	movne	r3, #0
 801b40a:	b2db      	uxtb	r3, r3
 801b40c:	f107 0012 	add.w	r0, r7, #18
 801b410:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b412:	9302      	str	r3, [sp, #8]
 801b414:	797b      	ldrb	r3, [r7, #5]
 801b416:	9301      	str	r3, [sp, #4]
 801b418:	68fb      	ldr	r3, [r7, #12]
 801b41a:	9300      	str	r3, [sp, #0]
 801b41c:	4603      	mov	r3, r0
 801b41e:	2036      	movs	r0, #54	; 0x36
 801b420:	f7ff fd5e 	bl	801aee0 <tcp_pbuf_prealloc>
 801b424:	6338      	str	r0, [r7, #48]	; 0x30
 801b426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b428:	2b00      	cmp	r3, #0
 801b42a:	f000 8178 	beq.w	801b71e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801b42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b430:	895b      	ldrh	r3, [r3, #10]
 801b432:	8b3a      	ldrh	r2, [r7, #24]
 801b434:	429a      	cmp	r2, r3
 801b436:	d906      	bls.n	801b446 <tcp_write+0x37e>
 801b438:	4b8c      	ldr	r3, [pc, #560]	; (801b66c <tcp_write+0x5a4>)
 801b43a:	f240 2266 	movw	r2, #614	; 0x266
 801b43e:	498c      	ldr	r1, [pc, #560]	; (801b670 <tcp_write+0x5a8>)
 801b440:	488c      	ldr	r0, [pc, #560]	; (801b674 <tcp_write+0x5ac>)
 801b442:	f008 fdc9 	bl	8023fd8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801b446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b448:	685a      	ldr	r2, [r3, #4]
 801b44a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801b44e:	18d0      	adds	r0, r2, r3
 801b450:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b454:	68ba      	ldr	r2, [r7, #8]
 801b456:	4413      	add	r3, r2
 801b458:	8b3a      	ldrh	r2, [r7, #24]
 801b45a:	4619      	mov	r1, r3
 801b45c:	f009 f8a5 	bl	80245aa <memcpy>
 801b460:	e02f      	b.n	801b4c2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801b462:	8a7b      	ldrh	r3, [r7, #18]
 801b464:	2b00      	cmp	r3, #0
 801b466:	d006      	beq.n	801b476 <tcp_write+0x3ae>
 801b468:	4b80      	ldr	r3, [pc, #512]	; (801b66c <tcp_write+0x5a4>)
 801b46a:	f240 2271 	movw	r2, #625	; 0x271
 801b46e:	4982      	ldr	r1, [pc, #520]	; (801b678 <tcp_write+0x5b0>)
 801b470:	4880      	ldr	r0, [pc, #512]	; (801b674 <tcp_write+0x5ac>)
 801b472:	f008 fdb1 	bl	8023fd8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801b476:	8b3b      	ldrh	r3, [r7, #24]
 801b478:	2201      	movs	r2, #1
 801b47a:	4619      	mov	r1, r3
 801b47c:	2036      	movs	r0, #54	; 0x36
 801b47e:	f7fa fd21 	bl	8015ec4 <pbuf_alloc>
 801b482:	6178      	str	r0, [r7, #20]
 801b484:	697b      	ldr	r3, [r7, #20]
 801b486:	2b00      	cmp	r3, #0
 801b488:	f000 814b 	beq.w	801b722 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801b48c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b490:	68ba      	ldr	r2, [r7, #8]
 801b492:	441a      	add	r2, r3
 801b494:	697b      	ldr	r3, [r7, #20]
 801b496:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b498:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801b49c:	b29b      	uxth	r3, r3
 801b49e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b4a2:	4619      	mov	r1, r3
 801b4a4:	2036      	movs	r0, #54	; 0x36
 801b4a6:	f7fa fd0d 	bl	8015ec4 <pbuf_alloc>
 801b4aa:	6338      	str	r0, [r7, #48]	; 0x30
 801b4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4ae:	2b00      	cmp	r3, #0
 801b4b0:	d103      	bne.n	801b4ba <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801b4b2:	6978      	ldr	r0, [r7, #20]
 801b4b4:	f7fa ffea 	bl	801648c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801b4b8:	e136      	b.n	801b728 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801b4ba:	6979      	ldr	r1, [r7, #20]
 801b4bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b4be:	f7fb f8b3 	bl	8016628 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801b4c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b4c4:	f7fb f870 	bl	80165a8 <pbuf_clen>
 801b4c8:	4603      	mov	r3, r0
 801b4ca:	461a      	mov	r2, r3
 801b4cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b4d0:	4413      	add	r3, r2
 801b4d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801b4d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b4da:	2b09      	cmp	r3, #9
 801b4dc:	d903      	bls.n	801b4e6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801b4de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b4e0:	f7fa ffd4 	bl	801648c <pbuf_free>
      goto memerr;
 801b4e4:	e120      	b.n	801b728 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801b4e6:	68fb      	ldr	r3, [r7, #12]
 801b4e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801b4ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b4ee:	441a      	add	r2, r3
 801b4f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b4f4:	9300      	str	r3, [sp, #0]
 801b4f6:	4613      	mov	r3, r2
 801b4f8:	2200      	movs	r2, #0
 801b4fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b4fc:	68f8      	ldr	r0, [r7, #12]
 801b4fe:	f7ff fc51 	bl	801ada4 <tcp_create_segment>
 801b502:	64f8      	str	r0, [r7, #76]	; 0x4c
 801b504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b506:	2b00      	cmp	r3, #0
 801b508:	f000 810d 	beq.w	801b726 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801b50c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d102      	bne.n	801b518 <tcp_write+0x450>
      queue = seg;
 801b512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b514:	647b      	str	r3, [r7, #68]	; 0x44
 801b516:	e00c      	b.n	801b532 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801b518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	d106      	bne.n	801b52c <tcp_write+0x464>
 801b51e:	4b53      	ldr	r3, [pc, #332]	; (801b66c <tcp_write+0x5a4>)
 801b520:	f240 22ab 	movw	r2, #683	; 0x2ab
 801b524:	4955      	ldr	r1, [pc, #340]	; (801b67c <tcp_write+0x5b4>)
 801b526:	4853      	ldr	r0, [pc, #332]	; (801b674 <tcp_write+0x5ac>)
 801b528:	f008 fd56 	bl	8023fd8 <iprintf>
      prev_seg->next = seg;
 801b52c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b52e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801b530:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801b532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b534:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801b536:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b53a:	8b3b      	ldrh	r3, [r7, #24]
 801b53c:	4413      	add	r3, r2
 801b53e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801b542:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b546:	88fb      	ldrh	r3, [r7, #6]
 801b548:	429a      	cmp	r2, r3
 801b54a:	f4ff af3d 	bcc.w	801b3c8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801b54e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b550:	2b00      	cmp	r3, #0
 801b552:	d02c      	beq.n	801b5ae <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801b554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b556:	685b      	ldr	r3, [r3, #4]
 801b558:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b55a:	e01e      	b.n	801b59a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801b55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b55e:	891a      	ldrh	r2, [r3, #8]
 801b560:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b562:	4413      	add	r3, r2
 801b564:	b29a      	uxth	r2, r3
 801b566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b568:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801b56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b56c:	681b      	ldr	r3, [r3, #0]
 801b56e:	2b00      	cmp	r3, #0
 801b570:	d110      	bne.n	801b594 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801b572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b574:	685b      	ldr	r3, [r3, #4]
 801b576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b578:	8952      	ldrh	r2, [r2, #10]
 801b57a:	4413      	add	r3, r2
 801b57c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b57e:	68b9      	ldr	r1, [r7, #8]
 801b580:	4618      	mov	r0, r3
 801b582:	f009 f812 	bl	80245aa <memcpy>
        p->len += oversize_used;
 801b586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b588:	895a      	ldrh	r2, [r3, #10]
 801b58a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b58c:	4413      	add	r3, r2
 801b58e:	b29a      	uxth	r2, r3
 801b590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b592:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801b594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d1dd      	bne.n	801b55c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801b5a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b5a2:	891a      	ldrh	r2, [r3, #8]
 801b5a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b5a6:	4413      	add	r3, r2
 801b5a8:	b29a      	uxth	r2, r3
 801b5aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b5ac:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801b5ae:	8a7a      	ldrh	r2, [r7, #18]
 801b5b0:	68fb      	ldr	r3, [r7, #12]
 801b5b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801b5b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d018      	beq.n	801b5ee <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801b5bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d106      	bne.n	801b5d0 <tcp_write+0x508>
 801b5c2:	4b2a      	ldr	r3, [pc, #168]	; (801b66c <tcp_write+0x5a4>)
 801b5c4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801b5c8:	492d      	ldr	r1, [pc, #180]	; (801b680 <tcp_write+0x5b8>)
 801b5ca:	482a      	ldr	r0, [pc, #168]	; (801b674 <tcp_write+0x5ac>)
 801b5cc:	f008 fd04 	bl	8023fd8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801b5d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b5d2:	685b      	ldr	r3, [r3, #4]
 801b5d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801b5d6:	4618      	mov	r0, r3
 801b5d8:	f7fb f826 	bl	8016628 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801b5dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b5de:	891a      	ldrh	r2, [r3, #8]
 801b5e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b5e2:	891b      	ldrh	r3, [r3, #8]
 801b5e4:	4413      	add	r3, r2
 801b5e6:	b29a      	uxth	r2, r3
 801b5e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b5ea:	811a      	strh	r2, [r3, #8]
 801b5ec:	e037      	b.n	801b65e <tcp_write+0x596>
  } else if (extendlen > 0) {
 801b5ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b5f0:	2b00      	cmp	r3, #0
 801b5f2:	d034      	beq.n	801b65e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801b5f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b5f6:	2b00      	cmp	r3, #0
 801b5f8:	d003      	beq.n	801b602 <tcp_write+0x53a>
 801b5fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b5fc:	685b      	ldr	r3, [r3, #4]
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	d106      	bne.n	801b610 <tcp_write+0x548>
 801b602:	4b1a      	ldr	r3, [pc, #104]	; (801b66c <tcp_write+0x5a4>)
 801b604:	f240 22e6 	movw	r2, #742	; 0x2e6
 801b608:	491e      	ldr	r1, [pc, #120]	; (801b684 <tcp_write+0x5bc>)
 801b60a:	481a      	ldr	r0, [pc, #104]	; (801b674 <tcp_write+0x5ac>)
 801b60c:	f008 fce4 	bl	8023fd8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b612:	685b      	ldr	r3, [r3, #4]
 801b614:	62bb      	str	r3, [r7, #40]	; 0x28
 801b616:	e009      	b.n	801b62c <tcp_write+0x564>
      p->tot_len += extendlen;
 801b618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b61a:	891a      	ldrh	r2, [r3, #8]
 801b61c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b61e:	4413      	add	r3, r2
 801b620:	b29a      	uxth	r2, r3
 801b622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b624:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b628:	681b      	ldr	r3, [r3, #0]
 801b62a:	62bb      	str	r3, [r7, #40]	; 0x28
 801b62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	2b00      	cmp	r3, #0
 801b632:	d1f1      	bne.n	801b618 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801b634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b636:	891a      	ldrh	r2, [r3, #8]
 801b638:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b63a:	4413      	add	r3, r2
 801b63c:	b29a      	uxth	r2, r3
 801b63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b640:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801b642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b644:	895a      	ldrh	r2, [r3, #10]
 801b646:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b648:	4413      	add	r3, r2
 801b64a:	b29a      	uxth	r2, r3
 801b64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b64e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801b650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b652:	891a      	ldrh	r2, [r3, #8]
 801b654:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b656:	4413      	add	r3, r2
 801b658:	b29a      	uxth	r2, r3
 801b65a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b65c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801b65e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b660:	2b00      	cmp	r3, #0
 801b662:	d111      	bne.n	801b688 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801b664:	68fb      	ldr	r3, [r7, #12]
 801b666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b668:	66da      	str	r2, [r3, #108]	; 0x6c
 801b66a:	e010      	b.n	801b68e <tcp_write+0x5c6>
 801b66c:	08029604 	.word	0x08029604
 801b670:	080298a4 	.word	0x080298a4
 801b674:	08029658 	.word	0x08029658
 801b678:	080298e4 	.word	0x080298e4
 801b67c:	080298f4 	.word	0x080298f4
 801b680:	08029908 	.word	0x08029908
 801b684:	08029940 	.word	0x08029940
  } else {
    last_unsent->next = queue;
 801b688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b68a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b68c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801b68e:	68fb      	ldr	r3, [r7, #12]
 801b690:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801b692:	88fb      	ldrh	r3, [r7, #6]
 801b694:	441a      	add	r2, r3
 801b696:	68fb      	ldr	r3, [r7, #12]
 801b698:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801b69a:	68fb      	ldr	r3, [r7, #12]
 801b69c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801b6a0:	88fb      	ldrh	r3, [r7, #6]
 801b6a2:	1ad3      	subs	r3, r2, r3
 801b6a4:	b29a      	uxth	r2, r3
 801b6a6:	68fb      	ldr	r3, [r7, #12]
 801b6a8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801b6ac:	68fb      	ldr	r3, [r7, #12]
 801b6ae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801b6b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801b6b6:	68fb      	ldr	r3, [r7, #12]
 801b6b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d00e      	beq.n	801b6de <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801b6c0:	68fb      	ldr	r3, [r7, #12]
 801b6c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	d10a      	bne.n	801b6de <tcp_write+0x616>
 801b6c8:	68fb      	ldr	r3, [r7, #12]
 801b6ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	d106      	bne.n	801b6de <tcp_write+0x616>
 801b6d0:	4b2c      	ldr	r3, [pc, #176]	; (801b784 <tcp_write+0x6bc>)
 801b6d2:	f240 3212 	movw	r2, #786	; 0x312
 801b6d6:	492c      	ldr	r1, [pc, #176]	; (801b788 <tcp_write+0x6c0>)
 801b6d8:	482c      	ldr	r0, [pc, #176]	; (801b78c <tcp_write+0x6c4>)
 801b6da:	f008 fc7d 	bl	8023fd8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801b6de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b6e0:	2b00      	cmp	r3, #0
 801b6e2:	d016      	beq.n	801b712 <tcp_write+0x64a>
 801b6e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b6e6:	68db      	ldr	r3, [r3, #12]
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d012      	beq.n	801b712 <tcp_write+0x64a>
 801b6ec:	797b      	ldrb	r3, [r7, #5]
 801b6ee:	f003 0302 	and.w	r3, r3, #2
 801b6f2:	2b00      	cmp	r3, #0
 801b6f4:	d10d      	bne.n	801b712 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801b6f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b6f8:	68db      	ldr	r3, [r3, #12]
 801b6fa:	899b      	ldrh	r3, [r3, #12]
 801b6fc:	b29c      	uxth	r4, r3
 801b6fe:	2008      	movs	r0, #8
 801b700:	f7f9 fac6 	bl	8014c90 <lwip_htons>
 801b704:	4603      	mov	r3, r0
 801b706:	461a      	mov	r2, r3
 801b708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b70a:	68db      	ldr	r3, [r3, #12]
 801b70c:	4322      	orrs	r2, r4
 801b70e:	b292      	uxth	r2, r2
 801b710:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801b712:	2300      	movs	r3, #0
 801b714:	e031      	b.n	801b77a <tcp_write+0x6b2>
          goto memerr;
 801b716:	bf00      	nop
 801b718:	e006      	b.n	801b728 <tcp_write+0x660>
            goto memerr;
 801b71a:	bf00      	nop
 801b71c:	e004      	b.n	801b728 <tcp_write+0x660>
        goto memerr;
 801b71e:	bf00      	nop
 801b720:	e002      	b.n	801b728 <tcp_write+0x660>
        goto memerr;
 801b722:	bf00      	nop
 801b724:	e000      	b.n	801b728 <tcp_write+0x660>
      goto memerr;
 801b726:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b728:	68fb      	ldr	r3, [r7, #12]
 801b72a:	8b5b      	ldrh	r3, [r3, #26]
 801b72c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b730:	b29a      	uxth	r2, r3
 801b732:	68fb      	ldr	r3, [r7, #12]
 801b734:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801b736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d002      	beq.n	801b742 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801b73c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b73e:	f7fa fea5 	bl	801648c <pbuf_free>
  }
  if (queue != NULL) {
 801b742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b744:	2b00      	cmp	r3, #0
 801b746:	d002      	beq.n	801b74e <tcp_write+0x686>
    tcp_segs_free(queue);
 801b748:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801b74a:	f7fc fb53 	bl	8017df4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801b74e:	68fb      	ldr	r3, [r7, #12]
 801b750:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b754:	2b00      	cmp	r3, #0
 801b756:	d00e      	beq.n	801b776 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801b758:	68fb      	ldr	r3, [r7, #12]
 801b75a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b75c:	2b00      	cmp	r3, #0
 801b75e:	d10a      	bne.n	801b776 <tcp_write+0x6ae>
 801b760:	68fb      	ldr	r3, [r7, #12]
 801b762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b764:	2b00      	cmp	r3, #0
 801b766:	d106      	bne.n	801b776 <tcp_write+0x6ae>
 801b768:	4b06      	ldr	r3, [pc, #24]	; (801b784 <tcp_write+0x6bc>)
 801b76a:	f240 3227 	movw	r2, #807	; 0x327
 801b76e:	4906      	ldr	r1, [pc, #24]	; (801b788 <tcp_write+0x6c0>)
 801b770:	4806      	ldr	r0, [pc, #24]	; (801b78c <tcp_write+0x6c4>)
 801b772:	f008 fc31 	bl	8023fd8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801b776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801b77a:	4618      	mov	r0, r3
 801b77c:	375c      	adds	r7, #92	; 0x5c
 801b77e:	46bd      	mov	sp, r7
 801b780:	bd90      	pop	{r4, r7, pc}
 801b782:	bf00      	nop
 801b784:	08029604 	.word	0x08029604
 801b788:	08029978 	.word	0x08029978
 801b78c:	08029658 	.word	0x08029658

0801b790 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801b790:	b590      	push	{r4, r7, lr}
 801b792:	b08b      	sub	sp, #44	; 0x2c
 801b794:	af02      	add	r7, sp, #8
 801b796:	6078      	str	r0, [r7, #4]
 801b798:	460b      	mov	r3, r1
 801b79a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801b79c:	2300      	movs	r3, #0
 801b79e:	61fb      	str	r3, [r7, #28]
 801b7a0:	2300      	movs	r3, #0
 801b7a2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801b7a4:	2300      	movs	r3, #0
 801b7a6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	d106      	bne.n	801b7bc <tcp_split_unsent_seg+0x2c>
 801b7ae:	4b95      	ldr	r3, [pc, #596]	; (801ba04 <tcp_split_unsent_seg+0x274>)
 801b7b0:	f240 324b 	movw	r2, #843	; 0x34b
 801b7b4:	4994      	ldr	r1, [pc, #592]	; (801ba08 <tcp_split_unsent_seg+0x278>)
 801b7b6:	4895      	ldr	r0, [pc, #596]	; (801ba0c <tcp_split_unsent_seg+0x27c>)
 801b7b8:	f008 fc0e 	bl	8023fd8 <iprintf>

  useg = pcb->unsent;
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b7c0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801b7c2:	697b      	ldr	r3, [r7, #20]
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d102      	bne.n	801b7ce <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801b7c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b7cc:	e116      	b.n	801b9fc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801b7ce:	887b      	ldrh	r3, [r7, #2]
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	d109      	bne.n	801b7e8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801b7d4:	4b8b      	ldr	r3, [pc, #556]	; (801ba04 <tcp_split_unsent_seg+0x274>)
 801b7d6:	f240 3253 	movw	r2, #851	; 0x353
 801b7da:	498d      	ldr	r1, [pc, #564]	; (801ba10 <tcp_split_unsent_seg+0x280>)
 801b7dc:	488b      	ldr	r0, [pc, #556]	; (801ba0c <tcp_split_unsent_seg+0x27c>)
 801b7de:	f008 fbfb 	bl	8023fd8 <iprintf>
    return ERR_VAL;
 801b7e2:	f06f 0305 	mvn.w	r3, #5
 801b7e6:	e109      	b.n	801b9fc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801b7e8:	697b      	ldr	r3, [r7, #20]
 801b7ea:	891b      	ldrh	r3, [r3, #8]
 801b7ec:	887a      	ldrh	r2, [r7, #2]
 801b7ee:	429a      	cmp	r2, r3
 801b7f0:	d301      	bcc.n	801b7f6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801b7f2:	2300      	movs	r3, #0
 801b7f4:	e102      	b.n	801b9fc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b7fa:	887a      	ldrh	r2, [r7, #2]
 801b7fc:	429a      	cmp	r2, r3
 801b7fe:	d906      	bls.n	801b80e <tcp_split_unsent_seg+0x7e>
 801b800:	4b80      	ldr	r3, [pc, #512]	; (801ba04 <tcp_split_unsent_seg+0x274>)
 801b802:	f240 325b 	movw	r2, #859	; 0x35b
 801b806:	4983      	ldr	r1, [pc, #524]	; (801ba14 <tcp_split_unsent_seg+0x284>)
 801b808:	4880      	ldr	r0, [pc, #512]	; (801ba0c <tcp_split_unsent_seg+0x27c>)
 801b80a:	f008 fbe5 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801b80e:	697b      	ldr	r3, [r7, #20]
 801b810:	891b      	ldrh	r3, [r3, #8]
 801b812:	2b00      	cmp	r3, #0
 801b814:	d106      	bne.n	801b824 <tcp_split_unsent_seg+0x94>
 801b816:	4b7b      	ldr	r3, [pc, #492]	; (801ba04 <tcp_split_unsent_seg+0x274>)
 801b818:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801b81c:	497e      	ldr	r1, [pc, #504]	; (801ba18 <tcp_split_unsent_seg+0x288>)
 801b81e:	487b      	ldr	r0, [pc, #492]	; (801ba0c <tcp_split_unsent_seg+0x27c>)
 801b820:	f008 fbda 	bl	8023fd8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801b824:	697b      	ldr	r3, [r7, #20]
 801b826:	7a9b      	ldrb	r3, [r3, #10]
 801b828:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801b82a:	7bfb      	ldrb	r3, [r7, #15]
 801b82c:	009b      	lsls	r3, r3, #2
 801b82e:	b2db      	uxtb	r3, r3
 801b830:	f003 0304 	and.w	r3, r3, #4
 801b834:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801b836:	697b      	ldr	r3, [r7, #20]
 801b838:	891a      	ldrh	r2, [r3, #8]
 801b83a:	887b      	ldrh	r3, [r7, #2]
 801b83c:	1ad3      	subs	r3, r2, r3
 801b83e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801b840:	7bbb      	ldrb	r3, [r7, #14]
 801b842:	b29a      	uxth	r2, r3
 801b844:	89bb      	ldrh	r3, [r7, #12]
 801b846:	4413      	add	r3, r2
 801b848:	b29b      	uxth	r3, r3
 801b84a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b84e:	4619      	mov	r1, r3
 801b850:	2036      	movs	r0, #54	; 0x36
 801b852:	f7fa fb37 	bl	8015ec4 <pbuf_alloc>
 801b856:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b858:	693b      	ldr	r3, [r7, #16]
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	f000 80b7 	beq.w	801b9ce <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801b860:	697b      	ldr	r3, [r7, #20]
 801b862:	685b      	ldr	r3, [r3, #4]
 801b864:	891a      	ldrh	r2, [r3, #8]
 801b866:	697b      	ldr	r3, [r7, #20]
 801b868:	891b      	ldrh	r3, [r3, #8]
 801b86a:	1ad3      	subs	r3, r2, r3
 801b86c:	b29a      	uxth	r2, r3
 801b86e:	887b      	ldrh	r3, [r7, #2]
 801b870:	4413      	add	r3, r2
 801b872:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801b874:	697b      	ldr	r3, [r7, #20]
 801b876:	6858      	ldr	r0, [r3, #4]
 801b878:	693b      	ldr	r3, [r7, #16]
 801b87a:	685a      	ldr	r2, [r3, #4]
 801b87c:	7bbb      	ldrb	r3, [r7, #14]
 801b87e:	18d1      	adds	r1, r2, r3
 801b880:	897b      	ldrh	r3, [r7, #10]
 801b882:	89ba      	ldrh	r2, [r7, #12]
 801b884:	f7fb f808 	bl	8016898 <pbuf_copy_partial>
 801b888:	4603      	mov	r3, r0
 801b88a:	461a      	mov	r2, r3
 801b88c:	89bb      	ldrh	r3, [r7, #12]
 801b88e:	4293      	cmp	r3, r2
 801b890:	f040 809f 	bne.w	801b9d2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801b894:	697b      	ldr	r3, [r7, #20]
 801b896:	68db      	ldr	r3, [r3, #12]
 801b898:	899b      	ldrh	r3, [r3, #12]
 801b89a:	b29b      	uxth	r3, r3
 801b89c:	4618      	mov	r0, r3
 801b89e:	f7f9 f9f7 	bl	8014c90 <lwip_htons>
 801b8a2:	4603      	mov	r3, r0
 801b8a4:	b2db      	uxtb	r3, r3
 801b8a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b8aa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801b8ac:	2300      	movs	r3, #0
 801b8ae:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801b8b0:	7efb      	ldrb	r3, [r7, #27]
 801b8b2:	f003 0308 	and.w	r3, r3, #8
 801b8b6:	2b00      	cmp	r3, #0
 801b8b8:	d007      	beq.n	801b8ca <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801b8ba:	7efb      	ldrb	r3, [r7, #27]
 801b8bc:	f023 0308 	bic.w	r3, r3, #8
 801b8c0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801b8c2:	7ebb      	ldrb	r3, [r7, #26]
 801b8c4:	f043 0308 	orr.w	r3, r3, #8
 801b8c8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801b8ca:	7efb      	ldrb	r3, [r7, #27]
 801b8cc:	f003 0301 	and.w	r3, r3, #1
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	d007      	beq.n	801b8e4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801b8d4:	7efb      	ldrb	r3, [r7, #27]
 801b8d6:	f023 0301 	bic.w	r3, r3, #1
 801b8da:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801b8dc:	7ebb      	ldrb	r3, [r7, #26]
 801b8de:	f043 0301 	orr.w	r3, r3, #1
 801b8e2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801b8e4:	697b      	ldr	r3, [r7, #20]
 801b8e6:	68db      	ldr	r3, [r3, #12]
 801b8e8:	685b      	ldr	r3, [r3, #4]
 801b8ea:	4618      	mov	r0, r3
 801b8ec:	f7f9 f9e5 	bl	8014cba <lwip_htonl>
 801b8f0:	4602      	mov	r2, r0
 801b8f2:	887b      	ldrh	r3, [r7, #2]
 801b8f4:	18d1      	adds	r1, r2, r3
 801b8f6:	7eba      	ldrb	r2, [r7, #26]
 801b8f8:	7bfb      	ldrb	r3, [r7, #15]
 801b8fa:	9300      	str	r3, [sp, #0]
 801b8fc:	460b      	mov	r3, r1
 801b8fe:	6939      	ldr	r1, [r7, #16]
 801b900:	6878      	ldr	r0, [r7, #4]
 801b902:	f7ff fa4f 	bl	801ada4 <tcp_create_segment>
 801b906:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801b908:	69fb      	ldr	r3, [r7, #28]
 801b90a:	2b00      	cmp	r3, #0
 801b90c:	d063      	beq.n	801b9d6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801b90e:	697b      	ldr	r3, [r7, #20]
 801b910:	685b      	ldr	r3, [r3, #4]
 801b912:	4618      	mov	r0, r3
 801b914:	f7fa fe48 	bl	80165a8 <pbuf_clen>
 801b918:	4603      	mov	r3, r0
 801b91a:	461a      	mov	r2, r3
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b922:	1a9b      	subs	r3, r3, r2
 801b924:	b29a      	uxth	r2, r3
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801b92c:	697b      	ldr	r3, [r7, #20]
 801b92e:	6858      	ldr	r0, [r3, #4]
 801b930:	697b      	ldr	r3, [r7, #20]
 801b932:	685b      	ldr	r3, [r3, #4]
 801b934:	891a      	ldrh	r2, [r3, #8]
 801b936:	89bb      	ldrh	r3, [r7, #12]
 801b938:	1ad3      	subs	r3, r2, r3
 801b93a:	b29b      	uxth	r3, r3
 801b93c:	4619      	mov	r1, r3
 801b93e:	f7fa fc1f 	bl	8016180 <pbuf_realloc>
  useg->len -= remainder;
 801b942:	697b      	ldr	r3, [r7, #20]
 801b944:	891a      	ldrh	r2, [r3, #8]
 801b946:	89bb      	ldrh	r3, [r7, #12]
 801b948:	1ad3      	subs	r3, r2, r3
 801b94a:	b29a      	uxth	r2, r3
 801b94c:	697b      	ldr	r3, [r7, #20]
 801b94e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801b950:	697b      	ldr	r3, [r7, #20]
 801b952:	68db      	ldr	r3, [r3, #12]
 801b954:	899b      	ldrh	r3, [r3, #12]
 801b956:	b29c      	uxth	r4, r3
 801b958:	7efb      	ldrb	r3, [r7, #27]
 801b95a:	b29b      	uxth	r3, r3
 801b95c:	4618      	mov	r0, r3
 801b95e:	f7f9 f997 	bl	8014c90 <lwip_htons>
 801b962:	4603      	mov	r3, r0
 801b964:	461a      	mov	r2, r3
 801b966:	697b      	ldr	r3, [r7, #20]
 801b968:	68db      	ldr	r3, [r3, #12]
 801b96a:	4322      	orrs	r2, r4
 801b96c:	b292      	uxth	r2, r2
 801b96e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801b970:	697b      	ldr	r3, [r7, #20]
 801b972:	685b      	ldr	r3, [r3, #4]
 801b974:	4618      	mov	r0, r3
 801b976:	f7fa fe17 	bl	80165a8 <pbuf_clen>
 801b97a:	4603      	mov	r3, r0
 801b97c:	461a      	mov	r2, r3
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b984:	4413      	add	r3, r2
 801b986:	b29a      	uxth	r2, r3
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b98e:	69fb      	ldr	r3, [r7, #28]
 801b990:	685b      	ldr	r3, [r3, #4]
 801b992:	4618      	mov	r0, r3
 801b994:	f7fa fe08 	bl	80165a8 <pbuf_clen>
 801b998:	4603      	mov	r3, r0
 801b99a:	461a      	mov	r2, r3
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b9a2:	4413      	add	r3, r2
 801b9a4:	b29a      	uxth	r2, r3
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801b9ac:	697b      	ldr	r3, [r7, #20]
 801b9ae:	681a      	ldr	r2, [r3, #0]
 801b9b0:	69fb      	ldr	r3, [r7, #28]
 801b9b2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801b9b4:	697b      	ldr	r3, [r7, #20]
 801b9b6:	69fa      	ldr	r2, [r7, #28]
 801b9b8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801b9ba:	69fb      	ldr	r3, [r7, #28]
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	d103      	bne.n	801b9ca <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	2200      	movs	r2, #0
 801b9c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801b9ca:	2300      	movs	r3, #0
 801b9cc:	e016      	b.n	801b9fc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801b9ce:	bf00      	nop
 801b9d0:	e002      	b.n	801b9d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801b9d2:	bf00      	nop
 801b9d4:	e000      	b.n	801b9d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801b9d6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801b9d8:	69fb      	ldr	r3, [r7, #28]
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d006      	beq.n	801b9ec <tcp_split_unsent_seg+0x25c>
 801b9de:	4b09      	ldr	r3, [pc, #36]	; (801ba04 <tcp_split_unsent_seg+0x274>)
 801b9e0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801b9e4:	490d      	ldr	r1, [pc, #52]	; (801ba1c <tcp_split_unsent_seg+0x28c>)
 801b9e6:	4809      	ldr	r0, [pc, #36]	; (801ba0c <tcp_split_unsent_seg+0x27c>)
 801b9e8:	f008 faf6 	bl	8023fd8 <iprintf>
  if (p != NULL) {
 801b9ec:	693b      	ldr	r3, [r7, #16]
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	d002      	beq.n	801b9f8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801b9f2:	6938      	ldr	r0, [r7, #16]
 801b9f4:	f7fa fd4a 	bl	801648c <pbuf_free>
  }

  return ERR_MEM;
 801b9f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801b9fc:	4618      	mov	r0, r3
 801b9fe:	3724      	adds	r7, #36	; 0x24
 801ba00:	46bd      	mov	sp, r7
 801ba02:	bd90      	pop	{r4, r7, pc}
 801ba04:	08029604 	.word	0x08029604
 801ba08:	08029998 	.word	0x08029998
 801ba0c:	08029658 	.word	0x08029658
 801ba10:	080299bc 	.word	0x080299bc
 801ba14:	080299e0 	.word	0x080299e0
 801ba18:	080299f0 	.word	0x080299f0
 801ba1c:	08029a00 	.word	0x08029a00

0801ba20 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801ba20:	b590      	push	{r4, r7, lr}
 801ba22:	b085      	sub	sp, #20
 801ba24:	af00      	add	r7, sp, #0
 801ba26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801ba28:	687b      	ldr	r3, [r7, #4]
 801ba2a:	2b00      	cmp	r3, #0
 801ba2c:	d106      	bne.n	801ba3c <tcp_send_fin+0x1c>
 801ba2e:	4b21      	ldr	r3, [pc, #132]	; (801bab4 <tcp_send_fin+0x94>)
 801ba30:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801ba34:	4920      	ldr	r1, [pc, #128]	; (801bab8 <tcp_send_fin+0x98>)
 801ba36:	4821      	ldr	r0, [pc, #132]	; (801babc <tcp_send_fin+0x9c>)
 801ba38:	f008 face 	bl	8023fd8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	d02e      	beq.n	801baa2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ba48:	60fb      	str	r3, [r7, #12]
 801ba4a:	e002      	b.n	801ba52 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801ba4c:	68fb      	ldr	r3, [r7, #12]
 801ba4e:	681b      	ldr	r3, [r3, #0]
 801ba50:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ba52:	68fb      	ldr	r3, [r7, #12]
 801ba54:	681b      	ldr	r3, [r3, #0]
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	d1f8      	bne.n	801ba4c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801ba5a:	68fb      	ldr	r3, [r7, #12]
 801ba5c:	68db      	ldr	r3, [r3, #12]
 801ba5e:	899b      	ldrh	r3, [r3, #12]
 801ba60:	b29b      	uxth	r3, r3
 801ba62:	4618      	mov	r0, r3
 801ba64:	f7f9 f914 	bl	8014c90 <lwip_htons>
 801ba68:	4603      	mov	r3, r0
 801ba6a:	b2db      	uxtb	r3, r3
 801ba6c:	f003 0307 	and.w	r3, r3, #7
 801ba70:	2b00      	cmp	r3, #0
 801ba72:	d116      	bne.n	801baa2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801ba74:	68fb      	ldr	r3, [r7, #12]
 801ba76:	68db      	ldr	r3, [r3, #12]
 801ba78:	899b      	ldrh	r3, [r3, #12]
 801ba7a:	b29c      	uxth	r4, r3
 801ba7c:	2001      	movs	r0, #1
 801ba7e:	f7f9 f907 	bl	8014c90 <lwip_htons>
 801ba82:	4603      	mov	r3, r0
 801ba84:	461a      	mov	r2, r3
 801ba86:	68fb      	ldr	r3, [r7, #12]
 801ba88:	68db      	ldr	r3, [r3, #12]
 801ba8a:	4322      	orrs	r2, r4
 801ba8c:	b292      	uxth	r2, r2
 801ba8e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	8b5b      	ldrh	r3, [r3, #26]
 801ba94:	f043 0320 	orr.w	r3, r3, #32
 801ba98:	b29a      	uxth	r2, r3
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801ba9e:	2300      	movs	r3, #0
 801baa0:	e004      	b.n	801baac <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801baa2:	2101      	movs	r1, #1
 801baa4:	6878      	ldr	r0, [r7, #4]
 801baa6:	f000 f80b 	bl	801bac0 <tcp_enqueue_flags>
 801baaa:	4603      	mov	r3, r0
}
 801baac:	4618      	mov	r0, r3
 801baae:	3714      	adds	r7, #20
 801bab0:	46bd      	mov	sp, r7
 801bab2:	bd90      	pop	{r4, r7, pc}
 801bab4:	08029604 	.word	0x08029604
 801bab8:	08029a0c 	.word	0x08029a0c
 801babc:	08029658 	.word	0x08029658

0801bac0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801bac0:	b580      	push	{r7, lr}
 801bac2:	b08a      	sub	sp, #40	; 0x28
 801bac4:	af02      	add	r7, sp, #8
 801bac6:	6078      	str	r0, [r7, #4]
 801bac8:	460b      	mov	r3, r1
 801baca:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801bacc:	2300      	movs	r3, #0
 801bace:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801bad0:	2300      	movs	r3, #0
 801bad2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801bad4:	78fb      	ldrb	r3, [r7, #3]
 801bad6:	f003 0303 	and.w	r3, r3, #3
 801bada:	2b00      	cmp	r3, #0
 801badc:	d106      	bne.n	801baec <tcp_enqueue_flags+0x2c>
 801bade:	4b67      	ldr	r3, [pc, #412]	; (801bc7c <tcp_enqueue_flags+0x1bc>)
 801bae0:	f240 4211 	movw	r2, #1041	; 0x411
 801bae4:	4966      	ldr	r1, [pc, #408]	; (801bc80 <tcp_enqueue_flags+0x1c0>)
 801bae6:	4867      	ldr	r0, [pc, #412]	; (801bc84 <tcp_enqueue_flags+0x1c4>)
 801bae8:	f008 fa76 	bl	8023fd8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	2b00      	cmp	r3, #0
 801baf0:	d106      	bne.n	801bb00 <tcp_enqueue_flags+0x40>
 801baf2:	4b62      	ldr	r3, [pc, #392]	; (801bc7c <tcp_enqueue_flags+0x1bc>)
 801baf4:	f240 4213 	movw	r2, #1043	; 0x413
 801baf8:	4963      	ldr	r1, [pc, #396]	; (801bc88 <tcp_enqueue_flags+0x1c8>)
 801bafa:	4862      	ldr	r0, [pc, #392]	; (801bc84 <tcp_enqueue_flags+0x1c4>)
 801bafc:	f008 fa6c 	bl	8023fd8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801bb00:	78fb      	ldrb	r3, [r7, #3]
 801bb02:	f003 0302 	and.w	r3, r3, #2
 801bb06:	2b00      	cmp	r3, #0
 801bb08:	d001      	beq.n	801bb0e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801bb0a:	2301      	movs	r3, #1
 801bb0c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801bb0e:	7ffb      	ldrb	r3, [r7, #31]
 801bb10:	009b      	lsls	r3, r3, #2
 801bb12:	b2db      	uxtb	r3, r3
 801bb14:	f003 0304 	and.w	r3, r3, #4
 801bb18:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801bb1a:	7dfb      	ldrb	r3, [r7, #23]
 801bb1c:	b29b      	uxth	r3, r3
 801bb1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bb22:	4619      	mov	r1, r3
 801bb24:	2036      	movs	r0, #54	; 0x36
 801bb26:	f7fa f9cd 	bl	8015ec4 <pbuf_alloc>
 801bb2a:	6138      	str	r0, [r7, #16]
 801bb2c:	693b      	ldr	r3, [r7, #16]
 801bb2e:	2b00      	cmp	r3, #0
 801bb30:	d109      	bne.n	801bb46 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	8b5b      	ldrh	r3, [r3, #26]
 801bb36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bb3a:	b29a      	uxth	r2, r3
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801bb40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bb44:	e095      	b.n	801bc72 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801bb46:	693b      	ldr	r3, [r7, #16]
 801bb48:	895a      	ldrh	r2, [r3, #10]
 801bb4a:	7dfb      	ldrb	r3, [r7, #23]
 801bb4c:	b29b      	uxth	r3, r3
 801bb4e:	429a      	cmp	r2, r3
 801bb50:	d206      	bcs.n	801bb60 <tcp_enqueue_flags+0xa0>
 801bb52:	4b4a      	ldr	r3, [pc, #296]	; (801bc7c <tcp_enqueue_flags+0x1bc>)
 801bb54:	f240 4239 	movw	r2, #1081	; 0x439
 801bb58:	494c      	ldr	r1, [pc, #304]	; (801bc8c <tcp_enqueue_flags+0x1cc>)
 801bb5a:	484a      	ldr	r0, [pc, #296]	; (801bc84 <tcp_enqueue_flags+0x1c4>)
 801bb5c:	f008 fa3c 	bl	8023fd8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801bb64:	78fa      	ldrb	r2, [r7, #3]
 801bb66:	7ffb      	ldrb	r3, [r7, #31]
 801bb68:	9300      	str	r3, [sp, #0]
 801bb6a:	460b      	mov	r3, r1
 801bb6c:	6939      	ldr	r1, [r7, #16]
 801bb6e:	6878      	ldr	r0, [r7, #4]
 801bb70:	f7ff f918 	bl	801ada4 <tcp_create_segment>
 801bb74:	60f8      	str	r0, [r7, #12]
 801bb76:	68fb      	ldr	r3, [r7, #12]
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	d109      	bne.n	801bb90 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	8b5b      	ldrh	r3, [r3, #26]
 801bb80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bb84:	b29a      	uxth	r2, r3
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801bb8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bb8e:	e070      	b.n	801bc72 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801bb90:	68fb      	ldr	r3, [r7, #12]
 801bb92:	68db      	ldr	r3, [r3, #12]
 801bb94:	f003 0303 	and.w	r3, r3, #3
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d006      	beq.n	801bbaa <tcp_enqueue_flags+0xea>
 801bb9c:	4b37      	ldr	r3, [pc, #220]	; (801bc7c <tcp_enqueue_flags+0x1bc>)
 801bb9e:	f240 4242 	movw	r2, #1090	; 0x442
 801bba2:	493b      	ldr	r1, [pc, #236]	; (801bc90 <tcp_enqueue_flags+0x1d0>)
 801bba4:	4837      	ldr	r0, [pc, #220]	; (801bc84 <tcp_enqueue_flags+0x1c4>)
 801bba6:	f008 fa17 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801bbaa:	68fb      	ldr	r3, [r7, #12]
 801bbac:	891b      	ldrh	r3, [r3, #8]
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	d006      	beq.n	801bbc0 <tcp_enqueue_flags+0x100>
 801bbb2:	4b32      	ldr	r3, [pc, #200]	; (801bc7c <tcp_enqueue_flags+0x1bc>)
 801bbb4:	f240 4243 	movw	r2, #1091	; 0x443
 801bbb8:	4936      	ldr	r1, [pc, #216]	; (801bc94 <tcp_enqueue_flags+0x1d4>)
 801bbba:	4832      	ldr	r0, [pc, #200]	; (801bc84 <tcp_enqueue_flags+0x1c4>)
 801bbbc:	f008 fa0c 	bl	8023fd8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801bbc0:	687b      	ldr	r3, [r7, #4]
 801bbc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bbc4:	2b00      	cmp	r3, #0
 801bbc6:	d103      	bne.n	801bbd0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801bbc8:	687b      	ldr	r3, [r7, #4]
 801bbca:	68fa      	ldr	r2, [r7, #12]
 801bbcc:	66da      	str	r2, [r3, #108]	; 0x6c
 801bbce:	e00d      	b.n	801bbec <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bbd4:	61bb      	str	r3, [r7, #24]
 801bbd6:	e002      	b.n	801bbde <tcp_enqueue_flags+0x11e>
 801bbd8:	69bb      	ldr	r3, [r7, #24]
 801bbda:	681b      	ldr	r3, [r3, #0]
 801bbdc:	61bb      	str	r3, [r7, #24]
 801bbde:	69bb      	ldr	r3, [r7, #24]
 801bbe0:	681b      	ldr	r3, [r3, #0]
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	d1f8      	bne.n	801bbd8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801bbe6:	69bb      	ldr	r3, [r7, #24]
 801bbe8:	68fa      	ldr	r2, [r7, #12]
 801bbea:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801bbec:	687b      	ldr	r3, [r7, #4]
 801bbee:	2200      	movs	r2, #0
 801bbf0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801bbf4:	78fb      	ldrb	r3, [r7, #3]
 801bbf6:	f003 0302 	and.w	r3, r3, #2
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d104      	bne.n	801bc08 <tcp_enqueue_flags+0x148>
 801bbfe:	78fb      	ldrb	r3, [r7, #3]
 801bc00:	f003 0301 	and.w	r3, r3, #1
 801bc04:	2b00      	cmp	r3, #0
 801bc06:	d004      	beq.n	801bc12 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801bc08:	687b      	ldr	r3, [r7, #4]
 801bc0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bc0c:	1c5a      	adds	r2, r3, #1
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801bc12:	78fb      	ldrb	r3, [r7, #3]
 801bc14:	f003 0301 	and.w	r3, r3, #1
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	d006      	beq.n	801bc2a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	8b5b      	ldrh	r3, [r3, #26]
 801bc20:	f043 0320 	orr.w	r3, r3, #32
 801bc24:	b29a      	uxth	r2, r3
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801bc2a:	68fb      	ldr	r3, [r7, #12]
 801bc2c:	685b      	ldr	r3, [r3, #4]
 801bc2e:	4618      	mov	r0, r3
 801bc30:	f7fa fcba 	bl	80165a8 <pbuf_clen>
 801bc34:	4603      	mov	r3, r0
 801bc36:	461a      	mov	r2, r3
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bc3e:	4413      	add	r3, r2
 801bc40:	b29a      	uxth	r2, r3
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801bc48:	687b      	ldr	r3, [r7, #4]
 801bc4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	d00e      	beq.n	801bc70 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801bc52:	687b      	ldr	r3, [r7, #4]
 801bc54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bc56:	2b00      	cmp	r3, #0
 801bc58:	d10a      	bne.n	801bc70 <tcp_enqueue_flags+0x1b0>
 801bc5a:	687b      	ldr	r3, [r7, #4]
 801bc5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bc5e:	2b00      	cmp	r3, #0
 801bc60:	d106      	bne.n	801bc70 <tcp_enqueue_flags+0x1b0>
 801bc62:	4b06      	ldr	r3, [pc, #24]	; (801bc7c <tcp_enqueue_flags+0x1bc>)
 801bc64:	f240 4265 	movw	r2, #1125	; 0x465
 801bc68:	490b      	ldr	r1, [pc, #44]	; (801bc98 <tcp_enqueue_flags+0x1d8>)
 801bc6a:	4806      	ldr	r0, [pc, #24]	; (801bc84 <tcp_enqueue_flags+0x1c4>)
 801bc6c:	f008 f9b4 	bl	8023fd8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801bc70:	2300      	movs	r3, #0
}
 801bc72:	4618      	mov	r0, r3
 801bc74:	3720      	adds	r7, #32
 801bc76:	46bd      	mov	sp, r7
 801bc78:	bd80      	pop	{r7, pc}
 801bc7a:	bf00      	nop
 801bc7c:	08029604 	.word	0x08029604
 801bc80:	08029a28 	.word	0x08029a28
 801bc84:	08029658 	.word	0x08029658
 801bc88:	08029a80 	.word	0x08029a80
 801bc8c:	08029aa0 	.word	0x08029aa0
 801bc90:	08029adc 	.word	0x08029adc
 801bc94:	08029af4 	.word	0x08029af4
 801bc98:	08029b20 	.word	0x08029b20

0801bc9c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801bc9c:	b5b0      	push	{r4, r5, r7, lr}
 801bc9e:	b08a      	sub	sp, #40	; 0x28
 801bca0:	af00      	add	r7, sp, #0
 801bca2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801bca4:	687b      	ldr	r3, [r7, #4]
 801bca6:	2b00      	cmp	r3, #0
 801bca8:	d106      	bne.n	801bcb8 <tcp_output+0x1c>
 801bcaa:	4b8a      	ldr	r3, [pc, #552]	; (801bed4 <tcp_output+0x238>)
 801bcac:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801bcb0:	4989      	ldr	r1, [pc, #548]	; (801bed8 <tcp_output+0x23c>)
 801bcb2:	488a      	ldr	r0, [pc, #552]	; (801bedc <tcp_output+0x240>)
 801bcb4:	f008 f990 	bl	8023fd8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801bcb8:	687b      	ldr	r3, [r7, #4]
 801bcba:	7d1b      	ldrb	r3, [r3, #20]
 801bcbc:	2b01      	cmp	r3, #1
 801bcbe:	d106      	bne.n	801bcce <tcp_output+0x32>
 801bcc0:	4b84      	ldr	r3, [pc, #528]	; (801bed4 <tcp_output+0x238>)
 801bcc2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801bcc6:	4986      	ldr	r1, [pc, #536]	; (801bee0 <tcp_output+0x244>)
 801bcc8:	4884      	ldr	r0, [pc, #528]	; (801bedc <tcp_output+0x240>)
 801bcca:	f008 f985 	bl	8023fd8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801bcce:	4b85      	ldr	r3, [pc, #532]	; (801bee4 <tcp_output+0x248>)
 801bcd0:	681b      	ldr	r3, [r3, #0]
 801bcd2:	687a      	ldr	r2, [r7, #4]
 801bcd4:	429a      	cmp	r2, r3
 801bcd6:	d101      	bne.n	801bcdc <tcp_output+0x40>
    return ERR_OK;
 801bcd8:	2300      	movs	r3, #0
 801bcda:	e1ce      	b.n	801c07a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801bce8:	4293      	cmp	r3, r2
 801bcea:	bf28      	it	cs
 801bcec:	4613      	movcs	r3, r2
 801bcee:	b29b      	uxth	r3, r3
 801bcf0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bcf6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801bcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	d10b      	bne.n	801bd16 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	8b5b      	ldrh	r3, [r3, #26]
 801bd02:	f003 0302 	and.w	r3, r3, #2
 801bd06:	2b00      	cmp	r3, #0
 801bd08:	f000 81aa 	beq.w	801c060 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801bd0c:	6878      	ldr	r0, [r7, #4]
 801bd0e:	f000 fdcb 	bl	801c8a8 <tcp_send_empty_ack>
 801bd12:	4603      	mov	r3, r0
 801bd14:	e1b1      	b.n	801c07a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801bd16:	6879      	ldr	r1, [r7, #4]
 801bd18:	687b      	ldr	r3, [r7, #4]
 801bd1a:	3304      	adds	r3, #4
 801bd1c:	461a      	mov	r2, r3
 801bd1e:	6878      	ldr	r0, [r7, #4]
 801bd20:	f7ff f824 	bl	801ad6c <tcp_route>
 801bd24:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801bd26:	697b      	ldr	r3, [r7, #20]
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	d102      	bne.n	801bd32 <tcp_output+0x96>
    return ERR_RTE;
 801bd2c:	f06f 0303 	mvn.w	r3, #3
 801bd30:	e1a3      	b.n	801c07a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801bd32:	687b      	ldr	r3, [r7, #4]
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	d003      	beq.n	801bd40 <tcp_output+0xa4>
 801bd38:	687b      	ldr	r3, [r7, #4]
 801bd3a:	681b      	ldr	r3, [r3, #0]
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	d111      	bne.n	801bd64 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801bd40:	697b      	ldr	r3, [r7, #20]
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d002      	beq.n	801bd4c <tcp_output+0xb0>
 801bd46:	697b      	ldr	r3, [r7, #20]
 801bd48:	3304      	adds	r3, #4
 801bd4a:	e000      	b.n	801bd4e <tcp_output+0xb2>
 801bd4c:	2300      	movs	r3, #0
 801bd4e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801bd50:	693b      	ldr	r3, [r7, #16]
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d102      	bne.n	801bd5c <tcp_output+0xc0>
      return ERR_RTE;
 801bd56:	f06f 0303 	mvn.w	r3, #3
 801bd5a:	e18e      	b.n	801c07a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801bd5c:	693b      	ldr	r3, [r7, #16]
 801bd5e:	681a      	ldr	r2, [r3, #0]
 801bd60:	687b      	ldr	r3, [r7, #4]
 801bd62:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801bd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd66:	68db      	ldr	r3, [r3, #12]
 801bd68:	685b      	ldr	r3, [r3, #4]
 801bd6a:	4618      	mov	r0, r3
 801bd6c:	f7f8 ffa5 	bl	8014cba <lwip_htonl>
 801bd70:	4602      	mov	r2, r0
 801bd72:	687b      	ldr	r3, [r7, #4]
 801bd74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bd76:	1ad3      	subs	r3, r2, r3
 801bd78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bd7a:	8912      	ldrh	r2, [r2, #8]
 801bd7c:	4413      	add	r3, r2
 801bd7e:	69ba      	ldr	r2, [r7, #24]
 801bd80:	429a      	cmp	r2, r3
 801bd82:	d227      	bcs.n	801bdd4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801bd84:	687b      	ldr	r3, [r7, #4]
 801bd86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801bd8a:	461a      	mov	r2, r3
 801bd8c:	69bb      	ldr	r3, [r7, #24]
 801bd8e:	4293      	cmp	r3, r2
 801bd90:	d114      	bne.n	801bdbc <tcp_output+0x120>
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd96:	2b00      	cmp	r3, #0
 801bd98:	d110      	bne.n	801bdbc <tcp_output+0x120>
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d10b      	bne.n	801bdbc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	2200      	movs	r2, #0
 801bda8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      pcb->persist_backoff = 1;
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	2201      	movs	r2, #1
 801bdb0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      pcb->persist_probe = 0;
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	2200      	movs	r2, #0
 801bdb8:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	8b5b      	ldrh	r3, [r3, #26]
 801bdc0:	f003 0302 	and.w	r3, r3, #2
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	f000 814d 	beq.w	801c064 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801bdca:	6878      	ldr	r0, [r7, #4]
 801bdcc:	f000 fd6c 	bl	801c8a8 <tcp_send_empty_ack>
 801bdd0:	4603      	mov	r3, r0
 801bdd2:	e152      	b.n	801c07a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	2200      	movs	r2, #0
 801bdd8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801bddc:	687b      	ldr	r3, [r7, #4]
 801bdde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bde0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801bde2:	6a3b      	ldr	r3, [r7, #32]
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	f000 811c 	beq.w	801c022 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801bdea:	e002      	b.n	801bdf2 <tcp_output+0x156>
 801bdec:	6a3b      	ldr	r3, [r7, #32]
 801bdee:	681b      	ldr	r3, [r3, #0]
 801bdf0:	623b      	str	r3, [r7, #32]
 801bdf2:	6a3b      	ldr	r3, [r7, #32]
 801bdf4:	681b      	ldr	r3, [r3, #0]
 801bdf6:	2b00      	cmp	r3, #0
 801bdf8:	d1f8      	bne.n	801bdec <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801bdfa:	e112      	b.n	801c022 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801bdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bdfe:	68db      	ldr	r3, [r3, #12]
 801be00:	899b      	ldrh	r3, [r3, #12]
 801be02:	b29b      	uxth	r3, r3
 801be04:	4618      	mov	r0, r3
 801be06:	f7f8 ff43 	bl	8014c90 <lwip_htons>
 801be0a:	4603      	mov	r3, r0
 801be0c:	b2db      	uxtb	r3, r3
 801be0e:	f003 0304 	and.w	r3, r3, #4
 801be12:	2b00      	cmp	r3, #0
 801be14:	d006      	beq.n	801be24 <tcp_output+0x188>
 801be16:	4b2f      	ldr	r3, [pc, #188]	; (801bed4 <tcp_output+0x238>)
 801be18:	f240 5236 	movw	r2, #1334	; 0x536
 801be1c:	4932      	ldr	r1, [pc, #200]	; (801bee8 <tcp_output+0x24c>)
 801be1e:	482f      	ldr	r0, [pc, #188]	; (801bedc <tcp_output+0x240>)
 801be20:	f008 f8da 	bl	8023fd8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be28:	2b00      	cmp	r3, #0
 801be2a:	d01f      	beq.n	801be6c <tcp_output+0x1d0>
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	8b5b      	ldrh	r3, [r3, #26]
 801be30:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801be34:	2b00      	cmp	r3, #0
 801be36:	d119      	bne.n	801be6c <tcp_output+0x1d0>
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	d00b      	beq.n	801be58 <tcp_output+0x1bc>
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801be44:	681b      	ldr	r3, [r3, #0]
 801be46:	2b00      	cmp	r3, #0
 801be48:	d110      	bne.n	801be6c <tcp_output+0x1d0>
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801be4e:	891a      	ldrh	r2, [r3, #8]
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801be54:	429a      	cmp	r2, r3
 801be56:	d209      	bcs.n	801be6c <tcp_output+0x1d0>
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801be5e:	2b00      	cmp	r3, #0
 801be60:	d004      	beq.n	801be6c <tcp_output+0x1d0>
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801be68:	2b08      	cmp	r3, #8
 801be6a:	d901      	bls.n	801be70 <tcp_output+0x1d4>
 801be6c:	2301      	movs	r3, #1
 801be6e:	e000      	b.n	801be72 <tcp_output+0x1d6>
 801be70:	2300      	movs	r3, #0
 801be72:	2b00      	cmp	r3, #0
 801be74:	d106      	bne.n	801be84 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801be76:	687b      	ldr	r3, [r7, #4]
 801be78:	8b5b      	ldrh	r3, [r3, #26]
 801be7a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801be7e:	2b00      	cmp	r3, #0
 801be80:	f000 80e4 	beq.w	801c04c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	7d1b      	ldrb	r3, [r3, #20]
 801be88:	2b02      	cmp	r3, #2
 801be8a:	d00d      	beq.n	801bea8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801be8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be8e:	68db      	ldr	r3, [r3, #12]
 801be90:	899b      	ldrh	r3, [r3, #12]
 801be92:	b29c      	uxth	r4, r3
 801be94:	2010      	movs	r0, #16
 801be96:	f7f8 fefb 	bl	8014c90 <lwip_htons>
 801be9a:	4603      	mov	r3, r0
 801be9c:	461a      	mov	r2, r3
 801be9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bea0:	68db      	ldr	r3, [r3, #12]
 801bea2:	4322      	orrs	r2, r4
 801bea4:	b292      	uxth	r2, r2
 801bea6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801bea8:	697a      	ldr	r2, [r7, #20]
 801beaa:	6879      	ldr	r1, [r7, #4]
 801beac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801beae:	f000 f909 	bl	801c0c4 <tcp_output_segment>
 801beb2:	4603      	mov	r3, r0
 801beb4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801beb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801beba:	2b00      	cmp	r3, #0
 801bebc:	d016      	beq.n	801beec <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801bebe:	687b      	ldr	r3, [r7, #4]
 801bec0:	8b5b      	ldrh	r3, [r3, #26]
 801bec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bec6:	b29a      	uxth	r2, r3
 801bec8:	687b      	ldr	r3, [r7, #4]
 801beca:	835a      	strh	r2, [r3, #26]
      return err;
 801becc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bed0:	e0d3      	b.n	801c07a <tcp_output+0x3de>
 801bed2:	bf00      	nop
 801bed4:	08029604 	.word	0x08029604
 801bed8:	08029b48 	.word	0x08029b48
 801bedc:	08029658 	.word	0x08029658
 801bee0:	08029b60 	.word	0x08029b60
 801bee4:	2001327c 	.word	0x2001327c
 801bee8:	08029b88 	.word	0x08029b88
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801beec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801beee:	681a      	ldr	r2, [r3, #0]
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801bef4:	687b      	ldr	r3, [r7, #4]
 801bef6:	7d1b      	ldrb	r3, [r3, #20]
 801bef8:	2b02      	cmp	r3, #2
 801befa:	d006      	beq.n	801bf0a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801befc:	687b      	ldr	r3, [r7, #4]
 801befe:	8b5b      	ldrh	r3, [r3, #26]
 801bf00:	f023 0303 	bic.w	r3, r3, #3
 801bf04:	b29a      	uxth	r2, r3
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801bf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf0c:	68db      	ldr	r3, [r3, #12]
 801bf0e:	685b      	ldr	r3, [r3, #4]
 801bf10:	4618      	mov	r0, r3
 801bf12:	f7f8 fed2 	bl	8014cba <lwip_htonl>
 801bf16:	4604      	mov	r4, r0
 801bf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf1a:	891b      	ldrh	r3, [r3, #8]
 801bf1c:	461d      	mov	r5, r3
 801bf1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf20:	68db      	ldr	r3, [r3, #12]
 801bf22:	899b      	ldrh	r3, [r3, #12]
 801bf24:	b29b      	uxth	r3, r3
 801bf26:	4618      	mov	r0, r3
 801bf28:	f7f8 feb2 	bl	8014c90 <lwip_htons>
 801bf2c:	4603      	mov	r3, r0
 801bf2e:	b2db      	uxtb	r3, r3
 801bf30:	f003 0303 	and.w	r3, r3, #3
 801bf34:	2b00      	cmp	r3, #0
 801bf36:	d001      	beq.n	801bf3c <tcp_output+0x2a0>
 801bf38:	2301      	movs	r3, #1
 801bf3a:	e000      	b.n	801bf3e <tcp_output+0x2a2>
 801bf3c:	2300      	movs	r3, #0
 801bf3e:	442b      	add	r3, r5
 801bf40:	4423      	add	r3, r4
 801bf42:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bf48:	68bb      	ldr	r3, [r7, #8]
 801bf4a:	1ad3      	subs	r3, r2, r3
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	da02      	bge.n	801bf56 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	68ba      	ldr	r2, [r7, #8]
 801bf54:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801bf56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf58:	891b      	ldrh	r3, [r3, #8]
 801bf5a:	461c      	mov	r4, r3
 801bf5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf5e:	68db      	ldr	r3, [r3, #12]
 801bf60:	899b      	ldrh	r3, [r3, #12]
 801bf62:	b29b      	uxth	r3, r3
 801bf64:	4618      	mov	r0, r3
 801bf66:	f7f8 fe93 	bl	8014c90 <lwip_htons>
 801bf6a:	4603      	mov	r3, r0
 801bf6c:	b2db      	uxtb	r3, r3
 801bf6e:	f003 0303 	and.w	r3, r3, #3
 801bf72:	2b00      	cmp	r3, #0
 801bf74:	d001      	beq.n	801bf7a <tcp_output+0x2de>
 801bf76:	2301      	movs	r3, #1
 801bf78:	e000      	b.n	801bf7c <tcp_output+0x2e0>
 801bf7a:	2300      	movs	r3, #0
 801bf7c:	4423      	add	r3, r4
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	d049      	beq.n	801c016 <tcp_output+0x37a>
      seg->next = NULL;
 801bf82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf84:	2200      	movs	r2, #0
 801bf86:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801bf88:	687b      	ldr	r3, [r7, #4]
 801bf8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	d105      	bne.n	801bf9c <tcp_output+0x300>
        pcb->unacked = seg;
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bf94:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801bf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf98:	623b      	str	r3, [r7, #32]
 801bf9a:	e03f      	b.n	801c01c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801bf9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf9e:	68db      	ldr	r3, [r3, #12]
 801bfa0:	685b      	ldr	r3, [r3, #4]
 801bfa2:	4618      	mov	r0, r3
 801bfa4:	f7f8 fe89 	bl	8014cba <lwip_htonl>
 801bfa8:	4604      	mov	r4, r0
 801bfaa:	6a3b      	ldr	r3, [r7, #32]
 801bfac:	68db      	ldr	r3, [r3, #12]
 801bfae:	685b      	ldr	r3, [r3, #4]
 801bfb0:	4618      	mov	r0, r3
 801bfb2:	f7f8 fe82 	bl	8014cba <lwip_htonl>
 801bfb6:	4603      	mov	r3, r0
 801bfb8:	1ae3      	subs	r3, r4, r3
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	da24      	bge.n	801c008 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801bfbe:	687b      	ldr	r3, [r7, #4]
 801bfc0:	3370      	adds	r3, #112	; 0x70
 801bfc2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801bfc4:	e002      	b.n	801bfcc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801bfc6:	69fb      	ldr	r3, [r7, #28]
 801bfc8:	681b      	ldr	r3, [r3, #0]
 801bfca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801bfcc:	69fb      	ldr	r3, [r7, #28]
 801bfce:	681b      	ldr	r3, [r3, #0]
 801bfd0:	2b00      	cmp	r3, #0
 801bfd2:	d011      	beq.n	801bff8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801bfd4:	69fb      	ldr	r3, [r7, #28]
 801bfd6:	681b      	ldr	r3, [r3, #0]
 801bfd8:	68db      	ldr	r3, [r3, #12]
 801bfda:	685b      	ldr	r3, [r3, #4]
 801bfdc:	4618      	mov	r0, r3
 801bfde:	f7f8 fe6c 	bl	8014cba <lwip_htonl>
 801bfe2:	4604      	mov	r4, r0
 801bfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfe6:	68db      	ldr	r3, [r3, #12]
 801bfe8:	685b      	ldr	r3, [r3, #4]
 801bfea:	4618      	mov	r0, r3
 801bfec:	f7f8 fe65 	bl	8014cba <lwip_htonl>
 801bff0:	4603      	mov	r3, r0
 801bff2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	dbe6      	blt.n	801bfc6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801bff8:	69fb      	ldr	r3, [r7, #28]
 801bffa:	681a      	ldr	r2, [r3, #0]
 801bffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bffe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801c000:	69fb      	ldr	r3, [r7, #28]
 801c002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c004:	601a      	str	r2, [r3, #0]
 801c006:	e009      	b.n	801c01c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801c008:	6a3b      	ldr	r3, [r7, #32]
 801c00a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c00c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801c00e:	6a3b      	ldr	r3, [r7, #32]
 801c010:	681b      	ldr	r3, [r3, #0]
 801c012:	623b      	str	r3, [r7, #32]
 801c014:	e002      	b.n	801c01c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801c016:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c018:	f7fb ff01 	bl	8017e1e <tcp_seg_free>
    }
    seg = pcb->unsent;
 801c01c:	687b      	ldr	r3, [r7, #4]
 801c01e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c020:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801c022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c024:	2b00      	cmp	r3, #0
 801c026:	d012      	beq.n	801c04e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801c028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c02a:	68db      	ldr	r3, [r3, #12]
 801c02c:	685b      	ldr	r3, [r3, #4]
 801c02e:	4618      	mov	r0, r3
 801c030:	f7f8 fe43 	bl	8014cba <lwip_htonl>
 801c034:	4602      	mov	r2, r0
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c03a:	1ad3      	subs	r3, r2, r3
 801c03c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c03e:	8912      	ldrh	r2, [r2, #8]
 801c040:	4413      	add	r3, r2
  while (seg != NULL &&
 801c042:	69ba      	ldr	r2, [r7, #24]
 801c044:	429a      	cmp	r2, r3
 801c046:	f4bf aed9 	bcs.w	801bdfc <tcp_output+0x160>
 801c04a:	e000      	b.n	801c04e <tcp_output+0x3b2>
      break;
 801c04c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c052:	2b00      	cmp	r3, #0
 801c054:	d108      	bne.n	801c068 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	2200      	movs	r2, #0
 801c05a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801c05e:	e004      	b.n	801c06a <tcp_output+0x3ce>
    goto output_done;
 801c060:	bf00      	nop
 801c062:	e002      	b.n	801c06a <tcp_output+0x3ce>
    goto output_done;
 801c064:	bf00      	nop
 801c066:	e000      	b.n	801c06a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801c068:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801c06a:	687b      	ldr	r3, [r7, #4]
 801c06c:	8b5b      	ldrh	r3, [r3, #26]
 801c06e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801c072:	b29a      	uxth	r2, r3
 801c074:	687b      	ldr	r3, [r7, #4]
 801c076:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801c078:	2300      	movs	r3, #0
}
 801c07a:	4618      	mov	r0, r3
 801c07c:	3728      	adds	r7, #40	; 0x28
 801c07e:	46bd      	mov	sp, r7
 801c080:	bdb0      	pop	{r4, r5, r7, pc}
 801c082:	bf00      	nop

0801c084 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801c084:	b580      	push	{r7, lr}
 801c086:	b082      	sub	sp, #8
 801c088:	af00      	add	r7, sp, #0
 801c08a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801c08c:	687b      	ldr	r3, [r7, #4]
 801c08e:	2b00      	cmp	r3, #0
 801c090:	d106      	bne.n	801c0a0 <tcp_output_segment_busy+0x1c>
 801c092:	4b09      	ldr	r3, [pc, #36]	; (801c0b8 <tcp_output_segment_busy+0x34>)
 801c094:	f240 529a 	movw	r2, #1434	; 0x59a
 801c098:	4908      	ldr	r1, [pc, #32]	; (801c0bc <tcp_output_segment_busy+0x38>)
 801c09a:	4809      	ldr	r0, [pc, #36]	; (801c0c0 <tcp_output_segment_busy+0x3c>)
 801c09c:	f007 ff9c 	bl	8023fd8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	685b      	ldr	r3, [r3, #4]
 801c0a4:	7b9b      	ldrb	r3, [r3, #14]
 801c0a6:	2b01      	cmp	r3, #1
 801c0a8:	d001      	beq.n	801c0ae <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801c0aa:	2301      	movs	r3, #1
 801c0ac:	e000      	b.n	801c0b0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801c0ae:	2300      	movs	r3, #0
}
 801c0b0:	4618      	mov	r0, r3
 801c0b2:	3708      	adds	r7, #8
 801c0b4:	46bd      	mov	sp, r7
 801c0b6:	bd80      	pop	{r7, pc}
 801c0b8:	08029604 	.word	0x08029604
 801c0bc:	08029ba0 	.word	0x08029ba0
 801c0c0:	08029658 	.word	0x08029658

0801c0c4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801c0c4:	b5b0      	push	{r4, r5, r7, lr}
 801c0c6:	b08c      	sub	sp, #48	; 0x30
 801c0c8:	af04      	add	r7, sp, #16
 801c0ca:	60f8      	str	r0, [r7, #12]
 801c0cc:	60b9      	str	r1, [r7, #8]
 801c0ce:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801c0d0:	68fb      	ldr	r3, [r7, #12]
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d106      	bne.n	801c0e4 <tcp_output_segment+0x20>
 801c0d6:	4b64      	ldr	r3, [pc, #400]	; (801c268 <tcp_output_segment+0x1a4>)
 801c0d8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801c0dc:	4963      	ldr	r1, [pc, #396]	; (801c26c <tcp_output_segment+0x1a8>)
 801c0de:	4864      	ldr	r0, [pc, #400]	; (801c270 <tcp_output_segment+0x1ac>)
 801c0e0:	f007 ff7a 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801c0e4:	68bb      	ldr	r3, [r7, #8]
 801c0e6:	2b00      	cmp	r3, #0
 801c0e8:	d106      	bne.n	801c0f8 <tcp_output_segment+0x34>
 801c0ea:	4b5f      	ldr	r3, [pc, #380]	; (801c268 <tcp_output_segment+0x1a4>)
 801c0ec:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801c0f0:	4960      	ldr	r1, [pc, #384]	; (801c274 <tcp_output_segment+0x1b0>)
 801c0f2:	485f      	ldr	r0, [pc, #380]	; (801c270 <tcp_output_segment+0x1ac>)
 801c0f4:	f007 ff70 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801c0f8:	687b      	ldr	r3, [r7, #4]
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	d106      	bne.n	801c10c <tcp_output_segment+0x48>
 801c0fe:	4b5a      	ldr	r3, [pc, #360]	; (801c268 <tcp_output_segment+0x1a4>)
 801c100:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801c104:	495c      	ldr	r1, [pc, #368]	; (801c278 <tcp_output_segment+0x1b4>)
 801c106:	485a      	ldr	r0, [pc, #360]	; (801c270 <tcp_output_segment+0x1ac>)
 801c108:	f007 ff66 	bl	8023fd8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801c10c:	68f8      	ldr	r0, [r7, #12]
 801c10e:	f7ff ffb9 	bl	801c084 <tcp_output_segment_busy>
 801c112:	4603      	mov	r3, r0
 801c114:	2b00      	cmp	r3, #0
 801c116:	d001      	beq.n	801c11c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801c118:	2300      	movs	r3, #0
 801c11a:	e0a1      	b.n	801c260 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801c11c:	68bb      	ldr	r3, [r7, #8]
 801c11e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c120:	68fb      	ldr	r3, [r7, #12]
 801c122:	68dc      	ldr	r4, [r3, #12]
 801c124:	4610      	mov	r0, r2
 801c126:	f7f8 fdc8 	bl	8014cba <lwip_htonl>
 801c12a:	4603      	mov	r3, r0
 801c12c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801c12e:	68bb      	ldr	r3, [r7, #8]
 801c130:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801c132:	68fb      	ldr	r3, [r7, #12]
 801c134:	68dc      	ldr	r4, [r3, #12]
 801c136:	4610      	mov	r0, r2
 801c138:	f7f8 fdaa 	bl	8014c90 <lwip_htons>
 801c13c:	4603      	mov	r3, r0
 801c13e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801c140:	68bb      	ldr	r3, [r7, #8]
 801c142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c144:	68ba      	ldr	r2, [r7, #8]
 801c146:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801c148:	441a      	add	r2, r3
 801c14a:	68bb      	ldr	r3, [r7, #8]
 801c14c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801c14e:	68fb      	ldr	r3, [r7, #12]
 801c150:	68db      	ldr	r3, [r3, #12]
 801c152:	3314      	adds	r3, #20
 801c154:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801c156:	68fb      	ldr	r3, [r7, #12]
 801c158:	7a9b      	ldrb	r3, [r3, #10]
 801c15a:	f003 0301 	and.w	r3, r3, #1
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d015      	beq.n	801c18e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801c162:	68bb      	ldr	r3, [r7, #8]
 801c164:	3304      	adds	r3, #4
 801c166:	461a      	mov	r2, r3
 801c168:	6879      	ldr	r1, [r7, #4]
 801c16a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801c16e:	f7fc fa25 	bl	80185bc <tcp_eff_send_mss_netif>
 801c172:	4603      	mov	r3, r0
 801c174:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801c176:	8b7b      	ldrh	r3, [r7, #26]
 801c178:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801c17c:	4618      	mov	r0, r3
 801c17e:	f7f8 fd9c 	bl	8014cba <lwip_htonl>
 801c182:	4602      	mov	r2, r0
 801c184:	69fb      	ldr	r3, [r7, #28]
 801c186:	601a      	str	r2, [r3, #0]
    opts += 1;
 801c188:	69fb      	ldr	r3, [r7, #28]
 801c18a:	3304      	adds	r3, #4
 801c18c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801c18e:	68bb      	ldr	r3, [r7, #8]
 801c190:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801c194:	2b00      	cmp	r3, #0
 801c196:	da02      	bge.n	801c19e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801c198:	68bb      	ldr	r3, [r7, #8]
 801c19a:	2200      	movs	r2, #0
 801c19c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801c19e:	68bb      	ldr	r3, [r7, #8]
 801c1a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d10c      	bne.n	801c1c0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801c1a6:	4b35      	ldr	r3, [pc, #212]	; (801c27c <tcp_output_segment+0x1b8>)
 801c1a8:	681a      	ldr	r2, [r3, #0]
 801c1aa:	68bb      	ldr	r3, [r7, #8]
 801c1ac:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801c1ae:	68fb      	ldr	r3, [r7, #12]
 801c1b0:	68db      	ldr	r3, [r3, #12]
 801c1b2:	685b      	ldr	r3, [r3, #4]
 801c1b4:	4618      	mov	r0, r3
 801c1b6:	f7f8 fd80 	bl	8014cba <lwip_htonl>
 801c1ba:	4602      	mov	r2, r0
 801c1bc:	68bb      	ldr	r3, [r7, #8]
 801c1be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801c1c0:	68fb      	ldr	r3, [r7, #12]
 801c1c2:	68da      	ldr	r2, [r3, #12]
 801c1c4:	68fb      	ldr	r3, [r7, #12]
 801c1c6:	685b      	ldr	r3, [r3, #4]
 801c1c8:	685b      	ldr	r3, [r3, #4]
 801c1ca:	1ad3      	subs	r3, r2, r3
 801c1cc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801c1ce:	68fb      	ldr	r3, [r7, #12]
 801c1d0:	685b      	ldr	r3, [r3, #4]
 801c1d2:	8959      	ldrh	r1, [r3, #10]
 801c1d4:	68fb      	ldr	r3, [r7, #12]
 801c1d6:	685b      	ldr	r3, [r3, #4]
 801c1d8:	8b3a      	ldrh	r2, [r7, #24]
 801c1da:	1a8a      	subs	r2, r1, r2
 801c1dc:	b292      	uxth	r2, r2
 801c1de:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801c1e0:	68fb      	ldr	r3, [r7, #12]
 801c1e2:	685b      	ldr	r3, [r3, #4]
 801c1e4:	8919      	ldrh	r1, [r3, #8]
 801c1e6:	68fb      	ldr	r3, [r7, #12]
 801c1e8:	685b      	ldr	r3, [r3, #4]
 801c1ea:	8b3a      	ldrh	r2, [r7, #24]
 801c1ec:	1a8a      	subs	r2, r1, r2
 801c1ee:	b292      	uxth	r2, r2
 801c1f0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801c1f2:	68fb      	ldr	r3, [r7, #12]
 801c1f4:	685b      	ldr	r3, [r3, #4]
 801c1f6:	68fa      	ldr	r2, [r7, #12]
 801c1f8:	68d2      	ldr	r2, [r2, #12]
 801c1fa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801c1fc:	68fb      	ldr	r3, [r7, #12]
 801c1fe:	68db      	ldr	r3, [r3, #12]
 801c200:	2200      	movs	r2, #0
 801c202:	741a      	strb	r2, [r3, #16]
 801c204:	2200      	movs	r2, #0
 801c206:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801c208:	68fb      	ldr	r3, [r7, #12]
 801c20a:	68da      	ldr	r2, [r3, #12]
 801c20c:	68fb      	ldr	r3, [r7, #12]
 801c20e:	7a9b      	ldrb	r3, [r3, #10]
 801c210:	f003 0301 	and.w	r3, r3, #1
 801c214:	2b00      	cmp	r3, #0
 801c216:	d001      	beq.n	801c21c <tcp_output_segment+0x158>
 801c218:	2318      	movs	r3, #24
 801c21a:	e000      	b.n	801c21e <tcp_output_segment+0x15a>
 801c21c:	2314      	movs	r3, #20
 801c21e:	4413      	add	r3, r2
 801c220:	69fa      	ldr	r2, [r7, #28]
 801c222:	429a      	cmp	r2, r3
 801c224:	d006      	beq.n	801c234 <tcp_output_segment+0x170>
 801c226:	4b10      	ldr	r3, [pc, #64]	; (801c268 <tcp_output_segment+0x1a4>)
 801c228:	f240 621c 	movw	r2, #1564	; 0x61c
 801c22c:	4914      	ldr	r1, [pc, #80]	; (801c280 <tcp_output_segment+0x1bc>)
 801c22e:	4810      	ldr	r0, [pc, #64]	; (801c270 <tcp_output_segment+0x1ac>)
 801c230:	f007 fed2 	bl	8023fd8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801c234:	68fb      	ldr	r3, [r7, #12]
 801c236:	6858      	ldr	r0, [r3, #4]
 801c238:	68b9      	ldr	r1, [r7, #8]
 801c23a:	68bb      	ldr	r3, [r7, #8]
 801c23c:	1d1c      	adds	r4, r3, #4
 801c23e:	68bb      	ldr	r3, [r7, #8]
 801c240:	7add      	ldrb	r5, [r3, #11]
 801c242:	68bb      	ldr	r3, [r7, #8]
 801c244:	7a9b      	ldrb	r3, [r3, #10]
 801c246:	687a      	ldr	r2, [r7, #4]
 801c248:	9202      	str	r2, [sp, #8]
 801c24a:	2206      	movs	r2, #6
 801c24c:	9201      	str	r2, [sp, #4]
 801c24e:	9300      	str	r3, [sp, #0]
 801c250:	462b      	mov	r3, r5
 801c252:	4622      	mov	r2, r4
 801c254:	f004 fc3e 	bl	8020ad4 <ip4_output_if>
 801c258:	4603      	mov	r3, r0
 801c25a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801c25c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c260:	4618      	mov	r0, r3
 801c262:	3720      	adds	r7, #32
 801c264:	46bd      	mov	sp, r7
 801c266:	bdb0      	pop	{r4, r5, r7, pc}
 801c268:	08029604 	.word	0x08029604
 801c26c:	08029bc8 	.word	0x08029bc8
 801c270:	08029658 	.word	0x08029658
 801c274:	08029be8 	.word	0x08029be8
 801c278:	08029c08 	.word	0x08029c08
 801c27c:	20013230 	.word	0x20013230
 801c280:	08029c2c 	.word	0x08029c2c

0801c284 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801c284:	b5b0      	push	{r4, r5, r7, lr}
 801c286:	b084      	sub	sp, #16
 801c288:	af00      	add	r7, sp, #0
 801c28a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	2b00      	cmp	r3, #0
 801c290:	d106      	bne.n	801c2a0 <tcp_rexmit_rto_prepare+0x1c>
 801c292:	4b31      	ldr	r3, [pc, #196]	; (801c358 <tcp_rexmit_rto_prepare+0xd4>)
 801c294:	f240 6263 	movw	r2, #1635	; 0x663
 801c298:	4930      	ldr	r1, [pc, #192]	; (801c35c <tcp_rexmit_rto_prepare+0xd8>)
 801c29a:	4831      	ldr	r0, [pc, #196]	; (801c360 <tcp_rexmit_rto_prepare+0xdc>)
 801c29c:	f007 fe9c 	bl	8023fd8 <iprintf>

  if (pcb->unacked == NULL) {
 801c2a0:	687b      	ldr	r3, [r7, #4]
 801c2a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c2a4:	2b00      	cmp	r3, #0
 801c2a6:	d102      	bne.n	801c2ae <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801c2a8:	f06f 0305 	mvn.w	r3, #5
 801c2ac:	e050      	b.n	801c350 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c2b2:	60fb      	str	r3, [r7, #12]
 801c2b4:	e00b      	b.n	801c2ce <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801c2b6:	68f8      	ldr	r0, [r7, #12]
 801c2b8:	f7ff fee4 	bl	801c084 <tcp_output_segment_busy>
 801c2bc:	4603      	mov	r3, r0
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d002      	beq.n	801c2c8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801c2c2:	f06f 0305 	mvn.w	r3, #5
 801c2c6:	e043      	b.n	801c350 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	681b      	ldr	r3, [r3, #0]
 801c2cc:	60fb      	str	r3, [r7, #12]
 801c2ce:	68fb      	ldr	r3, [r7, #12]
 801c2d0:	681b      	ldr	r3, [r3, #0]
 801c2d2:	2b00      	cmp	r3, #0
 801c2d4:	d1ef      	bne.n	801c2b6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801c2d6:	68f8      	ldr	r0, [r7, #12]
 801c2d8:	f7ff fed4 	bl	801c084 <tcp_output_segment_busy>
 801c2dc:	4603      	mov	r3, r0
 801c2de:	2b00      	cmp	r3, #0
 801c2e0:	d002      	beq.n	801c2e8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801c2e2:	f06f 0305 	mvn.w	r3, #5
 801c2e6:	e033      	b.n	801c350 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801c2e8:	687b      	ldr	r3, [r7, #4]
 801c2ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801c2ec:	68fb      	ldr	r3, [r7, #12]
 801c2ee:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801c2f0:	687b      	ldr	r3, [r7, #4]
 801c2f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801c2f8:	687b      	ldr	r3, [r7, #4]
 801c2fa:	2200      	movs	r2, #0
 801c2fc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	8b5b      	ldrh	r3, [r3, #26]
 801c302:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801c306:	b29a      	uxth	r2, r3
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801c30c:	68fb      	ldr	r3, [r7, #12]
 801c30e:	68db      	ldr	r3, [r3, #12]
 801c310:	685b      	ldr	r3, [r3, #4]
 801c312:	4618      	mov	r0, r3
 801c314:	f7f8 fcd1 	bl	8014cba <lwip_htonl>
 801c318:	4604      	mov	r4, r0
 801c31a:	68fb      	ldr	r3, [r7, #12]
 801c31c:	891b      	ldrh	r3, [r3, #8]
 801c31e:	461d      	mov	r5, r3
 801c320:	68fb      	ldr	r3, [r7, #12]
 801c322:	68db      	ldr	r3, [r3, #12]
 801c324:	899b      	ldrh	r3, [r3, #12]
 801c326:	b29b      	uxth	r3, r3
 801c328:	4618      	mov	r0, r3
 801c32a:	f7f8 fcb1 	bl	8014c90 <lwip_htons>
 801c32e:	4603      	mov	r3, r0
 801c330:	b2db      	uxtb	r3, r3
 801c332:	f003 0303 	and.w	r3, r3, #3
 801c336:	2b00      	cmp	r3, #0
 801c338:	d001      	beq.n	801c33e <tcp_rexmit_rto_prepare+0xba>
 801c33a:	2301      	movs	r3, #1
 801c33c:	e000      	b.n	801c340 <tcp_rexmit_rto_prepare+0xbc>
 801c33e:	2300      	movs	r3, #0
 801c340:	442b      	add	r3, r5
 801c342:	18e2      	adds	r2, r4, r3
 801c344:	687b      	ldr	r3, [r7, #4]
 801c346:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	2200      	movs	r2, #0
 801c34c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801c34e:	2300      	movs	r3, #0
}
 801c350:	4618      	mov	r0, r3
 801c352:	3710      	adds	r7, #16
 801c354:	46bd      	mov	sp, r7
 801c356:	bdb0      	pop	{r4, r5, r7, pc}
 801c358:	08029604 	.word	0x08029604
 801c35c:	08029c40 	.word	0x08029c40
 801c360:	08029658 	.word	0x08029658

0801c364 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801c364:	b580      	push	{r7, lr}
 801c366:	b082      	sub	sp, #8
 801c368:	af00      	add	r7, sp, #0
 801c36a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	2b00      	cmp	r3, #0
 801c370:	d106      	bne.n	801c380 <tcp_rexmit_rto_commit+0x1c>
 801c372:	4b0d      	ldr	r3, [pc, #52]	; (801c3a8 <tcp_rexmit_rto_commit+0x44>)
 801c374:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801c378:	490c      	ldr	r1, [pc, #48]	; (801c3ac <tcp_rexmit_rto_commit+0x48>)
 801c37a:	480d      	ldr	r0, [pc, #52]	; (801c3b0 <tcp_rexmit_rto_commit+0x4c>)
 801c37c:	f007 fe2c 	bl	8023fd8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c386:	2bff      	cmp	r3, #255	; 0xff
 801c388:	d007      	beq.n	801c39a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801c38a:	687b      	ldr	r3, [r7, #4]
 801c38c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c390:	3301      	adds	r3, #1
 801c392:	b2da      	uxtb	r2, r3
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801c39a:	6878      	ldr	r0, [r7, #4]
 801c39c:	f7ff fc7e 	bl	801bc9c <tcp_output>
}
 801c3a0:	bf00      	nop
 801c3a2:	3708      	adds	r7, #8
 801c3a4:	46bd      	mov	sp, r7
 801c3a6:	bd80      	pop	{r7, pc}
 801c3a8:	08029604 	.word	0x08029604
 801c3ac:	08029c64 	.word	0x08029c64
 801c3b0:	08029658 	.word	0x08029658

0801c3b4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801c3b4:	b580      	push	{r7, lr}
 801c3b6:	b082      	sub	sp, #8
 801c3b8:	af00      	add	r7, sp, #0
 801c3ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	2b00      	cmp	r3, #0
 801c3c0:	d106      	bne.n	801c3d0 <tcp_rexmit_rto+0x1c>
 801c3c2:	4b0a      	ldr	r3, [pc, #40]	; (801c3ec <tcp_rexmit_rto+0x38>)
 801c3c4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801c3c8:	4909      	ldr	r1, [pc, #36]	; (801c3f0 <tcp_rexmit_rto+0x3c>)
 801c3ca:	480a      	ldr	r0, [pc, #40]	; (801c3f4 <tcp_rexmit_rto+0x40>)
 801c3cc:	f007 fe04 	bl	8023fd8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801c3d0:	6878      	ldr	r0, [r7, #4]
 801c3d2:	f7ff ff57 	bl	801c284 <tcp_rexmit_rto_prepare>
 801c3d6:	4603      	mov	r3, r0
 801c3d8:	2b00      	cmp	r3, #0
 801c3da:	d102      	bne.n	801c3e2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801c3dc:	6878      	ldr	r0, [r7, #4]
 801c3de:	f7ff ffc1 	bl	801c364 <tcp_rexmit_rto_commit>
  }
}
 801c3e2:	bf00      	nop
 801c3e4:	3708      	adds	r7, #8
 801c3e6:	46bd      	mov	sp, r7
 801c3e8:	bd80      	pop	{r7, pc}
 801c3ea:	bf00      	nop
 801c3ec:	08029604 	.word	0x08029604
 801c3f0:	08029c88 	.word	0x08029c88
 801c3f4:	08029658 	.word	0x08029658

0801c3f8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801c3f8:	b590      	push	{r4, r7, lr}
 801c3fa:	b085      	sub	sp, #20
 801c3fc:	af00      	add	r7, sp, #0
 801c3fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	2b00      	cmp	r3, #0
 801c404:	d106      	bne.n	801c414 <tcp_rexmit+0x1c>
 801c406:	4b2f      	ldr	r3, [pc, #188]	; (801c4c4 <tcp_rexmit+0xcc>)
 801c408:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801c40c:	492e      	ldr	r1, [pc, #184]	; (801c4c8 <tcp_rexmit+0xd0>)
 801c40e:	482f      	ldr	r0, [pc, #188]	; (801c4cc <tcp_rexmit+0xd4>)
 801c410:	f007 fde2 	bl	8023fd8 <iprintf>

  if (pcb->unacked == NULL) {
 801c414:	687b      	ldr	r3, [r7, #4]
 801c416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d102      	bne.n	801c422 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801c41c:	f06f 0305 	mvn.w	r3, #5
 801c420:	e04c      	b.n	801c4bc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c426:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801c428:	68b8      	ldr	r0, [r7, #8]
 801c42a:	f7ff fe2b 	bl	801c084 <tcp_output_segment_busy>
 801c42e:	4603      	mov	r3, r0
 801c430:	2b00      	cmp	r3, #0
 801c432:	d002      	beq.n	801c43a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801c434:	f06f 0305 	mvn.w	r3, #5
 801c438:	e040      	b.n	801c4bc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801c43a:	68bb      	ldr	r3, [r7, #8]
 801c43c:	681a      	ldr	r2, [r3, #0]
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801c442:	687b      	ldr	r3, [r7, #4]
 801c444:	336c      	adds	r3, #108	; 0x6c
 801c446:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801c448:	e002      	b.n	801c450 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801c44a:	68fb      	ldr	r3, [r7, #12]
 801c44c:	681b      	ldr	r3, [r3, #0]
 801c44e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801c450:	68fb      	ldr	r3, [r7, #12]
 801c452:	681b      	ldr	r3, [r3, #0]
 801c454:	2b00      	cmp	r3, #0
 801c456:	d011      	beq.n	801c47c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801c458:	68fb      	ldr	r3, [r7, #12]
 801c45a:	681b      	ldr	r3, [r3, #0]
 801c45c:	68db      	ldr	r3, [r3, #12]
 801c45e:	685b      	ldr	r3, [r3, #4]
 801c460:	4618      	mov	r0, r3
 801c462:	f7f8 fc2a 	bl	8014cba <lwip_htonl>
 801c466:	4604      	mov	r4, r0
 801c468:	68bb      	ldr	r3, [r7, #8]
 801c46a:	68db      	ldr	r3, [r3, #12]
 801c46c:	685b      	ldr	r3, [r3, #4]
 801c46e:	4618      	mov	r0, r3
 801c470:	f7f8 fc23 	bl	8014cba <lwip_htonl>
 801c474:	4603      	mov	r3, r0
 801c476:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801c478:	2b00      	cmp	r3, #0
 801c47a:	dbe6      	blt.n	801c44a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801c47c:	68fb      	ldr	r3, [r7, #12]
 801c47e:	681a      	ldr	r2, [r3, #0]
 801c480:	68bb      	ldr	r3, [r7, #8]
 801c482:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801c484:	68fb      	ldr	r3, [r7, #12]
 801c486:	68ba      	ldr	r2, [r7, #8]
 801c488:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801c48a:	68bb      	ldr	r3, [r7, #8]
 801c48c:	681b      	ldr	r3, [r3, #0]
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d103      	bne.n	801c49a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	2200      	movs	r2, #0
 801c496:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801c49a:	687b      	ldr	r3, [r7, #4]
 801c49c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c4a0:	2bff      	cmp	r3, #255	; 0xff
 801c4a2:	d007      	beq.n	801c4b4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801c4a4:	687b      	ldr	r3, [r7, #4]
 801c4a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c4aa:	3301      	adds	r3, #1
 801c4ac:	b2da      	uxtb	r2, r3
 801c4ae:	687b      	ldr	r3, [r7, #4]
 801c4b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	2200      	movs	r2, #0
 801c4b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801c4ba:	2300      	movs	r3, #0
}
 801c4bc:	4618      	mov	r0, r3
 801c4be:	3714      	adds	r7, #20
 801c4c0:	46bd      	mov	sp, r7
 801c4c2:	bd90      	pop	{r4, r7, pc}
 801c4c4:	08029604 	.word	0x08029604
 801c4c8:	08029ca4 	.word	0x08029ca4
 801c4cc:	08029658 	.word	0x08029658

0801c4d0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801c4d0:	b580      	push	{r7, lr}
 801c4d2:	b082      	sub	sp, #8
 801c4d4:	af00      	add	r7, sp, #0
 801c4d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	d106      	bne.n	801c4ec <tcp_rexmit_fast+0x1c>
 801c4de:	4b2a      	ldr	r3, [pc, #168]	; (801c588 <tcp_rexmit_fast+0xb8>)
 801c4e0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801c4e4:	4929      	ldr	r1, [pc, #164]	; (801c58c <tcp_rexmit_fast+0xbc>)
 801c4e6:	482a      	ldr	r0, [pc, #168]	; (801c590 <tcp_rexmit_fast+0xc0>)
 801c4e8:	f007 fd76 	bl	8023fd8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d044      	beq.n	801c57e <tcp_rexmit_fast+0xae>
 801c4f4:	687b      	ldr	r3, [r7, #4]
 801c4f6:	8b5b      	ldrh	r3, [r3, #26]
 801c4f8:	f003 0304 	and.w	r3, r3, #4
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	d13e      	bne.n	801c57e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801c500:	6878      	ldr	r0, [r7, #4]
 801c502:	f7ff ff79 	bl	801c3f8 <tcp_rexmit>
 801c506:	4603      	mov	r3, r0
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d138      	bne.n	801c57e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801c50c:	687b      	ldr	r3, [r7, #4]
 801c50e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801c512:	687b      	ldr	r3, [r7, #4]
 801c514:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c518:	4293      	cmp	r3, r2
 801c51a:	bf28      	it	cs
 801c51c:	4613      	movcs	r3, r2
 801c51e:	b29b      	uxth	r3, r3
 801c520:	0fda      	lsrs	r2, r3, #31
 801c522:	4413      	add	r3, r2
 801c524:	105b      	asrs	r3, r3, #1
 801c526:	b29a      	uxth	r2, r3
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801c534:	461a      	mov	r2, r3
 801c536:	687b      	ldr	r3, [r7, #4]
 801c538:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c53a:	005b      	lsls	r3, r3, #1
 801c53c:	429a      	cmp	r2, r3
 801c53e:	d206      	bcs.n	801c54e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c544:	005b      	lsls	r3, r3, #1
 801c546:	b29a      	uxth	r2, r3
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c558:	4619      	mov	r1, r3
 801c55a:	0049      	lsls	r1, r1, #1
 801c55c:	440b      	add	r3, r1
 801c55e:	b29b      	uxth	r3, r3
 801c560:	4413      	add	r3, r2
 801c562:	b29a      	uxth	r2, r3
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	8b5b      	ldrh	r3, [r3, #26]
 801c56e:	f043 0304 	orr.w	r3, r3, #4
 801c572:	b29a      	uxth	r2, r3
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	2200      	movs	r2, #0
 801c57c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801c57e:	bf00      	nop
 801c580:	3708      	adds	r7, #8
 801c582:	46bd      	mov	sp, r7
 801c584:	bd80      	pop	{r7, pc}
 801c586:	bf00      	nop
 801c588:	08029604 	.word	0x08029604
 801c58c:	08029cbc 	.word	0x08029cbc
 801c590:	08029658 	.word	0x08029658

0801c594 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801c594:	b580      	push	{r7, lr}
 801c596:	b086      	sub	sp, #24
 801c598:	af00      	add	r7, sp, #0
 801c59a:	60f8      	str	r0, [r7, #12]
 801c59c:	607b      	str	r3, [r7, #4]
 801c59e:	460b      	mov	r3, r1
 801c5a0:	817b      	strh	r3, [r7, #10]
 801c5a2:	4613      	mov	r3, r2
 801c5a4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801c5a6:	897a      	ldrh	r2, [r7, #10]
 801c5a8:	893b      	ldrh	r3, [r7, #8]
 801c5aa:	4413      	add	r3, r2
 801c5ac:	b29b      	uxth	r3, r3
 801c5ae:	3314      	adds	r3, #20
 801c5b0:	b29b      	uxth	r3, r3
 801c5b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c5b6:	4619      	mov	r1, r3
 801c5b8:	2022      	movs	r0, #34	; 0x22
 801c5ba:	f7f9 fc83 	bl	8015ec4 <pbuf_alloc>
 801c5be:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801c5c0:	697b      	ldr	r3, [r7, #20]
 801c5c2:	2b00      	cmp	r3, #0
 801c5c4:	d04d      	beq.n	801c662 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801c5c6:	897b      	ldrh	r3, [r7, #10]
 801c5c8:	3313      	adds	r3, #19
 801c5ca:	697a      	ldr	r2, [r7, #20]
 801c5cc:	8952      	ldrh	r2, [r2, #10]
 801c5ce:	4293      	cmp	r3, r2
 801c5d0:	db06      	blt.n	801c5e0 <tcp_output_alloc_header_common+0x4c>
 801c5d2:	4b26      	ldr	r3, [pc, #152]	; (801c66c <tcp_output_alloc_header_common+0xd8>)
 801c5d4:	f240 7223 	movw	r2, #1827	; 0x723
 801c5d8:	4925      	ldr	r1, [pc, #148]	; (801c670 <tcp_output_alloc_header_common+0xdc>)
 801c5da:	4826      	ldr	r0, [pc, #152]	; (801c674 <tcp_output_alloc_header_common+0xe0>)
 801c5dc:	f007 fcfc 	bl	8023fd8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801c5e0:	697b      	ldr	r3, [r7, #20]
 801c5e2:	685b      	ldr	r3, [r3, #4]
 801c5e4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801c5e6:	8c3b      	ldrh	r3, [r7, #32]
 801c5e8:	4618      	mov	r0, r3
 801c5ea:	f7f8 fb51 	bl	8014c90 <lwip_htons>
 801c5ee:	4603      	mov	r3, r0
 801c5f0:	461a      	mov	r2, r3
 801c5f2:	693b      	ldr	r3, [r7, #16]
 801c5f4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801c5f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c5f8:	4618      	mov	r0, r3
 801c5fa:	f7f8 fb49 	bl	8014c90 <lwip_htons>
 801c5fe:	4603      	mov	r3, r0
 801c600:	461a      	mov	r2, r3
 801c602:	693b      	ldr	r3, [r7, #16]
 801c604:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801c606:	693b      	ldr	r3, [r7, #16]
 801c608:	687a      	ldr	r2, [r7, #4]
 801c60a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801c60c:	68f8      	ldr	r0, [r7, #12]
 801c60e:	f7f8 fb54 	bl	8014cba <lwip_htonl>
 801c612:	4602      	mov	r2, r0
 801c614:	693b      	ldr	r3, [r7, #16]
 801c616:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801c618:	897b      	ldrh	r3, [r7, #10]
 801c61a:	089b      	lsrs	r3, r3, #2
 801c61c:	b29b      	uxth	r3, r3
 801c61e:	3305      	adds	r3, #5
 801c620:	b29b      	uxth	r3, r3
 801c622:	031b      	lsls	r3, r3, #12
 801c624:	b29a      	uxth	r2, r3
 801c626:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c62a:	b29b      	uxth	r3, r3
 801c62c:	4313      	orrs	r3, r2
 801c62e:	b29b      	uxth	r3, r3
 801c630:	4618      	mov	r0, r3
 801c632:	f7f8 fb2d 	bl	8014c90 <lwip_htons>
 801c636:	4603      	mov	r3, r0
 801c638:	461a      	mov	r2, r3
 801c63a:	693b      	ldr	r3, [r7, #16]
 801c63c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801c63e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801c640:	4618      	mov	r0, r3
 801c642:	f7f8 fb25 	bl	8014c90 <lwip_htons>
 801c646:	4603      	mov	r3, r0
 801c648:	461a      	mov	r2, r3
 801c64a:	693b      	ldr	r3, [r7, #16]
 801c64c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801c64e:	693b      	ldr	r3, [r7, #16]
 801c650:	2200      	movs	r2, #0
 801c652:	741a      	strb	r2, [r3, #16]
 801c654:	2200      	movs	r2, #0
 801c656:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801c658:	693b      	ldr	r3, [r7, #16]
 801c65a:	2200      	movs	r2, #0
 801c65c:	749a      	strb	r2, [r3, #18]
 801c65e:	2200      	movs	r2, #0
 801c660:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801c662:	697b      	ldr	r3, [r7, #20]
}
 801c664:	4618      	mov	r0, r3
 801c666:	3718      	adds	r7, #24
 801c668:	46bd      	mov	sp, r7
 801c66a:	bd80      	pop	{r7, pc}
 801c66c:	08029604 	.word	0x08029604
 801c670:	08029cdc 	.word	0x08029cdc
 801c674:	08029658 	.word	0x08029658

0801c678 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801c678:	b5b0      	push	{r4, r5, r7, lr}
 801c67a:	b08a      	sub	sp, #40	; 0x28
 801c67c:	af04      	add	r7, sp, #16
 801c67e:	60f8      	str	r0, [r7, #12]
 801c680:	607b      	str	r3, [r7, #4]
 801c682:	460b      	mov	r3, r1
 801c684:	817b      	strh	r3, [r7, #10]
 801c686:	4613      	mov	r3, r2
 801c688:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801c68a:	68fb      	ldr	r3, [r7, #12]
 801c68c:	2b00      	cmp	r3, #0
 801c68e:	d106      	bne.n	801c69e <tcp_output_alloc_header+0x26>
 801c690:	4b15      	ldr	r3, [pc, #84]	; (801c6e8 <tcp_output_alloc_header+0x70>)
 801c692:	f240 7242 	movw	r2, #1858	; 0x742
 801c696:	4915      	ldr	r1, [pc, #84]	; (801c6ec <tcp_output_alloc_header+0x74>)
 801c698:	4815      	ldr	r0, [pc, #84]	; (801c6f0 <tcp_output_alloc_header+0x78>)
 801c69a:	f007 fc9d 	bl	8023fd8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801c69e:	68fb      	ldr	r3, [r7, #12]
 801c6a0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801c6a2:	68fb      	ldr	r3, [r7, #12]
 801c6a4:	8adb      	ldrh	r3, [r3, #22]
 801c6a6:	68fa      	ldr	r2, [r7, #12]
 801c6a8:	8b12      	ldrh	r2, [r2, #24]
 801c6aa:	68f9      	ldr	r1, [r7, #12]
 801c6ac:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801c6ae:	893d      	ldrh	r5, [r7, #8]
 801c6b0:	897c      	ldrh	r4, [r7, #10]
 801c6b2:	9103      	str	r1, [sp, #12]
 801c6b4:	2110      	movs	r1, #16
 801c6b6:	9102      	str	r1, [sp, #8]
 801c6b8:	9201      	str	r2, [sp, #4]
 801c6ba:	9300      	str	r3, [sp, #0]
 801c6bc:	687b      	ldr	r3, [r7, #4]
 801c6be:	462a      	mov	r2, r5
 801c6c0:	4621      	mov	r1, r4
 801c6c2:	f7ff ff67 	bl	801c594 <tcp_output_alloc_header_common>
 801c6c6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801c6c8:	697b      	ldr	r3, [r7, #20]
 801c6ca:	2b00      	cmp	r3, #0
 801c6cc:	d006      	beq.n	801c6dc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801c6ce:	68fb      	ldr	r3, [r7, #12]
 801c6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c6d2:	68fa      	ldr	r2, [r7, #12]
 801c6d4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801c6d6:	441a      	add	r2, r3
 801c6d8:	68fb      	ldr	r3, [r7, #12]
 801c6da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801c6dc:	697b      	ldr	r3, [r7, #20]
}
 801c6de:	4618      	mov	r0, r3
 801c6e0:	3718      	adds	r7, #24
 801c6e2:	46bd      	mov	sp, r7
 801c6e4:	bdb0      	pop	{r4, r5, r7, pc}
 801c6e6:	bf00      	nop
 801c6e8:	08029604 	.word	0x08029604
 801c6ec:	08029d0c 	.word	0x08029d0c
 801c6f0:	08029658 	.word	0x08029658

0801c6f4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801c6f4:	b580      	push	{r7, lr}
 801c6f6:	b088      	sub	sp, #32
 801c6f8:	af00      	add	r7, sp, #0
 801c6fa:	60f8      	str	r0, [r7, #12]
 801c6fc:	60b9      	str	r1, [r7, #8]
 801c6fe:	4611      	mov	r1, r2
 801c700:	461a      	mov	r2, r3
 801c702:	460b      	mov	r3, r1
 801c704:	71fb      	strb	r3, [r7, #7]
 801c706:	4613      	mov	r3, r2
 801c708:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801c70a:	2300      	movs	r3, #0
 801c70c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801c70e:	68bb      	ldr	r3, [r7, #8]
 801c710:	2b00      	cmp	r3, #0
 801c712:	d106      	bne.n	801c722 <tcp_output_fill_options+0x2e>
 801c714:	4b12      	ldr	r3, [pc, #72]	; (801c760 <tcp_output_fill_options+0x6c>)
 801c716:	f240 7256 	movw	r2, #1878	; 0x756
 801c71a:	4912      	ldr	r1, [pc, #72]	; (801c764 <tcp_output_fill_options+0x70>)
 801c71c:	4812      	ldr	r0, [pc, #72]	; (801c768 <tcp_output_fill_options+0x74>)
 801c71e:	f007 fc5b 	bl	8023fd8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801c722:	68bb      	ldr	r3, [r7, #8]
 801c724:	685b      	ldr	r3, [r3, #4]
 801c726:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801c728:	69bb      	ldr	r3, [r7, #24]
 801c72a:	3314      	adds	r3, #20
 801c72c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801c72e:	8bfb      	ldrh	r3, [r7, #30]
 801c730:	009b      	lsls	r3, r3, #2
 801c732:	461a      	mov	r2, r3
 801c734:	79fb      	ldrb	r3, [r7, #7]
 801c736:	009b      	lsls	r3, r3, #2
 801c738:	f003 0304 	and.w	r3, r3, #4
 801c73c:	4413      	add	r3, r2
 801c73e:	3314      	adds	r3, #20
 801c740:	69ba      	ldr	r2, [r7, #24]
 801c742:	4413      	add	r3, r2
 801c744:	697a      	ldr	r2, [r7, #20]
 801c746:	429a      	cmp	r2, r3
 801c748:	d006      	beq.n	801c758 <tcp_output_fill_options+0x64>
 801c74a:	4b05      	ldr	r3, [pc, #20]	; (801c760 <tcp_output_fill_options+0x6c>)
 801c74c:	f240 7275 	movw	r2, #1909	; 0x775
 801c750:	4906      	ldr	r1, [pc, #24]	; (801c76c <tcp_output_fill_options+0x78>)
 801c752:	4805      	ldr	r0, [pc, #20]	; (801c768 <tcp_output_fill_options+0x74>)
 801c754:	f007 fc40 	bl	8023fd8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801c758:	bf00      	nop
 801c75a:	3720      	adds	r7, #32
 801c75c:	46bd      	mov	sp, r7
 801c75e:	bd80      	pop	{r7, pc}
 801c760:	08029604 	.word	0x08029604
 801c764:	08029d34 	.word	0x08029d34
 801c768:	08029658 	.word	0x08029658
 801c76c:	08029c2c 	.word	0x08029c2c

0801c770 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801c770:	b580      	push	{r7, lr}
 801c772:	b08a      	sub	sp, #40	; 0x28
 801c774:	af04      	add	r7, sp, #16
 801c776:	60f8      	str	r0, [r7, #12]
 801c778:	60b9      	str	r1, [r7, #8]
 801c77a:	607a      	str	r2, [r7, #4]
 801c77c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801c77e:	68bb      	ldr	r3, [r7, #8]
 801c780:	2b00      	cmp	r3, #0
 801c782:	d106      	bne.n	801c792 <tcp_output_control_segment+0x22>
 801c784:	4b1c      	ldr	r3, [pc, #112]	; (801c7f8 <tcp_output_control_segment+0x88>)
 801c786:	f240 7287 	movw	r2, #1927	; 0x787
 801c78a:	491c      	ldr	r1, [pc, #112]	; (801c7fc <tcp_output_control_segment+0x8c>)
 801c78c:	481c      	ldr	r0, [pc, #112]	; (801c800 <tcp_output_control_segment+0x90>)
 801c78e:	f007 fc23 	bl	8023fd8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801c792:	683a      	ldr	r2, [r7, #0]
 801c794:	6879      	ldr	r1, [r7, #4]
 801c796:	68f8      	ldr	r0, [r7, #12]
 801c798:	f7fe fae8 	bl	801ad6c <tcp_route>
 801c79c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801c79e:	693b      	ldr	r3, [r7, #16]
 801c7a0:	2b00      	cmp	r3, #0
 801c7a2:	d102      	bne.n	801c7aa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801c7a4:	23fc      	movs	r3, #252	; 0xfc
 801c7a6:	75fb      	strb	r3, [r7, #23]
 801c7a8:	e01c      	b.n	801c7e4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801c7aa:	68fb      	ldr	r3, [r7, #12]
 801c7ac:	2b00      	cmp	r3, #0
 801c7ae:	d006      	beq.n	801c7be <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801c7b0:	68fb      	ldr	r3, [r7, #12]
 801c7b2:	7adb      	ldrb	r3, [r3, #11]
 801c7b4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801c7b6:	68fb      	ldr	r3, [r7, #12]
 801c7b8:	7a9b      	ldrb	r3, [r3, #10]
 801c7ba:	757b      	strb	r3, [r7, #21]
 801c7bc:	e003      	b.n	801c7c6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801c7be:	23ff      	movs	r3, #255	; 0xff
 801c7c0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801c7c2:	2300      	movs	r3, #0
 801c7c4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801c7c6:	7dba      	ldrb	r2, [r7, #22]
 801c7c8:	693b      	ldr	r3, [r7, #16]
 801c7ca:	9302      	str	r3, [sp, #8]
 801c7cc:	2306      	movs	r3, #6
 801c7ce:	9301      	str	r3, [sp, #4]
 801c7d0:	7d7b      	ldrb	r3, [r7, #21]
 801c7d2:	9300      	str	r3, [sp, #0]
 801c7d4:	4613      	mov	r3, r2
 801c7d6:	683a      	ldr	r2, [r7, #0]
 801c7d8:	6879      	ldr	r1, [r7, #4]
 801c7da:	68b8      	ldr	r0, [r7, #8]
 801c7dc:	f004 f97a 	bl	8020ad4 <ip4_output_if>
 801c7e0:	4603      	mov	r3, r0
 801c7e2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801c7e4:	68b8      	ldr	r0, [r7, #8]
 801c7e6:	f7f9 fe51 	bl	801648c <pbuf_free>
  return err;
 801c7ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c7ee:	4618      	mov	r0, r3
 801c7f0:	3718      	adds	r7, #24
 801c7f2:	46bd      	mov	sp, r7
 801c7f4:	bd80      	pop	{r7, pc}
 801c7f6:	bf00      	nop
 801c7f8:	08029604 	.word	0x08029604
 801c7fc:	08029d5c 	.word	0x08029d5c
 801c800:	08029658 	.word	0x08029658

0801c804 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801c804:	b590      	push	{r4, r7, lr}
 801c806:	b08b      	sub	sp, #44	; 0x2c
 801c808:	af04      	add	r7, sp, #16
 801c80a:	60f8      	str	r0, [r7, #12]
 801c80c:	60b9      	str	r1, [r7, #8]
 801c80e:	607a      	str	r2, [r7, #4]
 801c810:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801c812:	683b      	ldr	r3, [r7, #0]
 801c814:	2b00      	cmp	r3, #0
 801c816:	d106      	bne.n	801c826 <tcp_rst+0x22>
 801c818:	4b1f      	ldr	r3, [pc, #124]	; (801c898 <tcp_rst+0x94>)
 801c81a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801c81e:	491f      	ldr	r1, [pc, #124]	; (801c89c <tcp_rst+0x98>)
 801c820:	481f      	ldr	r0, [pc, #124]	; (801c8a0 <tcp_rst+0x9c>)
 801c822:	f007 fbd9 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801c826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c828:	2b00      	cmp	r3, #0
 801c82a:	d106      	bne.n	801c83a <tcp_rst+0x36>
 801c82c:	4b1a      	ldr	r3, [pc, #104]	; (801c898 <tcp_rst+0x94>)
 801c82e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801c832:	491c      	ldr	r1, [pc, #112]	; (801c8a4 <tcp_rst+0xa0>)
 801c834:	481a      	ldr	r0, [pc, #104]	; (801c8a0 <tcp_rst+0x9c>)
 801c836:	f007 fbcf 	bl	8023fd8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c83a:	2300      	movs	r3, #0
 801c83c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801c83e:	f246 0308 	movw	r3, #24584	; 0x6008
 801c842:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801c844:	7dfb      	ldrb	r3, [r7, #23]
 801c846:	b29c      	uxth	r4, r3
 801c848:	68b8      	ldr	r0, [r7, #8]
 801c84a:	f7f8 fa36 	bl	8014cba <lwip_htonl>
 801c84e:	4602      	mov	r2, r0
 801c850:	8abb      	ldrh	r3, [r7, #20]
 801c852:	9303      	str	r3, [sp, #12]
 801c854:	2314      	movs	r3, #20
 801c856:	9302      	str	r3, [sp, #8]
 801c858:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801c85a:	9301      	str	r3, [sp, #4]
 801c85c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801c85e:	9300      	str	r3, [sp, #0]
 801c860:	4613      	mov	r3, r2
 801c862:	2200      	movs	r2, #0
 801c864:	4621      	mov	r1, r4
 801c866:	6878      	ldr	r0, [r7, #4]
 801c868:	f7ff fe94 	bl	801c594 <tcp_output_alloc_header_common>
 801c86c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801c86e:	693b      	ldr	r3, [r7, #16]
 801c870:	2b00      	cmp	r3, #0
 801c872:	d00c      	beq.n	801c88e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c874:	7dfb      	ldrb	r3, [r7, #23]
 801c876:	2200      	movs	r2, #0
 801c878:	6939      	ldr	r1, [r7, #16]
 801c87a:	68f8      	ldr	r0, [r7, #12]
 801c87c:	f7ff ff3a 	bl	801c6f4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801c880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c882:	683a      	ldr	r2, [r7, #0]
 801c884:	6939      	ldr	r1, [r7, #16]
 801c886:	68f8      	ldr	r0, [r7, #12]
 801c888:	f7ff ff72 	bl	801c770 <tcp_output_control_segment>
 801c88c:	e000      	b.n	801c890 <tcp_rst+0x8c>
    return;
 801c88e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801c890:	371c      	adds	r7, #28
 801c892:	46bd      	mov	sp, r7
 801c894:	bd90      	pop	{r4, r7, pc}
 801c896:	bf00      	nop
 801c898:	08029604 	.word	0x08029604
 801c89c:	08029d88 	.word	0x08029d88
 801c8a0:	08029658 	.word	0x08029658
 801c8a4:	08029da4 	.word	0x08029da4

0801c8a8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801c8a8:	b590      	push	{r4, r7, lr}
 801c8aa:	b087      	sub	sp, #28
 801c8ac:	af00      	add	r7, sp, #0
 801c8ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801c8b0:	2300      	movs	r3, #0
 801c8b2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801c8b4:	2300      	movs	r3, #0
 801c8b6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801c8b8:	687b      	ldr	r3, [r7, #4]
 801c8ba:	2b00      	cmp	r3, #0
 801c8bc:	d106      	bne.n	801c8cc <tcp_send_empty_ack+0x24>
 801c8be:	4b28      	ldr	r3, [pc, #160]	; (801c960 <tcp_send_empty_ack+0xb8>)
 801c8c0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801c8c4:	4927      	ldr	r1, [pc, #156]	; (801c964 <tcp_send_empty_ack+0xbc>)
 801c8c6:	4828      	ldr	r0, [pc, #160]	; (801c968 <tcp_send_empty_ack+0xc0>)
 801c8c8:	f007 fb86 	bl	8023fd8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801c8cc:	7dfb      	ldrb	r3, [r7, #23]
 801c8ce:	009b      	lsls	r3, r3, #2
 801c8d0:	b2db      	uxtb	r3, r3
 801c8d2:	f003 0304 	and.w	r3, r3, #4
 801c8d6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801c8d8:	7d7b      	ldrb	r3, [r7, #21]
 801c8da:	b29c      	uxth	r4, r3
 801c8dc:	687b      	ldr	r3, [r7, #4]
 801c8de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c8e0:	4618      	mov	r0, r3
 801c8e2:	f7f8 f9ea 	bl	8014cba <lwip_htonl>
 801c8e6:	4603      	mov	r3, r0
 801c8e8:	2200      	movs	r2, #0
 801c8ea:	4621      	mov	r1, r4
 801c8ec:	6878      	ldr	r0, [r7, #4]
 801c8ee:	f7ff fec3 	bl	801c678 <tcp_output_alloc_header>
 801c8f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c8f4:	693b      	ldr	r3, [r7, #16]
 801c8f6:	2b00      	cmp	r3, #0
 801c8f8:	d109      	bne.n	801c90e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c8fa:	687b      	ldr	r3, [r7, #4]
 801c8fc:	8b5b      	ldrh	r3, [r3, #26]
 801c8fe:	f043 0303 	orr.w	r3, r3, #3
 801c902:	b29a      	uxth	r2, r3
 801c904:	687b      	ldr	r3, [r7, #4]
 801c906:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801c908:	f06f 0301 	mvn.w	r3, #1
 801c90c:	e023      	b.n	801c956 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801c90e:	7dbb      	ldrb	r3, [r7, #22]
 801c910:	7dfa      	ldrb	r2, [r7, #23]
 801c912:	6939      	ldr	r1, [r7, #16]
 801c914:	6878      	ldr	r0, [r7, #4]
 801c916:	f7ff feed 	bl	801c6f4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c91a:	687a      	ldr	r2, [r7, #4]
 801c91c:	687b      	ldr	r3, [r7, #4]
 801c91e:	3304      	adds	r3, #4
 801c920:	6939      	ldr	r1, [r7, #16]
 801c922:	6878      	ldr	r0, [r7, #4]
 801c924:	f7ff ff24 	bl	801c770 <tcp_output_control_segment>
 801c928:	4603      	mov	r3, r0
 801c92a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801c92c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c930:	2b00      	cmp	r3, #0
 801c932:	d007      	beq.n	801c944 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c934:	687b      	ldr	r3, [r7, #4]
 801c936:	8b5b      	ldrh	r3, [r3, #26]
 801c938:	f043 0303 	orr.w	r3, r3, #3
 801c93c:	b29a      	uxth	r2, r3
 801c93e:	687b      	ldr	r3, [r7, #4]
 801c940:	835a      	strh	r2, [r3, #26]
 801c942:	e006      	b.n	801c952 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c944:	687b      	ldr	r3, [r7, #4]
 801c946:	8b5b      	ldrh	r3, [r3, #26]
 801c948:	f023 0303 	bic.w	r3, r3, #3
 801c94c:	b29a      	uxth	r2, r3
 801c94e:	687b      	ldr	r3, [r7, #4]
 801c950:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801c952:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c956:	4618      	mov	r0, r3
 801c958:	371c      	adds	r7, #28
 801c95a:	46bd      	mov	sp, r7
 801c95c:	bd90      	pop	{r4, r7, pc}
 801c95e:	bf00      	nop
 801c960:	08029604 	.word	0x08029604
 801c964:	08029dc0 	.word	0x08029dc0
 801c968:	08029658 	.word	0x08029658

0801c96c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801c96c:	b590      	push	{r4, r7, lr}
 801c96e:	b087      	sub	sp, #28
 801c970:	af00      	add	r7, sp, #0
 801c972:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c974:	2300      	movs	r3, #0
 801c976:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801c978:	687b      	ldr	r3, [r7, #4]
 801c97a:	2b00      	cmp	r3, #0
 801c97c:	d106      	bne.n	801c98c <tcp_keepalive+0x20>
 801c97e:	4b18      	ldr	r3, [pc, #96]	; (801c9e0 <tcp_keepalive+0x74>)
 801c980:	f640 0224 	movw	r2, #2084	; 0x824
 801c984:	4917      	ldr	r1, [pc, #92]	; (801c9e4 <tcp_keepalive+0x78>)
 801c986:	4818      	ldr	r0, [pc, #96]	; (801c9e8 <tcp_keepalive+0x7c>)
 801c988:	f007 fb26 	bl	8023fd8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801c98c:	7dfb      	ldrb	r3, [r7, #23]
 801c98e:	b29c      	uxth	r4, r3
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c994:	3b01      	subs	r3, #1
 801c996:	4618      	mov	r0, r3
 801c998:	f7f8 f98f 	bl	8014cba <lwip_htonl>
 801c99c:	4603      	mov	r3, r0
 801c99e:	2200      	movs	r2, #0
 801c9a0:	4621      	mov	r1, r4
 801c9a2:	6878      	ldr	r0, [r7, #4]
 801c9a4:	f7ff fe68 	bl	801c678 <tcp_output_alloc_header>
 801c9a8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c9aa:	693b      	ldr	r3, [r7, #16]
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	d102      	bne.n	801c9b6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801c9b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c9b4:	e010      	b.n	801c9d8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c9b6:	7dfb      	ldrb	r3, [r7, #23]
 801c9b8:	2200      	movs	r2, #0
 801c9ba:	6939      	ldr	r1, [r7, #16]
 801c9bc:	6878      	ldr	r0, [r7, #4]
 801c9be:	f7ff fe99 	bl	801c6f4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c9c2:	687a      	ldr	r2, [r7, #4]
 801c9c4:	687b      	ldr	r3, [r7, #4]
 801c9c6:	3304      	adds	r3, #4
 801c9c8:	6939      	ldr	r1, [r7, #16]
 801c9ca:	6878      	ldr	r0, [r7, #4]
 801c9cc:	f7ff fed0 	bl	801c770 <tcp_output_control_segment>
 801c9d0:	4603      	mov	r3, r0
 801c9d2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801c9d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c9d8:	4618      	mov	r0, r3
 801c9da:	371c      	adds	r7, #28
 801c9dc:	46bd      	mov	sp, r7
 801c9de:	bd90      	pop	{r4, r7, pc}
 801c9e0:	08029604 	.word	0x08029604
 801c9e4:	08029de0 	.word	0x08029de0
 801c9e8:	08029658 	.word	0x08029658

0801c9ec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801c9ec:	b590      	push	{r4, r7, lr}
 801c9ee:	b08b      	sub	sp, #44	; 0x2c
 801c9f0:	af00      	add	r7, sp, #0
 801c9f2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c9f4:	2300      	movs	r3, #0
 801c9f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801c9fa:	687b      	ldr	r3, [r7, #4]
 801c9fc:	2b00      	cmp	r3, #0
 801c9fe:	d106      	bne.n	801ca0e <tcp_zero_window_probe+0x22>
 801ca00:	4b4c      	ldr	r3, [pc, #304]	; (801cb34 <tcp_zero_window_probe+0x148>)
 801ca02:	f640 024f 	movw	r2, #2127	; 0x84f
 801ca06:	494c      	ldr	r1, [pc, #304]	; (801cb38 <tcp_zero_window_probe+0x14c>)
 801ca08:	484c      	ldr	r0, [pc, #304]	; (801cb3c <tcp_zero_window_probe+0x150>)
 801ca0a:	f007 fae5 	bl	8023fd8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801ca0e:	687b      	ldr	r3, [r7, #4]
 801ca10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ca12:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801ca14:	6a3b      	ldr	r3, [r7, #32]
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	d101      	bne.n	801ca1e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801ca1a:	2300      	movs	r3, #0
 801ca1c:	e086      	b.n	801cb2c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801ca1e:	687b      	ldr	r3, [r7, #4]
 801ca20:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 801ca24:	2bff      	cmp	r3, #255	; 0xff
 801ca26:	d007      	beq.n	801ca38 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 801ca2e:	3301      	adds	r3, #1
 801ca30:	b2da      	uxtb	r2, r3
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801ca38:	6a3b      	ldr	r3, [r7, #32]
 801ca3a:	68db      	ldr	r3, [r3, #12]
 801ca3c:	899b      	ldrh	r3, [r3, #12]
 801ca3e:	b29b      	uxth	r3, r3
 801ca40:	4618      	mov	r0, r3
 801ca42:	f7f8 f925 	bl	8014c90 <lwip_htons>
 801ca46:	4603      	mov	r3, r0
 801ca48:	b2db      	uxtb	r3, r3
 801ca4a:	f003 0301 	and.w	r3, r3, #1
 801ca4e:	2b00      	cmp	r3, #0
 801ca50:	d005      	beq.n	801ca5e <tcp_zero_window_probe+0x72>
 801ca52:	6a3b      	ldr	r3, [r7, #32]
 801ca54:	891b      	ldrh	r3, [r3, #8]
 801ca56:	2b00      	cmp	r3, #0
 801ca58:	d101      	bne.n	801ca5e <tcp_zero_window_probe+0x72>
 801ca5a:	2301      	movs	r3, #1
 801ca5c:	e000      	b.n	801ca60 <tcp_zero_window_probe+0x74>
 801ca5e:	2300      	movs	r3, #0
 801ca60:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801ca62:	7ffb      	ldrb	r3, [r7, #31]
 801ca64:	2b00      	cmp	r3, #0
 801ca66:	bf0c      	ite	eq
 801ca68:	2301      	moveq	r3, #1
 801ca6a:	2300      	movne	r3, #0
 801ca6c:	b2db      	uxtb	r3, r3
 801ca6e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801ca70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ca74:	b299      	uxth	r1, r3
 801ca76:	6a3b      	ldr	r3, [r7, #32]
 801ca78:	68db      	ldr	r3, [r3, #12]
 801ca7a:	685b      	ldr	r3, [r3, #4]
 801ca7c:	8bba      	ldrh	r2, [r7, #28]
 801ca7e:	6878      	ldr	r0, [r7, #4]
 801ca80:	f7ff fdfa 	bl	801c678 <tcp_output_alloc_header>
 801ca84:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801ca86:	69bb      	ldr	r3, [r7, #24]
 801ca88:	2b00      	cmp	r3, #0
 801ca8a:	d102      	bne.n	801ca92 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801ca8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ca90:	e04c      	b.n	801cb2c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801ca92:	69bb      	ldr	r3, [r7, #24]
 801ca94:	685b      	ldr	r3, [r3, #4]
 801ca96:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801ca98:	7ffb      	ldrb	r3, [r7, #31]
 801ca9a:	2b00      	cmp	r3, #0
 801ca9c:	d011      	beq.n	801cac2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801ca9e:	697b      	ldr	r3, [r7, #20]
 801caa0:	899b      	ldrh	r3, [r3, #12]
 801caa2:	b29b      	uxth	r3, r3
 801caa4:	b21b      	sxth	r3, r3
 801caa6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801caaa:	b21c      	sxth	r4, r3
 801caac:	2011      	movs	r0, #17
 801caae:	f7f8 f8ef 	bl	8014c90 <lwip_htons>
 801cab2:	4603      	mov	r3, r0
 801cab4:	b21b      	sxth	r3, r3
 801cab6:	4323      	orrs	r3, r4
 801cab8:	b21b      	sxth	r3, r3
 801caba:	b29a      	uxth	r2, r3
 801cabc:	697b      	ldr	r3, [r7, #20]
 801cabe:	819a      	strh	r2, [r3, #12]
 801cac0:	e010      	b.n	801cae4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801cac2:	69bb      	ldr	r3, [r7, #24]
 801cac4:	685b      	ldr	r3, [r3, #4]
 801cac6:	3314      	adds	r3, #20
 801cac8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801caca:	6a3b      	ldr	r3, [r7, #32]
 801cacc:	6858      	ldr	r0, [r3, #4]
 801cace:	6a3b      	ldr	r3, [r7, #32]
 801cad0:	685b      	ldr	r3, [r3, #4]
 801cad2:	891a      	ldrh	r2, [r3, #8]
 801cad4:	6a3b      	ldr	r3, [r7, #32]
 801cad6:	891b      	ldrh	r3, [r3, #8]
 801cad8:	1ad3      	subs	r3, r2, r3
 801cada:	b29b      	uxth	r3, r3
 801cadc:	2201      	movs	r2, #1
 801cade:	6939      	ldr	r1, [r7, #16]
 801cae0:	f7f9 feda 	bl	8016898 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801cae4:	6a3b      	ldr	r3, [r7, #32]
 801cae6:	68db      	ldr	r3, [r3, #12]
 801cae8:	685b      	ldr	r3, [r3, #4]
 801caea:	4618      	mov	r0, r3
 801caec:	f7f8 f8e5 	bl	8014cba <lwip_htonl>
 801caf0:	4603      	mov	r3, r0
 801caf2:	3301      	adds	r3, #1
 801caf4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801caf6:	687b      	ldr	r3, [r7, #4]
 801caf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801cafa:	68fb      	ldr	r3, [r7, #12]
 801cafc:	1ad3      	subs	r3, r2, r3
 801cafe:	2b00      	cmp	r3, #0
 801cb00:	da02      	bge.n	801cb08 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801cb02:	687b      	ldr	r3, [r7, #4]
 801cb04:	68fa      	ldr	r2, [r7, #12]
 801cb06:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801cb08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cb0c:	2200      	movs	r2, #0
 801cb0e:	69b9      	ldr	r1, [r7, #24]
 801cb10:	6878      	ldr	r0, [r7, #4]
 801cb12:	f7ff fdef 	bl	801c6f4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801cb16:	687a      	ldr	r2, [r7, #4]
 801cb18:	687b      	ldr	r3, [r7, #4]
 801cb1a:	3304      	adds	r3, #4
 801cb1c:	69b9      	ldr	r1, [r7, #24]
 801cb1e:	6878      	ldr	r0, [r7, #4]
 801cb20:	f7ff fe26 	bl	801c770 <tcp_output_control_segment>
 801cb24:	4603      	mov	r3, r0
 801cb26:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801cb28:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801cb2c:	4618      	mov	r0, r3
 801cb2e:	372c      	adds	r7, #44	; 0x2c
 801cb30:	46bd      	mov	sp, r7
 801cb32:	bd90      	pop	{r4, r7, pc}
 801cb34:	08029604 	.word	0x08029604
 801cb38:	08029dfc 	.word	0x08029dfc
 801cb3c:	08029658 	.word	0x08029658

0801cb40 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801cb40:	b580      	push	{r7, lr}
 801cb42:	b082      	sub	sp, #8
 801cb44:	af00      	add	r7, sp, #0
 801cb46:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801cb48:	f7f9 ff94 	bl	8016a74 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801cb4c:	4b0a      	ldr	r3, [pc, #40]	; (801cb78 <tcpip_tcp_timer+0x38>)
 801cb4e:	681b      	ldr	r3, [r3, #0]
 801cb50:	2b00      	cmp	r3, #0
 801cb52:	d103      	bne.n	801cb5c <tcpip_tcp_timer+0x1c>
 801cb54:	4b09      	ldr	r3, [pc, #36]	; (801cb7c <tcpip_tcp_timer+0x3c>)
 801cb56:	681b      	ldr	r3, [r3, #0]
 801cb58:	2b00      	cmp	r3, #0
 801cb5a:	d005      	beq.n	801cb68 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801cb5c:	2200      	movs	r2, #0
 801cb5e:	4908      	ldr	r1, [pc, #32]	; (801cb80 <tcpip_tcp_timer+0x40>)
 801cb60:	20fa      	movs	r0, #250	; 0xfa
 801cb62:	f000 f8f3 	bl	801cd4c <sys_timeout>
 801cb66:	e003      	b.n	801cb70 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801cb68:	4b06      	ldr	r3, [pc, #24]	; (801cb84 <tcpip_tcp_timer+0x44>)
 801cb6a:	2200      	movs	r2, #0
 801cb6c:	601a      	str	r2, [r3, #0]
  }
}
 801cb6e:	bf00      	nop
 801cb70:	bf00      	nop
 801cb72:	3708      	adds	r7, #8
 801cb74:	46bd      	mov	sp, r7
 801cb76:	bd80      	pop	{r7, pc}
 801cb78:	2001323c 	.word	0x2001323c
 801cb7c:	20013240 	.word	0x20013240
 801cb80:	0801cb41 	.word	0x0801cb41
 801cb84:	20013288 	.word	0x20013288

0801cb88 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801cb88:	b580      	push	{r7, lr}
 801cb8a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801cb8c:	4b0a      	ldr	r3, [pc, #40]	; (801cbb8 <tcp_timer_needed+0x30>)
 801cb8e:	681b      	ldr	r3, [r3, #0]
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	d10f      	bne.n	801cbb4 <tcp_timer_needed+0x2c>
 801cb94:	4b09      	ldr	r3, [pc, #36]	; (801cbbc <tcp_timer_needed+0x34>)
 801cb96:	681b      	ldr	r3, [r3, #0]
 801cb98:	2b00      	cmp	r3, #0
 801cb9a:	d103      	bne.n	801cba4 <tcp_timer_needed+0x1c>
 801cb9c:	4b08      	ldr	r3, [pc, #32]	; (801cbc0 <tcp_timer_needed+0x38>)
 801cb9e:	681b      	ldr	r3, [r3, #0]
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	d007      	beq.n	801cbb4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801cba4:	4b04      	ldr	r3, [pc, #16]	; (801cbb8 <tcp_timer_needed+0x30>)
 801cba6:	2201      	movs	r2, #1
 801cba8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801cbaa:	2200      	movs	r2, #0
 801cbac:	4905      	ldr	r1, [pc, #20]	; (801cbc4 <tcp_timer_needed+0x3c>)
 801cbae:	20fa      	movs	r0, #250	; 0xfa
 801cbb0:	f000 f8cc 	bl	801cd4c <sys_timeout>
  }
}
 801cbb4:	bf00      	nop
 801cbb6:	bd80      	pop	{r7, pc}
 801cbb8:	20013288 	.word	0x20013288
 801cbbc:	2001323c 	.word	0x2001323c
 801cbc0:	20013240 	.word	0x20013240
 801cbc4:	0801cb41 	.word	0x0801cb41

0801cbc8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801cbc8:	b580      	push	{r7, lr}
 801cbca:	b086      	sub	sp, #24
 801cbcc:	af00      	add	r7, sp, #0
 801cbce:	60f8      	str	r0, [r7, #12]
 801cbd0:	60b9      	str	r1, [r7, #8]
 801cbd2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801cbd4:	200a      	movs	r0, #10
 801cbd6:	f7f8 fd33 	bl	8015640 <memp_malloc>
 801cbda:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801cbdc:	693b      	ldr	r3, [r7, #16]
 801cbde:	2b00      	cmp	r3, #0
 801cbe0:	d109      	bne.n	801cbf6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801cbe2:	693b      	ldr	r3, [r7, #16]
 801cbe4:	2b00      	cmp	r3, #0
 801cbe6:	d151      	bne.n	801cc8c <sys_timeout_abs+0xc4>
 801cbe8:	4b2a      	ldr	r3, [pc, #168]	; (801cc94 <sys_timeout_abs+0xcc>)
 801cbea:	22be      	movs	r2, #190	; 0xbe
 801cbec:	492a      	ldr	r1, [pc, #168]	; (801cc98 <sys_timeout_abs+0xd0>)
 801cbee:	482b      	ldr	r0, [pc, #172]	; (801cc9c <sys_timeout_abs+0xd4>)
 801cbf0:	f007 f9f2 	bl	8023fd8 <iprintf>
    return;
 801cbf4:	e04a      	b.n	801cc8c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801cbf6:	693b      	ldr	r3, [r7, #16]
 801cbf8:	2200      	movs	r2, #0
 801cbfa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801cbfc:	693b      	ldr	r3, [r7, #16]
 801cbfe:	68ba      	ldr	r2, [r7, #8]
 801cc00:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801cc02:	693b      	ldr	r3, [r7, #16]
 801cc04:	687a      	ldr	r2, [r7, #4]
 801cc06:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801cc08:	693b      	ldr	r3, [r7, #16]
 801cc0a:	68fa      	ldr	r2, [r7, #12]
 801cc0c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801cc0e:	4b24      	ldr	r3, [pc, #144]	; (801cca0 <sys_timeout_abs+0xd8>)
 801cc10:	681b      	ldr	r3, [r3, #0]
 801cc12:	2b00      	cmp	r3, #0
 801cc14:	d103      	bne.n	801cc1e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801cc16:	4a22      	ldr	r2, [pc, #136]	; (801cca0 <sys_timeout_abs+0xd8>)
 801cc18:	693b      	ldr	r3, [r7, #16]
 801cc1a:	6013      	str	r3, [r2, #0]
    return;
 801cc1c:	e037      	b.n	801cc8e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801cc1e:	693b      	ldr	r3, [r7, #16]
 801cc20:	685a      	ldr	r2, [r3, #4]
 801cc22:	4b1f      	ldr	r3, [pc, #124]	; (801cca0 <sys_timeout_abs+0xd8>)
 801cc24:	681b      	ldr	r3, [r3, #0]
 801cc26:	685b      	ldr	r3, [r3, #4]
 801cc28:	1ad3      	subs	r3, r2, r3
 801cc2a:	0fdb      	lsrs	r3, r3, #31
 801cc2c:	f003 0301 	and.w	r3, r3, #1
 801cc30:	b2db      	uxtb	r3, r3
 801cc32:	2b00      	cmp	r3, #0
 801cc34:	d007      	beq.n	801cc46 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801cc36:	4b1a      	ldr	r3, [pc, #104]	; (801cca0 <sys_timeout_abs+0xd8>)
 801cc38:	681a      	ldr	r2, [r3, #0]
 801cc3a:	693b      	ldr	r3, [r7, #16]
 801cc3c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801cc3e:	4a18      	ldr	r2, [pc, #96]	; (801cca0 <sys_timeout_abs+0xd8>)
 801cc40:	693b      	ldr	r3, [r7, #16]
 801cc42:	6013      	str	r3, [r2, #0]
 801cc44:	e023      	b.n	801cc8e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801cc46:	4b16      	ldr	r3, [pc, #88]	; (801cca0 <sys_timeout_abs+0xd8>)
 801cc48:	681b      	ldr	r3, [r3, #0]
 801cc4a:	617b      	str	r3, [r7, #20]
 801cc4c:	e01a      	b.n	801cc84 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801cc4e:	697b      	ldr	r3, [r7, #20]
 801cc50:	681b      	ldr	r3, [r3, #0]
 801cc52:	2b00      	cmp	r3, #0
 801cc54:	d00b      	beq.n	801cc6e <sys_timeout_abs+0xa6>
 801cc56:	693b      	ldr	r3, [r7, #16]
 801cc58:	685a      	ldr	r2, [r3, #4]
 801cc5a:	697b      	ldr	r3, [r7, #20]
 801cc5c:	681b      	ldr	r3, [r3, #0]
 801cc5e:	685b      	ldr	r3, [r3, #4]
 801cc60:	1ad3      	subs	r3, r2, r3
 801cc62:	0fdb      	lsrs	r3, r3, #31
 801cc64:	f003 0301 	and.w	r3, r3, #1
 801cc68:	b2db      	uxtb	r3, r3
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	d007      	beq.n	801cc7e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801cc6e:	697b      	ldr	r3, [r7, #20]
 801cc70:	681a      	ldr	r2, [r3, #0]
 801cc72:	693b      	ldr	r3, [r7, #16]
 801cc74:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801cc76:	697b      	ldr	r3, [r7, #20]
 801cc78:	693a      	ldr	r2, [r7, #16]
 801cc7a:	601a      	str	r2, [r3, #0]
        break;
 801cc7c:	e007      	b.n	801cc8e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801cc7e:	697b      	ldr	r3, [r7, #20]
 801cc80:	681b      	ldr	r3, [r3, #0]
 801cc82:	617b      	str	r3, [r7, #20]
 801cc84:	697b      	ldr	r3, [r7, #20]
 801cc86:	2b00      	cmp	r3, #0
 801cc88:	d1e1      	bne.n	801cc4e <sys_timeout_abs+0x86>
 801cc8a:	e000      	b.n	801cc8e <sys_timeout_abs+0xc6>
    return;
 801cc8c:	bf00      	nop
      }
    }
  }
}
 801cc8e:	3718      	adds	r7, #24
 801cc90:	46bd      	mov	sp, r7
 801cc92:	bd80      	pop	{r7, pc}
 801cc94:	08029e20 	.word	0x08029e20
 801cc98:	08029e54 	.word	0x08029e54
 801cc9c:	08029e94 	.word	0x08029e94
 801cca0:	20013280 	.word	0x20013280

0801cca4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801cca4:	b580      	push	{r7, lr}
 801cca6:	b086      	sub	sp, #24
 801cca8:	af00      	add	r7, sp, #0
 801ccaa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801ccb0:	697b      	ldr	r3, [r7, #20]
 801ccb2:	685b      	ldr	r3, [r3, #4]
 801ccb4:	4798      	blx	r3

  now = sys_now();
 801ccb6:	f7eb fcd9 	bl	800866c <sys_now>
 801ccba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801ccbc:	697b      	ldr	r3, [r7, #20]
 801ccbe:	681a      	ldr	r2, [r3, #0]
 801ccc0:	4b0f      	ldr	r3, [pc, #60]	; (801cd00 <lwip_cyclic_timer+0x5c>)
 801ccc2:	681b      	ldr	r3, [r3, #0]
 801ccc4:	4413      	add	r3, r2
 801ccc6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801ccc8:	68fa      	ldr	r2, [r7, #12]
 801ccca:	693b      	ldr	r3, [r7, #16]
 801cccc:	1ad3      	subs	r3, r2, r3
 801ccce:	0fdb      	lsrs	r3, r3, #31
 801ccd0:	f003 0301 	and.w	r3, r3, #1
 801ccd4:	b2db      	uxtb	r3, r3
 801ccd6:	2b00      	cmp	r3, #0
 801ccd8:	d009      	beq.n	801ccee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801ccda:	697b      	ldr	r3, [r7, #20]
 801ccdc:	681a      	ldr	r2, [r3, #0]
 801ccde:	693b      	ldr	r3, [r7, #16]
 801cce0:	4413      	add	r3, r2
 801cce2:	687a      	ldr	r2, [r7, #4]
 801cce4:	4907      	ldr	r1, [pc, #28]	; (801cd04 <lwip_cyclic_timer+0x60>)
 801cce6:	4618      	mov	r0, r3
 801cce8:	f7ff ff6e 	bl	801cbc8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801ccec:	e004      	b.n	801ccf8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801ccee:	687a      	ldr	r2, [r7, #4]
 801ccf0:	4904      	ldr	r1, [pc, #16]	; (801cd04 <lwip_cyclic_timer+0x60>)
 801ccf2:	68f8      	ldr	r0, [r7, #12]
 801ccf4:	f7ff ff68 	bl	801cbc8 <sys_timeout_abs>
}
 801ccf8:	bf00      	nop
 801ccfa:	3718      	adds	r7, #24
 801ccfc:	46bd      	mov	sp, r7
 801ccfe:	bd80      	pop	{r7, pc}
 801cd00:	20013284 	.word	0x20013284
 801cd04:	0801cca5 	.word	0x0801cca5

0801cd08 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801cd08:	b580      	push	{r7, lr}
 801cd0a:	b082      	sub	sp, #8
 801cd0c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801cd0e:	2301      	movs	r3, #1
 801cd10:	607b      	str	r3, [r7, #4]
 801cd12:	e00e      	b.n	801cd32 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801cd14:	4a0b      	ldr	r2, [pc, #44]	; (801cd44 <sys_timeouts_init+0x3c>)
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	00db      	lsls	r3, r3, #3
 801cd20:	4a08      	ldr	r2, [pc, #32]	; (801cd44 <sys_timeouts_init+0x3c>)
 801cd22:	4413      	add	r3, r2
 801cd24:	461a      	mov	r2, r3
 801cd26:	4908      	ldr	r1, [pc, #32]	; (801cd48 <sys_timeouts_init+0x40>)
 801cd28:	f000 f810 	bl	801cd4c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801cd2c:	687b      	ldr	r3, [r7, #4]
 801cd2e:	3301      	adds	r3, #1
 801cd30:	607b      	str	r3, [r7, #4]
 801cd32:	687b      	ldr	r3, [r7, #4]
 801cd34:	2b04      	cmp	r3, #4
 801cd36:	d9ed      	bls.n	801cd14 <sys_timeouts_init+0xc>
  }
}
 801cd38:	bf00      	nop
 801cd3a:	bf00      	nop
 801cd3c:	3708      	adds	r7, #8
 801cd3e:	46bd      	mov	sp, r7
 801cd40:	bd80      	pop	{r7, pc}
 801cd42:	bf00      	nop
 801cd44:	0802af48 	.word	0x0802af48
 801cd48:	0801cca5 	.word	0x0801cca5

0801cd4c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801cd4c:	b580      	push	{r7, lr}
 801cd4e:	b086      	sub	sp, #24
 801cd50:	af00      	add	r7, sp, #0
 801cd52:	60f8      	str	r0, [r7, #12]
 801cd54:	60b9      	str	r1, [r7, #8]
 801cd56:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801cd58:	68fb      	ldr	r3, [r7, #12]
 801cd5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801cd5e:	d306      	bcc.n	801cd6e <sys_timeout+0x22>
 801cd60:	4b0a      	ldr	r3, [pc, #40]	; (801cd8c <sys_timeout+0x40>)
 801cd62:	f240 1229 	movw	r2, #297	; 0x129
 801cd66:	490a      	ldr	r1, [pc, #40]	; (801cd90 <sys_timeout+0x44>)
 801cd68:	480a      	ldr	r0, [pc, #40]	; (801cd94 <sys_timeout+0x48>)
 801cd6a:	f007 f935 	bl	8023fd8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801cd6e:	f7eb fc7d 	bl	800866c <sys_now>
 801cd72:	4602      	mov	r2, r0
 801cd74:	68fb      	ldr	r3, [r7, #12]
 801cd76:	4413      	add	r3, r2
 801cd78:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801cd7a:	687a      	ldr	r2, [r7, #4]
 801cd7c:	68b9      	ldr	r1, [r7, #8]
 801cd7e:	6978      	ldr	r0, [r7, #20]
 801cd80:	f7ff ff22 	bl	801cbc8 <sys_timeout_abs>
#endif
}
 801cd84:	bf00      	nop
 801cd86:	3718      	adds	r7, #24
 801cd88:	46bd      	mov	sp, r7
 801cd8a:	bd80      	pop	{r7, pc}
 801cd8c:	08029e20 	.word	0x08029e20
 801cd90:	08029ebc 	.word	0x08029ebc
 801cd94:	08029e94 	.word	0x08029e94

0801cd98 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801cd98:	b580      	push	{r7, lr}
 801cd9a:	b084      	sub	sp, #16
 801cd9c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801cd9e:	f7eb fc65 	bl	800866c <sys_now>
 801cda2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801cda4:	4b17      	ldr	r3, [pc, #92]	; (801ce04 <sys_check_timeouts+0x6c>)
 801cda6:	681b      	ldr	r3, [r3, #0]
 801cda8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801cdaa:	68bb      	ldr	r3, [r7, #8]
 801cdac:	2b00      	cmp	r3, #0
 801cdae:	d022      	beq.n	801cdf6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801cdb0:	68bb      	ldr	r3, [r7, #8]
 801cdb2:	685b      	ldr	r3, [r3, #4]
 801cdb4:	68fa      	ldr	r2, [r7, #12]
 801cdb6:	1ad3      	subs	r3, r2, r3
 801cdb8:	0fdb      	lsrs	r3, r3, #31
 801cdba:	f003 0301 	and.w	r3, r3, #1
 801cdbe:	b2db      	uxtb	r3, r3
 801cdc0:	2b00      	cmp	r3, #0
 801cdc2:	d11a      	bne.n	801cdfa <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801cdc4:	68bb      	ldr	r3, [r7, #8]
 801cdc6:	681b      	ldr	r3, [r3, #0]
 801cdc8:	4a0e      	ldr	r2, [pc, #56]	; (801ce04 <sys_check_timeouts+0x6c>)
 801cdca:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801cdcc:	68bb      	ldr	r3, [r7, #8]
 801cdce:	689b      	ldr	r3, [r3, #8]
 801cdd0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801cdd2:	68bb      	ldr	r3, [r7, #8]
 801cdd4:	68db      	ldr	r3, [r3, #12]
 801cdd6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801cdd8:	68bb      	ldr	r3, [r7, #8]
 801cdda:	685b      	ldr	r3, [r3, #4]
 801cddc:	4a0a      	ldr	r2, [pc, #40]	; (801ce08 <sys_check_timeouts+0x70>)
 801cdde:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801cde0:	68b9      	ldr	r1, [r7, #8]
 801cde2:	200a      	movs	r0, #10
 801cde4:	f7f8 fca2 	bl	801572c <memp_free>
    if (handler != NULL) {
 801cde8:	687b      	ldr	r3, [r7, #4]
 801cdea:	2b00      	cmp	r3, #0
 801cdec:	d0da      	beq.n	801cda4 <sys_check_timeouts+0xc>
      handler(arg);
 801cdee:	687b      	ldr	r3, [r7, #4]
 801cdf0:	6838      	ldr	r0, [r7, #0]
 801cdf2:	4798      	blx	r3
  do {
 801cdf4:	e7d6      	b.n	801cda4 <sys_check_timeouts+0xc>
      return;
 801cdf6:	bf00      	nop
 801cdf8:	e000      	b.n	801cdfc <sys_check_timeouts+0x64>
      return;
 801cdfa:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801cdfc:	3710      	adds	r7, #16
 801cdfe:	46bd      	mov	sp, r7
 801ce00:	bd80      	pop	{r7, pc}
 801ce02:	bf00      	nop
 801ce04:	20013280 	.word	0x20013280
 801ce08:	20013284 	.word	0x20013284

0801ce0c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801ce0c:	b580      	push	{r7, lr}
 801ce0e:	b082      	sub	sp, #8
 801ce10:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801ce12:	4b16      	ldr	r3, [pc, #88]	; (801ce6c <sys_timeouts_sleeptime+0x60>)
 801ce14:	681b      	ldr	r3, [r3, #0]
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	d102      	bne.n	801ce20 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801ce1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ce1e:	e020      	b.n	801ce62 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801ce20:	f7eb fc24 	bl	800866c <sys_now>
 801ce24:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801ce26:	4b11      	ldr	r3, [pc, #68]	; (801ce6c <sys_timeouts_sleeptime+0x60>)
 801ce28:	681b      	ldr	r3, [r3, #0]
 801ce2a:	685a      	ldr	r2, [r3, #4]
 801ce2c:	687b      	ldr	r3, [r7, #4]
 801ce2e:	1ad3      	subs	r3, r2, r3
 801ce30:	0fdb      	lsrs	r3, r3, #31
 801ce32:	f003 0301 	and.w	r3, r3, #1
 801ce36:	b2db      	uxtb	r3, r3
 801ce38:	2b00      	cmp	r3, #0
 801ce3a:	d001      	beq.n	801ce40 <sys_timeouts_sleeptime+0x34>
    return 0;
 801ce3c:	2300      	movs	r3, #0
 801ce3e:	e010      	b.n	801ce62 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801ce40:	4b0a      	ldr	r3, [pc, #40]	; (801ce6c <sys_timeouts_sleeptime+0x60>)
 801ce42:	681b      	ldr	r3, [r3, #0]
 801ce44:	685a      	ldr	r2, [r3, #4]
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	1ad3      	subs	r3, r2, r3
 801ce4a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801ce4c:	683b      	ldr	r3, [r7, #0]
 801ce4e:	2b00      	cmp	r3, #0
 801ce50:	da06      	bge.n	801ce60 <sys_timeouts_sleeptime+0x54>
 801ce52:	4b07      	ldr	r3, [pc, #28]	; (801ce70 <sys_timeouts_sleeptime+0x64>)
 801ce54:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801ce58:	4906      	ldr	r1, [pc, #24]	; (801ce74 <sys_timeouts_sleeptime+0x68>)
 801ce5a:	4807      	ldr	r0, [pc, #28]	; (801ce78 <sys_timeouts_sleeptime+0x6c>)
 801ce5c:	f007 f8bc 	bl	8023fd8 <iprintf>
    return ret;
 801ce60:	683b      	ldr	r3, [r7, #0]
  }
}
 801ce62:	4618      	mov	r0, r3
 801ce64:	3708      	adds	r7, #8
 801ce66:	46bd      	mov	sp, r7
 801ce68:	bd80      	pop	{r7, pc}
 801ce6a:	bf00      	nop
 801ce6c:	20013280 	.word	0x20013280
 801ce70:	08029e20 	.word	0x08029e20
 801ce74:	08029ef4 	.word	0x08029ef4
 801ce78:	08029e94 	.word	0x08029e94

0801ce7c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801ce7c:	b580      	push	{r7, lr}
 801ce7e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801ce80:	f006 fb32 	bl	80234e8 <rand>
 801ce84:	4603      	mov	r3, r0
 801ce86:	b29b      	uxth	r3, r3
 801ce88:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801ce8c:	b29b      	uxth	r3, r3
 801ce8e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801ce92:	b29a      	uxth	r2, r3
 801ce94:	4b01      	ldr	r3, [pc, #4]	; (801ce9c <udp_init+0x20>)
 801ce96:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801ce98:	bf00      	nop
 801ce9a:	bd80      	pop	{r7, pc}
 801ce9c:	20000030 	.word	0x20000030

0801cea0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801cea0:	b480      	push	{r7}
 801cea2:	b083      	sub	sp, #12
 801cea4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801cea6:	2300      	movs	r3, #0
 801cea8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801ceaa:	4b17      	ldr	r3, [pc, #92]	; (801cf08 <udp_new_port+0x68>)
 801ceac:	881b      	ldrh	r3, [r3, #0]
 801ceae:	1c5a      	adds	r2, r3, #1
 801ceb0:	b291      	uxth	r1, r2
 801ceb2:	4a15      	ldr	r2, [pc, #84]	; (801cf08 <udp_new_port+0x68>)
 801ceb4:	8011      	strh	r1, [r2, #0]
 801ceb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ceba:	4293      	cmp	r3, r2
 801cebc:	d103      	bne.n	801cec6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801cebe:	4b12      	ldr	r3, [pc, #72]	; (801cf08 <udp_new_port+0x68>)
 801cec0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801cec4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801cec6:	4b11      	ldr	r3, [pc, #68]	; (801cf0c <udp_new_port+0x6c>)
 801cec8:	681b      	ldr	r3, [r3, #0]
 801ceca:	603b      	str	r3, [r7, #0]
 801cecc:	e011      	b.n	801cef2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801cece:	683b      	ldr	r3, [r7, #0]
 801ced0:	8a5a      	ldrh	r2, [r3, #18]
 801ced2:	4b0d      	ldr	r3, [pc, #52]	; (801cf08 <udp_new_port+0x68>)
 801ced4:	881b      	ldrh	r3, [r3, #0]
 801ced6:	429a      	cmp	r2, r3
 801ced8:	d108      	bne.n	801ceec <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801ceda:	88fb      	ldrh	r3, [r7, #6]
 801cedc:	3301      	adds	r3, #1
 801cede:	80fb      	strh	r3, [r7, #6]
 801cee0:	88fb      	ldrh	r3, [r7, #6]
 801cee2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801cee6:	d3e0      	bcc.n	801ceaa <udp_new_port+0xa>
        return 0;
 801cee8:	2300      	movs	r3, #0
 801ceea:	e007      	b.n	801cefc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ceec:	683b      	ldr	r3, [r7, #0]
 801ceee:	68db      	ldr	r3, [r3, #12]
 801cef0:	603b      	str	r3, [r7, #0]
 801cef2:	683b      	ldr	r3, [r7, #0]
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d1ea      	bne.n	801cece <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801cef8:	4b03      	ldr	r3, [pc, #12]	; (801cf08 <udp_new_port+0x68>)
 801cefa:	881b      	ldrh	r3, [r3, #0]
}
 801cefc:	4618      	mov	r0, r3
 801cefe:	370c      	adds	r7, #12
 801cf00:	46bd      	mov	sp, r7
 801cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf06:	4770      	bx	lr
 801cf08:	20000030 	.word	0x20000030
 801cf0c:	2001328c 	.word	0x2001328c

0801cf10 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801cf10:	b580      	push	{r7, lr}
 801cf12:	b084      	sub	sp, #16
 801cf14:	af00      	add	r7, sp, #0
 801cf16:	60f8      	str	r0, [r7, #12]
 801cf18:	60b9      	str	r1, [r7, #8]
 801cf1a:	4613      	mov	r3, r2
 801cf1c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801cf1e:	68fb      	ldr	r3, [r7, #12]
 801cf20:	2b00      	cmp	r3, #0
 801cf22:	d105      	bne.n	801cf30 <udp_input_local_match+0x20>
 801cf24:	4b27      	ldr	r3, [pc, #156]	; (801cfc4 <udp_input_local_match+0xb4>)
 801cf26:	2287      	movs	r2, #135	; 0x87
 801cf28:	4927      	ldr	r1, [pc, #156]	; (801cfc8 <udp_input_local_match+0xb8>)
 801cf2a:	4828      	ldr	r0, [pc, #160]	; (801cfcc <udp_input_local_match+0xbc>)
 801cf2c:	f007 f854 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801cf30:	68bb      	ldr	r3, [r7, #8]
 801cf32:	2b00      	cmp	r3, #0
 801cf34:	d105      	bne.n	801cf42 <udp_input_local_match+0x32>
 801cf36:	4b23      	ldr	r3, [pc, #140]	; (801cfc4 <udp_input_local_match+0xb4>)
 801cf38:	2288      	movs	r2, #136	; 0x88
 801cf3a:	4925      	ldr	r1, [pc, #148]	; (801cfd0 <udp_input_local_match+0xc0>)
 801cf3c:	4823      	ldr	r0, [pc, #140]	; (801cfcc <udp_input_local_match+0xbc>)
 801cf3e:	f007 f84b 	bl	8023fd8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801cf42:	68fb      	ldr	r3, [r7, #12]
 801cf44:	7a1b      	ldrb	r3, [r3, #8]
 801cf46:	2b00      	cmp	r3, #0
 801cf48:	d00b      	beq.n	801cf62 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801cf4a:	68fb      	ldr	r3, [r7, #12]
 801cf4c:	7a1a      	ldrb	r2, [r3, #8]
 801cf4e:	4b21      	ldr	r3, [pc, #132]	; (801cfd4 <udp_input_local_match+0xc4>)
 801cf50:	685b      	ldr	r3, [r3, #4]
 801cf52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801cf56:	3301      	adds	r3, #1
 801cf58:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801cf5a:	429a      	cmp	r2, r3
 801cf5c:	d001      	beq.n	801cf62 <udp_input_local_match+0x52>
    return 0;
 801cf5e:	2300      	movs	r3, #0
 801cf60:	e02b      	b.n	801cfba <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801cf62:	79fb      	ldrb	r3, [r7, #7]
 801cf64:	2b00      	cmp	r3, #0
 801cf66:	d018      	beq.n	801cf9a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801cf68:	68fb      	ldr	r3, [r7, #12]
 801cf6a:	2b00      	cmp	r3, #0
 801cf6c:	d013      	beq.n	801cf96 <udp_input_local_match+0x86>
 801cf6e:	68fb      	ldr	r3, [r7, #12]
 801cf70:	681b      	ldr	r3, [r3, #0]
 801cf72:	2b00      	cmp	r3, #0
 801cf74:	d00f      	beq.n	801cf96 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801cf76:	4b17      	ldr	r3, [pc, #92]	; (801cfd4 <udp_input_local_match+0xc4>)
 801cf78:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801cf7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801cf7e:	d00a      	beq.n	801cf96 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801cf80:	68fb      	ldr	r3, [r7, #12]
 801cf82:	681a      	ldr	r2, [r3, #0]
 801cf84:	4b13      	ldr	r3, [pc, #76]	; (801cfd4 <udp_input_local_match+0xc4>)
 801cf86:	695b      	ldr	r3, [r3, #20]
 801cf88:	405a      	eors	r2, r3
 801cf8a:	68bb      	ldr	r3, [r7, #8]
 801cf8c:	3308      	adds	r3, #8
 801cf8e:	681b      	ldr	r3, [r3, #0]
 801cf90:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801cf92:	2b00      	cmp	r3, #0
 801cf94:	d110      	bne.n	801cfb8 <udp_input_local_match+0xa8>
          return 1;
 801cf96:	2301      	movs	r3, #1
 801cf98:	e00f      	b.n	801cfba <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801cf9a:	68fb      	ldr	r3, [r7, #12]
 801cf9c:	2b00      	cmp	r3, #0
 801cf9e:	d009      	beq.n	801cfb4 <udp_input_local_match+0xa4>
 801cfa0:	68fb      	ldr	r3, [r7, #12]
 801cfa2:	681b      	ldr	r3, [r3, #0]
 801cfa4:	2b00      	cmp	r3, #0
 801cfa6:	d005      	beq.n	801cfb4 <udp_input_local_match+0xa4>
 801cfa8:	68fb      	ldr	r3, [r7, #12]
 801cfaa:	681a      	ldr	r2, [r3, #0]
 801cfac:	4b09      	ldr	r3, [pc, #36]	; (801cfd4 <udp_input_local_match+0xc4>)
 801cfae:	695b      	ldr	r3, [r3, #20]
 801cfb0:	429a      	cmp	r2, r3
 801cfb2:	d101      	bne.n	801cfb8 <udp_input_local_match+0xa8>
        return 1;
 801cfb4:	2301      	movs	r3, #1
 801cfb6:	e000      	b.n	801cfba <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801cfb8:	2300      	movs	r3, #0
}
 801cfba:	4618      	mov	r0, r3
 801cfbc:	3710      	adds	r7, #16
 801cfbe:	46bd      	mov	sp, r7
 801cfc0:	bd80      	pop	{r7, pc}
 801cfc2:	bf00      	nop
 801cfc4:	08029f08 	.word	0x08029f08
 801cfc8:	08029f38 	.word	0x08029f38
 801cfcc:	08029f5c 	.word	0x08029f5c
 801cfd0:	08029f84 	.word	0x08029f84
 801cfd4:	2000fa84 	.word	0x2000fa84

0801cfd8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801cfd8:	b590      	push	{r4, r7, lr}
 801cfda:	b08d      	sub	sp, #52	; 0x34
 801cfdc:	af02      	add	r7, sp, #8
 801cfde:	6078      	str	r0, [r7, #4]
 801cfe0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801cfe2:	2300      	movs	r3, #0
 801cfe4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801cfe6:	687b      	ldr	r3, [r7, #4]
 801cfe8:	2b00      	cmp	r3, #0
 801cfea:	d105      	bne.n	801cff8 <udp_input+0x20>
 801cfec:	4b82      	ldr	r3, [pc, #520]	; (801d1f8 <udp_input+0x220>)
 801cfee:	22cf      	movs	r2, #207	; 0xcf
 801cff0:	4982      	ldr	r1, [pc, #520]	; (801d1fc <udp_input+0x224>)
 801cff2:	4883      	ldr	r0, [pc, #524]	; (801d200 <udp_input+0x228>)
 801cff4:	f006 fff0 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801cff8:	683b      	ldr	r3, [r7, #0]
 801cffa:	2b00      	cmp	r3, #0
 801cffc:	d105      	bne.n	801d00a <udp_input+0x32>
 801cffe:	4b7e      	ldr	r3, [pc, #504]	; (801d1f8 <udp_input+0x220>)
 801d000:	22d0      	movs	r2, #208	; 0xd0
 801d002:	4980      	ldr	r1, [pc, #512]	; (801d204 <udp_input+0x22c>)
 801d004:	487e      	ldr	r0, [pc, #504]	; (801d200 <udp_input+0x228>)
 801d006:	f006 ffe7 	bl	8023fd8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801d00a:	687b      	ldr	r3, [r7, #4]
 801d00c:	895b      	ldrh	r3, [r3, #10]
 801d00e:	2b07      	cmp	r3, #7
 801d010:	d803      	bhi.n	801d01a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801d012:	6878      	ldr	r0, [r7, #4]
 801d014:	f7f9 fa3a 	bl	801648c <pbuf_free>
    goto end;
 801d018:	e0ea      	b.n	801d1f0 <udp_input+0x218>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	685b      	ldr	r3, [r3, #4]
 801d01e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801d020:	4b79      	ldr	r3, [pc, #484]	; (801d208 <udp_input+0x230>)
 801d022:	695b      	ldr	r3, [r3, #20]
 801d024:	4a78      	ldr	r2, [pc, #480]	; (801d208 <udp_input+0x230>)
 801d026:	6812      	ldr	r2, [r2, #0]
 801d028:	4611      	mov	r1, r2
 801d02a:	4618      	mov	r0, r3
 801d02c:	f003 fe2a 	bl	8020c84 <ip4_addr_isbroadcast_u32>
 801d030:	4603      	mov	r3, r0
 801d032:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801d034:	697b      	ldr	r3, [r7, #20]
 801d036:	881b      	ldrh	r3, [r3, #0]
 801d038:	b29b      	uxth	r3, r3
 801d03a:	4618      	mov	r0, r3
 801d03c:	f7f7 fe28 	bl	8014c90 <lwip_htons>
 801d040:	4603      	mov	r3, r0
 801d042:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801d044:	697b      	ldr	r3, [r7, #20]
 801d046:	885b      	ldrh	r3, [r3, #2]
 801d048:	b29b      	uxth	r3, r3
 801d04a:	4618      	mov	r0, r3
 801d04c:	f7f7 fe20 	bl	8014c90 <lwip_htons>
 801d050:	4603      	mov	r3, r0
 801d052:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801d054:	2300      	movs	r3, #0
 801d056:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801d058:	2300      	movs	r3, #0
 801d05a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801d05c:	2300      	movs	r3, #0
 801d05e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801d060:	4b6a      	ldr	r3, [pc, #424]	; (801d20c <udp_input+0x234>)
 801d062:	681b      	ldr	r3, [r3, #0]
 801d064:	627b      	str	r3, [r7, #36]	; 0x24
 801d066:	e060      	b.n	801d12a <udp_input+0x152>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801d068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d06a:	8a5b      	ldrh	r3, [r3, #18]
 801d06c:	89fa      	ldrh	r2, [r7, #14]
 801d06e:	429a      	cmp	r2, r3
 801d070:	d156      	bne.n	801d120 <udp_input+0x148>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801d072:	7cfb      	ldrb	r3, [r7, #19]
 801d074:	461a      	mov	r2, r3
 801d076:	6839      	ldr	r1, [r7, #0]
 801d078:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d07a:	f7ff ff49 	bl	801cf10 <udp_input_local_match>
 801d07e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801d080:	2b00      	cmp	r3, #0
 801d082:	d04d      	beq.n	801d120 <udp_input+0x148>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801d084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d086:	7c1b      	ldrb	r3, [r3, #16]
 801d088:	f003 0304 	and.w	r3, r3, #4
 801d08c:	2b00      	cmp	r3, #0
 801d08e:	d129      	bne.n	801d0e4 <udp_input+0x10c>
        if (uncon_pcb == NULL) {
 801d090:	69fb      	ldr	r3, [r7, #28]
 801d092:	2b00      	cmp	r3, #0
 801d094:	d102      	bne.n	801d09c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801d096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d098:	61fb      	str	r3, [r7, #28]
 801d09a:	e023      	b.n	801d0e4 <udp_input+0x10c>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801d09c:	7cfb      	ldrb	r3, [r7, #19]
 801d09e:	2b00      	cmp	r3, #0
 801d0a0:	d015      	beq.n	801d0ce <udp_input+0xf6>
 801d0a2:	4b59      	ldr	r3, [pc, #356]	; (801d208 <udp_input+0x230>)
 801d0a4:	695b      	ldr	r3, [r3, #20]
 801d0a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d0aa:	d110      	bne.n	801d0ce <udp_input+0xf6>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801d0ac:	69fb      	ldr	r3, [r7, #28]
 801d0ae:	681a      	ldr	r2, [r3, #0]
 801d0b0:	683b      	ldr	r3, [r7, #0]
 801d0b2:	3304      	adds	r3, #4
 801d0b4:	681b      	ldr	r3, [r3, #0]
 801d0b6:	429a      	cmp	r2, r3
 801d0b8:	d013      	beq.n	801d0e2 <udp_input+0x10a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801d0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0bc:	681a      	ldr	r2, [r3, #0]
 801d0be:	683b      	ldr	r3, [r7, #0]
 801d0c0:	3304      	adds	r3, #4
 801d0c2:	681b      	ldr	r3, [r3, #0]
 801d0c4:	429a      	cmp	r2, r3
 801d0c6:	d10c      	bne.n	801d0e2 <udp_input+0x10a>
              /* better match */
              uncon_pcb = pcb;
 801d0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0ca:	61fb      	str	r3, [r7, #28]
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801d0cc:	e009      	b.n	801d0e2 <udp_input+0x10a>
            }
          }
#endif /* LWIP_IPV4 */
        }
#if SO_REUSE
        else if (!ip_addr_isany(&pcb->local_ip)) {
 801d0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0d0:	2b00      	cmp	r3, #0
 801d0d2:	d007      	beq.n	801d0e4 <udp_input+0x10c>
 801d0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0d6:	681b      	ldr	r3, [r3, #0]
 801d0d8:	2b00      	cmp	r3, #0
 801d0da:	d003      	beq.n	801d0e4 <udp_input+0x10c>
          /* prefer specific IPs over catch-all */
          uncon_pcb = pcb;
 801d0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0de:	61fb      	str	r3, [r7, #28]
 801d0e0:	e000      	b.n	801d0e4 <udp_input+0x10c>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801d0e2:	bf00      	nop
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801d0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0e6:	8a9b      	ldrh	r3, [r3, #20]
 801d0e8:	8a3a      	ldrh	r2, [r7, #16]
 801d0ea:	429a      	cmp	r2, r3
 801d0ec:	d118      	bne.n	801d120 <udp_input+0x148>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801d0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0f0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	d005      	beq.n	801d102 <udp_input+0x12a>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801d0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0f8:	685a      	ldr	r2, [r3, #4]
 801d0fa:	4b43      	ldr	r3, [pc, #268]	; (801d208 <udp_input+0x230>)
 801d0fc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801d0fe:	429a      	cmp	r2, r3
 801d100:	d10e      	bne.n	801d120 <udp_input+0x148>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801d102:	6a3b      	ldr	r3, [r7, #32]
 801d104:	2b00      	cmp	r3, #0
 801d106:	d014      	beq.n	801d132 <udp_input+0x15a>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801d108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d10a:	68da      	ldr	r2, [r3, #12]
 801d10c:	6a3b      	ldr	r3, [r7, #32]
 801d10e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801d110:	4b3e      	ldr	r3, [pc, #248]	; (801d20c <udp_input+0x234>)
 801d112:	681a      	ldr	r2, [r3, #0]
 801d114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d116:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801d118:	4a3c      	ldr	r2, [pc, #240]	; (801d20c <udp_input+0x234>)
 801d11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d11c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801d11e:	e008      	b.n	801d132 <udp_input+0x15a>
      }
    }

    prev = pcb;
 801d120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d122:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801d124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d126:	68db      	ldr	r3, [r3, #12]
 801d128:	627b      	str	r3, [r7, #36]	; 0x24
 801d12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d12c:	2b00      	cmp	r3, #0
 801d12e:	d19b      	bne.n	801d068 <udp_input+0x90>
 801d130:	e000      	b.n	801d134 <udp_input+0x15c>
        break;
 801d132:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801d134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d136:	2b00      	cmp	r3, #0
 801d138:	d101      	bne.n	801d13e <udp_input+0x166>
    pcb = uncon_pcb;
 801d13a:	69fb      	ldr	r3, [r7, #28]
 801d13c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801d13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d140:	2b00      	cmp	r3, #0
 801d142:	d002      	beq.n	801d14a <udp_input+0x172>
    for_us = 1;
 801d144:	2301      	movs	r3, #1
 801d146:	76fb      	strb	r3, [r7, #27]
 801d148:	e00a      	b.n	801d160 <udp_input+0x188>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801d14a:	683b      	ldr	r3, [r7, #0]
 801d14c:	3304      	adds	r3, #4
 801d14e:	681a      	ldr	r2, [r3, #0]
 801d150:	4b2d      	ldr	r3, [pc, #180]	; (801d208 <udp_input+0x230>)
 801d152:	695b      	ldr	r3, [r3, #20]
 801d154:	429a      	cmp	r2, r3
 801d156:	bf0c      	ite	eq
 801d158:	2301      	moveq	r3, #1
 801d15a:	2300      	movne	r3, #0
 801d15c:	b2db      	uxtb	r3, r3
 801d15e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801d160:	7efb      	ldrb	r3, [r7, #27]
 801d162:	2b00      	cmp	r3, #0
 801d164:	d041      	beq.n	801d1ea <udp_input+0x212>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801d166:	2108      	movs	r1, #8
 801d168:	6878      	ldr	r0, [r7, #4]
 801d16a:	f7f9 f909 	bl	8016380 <pbuf_remove_header>
 801d16e:	4603      	mov	r3, r0
 801d170:	2b00      	cmp	r3, #0
 801d172:	d00a      	beq.n	801d18a <udp_input+0x1b2>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801d174:	4b20      	ldr	r3, [pc, #128]	; (801d1f8 <udp_input+0x220>)
 801d176:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801d17a:	4925      	ldr	r1, [pc, #148]	; (801d210 <udp_input+0x238>)
 801d17c:	4820      	ldr	r0, [pc, #128]	; (801d200 <udp_input+0x228>)
 801d17e:	f006 ff2b 	bl	8023fd8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801d182:	6878      	ldr	r0, [r7, #4]
 801d184:	f7f9 f982 	bl	801648c <pbuf_free>
      goto end;
 801d188:	e032      	b.n	801d1f0 <udp_input+0x218>
    }

    if (pcb != NULL) {
 801d18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d18c:	2b00      	cmp	r3, #0
 801d18e:	d012      	beq.n	801d1b6 <udp_input+0x1de>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801d190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d192:	699b      	ldr	r3, [r3, #24]
 801d194:	2b00      	cmp	r3, #0
 801d196:	d00a      	beq.n	801d1ae <udp_input+0x1d6>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801d198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d19a:	699c      	ldr	r4, [r3, #24]
 801d19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d19e:	69d8      	ldr	r0, [r3, #28]
 801d1a0:	8a3b      	ldrh	r3, [r7, #16]
 801d1a2:	9300      	str	r3, [sp, #0]
 801d1a4:	4b1b      	ldr	r3, [pc, #108]	; (801d214 <udp_input+0x23c>)
 801d1a6:	687a      	ldr	r2, [r7, #4]
 801d1a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d1aa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801d1ac:	e021      	b.n	801d1f2 <udp_input+0x21a>
        pbuf_free(p);
 801d1ae:	6878      	ldr	r0, [r7, #4]
 801d1b0:	f7f9 f96c 	bl	801648c <pbuf_free>
        goto end;
 801d1b4:	e01c      	b.n	801d1f0 <udp_input+0x218>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801d1b6:	7cfb      	ldrb	r3, [r7, #19]
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	d112      	bne.n	801d1e2 <udp_input+0x20a>
 801d1bc:	4b12      	ldr	r3, [pc, #72]	; (801d208 <udp_input+0x230>)
 801d1be:	695b      	ldr	r3, [r3, #20]
 801d1c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d1c4:	2be0      	cmp	r3, #224	; 0xe0
 801d1c6:	d00c      	beq.n	801d1e2 <udp_input+0x20a>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801d1c8:	4b0f      	ldr	r3, [pc, #60]	; (801d208 <udp_input+0x230>)
 801d1ca:	899b      	ldrh	r3, [r3, #12]
 801d1cc:	3308      	adds	r3, #8
 801d1ce:	b29b      	uxth	r3, r3
 801d1d0:	b21b      	sxth	r3, r3
 801d1d2:	4619      	mov	r1, r3
 801d1d4:	6878      	ldr	r0, [r7, #4]
 801d1d6:	f7f9 f946 	bl	8016466 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801d1da:	2103      	movs	r1, #3
 801d1dc:	6878      	ldr	r0, [r7, #4]
 801d1de:	f003 fa13 	bl	8020608 <icmp_dest_unreach>
      pbuf_free(p);
 801d1e2:	6878      	ldr	r0, [r7, #4]
 801d1e4:	f7f9 f952 	bl	801648c <pbuf_free>
  return;
 801d1e8:	e003      	b.n	801d1f2 <udp_input+0x21a>
    pbuf_free(p);
 801d1ea:	6878      	ldr	r0, [r7, #4]
 801d1ec:	f7f9 f94e 	bl	801648c <pbuf_free>
  return;
 801d1f0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801d1f2:	372c      	adds	r7, #44	; 0x2c
 801d1f4:	46bd      	mov	sp, r7
 801d1f6:	bd90      	pop	{r4, r7, pc}
 801d1f8:	08029f08 	.word	0x08029f08
 801d1fc:	08029fac 	.word	0x08029fac
 801d200:	08029f5c 	.word	0x08029f5c
 801d204:	08029fc4 	.word	0x08029fc4
 801d208:	2000fa84 	.word	0x2000fa84
 801d20c:	2001328c 	.word	0x2001328c
 801d210:	08029fe0 	.word	0x08029fe0
 801d214:	2000fa94 	.word	0x2000fa94

0801d218 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801d218:	b580      	push	{r7, lr}
 801d21a:	b088      	sub	sp, #32
 801d21c:	af02      	add	r7, sp, #8
 801d21e:	60f8      	str	r0, [r7, #12]
 801d220:	60b9      	str	r1, [r7, #8]
 801d222:	607a      	str	r2, [r7, #4]
 801d224:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801d226:	68fb      	ldr	r3, [r7, #12]
 801d228:	2b00      	cmp	r3, #0
 801d22a:	d109      	bne.n	801d240 <udp_sendto_if+0x28>
 801d22c:	4b2e      	ldr	r3, [pc, #184]	; (801d2e8 <udp_sendto_if+0xd0>)
 801d22e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d232:	492e      	ldr	r1, [pc, #184]	; (801d2ec <udp_sendto_if+0xd4>)
 801d234:	482e      	ldr	r0, [pc, #184]	; (801d2f0 <udp_sendto_if+0xd8>)
 801d236:	f006 fecf 	bl	8023fd8 <iprintf>
 801d23a:	f06f 030f 	mvn.w	r3, #15
 801d23e:	e04f      	b.n	801d2e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801d240:	68bb      	ldr	r3, [r7, #8]
 801d242:	2b00      	cmp	r3, #0
 801d244:	d109      	bne.n	801d25a <udp_sendto_if+0x42>
 801d246:	4b28      	ldr	r3, [pc, #160]	; (801d2e8 <udp_sendto_if+0xd0>)
 801d248:	f240 2281 	movw	r2, #641	; 0x281
 801d24c:	4929      	ldr	r1, [pc, #164]	; (801d2f4 <udp_sendto_if+0xdc>)
 801d24e:	4828      	ldr	r0, [pc, #160]	; (801d2f0 <udp_sendto_if+0xd8>)
 801d250:	f006 fec2 	bl	8023fd8 <iprintf>
 801d254:	f06f 030f 	mvn.w	r3, #15
 801d258:	e042      	b.n	801d2e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801d25a:	687b      	ldr	r3, [r7, #4]
 801d25c:	2b00      	cmp	r3, #0
 801d25e:	d109      	bne.n	801d274 <udp_sendto_if+0x5c>
 801d260:	4b21      	ldr	r3, [pc, #132]	; (801d2e8 <udp_sendto_if+0xd0>)
 801d262:	f240 2282 	movw	r2, #642	; 0x282
 801d266:	4924      	ldr	r1, [pc, #144]	; (801d2f8 <udp_sendto_if+0xe0>)
 801d268:	4821      	ldr	r0, [pc, #132]	; (801d2f0 <udp_sendto_if+0xd8>)
 801d26a:	f006 feb5 	bl	8023fd8 <iprintf>
 801d26e:	f06f 030f 	mvn.w	r3, #15
 801d272:	e035      	b.n	801d2e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801d274:	6a3b      	ldr	r3, [r7, #32]
 801d276:	2b00      	cmp	r3, #0
 801d278:	d109      	bne.n	801d28e <udp_sendto_if+0x76>
 801d27a:	4b1b      	ldr	r3, [pc, #108]	; (801d2e8 <udp_sendto_if+0xd0>)
 801d27c:	f240 2283 	movw	r2, #643	; 0x283
 801d280:	491e      	ldr	r1, [pc, #120]	; (801d2fc <udp_sendto_if+0xe4>)
 801d282:	481b      	ldr	r0, [pc, #108]	; (801d2f0 <udp_sendto_if+0xd8>)
 801d284:	f006 fea8 	bl	8023fd8 <iprintf>
 801d288:	f06f 030f 	mvn.w	r3, #15
 801d28c:	e028      	b.n	801d2e0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801d28e:	68fb      	ldr	r3, [r7, #12]
 801d290:	2b00      	cmp	r3, #0
 801d292:	d009      	beq.n	801d2a8 <udp_sendto_if+0x90>
 801d294:	68fb      	ldr	r3, [r7, #12]
 801d296:	681b      	ldr	r3, [r3, #0]
 801d298:	2b00      	cmp	r3, #0
 801d29a:	d005      	beq.n	801d2a8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801d29c:	68fb      	ldr	r3, [r7, #12]
 801d29e:	681b      	ldr	r3, [r3, #0]
 801d2a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801d2a4:	2be0      	cmp	r3, #224	; 0xe0
 801d2a6:	d103      	bne.n	801d2b0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801d2a8:	6a3b      	ldr	r3, [r7, #32]
 801d2aa:	3304      	adds	r3, #4
 801d2ac:	617b      	str	r3, [r7, #20]
 801d2ae:	e00b      	b.n	801d2c8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801d2b0:	68fb      	ldr	r3, [r7, #12]
 801d2b2:	681a      	ldr	r2, [r3, #0]
 801d2b4:	6a3b      	ldr	r3, [r7, #32]
 801d2b6:	3304      	adds	r3, #4
 801d2b8:	681b      	ldr	r3, [r3, #0]
 801d2ba:	429a      	cmp	r2, r3
 801d2bc:	d002      	beq.n	801d2c4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801d2be:	f06f 0303 	mvn.w	r3, #3
 801d2c2:	e00d      	b.n	801d2e0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801d2c4:	68fb      	ldr	r3, [r7, #12]
 801d2c6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801d2c8:	887a      	ldrh	r2, [r7, #2]
 801d2ca:	697b      	ldr	r3, [r7, #20]
 801d2cc:	9301      	str	r3, [sp, #4]
 801d2ce:	6a3b      	ldr	r3, [r7, #32]
 801d2d0:	9300      	str	r3, [sp, #0]
 801d2d2:	4613      	mov	r3, r2
 801d2d4:	687a      	ldr	r2, [r7, #4]
 801d2d6:	68b9      	ldr	r1, [r7, #8]
 801d2d8:	68f8      	ldr	r0, [r7, #12]
 801d2da:	f000 f811 	bl	801d300 <udp_sendto_if_src>
 801d2de:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801d2e0:	4618      	mov	r0, r3
 801d2e2:	3718      	adds	r7, #24
 801d2e4:	46bd      	mov	sp, r7
 801d2e6:	bd80      	pop	{r7, pc}
 801d2e8:	08029f08 	.word	0x08029f08
 801d2ec:	0802a07c 	.word	0x0802a07c
 801d2f0:	08029f5c 	.word	0x08029f5c
 801d2f4:	0802a098 	.word	0x0802a098
 801d2f8:	0802a0b4 	.word	0x0802a0b4
 801d2fc:	0802a0d4 	.word	0x0802a0d4

0801d300 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801d300:	b580      	push	{r7, lr}
 801d302:	b08c      	sub	sp, #48	; 0x30
 801d304:	af04      	add	r7, sp, #16
 801d306:	60f8      	str	r0, [r7, #12]
 801d308:	60b9      	str	r1, [r7, #8]
 801d30a:	607a      	str	r2, [r7, #4]
 801d30c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801d30e:	68fb      	ldr	r3, [r7, #12]
 801d310:	2b00      	cmp	r3, #0
 801d312:	d109      	bne.n	801d328 <udp_sendto_if_src+0x28>
 801d314:	4b65      	ldr	r3, [pc, #404]	; (801d4ac <udp_sendto_if_src+0x1ac>)
 801d316:	f240 22d1 	movw	r2, #721	; 0x2d1
 801d31a:	4965      	ldr	r1, [pc, #404]	; (801d4b0 <udp_sendto_if_src+0x1b0>)
 801d31c:	4865      	ldr	r0, [pc, #404]	; (801d4b4 <udp_sendto_if_src+0x1b4>)
 801d31e:	f006 fe5b 	bl	8023fd8 <iprintf>
 801d322:	f06f 030f 	mvn.w	r3, #15
 801d326:	e0bc      	b.n	801d4a2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801d328:	68bb      	ldr	r3, [r7, #8]
 801d32a:	2b00      	cmp	r3, #0
 801d32c:	d109      	bne.n	801d342 <udp_sendto_if_src+0x42>
 801d32e:	4b5f      	ldr	r3, [pc, #380]	; (801d4ac <udp_sendto_if_src+0x1ac>)
 801d330:	f240 22d2 	movw	r2, #722	; 0x2d2
 801d334:	4960      	ldr	r1, [pc, #384]	; (801d4b8 <udp_sendto_if_src+0x1b8>)
 801d336:	485f      	ldr	r0, [pc, #380]	; (801d4b4 <udp_sendto_if_src+0x1b4>)
 801d338:	f006 fe4e 	bl	8023fd8 <iprintf>
 801d33c:	f06f 030f 	mvn.w	r3, #15
 801d340:	e0af      	b.n	801d4a2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801d342:	687b      	ldr	r3, [r7, #4]
 801d344:	2b00      	cmp	r3, #0
 801d346:	d109      	bne.n	801d35c <udp_sendto_if_src+0x5c>
 801d348:	4b58      	ldr	r3, [pc, #352]	; (801d4ac <udp_sendto_if_src+0x1ac>)
 801d34a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801d34e:	495b      	ldr	r1, [pc, #364]	; (801d4bc <udp_sendto_if_src+0x1bc>)
 801d350:	4858      	ldr	r0, [pc, #352]	; (801d4b4 <udp_sendto_if_src+0x1b4>)
 801d352:	f006 fe41 	bl	8023fd8 <iprintf>
 801d356:	f06f 030f 	mvn.w	r3, #15
 801d35a:	e0a2      	b.n	801d4a2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801d35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d35e:	2b00      	cmp	r3, #0
 801d360:	d109      	bne.n	801d376 <udp_sendto_if_src+0x76>
 801d362:	4b52      	ldr	r3, [pc, #328]	; (801d4ac <udp_sendto_if_src+0x1ac>)
 801d364:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801d368:	4955      	ldr	r1, [pc, #340]	; (801d4c0 <udp_sendto_if_src+0x1c0>)
 801d36a:	4852      	ldr	r0, [pc, #328]	; (801d4b4 <udp_sendto_if_src+0x1b4>)
 801d36c:	f006 fe34 	bl	8023fd8 <iprintf>
 801d370:	f06f 030f 	mvn.w	r3, #15
 801d374:	e095      	b.n	801d4a2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801d376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d378:	2b00      	cmp	r3, #0
 801d37a:	d109      	bne.n	801d390 <udp_sendto_if_src+0x90>
 801d37c:	4b4b      	ldr	r3, [pc, #300]	; (801d4ac <udp_sendto_if_src+0x1ac>)
 801d37e:	f240 22d5 	movw	r2, #725	; 0x2d5
 801d382:	4950      	ldr	r1, [pc, #320]	; (801d4c4 <udp_sendto_if_src+0x1c4>)
 801d384:	484b      	ldr	r0, [pc, #300]	; (801d4b4 <udp_sendto_if_src+0x1b4>)
 801d386:	f006 fe27 	bl	8023fd8 <iprintf>
 801d38a:	f06f 030f 	mvn.w	r3, #15
 801d38e:	e088      	b.n	801d4a2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801d390:	68fb      	ldr	r3, [r7, #12]
 801d392:	8a5b      	ldrh	r3, [r3, #18]
 801d394:	2b00      	cmp	r3, #0
 801d396:	d10f      	bne.n	801d3b8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801d398:	68f9      	ldr	r1, [r7, #12]
 801d39a:	68fb      	ldr	r3, [r7, #12]
 801d39c:	8a5b      	ldrh	r3, [r3, #18]
 801d39e:	461a      	mov	r2, r3
 801d3a0:	68f8      	ldr	r0, [r7, #12]
 801d3a2:	f000 f893 	bl	801d4cc <udp_bind>
 801d3a6:	4603      	mov	r3, r0
 801d3a8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801d3aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801d3ae:	2b00      	cmp	r3, #0
 801d3b0:	d002      	beq.n	801d3b8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801d3b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801d3b6:	e074      	b.n	801d4a2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801d3b8:	68bb      	ldr	r3, [r7, #8]
 801d3ba:	891b      	ldrh	r3, [r3, #8]
 801d3bc:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801d3c0:	4293      	cmp	r3, r2
 801d3c2:	d902      	bls.n	801d3ca <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801d3c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d3c8:	e06b      	b.n	801d4a2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801d3ca:	2108      	movs	r1, #8
 801d3cc:	68b8      	ldr	r0, [r7, #8]
 801d3ce:	f7f8 ffc7 	bl	8016360 <pbuf_add_header>
 801d3d2:	4603      	mov	r3, r0
 801d3d4:	2b00      	cmp	r3, #0
 801d3d6:	d015      	beq.n	801d404 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801d3d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d3dc:	2108      	movs	r1, #8
 801d3de:	2022      	movs	r0, #34	; 0x22
 801d3e0:	f7f8 fd70 	bl	8015ec4 <pbuf_alloc>
 801d3e4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801d3e6:	69fb      	ldr	r3, [r7, #28]
 801d3e8:	2b00      	cmp	r3, #0
 801d3ea:	d102      	bne.n	801d3f2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801d3ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d3f0:	e057      	b.n	801d4a2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801d3f2:	68bb      	ldr	r3, [r7, #8]
 801d3f4:	891b      	ldrh	r3, [r3, #8]
 801d3f6:	2b00      	cmp	r3, #0
 801d3f8:	d006      	beq.n	801d408 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801d3fa:	68b9      	ldr	r1, [r7, #8]
 801d3fc:	69f8      	ldr	r0, [r7, #28]
 801d3fe:	f7f9 f969 	bl	80166d4 <pbuf_chain>
 801d402:	e001      	b.n	801d408 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801d404:	68bb      	ldr	r3, [r7, #8]
 801d406:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801d408:	69fb      	ldr	r3, [r7, #28]
 801d40a:	895b      	ldrh	r3, [r3, #10]
 801d40c:	2b07      	cmp	r3, #7
 801d40e:	d806      	bhi.n	801d41e <udp_sendto_if_src+0x11e>
 801d410:	4b26      	ldr	r3, [pc, #152]	; (801d4ac <udp_sendto_if_src+0x1ac>)
 801d412:	f240 320d 	movw	r2, #781	; 0x30d
 801d416:	492c      	ldr	r1, [pc, #176]	; (801d4c8 <udp_sendto_if_src+0x1c8>)
 801d418:	4826      	ldr	r0, [pc, #152]	; (801d4b4 <udp_sendto_if_src+0x1b4>)
 801d41a:	f006 fddd 	bl	8023fd8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801d41e:	69fb      	ldr	r3, [r7, #28]
 801d420:	685b      	ldr	r3, [r3, #4]
 801d422:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801d424:	68fb      	ldr	r3, [r7, #12]
 801d426:	8a5b      	ldrh	r3, [r3, #18]
 801d428:	4618      	mov	r0, r3
 801d42a:	f7f7 fc31 	bl	8014c90 <lwip_htons>
 801d42e:	4603      	mov	r3, r0
 801d430:	461a      	mov	r2, r3
 801d432:	697b      	ldr	r3, [r7, #20]
 801d434:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801d436:	887b      	ldrh	r3, [r7, #2]
 801d438:	4618      	mov	r0, r3
 801d43a:	f7f7 fc29 	bl	8014c90 <lwip_htons>
 801d43e:	4603      	mov	r3, r0
 801d440:	461a      	mov	r2, r3
 801d442:	697b      	ldr	r3, [r7, #20]
 801d444:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801d446:	697b      	ldr	r3, [r7, #20]
 801d448:	2200      	movs	r2, #0
 801d44a:	719a      	strb	r2, [r3, #6]
 801d44c:	2200      	movs	r2, #0
 801d44e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801d450:	69fb      	ldr	r3, [r7, #28]
 801d452:	891b      	ldrh	r3, [r3, #8]
 801d454:	4618      	mov	r0, r3
 801d456:	f7f7 fc1b 	bl	8014c90 <lwip_htons>
 801d45a:	4603      	mov	r3, r0
 801d45c:	461a      	mov	r2, r3
 801d45e:	697b      	ldr	r3, [r7, #20]
 801d460:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801d462:	2311      	movs	r3, #17
 801d464:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801d466:	68fb      	ldr	r3, [r7, #12]
 801d468:	7adb      	ldrb	r3, [r3, #11]
 801d46a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801d46c:	68fb      	ldr	r3, [r7, #12]
 801d46e:	7a9b      	ldrb	r3, [r3, #10]
 801d470:	7cb9      	ldrb	r1, [r7, #18]
 801d472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d474:	9202      	str	r2, [sp, #8]
 801d476:	7cfa      	ldrb	r2, [r7, #19]
 801d478:	9201      	str	r2, [sp, #4]
 801d47a:	9300      	str	r3, [sp, #0]
 801d47c:	460b      	mov	r3, r1
 801d47e:	687a      	ldr	r2, [r7, #4]
 801d480:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d482:	69f8      	ldr	r0, [r7, #28]
 801d484:	f003 fb50 	bl	8020b28 <ip4_output_if_src>
 801d488:	4603      	mov	r3, r0
 801d48a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801d48c:	69fa      	ldr	r2, [r7, #28]
 801d48e:	68bb      	ldr	r3, [r7, #8]
 801d490:	429a      	cmp	r2, r3
 801d492:	d004      	beq.n	801d49e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801d494:	69f8      	ldr	r0, [r7, #28]
 801d496:	f7f8 fff9 	bl	801648c <pbuf_free>
    q = NULL;
 801d49a:	2300      	movs	r3, #0
 801d49c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801d49e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801d4a2:	4618      	mov	r0, r3
 801d4a4:	3720      	adds	r7, #32
 801d4a6:	46bd      	mov	sp, r7
 801d4a8:	bd80      	pop	{r7, pc}
 801d4aa:	bf00      	nop
 801d4ac:	08029f08 	.word	0x08029f08
 801d4b0:	0802a0f4 	.word	0x0802a0f4
 801d4b4:	08029f5c 	.word	0x08029f5c
 801d4b8:	0802a114 	.word	0x0802a114
 801d4bc:	0802a134 	.word	0x0802a134
 801d4c0:	0802a158 	.word	0x0802a158
 801d4c4:	0802a17c 	.word	0x0802a17c
 801d4c8:	0802a1a0 	.word	0x0802a1a0

0801d4cc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801d4cc:	b580      	push	{r7, lr}
 801d4ce:	b086      	sub	sp, #24
 801d4d0:	af00      	add	r7, sp, #0
 801d4d2:	60f8      	str	r0, [r7, #12]
 801d4d4:	60b9      	str	r1, [r7, #8]
 801d4d6:	4613      	mov	r3, r2
 801d4d8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801d4da:	68bb      	ldr	r3, [r7, #8]
 801d4dc:	2b00      	cmp	r3, #0
 801d4de:	d101      	bne.n	801d4e4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801d4e0:	4b3f      	ldr	r3, [pc, #252]	; (801d5e0 <udp_bind+0x114>)
 801d4e2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801d4e4:	68fb      	ldr	r3, [r7, #12]
 801d4e6:	2b00      	cmp	r3, #0
 801d4e8:	d109      	bne.n	801d4fe <udp_bind+0x32>
 801d4ea:	4b3e      	ldr	r3, [pc, #248]	; (801d5e4 <udp_bind+0x118>)
 801d4ec:	f240 32b7 	movw	r2, #951	; 0x3b7
 801d4f0:	493d      	ldr	r1, [pc, #244]	; (801d5e8 <udp_bind+0x11c>)
 801d4f2:	483e      	ldr	r0, [pc, #248]	; (801d5ec <udp_bind+0x120>)
 801d4f4:	f006 fd70 	bl	8023fd8 <iprintf>
 801d4f8:	f06f 030f 	mvn.w	r3, #15
 801d4fc:	e06c      	b.n	801d5d8 <udp_bind+0x10c>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801d4fe:	2300      	movs	r3, #0
 801d500:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d502:	4b3b      	ldr	r3, [pc, #236]	; (801d5f0 <udp_bind+0x124>)
 801d504:	681b      	ldr	r3, [r3, #0]
 801d506:	617b      	str	r3, [r7, #20]
 801d508:	e009      	b.n	801d51e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801d50a:	68fa      	ldr	r2, [r7, #12]
 801d50c:	697b      	ldr	r3, [r7, #20]
 801d50e:	429a      	cmp	r2, r3
 801d510:	d102      	bne.n	801d518 <udp_bind+0x4c>
      rebind = 1;
 801d512:	2301      	movs	r3, #1
 801d514:	74fb      	strb	r3, [r7, #19]
      break;
 801d516:	e005      	b.n	801d524 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d518:	697b      	ldr	r3, [r7, #20]
 801d51a:	68db      	ldr	r3, [r3, #12]
 801d51c:	617b      	str	r3, [r7, #20]
 801d51e:	697b      	ldr	r3, [r7, #20]
 801d520:	2b00      	cmp	r3, #0
 801d522:	d1f2      	bne.n	801d50a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801d524:	88fb      	ldrh	r3, [r7, #6]
 801d526:	2b00      	cmp	r3, #0
 801d528:	d109      	bne.n	801d53e <udp_bind+0x72>
    port = udp_new_port();
 801d52a:	f7ff fcb9 	bl	801cea0 <udp_new_port>
 801d52e:	4603      	mov	r3, r0
 801d530:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801d532:	88fb      	ldrh	r3, [r7, #6]
 801d534:	2b00      	cmp	r3, #0
 801d536:	d138      	bne.n	801d5aa <udp_bind+0xde>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801d538:	f06f 0307 	mvn.w	r3, #7
 801d53c:	e04c      	b.n	801d5d8 <udp_bind+0x10c>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d53e:	4b2c      	ldr	r3, [pc, #176]	; (801d5f0 <udp_bind+0x124>)
 801d540:	681b      	ldr	r3, [r3, #0]
 801d542:	617b      	str	r3, [r7, #20]
 801d544:	e02e      	b.n	801d5a4 <udp_bind+0xd8>
      if (pcb != ipcb) {
 801d546:	68fa      	ldr	r2, [r7, #12]
 801d548:	697b      	ldr	r3, [r7, #20]
 801d54a:	429a      	cmp	r2, r3
 801d54c:	d027      	beq.n	801d59e <udp_bind+0xd2>
        /* By default, we don't allow to bind to a port that any other udp
           PCB is already bound to, unless *all* PCBs with that port have tha
           REUSEADDR flag set. */
#if SO_REUSE
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 801d54e:	68fb      	ldr	r3, [r7, #12]
 801d550:	7a5b      	ldrb	r3, [r3, #9]
 801d552:	f003 0304 	and.w	r3, r3, #4
 801d556:	2b00      	cmp	r3, #0
 801d558:	d005      	beq.n	801d566 <udp_bind+0x9a>
            !ip_get_option(ipcb, SOF_REUSEADDR))
 801d55a:	697b      	ldr	r3, [r7, #20]
 801d55c:	7a5b      	ldrb	r3, [r3, #9]
 801d55e:	f003 0304 	and.w	r3, r3, #4
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 801d562:	2b00      	cmp	r3, #0
 801d564:	d11b      	bne.n	801d59e <udp_bind+0xd2>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801d566:	697b      	ldr	r3, [r7, #20]
 801d568:	8a5b      	ldrh	r3, [r3, #18]
 801d56a:	88fa      	ldrh	r2, [r7, #6]
 801d56c:	429a      	cmp	r2, r3
 801d56e:	d116      	bne.n	801d59e <udp_bind+0xd2>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801d570:	697b      	ldr	r3, [r7, #20]
 801d572:	681a      	ldr	r2, [r3, #0]
 801d574:	68bb      	ldr	r3, [r7, #8]
 801d576:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801d578:	429a      	cmp	r2, r3
 801d57a:	d00d      	beq.n	801d598 <udp_bind+0xcc>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801d57c:	68bb      	ldr	r3, [r7, #8]
 801d57e:	2b00      	cmp	r3, #0
 801d580:	d00a      	beq.n	801d598 <udp_bind+0xcc>
 801d582:	68bb      	ldr	r3, [r7, #8]
 801d584:	681b      	ldr	r3, [r3, #0]
 801d586:	2b00      	cmp	r3, #0
 801d588:	d006      	beq.n	801d598 <udp_bind+0xcc>
              ip_addr_isany(&ipcb->local_ip))) {
 801d58a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801d58c:	2b00      	cmp	r3, #0
 801d58e:	d003      	beq.n	801d598 <udp_bind+0xcc>
              ip_addr_isany(&ipcb->local_ip))) {
 801d590:	697b      	ldr	r3, [r7, #20]
 801d592:	681b      	ldr	r3, [r3, #0]
 801d594:	2b00      	cmp	r3, #0
 801d596:	d102      	bne.n	801d59e <udp_bind+0xd2>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801d598:	f06f 0307 	mvn.w	r3, #7
 801d59c:	e01c      	b.n	801d5d8 <udp_bind+0x10c>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d59e:	697b      	ldr	r3, [r7, #20]
 801d5a0:	68db      	ldr	r3, [r3, #12]
 801d5a2:	617b      	str	r3, [r7, #20]
 801d5a4:	697b      	ldr	r3, [r7, #20]
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	d1cd      	bne.n	801d546 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801d5aa:	68bb      	ldr	r3, [r7, #8]
 801d5ac:	2b00      	cmp	r3, #0
 801d5ae:	d002      	beq.n	801d5b6 <udp_bind+0xea>
 801d5b0:	68bb      	ldr	r3, [r7, #8]
 801d5b2:	681b      	ldr	r3, [r3, #0]
 801d5b4:	e000      	b.n	801d5b8 <udp_bind+0xec>
 801d5b6:	2300      	movs	r3, #0
 801d5b8:	68fa      	ldr	r2, [r7, #12]
 801d5ba:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801d5bc:	68fb      	ldr	r3, [r7, #12]
 801d5be:	88fa      	ldrh	r2, [r7, #6]
 801d5c0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801d5c2:	7cfb      	ldrb	r3, [r7, #19]
 801d5c4:	2b00      	cmp	r3, #0
 801d5c6:	d106      	bne.n	801d5d6 <udp_bind+0x10a>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801d5c8:	4b09      	ldr	r3, [pc, #36]	; (801d5f0 <udp_bind+0x124>)
 801d5ca:	681a      	ldr	r2, [r3, #0]
 801d5cc:	68fb      	ldr	r3, [r7, #12]
 801d5ce:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801d5d0:	4a07      	ldr	r2, [pc, #28]	; (801d5f0 <udp_bind+0x124>)
 801d5d2:	68fb      	ldr	r3, [r7, #12]
 801d5d4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801d5d6:	2300      	movs	r3, #0
}
 801d5d8:	4618      	mov	r0, r3
 801d5da:	3718      	adds	r7, #24
 801d5dc:	46bd      	mov	sp, r7
 801d5de:	bd80      	pop	{r7, pc}
 801d5e0:	0802af70 	.word	0x0802af70
 801d5e4:	08029f08 	.word	0x08029f08
 801d5e8:	0802a1d0 	.word	0x0802a1d0
 801d5ec:	08029f5c 	.word	0x08029f5c
 801d5f0:	2001328c 	.word	0x2001328c

0801d5f4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801d5f4:	b580      	push	{r7, lr}
 801d5f6:	b086      	sub	sp, #24
 801d5f8:	af00      	add	r7, sp, #0
 801d5fa:	60f8      	str	r0, [r7, #12]
 801d5fc:	60b9      	str	r1, [r7, #8]
 801d5fe:	4613      	mov	r3, r2
 801d600:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801d602:	68fb      	ldr	r3, [r7, #12]
 801d604:	2b00      	cmp	r3, #0
 801d606:	d109      	bne.n	801d61c <udp_connect+0x28>
 801d608:	4b2c      	ldr	r3, [pc, #176]	; (801d6bc <udp_connect+0xc8>)
 801d60a:	f240 4235 	movw	r2, #1077	; 0x435
 801d60e:	492c      	ldr	r1, [pc, #176]	; (801d6c0 <udp_connect+0xcc>)
 801d610:	482c      	ldr	r0, [pc, #176]	; (801d6c4 <udp_connect+0xd0>)
 801d612:	f006 fce1 	bl	8023fd8 <iprintf>
 801d616:	f06f 030f 	mvn.w	r3, #15
 801d61a:	e04b      	b.n	801d6b4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801d61c:	68bb      	ldr	r3, [r7, #8]
 801d61e:	2b00      	cmp	r3, #0
 801d620:	d109      	bne.n	801d636 <udp_connect+0x42>
 801d622:	4b26      	ldr	r3, [pc, #152]	; (801d6bc <udp_connect+0xc8>)
 801d624:	f240 4236 	movw	r2, #1078	; 0x436
 801d628:	4927      	ldr	r1, [pc, #156]	; (801d6c8 <udp_connect+0xd4>)
 801d62a:	4826      	ldr	r0, [pc, #152]	; (801d6c4 <udp_connect+0xd0>)
 801d62c:	f006 fcd4 	bl	8023fd8 <iprintf>
 801d630:	f06f 030f 	mvn.w	r3, #15
 801d634:	e03e      	b.n	801d6b4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801d636:	68fb      	ldr	r3, [r7, #12]
 801d638:	8a5b      	ldrh	r3, [r3, #18]
 801d63a:	2b00      	cmp	r3, #0
 801d63c:	d10f      	bne.n	801d65e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801d63e:	68f9      	ldr	r1, [r7, #12]
 801d640:	68fb      	ldr	r3, [r7, #12]
 801d642:	8a5b      	ldrh	r3, [r3, #18]
 801d644:	461a      	mov	r2, r3
 801d646:	68f8      	ldr	r0, [r7, #12]
 801d648:	f7ff ff40 	bl	801d4cc <udp_bind>
 801d64c:	4603      	mov	r3, r0
 801d64e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801d650:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d654:	2b00      	cmp	r3, #0
 801d656:	d002      	beq.n	801d65e <udp_connect+0x6a>
      return err;
 801d658:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d65c:	e02a      	b.n	801d6b4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801d65e:	68bb      	ldr	r3, [r7, #8]
 801d660:	2b00      	cmp	r3, #0
 801d662:	d002      	beq.n	801d66a <udp_connect+0x76>
 801d664:	68bb      	ldr	r3, [r7, #8]
 801d666:	681b      	ldr	r3, [r3, #0]
 801d668:	e000      	b.n	801d66c <udp_connect+0x78>
 801d66a:	2300      	movs	r3, #0
 801d66c:	68fa      	ldr	r2, [r7, #12]
 801d66e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801d670:	68fb      	ldr	r3, [r7, #12]
 801d672:	88fa      	ldrh	r2, [r7, #6]
 801d674:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801d676:	68fb      	ldr	r3, [r7, #12]
 801d678:	7c1b      	ldrb	r3, [r3, #16]
 801d67a:	f043 0304 	orr.w	r3, r3, #4
 801d67e:	b2da      	uxtb	r2, r3
 801d680:	68fb      	ldr	r3, [r7, #12]
 801d682:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d684:	4b11      	ldr	r3, [pc, #68]	; (801d6cc <udp_connect+0xd8>)
 801d686:	681b      	ldr	r3, [r3, #0]
 801d688:	617b      	str	r3, [r7, #20]
 801d68a:	e008      	b.n	801d69e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801d68c:	68fa      	ldr	r2, [r7, #12]
 801d68e:	697b      	ldr	r3, [r7, #20]
 801d690:	429a      	cmp	r2, r3
 801d692:	d101      	bne.n	801d698 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801d694:	2300      	movs	r3, #0
 801d696:	e00d      	b.n	801d6b4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d698:	697b      	ldr	r3, [r7, #20]
 801d69a:	68db      	ldr	r3, [r3, #12]
 801d69c:	617b      	str	r3, [r7, #20]
 801d69e:	697b      	ldr	r3, [r7, #20]
 801d6a0:	2b00      	cmp	r3, #0
 801d6a2:	d1f3      	bne.n	801d68c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801d6a4:	4b09      	ldr	r3, [pc, #36]	; (801d6cc <udp_connect+0xd8>)
 801d6a6:	681a      	ldr	r2, [r3, #0]
 801d6a8:	68fb      	ldr	r3, [r7, #12]
 801d6aa:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801d6ac:	4a07      	ldr	r2, [pc, #28]	; (801d6cc <udp_connect+0xd8>)
 801d6ae:	68fb      	ldr	r3, [r7, #12]
 801d6b0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801d6b2:	2300      	movs	r3, #0
}
 801d6b4:	4618      	mov	r0, r3
 801d6b6:	3718      	adds	r7, #24
 801d6b8:	46bd      	mov	sp, r7
 801d6ba:	bd80      	pop	{r7, pc}
 801d6bc:	08029f08 	.word	0x08029f08
 801d6c0:	0802a1e8 	.word	0x0802a1e8
 801d6c4:	08029f5c 	.word	0x08029f5c
 801d6c8:	0802a204 	.word	0x0802a204
 801d6cc:	2001328c 	.word	0x2001328c

0801d6d0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801d6d0:	b580      	push	{r7, lr}
 801d6d2:	b084      	sub	sp, #16
 801d6d4:	af00      	add	r7, sp, #0
 801d6d6:	60f8      	str	r0, [r7, #12]
 801d6d8:	60b9      	str	r1, [r7, #8]
 801d6da:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801d6dc:	68fb      	ldr	r3, [r7, #12]
 801d6de:	2b00      	cmp	r3, #0
 801d6e0:	d107      	bne.n	801d6f2 <udp_recv+0x22>
 801d6e2:	4b08      	ldr	r3, [pc, #32]	; (801d704 <udp_recv+0x34>)
 801d6e4:	f240 428a 	movw	r2, #1162	; 0x48a
 801d6e8:	4907      	ldr	r1, [pc, #28]	; (801d708 <udp_recv+0x38>)
 801d6ea:	4808      	ldr	r0, [pc, #32]	; (801d70c <udp_recv+0x3c>)
 801d6ec:	f006 fc74 	bl	8023fd8 <iprintf>
 801d6f0:	e005      	b.n	801d6fe <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801d6f2:	68fb      	ldr	r3, [r7, #12]
 801d6f4:	68ba      	ldr	r2, [r7, #8]
 801d6f6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801d6f8:	68fb      	ldr	r3, [r7, #12]
 801d6fa:	687a      	ldr	r2, [r7, #4]
 801d6fc:	61da      	str	r2, [r3, #28]
}
 801d6fe:	3710      	adds	r7, #16
 801d700:	46bd      	mov	sp, r7
 801d702:	bd80      	pop	{r7, pc}
 801d704:	08029f08 	.word	0x08029f08
 801d708:	0802a23c 	.word	0x0802a23c
 801d70c:	08029f5c 	.word	0x08029f5c

0801d710 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801d710:	b580      	push	{r7, lr}
 801d712:	b084      	sub	sp, #16
 801d714:	af00      	add	r7, sp, #0
 801d716:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801d718:	687b      	ldr	r3, [r7, #4]
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	d107      	bne.n	801d72e <udp_remove+0x1e>
 801d71e:	4b19      	ldr	r3, [pc, #100]	; (801d784 <udp_remove+0x74>)
 801d720:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801d724:	4918      	ldr	r1, [pc, #96]	; (801d788 <udp_remove+0x78>)
 801d726:	4819      	ldr	r0, [pc, #100]	; (801d78c <udp_remove+0x7c>)
 801d728:	f006 fc56 	bl	8023fd8 <iprintf>
 801d72c:	e026      	b.n	801d77c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801d72e:	4b18      	ldr	r3, [pc, #96]	; (801d790 <udp_remove+0x80>)
 801d730:	681b      	ldr	r3, [r3, #0]
 801d732:	687a      	ldr	r2, [r7, #4]
 801d734:	429a      	cmp	r2, r3
 801d736:	d105      	bne.n	801d744 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801d738:	4b15      	ldr	r3, [pc, #84]	; (801d790 <udp_remove+0x80>)
 801d73a:	681b      	ldr	r3, [r3, #0]
 801d73c:	68db      	ldr	r3, [r3, #12]
 801d73e:	4a14      	ldr	r2, [pc, #80]	; (801d790 <udp_remove+0x80>)
 801d740:	6013      	str	r3, [r2, #0]
 801d742:	e017      	b.n	801d774 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801d744:	4b12      	ldr	r3, [pc, #72]	; (801d790 <udp_remove+0x80>)
 801d746:	681b      	ldr	r3, [r3, #0]
 801d748:	60fb      	str	r3, [r7, #12]
 801d74a:	e010      	b.n	801d76e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801d74c:	68fb      	ldr	r3, [r7, #12]
 801d74e:	68db      	ldr	r3, [r3, #12]
 801d750:	2b00      	cmp	r3, #0
 801d752:	d009      	beq.n	801d768 <udp_remove+0x58>
 801d754:	68fb      	ldr	r3, [r7, #12]
 801d756:	68db      	ldr	r3, [r3, #12]
 801d758:	687a      	ldr	r2, [r7, #4]
 801d75a:	429a      	cmp	r2, r3
 801d75c:	d104      	bne.n	801d768 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	68da      	ldr	r2, [r3, #12]
 801d762:	68fb      	ldr	r3, [r7, #12]
 801d764:	60da      	str	r2, [r3, #12]
        break;
 801d766:	e005      	b.n	801d774 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801d768:	68fb      	ldr	r3, [r7, #12]
 801d76a:	68db      	ldr	r3, [r3, #12]
 801d76c:	60fb      	str	r3, [r7, #12]
 801d76e:	68fb      	ldr	r3, [r7, #12]
 801d770:	2b00      	cmp	r3, #0
 801d772:	d1eb      	bne.n	801d74c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801d774:	6879      	ldr	r1, [r7, #4]
 801d776:	2000      	movs	r0, #0
 801d778:	f7f7 ffd8 	bl	801572c <memp_free>
}
 801d77c:	3710      	adds	r7, #16
 801d77e:	46bd      	mov	sp, r7
 801d780:	bd80      	pop	{r7, pc}
 801d782:	bf00      	nop
 801d784:	08029f08 	.word	0x08029f08
 801d788:	0802a254 	.word	0x0802a254
 801d78c:	08029f5c 	.word	0x08029f5c
 801d790:	2001328c 	.word	0x2001328c

0801d794 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801d794:	b580      	push	{r7, lr}
 801d796:	b082      	sub	sp, #8
 801d798:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801d79a:	2000      	movs	r0, #0
 801d79c:	f7f7 ff50 	bl	8015640 <memp_malloc>
 801d7a0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801d7a2:	687b      	ldr	r3, [r7, #4]
 801d7a4:	2b00      	cmp	r3, #0
 801d7a6:	d007      	beq.n	801d7b8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801d7a8:	2220      	movs	r2, #32
 801d7aa:	2100      	movs	r1, #0
 801d7ac:	6878      	ldr	r0, [r7, #4]
 801d7ae:	f006 fdd7 	bl	8024360 <memset>
    pcb->ttl = UDP_TTL;
 801d7b2:	687b      	ldr	r3, [r7, #4]
 801d7b4:	22ff      	movs	r2, #255	; 0xff
 801d7b6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801d7b8:	687b      	ldr	r3, [r7, #4]
}
 801d7ba:	4618      	mov	r0, r3
 801d7bc:	3708      	adds	r7, #8
 801d7be:	46bd      	mov	sp, r7
 801d7c0:	bd80      	pop	{r7, pc}

0801d7c2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801d7c2:	b580      	push	{r7, lr}
 801d7c4:	b084      	sub	sp, #16
 801d7c6:	af00      	add	r7, sp, #0
 801d7c8:	4603      	mov	r3, r0
 801d7ca:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801d7cc:	f7ff ffe2 	bl	801d794 <udp_new>
 801d7d0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801d7d2:	68fb      	ldr	r3, [r7, #12]
}
 801d7d4:	4618      	mov	r0, r3
 801d7d6:	3710      	adds	r7, #16
 801d7d8:	46bd      	mov	sp, r7
 801d7da:	bd80      	pop	{r7, pc}

0801d7dc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801d7dc:	b480      	push	{r7}
 801d7de:	b085      	sub	sp, #20
 801d7e0:	af00      	add	r7, sp, #0
 801d7e2:	6078      	str	r0, [r7, #4]
 801d7e4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801d7e6:	687b      	ldr	r3, [r7, #4]
 801d7e8:	2b00      	cmp	r3, #0
 801d7ea:	d01e      	beq.n	801d82a <udp_netif_ip_addr_changed+0x4e>
 801d7ec:	687b      	ldr	r3, [r7, #4]
 801d7ee:	681b      	ldr	r3, [r3, #0]
 801d7f0:	2b00      	cmp	r3, #0
 801d7f2:	d01a      	beq.n	801d82a <udp_netif_ip_addr_changed+0x4e>
 801d7f4:	683b      	ldr	r3, [r7, #0]
 801d7f6:	2b00      	cmp	r3, #0
 801d7f8:	d017      	beq.n	801d82a <udp_netif_ip_addr_changed+0x4e>
 801d7fa:	683b      	ldr	r3, [r7, #0]
 801d7fc:	681b      	ldr	r3, [r3, #0]
 801d7fe:	2b00      	cmp	r3, #0
 801d800:	d013      	beq.n	801d82a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801d802:	4b0d      	ldr	r3, [pc, #52]	; (801d838 <udp_netif_ip_addr_changed+0x5c>)
 801d804:	681b      	ldr	r3, [r3, #0]
 801d806:	60fb      	str	r3, [r7, #12]
 801d808:	e00c      	b.n	801d824 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801d80a:	68fb      	ldr	r3, [r7, #12]
 801d80c:	681a      	ldr	r2, [r3, #0]
 801d80e:	687b      	ldr	r3, [r7, #4]
 801d810:	681b      	ldr	r3, [r3, #0]
 801d812:	429a      	cmp	r2, r3
 801d814:	d103      	bne.n	801d81e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801d816:	683b      	ldr	r3, [r7, #0]
 801d818:	681a      	ldr	r2, [r3, #0]
 801d81a:	68fb      	ldr	r3, [r7, #12]
 801d81c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801d81e:	68fb      	ldr	r3, [r7, #12]
 801d820:	68db      	ldr	r3, [r3, #12]
 801d822:	60fb      	str	r3, [r7, #12]
 801d824:	68fb      	ldr	r3, [r7, #12]
 801d826:	2b00      	cmp	r3, #0
 801d828:	d1ef      	bne.n	801d80a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801d82a:	bf00      	nop
 801d82c:	3714      	adds	r7, #20
 801d82e:	46bd      	mov	sp, r7
 801d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d834:	4770      	bx	lr
 801d836:	bf00      	nop
 801d838:	2001328c 	.word	0x2001328c

0801d83c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801d83c:	b580      	push	{r7, lr}
 801d83e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801d840:	4b20      	ldr	r3, [pc, #128]	; (801d8c4 <dhcp_inc_pcb_refcount+0x88>)
 801d842:	781b      	ldrb	r3, [r3, #0]
 801d844:	2b00      	cmp	r3, #0
 801d846:	d133      	bne.n	801d8b0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801d848:	4b1f      	ldr	r3, [pc, #124]	; (801d8c8 <dhcp_inc_pcb_refcount+0x8c>)
 801d84a:	681b      	ldr	r3, [r3, #0]
 801d84c:	2b00      	cmp	r3, #0
 801d84e:	d005      	beq.n	801d85c <dhcp_inc_pcb_refcount+0x20>
 801d850:	4b1e      	ldr	r3, [pc, #120]	; (801d8cc <dhcp_inc_pcb_refcount+0x90>)
 801d852:	22e5      	movs	r2, #229	; 0xe5
 801d854:	491e      	ldr	r1, [pc, #120]	; (801d8d0 <dhcp_inc_pcb_refcount+0x94>)
 801d856:	481f      	ldr	r0, [pc, #124]	; (801d8d4 <dhcp_inc_pcb_refcount+0x98>)
 801d858:	f006 fbbe 	bl	8023fd8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801d85c:	f7ff ff9a 	bl	801d794 <udp_new>
 801d860:	4603      	mov	r3, r0
 801d862:	4a19      	ldr	r2, [pc, #100]	; (801d8c8 <dhcp_inc_pcb_refcount+0x8c>)
 801d864:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801d866:	4b18      	ldr	r3, [pc, #96]	; (801d8c8 <dhcp_inc_pcb_refcount+0x8c>)
 801d868:	681b      	ldr	r3, [r3, #0]
 801d86a:	2b00      	cmp	r3, #0
 801d86c:	d102      	bne.n	801d874 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801d86e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d872:	e024      	b.n	801d8be <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801d874:	4b14      	ldr	r3, [pc, #80]	; (801d8c8 <dhcp_inc_pcb_refcount+0x8c>)
 801d876:	681b      	ldr	r3, [r3, #0]
 801d878:	7a5a      	ldrb	r2, [r3, #9]
 801d87a:	4b13      	ldr	r3, [pc, #76]	; (801d8c8 <dhcp_inc_pcb_refcount+0x8c>)
 801d87c:	681b      	ldr	r3, [r3, #0]
 801d87e:	f042 0220 	orr.w	r2, r2, #32
 801d882:	b2d2      	uxtb	r2, r2
 801d884:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801d886:	4b10      	ldr	r3, [pc, #64]	; (801d8c8 <dhcp_inc_pcb_refcount+0x8c>)
 801d888:	681b      	ldr	r3, [r3, #0]
 801d88a:	2244      	movs	r2, #68	; 0x44
 801d88c:	4912      	ldr	r1, [pc, #72]	; (801d8d8 <dhcp_inc_pcb_refcount+0x9c>)
 801d88e:	4618      	mov	r0, r3
 801d890:	f7ff fe1c 	bl	801d4cc <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801d894:	4b0c      	ldr	r3, [pc, #48]	; (801d8c8 <dhcp_inc_pcb_refcount+0x8c>)
 801d896:	681b      	ldr	r3, [r3, #0]
 801d898:	2243      	movs	r2, #67	; 0x43
 801d89a:	490f      	ldr	r1, [pc, #60]	; (801d8d8 <dhcp_inc_pcb_refcount+0x9c>)
 801d89c:	4618      	mov	r0, r3
 801d89e:	f7ff fea9 	bl	801d5f4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801d8a2:	4b09      	ldr	r3, [pc, #36]	; (801d8c8 <dhcp_inc_pcb_refcount+0x8c>)
 801d8a4:	681b      	ldr	r3, [r3, #0]
 801d8a6:	2200      	movs	r2, #0
 801d8a8:	490c      	ldr	r1, [pc, #48]	; (801d8dc <dhcp_inc_pcb_refcount+0xa0>)
 801d8aa:	4618      	mov	r0, r3
 801d8ac:	f7ff ff10 	bl	801d6d0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 801d8b0:	4b04      	ldr	r3, [pc, #16]	; (801d8c4 <dhcp_inc_pcb_refcount+0x88>)
 801d8b2:	781b      	ldrb	r3, [r3, #0]
 801d8b4:	3301      	adds	r3, #1
 801d8b6:	b2da      	uxtb	r2, r3
 801d8b8:	4b02      	ldr	r3, [pc, #8]	; (801d8c4 <dhcp_inc_pcb_refcount+0x88>)
 801d8ba:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801d8bc:	2300      	movs	r3, #0
}
 801d8be:	4618      	mov	r0, r3
 801d8c0:	bd80      	pop	{r7, pc}
 801d8c2:	bf00      	nop
 801d8c4:	200132bc 	.word	0x200132bc
 801d8c8:	200132b8 	.word	0x200132b8
 801d8cc:	0802a26c 	.word	0x0802a26c
 801d8d0:	0802a2a4 	.word	0x0802a2a4
 801d8d4:	0802a2cc 	.word	0x0802a2cc
 801d8d8:	0802af70 	.word	0x0802af70
 801d8dc:	0801f171 	.word	0x0801f171

0801d8e0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801d8e0:	b580      	push	{r7, lr}
 801d8e2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801d8e4:	4b0e      	ldr	r3, [pc, #56]	; (801d920 <dhcp_dec_pcb_refcount+0x40>)
 801d8e6:	781b      	ldrb	r3, [r3, #0]
 801d8e8:	2b00      	cmp	r3, #0
 801d8ea:	d105      	bne.n	801d8f8 <dhcp_dec_pcb_refcount+0x18>
 801d8ec:	4b0d      	ldr	r3, [pc, #52]	; (801d924 <dhcp_dec_pcb_refcount+0x44>)
 801d8ee:	22ff      	movs	r2, #255	; 0xff
 801d8f0:	490d      	ldr	r1, [pc, #52]	; (801d928 <dhcp_dec_pcb_refcount+0x48>)
 801d8f2:	480e      	ldr	r0, [pc, #56]	; (801d92c <dhcp_dec_pcb_refcount+0x4c>)
 801d8f4:	f006 fb70 	bl	8023fd8 <iprintf>
  dhcp_pcb_refcount--;
 801d8f8:	4b09      	ldr	r3, [pc, #36]	; (801d920 <dhcp_dec_pcb_refcount+0x40>)
 801d8fa:	781b      	ldrb	r3, [r3, #0]
 801d8fc:	3b01      	subs	r3, #1
 801d8fe:	b2da      	uxtb	r2, r3
 801d900:	4b07      	ldr	r3, [pc, #28]	; (801d920 <dhcp_dec_pcb_refcount+0x40>)
 801d902:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801d904:	4b06      	ldr	r3, [pc, #24]	; (801d920 <dhcp_dec_pcb_refcount+0x40>)
 801d906:	781b      	ldrb	r3, [r3, #0]
 801d908:	2b00      	cmp	r3, #0
 801d90a:	d107      	bne.n	801d91c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801d90c:	4b08      	ldr	r3, [pc, #32]	; (801d930 <dhcp_dec_pcb_refcount+0x50>)
 801d90e:	681b      	ldr	r3, [r3, #0]
 801d910:	4618      	mov	r0, r3
 801d912:	f7ff fefd 	bl	801d710 <udp_remove>
    dhcp_pcb = NULL;
 801d916:	4b06      	ldr	r3, [pc, #24]	; (801d930 <dhcp_dec_pcb_refcount+0x50>)
 801d918:	2200      	movs	r2, #0
 801d91a:	601a      	str	r2, [r3, #0]
  }
}
 801d91c:	bf00      	nop
 801d91e:	bd80      	pop	{r7, pc}
 801d920:	200132bc 	.word	0x200132bc
 801d924:	0802a26c 	.word	0x0802a26c
 801d928:	0802a2f4 	.word	0x0802a2f4
 801d92c:	0802a2cc 	.word	0x0802a2cc
 801d930:	200132b8 	.word	0x200132b8

0801d934 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801d934:	b580      	push	{r7, lr}
 801d936:	b084      	sub	sp, #16
 801d938:	af00      	add	r7, sp, #0
 801d93a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d93c:	687b      	ldr	r3, [r7, #4]
 801d93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d940:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801d942:	210c      	movs	r1, #12
 801d944:	68f8      	ldr	r0, [r7, #12]
 801d946:	f001 f855 	bl	801e9f4 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801d94a:	4b06      	ldr	r3, [pc, #24]	; (801d964 <dhcp_handle_nak+0x30>)
 801d94c:	4a05      	ldr	r2, [pc, #20]	; (801d964 <dhcp_handle_nak+0x30>)
 801d94e:	4905      	ldr	r1, [pc, #20]	; (801d964 <dhcp_handle_nak+0x30>)
 801d950:	6878      	ldr	r0, [r7, #4]
 801d952:	f7f8 f88d 	bl	8015a70 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801d956:	6878      	ldr	r0, [r7, #4]
 801d958:	f000 fc48 	bl	801e1ec <dhcp_discover>
}
 801d95c:	bf00      	nop
 801d95e:	3710      	adds	r7, #16
 801d960:	46bd      	mov	sp, r7
 801d962:	bd80      	pop	{r7, pc}
 801d964:	0802af70 	.word	0x0802af70

0801d968 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801d968:	b580      	push	{r7, lr}
 801d96a:	b084      	sub	sp, #16
 801d96c:	af00      	add	r7, sp, #0
 801d96e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d970:	687b      	ldr	r3, [r7, #4]
 801d972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d974:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801d976:	2108      	movs	r1, #8
 801d978:	68f8      	ldr	r0, [r7, #12]
 801d97a:	f001 f83b 	bl	801e9f4 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801d97e:	68fb      	ldr	r3, [r7, #12]
 801d980:	331c      	adds	r3, #28
 801d982:	2200      	movs	r2, #0
 801d984:	4619      	mov	r1, r3
 801d986:	6878      	ldr	r0, [r7, #4]
 801d988:	f002 fb3c 	bl	8020004 <etharp_query>
 801d98c:	4603      	mov	r3, r0
 801d98e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801d990:	68fb      	ldr	r3, [r7, #12]
 801d992:	799b      	ldrb	r3, [r3, #6]
 801d994:	2bff      	cmp	r3, #255	; 0xff
 801d996:	d005      	beq.n	801d9a4 <dhcp_check+0x3c>
    dhcp->tries++;
 801d998:	68fb      	ldr	r3, [r7, #12]
 801d99a:	799b      	ldrb	r3, [r3, #6]
 801d99c:	3301      	adds	r3, #1
 801d99e:	b2da      	uxtb	r2, r3
 801d9a0:	68fb      	ldr	r3, [r7, #12]
 801d9a2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801d9a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801d9a8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d9aa:	893b      	ldrh	r3, [r7, #8]
 801d9ac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d9b0:	4a06      	ldr	r2, [pc, #24]	; (801d9cc <dhcp_check+0x64>)
 801d9b2:	fb82 1203 	smull	r1, r2, r2, r3
 801d9b6:	1152      	asrs	r2, r2, #5
 801d9b8:	17db      	asrs	r3, r3, #31
 801d9ba:	1ad3      	subs	r3, r2, r3
 801d9bc:	b29a      	uxth	r2, r3
 801d9be:	68fb      	ldr	r3, [r7, #12]
 801d9c0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801d9c2:	bf00      	nop
 801d9c4:	3710      	adds	r7, #16
 801d9c6:	46bd      	mov	sp, r7
 801d9c8:	bd80      	pop	{r7, pc}
 801d9ca:	bf00      	nop
 801d9cc:	10624dd3 	.word	0x10624dd3

0801d9d0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801d9d0:	b580      	push	{r7, lr}
 801d9d2:	b084      	sub	sp, #16
 801d9d4:	af00      	add	r7, sp, #0
 801d9d6:	6078      	str	r0, [r7, #4]
 801d9d8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d9da:	687b      	ldr	r3, [r7, #4]
 801d9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d9de:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801d9e0:	4b0c      	ldr	r3, [pc, #48]	; (801da14 <dhcp_handle_offer+0x44>)
 801d9e2:	789b      	ldrb	r3, [r3, #2]
 801d9e4:	2b00      	cmp	r3, #0
 801d9e6:	d011      	beq.n	801da0c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801d9e8:	68fb      	ldr	r3, [r7, #12]
 801d9ea:	2200      	movs	r2, #0
 801d9ec:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801d9ee:	4b0a      	ldr	r3, [pc, #40]	; (801da18 <dhcp_handle_offer+0x48>)
 801d9f0:	689b      	ldr	r3, [r3, #8]
 801d9f2:	4618      	mov	r0, r3
 801d9f4:	f7f7 f961 	bl	8014cba <lwip_htonl>
 801d9f8:	4602      	mov	r2, r0
 801d9fa:	68fb      	ldr	r3, [r7, #12]
 801d9fc:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801d9fe:	683b      	ldr	r3, [r7, #0]
 801da00:	691a      	ldr	r2, [r3, #16]
 801da02:	68fb      	ldr	r3, [r7, #12]
 801da04:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801da06:	6878      	ldr	r0, [r7, #4]
 801da08:	f000 f808 	bl	801da1c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801da0c:	bf00      	nop
 801da0e:	3710      	adds	r7, #16
 801da10:	46bd      	mov	sp, r7
 801da12:	bd80      	pop	{r7, pc}
 801da14:	200132b0 	.word	0x200132b0
 801da18:	20013290 	.word	0x20013290

0801da1c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801da1c:	b5b0      	push	{r4, r5, r7, lr}
 801da1e:	b08a      	sub	sp, #40	; 0x28
 801da20:	af02      	add	r7, sp, #8
 801da22:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801da24:	687b      	ldr	r3, [r7, #4]
 801da26:	2b00      	cmp	r3, #0
 801da28:	d109      	bne.n	801da3e <dhcp_select+0x22>
 801da2a:	4b71      	ldr	r3, [pc, #452]	; (801dbf0 <dhcp_select+0x1d4>)
 801da2c:	f240 1277 	movw	r2, #375	; 0x177
 801da30:	4970      	ldr	r1, [pc, #448]	; (801dbf4 <dhcp_select+0x1d8>)
 801da32:	4871      	ldr	r0, [pc, #452]	; (801dbf8 <dhcp_select+0x1dc>)
 801da34:	f006 fad0 	bl	8023fd8 <iprintf>
 801da38:	f06f 030f 	mvn.w	r3, #15
 801da3c:	e0d3      	b.n	801dbe6 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801da3e:	687b      	ldr	r3, [r7, #4]
 801da40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da42:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801da44:	69bb      	ldr	r3, [r7, #24]
 801da46:	2b00      	cmp	r3, #0
 801da48:	d109      	bne.n	801da5e <dhcp_select+0x42>
 801da4a:	4b69      	ldr	r3, [pc, #420]	; (801dbf0 <dhcp_select+0x1d4>)
 801da4c:	f240 1279 	movw	r2, #377	; 0x179
 801da50:	496a      	ldr	r1, [pc, #424]	; (801dbfc <dhcp_select+0x1e0>)
 801da52:	4869      	ldr	r0, [pc, #420]	; (801dbf8 <dhcp_select+0x1dc>)
 801da54:	f006 fac0 	bl	8023fd8 <iprintf>
 801da58:	f06f 0305 	mvn.w	r3, #5
 801da5c:	e0c3      	b.n	801dbe6 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801da5e:	2101      	movs	r1, #1
 801da60:	69b8      	ldr	r0, [r7, #24]
 801da62:	f000 ffc7 	bl	801e9f4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801da66:	f107 030c 	add.w	r3, r7, #12
 801da6a:	2203      	movs	r2, #3
 801da6c:	69b9      	ldr	r1, [r7, #24]
 801da6e:	6878      	ldr	r0, [r7, #4]
 801da70:	f001 fc4c 	bl	801f30c <dhcp_create_msg>
 801da74:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801da76:	697b      	ldr	r3, [r7, #20]
 801da78:	2b00      	cmp	r3, #0
 801da7a:	f000 8085 	beq.w	801db88 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801da7e:	697b      	ldr	r3, [r7, #20]
 801da80:	685b      	ldr	r3, [r3, #4]
 801da82:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801da84:	89b8      	ldrh	r0, [r7, #12]
 801da86:	693b      	ldr	r3, [r7, #16]
 801da88:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801da8c:	2302      	movs	r3, #2
 801da8e:	2239      	movs	r2, #57	; 0x39
 801da90:	f000 ffca 	bl	801ea28 <dhcp_option>
 801da94:	4603      	mov	r3, r0
 801da96:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801da98:	89b8      	ldrh	r0, [r7, #12]
 801da9a:	693b      	ldr	r3, [r7, #16]
 801da9c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801daa0:	687b      	ldr	r3, [r7, #4]
 801daa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801daa4:	461a      	mov	r2, r3
 801daa6:	f001 f819 	bl	801eadc <dhcp_option_short>
 801daaa:	4603      	mov	r3, r0
 801daac:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801daae:	89b8      	ldrh	r0, [r7, #12]
 801dab0:	693b      	ldr	r3, [r7, #16]
 801dab2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801dab6:	2304      	movs	r3, #4
 801dab8:	2232      	movs	r2, #50	; 0x32
 801daba:	f000 ffb5 	bl	801ea28 <dhcp_option>
 801dabe:	4603      	mov	r3, r0
 801dac0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801dac2:	89bc      	ldrh	r4, [r7, #12]
 801dac4:	693b      	ldr	r3, [r7, #16]
 801dac6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801daca:	69bb      	ldr	r3, [r7, #24]
 801dacc:	69db      	ldr	r3, [r3, #28]
 801dace:	4618      	mov	r0, r3
 801dad0:	f7f7 f8f3 	bl	8014cba <lwip_htonl>
 801dad4:	4603      	mov	r3, r0
 801dad6:	461a      	mov	r2, r3
 801dad8:	4629      	mov	r1, r5
 801dada:	4620      	mov	r0, r4
 801dadc:	f001 f830 	bl	801eb40 <dhcp_option_long>
 801dae0:	4603      	mov	r3, r0
 801dae2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801dae4:	89b8      	ldrh	r0, [r7, #12]
 801dae6:	693b      	ldr	r3, [r7, #16]
 801dae8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801daec:	2304      	movs	r3, #4
 801daee:	2236      	movs	r2, #54	; 0x36
 801daf0:	f000 ff9a 	bl	801ea28 <dhcp_option>
 801daf4:	4603      	mov	r3, r0
 801daf6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801daf8:	89bc      	ldrh	r4, [r7, #12]
 801dafa:	693b      	ldr	r3, [r7, #16]
 801dafc:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801db00:	69bb      	ldr	r3, [r7, #24]
 801db02:	699b      	ldr	r3, [r3, #24]
 801db04:	4618      	mov	r0, r3
 801db06:	f7f7 f8d8 	bl	8014cba <lwip_htonl>
 801db0a:	4603      	mov	r3, r0
 801db0c:	461a      	mov	r2, r3
 801db0e:	4629      	mov	r1, r5
 801db10:	4620      	mov	r0, r4
 801db12:	f001 f815 	bl	801eb40 <dhcp_option_long>
 801db16:	4603      	mov	r3, r0
 801db18:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801db1a:	89b8      	ldrh	r0, [r7, #12]
 801db1c:	693b      	ldr	r3, [r7, #16]
 801db1e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801db22:	2303      	movs	r3, #3
 801db24:	2237      	movs	r2, #55	; 0x37
 801db26:	f000 ff7f 	bl	801ea28 <dhcp_option>
 801db2a:	4603      	mov	r3, r0
 801db2c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801db2e:	2300      	movs	r3, #0
 801db30:	77bb      	strb	r3, [r7, #30]
 801db32:	e00e      	b.n	801db52 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801db34:	89b8      	ldrh	r0, [r7, #12]
 801db36:	693b      	ldr	r3, [r7, #16]
 801db38:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801db3c:	7fbb      	ldrb	r3, [r7, #30]
 801db3e:	4a30      	ldr	r2, [pc, #192]	; (801dc00 <dhcp_select+0x1e4>)
 801db40:	5cd3      	ldrb	r3, [r2, r3]
 801db42:	461a      	mov	r2, r3
 801db44:	f000 ffa4 	bl	801ea90 <dhcp_option_byte>
 801db48:	4603      	mov	r3, r0
 801db4a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801db4c:	7fbb      	ldrb	r3, [r7, #30]
 801db4e:	3301      	adds	r3, #1
 801db50:	77bb      	strb	r3, [r7, #30]
 801db52:	7fbb      	ldrb	r3, [r7, #30]
 801db54:	2b02      	cmp	r3, #2
 801db56:	d9ed      	bls.n	801db34 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801db58:	89b8      	ldrh	r0, [r7, #12]
 801db5a:	693b      	ldr	r3, [r7, #16]
 801db5c:	33f0      	adds	r3, #240	; 0xf0
 801db5e:	697a      	ldr	r2, [r7, #20]
 801db60:	4619      	mov	r1, r3
 801db62:	f001 fca9 	bl	801f4b8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801db66:	4b27      	ldr	r3, [pc, #156]	; (801dc04 <dhcp_select+0x1e8>)
 801db68:	6818      	ldr	r0, [r3, #0]
 801db6a:	4b27      	ldr	r3, [pc, #156]	; (801dc08 <dhcp_select+0x1ec>)
 801db6c:	9301      	str	r3, [sp, #4]
 801db6e:	687b      	ldr	r3, [r7, #4]
 801db70:	9300      	str	r3, [sp, #0]
 801db72:	2343      	movs	r3, #67	; 0x43
 801db74:	4a25      	ldr	r2, [pc, #148]	; (801dc0c <dhcp_select+0x1f0>)
 801db76:	6979      	ldr	r1, [r7, #20]
 801db78:	f7ff fbc2 	bl	801d300 <udp_sendto_if_src>
 801db7c:	4603      	mov	r3, r0
 801db7e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801db80:	6978      	ldr	r0, [r7, #20]
 801db82:	f7f8 fc83 	bl	801648c <pbuf_free>
 801db86:	e001      	b.n	801db8c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801db88:	23ff      	movs	r3, #255	; 0xff
 801db8a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801db8c:	69bb      	ldr	r3, [r7, #24]
 801db8e:	799b      	ldrb	r3, [r3, #6]
 801db90:	2bff      	cmp	r3, #255	; 0xff
 801db92:	d005      	beq.n	801dba0 <dhcp_select+0x184>
    dhcp->tries++;
 801db94:	69bb      	ldr	r3, [r7, #24]
 801db96:	799b      	ldrb	r3, [r3, #6]
 801db98:	3301      	adds	r3, #1
 801db9a:	b2da      	uxtb	r2, r3
 801db9c:	69bb      	ldr	r3, [r7, #24]
 801db9e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801dba0:	69bb      	ldr	r3, [r7, #24]
 801dba2:	799b      	ldrb	r3, [r3, #6]
 801dba4:	2b05      	cmp	r3, #5
 801dba6:	d80d      	bhi.n	801dbc4 <dhcp_select+0x1a8>
 801dba8:	69bb      	ldr	r3, [r7, #24]
 801dbaa:	799b      	ldrb	r3, [r3, #6]
 801dbac:	461a      	mov	r2, r3
 801dbae:	2301      	movs	r3, #1
 801dbb0:	4093      	lsls	r3, r2
 801dbb2:	b29b      	uxth	r3, r3
 801dbb4:	461a      	mov	r2, r3
 801dbb6:	0152      	lsls	r2, r2, #5
 801dbb8:	1ad2      	subs	r2, r2, r3
 801dbba:	0092      	lsls	r2, r2, #2
 801dbbc:	4413      	add	r3, r2
 801dbbe:	00db      	lsls	r3, r3, #3
 801dbc0:	b29b      	uxth	r3, r3
 801dbc2:	e001      	b.n	801dbc8 <dhcp_select+0x1ac>
 801dbc4:	f64e 2360 	movw	r3, #60000	; 0xea60
 801dbc8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801dbca:	89fb      	ldrh	r3, [r7, #14]
 801dbcc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801dbd0:	4a0f      	ldr	r2, [pc, #60]	; (801dc10 <dhcp_select+0x1f4>)
 801dbd2:	fb82 1203 	smull	r1, r2, r2, r3
 801dbd6:	1152      	asrs	r2, r2, #5
 801dbd8:	17db      	asrs	r3, r3, #31
 801dbda:	1ad3      	subs	r3, r2, r3
 801dbdc:	b29a      	uxth	r2, r3
 801dbde:	69bb      	ldr	r3, [r7, #24]
 801dbe0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801dbe2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801dbe6:	4618      	mov	r0, r3
 801dbe8:	3720      	adds	r7, #32
 801dbea:	46bd      	mov	sp, r7
 801dbec:	bdb0      	pop	{r4, r5, r7, pc}
 801dbee:	bf00      	nop
 801dbf0:	0802a26c 	.word	0x0802a26c
 801dbf4:	0802a318 	.word	0x0802a318
 801dbf8:	0802a2cc 	.word	0x0802a2cc
 801dbfc:	0802a334 	.word	0x0802a334
 801dc00:	20000034 	.word	0x20000034
 801dc04:	200132b8 	.word	0x200132b8
 801dc08:	0802af70 	.word	0x0802af70
 801dc0c:	0802af74 	.word	0x0802af74
 801dc10:	10624dd3 	.word	0x10624dd3

0801dc14 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801dc14:	b580      	push	{r7, lr}
 801dc16:	b082      	sub	sp, #8
 801dc18:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801dc1a:	4b27      	ldr	r3, [pc, #156]	; (801dcb8 <dhcp_coarse_tmr+0xa4>)
 801dc1c:	681b      	ldr	r3, [r3, #0]
 801dc1e:	607b      	str	r3, [r7, #4]
 801dc20:	e042      	b.n	801dca8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801dc22:	687b      	ldr	r3, [r7, #4]
 801dc24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dc26:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801dc28:	683b      	ldr	r3, [r7, #0]
 801dc2a:	2b00      	cmp	r3, #0
 801dc2c:	d039      	beq.n	801dca2 <dhcp_coarse_tmr+0x8e>
 801dc2e:	683b      	ldr	r3, [r7, #0]
 801dc30:	795b      	ldrb	r3, [r3, #5]
 801dc32:	2b00      	cmp	r3, #0
 801dc34:	d035      	beq.n	801dca2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801dc36:	683b      	ldr	r3, [r7, #0]
 801dc38:	8a9b      	ldrh	r3, [r3, #20]
 801dc3a:	2b00      	cmp	r3, #0
 801dc3c:	d012      	beq.n	801dc64 <dhcp_coarse_tmr+0x50>
 801dc3e:	683b      	ldr	r3, [r7, #0]
 801dc40:	8a5b      	ldrh	r3, [r3, #18]
 801dc42:	3301      	adds	r3, #1
 801dc44:	b29a      	uxth	r2, r3
 801dc46:	683b      	ldr	r3, [r7, #0]
 801dc48:	825a      	strh	r2, [r3, #18]
 801dc4a:	683b      	ldr	r3, [r7, #0]
 801dc4c:	8a5a      	ldrh	r2, [r3, #18]
 801dc4e:	683b      	ldr	r3, [r7, #0]
 801dc50:	8a9b      	ldrh	r3, [r3, #20]
 801dc52:	429a      	cmp	r2, r3
 801dc54:	d106      	bne.n	801dc64 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801dc56:	6878      	ldr	r0, [r7, #4]
 801dc58:	f000 fe32 	bl	801e8c0 <dhcp_release_and_stop>
        dhcp_start(netif);
 801dc5c:	6878      	ldr	r0, [r7, #4]
 801dc5e:	f000 f969 	bl	801df34 <dhcp_start>
 801dc62:	e01e      	b.n	801dca2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801dc64:	683b      	ldr	r3, [r7, #0]
 801dc66:	8a1b      	ldrh	r3, [r3, #16]
 801dc68:	2b00      	cmp	r3, #0
 801dc6a:	d00b      	beq.n	801dc84 <dhcp_coarse_tmr+0x70>
 801dc6c:	683b      	ldr	r3, [r7, #0]
 801dc6e:	8a1b      	ldrh	r3, [r3, #16]
 801dc70:	1e5a      	subs	r2, r3, #1
 801dc72:	b291      	uxth	r1, r2
 801dc74:	683a      	ldr	r2, [r7, #0]
 801dc76:	8211      	strh	r1, [r2, #16]
 801dc78:	2b01      	cmp	r3, #1
 801dc7a:	d103      	bne.n	801dc84 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801dc7c:	6878      	ldr	r0, [r7, #4]
 801dc7e:	f000 f8c6 	bl	801de0e <dhcp_t2_timeout>
 801dc82:	e00e      	b.n	801dca2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801dc84:	683b      	ldr	r3, [r7, #0]
 801dc86:	89db      	ldrh	r3, [r3, #14]
 801dc88:	2b00      	cmp	r3, #0
 801dc8a:	d00a      	beq.n	801dca2 <dhcp_coarse_tmr+0x8e>
 801dc8c:	683b      	ldr	r3, [r7, #0]
 801dc8e:	89db      	ldrh	r3, [r3, #14]
 801dc90:	1e5a      	subs	r2, r3, #1
 801dc92:	b291      	uxth	r1, r2
 801dc94:	683a      	ldr	r2, [r7, #0]
 801dc96:	81d1      	strh	r1, [r2, #14]
 801dc98:	2b01      	cmp	r3, #1
 801dc9a:	d102      	bne.n	801dca2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801dc9c:	6878      	ldr	r0, [r7, #4]
 801dc9e:	f000 f888 	bl	801ddb2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801dca2:	687b      	ldr	r3, [r7, #4]
 801dca4:	681b      	ldr	r3, [r3, #0]
 801dca6:	607b      	str	r3, [r7, #4]
 801dca8:	687b      	ldr	r3, [r7, #4]
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	d1b9      	bne.n	801dc22 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801dcae:	bf00      	nop
 801dcb0:	bf00      	nop
 801dcb2:	3708      	adds	r7, #8
 801dcb4:	46bd      	mov	sp, r7
 801dcb6:	bd80      	pop	{r7, pc}
 801dcb8:	20013224 	.word	0x20013224

0801dcbc <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801dcbc:	b580      	push	{r7, lr}
 801dcbe:	b082      	sub	sp, #8
 801dcc0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801dcc2:	4b16      	ldr	r3, [pc, #88]	; (801dd1c <dhcp_fine_tmr+0x60>)
 801dcc4:	681b      	ldr	r3, [r3, #0]
 801dcc6:	607b      	str	r3, [r7, #4]
 801dcc8:	e020      	b.n	801dd0c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801dcca:	687b      	ldr	r3, [r7, #4]
 801dccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dcce:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801dcd0:	683b      	ldr	r3, [r7, #0]
 801dcd2:	2b00      	cmp	r3, #0
 801dcd4:	d017      	beq.n	801dd06 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801dcd6:	683b      	ldr	r3, [r7, #0]
 801dcd8:	891b      	ldrh	r3, [r3, #8]
 801dcda:	2b01      	cmp	r3, #1
 801dcdc:	d906      	bls.n	801dcec <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801dcde:	683b      	ldr	r3, [r7, #0]
 801dce0:	891b      	ldrh	r3, [r3, #8]
 801dce2:	3b01      	subs	r3, #1
 801dce4:	b29a      	uxth	r2, r3
 801dce6:	683b      	ldr	r3, [r7, #0]
 801dce8:	811a      	strh	r2, [r3, #8]
 801dcea:	e00c      	b.n	801dd06 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801dcec:	683b      	ldr	r3, [r7, #0]
 801dcee:	891b      	ldrh	r3, [r3, #8]
 801dcf0:	2b01      	cmp	r3, #1
 801dcf2:	d108      	bne.n	801dd06 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801dcf4:	683b      	ldr	r3, [r7, #0]
 801dcf6:	891b      	ldrh	r3, [r3, #8]
 801dcf8:	3b01      	subs	r3, #1
 801dcfa:	b29a      	uxth	r2, r3
 801dcfc:	683b      	ldr	r3, [r7, #0]
 801dcfe:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801dd00:	6878      	ldr	r0, [r7, #4]
 801dd02:	f000 f80d 	bl	801dd20 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801dd06:	687b      	ldr	r3, [r7, #4]
 801dd08:	681b      	ldr	r3, [r3, #0]
 801dd0a:	607b      	str	r3, [r7, #4]
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	2b00      	cmp	r3, #0
 801dd10:	d1db      	bne.n	801dcca <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801dd12:	bf00      	nop
 801dd14:	bf00      	nop
 801dd16:	3708      	adds	r7, #8
 801dd18:	46bd      	mov	sp, r7
 801dd1a:	bd80      	pop	{r7, pc}
 801dd1c:	20013224 	.word	0x20013224

0801dd20 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801dd20:	b580      	push	{r7, lr}
 801dd22:	b084      	sub	sp, #16
 801dd24:	af00      	add	r7, sp, #0
 801dd26:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801dd28:	687b      	ldr	r3, [r7, #4]
 801dd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dd2c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801dd2e:	68fb      	ldr	r3, [r7, #12]
 801dd30:	795b      	ldrb	r3, [r3, #5]
 801dd32:	2b0c      	cmp	r3, #12
 801dd34:	d003      	beq.n	801dd3e <dhcp_timeout+0x1e>
 801dd36:	68fb      	ldr	r3, [r7, #12]
 801dd38:	795b      	ldrb	r3, [r3, #5]
 801dd3a:	2b06      	cmp	r3, #6
 801dd3c:	d103      	bne.n	801dd46 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801dd3e:	6878      	ldr	r0, [r7, #4]
 801dd40:	f000 fa54 	bl	801e1ec <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801dd44:	e031      	b.n	801ddaa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801dd46:	68fb      	ldr	r3, [r7, #12]
 801dd48:	795b      	ldrb	r3, [r3, #5]
 801dd4a:	2b01      	cmp	r3, #1
 801dd4c:	d10e      	bne.n	801dd6c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801dd4e:	68fb      	ldr	r3, [r7, #12]
 801dd50:	799b      	ldrb	r3, [r3, #6]
 801dd52:	2b05      	cmp	r3, #5
 801dd54:	d803      	bhi.n	801dd5e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801dd56:	6878      	ldr	r0, [r7, #4]
 801dd58:	f7ff fe60 	bl	801da1c <dhcp_select>
}
 801dd5c:	e025      	b.n	801ddaa <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801dd5e:	6878      	ldr	r0, [r7, #4]
 801dd60:	f000 fdae 	bl	801e8c0 <dhcp_release_and_stop>
      dhcp_start(netif);
 801dd64:	6878      	ldr	r0, [r7, #4]
 801dd66:	f000 f8e5 	bl	801df34 <dhcp_start>
}
 801dd6a:	e01e      	b.n	801ddaa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801dd6c:	68fb      	ldr	r3, [r7, #12]
 801dd6e:	795b      	ldrb	r3, [r3, #5]
 801dd70:	2b08      	cmp	r3, #8
 801dd72:	d10b      	bne.n	801dd8c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801dd74:	68fb      	ldr	r3, [r7, #12]
 801dd76:	799b      	ldrb	r3, [r3, #6]
 801dd78:	2b01      	cmp	r3, #1
 801dd7a:	d803      	bhi.n	801dd84 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801dd7c:	6878      	ldr	r0, [r7, #4]
 801dd7e:	f7ff fdf3 	bl	801d968 <dhcp_check>
}
 801dd82:	e012      	b.n	801ddaa <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801dd84:	6878      	ldr	r0, [r7, #4]
 801dd86:	f000 fad3 	bl	801e330 <dhcp_bind>
}
 801dd8a:	e00e      	b.n	801ddaa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801dd8c:	68fb      	ldr	r3, [r7, #12]
 801dd8e:	795b      	ldrb	r3, [r3, #5]
 801dd90:	2b03      	cmp	r3, #3
 801dd92:	d10a      	bne.n	801ddaa <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801dd94:	68fb      	ldr	r3, [r7, #12]
 801dd96:	799b      	ldrb	r3, [r3, #6]
 801dd98:	2b01      	cmp	r3, #1
 801dd9a:	d803      	bhi.n	801dda4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801dd9c:	6878      	ldr	r0, [r7, #4]
 801dd9e:	f000 fcd9 	bl	801e754 <dhcp_reboot>
}
 801dda2:	e002      	b.n	801ddaa <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801dda4:	6878      	ldr	r0, [r7, #4]
 801dda6:	f000 fa21 	bl	801e1ec <dhcp_discover>
}
 801ddaa:	bf00      	nop
 801ddac:	3710      	adds	r7, #16
 801ddae:	46bd      	mov	sp, r7
 801ddb0:	bd80      	pop	{r7, pc}

0801ddb2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801ddb2:	b580      	push	{r7, lr}
 801ddb4:	b084      	sub	sp, #16
 801ddb6:	af00      	add	r7, sp, #0
 801ddb8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ddba:	687b      	ldr	r3, [r7, #4]
 801ddbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ddbe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801ddc0:	68fb      	ldr	r3, [r7, #12]
 801ddc2:	795b      	ldrb	r3, [r3, #5]
 801ddc4:	2b01      	cmp	r3, #1
 801ddc6:	d007      	beq.n	801ddd8 <dhcp_t1_timeout+0x26>
 801ddc8:	68fb      	ldr	r3, [r7, #12]
 801ddca:	795b      	ldrb	r3, [r3, #5]
 801ddcc:	2b0a      	cmp	r3, #10
 801ddce:	d003      	beq.n	801ddd8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801ddd0:	68fb      	ldr	r3, [r7, #12]
 801ddd2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801ddd4:	2b05      	cmp	r3, #5
 801ddd6:	d116      	bne.n	801de06 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801ddd8:	6878      	ldr	r0, [r7, #4]
 801ddda:	f000 fb83 	bl	801e4e4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801ddde:	68fb      	ldr	r3, [r7, #12]
 801dde0:	899b      	ldrh	r3, [r3, #12]
 801dde2:	461a      	mov	r2, r3
 801dde4:	68fb      	ldr	r3, [r7, #12]
 801dde6:	8a5b      	ldrh	r3, [r3, #18]
 801dde8:	1ad3      	subs	r3, r2, r3
 801ddea:	2b01      	cmp	r3, #1
 801ddec:	dd0b      	ble.n	801de06 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801ddee:	68fb      	ldr	r3, [r7, #12]
 801ddf0:	899b      	ldrh	r3, [r3, #12]
 801ddf2:	461a      	mov	r2, r3
 801ddf4:	68fb      	ldr	r3, [r7, #12]
 801ddf6:	8a5b      	ldrh	r3, [r3, #18]
 801ddf8:	1ad3      	subs	r3, r2, r3
 801ddfa:	0fda      	lsrs	r2, r3, #31
 801ddfc:	4413      	add	r3, r2
 801ddfe:	105b      	asrs	r3, r3, #1
 801de00:	b29a      	uxth	r2, r3
 801de02:	68fb      	ldr	r3, [r7, #12]
 801de04:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801de06:	bf00      	nop
 801de08:	3710      	adds	r7, #16
 801de0a:	46bd      	mov	sp, r7
 801de0c:	bd80      	pop	{r7, pc}

0801de0e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801de0e:	b580      	push	{r7, lr}
 801de10:	b084      	sub	sp, #16
 801de12:	af00      	add	r7, sp, #0
 801de14:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801de16:	687b      	ldr	r3, [r7, #4]
 801de18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801de1a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801de1c:	68fb      	ldr	r3, [r7, #12]
 801de1e:	795b      	ldrb	r3, [r3, #5]
 801de20:	2b01      	cmp	r3, #1
 801de22:	d00b      	beq.n	801de3c <dhcp_t2_timeout+0x2e>
 801de24:	68fb      	ldr	r3, [r7, #12]
 801de26:	795b      	ldrb	r3, [r3, #5]
 801de28:	2b0a      	cmp	r3, #10
 801de2a:	d007      	beq.n	801de3c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801de2c:	68fb      	ldr	r3, [r7, #12]
 801de2e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801de30:	2b05      	cmp	r3, #5
 801de32:	d003      	beq.n	801de3c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801de34:	68fb      	ldr	r3, [r7, #12]
 801de36:	795b      	ldrb	r3, [r3, #5]
 801de38:	2b04      	cmp	r3, #4
 801de3a:	d116      	bne.n	801de6a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801de3c:	6878      	ldr	r0, [r7, #4]
 801de3e:	f000 fbed 	bl	801e61c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801de42:	68fb      	ldr	r3, [r7, #12]
 801de44:	8a9b      	ldrh	r3, [r3, #20]
 801de46:	461a      	mov	r2, r3
 801de48:	68fb      	ldr	r3, [r7, #12]
 801de4a:	8a5b      	ldrh	r3, [r3, #18]
 801de4c:	1ad3      	subs	r3, r2, r3
 801de4e:	2b01      	cmp	r3, #1
 801de50:	dd0b      	ble.n	801de6a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801de52:	68fb      	ldr	r3, [r7, #12]
 801de54:	8a9b      	ldrh	r3, [r3, #20]
 801de56:	461a      	mov	r2, r3
 801de58:	68fb      	ldr	r3, [r7, #12]
 801de5a:	8a5b      	ldrh	r3, [r3, #18]
 801de5c:	1ad3      	subs	r3, r2, r3
 801de5e:	0fda      	lsrs	r2, r3, #31
 801de60:	4413      	add	r3, r2
 801de62:	105b      	asrs	r3, r3, #1
 801de64:	b29a      	uxth	r2, r3
 801de66:	68fb      	ldr	r3, [r7, #12]
 801de68:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801de6a:	bf00      	nop
 801de6c:	3710      	adds	r7, #16
 801de6e:	46bd      	mov	sp, r7
 801de70:	bd80      	pop	{r7, pc}
	...

0801de74 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801de74:	b580      	push	{r7, lr}
 801de76:	b084      	sub	sp, #16
 801de78:	af00      	add	r7, sp, #0
 801de7a:	6078      	str	r0, [r7, #4]
 801de7c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801de7e:	687b      	ldr	r3, [r7, #4]
 801de80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801de82:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801de84:	68fb      	ldr	r3, [r7, #12]
 801de86:	2200      	movs	r2, #0
 801de88:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801de8a:	68fb      	ldr	r3, [r7, #12]
 801de8c:	2200      	movs	r2, #0
 801de8e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801de90:	4b26      	ldr	r3, [pc, #152]	; (801df2c <dhcp_handle_ack+0xb8>)
 801de92:	78db      	ldrb	r3, [r3, #3]
 801de94:	2b00      	cmp	r3, #0
 801de96:	d003      	beq.n	801dea0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801de98:	4b25      	ldr	r3, [pc, #148]	; (801df30 <dhcp_handle_ack+0xbc>)
 801de9a:	68da      	ldr	r2, [r3, #12]
 801de9c:	68fb      	ldr	r3, [r7, #12]
 801de9e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801dea0:	4b22      	ldr	r3, [pc, #136]	; (801df2c <dhcp_handle_ack+0xb8>)
 801dea2:	791b      	ldrb	r3, [r3, #4]
 801dea4:	2b00      	cmp	r3, #0
 801dea6:	d004      	beq.n	801deb2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801dea8:	4b21      	ldr	r3, [pc, #132]	; (801df30 <dhcp_handle_ack+0xbc>)
 801deaa:	691a      	ldr	r2, [r3, #16]
 801deac:	68fb      	ldr	r3, [r7, #12]
 801deae:	62da      	str	r2, [r3, #44]	; 0x2c
 801deb0:	e004      	b.n	801debc <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801deb2:	68fb      	ldr	r3, [r7, #12]
 801deb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801deb6:	085a      	lsrs	r2, r3, #1
 801deb8:	68fb      	ldr	r3, [r7, #12]
 801deba:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801debc:	4b1b      	ldr	r3, [pc, #108]	; (801df2c <dhcp_handle_ack+0xb8>)
 801debe:	795b      	ldrb	r3, [r3, #5]
 801dec0:	2b00      	cmp	r3, #0
 801dec2:	d004      	beq.n	801dece <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801dec4:	4b1a      	ldr	r3, [pc, #104]	; (801df30 <dhcp_handle_ack+0xbc>)
 801dec6:	695a      	ldr	r2, [r3, #20]
 801dec8:	68fb      	ldr	r3, [r7, #12]
 801deca:	631a      	str	r2, [r3, #48]	; 0x30
 801decc:	e007      	b.n	801dede <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801dece:	68fb      	ldr	r3, [r7, #12]
 801ded0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ded2:	4613      	mov	r3, r2
 801ded4:	00db      	lsls	r3, r3, #3
 801ded6:	1a9b      	subs	r3, r3, r2
 801ded8:	08da      	lsrs	r2, r3, #3
 801deda:	68fb      	ldr	r3, [r7, #12]
 801dedc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801dede:	683b      	ldr	r3, [r7, #0]
 801dee0:	691a      	ldr	r2, [r3, #16]
 801dee2:	68fb      	ldr	r3, [r7, #12]
 801dee4:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801dee6:	4b11      	ldr	r3, [pc, #68]	; (801df2c <dhcp_handle_ack+0xb8>)
 801dee8:	799b      	ldrb	r3, [r3, #6]
 801deea:	2b00      	cmp	r3, #0
 801deec:	d00b      	beq.n	801df06 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801deee:	4b10      	ldr	r3, [pc, #64]	; (801df30 <dhcp_handle_ack+0xbc>)
 801def0:	699b      	ldr	r3, [r3, #24]
 801def2:	4618      	mov	r0, r3
 801def4:	f7f6 fee1 	bl	8014cba <lwip_htonl>
 801def8:	4602      	mov	r2, r0
 801defa:	68fb      	ldr	r3, [r7, #12]
 801defc:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801defe:	68fb      	ldr	r3, [r7, #12]
 801df00:	2201      	movs	r2, #1
 801df02:	71da      	strb	r2, [r3, #7]
 801df04:	e002      	b.n	801df0c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801df06:	68fb      	ldr	r3, [r7, #12]
 801df08:	2200      	movs	r2, #0
 801df0a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801df0c:	4b07      	ldr	r3, [pc, #28]	; (801df2c <dhcp_handle_ack+0xb8>)
 801df0e:	79db      	ldrb	r3, [r3, #7]
 801df10:	2b00      	cmp	r3, #0
 801df12:	d007      	beq.n	801df24 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801df14:	4b06      	ldr	r3, [pc, #24]	; (801df30 <dhcp_handle_ack+0xbc>)
 801df16:	69db      	ldr	r3, [r3, #28]
 801df18:	4618      	mov	r0, r3
 801df1a:	f7f6 fece 	bl	8014cba <lwip_htonl>
 801df1e:	4602      	mov	r2, r0
 801df20:	68fb      	ldr	r3, [r7, #12]
 801df22:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801df24:	bf00      	nop
 801df26:	3710      	adds	r7, #16
 801df28:	46bd      	mov	sp, r7
 801df2a:	bd80      	pop	{r7, pc}
 801df2c:	200132b0 	.word	0x200132b0
 801df30:	20013290 	.word	0x20013290

0801df34 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801df34:	b580      	push	{r7, lr}
 801df36:	b084      	sub	sp, #16
 801df38:	af00      	add	r7, sp, #0
 801df3a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801df3c:	687b      	ldr	r3, [r7, #4]
 801df3e:	2b00      	cmp	r3, #0
 801df40:	d109      	bne.n	801df56 <dhcp_start+0x22>
 801df42:	4b37      	ldr	r3, [pc, #220]	; (801e020 <dhcp_start+0xec>)
 801df44:	f240 22e7 	movw	r2, #743	; 0x2e7
 801df48:	4936      	ldr	r1, [pc, #216]	; (801e024 <dhcp_start+0xf0>)
 801df4a:	4837      	ldr	r0, [pc, #220]	; (801e028 <dhcp_start+0xf4>)
 801df4c:	f006 f844 	bl	8023fd8 <iprintf>
 801df50:	f06f 030f 	mvn.w	r3, #15
 801df54:	e060      	b.n	801e018 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801df56:	687b      	ldr	r3, [r7, #4]
 801df58:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801df5c:	f003 0301 	and.w	r3, r3, #1
 801df60:	2b00      	cmp	r3, #0
 801df62:	d109      	bne.n	801df78 <dhcp_start+0x44>
 801df64:	4b2e      	ldr	r3, [pc, #184]	; (801e020 <dhcp_start+0xec>)
 801df66:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801df6a:	4930      	ldr	r1, [pc, #192]	; (801e02c <dhcp_start+0xf8>)
 801df6c:	482e      	ldr	r0, [pc, #184]	; (801e028 <dhcp_start+0xf4>)
 801df6e:	f006 f833 	bl	8023fd8 <iprintf>
 801df72:	f06f 030f 	mvn.w	r3, #15
 801df76:	e04f      	b.n	801e018 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801df78:	687b      	ldr	r3, [r7, #4]
 801df7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df7c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801df7e:	687b      	ldr	r3, [r7, #4]
 801df80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801df82:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801df86:	d202      	bcs.n	801df8e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801df88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801df8c:	e044      	b.n	801e018 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801df8e:	68fb      	ldr	r3, [r7, #12]
 801df90:	2b00      	cmp	r3, #0
 801df92:	d10d      	bne.n	801dfb0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801df94:	2034      	movs	r0, #52	; 0x34
 801df96:	f7f7 f9af 	bl	80152f8 <mem_malloc>
 801df9a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801df9c:	68fb      	ldr	r3, [r7, #12]
 801df9e:	2b00      	cmp	r3, #0
 801dfa0:	d102      	bne.n	801dfa8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801dfa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dfa6:	e037      	b.n	801e018 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801dfa8:	687b      	ldr	r3, [r7, #4]
 801dfaa:	68fa      	ldr	r2, [r7, #12]
 801dfac:	625a      	str	r2, [r3, #36]	; 0x24
 801dfae:	e005      	b.n	801dfbc <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801dfb0:	68fb      	ldr	r3, [r7, #12]
 801dfb2:	791b      	ldrb	r3, [r3, #4]
 801dfb4:	2b00      	cmp	r3, #0
 801dfb6:	d001      	beq.n	801dfbc <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801dfb8:	f7ff fc92 	bl	801d8e0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801dfbc:	2234      	movs	r2, #52	; 0x34
 801dfbe:	2100      	movs	r1, #0
 801dfc0:	68f8      	ldr	r0, [r7, #12]
 801dfc2:	f006 f9cd 	bl	8024360 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801dfc6:	f7ff fc39 	bl	801d83c <dhcp_inc_pcb_refcount>
 801dfca:	4603      	mov	r3, r0
 801dfcc:	2b00      	cmp	r3, #0
 801dfce:	d002      	beq.n	801dfd6 <dhcp_start+0xa2>
    return ERR_MEM;
 801dfd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dfd4:	e020      	b.n	801e018 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801dfd6:	68fb      	ldr	r3, [r7, #12]
 801dfd8:	2201      	movs	r2, #1
 801dfda:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801dfdc:	687b      	ldr	r3, [r7, #4]
 801dfde:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801dfe2:	f003 0304 	and.w	r3, r3, #4
 801dfe6:	2b00      	cmp	r3, #0
 801dfe8:	d105      	bne.n	801dff6 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801dfea:	2102      	movs	r1, #2
 801dfec:	68f8      	ldr	r0, [r7, #12]
 801dfee:	f000 fd01 	bl	801e9f4 <dhcp_set_state>
    return ERR_OK;
 801dff2:	2300      	movs	r3, #0
 801dff4:	e010      	b.n	801e018 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801dff6:	6878      	ldr	r0, [r7, #4]
 801dff8:	f000 f8f8 	bl	801e1ec <dhcp_discover>
 801dffc:	4603      	mov	r3, r0
 801dffe:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801e000:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801e004:	2b00      	cmp	r3, #0
 801e006:	d005      	beq.n	801e014 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801e008:	6878      	ldr	r0, [r7, #4]
 801e00a:	f000 fc59 	bl	801e8c0 <dhcp_release_and_stop>
    return ERR_MEM;
 801e00e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e012:	e001      	b.n	801e018 <dhcp_start+0xe4>
  }
  return result;
 801e014:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801e018:	4618      	mov	r0, r3
 801e01a:	3710      	adds	r7, #16
 801e01c:	46bd      	mov	sp, r7
 801e01e:	bd80      	pop	{r7, pc}
 801e020:	0802a26c 	.word	0x0802a26c
 801e024:	0802a350 	.word	0x0802a350
 801e028:	0802a2cc 	.word	0x0802a2cc
 801e02c:	0802a394 	.word	0x0802a394

0801e030 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801e030:	b580      	push	{r7, lr}
 801e032:	b084      	sub	sp, #16
 801e034:	af00      	add	r7, sp, #0
 801e036:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e03c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801e03e:	68fb      	ldr	r3, [r7, #12]
 801e040:	2b00      	cmp	r3, #0
 801e042:	d025      	beq.n	801e090 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801e044:	68fb      	ldr	r3, [r7, #12]
 801e046:	795b      	ldrb	r3, [r3, #5]
 801e048:	2b0a      	cmp	r3, #10
 801e04a:	d008      	beq.n	801e05e <dhcp_network_changed+0x2e>
 801e04c:	2b0a      	cmp	r3, #10
 801e04e:	dc0d      	bgt.n	801e06c <dhcp_network_changed+0x3c>
 801e050:	2b00      	cmp	r3, #0
 801e052:	d01f      	beq.n	801e094 <dhcp_network_changed+0x64>
 801e054:	2b00      	cmp	r3, #0
 801e056:	db09      	blt.n	801e06c <dhcp_network_changed+0x3c>
 801e058:	3b03      	subs	r3, #3
 801e05a:	2b02      	cmp	r3, #2
 801e05c:	d806      	bhi.n	801e06c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801e05e:	68fb      	ldr	r3, [r7, #12]
 801e060:	2200      	movs	r2, #0
 801e062:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801e064:	6878      	ldr	r0, [r7, #4]
 801e066:	f000 fb75 	bl	801e754 <dhcp_reboot>
      break;
 801e06a:	e014      	b.n	801e096 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801e06c:	68fb      	ldr	r3, [r7, #12]
 801e06e:	795b      	ldrb	r3, [r3, #5]
 801e070:	2b0c      	cmp	r3, #12
 801e072:	d906      	bls.n	801e082 <dhcp_network_changed+0x52>
 801e074:	4b09      	ldr	r3, [pc, #36]	; (801e09c <dhcp_network_changed+0x6c>)
 801e076:	f240 326d 	movw	r2, #877	; 0x36d
 801e07a:	4909      	ldr	r1, [pc, #36]	; (801e0a0 <dhcp_network_changed+0x70>)
 801e07c:	4809      	ldr	r0, [pc, #36]	; (801e0a4 <dhcp_network_changed+0x74>)
 801e07e:	f005 ffab 	bl	8023fd8 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801e082:	68fb      	ldr	r3, [r7, #12]
 801e084:	2200      	movs	r2, #0
 801e086:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801e088:	6878      	ldr	r0, [r7, #4]
 801e08a:	f000 f8af 	bl	801e1ec <dhcp_discover>
      break;
 801e08e:	e002      	b.n	801e096 <dhcp_network_changed+0x66>
    return;
 801e090:	bf00      	nop
 801e092:	e000      	b.n	801e096 <dhcp_network_changed+0x66>
      break;
 801e094:	bf00      	nop
  }
}
 801e096:	3710      	adds	r7, #16
 801e098:	46bd      	mov	sp, r7
 801e09a:	bd80      	pop	{r7, pc}
 801e09c:	0802a26c 	.word	0x0802a26c
 801e0a0:	0802a3b8 	.word	0x0802a3b8
 801e0a4:	0802a2cc 	.word	0x0802a2cc

0801e0a8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801e0a8:	b580      	push	{r7, lr}
 801e0aa:	b084      	sub	sp, #16
 801e0ac:	af00      	add	r7, sp, #0
 801e0ae:	6078      	str	r0, [r7, #4]
 801e0b0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801e0b2:	687b      	ldr	r3, [r7, #4]
 801e0b4:	2b00      	cmp	r3, #0
 801e0b6:	d107      	bne.n	801e0c8 <dhcp_arp_reply+0x20>
 801e0b8:	4b0e      	ldr	r3, [pc, #56]	; (801e0f4 <dhcp_arp_reply+0x4c>)
 801e0ba:	f240 328b 	movw	r2, #907	; 0x38b
 801e0be:	490e      	ldr	r1, [pc, #56]	; (801e0f8 <dhcp_arp_reply+0x50>)
 801e0c0:	480e      	ldr	r0, [pc, #56]	; (801e0fc <dhcp_arp_reply+0x54>)
 801e0c2:	f005 ff89 	bl	8023fd8 <iprintf>
 801e0c6:	e012      	b.n	801e0ee <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801e0c8:	687b      	ldr	r3, [r7, #4]
 801e0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e0cc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801e0ce:	68fb      	ldr	r3, [r7, #12]
 801e0d0:	2b00      	cmp	r3, #0
 801e0d2:	d00c      	beq.n	801e0ee <dhcp_arp_reply+0x46>
 801e0d4:	68fb      	ldr	r3, [r7, #12]
 801e0d6:	795b      	ldrb	r3, [r3, #5]
 801e0d8:	2b08      	cmp	r3, #8
 801e0da:	d108      	bne.n	801e0ee <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801e0dc:	683b      	ldr	r3, [r7, #0]
 801e0de:	681a      	ldr	r2, [r3, #0]
 801e0e0:	68fb      	ldr	r3, [r7, #12]
 801e0e2:	69db      	ldr	r3, [r3, #28]
 801e0e4:	429a      	cmp	r2, r3
 801e0e6:	d102      	bne.n	801e0ee <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801e0e8:	6878      	ldr	r0, [r7, #4]
 801e0ea:	f000 f809 	bl	801e100 <dhcp_decline>
    }
  }
}
 801e0ee:	3710      	adds	r7, #16
 801e0f0:	46bd      	mov	sp, r7
 801e0f2:	bd80      	pop	{r7, pc}
 801e0f4:	0802a26c 	.word	0x0802a26c
 801e0f8:	0802a350 	.word	0x0802a350
 801e0fc:	0802a2cc 	.word	0x0802a2cc

0801e100 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801e100:	b5b0      	push	{r4, r5, r7, lr}
 801e102:	b08a      	sub	sp, #40	; 0x28
 801e104:	af02      	add	r7, sp, #8
 801e106:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801e108:	687b      	ldr	r3, [r7, #4]
 801e10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e10c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801e10e:	210c      	movs	r1, #12
 801e110:	69b8      	ldr	r0, [r7, #24]
 801e112:	f000 fc6f 	bl	801e9f4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801e116:	f107 030c 	add.w	r3, r7, #12
 801e11a:	2204      	movs	r2, #4
 801e11c:	69b9      	ldr	r1, [r7, #24]
 801e11e:	6878      	ldr	r0, [r7, #4]
 801e120:	f001 f8f4 	bl	801f30c <dhcp_create_msg>
 801e124:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801e126:	697b      	ldr	r3, [r7, #20]
 801e128:	2b00      	cmp	r3, #0
 801e12a:	d035      	beq.n	801e198 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801e12c:	697b      	ldr	r3, [r7, #20]
 801e12e:	685b      	ldr	r3, [r3, #4]
 801e130:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801e132:	89b8      	ldrh	r0, [r7, #12]
 801e134:	693b      	ldr	r3, [r7, #16]
 801e136:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e13a:	2304      	movs	r3, #4
 801e13c:	2232      	movs	r2, #50	; 0x32
 801e13e:	f000 fc73 	bl	801ea28 <dhcp_option>
 801e142:	4603      	mov	r3, r0
 801e144:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801e146:	89bc      	ldrh	r4, [r7, #12]
 801e148:	693b      	ldr	r3, [r7, #16]
 801e14a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801e14e:	69bb      	ldr	r3, [r7, #24]
 801e150:	69db      	ldr	r3, [r3, #28]
 801e152:	4618      	mov	r0, r3
 801e154:	f7f6 fdb1 	bl	8014cba <lwip_htonl>
 801e158:	4603      	mov	r3, r0
 801e15a:	461a      	mov	r2, r3
 801e15c:	4629      	mov	r1, r5
 801e15e:	4620      	mov	r0, r4
 801e160:	f000 fcee 	bl	801eb40 <dhcp_option_long>
 801e164:	4603      	mov	r3, r0
 801e166:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801e168:	89b8      	ldrh	r0, [r7, #12]
 801e16a:	693b      	ldr	r3, [r7, #16]
 801e16c:	33f0      	adds	r3, #240	; 0xf0
 801e16e:	697a      	ldr	r2, [r7, #20]
 801e170:	4619      	mov	r1, r3
 801e172:	f001 f9a1 	bl	801f4b8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801e176:	4b19      	ldr	r3, [pc, #100]	; (801e1dc <dhcp_decline+0xdc>)
 801e178:	6818      	ldr	r0, [r3, #0]
 801e17a:	4b19      	ldr	r3, [pc, #100]	; (801e1e0 <dhcp_decline+0xe0>)
 801e17c:	9301      	str	r3, [sp, #4]
 801e17e:	687b      	ldr	r3, [r7, #4]
 801e180:	9300      	str	r3, [sp, #0]
 801e182:	2343      	movs	r3, #67	; 0x43
 801e184:	4a17      	ldr	r2, [pc, #92]	; (801e1e4 <dhcp_decline+0xe4>)
 801e186:	6979      	ldr	r1, [r7, #20]
 801e188:	f7ff f8ba 	bl	801d300 <udp_sendto_if_src>
 801e18c:	4603      	mov	r3, r0
 801e18e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801e190:	6978      	ldr	r0, [r7, #20]
 801e192:	f7f8 f97b 	bl	801648c <pbuf_free>
 801e196:	e001      	b.n	801e19c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801e198:	23ff      	movs	r3, #255	; 0xff
 801e19a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801e19c:	69bb      	ldr	r3, [r7, #24]
 801e19e:	799b      	ldrb	r3, [r3, #6]
 801e1a0:	2bff      	cmp	r3, #255	; 0xff
 801e1a2:	d005      	beq.n	801e1b0 <dhcp_decline+0xb0>
    dhcp->tries++;
 801e1a4:	69bb      	ldr	r3, [r7, #24]
 801e1a6:	799b      	ldrb	r3, [r3, #6]
 801e1a8:	3301      	adds	r3, #1
 801e1aa:	b2da      	uxtb	r2, r3
 801e1ac:	69bb      	ldr	r3, [r7, #24]
 801e1ae:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801e1b0:	f242 7310 	movw	r3, #10000	; 0x2710
 801e1b4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801e1b6:	89fb      	ldrh	r3, [r7, #14]
 801e1b8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801e1bc:	4a0a      	ldr	r2, [pc, #40]	; (801e1e8 <dhcp_decline+0xe8>)
 801e1be:	fb82 1203 	smull	r1, r2, r2, r3
 801e1c2:	1152      	asrs	r2, r2, #5
 801e1c4:	17db      	asrs	r3, r3, #31
 801e1c6:	1ad3      	subs	r3, r2, r3
 801e1c8:	b29a      	uxth	r2, r3
 801e1ca:	69bb      	ldr	r3, [r7, #24]
 801e1cc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801e1ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e1d2:	4618      	mov	r0, r3
 801e1d4:	3720      	adds	r7, #32
 801e1d6:	46bd      	mov	sp, r7
 801e1d8:	bdb0      	pop	{r4, r5, r7, pc}
 801e1da:	bf00      	nop
 801e1dc:	200132b8 	.word	0x200132b8
 801e1e0:	0802af70 	.word	0x0802af70
 801e1e4:	0802af74 	.word	0x0802af74
 801e1e8:	10624dd3 	.word	0x10624dd3

0801e1ec <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801e1ec:	b580      	push	{r7, lr}
 801e1ee:	b08a      	sub	sp, #40	; 0x28
 801e1f0:	af02      	add	r7, sp, #8
 801e1f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801e1f4:	687b      	ldr	r3, [r7, #4]
 801e1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1f8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801e1fa:	2300      	movs	r3, #0
 801e1fc:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801e1fe:	69bb      	ldr	r3, [r7, #24]
 801e200:	2200      	movs	r2, #0
 801e202:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801e204:	2106      	movs	r1, #6
 801e206:	69b8      	ldr	r0, [r7, #24]
 801e208:	f000 fbf4 	bl	801e9f4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801e20c:	f107 0308 	add.w	r3, r7, #8
 801e210:	2201      	movs	r2, #1
 801e212:	69b9      	ldr	r1, [r7, #24]
 801e214:	6878      	ldr	r0, [r7, #4]
 801e216:	f001 f879 	bl	801f30c <dhcp_create_msg>
 801e21a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801e21c:	693b      	ldr	r3, [r7, #16]
 801e21e:	2b00      	cmp	r3, #0
 801e220:	d04b      	beq.n	801e2ba <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801e222:	693b      	ldr	r3, [r7, #16]
 801e224:	685b      	ldr	r3, [r3, #4]
 801e226:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801e228:	8938      	ldrh	r0, [r7, #8]
 801e22a:	68fb      	ldr	r3, [r7, #12]
 801e22c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e230:	2302      	movs	r3, #2
 801e232:	2239      	movs	r2, #57	; 0x39
 801e234:	f000 fbf8 	bl	801ea28 <dhcp_option>
 801e238:	4603      	mov	r3, r0
 801e23a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801e23c:	8938      	ldrh	r0, [r7, #8]
 801e23e:	68fb      	ldr	r3, [r7, #12]
 801e240:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e244:	687b      	ldr	r3, [r7, #4]
 801e246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e248:	461a      	mov	r2, r3
 801e24a:	f000 fc47 	bl	801eadc <dhcp_option_short>
 801e24e:	4603      	mov	r3, r0
 801e250:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801e252:	8938      	ldrh	r0, [r7, #8]
 801e254:	68fb      	ldr	r3, [r7, #12]
 801e256:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e25a:	2303      	movs	r3, #3
 801e25c:	2237      	movs	r2, #55	; 0x37
 801e25e:	f000 fbe3 	bl	801ea28 <dhcp_option>
 801e262:	4603      	mov	r3, r0
 801e264:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801e266:	2300      	movs	r3, #0
 801e268:	77fb      	strb	r3, [r7, #31]
 801e26a:	e00e      	b.n	801e28a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801e26c:	8938      	ldrh	r0, [r7, #8]
 801e26e:	68fb      	ldr	r3, [r7, #12]
 801e270:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e274:	7ffb      	ldrb	r3, [r7, #31]
 801e276:	4a29      	ldr	r2, [pc, #164]	; (801e31c <dhcp_discover+0x130>)
 801e278:	5cd3      	ldrb	r3, [r2, r3]
 801e27a:	461a      	mov	r2, r3
 801e27c:	f000 fc08 	bl	801ea90 <dhcp_option_byte>
 801e280:	4603      	mov	r3, r0
 801e282:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801e284:	7ffb      	ldrb	r3, [r7, #31]
 801e286:	3301      	adds	r3, #1
 801e288:	77fb      	strb	r3, [r7, #31]
 801e28a:	7ffb      	ldrb	r3, [r7, #31]
 801e28c:	2b02      	cmp	r3, #2
 801e28e:	d9ed      	bls.n	801e26c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801e290:	8938      	ldrh	r0, [r7, #8]
 801e292:	68fb      	ldr	r3, [r7, #12]
 801e294:	33f0      	adds	r3, #240	; 0xf0
 801e296:	693a      	ldr	r2, [r7, #16]
 801e298:	4619      	mov	r1, r3
 801e29a:	f001 f90d 	bl	801f4b8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801e29e:	4b20      	ldr	r3, [pc, #128]	; (801e320 <dhcp_discover+0x134>)
 801e2a0:	6818      	ldr	r0, [r3, #0]
 801e2a2:	4b20      	ldr	r3, [pc, #128]	; (801e324 <dhcp_discover+0x138>)
 801e2a4:	9301      	str	r3, [sp, #4]
 801e2a6:	687b      	ldr	r3, [r7, #4]
 801e2a8:	9300      	str	r3, [sp, #0]
 801e2aa:	2343      	movs	r3, #67	; 0x43
 801e2ac:	4a1e      	ldr	r2, [pc, #120]	; (801e328 <dhcp_discover+0x13c>)
 801e2ae:	6939      	ldr	r1, [r7, #16]
 801e2b0:	f7ff f826 	bl	801d300 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801e2b4:	6938      	ldr	r0, [r7, #16]
 801e2b6:	f7f8 f8e9 	bl	801648c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801e2ba:	69bb      	ldr	r3, [r7, #24]
 801e2bc:	799b      	ldrb	r3, [r3, #6]
 801e2be:	2bff      	cmp	r3, #255	; 0xff
 801e2c0:	d005      	beq.n	801e2ce <dhcp_discover+0xe2>
    dhcp->tries++;
 801e2c2:	69bb      	ldr	r3, [r7, #24]
 801e2c4:	799b      	ldrb	r3, [r3, #6]
 801e2c6:	3301      	adds	r3, #1
 801e2c8:	b2da      	uxtb	r2, r3
 801e2ca:	69bb      	ldr	r3, [r7, #24]
 801e2cc:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801e2ce:	69bb      	ldr	r3, [r7, #24]
 801e2d0:	799b      	ldrb	r3, [r3, #6]
 801e2d2:	2b05      	cmp	r3, #5
 801e2d4:	d80d      	bhi.n	801e2f2 <dhcp_discover+0x106>
 801e2d6:	69bb      	ldr	r3, [r7, #24]
 801e2d8:	799b      	ldrb	r3, [r3, #6]
 801e2da:	461a      	mov	r2, r3
 801e2dc:	2301      	movs	r3, #1
 801e2de:	4093      	lsls	r3, r2
 801e2e0:	b29b      	uxth	r3, r3
 801e2e2:	461a      	mov	r2, r3
 801e2e4:	0152      	lsls	r2, r2, #5
 801e2e6:	1ad2      	subs	r2, r2, r3
 801e2e8:	0092      	lsls	r2, r2, #2
 801e2ea:	4413      	add	r3, r2
 801e2ec:	00db      	lsls	r3, r3, #3
 801e2ee:	b29b      	uxth	r3, r3
 801e2f0:	e001      	b.n	801e2f6 <dhcp_discover+0x10a>
 801e2f2:	f64e 2360 	movw	r3, #60000	; 0xea60
 801e2f6:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801e2f8:	897b      	ldrh	r3, [r7, #10]
 801e2fa:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801e2fe:	4a0b      	ldr	r2, [pc, #44]	; (801e32c <dhcp_discover+0x140>)
 801e300:	fb82 1203 	smull	r1, r2, r2, r3
 801e304:	1152      	asrs	r2, r2, #5
 801e306:	17db      	asrs	r3, r3, #31
 801e308:	1ad3      	subs	r3, r2, r3
 801e30a:	b29a      	uxth	r2, r3
 801e30c:	69bb      	ldr	r3, [r7, #24]
 801e30e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801e310:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801e314:	4618      	mov	r0, r3
 801e316:	3720      	adds	r7, #32
 801e318:	46bd      	mov	sp, r7
 801e31a:	bd80      	pop	{r7, pc}
 801e31c:	20000034 	.word	0x20000034
 801e320:	200132b8 	.word	0x200132b8
 801e324:	0802af70 	.word	0x0802af70
 801e328:	0802af74 	.word	0x0802af74
 801e32c:	10624dd3 	.word	0x10624dd3

0801e330 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801e330:	b580      	push	{r7, lr}
 801e332:	b088      	sub	sp, #32
 801e334:	af00      	add	r7, sp, #0
 801e336:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801e338:	687b      	ldr	r3, [r7, #4]
 801e33a:	2b00      	cmp	r3, #0
 801e33c:	d107      	bne.n	801e34e <dhcp_bind+0x1e>
 801e33e:	4b64      	ldr	r3, [pc, #400]	; (801e4d0 <dhcp_bind+0x1a0>)
 801e340:	f240 4215 	movw	r2, #1045	; 0x415
 801e344:	4963      	ldr	r1, [pc, #396]	; (801e4d4 <dhcp_bind+0x1a4>)
 801e346:	4864      	ldr	r0, [pc, #400]	; (801e4d8 <dhcp_bind+0x1a8>)
 801e348:	f005 fe46 	bl	8023fd8 <iprintf>
 801e34c:	e0bc      	b.n	801e4c8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801e34e:	687b      	ldr	r3, [r7, #4]
 801e350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e352:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801e354:	69bb      	ldr	r3, [r7, #24]
 801e356:	2b00      	cmp	r3, #0
 801e358:	d107      	bne.n	801e36a <dhcp_bind+0x3a>
 801e35a:	4b5d      	ldr	r3, [pc, #372]	; (801e4d0 <dhcp_bind+0x1a0>)
 801e35c:	f240 4217 	movw	r2, #1047	; 0x417
 801e360:	495e      	ldr	r1, [pc, #376]	; (801e4dc <dhcp_bind+0x1ac>)
 801e362:	485d      	ldr	r0, [pc, #372]	; (801e4d8 <dhcp_bind+0x1a8>)
 801e364:	f005 fe38 	bl	8023fd8 <iprintf>
 801e368:	e0ae      	b.n	801e4c8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801e36a:	69bb      	ldr	r3, [r7, #24]
 801e36c:	2200      	movs	r2, #0
 801e36e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801e370:	69bb      	ldr	r3, [r7, #24]
 801e372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e378:	d019      	beq.n	801e3ae <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801e37a:	69bb      	ldr	r3, [r7, #24]
 801e37c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e37e:	331e      	adds	r3, #30
 801e380:	4a57      	ldr	r2, [pc, #348]	; (801e4e0 <dhcp_bind+0x1b0>)
 801e382:	fba2 2303 	umull	r2, r3, r2, r3
 801e386:	095b      	lsrs	r3, r3, #5
 801e388:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801e38a:	69fb      	ldr	r3, [r7, #28]
 801e38c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e390:	d302      	bcc.n	801e398 <dhcp_bind+0x68>
      timeout = 0xffff;
 801e392:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e396:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801e398:	69fb      	ldr	r3, [r7, #28]
 801e39a:	b29a      	uxth	r2, r3
 801e39c:	69bb      	ldr	r3, [r7, #24]
 801e39e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801e3a0:	69bb      	ldr	r3, [r7, #24]
 801e3a2:	8a9b      	ldrh	r3, [r3, #20]
 801e3a4:	2b00      	cmp	r3, #0
 801e3a6:	d102      	bne.n	801e3ae <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801e3a8:	69bb      	ldr	r3, [r7, #24]
 801e3aa:	2201      	movs	r2, #1
 801e3ac:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801e3ae:	69bb      	ldr	r3, [r7, #24]
 801e3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e3b6:	d01d      	beq.n	801e3f4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801e3b8:	69bb      	ldr	r3, [r7, #24]
 801e3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3bc:	331e      	adds	r3, #30
 801e3be:	4a48      	ldr	r2, [pc, #288]	; (801e4e0 <dhcp_bind+0x1b0>)
 801e3c0:	fba2 2303 	umull	r2, r3, r2, r3
 801e3c4:	095b      	lsrs	r3, r3, #5
 801e3c6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801e3c8:	69fb      	ldr	r3, [r7, #28]
 801e3ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e3ce:	d302      	bcc.n	801e3d6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801e3d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e3d4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801e3d6:	69fb      	ldr	r3, [r7, #28]
 801e3d8:	b29a      	uxth	r2, r3
 801e3da:	69bb      	ldr	r3, [r7, #24]
 801e3dc:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801e3de:	69bb      	ldr	r3, [r7, #24]
 801e3e0:	895b      	ldrh	r3, [r3, #10]
 801e3e2:	2b00      	cmp	r3, #0
 801e3e4:	d102      	bne.n	801e3ec <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801e3e6:	69bb      	ldr	r3, [r7, #24]
 801e3e8:	2201      	movs	r2, #1
 801e3ea:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801e3ec:	69bb      	ldr	r3, [r7, #24]
 801e3ee:	895a      	ldrh	r2, [r3, #10]
 801e3f0:	69bb      	ldr	r3, [r7, #24]
 801e3f2:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801e3f4:	69bb      	ldr	r3, [r7, #24]
 801e3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e3f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e3fc:	d01d      	beq.n	801e43a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801e3fe:	69bb      	ldr	r3, [r7, #24]
 801e400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e402:	331e      	adds	r3, #30
 801e404:	4a36      	ldr	r2, [pc, #216]	; (801e4e0 <dhcp_bind+0x1b0>)
 801e406:	fba2 2303 	umull	r2, r3, r2, r3
 801e40a:	095b      	lsrs	r3, r3, #5
 801e40c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801e40e:	69fb      	ldr	r3, [r7, #28]
 801e410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e414:	d302      	bcc.n	801e41c <dhcp_bind+0xec>
      timeout = 0xffff;
 801e416:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e41a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801e41c:	69fb      	ldr	r3, [r7, #28]
 801e41e:	b29a      	uxth	r2, r3
 801e420:	69bb      	ldr	r3, [r7, #24]
 801e422:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801e424:	69bb      	ldr	r3, [r7, #24]
 801e426:	899b      	ldrh	r3, [r3, #12]
 801e428:	2b00      	cmp	r3, #0
 801e42a:	d102      	bne.n	801e432 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801e42c:	69bb      	ldr	r3, [r7, #24]
 801e42e:	2201      	movs	r2, #1
 801e430:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801e432:	69bb      	ldr	r3, [r7, #24]
 801e434:	899a      	ldrh	r2, [r3, #12]
 801e436:	69bb      	ldr	r3, [r7, #24]
 801e438:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801e43a:	69bb      	ldr	r3, [r7, #24]
 801e43c:	895a      	ldrh	r2, [r3, #10]
 801e43e:	69bb      	ldr	r3, [r7, #24]
 801e440:	899b      	ldrh	r3, [r3, #12]
 801e442:	429a      	cmp	r2, r3
 801e444:	d306      	bcc.n	801e454 <dhcp_bind+0x124>
 801e446:	69bb      	ldr	r3, [r7, #24]
 801e448:	899b      	ldrh	r3, [r3, #12]
 801e44a:	2b00      	cmp	r3, #0
 801e44c:	d002      	beq.n	801e454 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801e44e:	69bb      	ldr	r3, [r7, #24]
 801e450:	2200      	movs	r2, #0
 801e452:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801e454:	69bb      	ldr	r3, [r7, #24]
 801e456:	79db      	ldrb	r3, [r3, #7]
 801e458:	2b00      	cmp	r3, #0
 801e45a:	d003      	beq.n	801e464 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801e45c:	69bb      	ldr	r3, [r7, #24]
 801e45e:	6a1b      	ldr	r3, [r3, #32]
 801e460:	613b      	str	r3, [r7, #16]
 801e462:	e014      	b.n	801e48e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801e464:	69bb      	ldr	r3, [r7, #24]
 801e466:	331c      	adds	r3, #28
 801e468:	781b      	ldrb	r3, [r3, #0]
 801e46a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801e46c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801e470:	2b00      	cmp	r3, #0
 801e472:	db02      	blt.n	801e47a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801e474:	23ff      	movs	r3, #255	; 0xff
 801e476:	613b      	str	r3, [r7, #16]
 801e478:	e009      	b.n	801e48e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801e47a:	7dfb      	ldrb	r3, [r7, #23]
 801e47c:	2bbf      	cmp	r3, #191	; 0xbf
 801e47e:	d903      	bls.n	801e488 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801e480:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801e484:	613b      	str	r3, [r7, #16]
 801e486:	e002      	b.n	801e48e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801e488:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e48c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801e48e:	69bb      	ldr	r3, [r7, #24]
 801e490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e492:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801e494:	68fb      	ldr	r3, [r7, #12]
 801e496:	2b00      	cmp	r3, #0
 801e498:	d108      	bne.n	801e4ac <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801e49a:	69bb      	ldr	r3, [r7, #24]
 801e49c:	69da      	ldr	r2, [r3, #28]
 801e49e:	693b      	ldr	r3, [r7, #16]
 801e4a0:	4013      	ands	r3, r2
 801e4a2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801e4a4:	68fb      	ldr	r3, [r7, #12]
 801e4a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801e4aa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801e4ac:	210a      	movs	r1, #10
 801e4ae:	69b8      	ldr	r0, [r7, #24]
 801e4b0:	f000 faa0 	bl	801e9f4 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801e4b4:	69bb      	ldr	r3, [r7, #24]
 801e4b6:	f103 011c 	add.w	r1, r3, #28
 801e4ba:	f107 030c 	add.w	r3, r7, #12
 801e4be:	f107 0210 	add.w	r2, r7, #16
 801e4c2:	6878      	ldr	r0, [r7, #4]
 801e4c4:	f7f7 fad4 	bl	8015a70 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801e4c8:	3720      	adds	r7, #32
 801e4ca:	46bd      	mov	sp, r7
 801e4cc:	bd80      	pop	{r7, pc}
 801e4ce:	bf00      	nop
 801e4d0:	0802a26c 	.word	0x0802a26c
 801e4d4:	0802a3cc 	.word	0x0802a3cc
 801e4d8:	0802a2cc 	.word	0x0802a2cc
 801e4dc:	0802a3e8 	.word	0x0802a3e8
 801e4e0:	88888889 	.word	0x88888889

0801e4e4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801e4e4:	b580      	push	{r7, lr}
 801e4e6:	b08a      	sub	sp, #40	; 0x28
 801e4e8:	af02      	add	r7, sp, #8
 801e4ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801e4ec:	687b      	ldr	r3, [r7, #4]
 801e4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e4f0:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801e4f2:	2105      	movs	r1, #5
 801e4f4:	69b8      	ldr	r0, [r7, #24]
 801e4f6:	f000 fa7d 	bl	801e9f4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801e4fa:	f107 030c 	add.w	r3, r7, #12
 801e4fe:	2203      	movs	r2, #3
 801e500:	69b9      	ldr	r1, [r7, #24]
 801e502:	6878      	ldr	r0, [r7, #4]
 801e504:	f000 ff02 	bl	801f30c <dhcp_create_msg>
 801e508:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801e50a:	697b      	ldr	r3, [r7, #20]
 801e50c:	2b00      	cmp	r3, #0
 801e50e:	d04e      	beq.n	801e5ae <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801e510:	697b      	ldr	r3, [r7, #20]
 801e512:	685b      	ldr	r3, [r3, #4]
 801e514:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801e516:	89b8      	ldrh	r0, [r7, #12]
 801e518:	693b      	ldr	r3, [r7, #16]
 801e51a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e51e:	2302      	movs	r3, #2
 801e520:	2239      	movs	r2, #57	; 0x39
 801e522:	f000 fa81 	bl	801ea28 <dhcp_option>
 801e526:	4603      	mov	r3, r0
 801e528:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801e52a:	89b8      	ldrh	r0, [r7, #12]
 801e52c:	693b      	ldr	r3, [r7, #16]
 801e52e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e532:	687b      	ldr	r3, [r7, #4]
 801e534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e536:	461a      	mov	r2, r3
 801e538:	f000 fad0 	bl	801eadc <dhcp_option_short>
 801e53c:	4603      	mov	r3, r0
 801e53e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801e540:	89b8      	ldrh	r0, [r7, #12]
 801e542:	693b      	ldr	r3, [r7, #16]
 801e544:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e548:	2303      	movs	r3, #3
 801e54a:	2237      	movs	r2, #55	; 0x37
 801e54c:	f000 fa6c 	bl	801ea28 <dhcp_option>
 801e550:	4603      	mov	r3, r0
 801e552:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801e554:	2300      	movs	r3, #0
 801e556:	77bb      	strb	r3, [r7, #30]
 801e558:	e00e      	b.n	801e578 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801e55a:	89b8      	ldrh	r0, [r7, #12]
 801e55c:	693b      	ldr	r3, [r7, #16]
 801e55e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e562:	7fbb      	ldrb	r3, [r7, #30]
 801e564:	4a2a      	ldr	r2, [pc, #168]	; (801e610 <dhcp_renew+0x12c>)
 801e566:	5cd3      	ldrb	r3, [r2, r3]
 801e568:	461a      	mov	r2, r3
 801e56a:	f000 fa91 	bl	801ea90 <dhcp_option_byte>
 801e56e:	4603      	mov	r3, r0
 801e570:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801e572:	7fbb      	ldrb	r3, [r7, #30]
 801e574:	3301      	adds	r3, #1
 801e576:	77bb      	strb	r3, [r7, #30]
 801e578:	7fbb      	ldrb	r3, [r7, #30]
 801e57a:	2b02      	cmp	r3, #2
 801e57c:	d9ed      	bls.n	801e55a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801e57e:	89b8      	ldrh	r0, [r7, #12]
 801e580:	693b      	ldr	r3, [r7, #16]
 801e582:	33f0      	adds	r3, #240	; 0xf0
 801e584:	697a      	ldr	r2, [r7, #20]
 801e586:	4619      	mov	r1, r3
 801e588:	f000 ff96 	bl	801f4b8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801e58c:	4b21      	ldr	r3, [pc, #132]	; (801e614 <dhcp_renew+0x130>)
 801e58e:	6818      	ldr	r0, [r3, #0]
 801e590:	69bb      	ldr	r3, [r7, #24]
 801e592:	f103 0218 	add.w	r2, r3, #24
 801e596:	687b      	ldr	r3, [r7, #4]
 801e598:	9300      	str	r3, [sp, #0]
 801e59a:	2343      	movs	r3, #67	; 0x43
 801e59c:	6979      	ldr	r1, [r7, #20]
 801e59e:	f7fe fe3b 	bl	801d218 <udp_sendto_if>
 801e5a2:	4603      	mov	r3, r0
 801e5a4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801e5a6:	6978      	ldr	r0, [r7, #20]
 801e5a8:	f7f7 ff70 	bl	801648c <pbuf_free>
 801e5ac:	e001      	b.n	801e5b2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801e5ae:	23ff      	movs	r3, #255	; 0xff
 801e5b0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801e5b2:	69bb      	ldr	r3, [r7, #24]
 801e5b4:	799b      	ldrb	r3, [r3, #6]
 801e5b6:	2bff      	cmp	r3, #255	; 0xff
 801e5b8:	d005      	beq.n	801e5c6 <dhcp_renew+0xe2>
    dhcp->tries++;
 801e5ba:	69bb      	ldr	r3, [r7, #24]
 801e5bc:	799b      	ldrb	r3, [r3, #6]
 801e5be:	3301      	adds	r3, #1
 801e5c0:	b2da      	uxtb	r2, r3
 801e5c2:	69bb      	ldr	r3, [r7, #24]
 801e5c4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801e5c6:	69bb      	ldr	r3, [r7, #24]
 801e5c8:	799b      	ldrb	r3, [r3, #6]
 801e5ca:	2b09      	cmp	r3, #9
 801e5cc:	d80a      	bhi.n	801e5e4 <dhcp_renew+0x100>
 801e5ce:	69bb      	ldr	r3, [r7, #24]
 801e5d0:	799b      	ldrb	r3, [r3, #6]
 801e5d2:	b29b      	uxth	r3, r3
 801e5d4:	461a      	mov	r2, r3
 801e5d6:	0152      	lsls	r2, r2, #5
 801e5d8:	1ad2      	subs	r2, r2, r3
 801e5da:	0092      	lsls	r2, r2, #2
 801e5dc:	4413      	add	r3, r2
 801e5de:	011b      	lsls	r3, r3, #4
 801e5e0:	b29b      	uxth	r3, r3
 801e5e2:	e001      	b.n	801e5e8 <dhcp_renew+0x104>
 801e5e4:	f644 6320 	movw	r3, #20000	; 0x4e20
 801e5e8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801e5ea:	89fb      	ldrh	r3, [r7, #14]
 801e5ec:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801e5f0:	4a09      	ldr	r2, [pc, #36]	; (801e618 <dhcp_renew+0x134>)
 801e5f2:	fb82 1203 	smull	r1, r2, r2, r3
 801e5f6:	1152      	asrs	r2, r2, #5
 801e5f8:	17db      	asrs	r3, r3, #31
 801e5fa:	1ad3      	subs	r3, r2, r3
 801e5fc:	b29a      	uxth	r2, r3
 801e5fe:	69bb      	ldr	r3, [r7, #24]
 801e600:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801e602:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e606:	4618      	mov	r0, r3
 801e608:	3720      	adds	r7, #32
 801e60a:	46bd      	mov	sp, r7
 801e60c:	bd80      	pop	{r7, pc}
 801e60e:	bf00      	nop
 801e610:	20000034 	.word	0x20000034
 801e614:	200132b8 	.word	0x200132b8
 801e618:	10624dd3 	.word	0x10624dd3

0801e61c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801e61c:	b580      	push	{r7, lr}
 801e61e:	b08a      	sub	sp, #40	; 0x28
 801e620:	af02      	add	r7, sp, #8
 801e622:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801e624:	687b      	ldr	r3, [r7, #4]
 801e626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e628:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801e62a:	2104      	movs	r1, #4
 801e62c:	69b8      	ldr	r0, [r7, #24]
 801e62e:	f000 f9e1 	bl	801e9f4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801e632:	f107 030c 	add.w	r3, r7, #12
 801e636:	2203      	movs	r2, #3
 801e638:	69b9      	ldr	r1, [r7, #24]
 801e63a:	6878      	ldr	r0, [r7, #4]
 801e63c:	f000 fe66 	bl	801f30c <dhcp_create_msg>
 801e640:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801e642:	697b      	ldr	r3, [r7, #20]
 801e644:	2b00      	cmp	r3, #0
 801e646:	d04c      	beq.n	801e6e2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801e648:	697b      	ldr	r3, [r7, #20]
 801e64a:	685b      	ldr	r3, [r3, #4]
 801e64c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801e64e:	89b8      	ldrh	r0, [r7, #12]
 801e650:	693b      	ldr	r3, [r7, #16]
 801e652:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e656:	2302      	movs	r3, #2
 801e658:	2239      	movs	r2, #57	; 0x39
 801e65a:	f000 f9e5 	bl	801ea28 <dhcp_option>
 801e65e:	4603      	mov	r3, r0
 801e660:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801e662:	89b8      	ldrh	r0, [r7, #12]
 801e664:	693b      	ldr	r3, [r7, #16]
 801e666:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e66a:	687b      	ldr	r3, [r7, #4]
 801e66c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e66e:	461a      	mov	r2, r3
 801e670:	f000 fa34 	bl	801eadc <dhcp_option_short>
 801e674:	4603      	mov	r3, r0
 801e676:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801e678:	89b8      	ldrh	r0, [r7, #12]
 801e67a:	693b      	ldr	r3, [r7, #16]
 801e67c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e680:	2303      	movs	r3, #3
 801e682:	2237      	movs	r2, #55	; 0x37
 801e684:	f000 f9d0 	bl	801ea28 <dhcp_option>
 801e688:	4603      	mov	r3, r0
 801e68a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801e68c:	2300      	movs	r3, #0
 801e68e:	77bb      	strb	r3, [r7, #30]
 801e690:	e00e      	b.n	801e6b0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801e692:	89b8      	ldrh	r0, [r7, #12]
 801e694:	693b      	ldr	r3, [r7, #16]
 801e696:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e69a:	7fbb      	ldrb	r3, [r7, #30]
 801e69c:	4a29      	ldr	r2, [pc, #164]	; (801e744 <dhcp_rebind+0x128>)
 801e69e:	5cd3      	ldrb	r3, [r2, r3]
 801e6a0:	461a      	mov	r2, r3
 801e6a2:	f000 f9f5 	bl	801ea90 <dhcp_option_byte>
 801e6a6:	4603      	mov	r3, r0
 801e6a8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801e6aa:	7fbb      	ldrb	r3, [r7, #30]
 801e6ac:	3301      	adds	r3, #1
 801e6ae:	77bb      	strb	r3, [r7, #30]
 801e6b0:	7fbb      	ldrb	r3, [r7, #30]
 801e6b2:	2b02      	cmp	r3, #2
 801e6b4:	d9ed      	bls.n	801e692 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801e6b6:	89b8      	ldrh	r0, [r7, #12]
 801e6b8:	693b      	ldr	r3, [r7, #16]
 801e6ba:	33f0      	adds	r3, #240	; 0xf0
 801e6bc:	697a      	ldr	r2, [r7, #20]
 801e6be:	4619      	mov	r1, r3
 801e6c0:	f000 fefa 	bl	801f4b8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801e6c4:	4b20      	ldr	r3, [pc, #128]	; (801e748 <dhcp_rebind+0x12c>)
 801e6c6:	6818      	ldr	r0, [r3, #0]
 801e6c8:	687b      	ldr	r3, [r7, #4]
 801e6ca:	9300      	str	r3, [sp, #0]
 801e6cc:	2343      	movs	r3, #67	; 0x43
 801e6ce:	4a1f      	ldr	r2, [pc, #124]	; (801e74c <dhcp_rebind+0x130>)
 801e6d0:	6979      	ldr	r1, [r7, #20]
 801e6d2:	f7fe fda1 	bl	801d218 <udp_sendto_if>
 801e6d6:	4603      	mov	r3, r0
 801e6d8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801e6da:	6978      	ldr	r0, [r7, #20]
 801e6dc:	f7f7 fed6 	bl	801648c <pbuf_free>
 801e6e0:	e001      	b.n	801e6e6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801e6e2:	23ff      	movs	r3, #255	; 0xff
 801e6e4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801e6e6:	69bb      	ldr	r3, [r7, #24]
 801e6e8:	799b      	ldrb	r3, [r3, #6]
 801e6ea:	2bff      	cmp	r3, #255	; 0xff
 801e6ec:	d005      	beq.n	801e6fa <dhcp_rebind+0xde>
    dhcp->tries++;
 801e6ee:	69bb      	ldr	r3, [r7, #24]
 801e6f0:	799b      	ldrb	r3, [r3, #6]
 801e6f2:	3301      	adds	r3, #1
 801e6f4:	b2da      	uxtb	r2, r3
 801e6f6:	69bb      	ldr	r3, [r7, #24]
 801e6f8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801e6fa:	69bb      	ldr	r3, [r7, #24]
 801e6fc:	799b      	ldrb	r3, [r3, #6]
 801e6fe:	2b09      	cmp	r3, #9
 801e700:	d80a      	bhi.n	801e718 <dhcp_rebind+0xfc>
 801e702:	69bb      	ldr	r3, [r7, #24]
 801e704:	799b      	ldrb	r3, [r3, #6]
 801e706:	b29b      	uxth	r3, r3
 801e708:	461a      	mov	r2, r3
 801e70a:	0152      	lsls	r2, r2, #5
 801e70c:	1ad2      	subs	r2, r2, r3
 801e70e:	0092      	lsls	r2, r2, #2
 801e710:	4413      	add	r3, r2
 801e712:	00db      	lsls	r3, r3, #3
 801e714:	b29b      	uxth	r3, r3
 801e716:	e001      	b.n	801e71c <dhcp_rebind+0x100>
 801e718:	f242 7310 	movw	r3, #10000	; 0x2710
 801e71c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801e71e:	89fb      	ldrh	r3, [r7, #14]
 801e720:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801e724:	4a0a      	ldr	r2, [pc, #40]	; (801e750 <dhcp_rebind+0x134>)
 801e726:	fb82 1203 	smull	r1, r2, r2, r3
 801e72a:	1152      	asrs	r2, r2, #5
 801e72c:	17db      	asrs	r3, r3, #31
 801e72e:	1ad3      	subs	r3, r2, r3
 801e730:	b29a      	uxth	r2, r3
 801e732:	69bb      	ldr	r3, [r7, #24]
 801e734:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801e736:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e73a:	4618      	mov	r0, r3
 801e73c:	3720      	adds	r7, #32
 801e73e:	46bd      	mov	sp, r7
 801e740:	bd80      	pop	{r7, pc}
 801e742:	bf00      	nop
 801e744:	20000034 	.word	0x20000034
 801e748:	200132b8 	.word	0x200132b8
 801e74c:	0802af74 	.word	0x0802af74
 801e750:	10624dd3 	.word	0x10624dd3

0801e754 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801e754:	b5b0      	push	{r4, r5, r7, lr}
 801e756:	b08a      	sub	sp, #40	; 0x28
 801e758:	af02      	add	r7, sp, #8
 801e75a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801e75c:	687b      	ldr	r3, [r7, #4]
 801e75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e760:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801e762:	2103      	movs	r1, #3
 801e764:	69b8      	ldr	r0, [r7, #24]
 801e766:	f000 f945 	bl	801e9f4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801e76a:	f107 030c 	add.w	r3, r7, #12
 801e76e:	2203      	movs	r2, #3
 801e770:	69b9      	ldr	r1, [r7, #24]
 801e772:	6878      	ldr	r0, [r7, #4]
 801e774:	f000 fdca 	bl	801f30c <dhcp_create_msg>
 801e778:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801e77a:	697b      	ldr	r3, [r7, #20]
 801e77c:	2b00      	cmp	r3, #0
 801e77e:	d066      	beq.n	801e84e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801e780:	697b      	ldr	r3, [r7, #20]
 801e782:	685b      	ldr	r3, [r3, #4]
 801e784:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801e786:	89b8      	ldrh	r0, [r7, #12]
 801e788:	693b      	ldr	r3, [r7, #16]
 801e78a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e78e:	2302      	movs	r3, #2
 801e790:	2239      	movs	r2, #57	; 0x39
 801e792:	f000 f949 	bl	801ea28 <dhcp_option>
 801e796:	4603      	mov	r3, r0
 801e798:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801e79a:	89b8      	ldrh	r0, [r7, #12]
 801e79c:	693b      	ldr	r3, [r7, #16]
 801e79e:	33f0      	adds	r3, #240	; 0xf0
 801e7a0:	f44f 7210 	mov.w	r2, #576	; 0x240
 801e7a4:	4619      	mov	r1, r3
 801e7a6:	f000 f999 	bl	801eadc <dhcp_option_short>
 801e7aa:	4603      	mov	r3, r0
 801e7ac:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801e7ae:	89b8      	ldrh	r0, [r7, #12]
 801e7b0:	693b      	ldr	r3, [r7, #16]
 801e7b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e7b6:	2304      	movs	r3, #4
 801e7b8:	2232      	movs	r2, #50	; 0x32
 801e7ba:	f000 f935 	bl	801ea28 <dhcp_option>
 801e7be:	4603      	mov	r3, r0
 801e7c0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801e7c2:	89bc      	ldrh	r4, [r7, #12]
 801e7c4:	693b      	ldr	r3, [r7, #16]
 801e7c6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801e7ca:	69bb      	ldr	r3, [r7, #24]
 801e7cc:	69db      	ldr	r3, [r3, #28]
 801e7ce:	4618      	mov	r0, r3
 801e7d0:	f7f6 fa73 	bl	8014cba <lwip_htonl>
 801e7d4:	4603      	mov	r3, r0
 801e7d6:	461a      	mov	r2, r3
 801e7d8:	4629      	mov	r1, r5
 801e7da:	4620      	mov	r0, r4
 801e7dc:	f000 f9b0 	bl	801eb40 <dhcp_option_long>
 801e7e0:	4603      	mov	r3, r0
 801e7e2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801e7e4:	89b8      	ldrh	r0, [r7, #12]
 801e7e6:	693b      	ldr	r3, [r7, #16]
 801e7e8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e7ec:	2303      	movs	r3, #3
 801e7ee:	2237      	movs	r2, #55	; 0x37
 801e7f0:	f000 f91a 	bl	801ea28 <dhcp_option>
 801e7f4:	4603      	mov	r3, r0
 801e7f6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801e7f8:	2300      	movs	r3, #0
 801e7fa:	77bb      	strb	r3, [r7, #30]
 801e7fc:	e00e      	b.n	801e81c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801e7fe:	89b8      	ldrh	r0, [r7, #12]
 801e800:	693b      	ldr	r3, [r7, #16]
 801e802:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e806:	7fbb      	ldrb	r3, [r7, #30]
 801e808:	4a29      	ldr	r2, [pc, #164]	; (801e8b0 <dhcp_reboot+0x15c>)
 801e80a:	5cd3      	ldrb	r3, [r2, r3]
 801e80c:	461a      	mov	r2, r3
 801e80e:	f000 f93f 	bl	801ea90 <dhcp_option_byte>
 801e812:	4603      	mov	r3, r0
 801e814:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801e816:	7fbb      	ldrb	r3, [r7, #30]
 801e818:	3301      	adds	r3, #1
 801e81a:	77bb      	strb	r3, [r7, #30]
 801e81c:	7fbb      	ldrb	r3, [r7, #30]
 801e81e:	2b02      	cmp	r3, #2
 801e820:	d9ed      	bls.n	801e7fe <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801e822:	89b8      	ldrh	r0, [r7, #12]
 801e824:	693b      	ldr	r3, [r7, #16]
 801e826:	33f0      	adds	r3, #240	; 0xf0
 801e828:	697a      	ldr	r2, [r7, #20]
 801e82a:	4619      	mov	r1, r3
 801e82c:	f000 fe44 	bl	801f4b8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801e830:	4b20      	ldr	r3, [pc, #128]	; (801e8b4 <dhcp_reboot+0x160>)
 801e832:	6818      	ldr	r0, [r3, #0]
 801e834:	687b      	ldr	r3, [r7, #4]
 801e836:	9300      	str	r3, [sp, #0]
 801e838:	2343      	movs	r3, #67	; 0x43
 801e83a:	4a1f      	ldr	r2, [pc, #124]	; (801e8b8 <dhcp_reboot+0x164>)
 801e83c:	6979      	ldr	r1, [r7, #20]
 801e83e:	f7fe fceb 	bl	801d218 <udp_sendto_if>
 801e842:	4603      	mov	r3, r0
 801e844:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801e846:	6978      	ldr	r0, [r7, #20]
 801e848:	f7f7 fe20 	bl	801648c <pbuf_free>
 801e84c:	e001      	b.n	801e852 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801e84e:	23ff      	movs	r3, #255	; 0xff
 801e850:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801e852:	69bb      	ldr	r3, [r7, #24]
 801e854:	799b      	ldrb	r3, [r3, #6]
 801e856:	2bff      	cmp	r3, #255	; 0xff
 801e858:	d005      	beq.n	801e866 <dhcp_reboot+0x112>
    dhcp->tries++;
 801e85a:	69bb      	ldr	r3, [r7, #24]
 801e85c:	799b      	ldrb	r3, [r3, #6]
 801e85e:	3301      	adds	r3, #1
 801e860:	b2da      	uxtb	r2, r3
 801e862:	69bb      	ldr	r3, [r7, #24]
 801e864:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801e866:	69bb      	ldr	r3, [r7, #24]
 801e868:	799b      	ldrb	r3, [r3, #6]
 801e86a:	2b09      	cmp	r3, #9
 801e86c:	d80a      	bhi.n	801e884 <dhcp_reboot+0x130>
 801e86e:	69bb      	ldr	r3, [r7, #24]
 801e870:	799b      	ldrb	r3, [r3, #6]
 801e872:	b29b      	uxth	r3, r3
 801e874:	461a      	mov	r2, r3
 801e876:	0152      	lsls	r2, r2, #5
 801e878:	1ad2      	subs	r2, r2, r3
 801e87a:	0092      	lsls	r2, r2, #2
 801e87c:	4413      	add	r3, r2
 801e87e:	00db      	lsls	r3, r3, #3
 801e880:	b29b      	uxth	r3, r3
 801e882:	e001      	b.n	801e888 <dhcp_reboot+0x134>
 801e884:	f242 7310 	movw	r3, #10000	; 0x2710
 801e888:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801e88a:	89fb      	ldrh	r3, [r7, #14]
 801e88c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801e890:	4a0a      	ldr	r2, [pc, #40]	; (801e8bc <dhcp_reboot+0x168>)
 801e892:	fb82 1203 	smull	r1, r2, r2, r3
 801e896:	1152      	asrs	r2, r2, #5
 801e898:	17db      	asrs	r3, r3, #31
 801e89a:	1ad3      	subs	r3, r2, r3
 801e89c:	b29a      	uxth	r2, r3
 801e89e:	69bb      	ldr	r3, [r7, #24]
 801e8a0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801e8a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e8a6:	4618      	mov	r0, r3
 801e8a8:	3720      	adds	r7, #32
 801e8aa:	46bd      	mov	sp, r7
 801e8ac:	bdb0      	pop	{r4, r5, r7, pc}
 801e8ae:	bf00      	nop
 801e8b0:	20000034 	.word	0x20000034
 801e8b4:	200132b8 	.word	0x200132b8
 801e8b8:	0802af74 	.word	0x0802af74
 801e8bc:	10624dd3 	.word	0x10624dd3

0801e8c0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801e8c0:	b5b0      	push	{r4, r5, r7, lr}
 801e8c2:	b08a      	sub	sp, #40	; 0x28
 801e8c4:	af02      	add	r7, sp, #8
 801e8c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801e8c8:	687b      	ldr	r3, [r7, #4]
 801e8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e8cc:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801e8ce:	69fb      	ldr	r3, [r7, #28]
 801e8d0:	2b00      	cmp	r3, #0
 801e8d2:	f000 8084 	beq.w	801e9de <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801e8d6:	69fb      	ldr	r3, [r7, #28]
 801e8d8:	795b      	ldrb	r3, [r3, #5]
 801e8da:	2b00      	cmp	r3, #0
 801e8dc:	f000 8081 	beq.w	801e9e2 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801e8e0:	69fb      	ldr	r3, [r7, #28]
 801e8e2:	699b      	ldr	r3, [r3, #24]
 801e8e4:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801e8e6:	69fb      	ldr	r3, [r7, #28]
 801e8e8:	2200      	movs	r2, #0
 801e8ea:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801e8ec:	69fb      	ldr	r3, [r7, #28]
 801e8ee:	2200      	movs	r2, #0
 801e8f0:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801e8f2:	69fb      	ldr	r3, [r7, #28]
 801e8f4:	2200      	movs	r2, #0
 801e8f6:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801e8f8:	69fb      	ldr	r3, [r7, #28]
 801e8fa:	2200      	movs	r2, #0
 801e8fc:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801e8fe:	69fb      	ldr	r3, [r7, #28]
 801e900:	2200      	movs	r2, #0
 801e902:	631a      	str	r2, [r3, #48]	; 0x30
 801e904:	69fb      	ldr	r3, [r7, #28]
 801e906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801e908:	69fb      	ldr	r3, [r7, #28]
 801e90a:	62da      	str	r2, [r3, #44]	; 0x2c
 801e90c:	69fb      	ldr	r3, [r7, #28]
 801e90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e910:	69fb      	ldr	r3, [r7, #28]
 801e912:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801e914:	69fb      	ldr	r3, [r7, #28]
 801e916:	2200      	movs	r2, #0
 801e918:	829a      	strh	r2, [r3, #20]
 801e91a:	69fb      	ldr	r3, [r7, #28]
 801e91c:	8a9a      	ldrh	r2, [r3, #20]
 801e91e:	69fb      	ldr	r3, [r7, #28]
 801e920:	825a      	strh	r2, [r3, #18]
 801e922:	69fb      	ldr	r3, [r7, #28]
 801e924:	8a5a      	ldrh	r2, [r3, #18]
 801e926:	69fb      	ldr	r3, [r7, #28]
 801e928:	821a      	strh	r2, [r3, #16]
 801e92a:	69fb      	ldr	r3, [r7, #28]
 801e92c:	8a1a      	ldrh	r2, [r3, #16]
 801e92e:	69fb      	ldr	r3, [r7, #28]
 801e930:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801e932:	6878      	ldr	r0, [r7, #4]
 801e934:	f000 fdee 	bl	801f514 <dhcp_supplied_address>
 801e938:	4603      	mov	r3, r0
 801e93a:	2b00      	cmp	r3, #0
 801e93c:	d03b      	beq.n	801e9b6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801e93e:	f107 030e 	add.w	r3, r7, #14
 801e942:	2207      	movs	r2, #7
 801e944:	69f9      	ldr	r1, [r7, #28]
 801e946:	6878      	ldr	r0, [r7, #4]
 801e948:	f000 fce0 	bl	801f30c <dhcp_create_msg>
 801e94c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801e94e:	69bb      	ldr	r3, [r7, #24]
 801e950:	2b00      	cmp	r3, #0
 801e952:	d030      	beq.n	801e9b6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801e954:	69bb      	ldr	r3, [r7, #24]
 801e956:	685b      	ldr	r3, [r3, #4]
 801e958:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801e95a:	89f8      	ldrh	r0, [r7, #14]
 801e95c:	697b      	ldr	r3, [r7, #20]
 801e95e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e962:	2304      	movs	r3, #4
 801e964:	2236      	movs	r2, #54	; 0x36
 801e966:	f000 f85f 	bl	801ea28 <dhcp_option>
 801e96a:	4603      	mov	r3, r0
 801e96c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801e96e:	89fc      	ldrh	r4, [r7, #14]
 801e970:	697b      	ldr	r3, [r7, #20]
 801e972:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801e976:	693b      	ldr	r3, [r7, #16]
 801e978:	4618      	mov	r0, r3
 801e97a:	f7f6 f99e 	bl	8014cba <lwip_htonl>
 801e97e:	4603      	mov	r3, r0
 801e980:	461a      	mov	r2, r3
 801e982:	4629      	mov	r1, r5
 801e984:	4620      	mov	r0, r4
 801e986:	f000 f8db 	bl	801eb40 <dhcp_option_long>
 801e98a:	4603      	mov	r3, r0
 801e98c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801e98e:	89f8      	ldrh	r0, [r7, #14]
 801e990:	697b      	ldr	r3, [r7, #20]
 801e992:	33f0      	adds	r3, #240	; 0xf0
 801e994:	69ba      	ldr	r2, [r7, #24]
 801e996:	4619      	mov	r1, r3
 801e998:	f000 fd8e 	bl	801f4b8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801e99c:	4b13      	ldr	r3, [pc, #76]	; (801e9ec <dhcp_release_and_stop+0x12c>)
 801e99e:	6818      	ldr	r0, [r3, #0]
 801e9a0:	f107 0210 	add.w	r2, r7, #16
 801e9a4:	687b      	ldr	r3, [r7, #4]
 801e9a6:	9300      	str	r3, [sp, #0]
 801e9a8:	2343      	movs	r3, #67	; 0x43
 801e9aa:	69b9      	ldr	r1, [r7, #24]
 801e9ac:	f7fe fc34 	bl	801d218 <udp_sendto_if>
      pbuf_free(p_out);
 801e9b0:	69b8      	ldr	r0, [r7, #24]
 801e9b2:	f7f7 fd6b 	bl	801648c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801e9b6:	4b0e      	ldr	r3, [pc, #56]	; (801e9f0 <dhcp_release_and_stop+0x130>)
 801e9b8:	4a0d      	ldr	r2, [pc, #52]	; (801e9f0 <dhcp_release_and_stop+0x130>)
 801e9ba:	490d      	ldr	r1, [pc, #52]	; (801e9f0 <dhcp_release_and_stop+0x130>)
 801e9bc:	6878      	ldr	r0, [r7, #4]
 801e9be:	f7f7 f857 	bl	8015a70 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801e9c2:	2100      	movs	r1, #0
 801e9c4:	69f8      	ldr	r0, [r7, #28]
 801e9c6:	f000 f815 	bl	801e9f4 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801e9ca:	69fb      	ldr	r3, [r7, #28]
 801e9cc:	791b      	ldrb	r3, [r3, #4]
 801e9ce:	2b00      	cmp	r3, #0
 801e9d0:	d008      	beq.n	801e9e4 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801e9d2:	f7fe ff85 	bl	801d8e0 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801e9d6:	69fb      	ldr	r3, [r7, #28]
 801e9d8:	2200      	movs	r2, #0
 801e9da:	711a      	strb	r2, [r3, #4]
 801e9dc:	e002      	b.n	801e9e4 <dhcp_release_and_stop+0x124>
    return;
 801e9de:	bf00      	nop
 801e9e0:	e000      	b.n	801e9e4 <dhcp_release_and_stop+0x124>
    return;
 801e9e2:	bf00      	nop
  }
}
 801e9e4:	3720      	adds	r7, #32
 801e9e6:	46bd      	mov	sp, r7
 801e9e8:	bdb0      	pop	{r4, r5, r7, pc}
 801e9ea:	bf00      	nop
 801e9ec:	200132b8 	.word	0x200132b8
 801e9f0:	0802af70 	.word	0x0802af70

0801e9f4 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801e9f4:	b480      	push	{r7}
 801e9f6:	b083      	sub	sp, #12
 801e9f8:	af00      	add	r7, sp, #0
 801e9fa:	6078      	str	r0, [r7, #4]
 801e9fc:	460b      	mov	r3, r1
 801e9fe:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801ea00:	687b      	ldr	r3, [r7, #4]
 801ea02:	795b      	ldrb	r3, [r3, #5]
 801ea04:	78fa      	ldrb	r2, [r7, #3]
 801ea06:	429a      	cmp	r2, r3
 801ea08:	d008      	beq.n	801ea1c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801ea0a:	687b      	ldr	r3, [r7, #4]
 801ea0c:	78fa      	ldrb	r2, [r7, #3]
 801ea0e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801ea10:	687b      	ldr	r3, [r7, #4]
 801ea12:	2200      	movs	r2, #0
 801ea14:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801ea16:	687b      	ldr	r3, [r7, #4]
 801ea18:	2200      	movs	r2, #0
 801ea1a:	811a      	strh	r2, [r3, #8]
  }
}
 801ea1c:	bf00      	nop
 801ea1e:	370c      	adds	r7, #12
 801ea20:	46bd      	mov	sp, r7
 801ea22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea26:	4770      	bx	lr

0801ea28 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801ea28:	b580      	push	{r7, lr}
 801ea2a:	b082      	sub	sp, #8
 801ea2c:	af00      	add	r7, sp, #0
 801ea2e:	6039      	str	r1, [r7, #0]
 801ea30:	4611      	mov	r1, r2
 801ea32:	461a      	mov	r2, r3
 801ea34:	4603      	mov	r3, r0
 801ea36:	80fb      	strh	r3, [r7, #6]
 801ea38:	460b      	mov	r3, r1
 801ea3a:	717b      	strb	r3, [r7, #5]
 801ea3c:	4613      	mov	r3, r2
 801ea3e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801ea40:	88fa      	ldrh	r2, [r7, #6]
 801ea42:	793b      	ldrb	r3, [r7, #4]
 801ea44:	4413      	add	r3, r2
 801ea46:	3302      	adds	r3, #2
 801ea48:	2b44      	cmp	r3, #68	; 0x44
 801ea4a:	d906      	bls.n	801ea5a <dhcp_option+0x32>
 801ea4c:	4b0d      	ldr	r3, [pc, #52]	; (801ea84 <dhcp_option+0x5c>)
 801ea4e:	f240 529a 	movw	r2, #1434	; 0x59a
 801ea52:	490d      	ldr	r1, [pc, #52]	; (801ea88 <dhcp_option+0x60>)
 801ea54:	480d      	ldr	r0, [pc, #52]	; (801ea8c <dhcp_option+0x64>)
 801ea56:	f005 fabf 	bl	8023fd8 <iprintf>
  options[options_out_len++] = option_type;
 801ea5a:	88fb      	ldrh	r3, [r7, #6]
 801ea5c:	1c5a      	adds	r2, r3, #1
 801ea5e:	80fa      	strh	r2, [r7, #6]
 801ea60:	461a      	mov	r2, r3
 801ea62:	683b      	ldr	r3, [r7, #0]
 801ea64:	4413      	add	r3, r2
 801ea66:	797a      	ldrb	r2, [r7, #5]
 801ea68:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801ea6a:	88fb      	ldrh	r3, [r7, #6]
 801ea6c:	1c5a      	adds	r2, r3, #1
 801ea6e:	80fa      	strh	r2, [r7, #6]
 801ea70:	461a      	mov	r2, r3
 801ea72:	683b      	ldr	r3, [r7, #0]
 801ea74:	4413      	add	r3, r2
 801ea76:	793a      	ldrb	r2, [r7, #4]
 801ea78:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801ea7a:	88fb      	ldrh	r3, [r7, #6]
}
 801ea7c:	4618      	mov	r0, r3
 801ea7e:	3708      	adds	r7, #8
 801ea80:	46bd      	mov	sp, r7
 801ea82:	bd80      	pop	{r7, pc}
 801ea84:	0802a26c 	.word	0x0802a26c
 801ea88:	0802a400 	.word	0x0802a400
 801ea8c:	0802a2cc 	.word	0x0802a2cc

0801ea90 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801ea90:	b580      	push	{r7, lr}
 801ea92:	b082      	sub	sp, #8
 801ea94:	af00      	add	r7, sp, #0
 801ea96:	4603      	mov	r3, r0
 801ea98:	6039      	str	r1, [r7, #0]
 801ea9a:	80fb      	strh	r3, [r7, #6]
 801ea9c:	4613      	mov	r3, r2
 801ea9e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801eaa0:	88fb      	ldrh	r3, [r7, #6]
 801eaa2:	2b43      	cmp	r3, #67	; 0x43
 801eaa4:	d906      	bls.n	801eab4 <dhcp_option_byte+0x24>
 801eaa6:	4b0a      	ldr	r3, [pc, #40]	; (801ead0 <dhcp_option_byte+0x40>)
 801eaa8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801eaac:	4909      	ldr	r1, [pc, #36]	; (801ead4 <dhcp_option_byte+0x44>)
 801eaae:	480a      	ldr	r0, [pc, #40]	; (801ead8 <dhcp_option_byte+0x48>)
 801eab0:	f005 fa92 	bl	8023fd8 <iprintf>
  options[options_out_len++] = value;
 801eab4:	88fb      	ldrh	r3, [r7, #6]
 801eab6:	1c5a      	adds	r2, r3, #1
 801eab8:	80fa      	strh	r2, [r7, #6]
 801eaba:	461a      	mov	r2, r3
 801eabc:	683b      	ldr	r3, [r7, #0]
 801eabe:	4413      	add	r3, r2
 801eac0:	797a      	ldrb	r2, [r7, #5]
 801eac2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801eac4:	88fb      	ldrh	r3, [r7, #6]
}
 801eac6:	4618      	mov	r0, r3
 801eac8:	3708      	adds	r7, #8
 801eaca:	46bd      	mov	sp, r7
 801eacc:	bd80      	pop	{r7, pc}
 801eace:	bf00      	nop
 801ead0:	0802a26c 	.word	0x0802a26c
 801ead4:	0802a444 	.word	0x0802a444
 801ead8:	0802a2cc 	.word	0x0802a2cc

0801eadc <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801eadc:	b580      	push	{r7, lr}
 801eade:	b082      	sub	sp, #8
 801eae0:	af00      	add	r7, sp, #0
 801eae2:	4603      	mov	r3, r0
 801eae4:	6039      	str	r1, [r7, #0]
 801eae6:	80fb      	strh	r3, [r7, #6]
 801eae8:	4613      	mov	r3, r2
 801eaea:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801eaec:	88fb      	ldrh	r3, [r7, #6]
 801eaee:	3302      	adds	r3, #2
 801eaf0:	2b44      	cmp	r3, #68	; 0x44
 801eaf2:	d906      	bls.n	801eb02 <dhcp_option_short+0x26>
 801eaf4:	4b0f      	ldr	r3, [pc, #60]	; (801eb34 <dhcp_option_short+0x58>)
 801eaf6:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801eafa:	490f      	ldr	r1, [pc, #60]	; (801eb38 <dhcp_option_short+0x5c>)
 801eafc:	480f      	ldr	r0, [pc, #60]	; (801eb3c <dhcp_option_short+0x60>)
 801eafe:	f005 fa6b 	bl	8023fd8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801eb02:	88bb      	ldrh	r3, [r7, #4]
 801eb04:	0a1b      	lsrs	r3, r3, #8
 801eb06:	b29a      	uxth	r2, r3
 801eb08:	88fb      	ldrh	r3, [r7, #6]
 801eb0a:	1c59      	adds	r1, r3, #1
 801eb0c:	80f9      	strh	r1, [r7, #6]
 801eb0e:	4619      	mov	r1, r3
 801eb10:	683b      	ldr	r3, [r7, #0]
 801eb12:	440b      	add	r3, r1
 801eb14:	b2d2      	uxtb	r2, r2
 801eb16:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801eb18:	88fb      	ldrh	r3, [r7, #6]
 801eb1a:	1c5a      	adds	r2, r3, #1
 801eb1c:	80fa      	strh	r2, [r7, #6]
 801eb1e:	461a      	mov	r2, r3
 801eb20:	683b      	ldr	r3, [r7, #0]
 801eb22:	4413      	add	r3, r2
 801eb24:	88ba      	ldrh	r2, [r7, #4]
 801eb26:	b2d2      	uxtb	r2, r2
 801eb28:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801eb2a:	88fb      	ldrh	r3, [r7, #6]
}
 801eb2c:	4618      	mov	r0, r3
 801eb2e:	3708      	adds	r7, #8
 801eb30:	46bd      	mov	sp, r7
 801eb32:	bd80      	pop	{r7, pc}
 801eb34:	0802a26c 	.word	0x0802a26c
 801eb38:	0802a47c 	.word	0x0802a47c
 801eb3c:	0802a2cc 	.word	0x0802a2cc

0801eb40 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801eb40:	b580      	push	{r7, lr}
 801eb42:	b084      	sub	sp, #16
 801eb44:	af00      	add	r7, sp, #0
 801eb46:	4603      	mov	r3, r0
 801eb48:	60b9      	str	r1, [r7, #8]
 801eb4a:	607a      	str	r2, [r7, #4]
 801eb4c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801eb4e:	89fb      	ldrh	r3, [r7, #14]
 801eb50:	3304      	adds	r3, #4
 801eb52:	2b44      	cmp	r3, #68	; 0x44
 801eb54:	d906      	bls.n	801eb64 <dhcp_option_long+0x24>
 801eb56:	4b19      	ldr	r3, [pc, #100]	; (801ebbc <dhcp_option_long+0x7c>)
 801eb58:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801eb5c:	4918      	ldr	r1, [pc, #96]	; (801ebc0 <dhcp_option_long+0x80>)
 801eb5e:	4819      	ldr	r0, [pc, #100]	; (801ebc4 <dhcp_option_long+0x84>)
 801eb60:	f005 fa3a 	bl	8023fd8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801eb64:	687b      	ldr	r3, [r7, #4]
 801eb66:	0e1a      	lsrs	r2, r3, #24
 801eb68:	89fb      	ldrh	r3, [r7, #14]
 801eb6a:	1c59      	adds	r1, r3, #1
 801eb6c:	81f9      	strh	r1, [r7, #14]
 801eb6e:	4619      	mov	r1, r3
 801eb70:	68bb      	ldr	r3, [r7, #8]
 801eb72:	440b      	add	r3, r1
 801eb74:	b2d2      	uxtb	r2, r2
 801eb76:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801eb78:	687b      	ldr	r3, [r7, #4]
 801eb7a:	0c1a      	lsrs	r2, r3, #16
 801eb7c:	89fb      	ldrh	r3, [r7, #14]
 801eb7e:	1c59      	adds	r1, r3, #1
 801eb80:	81f9      	strh	r1, [r7, #14]
 801eb82:	4619      	mov	r1, r3
 801eb84:	68bb      	ldr	r3, [r7, #8]
 801eb86:	440b      	add	r3, r1
 801eb88:	b2d2      	uxtb	r2, r2
 801eb8a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801eb8c:	687b      	ldr	r3, [r7, #4]
 801eb8e:	0a1a      	lsrs	r2, r3, #8
 801eb90:	89fb      	ldrh	r3, [r7, #14]
 801eb92:	1c59      	adds	r1, r3, #1
 801eb94:	81f9      	strh	r1, [r7, #14]
 801eb96:	4619      	mov	r1, r3
 801eb98:	68bb      	ldr	r3, [r7, #8]
 801eb9a:	440b      	add	r3, r1
 801eb9c:	b2d2      	uxtb	r2, r2
 801eb9e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801eba0:	89fb      	ldrh	r3, [r7, #14]
 801eba2:	1c5a      	adds	r2, r3, #1
 801eba4:	81fa      	strh	r2, [r7, #14]
 801eba6:	461a      	mov	r2, r3
 801eba8:	68bb      	ldr	r3, [r7, #8]
 801ebaa:	4413      	add	r3, r2
 801ebac:	687a      	ldr	r2, [r7, #4]
 801ebae:	b2d2      	uxtb	r2, r2
 801ebb0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801ebb2:	89fb      	ldrh	r3, [r7, #14]
}
 801ebb4:	4618      	mov	r0, r3
 801ebb6:	3710      	adds	r7, #16
 801ebb8:	46bd      	mov	sp, r7
 801ebba:	bd80      	pop	{r7, pc}
 801ebbc:	0802a26c 	.word	0x0802a26c
 801ebc0:	0802a4b8 	.word	0x0802a4b8
 801ebc4:	0802a2cc 	.word	0x0802a2cc

0801ebc8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801ebc8:	b580      	push	{r7, lr}
 801ebca:	b090      	sub	sp, #64	; 0x40
 801ebcc:	af00      	add	r7, sp, #0
 801ebce:	6078      	str	r0, [r7, #4]
 801ebd0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801ebd2:	2300      	movs	r3, #0
 801ebd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801ebd6:	2300      	movs	r3, #0
 801ebd8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801ebda:	2208      	movs	r2, #8
 801ebdc:	2100      	movs	r1, #0
 801ebde:	48b5      	ldr	r0, [pc, #724]	; (801eeb4 <dhcp_parse_reply+0x2ec>)
 801ebe0:	f005 fbbe 	bl	8024360 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801ebe4:	687b      	ldr	r3, [r7, #4]
 801ebe6:	895b      	ldrh	r3, [r3, #10]
 801ebe8:	2b2b      	cmp	r3, #43	; 0x2b
 801ebea:	d802      	bhi.n	801ebf2 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801ebec:	f06f 0301 	mvn.w	r3, #1
 801ebf0:	e2a7      	b.n	801f142 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801ebf2:	687b      	ldr	r3, [r7, #4]
 801ebf4:	685b      	ldr	r3, [r3, #4]
 801ebf6:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801ebf8:	23f0      	movs	r3, #240	; 0xf0
 801ebfa:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801ebfc:	687b      	ldr	r3, [r7, #4]
 801ebfe:	891b      	ldrh	r3, [r3, #8]
 801ec00:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801ec02:	687b      	ldr	r3, [r7, #4]
 801ec04:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801ec06:	e00c      	b.n	801ec22 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801ec08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec0a:	895b      	ldrh	r3, [r3, #10]
 801ec0c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801ec0e:	1ad3      	subs	r3, r2, r3
 801ec10:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801ec12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec14:	895b      	ldrh	r3, [r3, #10]
 801ec16:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801ec18:	1ad3      	subs	r3, r2, r3
 801ec1a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801ec1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec1e:	681b      	ldr	r3, [r3, #0]
 801ec20:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801ec22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec24:	2b00      	cmp	r3, #0
 801ec26:	d004      	beq.n	801ec32 <dhcp_parse_reply+0x6a>
 801ec28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec2a:	895b      	ldrh	r3, [r3, #10]
 801ec2c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801ec2e:	429a      	cmp	r2, r3
 801ec30:	d2ea      	bcs.n	801ec08 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801ec32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec34:	2b00      	cmp	r3, #0
 801ec36:	d102      	bne.n	801ec3e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801ec38:	f06f 0301 	mvn.w	r3, #1
 801ec3c:	e281      	b.n	801f142 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801ec3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801ec40:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801ec42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801ec44:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801ec46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec48:	685b      	ldr	r3, [r3, #4]
 801ec4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801ec4c:	e239      	b.n	801f0c2 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801ec4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ec50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ec52:	4413      	add	r3, r2
 801ec54:	781b      	ldrb	r3, [r3, #0]
 801ec56:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801ec58:	2300      	movs	r3, #0
 801ec5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801ec5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ec62:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801ec64:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ec66:	3302      	adds	r3, #2
 801ec68:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801ec6a:	8bfa      	ldrh	r2, [r7, #30]
 801ec6c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ec6e:	429a      	cmp	r2, r3
 801ec70:	d202      	bcs.n	801ec78 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801ec72:	f06f 0301 	mvn.w	r3, #1
 801ec76:	e264      	b.n	801f142 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801ec78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ec7a:	3301      	adds	r3, #1
 801ec7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ec7e:	8952      	ldrh	r2, [r2, #10]
 801ec80:	4293      	cmp	r3, r2
 801ec82:	da07      	bge.n	801ec94 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801ec84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ec86:	3301      	adds	r3, #1
 801ec88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ec8a:	4413      	add	r3, r2
 801ec8c:	781b      	ldrb	r3, [r3, #0]
 801ec8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ec92:	e00b      	b.n	801ecac <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801ec94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec96:	681b      	ldr	r3, [r3, #0]
 801ec98:	2b00      	cmp	r3, #0
 801ec9a:	d004      	beq.n	801eca6 <dhcp_parse_reply+0xde>
 801ec9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec9e:	681b      	ldr	r3, [r3, #0]
 801eca0:	685b      	ldr	r3, [r3, #4]
 801eca2:	781b      	ldrb	r3, [r3, #0]
 801eca4:	e000      	b.n	801eca8 <dhcp_parse_reply+0xe0>
 801eca6:	2300      	movs	r3, #0
 801eca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801ecac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ecb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801ecb4:	7dfb      	ldrb	r3, [r7, #23]
 801ecb6:	2b3b      	cmp	r3, #59	; 0x3b
 801ecb8:	f200 812c 	bhi.w	801ef14 <dhcp_parse_reply+0x34c>
 801ecbc:	a201      	add	r2, pc, #4	; (adr r2, 801ecc4 <dhcp_parse_reply+0xfc>)
 801ecbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ecc2:	bf00      	nop
 801ecc4:	0801edb5 	.word	0x0801edb5
 801ecc8:	0801edc5 	.word	0x0801edc5
 801eccc:	0801ef15 	.word	0x0801ef15
 801ecd0:	0801ede7 	.word	0x0801ede7
 801ecd4:	0801ef15 	.word	0x0801ef15
 801ecd8:	0801ef15 	.word	0x0801ef15
 801ecdc:	0801ef15 	.word	0x0801ef15
 801ece0:	0801ef15 	.word	0x0801ef15
 801ece4:	0801ef15 	.word	0x0801ef15
 801ece8:	0801ef15 	.word	0x0801ef15
 801ecec:	0801ef15 	.word	0x0801ef15
 801ecf0:	0801ef15 	.word	0x0801ef15
 801ecf4:	0801ef15 	.word	0x0801ef15
 801ecf8:	0801ef15 	.word	0x0801ef15
 801ecfc:	0801ef15 	.word	0x0801ef15
 801ed00:	0801ef15 	.word	0x0801ef15
 801ed04:	0801ef15 	.word	0x0801ef15
 801ed08:	0801ef15 	.word	0x0801ef15
 801ed0c:	0801ef15 	.word	0x0801ef15
 801ed10:	0801ef15 	.word	0x0801ef15
 801ed14:	0801ef15 	.word	0x0801ef15
 801ed18:	0801ef15 	.word	0x0801ef15
 801ed1c:	0801ef15 	.word	0x0801ef15
 801ed20:	0801ef15 	.word	0x0801ef15
 801ed24:	0801ef15 	.word	0x0801ef15
 801ed28:	0801ef15 	.word	0x0801ef15
 801ed2c:	0801ef15 	.word	0x0801ef15
 801ed30:	0801ef15 	.word	0x0801ef15
 801ed34:	0801ef15 	.word	0x0801ef15
 801ed38:	0801ef15 	.word	0x0801ef15
 801ed3c:	0801ef15 	.word	0x0801ef15
 801ed40:	0801ef15 	.word	0x0801ef15
 801ed44:	0801ef15 	.word	0x0801ef15
 801ed48:	0801ef15 	.word	0x0801ef15
 801ed4c:	0801ef15 	.word	0x0801ef15
 801ed50:	0801ef15 	.word	0x0801ef15
 801ed54:	0801ef15 	.word	0x0801ef15
 801ed58:	0801ef15 	.word	0x0801ef15
 801ed5c:	0801ef15 	.word	0x0801ef15
 801ed60:	0801ef15 	.word	0x0801ef15
 801ed64:	0801ef15 	.word	0x0801ef15
 801ed68:	0801ef15 	.word	0x0801ef15
 801ed6c:	0801ef15 	.word	0x0801ef15
 801ed70:	0801ef15 	.word	0x0801ef15
 801ed74:	0801ef15 	.word	0x0801ef15
 801ed78:	0801ef15 	.word	0x0801ef15
 801ed7c:	0801ef15 	.word	0x0801ef15
 801ed80:	0801ef15 	.word	0x0801ef15
 801ed84:	0801ef15 	.word	0x0801ef15
 801ed88:	0801ef15 	.word	0x0801ef15
 801ed8c:	0801ef15 	.word	0x0801ef15
 801ed90:	0801ee13 	.word	0x0801ee13
 801ed94:	0801ee35 	.word	0x0801ee35
 801ed98:	0801ee71 	.word	0x0801ee71
 801ed9c:	0801ee93 	.word	0x0801ee93
 801eda0:	0801ef15 	.word	0x0801ef15
 801eda4:	0801ef15 	.word	0x0801ef15
 801eda8:	0801ef15 	.word	0x0801ef15
 801edac:	0801eed1 	.word	0x0801eed1
 801edb0:	0801eef3 	.word	0x0801eef3
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801edb4:	2300      	movs	r3, #0
 801edb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801edba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801edbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801edc2:	e0ab      	b.n	801ef1c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801edc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801edc8:	2b04      	cmp	r3, #4
 801edca:	d009      	beq.n	801ede0 <dhcp_parse_reply+0x218>
 801edcc:	4b3a      	ldr	r3, [pc, #232]	; (801eeb8 <dhcp_parse_reply+0x2f0>)
 801edce:	f240 622e 	movw	r2, #1582	; 0x62e
 801edd2:	493a      	ldr	r1, [pc, #232]	; (801eebc <dhcp_parse_reply+0x2f4>)
 801edd4:	483a      	ldr	r0, [pc, #232]	; (801eec0 <dhcp_parse_reply+0x2f8>)
 801edd6:	f005 f8ff 	bl	8023fd8 <iprintf>
 801edda:	f06f 0305 	mvn.w	r3, #5
 801edde:	e1b0      	b.n	801f142 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801ede0:	2306      	movs	r3, #6
 801ede2:	623b      	str	r3, [r7, #32]
        break;
 801ede4:	e09a      	b.n	801ef1c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801ede6:	2304      	movs	r3, #4
 801ede8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801edec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801edf0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801edf4:	429a      	cmp	r2, r3
 801edf6:	d209      	bcs.n	801ee0c <dhcp_parse_reply+0x244>
 801edf8:	4b2f      	ldr	r3, [pc, #188]	; (801eeb8 <dhcp_parse_reply+0x2f0>)
 801edfa:	f240 6233 	movw	r2, #1587	; 0x633
 801edfe:	4931      	ldr	r1, [pc, #196]	; (801eec4 <dhcp_parse_reply+0x2fc>)
 801ee00:	482f      	ldr	r0, [pc, #188]	; (801eec0 <dhcp_parse_reply+0x2f8>)
 801ee02:	f005 f8e9 	bl	8023fd8 <iprintf>
 801ee06:	f06f 0305 	mvn.w	r3, #5
 801ee0a:	e19a      	b.n	801f142 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801ee0c:	2307      	movs	r3, #7
 801ee0e:	623b      	str	r3, [r7, #32]
        break;
 801ee10:	e084      	b.n	801ef1c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ee12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ee16:	2b04      	cmp	r3, #4
 801ee18:	d009      	beq.n	801ee2e <dhcp_parse_reply+0x266>
 801ee1a:	4b27      	ldr	r3, [pc, #156]	; (801eeb8 <dhcp_parse_reply+0x2f0>)
 801ee1c:	f240 6241 	movw	r2, #1601	; 0x641
 801ee20:	4926      	ldr	r1, [pc, #152]	; (801eebc <dhcp_parse_reply+0x2f4>)
 801ee22:	4827      	ldr	r0, [pc, #156]	; (801eec0 <dhcp_parse_reply+0x2f8>)
 801ee24:	f005 f8d8 	bl	8023fd8 <iprintf>
 801ee28:	f06f 0305 	mvn.w	r3, #5
 801ee2c:	e189      	b.n	801f142 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801ee2e:	2303      	movs	r3, #3
 801ee30:	623b      	str	r3, [r7, #32]
        break;
 801ee32:	e073      	b.n	801ef1c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801ee34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ee38:	2b01      	cmp	r3, #1
 801ee3a:	d009      	beq.n	801ee50 <dhcp_parse_reply+0x288>
 801ee3c:	4b1e      	ldr	r3, [pc, #120]	; (801eeb8 <dhcp_parse_reply+0x2f0>)
 801ee3e:	f240 624f 	movw	r2, #1615	; 0x64f
 801ee42:	4921      	ldr	r1, [pc, #132]	; (801eec8 <dhcp_parse_reply+0x300>)
 801ee44:	481e      	ldr	r0, [pc, #120]	; (801eec0 <dhcp_parse_reply+0x2f8>)
 801ee46:	f005 f8c7 	bl	8023fd8 <iprintf>
 801ee4a:	f06f 0305 	mvn.w	r3, #5
 801ee4e:	e178      	b.n	801f142 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801ee50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801ee52:	2bf0      	cmp	r3, #240	; 0xf0
 801ee54:	d009      	beq.n	801ee6a <dhcp_parse_reply+0x2a2>
 801ee56:	4b18      	ldr	r3, [pc, #96]	; (801eeb8 <dhcp_parse_reply+0x2f0>)
 801ee58:	f240 6251 	movw	r2, #1617	; 0x651
 801ee5c:	491b      	ldr	r1, [pc, #108]	; (801eecc <dhcp_parse_reply+0x304>)
 801ee5e:	4818      	ldr	r0, [pc, #96]	; (801eec0 <dhcp_parse_reply+0x2f8>)
 801ee60:	f005 f8ba 	bl	8023fd8 <iprintf>
 801ee64:	f06f 0305 	mvn.w	r3, #5
 801ee68:	e16b      	b.n	801f142 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801ee6a:	2300      	movs	r3, #0
 801ee6c:	623b      	str	r3, [r7, #32]
        break;
 801ee6e:	e055      	b.n	801ef1c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801ee70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ee74:	2b01      	cmp	r3, #1
 801ee76:	d009      	beq.n	801ee8c <dhcp_parse_reply+0x2c4>
 801ee78:	4b0f      	ldr	r3, [pc, #60]	; (801eeb8 <dhcp_parse_reply+0x2f0>)
 801ee7a:	f240 6255 	movw	r2, #1621	; 0x655
 801ee7e:	4912      	ldr	r1, [pc, #72]	; (801eec8 <dhcp_parse_reply+0x300>)
 801ee80:	480f      	ldr	r0, [pc, #60]	; (801eec0 <dhcp_parse_reply+0x2f8>)
 801ee82:	f005 f8a9 	bl	8023fd8 <iprintf>
 801ee86:	f06f 0305 	mvn.w	r3, #5
 801ee8a:	e15a      	b.n	801f142 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801ee8c:	2301      	movs	r3, #1
 801ee8e:	623b      	str	r3, [r7, #32]
        break;
 801ee90:	e044      	b.n	801ef1c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ee92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ee96:	2b04      	cmp	r3, #4
 801ee98:	d009      	beq.n	801eeae <dhcp_parse_reply+0x2e6>
 801ee9a:	4b07      	ldr	r3, [pc, #28]	; (801eeb8 <dhcp_parse_reply+0x2f0>)
 801ee9c:	f240 6259 	movw	r2, #1625	; 0x659
 801eea0:	4906      	ldr	r1, [pc, #24]	; (801eebc <dhcp_parse_reply+0x2f4>)
 801eea2:	4807      	ldr	r0, [pc, #28]	; (801eec0 <dhcp_parse_reply+0x2f8>)
 801eea4:	f005 f898 	bl	8023fd8 <iprintf>
 801eea8:	f06f 0305 	mvn.w	r3, #5
 801eeac:	e149      	b.n	801f142 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801eeae:	2302      	movs	r3, #2
 801eeb0:	623b      	str	r3, [r7, #32]
        break;
 801eeb2:	e033      	b.n	801ef1c <dhcp_parse_reply+0x354>
 801eeb4:	200132b0 	.word	0x200132b0
 801eeb8:	0802a26c 	.word	0x0802a26c
 801eebc:	0802a4f4 	.word	0x0802a4f4
 801eec0:	0802a2cc 	.word	0x0802a2cc
 801eec4:	0802a500 	.word	0x0802a500
 801eec8:	0802a514 	.word	0x0802a514
 801eecc:	0802a520 	.word	0x0802a520
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801eed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801eed4:	2b04      	cmp	r3, #4
 801eed6:	d009      	beq.n	801eeec <dhcp_parse_reply+0x324>
 801eed8:	4b9c      	ldr	r3, [pc, #624]	; (801f14c <dhcp_parse_reply+0x584>)
 801eeda:	f240 625d 	movw	r2, #1629	; 0x65d
 801eede:	499c      	ldr	r1, [pc, #624]	; (801f150 <dhcp_parse_reply+0x588>)
 801eee0:	489c      	ldr	r0, [pc, #624]	; (801f154 <dhcp_parse_reply+0x58c>)
 801eee2:	f005 f879 	bl	8023fd8 <iprintf>
 801eee6:	f06f 0305 	mvn.w	r3, #5
 801eeea:	e12a      	b.n	801f142 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 801eeec:	2304      	movs	r3, #4
 801eeee:	623b      	str	r3, [r7, #32]
        break;
 801eef0:	e014      	b.n	801ef1c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801eef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801eef6:	2b04      	cmp	r3, #4
 801eef8:	d009      	beq.n	801ef0e <dhcp_parse_reply+0x346>
 801eefa:	4b94      	ldr	r3, [pc, #592]	; (801f14c <dhcp_parse_reply+0x584>)
 801eefc:	f240 6261 	movw	r2, #1633	; 0x661
 801ef00:	4993      	ldr	r1, [pc, #588]	; (801f150 <dhcp_parse_reply+0x588>)
 801ef02:	4894      	ldr	r0, [pc, #592]	; (801f154 <dhcp_parse_reply+0x58c>)
 801ef04:	f005 f868 	bl	8023fd8 <iprintf>
 801ef08:	f06f 0305 	mvn.w	r3, #5
 801ef0c:	e119      	b.n	801f142 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801ef0e:	2305      	movs	r3, #5
 801ef10:	623b      	str	r3, [r7, #32]
        break;
 801ef12:	e003      	b.n	801ef1c <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 801ef14:	2300      	movs	r3, #0
 801ef16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801ef1a:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801ef1c:	7dfb      	ldrb	r3, [r7, #23]
 801ef1e:	2b00      	cmp	r3, #0
 801ef20:	d103      	bne.n	801ef2a <dhcp_parse_reply+0x362>
      offset++;
 801ef22:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ef24:	3301      	adds	r3, #1
 801ef26:	877b      	strh	r3, [r7, #58]	; 0x3a
 801ef28:	e0a1      	b.n	801f06e <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801ef2a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ef2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ef30:	4413      	add	r3, r2
 801ef32:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801ef36:	4293      	cmp	r3, r2
 801ef38:	dd02      	ble.n	801ef40 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801ef3a:	f06f 0301 	mvn.w	r3, #1
 801ef3e:	e100      	b.n	801f142 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 801ef40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ef44:	b29a      	uxth	r2, r3
 801ef46:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ef48:	4413      	add	r3, r2
 801ef4a:	b29b      	uxth	r3, r3
 801ef4c:	3302      	adds	r3, #2
 801ef4e:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801ef50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ef54:	2b00      	cmp	r3, #0
 801ef56:	f000 808a 	beq.w	801f06e <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801ef5a:	2300      	movs	r3, #0
 801ef5c:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801ef5e:	6a3b      	ldr	r3, [r7, #32]
 801ef60:	2b00      	cmp	r3, #0
 801ef62:	db02      	blt.n	801ef6a <dhcp_parse_reply+0x3a2>
 801ef64:	6a3b      	ldr	r3, [r7, #32]
 801ef66:	2b07      	cmp	r3, #7
 801ef68:	dd06      	ble.n	801ef78 <dhcp_parse_reply+0x3b0>
 801ef6a:	4b78      	ldr	r3, [pc, #480]	; (801f14c <dhcp_parse_reply+0x584>)
 801ef6c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801ef70:	4979      	ldr	r1, [pc, #484]	; (801f158 <dhcp_parse_reply+0x590>)
 801ef72:	4878      	ldr	r0, [pc, #480]	; (801f154 <dhcp_parse_reply+0x58c>)
 801ef74:	f005 f830 	bl	8023fd8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801ef78:	4a78      	ldr	r2, [pc, #480]	; (801f15c <dhcp_parse_reply+0x594>)
 801ef7a:	6a3b      	ldr	r3, [r7, #32]
 801ef7c:	4413      	add	r3, r2
 801ef7e:	781b      	ldrb	r3, [r3, #0]
 801ef80:	2b00      	cmp	r3, #0
 801ef82:	d174      	bne.n	801f06e <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 801ef84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ef88:	2b04      	cmp	r3, #4
 801ef8a:	bf28      	it	cs
 801ef8c:	2304      	movcs	r3, #4
 801ef8e:	b2db      	uxtb	r3, r3
 801ef90:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801ef92:	8bfb      	ldrh	r3, [r7, #30]
 801ef94:	8aba      	ldrh	r2, [r7, #20]
 801ef96:	f107 0108 	add.w	r1, r7, #8
 801ef9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ef9c:	f7f7 fc7c 	bl	8016898 <pbuf_copy_partial>
 801efa0:	4603      	mov	r3, r0
 801efa2:	461a      	mov	r2, r3
 801efa4:	8abb      	ldrh	r3, [r7, #20]
 801efa6:	4293      	cmp	r3, r2
 801efa8:	d002      	beq.n	801efb0 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801efaa:	f06f 0301 	mvn.w	r3, #1
 801efae:	e0c8      	b.n	801f142 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 801efb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801efb4:	2b04      	cmp	r3, #4
 801efb6:	d933      	bls.n	801f020 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801efb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801efbc:	f003 0303 	and.w	r3, r3, #3
 801efc0:	b2db      	uxtb	r3, r3
 801efc2:	2b00      	cmp	r3, #0
 801efc4:	d009      	beq.n	801efda <dhcp_parse_reply+0x412>
 801efc6:	4b61      	ldr	r3, [pc, #388]	; (801f14c <dhcp_parse_reply+0x584>)
 801efc8:	f240 6281 	movw	r2, #1665	; 0x681
 801efcc:	4964      	ldr	r1, [pc, #400]	; (801f160 <dhcp_parse_reply+0x598>)
 801efce:	4861      	ldr	r0, [pc, #388]	; (801f154 <dhcp_parse_reply+0x58c>)
 801efd0:	f005 f802 	bl	8023fd8 <iprintf>
 801efd4:	f06f 0305 	mvn.w	r3, #5
 801efd8:	e0b3      	b.n	801f142 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801efda:	4a60      	ldr	r2, [pc, #384]	; (801f15c <dhcp_parse_reply+0x594>)
 801efdc:	6a3b      	ldr	r3, [r7, #32]
 801efde:	4413      	add	r3, r2
 801efe0:	2201      	movs	r2, #1
 801efe2:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801efe4:	68bb      	ldr	r3, [r7, #8]
 801efe6:	4618      	mov	r0, r3
 801efe8:	f7f5 fe67 	bl	8014cba <lwip_htonl>
 801efec:	4602      	mov	r2, r0
 801efee:	495d      	ldr	r1, [pc, #372]	; (801f164 <dhcp_parse_reply+0x59c>)
 801eff0:	6a3b      	ldr	r3, [r7, #32]
 801eff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801eff6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801effa:	3b04      	subs	r3, #4
 801effc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801f000:	8bfb      	ldrh	r3, [r7, #30]
 801f002:	3304      	adds	r3, #4
 801f004:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801f006:	8a7a      	ldrh	r2, [r7, #18]
 801f008:	8bfb      	ldrh	r3, [r7, #30]
 801f00a:	429a      	cmp	r2, r3
 801f00c:	d202      	bcs.n	801f014 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801f00e:	f06f 0301 	mvn.w	r3, #1
 801f012:	e096      	b.n	801f142 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 801f014:	8a7b      	ldrh	r3, [r7, #18]
 801f016:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801f018:	6a3b      	ldr	r3, [r7, #32]
 801f01a:	3301      	adds	r3, #1
 801f01c:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801f01e:	e79e      	b.n	801ef5e <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 801f020:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801f024:	2b04      	cmp	r3, #4
 801f026:	d106      	bne.n	801f036 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 801f028:	68bb      	ldr	r3, [r7, #8]
 801f02a:	4618      	mov	r0, r3
 801f02c:	f7f5 fe45 	bl	8014cba <lwip_htonl>
 801f030:	4603      	mov	r3, r0
 801f032:	60bb      	str	r3, [r7, #8]
 801f034:	e011      	b.n	801f05a <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801f036:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801f03a:	2b01      	cmp	r3, #1
 801f03c:	d009      	beq.n	801f052 <dhcp_parse_reply+0x48a>
 801f03e:	4b43      	ldr	r3, [pc, #268]	; (801f14c <dhcp_parse_reply+0x584>)
 801f040:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801f044:	4948      	ldr	r1, [pc, #288]	; (801f168 <dhcp_parse_reply+0x5a0>)
 801f046:	4843      	ldr	r0, [pc, #268]	; (801f154 <dhcp_parse_reply+0x58c>)
 801f048:	f004 ffc6 	bl	8023fd8 <iprintf>
 801f04c:	f06f 0305 	mvn.w	r3, #5
 801f050:	e077      	b.n	801f142 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 801f052:	f107 0308 	add.w	r3, r7, #8
 801f056:	781b      	ldrb	r3, [r3, #0]
 801f058:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801f05a:	4a40      	ldr	r2, [pc, #256]	; (801f15c <dhcp_parse_reply+0x594>)
 801f05c:	6a3b      	ldr	r3, [r7, #32]
 801f05e:	4413      	add	r3, r2
 801f060:	2201      	movs	r2, #1
 801f062:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801f064:	68ba      	ldr	r2, [r7, #8]
 801f066:	493f      	ldr	r1, [pc, #252]	; (801f164 <dhcp_parse_reply+0x59c>)
 801f068:	6a3b      	ldr	r3, [r7, #32]
 801f06a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801f06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f070:	895b      	ldrh	r3, [r3, #10]
 801f072:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801f074:	429a      	cmp	r2, r3
 801f076:	d324      	bcc.n	801f0c2 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 801f078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f07a:	895b      	ldrh	r3, [r3, #10]
 801f07c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801f07e:	1ad3      	subs	r3, r2, r3
 801f080:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801f082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f084:	895b      	ldrh	r3, [r3, #10]
 801f086:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801f088:	1ad3      	subs	r3, r2, r3
 801f08a:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801f08c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801f08e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801f090:	429a      	cmp	r2, r3
 801f092:	d213      	bcs.n	801f0bc <dhcp_parse_reply+0x4f4>
        q = q->next;
 801f094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f096:	681b      	ldr	r3, [r3, #0]
 801f098:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801f09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f09c:	2b00      	cmp	r3, #0
 801f09e:	d109      	bne.n	801f0b4 <dhcp_parse_reply+0x4ec>
 801f0a0:	4b2a      	ldr	r3, [pc, #168]	; (801f14c <dhcp_parse_reply+0x584>)
 801f0a2:	f240 629d 	movw	r2, #1693	; 0x69d
 801f0a6:	4931      	ldr	r1, [pc, #196]	; (801f16c <dhcp_parse_reply+0x5a4>)
 801f0a8:	482a      	ldr	r0, [pc, #168]	; (801f154 <dhcp_parse_reply+0x58c>)
 801f0aa:	f004 ff95 	bl	8023fd8 <iprintf>
 801f0ae:	f06f 0305 	mvn.w	r3, #5
 801f0b2:	e046      	b.n	801f142 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 801f0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f0b6:	685b      	ldr	r3, [r3, #4]
 801f0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801f0ba:	e002      	b.n	801f0c2 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801f0bc:	f06f 0301 	mvn.w	r3, #1
 801f0c0:	e03f      	b.n	801f142 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801f0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f0c4:	2b00      	cmp	r3, #0
 801f0c6:	d00a      	beq.n	801f0de <dhcp_parse_reply+0x516>
 801f0c8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801f0ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801f0cc:	429a      	cmp	r2, r3
 801f0ce:	d206      	bcs.n	801f0de <dhcp_parse_reply+0x516>
 801f0d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801f0d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801f0d4:	4413      	add	r3, r2
 801f0d6:	781b      	ldrb	r3, [r3, #0]
 801f0d8:	2bff      	cmp	r3, #255	; 0xff
 801f0da:	f47f adb8 	bne.w	801ec4e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801f0de:	4b1f      	ldr	r3, [pc, #124]	; (801f15c <dhcp_parse_reply+0x594>)
 801f0e0:	781b      	ldrb	r3, [r3, #0]
 801f0e2:	2b00      	cmp	r3, #0
 801f0e4:	d018      	beq.n	801f118 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801f0e6:	4b1f      	ldr	r3, [pc, #124]	; (801f164 <dhcp_parse_reply+0x59c>)
 801f0e8:	681b      	ldr	r3, [r3, #0]
 801f0ea:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801f0ec:	4b1b      	ldr	r3, [pc, #108]	; (801f15c <dhcp_parse_reply+0x594>)
 801f0ee:	2200      	movs	r2, #0
 801f0f0:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801f0f2:	68fb      	ldr	r3, [r7, #12]
 801f0f4:	2b01      	cmp	r3, #1
 801f0f6:	d102      	bne.n	801f0fe <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 801f0f8:	2301      	movs	r3, #1
 801f0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f0fc:	e00c      	b.n	801f118 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801f0fe:	68fb      	ldr	r3, [r7, #12]
 801f100:	2b02      	cmp	r3, #2
 801f102:	d102      	bne.n	801f10a <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 801f104:	2301      	movs	r3, #1
 801f106:	62bb      	str	r3, [r7, #40]	; 0x28
 801f108:	e006      	b.n	801f118 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801f10a:	68fb      	ldr	r3, [r7, #12]
 801f10c:	2b03      	cmp	r3, #3
 801f10e:	d103      	bne.n	801f118 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 801f110:	2301      	movs	r3, #1
 801f112:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801f114:	2301      	movs	r3, #1
 801f116:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801f118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f11a:	2b00      	cmp	r3, #0
 801f11c:	d006      	beq.n	801f12c <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801f11e:	2300      	movs	r3, #0
 801f120:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801f122:	236c      	movs	r3, #108	; 0x6c
 801f124:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801f126:	23ec      	movs	r3, #236	; 0xec
 801f128:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801f12a:	e56a      	b.n	801ec02 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801f12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f12e:	2b00      	cmp	r3, #0
 801f130:	d006      	beq.n	801f140 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 801f132:	2300      	movs	r3, #0
 801f134:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801f136:	232c      	movs	r3, #44	; 0x2c
 801f138:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801f13a:	236c      	movs	r3, #108	; 0x6c
 801f13c:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801f13e:	e560      	b.n	801ec02 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801f140:	2300      	movs	r3, #0
}
 801f142:	4618      	mov	r0, r3
 801f144:	3740      	adds	r7, #64	; 0x40
 801f146:	46bd      	mov	sp, r7
 801f148:	bd80      	pop	{r7, pc}
 801f14a:	bf00      	nop
 801f14c:	0802a26c 	.word	0x0802a26c
 801f150:	0802a4f4 	.word	0x0802a4f4
 801f154:	0802a2cc 	.word	0x0802a2cc
 801f158:	0802a538 	.word	0x0802a538
 801f15c:	200132b0 	.word	0x200132b0
 801f160:	0802a54c 	.word	0x0802a54c
 801f164:	20013290 	.word	0x20013290
 801f168:	0802a564 	.word	0x0802a564
 801f16c:	0802a578 	.word	0x0802a578

0801f170 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801f170:	b580      	push	{r7, lr}
 801f172:	b08a      	sub	sp, #40	; 0x28
 801f174:	af00      	add	r7, sp, #0
 801f176:	60f8      	str	r0, [r7, #12]
 801f178:	60b9      	str	r1, [r7, #8]
 801f17a:	607a      	str	r2, [r7, #4]
 801f17c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801f17e:	4b60      	ldr	r3, [pc, #384]	; (801f300 <dhcp_recv+0x190>)
 801f180:	685b      	ldr	r3, [r3, #4]
 801f182:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801f184:	6a3b      	ldr	r3, [r7, #32]
 801f186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f188:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801f18a:	687b      	ldr	r3, [r7, #4]
 801f18c:	685b      	ldr	r3, [r3, #4]
 801f18e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801f190:	69fb      	ldr	r3, [r7, #28]
 801f192:	2b00      	cmp	r3, #0
 801f194:	f000 809d 	beq.w	801f2d2 <dhcp_recv+0x162>
 801f198:	69fb      	ldr	r3, [r7, #28]
 801f19a:	791b      	ldrb	r3, [r3, #4]
 801f19c:	2b00      	cmp	r3, #0
 801f19e:	f000 8098 	beq.w	801f2d2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801f1a2:	687b      	ldr	r3, [r7, #4]
 801f1a4:	895b      	ldrh	r3, [r3, #10]
 801f1a6:	2b2b      	cmp	r3, #43	; 0x2b
 801f1a8:	f240 8095 	bls.w	801f2d6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801f1ac:	69bb      	ldr	r3, [r7, #24]
 801f1ae:	781b      	ldrb	r3, [r3, #0]
 801f1b0:	2b02      	cmp	r3, #2
 801f1b2:	f040 8092 	bne.w	801f2da <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801f1b6:	2300      	movs	r3, #0
 801f1b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801f1bc:	e012      	b.n	801f1e4 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801f1be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f1c2:	6a3a      	ldr	r2, [r7, #32]
 801f1c4:	4413      	add	r3, r2
 801f1c6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801f1ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f1ce:	69b9      	ldr	r1, [r7, #24]
 801f1d0:	440b      	add	r3, r1
 801f1d2:	7f1b      	ldrb	r3, [r3, #28]
 801f1d4:	429a      	cmp	r2, r3
 801f1d6:	f040 8082 	bne.w	801f2de <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801f1da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f1de:	3301      	adds	r3, #1
 801f1e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801f1e4:	6a3b      	ldr	r3, [r7, #32]
 801f1e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801f1ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801f1ee:	429a      	cmp	r2, r3
 801f1f0:	d203      	bcs.n	801f1fa <dhcp_recv+0x8a>
 801f1f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f1f6:	2b05      	cmp	r3, #5
 801f1f8:	d9e1      	bls.n	801f1be <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801f1fa:	69bb      	ldr	r3, [r7, #24]
 801f1fc:	685b      	ldr	r3, [r3, #4]
 801f1fe:	4618      	mov	r0, r3
 801f200:	f7f5 fd5b 	bl	8014cba <lwip_htonl>
 801f204:	4602      	mov	r2, r0
 801f206:	69fb      	ldr	r3, [r7, #28]
 801f208:	681b      	ldr	r3, [r3, #0]
 801f20a:	429a      	cmp	r2, r3
 801f20c:	d169      	bne.n	801f2e2 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801f20e:	69f9      	ldr	r1, [r7, #28]
 801f210:	6878      	ldr	r0, [r7, #4]
 801f212:	f7ff fcd9 	bl	801ebc8 <dhcp_parse_reply>
 801f216:	4603      	mov	r3, r0
 801f218:	2b00      	cmp	r3, #0
 801f21a:	d164      	bne.n	801f2e6 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801f21c:	4b39      	ldr	r3, [pc, #228]	; (801f304 <dhcp_recv+0x194>)
 801f21e:	785b      	ldrb	r3, [r3, #1]
 801f220:	2b00      	cmp	r3, #0
 801f222:	d062      	beq.n	801f2ea <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801f224:	687b      	ldr	r3, [r7, #4]
 801f226:	685b      	ldr	r3, [r3, #4]
 801f228:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801f22a:	4b37      	ldr	r3, [pc, #220]	; (801f308 <dhcp_recv+0x198>)
 801f22c:	685b      	ldr	r3, [r3, #4]
 801f22e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801f230:	7cfb      	ldrb	r3, [r7, #19]
 801f232:	2b05      	cmp	r3, #5
 801f234:	d12a      	bne.n	801f28c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801f236:	69fb      	ldr	r3, [r7, #28]
 801f238:	795b      	ldrb	r3, [r3, #5]
 801f23a:	2b01      	cmp	r3, #1
 801f23c:	d112      	bne.n	801f264 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801f23e:	6979      	ldr	r1, [r7, #20]
 801f240:	6a38      	ldr	r0, [r7, #32]
 801f242:	f7fe fe17 	bl	801de74 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801f246:	6a3b      	ldr	r3, [r7, #32]
 801f248:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f24c:	f003 0308 	and.w	r3, r3, #8
 801f250:	2b00      	cmp	r3, #0
 801f252:	d003      	beq.n	801f25c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801f254:	6a38      	ldr	r0, [r7, #32]
 801f256:	f7fe fb87 	bl	801d968 <dhcp_check>
 801f25a:	e049      	b.n	801f2f0 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801f25c:	6a38      	ldr	r0, [r7, #32]
 801f25e:	f7ff f867 	bl	801e330 <dhcp_bind>
 801f262:	e045      	b.n	801f2f0 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801f264:	69fb      	ldr	r3, [r7, #28]
 801f266:	795b      	ldrb	r3, [r3, #5]
 801f268:	2b03      	cmp	r3, #3
 801f26a:	d007      	beq.n	801f27c <dhcp_recv+0x10c>
 801f26c:	69fb      	ldr	r3, [r7, #28]
 801f26e:	795b      	ldrb	r3, [r3, #5]
 801f270:	2b04      	cmp	r3, #4
 801f272:	d003      	beq.n	801f27c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801f274:	69fb      	ldr	r3, [r7, #28]
 801f276:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801f278:	2b05      	cmp	r3, #5
 801f27a:	d139      	bne.n	801f2f0 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801f27c:	6979      	ldr	r1, [r7, #20]
 801f27e:	6a38      	ldr	r0, [r7, #32]
 801f280:	f7fe fdf8 	bl	801de74 <dhcp_handle_ack>
      dhcp_bind(netif);
 801f284:	6a38      	ldr	r0, [r7, #32]
 801f286:	f7ff f853 	bl	801e330 <dhcp_bind>
 801f28a:	e031      	b.n	801f2f0 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801f28c:	7cfb      	ldrb	r3, [r7, #19]
 801f28e:	2b06      	cmp	r3, #6
 801f290:	d113      	bne.n	801f2ba <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801f292:	69fb      	ldr	r3, [r7, #28]
 801f294:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801f296:	2b03      	cmp	r3, #3
 801f298:	d00b      	beq.n	801f2b2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801f29a:	69fb      	ldr	r3, [r7, #28]
 801f29c:	795b      	ldrb	r3, [r3, #5]
 801f29e:	2b01      	cmp	r3, #1
 801f2a0:	d007      	beq.n	801f2b2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801f2a2:	69fb      	ldr	r3, [r7, #28]
 801f2a4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801f2a6:	2b04      	cmp	r3, #4
 801f2a8:	d003      	beq.n	801f2b2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801f2aa:	69fb      	ldr	r3, [r7, #28]
 801f2ac:	795b      	ldrb	r3, [r3, #5]
 801f2ae:	2b05      	cmp	r3, #5
 801f2b0:	d103      	bne.n	801f2ba <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801f2b2:	6a38      	ldr	r0, [r7, #32]
 801f2b4:	f7fe fb3e 	bl	801d934 <dhcp_handle_nak>
 801f2b8:	e01a      	b.n	801f2f0 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801f2ba:	7cfb      	ldrb	r3, [r7, #19]
 801f2bc:	2b02      	cmp	r3, #2
 801f2be:	d116      	bne.n	801f2ee <dhcp_recv+0x17e>
 801f2c0:	69fb      	ldr	r3, [r7, #28]
 801f2c2:	795b      	ldrb	r3, [r3, #5]
 801f2c4:	2b06      	cmp	r3, #6
 801f2c6:	d112      	bne.n	801f2ee <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801f2c8:	6979      	ldr	r1, [r7, #20]
 801f2ca:	6a38      	ldr	r0, [r7, #32]
 801f2cc:	f7fe fb80 	bl	801d9d0 <dhcp_handle_offer>
 801f2d0:	e00e      	b.n	801f2f0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801f2d2:	bf00      	nop
 801f2d4:	e00c      	b.n	801f2f0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801f2d6:	bf00      	nop
 801f2d8:	e00a      	b.n	801f2f0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801f2da:	bf00      	nop
 801f2dc:	e008      	b.n	801f2f0 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801f2de:	bf00      	nop
 801f2e0:	e006      	b.n	801f2f0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801f2e2:	bf00      	nop
 801f2e4:	e004      	b.n	801f2f0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801f2e6:	bf00      	nop
 801f2e8:	e002      	b.n	801f2f0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801f2ea:	bf00      	nop
 801f2ec:	e000      	b.n	801f2f0 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801f2ee:	bf00      	nop
  pbuf_free(p);
 801f2f0:	6878      	ldr	r0, [r7, #4]
 801f2f2:	f7f7 f8cb 	bl	801648c <pbuf_free>
}
 801f2f6:	bf00      	nop
 801f2f8:	3728      	adds	r7, #40	; 0x28
 801f2fa:	46bd      	mov	sp, r7
 801f2fc:	bd80      	pop	{r7, pc}
 801f2fe:	bf00      	nop
 801f300:	2000fa84 	.word	0x2000fa84
 801f304:	200132b0 	.word	0x200132b0
 801f308:	20013290 	.word	0x20013290

0801f30c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801f30c:	b580      	push	{r7, lr}
 801f30e:	b088      	sub	sp, #32
 801f310:	af00      	add	r7, sp, #0
 801f312:	60f8      	str	r0, [r7, #12]
 801f314:	60b9      	str	r1, [r7, #8]
 801f316:	603b      	str	r3, [r7, #0]
 801f318:	4613      	mov	r3, r2
 801f31a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801f31c:	68fb      	ldr	r3, [r7, #12]
 801f31e:	2b00      	cmp	r3, #0
 801f320:	d108      	bne.n	801f334 <dhcp_create_msg+0x28>
 801f322:	4b5f      	ldr	r3, [pc, #380]	; (801f4a0 <dhcp_create_msg+0x194>)
 801f324:	f240 7269 	movw	r2, #1897	; 0x769
 801f328:	495e      	ldr	r1, [pc, #376]	; (801f4a4 <dhcp_create_msg+0x198>)
 801f32a:	485f      	ldr	r0, [pc, #380]	; (801f4a8 <dhcp_create_msg+0x19c>)
 801f32c:	f004 fe54 	bl	8023fd8 <iprintf>
 801f330:	2300      	movs	r3, #0
 801f332:	e0b1      	b.n	801f498 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801f334:	68bb      	ldr	r3, [r7, #8]
 801f336:	2b00      	cmp	r3, #0
 801f338:	d108      	bne.n	801f34c <dhcp_create_msg+0x40>
 801f33a:	4b59      	ldr	r3, [pc, #356]	; (801f4a0 <dhcp_create_msg+0x194>)
 801f33c:	f240 726a 	movw	r2, #1898	; 0x76a
 801f340:	495a      	ldr	r1, [pc, #360]	; (801f4ac <dhcp_create_msg+0x1a0>)
 801f342:	4859      	ldr	r0, [pc, #356]	; (801f4a8 <dhcp_create_msg+0x19c>)
 801f344:	f004 fe48 	bl	8023fd8 <iprintf>
 801f348:	2300      	movs	r3, #0
 801f34a:	e0a5      	b.n	801f498 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801f34c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f350:	f44f 719a 	mov.w	r1, #308	; 0x134
 801f354:	2036      	movs	r0, #54	; 0x36
 801f356:	f7f6 fdb5 	bl	8015ec4 <pbuf_alloc>
 801f35a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801f35c:	69bb      	ldr	r3, [r7, #24]
 801f35e:	2b00      	cmp	r3, #0
 801f360:	d101      	bne.n	801f366 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801f362:	2300      	movs	r3, #0
 801f364:	e098      	b.n	801f498 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801f366:	69bb      	ldr	r3, [r7, #24]
 801f368:	895b      	ldrh	r3, [r3, #10]
 801f36a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801f36e:	d206      	bcs.n	801f37e <dhcp_create_msg+0x72>
 801f370:	4b4b      	ldr	r3, [pc, #300]	; (801f4a0 <dhcp_create_msg+0x194>)
 801f372:	f240 7271 	movw	r2, #1905	; 0x771
 801f376:	494e      	ldr	r1, [pc, #312]	; (801f4b0 <dhcp_create_msg+0x1a4>)
 801f378:	484b      	ldr	r0, [pc, #300]	; (801f4a8 <dhcp_create_msg+0x19c>)
 801f37a:	f004 fe2d 	bl	8023fd8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801f37e:	79fb      	ldrb	r3, [r7, #7]
 801f380:	2b03      	cmp	r3, #3
 801f382:	d103      	bne.n	801f38c <dhcp_create_msg+0x80>
 801f384:	68bb      	ldr	r3, [r7, #8]
 801f386:	795b      	ldrb	r3, [r3, #5]
 801f388:	2b03      	cmp	r3, #3
 801f38a:	d10d      	bne.n	801f3a8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801f38c:	68bb      	ldr	r3, [r7, #8]
 801f38e:	799b      	ldrb	r3, [r3, #6]
 801f390:	2b00      	cmp	r3, #0
 801f392:	d105      	bne.n	801f3a0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801f394:	f004 f8a8 	bl	80234e8 <rand>
 801f398:	4603      	mov	r3, r0
 801f39a:	461a      	mov	r2, r3
 801f39c:	4b45      	ldr	r3, [pc, #276]	; (801f4b4 <dhcp_create_msg+0x1a8>)
 801f39e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801f3a0:	4b44      	ldr	r3, [pc, #272]	; (801f4b4 <dhcp_create_msg+0x1a8>)
 801f3a2:	681a      	ldr	r2, [r3, #0]
 801f3a4:	68bb      	ldr	r3, [r7, #8]
 801f3a6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801f3a8:	69bb      	ldr	r3, [r7, #24]
 801f3aa:	685b      	ldr	r3, [r3, #4]
 801f3ac:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801f3ae:	f44f 729a 	mov.w	r2, #308	; 0x134
 801f3b2:	2100      	movs	r1, #0
 801f3b4:	6978      	ldr	r0, [r7, #20]
 801f3b6:	f004 ffd3 	bl	8024360 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801f3ba:	697b      	ldr	r3, [r7, #20]
 801f3bc:	2201      	movs	r2, #1
 801f3be:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801f3c0:	697b      	ldr	r3, [r7, #20]
 801f3c2:	2201      	movs	r2, #1
 801f3c4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801f3c6:	68fb      	ldr	r3, [r7, #12]
 801f3c8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801f3cc:	697b      	ldr	r3, [r7, #20]
 801f3ce:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801f3d0:	68bb      	ldr	r3, [r7, #8]
 801f3d2:	681b      	ldr	r3, [r3, #0]
 801f3d4:	4618      	mov	r0, r3
 801f3d6:	f7f5 fc70 	bl	8014cba <lwip_htonl>
 801f3da:	4602      	mov	r2, r0
 801f3dc:	697b      	ldr	r3, [r7, #20]
 801f3de:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801f3e0:	79fb      	ldrb	r3, [r7, #7]
 801f3e2:	2b08      	cmp	r3, #8
 801f3e4:	d010      	beq.n	801f408 <dhcp_create_msg+0xfc>
 801f3e6:	79fb      	ldrb	r3, [r7, #7]
 801f3e8:	2b04      	cmp	r3, #4
 801f3ea:	d00d      	beq.n	801f408 <dhcp_create_msg+0xfc>
 801f3ec:	79fb      	ldrb	r3, [r7, #7]
 801f3ee:	2b07      	cmp	r3, #7
 801f3f0:	d00a      	beq.n	801f408 <dhcp_create_msg+0xfc>
 801f3f2:	79fb      	ldrb	r3, [r7, #7]
 801f3f4:	2b03      	cmp	r3, #3
 801f3f6:	d10c      	bne.n	801f412 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801f3f8:	68bb      	ldr	r3, [r7, #8]
 801f3fa:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801f3fc:	2b05      	cmp	r3, #5
 801f3fe:	d003      	beq.n	801f408 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801f400:	68bb      	ldr	r3, [r7, #8]
 801f402:	795b      	ldrb	r3, [r3, #5]
 801f404:	2b04      	cmp	r3, #4
 801f406:	d104      	bne.n	801f412 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801f408:	68fb      	ldr	r3, [r7, #12]
 801f40a:	3304      	adds	r3, #4
 801f40c:	681a      	ldr	r2, [r3, #0]
 801f40e:	697b      	ldr	r3, [r7, #20]
 801f410:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801f412:	2300      	movs	r3, #0
 801f414:	83fb      	strh	r3, [r7, #30]
 801f416:	e00c      	b.n	801f432 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801f418:	8bfa      	ldrh	r2, [r7, #30]
 801f41a:	8bfb      	ldrh	r3, [r7, #30]
 801f41c:	68f9      	ldr	r1, [r7, #12]
 801f41e:	440a      	add	r2, r1
 801f420:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801f424:	697a      	ldr	r2, [r7, #20]
 801f426:	4413      	add	r3, r2
 801f428:	460a      	mov	r2, r1
 801f42a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801f42c:	8bfb      	ldrh	r3, [r7, #30]
 801f42e:	3301      	adds	r3, #1
 801f430:	83fb      	strh	r3, [r7, #30]
 801f432:	8bfb      	ldrh	r3, [r7, #30]
 801f434:	2b05      	cmp	r3, #5
 801f436:	d9ef      	bls.n	801f418 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801f438:	697b      	ldr	r3, [r7, #20]
 801f43a:	2200      	movs	r2, #0
 801f43c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801f440:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801f444:	2200      	movs	r2, #0
 801f446:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801f44a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801f44e:	2200      	movs	r2, #0
 801f450:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801f454:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801f458:	2200      	movs	r2, #0
 801f45a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801f45e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801f462:	697b      	ldr	r3, [r7, #20]
 801f464:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801f468:	2301      	movs	r3, #1
 801f46a:	2235      	movs	r2, #53	; 0x35
 801f46c:	2000      	movs	r0, #0
 801f46e:	f7ff fadb 	bl	801ea28 <dhcp_option>
 801f472:	4603      	mov	r3, r0
 801f474:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801f476:	697b      	ldr	r3, [r7, #20]
 801f478:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801f47c:	79fa      	ldrb	r2, [r7, #7]
 801f47e:	8a7b      	ldrh	r3, [r7, #18]
 801f480:	4618      	mov	r0, r3
 801f482:	f7ff fb05 	bl	801ea90 <dhcp_option_byte>
 801f486:	4603      	mov	r3, r0
 801f488:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801f48a:	683b      	ldr	r3, [r7, #0]
 801f48c:	2b00      	cmp	r3, #0
 801f48e:	d002      	beq.n	801f496 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801f490:	683b      	ldr	r3, [r7, #0]
 801f492:	8a7a      	ldrh	r2, [r7, #18]
 801f494:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801f496:	69bb      	ldr	r3, [r7, #24]
}
 801f498:	4618      	mov	r0, r3
 801f49a:	3720      	adds	r7, #32
 801f49c:	46bd      	mov	sp, r7
 801f49e:	bd80      	pop	{r7, pc}
 801f4a0:	0802a26c 	.word	0x0802a26c
 801f4a4:	0802a58c 	.word	0x0802a58c
 801f4a8:	0802a2cc 	.word	0x0802a2cc
 801f4ac:	0802a5ac 	.word	0x0802a5ac
 801f4b0:	0802a5cc 	.word	0x0802a5cc
 801f4b4:	200132c0 	.word	0x200132c0

0801f4b8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801f4b8:	b580      	push	{r7, lr}
 801f4ba:	b084      	sub	sp, #16
 801f4bc:	af00      	add	r7, sp, #0
 801f4be:	4603      	mov	r3, r0
 801f4c0:	60b9      	str	r1, [r7, #8]
 801f4c2:	607a      	str	r2, [r7, #4]
 801f4c4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801f4c6:	89fb      	ldrh	r3, [r7, #14]
 801f4c8:	1c5a      	adds	r2, r3, #1
 801f4ca:	81fa      	strh	r2, [r7, #14]
 801f4cc:	461a      	mov	r2, r3
 801f4ce:	68bb      	ldr	r3, [r7, #8]
 801f4d0:	4413      	add	r3, r2
 801f4d2:	22ff      	movs	r2, #255	; 0xff
 801f4d4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801f4d6:	e007      	b.n	801f4e8 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801f4d8:	89fb      	ldrh	r3, [r7, #14]
 801f4da:	1c5a      	adds	r2, r3, #1
 801f4dc:	81fa      	strh	r2, [r7, #14]
 801f4de:	461a      	mov	r2, r3
 801f4e0:	68bb      	ldr	r3, [r7, #8]
 801f4e2:	4413      	add	r3, r2
 801f4e4:	2200      	movs	r2, #0
 801f4e6:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801f4e8:	89fb      	ldrh	r3, [r7, #14]
 801f4ea:	2b43      	cmp	r3, #67	; 0x43
 801f4ec:	d904      	bls.n	801f4f8 <dhcp_option_trailer+0x40>
 801f4ee:	89fb      	ldrh	r3, [r7, #14]
 801f4f0:	f003 0303 	and.w	r3, r3, #3
 801f4f4:	2b00      	cmp	r3, #0
 801f4f6:	d002      	beq.n	801f4fe <dhcp_option_trailer+0x46>
 801f4f8:	89fb      	ldrh	r3, [r7, #14]
 801f4fa:	2b43      	cmp	r3, #67	; 0x43
 801f4fc:	d9ec      	bls.n	801f4d8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801f4fe:	89fb      	ldrh	r3, [r7, #14]
 801f500:	33f0      	adds	r3, #240	; 0xf0
 801f502:	b29b      	uxth	r3, r3
 801f504:	4619      	mov	r1, r3
 801f506:	6878      	ldr	r0, [r7, #4]
 801f508:	f7f6 fe3a 	bl	8016180 <pbuf_realloc>
}
 801f50c:	bf00      	nop
 801f50e:	3710      	adds	r7, #16
 801f510:	46bd      	mov	sp, r7
 801f512:	bd80      	pop	{r7, pc}

0801f514 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801f514:	b480      	push	{r7}
 801f516:	b085      	sub	sp, #20
 801f518:	af00      	add	r7, sp, #0
 801f51a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801f51c:	687b      	ldr	r3, [r7, #4]
 801f51e:	2b00      	cmp	r3, #0
 801f520:	d017      	beq.n	801f552 <dhcp_supplied_address+0x3e>
 801f522:	687b      	ldr	r3, [r7, #4]
 801f524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f526:	2b00      	cmp	r3, #0
 801f528:	d013      	beq.n	801f552 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801f52a:	687b      	ldr	r3, [r7, #4]
 801f52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f52e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801f530:	68fb      	ldr	r3, [r7, #12]
 801f532:	795b      	ldrb	r3, [r3, #5]
 801f534:	2b0a      	cmp	r3, #10
 801f536:	d007      	beq.n	801f548 <dhcp_supplied_address+0x34>
 801f538:	68fb      	ldr	r3, [r7, #12]
 801f53a:	795b      	ldrb	r3, [r3, #5]
 801f53c:	2b05      	cmp	r3, #5
 801f53e:	d003      	beq.n	801f548 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801f540:	68fb      	ldr	r3, [r7, #12]
 801f542:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801f544:	2b04      	cmp	r3, #4
 801f546:	d101      	bne.n	801f54c <dhcp_supplied_address+0x38>
 801f548:	2301      	movs	r3, #1
 801f54a:	e000      	b.n	801f54e <dhcp_supplied_address+0x3a>
 801f54c:	2300      	movs	r3, #0
 801f54e:	b2db      	uxtb	r3, r3
 801f550:	e000      	b.n	801f554 <dhcp_supplied_address+0x40>
  }
  return 0;
 801f552:	2300      	movs	r3, #0
}
 801f554:	4618      	mov	r0, r3
 801f556:	3714      	adds	r7, #20
 801f558:	46bd      	mov	sp, r7
 801f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f55e:	4770      	bx	lr

0801f560 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801f560:	b580      	push	{r7, lr}
 801f562:	b082      	sub	sp, #8
 801f564:	af00      	add	r7, sp, #0
 801f566:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801f568:	4915      	ldr	r1, [pc, #84]	; (801f5c0 <etharp_free_entry+0x60>)
 801f56a:	687a      	ldr	r2, [r7, #4]
 801f56c:	4613      	mov	r3, r2
 801f56e:	005b      	lsls	r3, r3, #1
 801f570:	4413      	add	r3, r2
 801f572:	00db      	lsls	r3, r3, #3
 801f574:	440b      	add	r3, r1
 801f576:	681b      	ldr	r3, [r3, #0]
 801f578:	2b00      	cmp	r3, #0
 801f57a:	d013      	beq.n	801f5a4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801f57c:	4910      	ldr	r1, [pc, #64]	; (801f5c0 <etharp_free_entry+0x60>)
 801f57e:	687a      	ldr	r2, [r7, #4]
 801f580:	4613      	mov	r3, r2
 801f582:	005b      	lsls	r3, r3, #1
 801f584:	4413      	add	r3, r2
 801f586:	00db      	lsls	r3, r3, #3
 801f588:	440b      	add	r3, r1
 801f58a:	681b      	ldr	r3, [r3, #0]
 801f58c:	4618      	mov	r0, r3
 801f58e:	f7f6 ff7d 	bl	801648c <pbuf_free>
    arp_table[i].q = NULL;
 801f592:	490b      	ldr	r1, [pc, #44]	; (801f5c0 <etharp_free_entry+0x60>)
 801f594:	687a      	ldr	r2, [r7, #4]
 801f596:	4613      	mov	r3, r2
 801f598:	005b      	lsls	r3, r3, #1
 801f59a:	4413      	add	r3, r2
 801f59c:	00db      	lsls	r3, r3, #3
 801f59e:	440b      	add	r3, r1
 801f5a0:	2200      	movs	r2, #0
 801f5a2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801f5a4:	4906      	ldr	r1, [pc, #24]	; (801f5c0 <etharp_free_entry+0x60>)
 801f5a6:	687a      	ldr	r2, [r7, #4]
 801f5a8:	4613      	mov	r3, r2
 801f5aa:	005b      	lsls	r3, r3, #1
 801f5ac:	4413      	add	r3, r2
 801f5ae:	00db      	lsls	r3, r3, #3
 801f5b0:	440b      	add	r3, r1
 801f5b2:	3314      	adds	r3, #20
 801f5b4:	2200      	movs	r2, #0
 801f5b6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801f5b8:	bf00      	nop
 801f5ba:	3708      	adds	r7, #8
 801f5bc:	46bd      	mov	sp, r7
 801f5be:	bd80      	pop	{r7, pc}
 801f5c0:	200132c4 	.word	0x200132c4

0801f5c4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801f5c4:	b580      	push	{r7, lr}
 801f5c6:	b082      	sub	sp, #8
 801f5c8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f5ca:	2300      	movs	r3, #0
 801f5cc:	607b      	str	r3, [r7, #4]
 801f5ce:	e096      	b.n	801f6fe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801f5d0:	494f      	ldr	r1, [pc, #316]	; (801f710 <etharp_tmr+0x14c>)
 801f5d2:	687a      	ldr	r2, [r7, #4]
 801f5d4:	4613      	mov	r3, r2
 801f5d6:	005b      	lsls	r3, r3, #1
 801f5d8:	4413      	add	r3, r2
 801f5da:	00db      	lsls	r3, r3, #3
 801f5dc:	440b      	add	r3, r1
 801f5de:	3314      	adds	r3, #20
 801f5e0:	781b      	ldrb	r3, [r3, #0]
 801f5e2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801f5e4:	78fb      	ldrb	r3, [r7, #3]
 801f5e6:	2b00      	cmp	r3, #0
 801f5e8:	f000 8086 	beq.w	801f6f8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801f5ec:	4948      	ldr	r1, [pc, #288]	; (801f710 <etharp_tmr+0x14c>)
 801f5ee:	687a      	ldr	r2, [r7, #4]
 801f5f0:	4613      	mov	r3, r2
 801f5f2:	005b      	lsls	r3, r3, #1
 801f5f4:	4413      	add	r3, r2
 801f5f6:	00db      	lsls	r3, r3, #3
 801f5f8:	440b      	add	r3, r1
 801f5fa:	3312      	adds	r3, #18
 801f5fc:	881b      	ldrh	r3, [r3, #0]
 801f5fe:	3301      	adds	r3, #1
 801f600:	b298      	uxth	r0, r3
 801f602:	4943      	ldr	r1, [pc, #268]	; (801f710 <etharp_tmr+0x14c>)
 801f604:	687a      	ldr	r2, [r7, #4]
 801f606:	4613      	mov	r3, r2
 801f608:	005b      	lsls	r3, r3, #1
 801f60a:	4413      	add	r3, r2
 801f60c:	00db      	lsls	r3, r3, #3
 801f60e:	440b      	add	r3, r1
 801f610:	3312      	adds	r3, #18
 801f612:	4602      	mov	r2, r0
 801f614:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801f616:	493e      	ldr	r1, [pc, #248]	; (801f710 <etharp_tmr+0x14c>)
 801f618:	687a      	ldr	r2, [r7, #4]
 801f61a:	4613      	mov	r3, r2
 801f61c:	005b      	lsls	r3, r3, #1
 801f61e:	4413      	add	r3, r2
 801f620:	00db      	lsls	r3, r3, #3
 801f622:	440b      	add	r3, r1
 801f624:	3312      	adds	r3, #18
 801f626:	881b      	ldrh	r3, [r3, #0]
 801f628:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801f62c:	d215      	bcs.n	801f65a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801f62e:	4938      	ldr	r1, [pc, #224]	; (801f710 <etharp_tmr+0x14c>)
 801f630:	687a      	ldr	r2, [r7, #4]
 801f632:	4613      	mov	r3, r2
 801f634:	005b      	lsls	r3, r3, #1
 801f636:	4413      	add	r3, r2
 801f638:	00db      	lsls	r3, r3, #3
 801f63a:	440b      	add	r3, r1
 801f63c:	3314      	adds	r3, #20
 801f63e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801f640:	2b01      	cmp	r3, #1
 801f642:	d10e      	bne.n	801f662 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801f644:	4932      	ldr	r1, [pc, #200]	; (801f710 <etharp_tmr+0x14c>)
 801f646:	687a      	ldr	r2, [r7, #4]
 801f648:	4613      	mov	r3, r2
 801f64a:	005b      	lsls	r3, r3, #1
 801f64c:	4413      	add	r3, r2
 801f64e:	00db      	lsls	r3, r3, #3
 801f650:	440b      	add	r3, r1
 801f652:	3312      	adds	r3, #18
 801f654:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801f656:	2b04      	cmp	r3, #4
 801f658:	d903      	bls.n	801f662 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801f65a:	6878      	ldr	r0, [r7, #4]
 801f65c:	f7ff ff80 	bl	801f560 <etharp_free_entry>
 801f660:	e04a      	b.n	801f6f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801f662:	492b      	ldr	r1, [pc, #172]	; (801f710 <etharp_tmr+0x14c>)
 801f664:	687a      	ldr	r2, [r7, #4]
 801f666:	4613      	mov	r3, r2
 801f668:	005b      	lsls	r3, r3, #1
 801f66a:	4413      	add	r3, r2
 801f66c:	00db      	lsls	r3, r3, #3
 801f66e:	440b      	add	r3, r1
 801f670:	3314      	adds	r3, #20
 801f672:	781b      	ldrb	r3, [r3, #0]
 801f674:	2b03      	cmp	r3, #3
 801f676:	d10a      	bne.n	801f68e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801f678:	4925      	ldr	r1, [pc, #148]	; (801f710 <etharp_tmr+0x14c>)
 801f67a:	687a      	ldr	r2, [r7, #4]
 801f67c:	4613      	mov	r3, r2
 801f67e:	005b      	lsls	r3, r3, #1
 801f680:	4413      	add	r3, r2
 801f682:	00db      	lsls	r3, r3, #3
 801f684:	440b      	add	r3, r1
 801f686:	3314      	adds	r3, #20
 801f688:	2204      	movs	r2, #4
 801f68a:	701a      	strb	r2, [r3, #0]
 801f68c:	e034      	b.n	801f6f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801f68e:	4920      	ldr	r1, [pc, #128]	; (801f710 <etharp_tmr+0x14c>)
 801f690:	687a      	ldr	r2, [r7, #4]
 801f692:	4613      	mov	r3, r2
 801f694:	005b      	lsls	r3, r3, #1
 801f696:	4413      	add	r3, r2
 801f698:	00db      	lsls	r3, r3, #3
 801f69a:	440b      	add	r3, r1
 801f69c:	3314      	adds	r3, #20
 801f69e:	781b      	ldrb	r3, [r3, #0]
 801f6a0:	2b04      	cmp	r3, #4
 801f6a2:	d10a      	bne.n	801f6ba <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801f6a4:	491a      	ldr	r1, [pc, #104]	; (801f710 <etharp_tmr+0x14c>)
 801f6a6:	687a      	ldr	r2, [r7, #4]
 801f6a8:	4613      	mov	r3, r2
 801f6aa:	005b      	lsls	r3, r3, #1
 801f6ac:	4413      	add	r3, r2
 801f6ae:	00db      	lsls	r3, r3, #3
 801f6b0:	440b      	add	r3, r1
 801f6b2:	3314      	adds	r3, #20
 801f6b4:	2202      	movs	r2, #2
 801f6b6:	701a      	strb	r2, [r3, #0]
 801f6b8:	e01e      	b.n	801f6f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801f6ba:	4915      	ldr	r1, [pc, #84]	; (801f710 <etharp_tmr+0x14c>)
 801f6bc:	687a      	ldr	r2, [r7, #4]
 801f6be:	4613      	mov	r3, r2
 801f6c0:	005b      	lsls	r3, r3, #1
 801f6c2:	4413      	add	r3, r2
 801f6c4:	00db      	lsls	r3, r3, #3
 801f6c6:	440b      	add	r3, r1
 801f6c8:	3314      	adds	r3, #20
 801f6ca:	781b      	ldrb	r3, [r3, #0]
 801f6cc:	2b01      	cmp	r3, #1
 801f6ce:	d113      	bne.n	801f6f8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801f6d0:	490f      	ldr	r1, [pc, #60]	; (801f710 <etharp_tmr+0x14c>)
 801f6d2:	687a      	ldr	r2, [r7, #4]
 801f6d4:	4613      	mov	r3, r2
 801f6d6:	005b      	lsls	r3, r3, #1
 801f6d8:	4413      	add	r3, r2
 801f6da:	00db      	lsls	r3, r3, #3
 801f6dc:	440b      	add	r3, r1
 801f6de:	3308      	adds	r3, #8
 801f6e0:	6818      	ldr	r0, [r3, #0]
 801f6e2:	687a      	ldr	r2, [r7, #4]
 801f6e4:	4613      	mov	r3, r2
 801f6e6:	005b      	lsls	r3, r3, #1
 801f6e8:	4413      	add	r3, r2
 801f6ea:	00db      	lsls	r3, r3, #3
 801f6ec:	4a08      	ldr	r2, [pc, #32]	; (801f710 <etharp_tmr+0x14c>)
 801f6ee:	4413      	add	r3, r2
 801f6f0:	3304      	adds	r3, #4
 801f6f2:	4619      	mov	r1, r3
 801f6f4:	f000 fe72 	bl	80203dc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f6f8:	687b      	ldr	r3, [r7, #4]
 801f6fa:	3301      	adds	r3, #1
 801f6fc:	607b      	str	r3, [r7, #4]
 801f6fe:	687b      	ldr	r3, [r7, #4]
 801f700:	2b09      	cmp	r3, #9
 801f702:	f77f af65 	ble.w	801f5d0 <etharp_tmr+0xc>
      }
    }
  }
}
 801f706:	bf00      	nop
 801f708:	bf00      	nop
 801f70a:	3708      	adds	r7, #8
 801f70c:	46bd      	mov	sp, r7
 801f70e:	bd80      	pop	{r7, pc}
 801f710:	200132c4 	.word	0x200132c4

0801f714 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801f714:	b580      	push	{r7, lr}
 801f716:	b08a      	sub	sp, #40	; 0x28
 801f718:	af00      	add	r7, sp, #0
 801f71a:	60f8      	str	r0, [r7, #12]
 801f71c:	460b      	mov	r3, r1
 801f71e:	607a      	str	r2, [r7, #4]
 801f720:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801f722:	230a      	movs	r3, #10
 801f724:	84fb      	strh	r3, [r7, #38]	; 0x26
 801f726:	230a      	movs	r3, #10
 801f728:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801f72a:	230a      	movs	r3, #10
 801f72c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801f72e:	2300      	movs	r3, #0
 801f730:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801f732:	230a      	movs	r3, #10
 801f734:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801f736:	2300      	movs	r3, #0
 801f738:	83bb      	strh	r3, [r7, #28]
 801f73a:	2300      	movs	r3, #0
 801f73c:	837b      	strh	r3, [r7, #26]
 801f73e:	2300      	movs	r3, #0
 801f740:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f742:	2300      	movs	r3, #0
 801f744:	843b      	strh	r3, [r7, #32]
 801f746:	e0ae      	b.n	801f8a6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801f748:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f74c:	49a6      	ldr	r1, [pc, #664]	; (801f9e8 <etharp_find_entry+0x2d4>)
 801f74e:	4613      	mov	r3, r2
 801f750:	005b      	lsls	r3, r3, #1
 801f752:	4413      	add	r3, r2
 801f754:	00db      	lsls	r3, r3, #3
 801f756:	440b      	add	r3, r1
 801f758:	3314      	adds	r3, #20
 801f75a:	781b      	ldrb	r3, [r3, #0]
 801f75c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801f75e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801f762:	2b0a      	cmp	r3, #10
 801f764:	d105      	bne.n	801f772 <etharp_find_entry+0x5e>
 801f766:	7dfb      	ldrb	r3, [r7, #23]
 801f768:	2b00      	cmp	r3, #0
 801f76a:	d102      	bne.n	801f772 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801f76c:	8c3b      	ldrh	r3, [r7, #32]
 801f76e:	847b      	strh	r3, [r7, #34]	; 0x22
 801f770:	e095      	b.n	801f89e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801f772:	7dfb      	ldrb	r3, [r7, #23]
 801f774:	2b00      	cmp	r3, #0
 801f776:	f000 8092 	beq.w	801f89e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801f77a:	7dfb      	ldrb	r3, [r7, #23]
 801f77c:	2b01      	cmp	r3, #1
 801f77e:	d009      	beq.n	801f794 <etharp_find_entry+0x80>
 801f780:	7dfb      	ldrb	r3, [r7, #23]
 801f782:	2b01      	cmp	r3, #1
 801f784:	d806      	bhi.n	801f794 <etharp_find_entry+0x80>
 801f786:	4b99      	ldr	r3, [pc, #612]	; (801f9ec <etharp_find_entry+0x2d8>)
 801f788:	f240 1223 	movw	r2, #291	; 0x123
 801f78c:	4998      	ldr	r1, [pc, #608]	; (801f9f0 <etharp_find_entry+0x2dc>)
 801f78e:	4899      	ldr	r0, [pc, #612]	; (801f9f4 <etharp_find_entry+0x2e0>)
 801f790:	f004 fc22 	bl	8023fd8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801f794:	68fb      	ldr	r3, [r7, #12]
 801f796:	2b00      	cmp	r3, #0
 801f798:	d020      	beq.n	801f7dc <etharp_find_entry+0xc8>
 801f79a:	68fb      	ldr	r3, [r7, #12]
 801f79c:	6819      	ldr	r1, [r3, #0]
 801f79e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f7a2:	4891      	ldr	r0, [pc, #580]	; (801f9e8 <etharp_find_entry+0x2d4>)
 801f7a4:	4613      	mov	r3, r2
 801f7a6:	005b      	lsls	r3, r3, #1
 801f7a8:	4413      	add	r3, r2
 801f7aa:	00db      	lsls	r3, r3, #3
 801f7ac:	4403      	add	r3, r0
 801f7ae:	3304      	adds	r3, #4
 801f7b0:	681b      	ldr	r3, [r3, #0]
 801f7b2:	4299      	cmp	r1, r3
 801f7b4:	d112      	bne.n	801f7dc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801f7b6:	687b      	ldr	r3, [r7, #4]
 801f7b8:	2b00      	cmp	r3, #0
 801f7ba:	d00c      	beq.n	801f7d6 <etharp_find_entry+0xc2>
 801f7bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f7c0:	4989      	ldr	r1, [pc, #548]	; (801f9e8 <etharp_find_entry+0x2d4>)
 801f7c2:	4613      	mov	r3, r2
 801f7c4:	005b      	lsls	r3, r3, #1
 801f7c6:	4413      	add	r3, r2
 801f7c8:	00db      	lsls	r3, r3, #3
 801f7ca:	440b      	add	r3, r1
 801f7cc:	3308      	adds	r3, #8
 801f7ce:	681b      	ldr	r3, [r3, #0]
 801f7d0:	687a      	ldr	r2, [r7, #4]
 801f7d2:	429a      	cmp	r2, r3
 801f7d4:	d102      	bne.n	801f7dc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801f7d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801f7da:	e100      	b.n	801f9de <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801f7dc:	7dfb      	ldrb	r3, [r7, #23]
 801f7de:	2b01      	cmp	r3, #1
 801f7e0:	d140      	bne.n	801f864 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801f7e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f7e6:	4980      	ldr	r1, [pc, #512]	; (801f9e8 <etharp_find_entry+0x2d4>)
 801f7e8:	4613      	mov	r3, r2
 801f7ea:	005b      	lsls	r3, r3, #1
 801f7ec:	4413      	add	r3, r2
 801f7ee:	00db      	lsls	r3, r3, #3
 801f7f0:	440b      	add	r3, r1
 801f7f2:	681b      	ldr	r3, [r3, #0]
 801f7f4:	2b00      	cmp	r3, #0
 801f7f6:	d01a      	beq.n	801f82e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801f7f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f7fc:	497a      	ldr	r1, [pc, #488]	; (801f9e8 <etharp_find_entry+0x2d4>)
 801f7fe:	4613      	mov	r3, r2
 801f800:	005b      	lsls	r3, r3, #1
 801f802:	4413      	add	r3, r2
 801f804:	00db      	lsls	r3, r3, #3
 801f806:	440b      	add	r3, r1
 801f808:	3312      	adds	r3, #18
 801f80a:	881b      	ldrh	r3, [r3, #0]
 801f80c:	8bba      	ldrh	r2, [r7, #28]
 801f80e:	429a      	cmp	r2, r3
 801f810:	d845      	bhi.n	801f89e <etharp_find_entry+0x18a>
            old_queue = i;
 801f812:	8c3b      	ldrh	r3, [r7, #32]
 801f814:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801f816:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f81a:	4973      	ldr	r1, [pc, #460]	; (801f9e8 <etharp_find_entry+0x2d4>)
 801f81c:	4613      	mov	r3, r2
 801f81e:	005b      	lsls	r3, r3, #1
 801f820:	4413      	add	r3, r2
 801f822:	00db      	lsls	r3, r3, #3
 801f824:	440b      	add	r3, r1
 801f826:	3312      	adds	r3, #18
 801f828:	881b      	ldrh	r3, [r3, #0]
 801f82a:	83bb      	strh	r3, [r7, #28]
 801f82c:	e037      	b.n	801f89e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801f82e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f832:	496d      	ldr	r1, [pc, #436]	; (801f9e8 <etharp_find_entry+0x2d4>)
 801f834:	4613      	mov	r3, r2
 801f836:	005b      	lsls	r3, r3, #1
 801f838:	4413      	add	r3, r2
 801f83a:	00db      	lsls	r3, r3, #3
 801f83c:	440b      	add	r3, r1
 801f83e:	3312      	adds	r3, #18
 801f840:	881b      	ldrh	r3, [r3, #0]
 801f842:	8b7a      	ldrh	r2, [r7, #26]
 801f844:	429a      	cmp	r2, r3
 801f846:	d82a      	bhi.n	801f89e <etharp_find_entry+0x18a>
            old_pending = i;
 801f848:	8c3b      	ldrh	r3, [r7, #32]
 801f84a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801f84c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f850:	4965      	ldr	r1, [pc, #404]	; (801f9e8 <etharp_find_entry+0x2d4>)
 801f852:	4613      	mov	r3, r2
 801f854:	005b      	lsls	r3, r3, #1
 801f856:	4413      	add	r3, r2
 801f858:	00db      	lsls	r3, r3, #3
 801f85a:	440b      	add	r3, r1
 801f85c:	3312      	adds	r3, #18
 801f85e:	881b      	ldrh	r3, [r3, #0]
 801f860:	837b      	strh	r3, [r7, #26]
 801f862:	e01c      	b.n	801f89e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801f864:	7dfb      	ldrb	r3, [r7, #23]
 801f866:	2b01      	cmp	r3, #1
 801f868:	d919      	bls.n	801f89e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801f86a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f86e:	495e      	ldr	r1, [pc, #376]	; (801f9e8 <etharp_find_entry+0x2d4>)
 801f870:	4613      	mov	r3, r2
 801f872:	005b      	lsls	r3, r3, #1
 801f874:	4413      	add	r3, r2
 801f876:	00db      	lsls	r3, r3, #3
 801f878:	440b      	add	r3, r1
 801f87a:	3312      	adds	r3, #18
 801f87c:	881b      	ldrh	r3, [r3, #0]
 801f87e:	8b3a      	ldrh	r2, [r7, #24]
 801f880:	429a      	cmp	r2, r3
 801f882:	d80c      	bhi.n	801f89e <etharp_find_entry+0x18a>
            old_stable = i;
 801f884:	8c3b      	ldrh	r3, [r7, #32]
 801f886:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801f888:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f88c:	4956      	ldr	r1, [pc, #344]	; (801f9e8 <etharp_find_entry+0x2d4>)
 801f88e:	4613      	mov	r3, r2
 801f890:	005b      	lsls	r3, r3, #1
 801f892:	4413      	add	r3, r2
 801f894:	00db      	lsls	r3, r3, #3
 801f896:	440b      	add	r3, r1
 801f898:	3312      	adds	r3, #18
 801f89a:	881b      	ldrh	r3, [r3, #0]
 801f89c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f89e:	8c3b      	ldrh	r3, [r7, #32]
 801f8a0:	3301      	adds	r3, #1
 801f8a2:	b29b      	uxth	r3, r3
 801f8a4:	843b      	strh	r3, [r7, #32]
 801f8a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801f8aa:	2b09      	cmp	r3, #9
 801f8ac:	f77f af4c 	ble.w	801f748 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801f8b0:	7afb      	ldrb	r3, [r7, #11]
 801f8b2:	f003 0302 	and.w	r3, r3, #2
 801f8b6:	2b00      	cmp	r3, #0
 801f8b8:	d108      	bne.n	801f8cc <etharp_find_entry+0x1b8>
 801f8ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801f8be:	2b0a      	cmp	r3, #10
 801f8c0:	d107      	bne.n	801f8d2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801f8c2:	7afb      	ldrb	r3, [r7, #11]
 801f8c4:	f003 0301 	and.w	r3, r3, #1
 801f8c8:	2b00      	cmp	r3, #0
 801f8ca:	d102      	bne.n	801f8d2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801f8cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f8d0:	e085      	b.n	801f9de <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801f8d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801f8d6:	2b09      	cmp	r3, #9
 801f8d8:	dc02      	bgt.n	801f8e0 <etharp_find_entry+0x1cc>
    i = empty;
 801f8da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f8dc:	843b      	strh	r3, [r7, #32]
 801f8de:	e039      	b.n	801f954 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801f8e0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801f8e4:	2b09      	cmp	r3, #9
 801f8e6:	dc14      	bgt.n	801f912 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801f8e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f8ea:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801f8ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f8f0:	493d      	ldr	r1, [pc, #244]	; (801f9e8 <etharp_find_entry+0x2d4>)
 801f8f2:	4613      	mov	r3, r2
 801f8f4:	005b      	lsls	r3, r3, #1
 801f8f6:	4413      	add	r3, r2
 801f8f8:	00db      	lsls	r3, r3, #3
 801f8fa:	440b      	add	r3, r1
 801f8fc:	681b      	ldr	r3, [r3, #0]
 801f8fe:	2b00      	cmp	r3, #0
 801f900:	d018      	beq.n	801f934 <etharp_find_entry+0x220>
 801f902:	4b3a      	ldr	r3, [pc, #232]	; (801f9ec <etharp_find_entry+0x2d8>)
 801f904:	f240 126d 	movw	r2, #365	; 0x16d
 801f908:	493b      	ldr	r1, [pc, #236]	; (801f9f8 <etharp_find_entry+0x2e4>)
 801f90a:	483a      	ldr	r0, [pc, #232]	; (801f9f4 <etharp_find_entry+0x2e0>)
 801f90c:	f004 fb64 	bl	8023fd8 <iprintf>
 801f910:	e010      	b.n	801f934 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801f912:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801f916:	2b09      	cmp	r3, #9
 801f918:	dc02      	bgt.n	801f920 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801f91a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801f91c:	843b      	strh	r3, [r7, #32]
 801f91e:	e009      	b.n	801f934 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801f920:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801f924:	2b09      	cmp	r3, #9
 801f926:	dc02      	bgt.n	801f92e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801f928:	8bfb      	ldrh	r3, [r7, #30]
 801f92a:	843b      	strh	r3, [r7, #32]
 801f92c:	e002      	b.n	801f934 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801f92e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f932:	e054      	b.n	801f9de <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801f934:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801f938:	2b09      	cmp	r3, #9
 801f93a:	dd06      	ble.n	801f94a <etharp_find_entry+0x236>
 801f93c:	4b2b      	ldr	r3, [pc, #172]	; (801f9ec <etharp_find_entry+0x2d8>)
 801f93e:	f240 127f 	movw	r2, #383	; 0x17f
 801f942:	492e      	ldr	r1, [pc, #184]	; (801f9fc <etharp_find_entry+0x2e8>)
 801f944:	482b      	ldr	r0, [pc, #172]	; (801f9f4 <etharp_find_entry+0x2e0>)
 801f946:	f004 fb47 	bl	8023fd8 <iprintf>
    etharp_free_entry(i);
 801f94a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801f94e:	4618      	mov	r0, r3
 801f950:	f7ff fe06 	bl	801f560 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801f954:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801f958:	2b09      	cmp	r3, #9
 801f95a:	dd06      	ble.n	801f96a <etharp_find_entry+0x256>
 801f95c:	4b23      	ldr	r3, [pc, #140]	; (801f9ec <etharp_find_entry+0x2d8>)
 801f95e:	f240 1283 	movw	r2, #387	; 0x183
 801f962:	4926      	ldr	r1, [pc, #152]	; (801f9fc <etharp_find_entry+0x2e8>)
 801f964:	4823      	ldr	r0, [pc, #140]	; (801f9f4 <etharp_find_entry+0x2e0>)
 801f966:	f004 fb37 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801f96a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f96e:	491e      	ldr	r1, [pc, #120]	; (801f9e8 <etharp_find_entry+0x2d4>)
 801f970:	4613      	mov	r3, r2
 801f972:	005b      	lsls	r3, r3, #1
 801f974:	4413      	add	r3, r2
 801f976:	00db      	lsls	r3, r3, #3
 801f978:	440b      	add	r3, r1
 801f97a:	3314      	adds	r3, #20
 801f97c:	781b      	ldrb	r3, [r3, #0]
 801f97e:	2b00      	cmp	r3, #0
 801f980:	d006      	beq.n	801f990 <etharp_find_entry+0x27c>
 801f982:	4b1a      	ldr	r3, [pc, #104]	; (801f9ec <etharp_find_entry+0x2d8>)
 801f984:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801f988:	491d      	ldr	r1, [pc, #116]	; (801fa00 <etharp_find_entry+0x2ec>)
 801f98a:	481a      	ldr	r0, [pc, #104]	; (801f9f4 <etharp_find_entry+0x2e0>)
 801f98c:	f004 fb24 	bl	8023fd8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801f990:	68fb      	ldr	r3, [r7, #12]
 801f992:	2b00      	cmp	r3, #0
 801f994:	d00b      	beq.n	801f9ae <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801f996:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f99a:	68fb      	ldr	r3, [r7, #12]
 801f99c:	6819      	ldr	r1, [r3, #0]
 801f99e:	4812      	ldr	r0, [pc, #72]	; (801f9e8 <etharp_find_entry+0x2d4>)
 801f9a0:	4613      	mov	r3, r2
 801f9a2:	005b      	lsls	r3, r3, #1
 801f9a4:	4413      	add	r3, r2
 801f9a6:	00db      	lsls	r3, r3, #3
 801f9a8:	4403      	add	r3, r0
 801f9aa:	3304      	adds	r3, #4
 801f9ac:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801f9ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f9b2:	490d      	ldr	r1, [pc, #52]	; (801f9e8 <etharp_find_entry+0x2d4>)
 801f9b4:	4613      	mov	r3, r2
 801f9b6:	005b      	lsls	r3, r3, #1
 801f9b8:	4413      	add	r3, r2
 801f9ba:	00db      	lsls	r3, r3, #3
 801f9bc:	440b      	add	r3, r1
 801f9be:	3312      	adds	r3, #18
 801f9c0:	2200      	movs	r2, #0
 801f9c2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801f9c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f9c8:	4907      	ldr	r1, [pc, #28]	; (801f9e8 <etharp_find_entry+0x2d4>)
 801f9ca:	4613      	mov	r3, r2
 801f9cc:	005b      	lsls	r3, r3, #1
 801f9ce:	4413      	add	r3, r2
 801f9d0:	00db      	lsls	r3, r3, #3
 801f9d2:	440b      	add	r3, r1
 801f9d4:	3308      	adds	r3, #8
 801f9d6:	687a      	ldr	r2, [r7, #4]
 801f9d8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801f9da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801f9de:	4618      	mov	r0, r3
 801f9e0:	3728      	adds	r7, #40	; 0x28
 801f9e2:	46bd      	mov	sp, r7
 801f9e4:	bd80      	pop	{r7, pc}
 801f9e6:	bf00      	nop
 801f9e8:	200132c4 	.word	0x200132c4
 801f9ec:	0802a60c 	.word	0x0802a60c
 801f9f0:	0802a644 	.word	0x0802a644
 801f9f4:	0802a684 	.word	0x0802a684
 801f9f8:	0802a6ac 	.word	0x0802a6ac
 801f9fc:	0802a6c4 	.word	0x0802a6c4
 801fa00:	0802a6d8 	.word	0x0802a6d8

0801fa04 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801fa04:	b580      	push	{r7, lr}
 801fa06:	b088      	sub	sp, #32
 801fa08:	af02      	add	r7, sp, #8
 801fa0a:	60f8      	str	r0, [r7, #12]
 801fa0c:	60b9      	str	r1, [r7, #8]
 801fa0e:	607a      	str	r2, [r7, #4]
 801fa10:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801fa12:	68fb      	ldr	r3, [r7, #12]
 801fa14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801fa18:	2b06      	cmp	r3, #6
 801fa1a:	d006      	beq.n	801fa2a <etharp_update_arp_entry+0x26>
 801fa1c:	4b48      	ldr	r3, [pc, #288]	; (801fb40 <etharp_update_arp_entry+0x13c>)
 801fa1e:	f240 12a9 	movw	r2, #425	; 0x1a9
 801fa22:	4948      	ldr	r1, [pc, #288]	; (801fb44 <etharp_update_arp_entry+0x140>)
 801fa24:	4848      	ldr	r0, [pc, #288]	; (801fb48 <etharp_update_arp_entry+0x144>)
 801fa26:	f004 fad7 	bl	8023fd8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801fa2a:	68bb      	ldr	r3, [r7, #8]
 801fa2c:	2b00      	cmp	r3, #0
 801fa2e:	d012      	beq.n	801fa56 <etharp_update_arp_entry+0x52>
 801fa30:	68bb      	ldr	r3, [r7, #8]
 801fa32:	681b      	ldr	r3, [r3, #0]
 801fa34:	2b00      	cmp	r3, #0
 801fa36:	d00e      	beq.n	801fa56 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801fa38:	68bb      	ldr	r3, [r7, #8]
 801fa3a:	681b      	ldr	r3, [r3, #0]
 801fa3c:	68f9      	ldr	r1, [r7, #12]
 801fa3e:	4618      	mov	r0, r3
 801fa40:	f001 f920 	bl	8020c84 <ip4_addr_isbroadcast_u32>
 801fa44:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801fa46:	2b00      	cmp	r3, #0
 801fa48:	d105      	bne.n	801fa56 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801fa4a:	68bb      	ldr	r3, [r7, #8]
 801fa4c:	681b      	ldr	r3, [r3, #0]
 801fa4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801fa52:	2be0      	cmp	r3, #224	; 0xe0
 801fa54:	d102      	bne.n	801fa5c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801fa56:	f06f 030f 	mvn.w	r3, #15
 801fa5a:	e06c      	b.n	801fb36 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801fa5c:	78fb      	ldrb	r3, [r7, #3]
 801fa5e:	68fa      	ldr	r2, [r7, #12]
 801fa60:	4619      	mov	r1, r3
 801fa62:	68b8      	ldr	r0, [r7, #8]
 801fa64:	f7ff fe56 	bl	801f714 <etharp_find_entry>
 801fa68:	4603      	mov	r3, r0
 801fa6a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801fa6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801fa70:	2b00      	cmp	r3, #0
 801fa72:	da02      	bge.n	801fa7a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801fa74:	8afb      	ldrh	r3, [r7, #22]
 801fa76:	b25b      	sxtb	r3, r3
 801fa78:	e05d      	b.n	801fb36 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801fa7a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801fa7e:	4933      	ldr	r1, [pc, #204]	; (801fb4c <etharp_update_arp_entry+0x148>)
 801fa80:	4613      	mov	r3, r2
 801fa82:	005b      	lsls	r3, r3, #1
 801fa84:	4413      	add	r3, r2
 801fa86:	00db      	lsls	r3, r3, #3
 801fa88:	440b      	add	r3, r1
 801fa8a:	3314      	adds	r3, #20
 801fa8c:	2202      	movs	r2, #2
 801fa8e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801fa90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801fa94:	492d      	ldr	r1, [pc, #180]	; (801fb4c <etharp_update_arp_entry+0x148>)
 801fa96:	4613      	mov	r3, r2
 801fa98:	005b      	lsls	r3, r3, #1
 801fa9a:	4413      	add	r3, r2
 801fa9c:	00db      	lsls	r3, r3, #3
 801fa9e:	440b      	add	r3, r1
 801faa0:	3308      	adds	r3, #8
 801faa2:	68fa      	ldr	r2, [r7, #12]
 801faa4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801faa6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801faaa:	4613      	mov	r3, r2
 801faac:	005b      	lsls	r3, r3, #1
 801faae:	4413      	add	r3, r2
 801fab0:	00db      	lsls	r3, r3, #3
 801fab2:	3308      	adds	r3, #8
 801fab4:	4a25      	ldr	r2, [pc, #148]	; (801fb4c <etharp_update_arp_entry+0x148>)
 801fab6:	4413      	add	r3, r2
 801fab8:	3304      	adds	r3, #4
 801faba:	2206      	movs	r2, #6
 801fabc:	6879      	ldr	r1, [r7, #4]
 801fabe:	4618      	mov	r0, r3
 801fac0:	f004 fd73 	bl	80245aa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801fac4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801fac8:	4920      	ldr	r1, [pc, #128]	; (801fb4c <etharp_update_arp_entry+0x148>)
 801faca:	4613      	mov	r3, r2
 801facc:	005b      	lsls	r3, r3, #1
 801face:	4413      	add	r3, r2
 801fad0:	00db      	lsls	r3, r3, #3
 801fad2:	440b      	add	r3, r1
 801fad4:	3312      	adds	r3, #18
 801fad6:	2200      	movs	r2, #0
 801fad8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801fada:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801fade:	491b      	ldr	r1, [pc, #108]	; (801fb4c <etharp_update_arp_entry+0x148>)
 801fae0:	4613      	mov	r3, r2
 801fae2:	005b      	lsls	r3, r3, #1
 801fae4:	4413      	add	r3, r2
 801fae6:	00db      	lsls	r3, r3, #3
 801fae8:	440b      	add	r3, r1
 801faea:	681b      	ldr	r3, [r3, #0]
 801faec:	2b00      	cmp	r3, #0
 801faee:	d021      	beq.n	801fb34 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801faf0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801faf4:	4915      	ldr	r1, [pc, #84]	; (801fb4c <etharp_update_arp_entry+0x148>)
 801faf6:	4613      	mov	r3, r2
 801faf8:	005b      	lsls	r3, r3, #1
 801fafa:	4413      	add	r3, r2
 801fafc:	00db      	lsls	r3, r3, #3
 801fafe:	440b      	add	r3, r1
 801fb00:	681b      	ldr	r3, [r3, #0]
 801fb02:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801fb04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801fb08:	4910      	ldr	r1, [pc, #64]	; (801fb4c <etharp_update_arp_entry+0x148>)
 801fb0a:	4613      	mov	r3, r2
 801fb0c:	005b      	lsls	r3, r3, #1
 801fb0e:	4413      	add	r3, r2
 801fb10:	00db      	lsls	r3, r3, #3
 801fb12:	440b      	add	r3, r1
 801fb14:	2200      	movs	r2, #0
 801fb16:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801fb18:	68fb      	ldr	r3, [r7, #12]
 801fb1a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801fb1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801fb22:	9300      	str	r3, [sp, #0]
 801fb24:	687b      	ldr	r3, [r7, #4]
 801fb26:	6939      	ldr	r1, [r7, #16]
 801fb28:	68f8      	ldr	r0, [r7, #12]
 801fb2a:	f002 f849 	bl	8021bc0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801fb2e:	6938      	ldr	r0, [r7, #16]
 801fb30:	f7f6 fcac 	bl	801648c <pbuf_free>
  }
  return ERR_OK;
 801fb34:	2300      	movs	r3, #0
}
 801fb36:	4618      	mov	r0, r3
 801fb38:	3718      	adds	r7, #24
 801fb3a:	46bd      	mov	sp, r7
 801fb3c:	bd80      	pop	{r7, pc}
 801fb3e:	bf00      	nop
 801fb40:	0802a60c 	.word	0x0802a60c
 801fb44:	0802a704 	.word	0x0802a704
 801fb48:	0802a684 	.word	0x0802a684
 801fb4c:	200132c4 	.word	0x200132c4

0801fb50 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801fb50:	b580      	push	{r7, lr}
 801fb52:	b084      	sub	sp, #16
 801fb54:	af00      	add	r7, sp, #0
 801fb56:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801fb58:	2300      	movs	r3, #0
 801fb5a:	60fb      	str	r3, [r7, #12]
 801fb5c:	e01e      	b.n	801fb9c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801fb5e:	4913      	ldr	r1, [pc, #76]	; (801fbac <etharp_cleanup_netif+0x5c>)
 801fb60:	68fa      	ldr	r2, [r7, #12]
 801fb62:	4613      	mov	r3, r2
 801fb64:	005b      	lsls	r3, r3, #1
 801fb66:	4413      	add	r3, r2
 801fb68:	00db      	lsls	r3, r3, #3
 801fb6a:	440b      	add	r3, r1
 801fb6c:	3314      	adds	r3, #20
 801fb6e:	781b      	ldrb	r3, [r3, #0]
 801fb70:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801fb72:	7afb      	ldrb	r3, [r7, #11]
 801fb74:	2b00      	cmp	r3, #0
 801fb76:	d00e      	beq.n	801fb96 <etharp_cleanup_netif+0x46>
 801fb78:	490c      	ldr	r1, [pc, #48]	; (801fbac <etharp_cleanup_netif+0x5c>)
 801fb7a:	68fa      	ldr	r2, [r7, #12]
 801fb7c:	4613      	mov	r3, r2
 801fb7e:	005b      	lsls	r3, r3, #1
 801fb80:	4413      	add	r3, r2
 801fb82:	00db      	lsls	r3, r3, #3
 801fb84:	440b      	add	r3, r1
 801fb86:	3308      	adds	r3, #8
 801fb88:	681b      	ldr	r3, [r3, #0]
 801fb8a:	687a      	ldr	r2, [r7, #4]
 801fb8c:	429a      	cmp	r2, r3
 801fb8e:	d102      	bne.n	801fb96 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801fb90:	68f8      	ldr	r0, [r7, #12]
 801fb92:	f7ff fce5 	bl	801f560 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801fb96:	68fb      	ldr	r3, [r7, #12]
 801fb98:	3301      	adds	r3, #1
 801fb9a:	60fb      	str	r3, [r7, #12]
 801fb9c:	68fb      	ldr	r3, [r7, #12]
 801fb9e:	2b09      	cmp	r3, #9
 801fba0:	dddd      	ble.n	801fb5e <etharp_cleanup_netif+0xe>
    }
  }
}
 801fba2:	bf00      	nop
 801fba4:	bf00      	nop
 801fba6:	3710      	adds	r7, #16
 801fba8:	46bd      	mov	sp, r7
 801fbaa:	bd80      	pop	{r7, pc}
 801fbac:	200132c4 	.word	0x200132c4

0801fbb0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801fbb0:	b5b0      	push	{r4, r5, r7, lr}
 801fbb2:	b08a      	sub	sp, #40	; 0x28
 801fbb4:	af04      	add	r7, sp, #16
 801fbb6:	6078      	str	r0, [r7, #4]
 801fbb8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801fbba:	683b      	ldr	r3, [r7, #0]
 801fbbc:	2b00      	cmp	r3, #0
 801fbbe:	d107      	bne.n	801fbd0 <etharp_input+0x20>
 801fbc0:	4b3f      	ldr	r3, [pc, #252]	; (801fcc0 <etharp_input+0x110>)
 801fbc2:	f240 228a 	movw	r2, #650	; 0x28a
 801fbc6:	493f      	ldr	r1, [pc, #252]	; (801fcc4 <etharp_input+0x114>)
 801fbc8:	483f      	ldr	r0, [pc, #252]	; (801fcc8 <etharp_input+0x118>)
 801fbca:	f004 fa05 	bl	8023fd8 <iprintf>
 801fbce:	e074      	b.n	801fcba <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801fbd0:	687b      	ldr	r3, [r7, #4]
 801fbd2:	685b      	ldr	r3, [r3, #4]
 801fbd4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801fbd6:	693b      	ldr	r3, [r7, #16]
 801fbd8:	881b      	ldrh	r3, [r3, #0]
 801fbda:	b29b      	uxth	r3, r3
 801fbdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fbe0:	d10c      	bne.n	801fbfc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801fbe2:	693b      	ldr	r3, [r7, #16]
 801fbe4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801fbe6:	2b06      	cmp	r3, #6
 801fbe8:	d108      	bne.n	801fbfc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801fbea:	693b      	ldr	r3, [r7, #16]
 801fbec:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801fbee:	2b04      	cmp	r3, #4
 801fbf0:	d104      	bne.n	801fbfc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801fbf2:	693b      	ldr	r3, [r7, #16]
 801fbf4:	885b      	ldrh	r3, [r3, #2]
 801fbf6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801fbf8:	2b08      	cmp	r3, #8
 801fbfa:	d003      	beq.n	801fc04 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801fbfc:	6878      	ldr	r0, [r7, #4]
 801fbfe:	f7f6 fc45 	bl	801648c <pbuf_free>
    return;
 801fc02:	e05a      	b.n	801fcba <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801fc04:	693b      	ldr	r3, [r7, #16]
 801fc06:	330e      	adds	r3, #14
 801fc08:	681b      	ldr	r3, [r3, #0]
 801fc0a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801fc0c:	693b      	ldr	r3, [r7, #16]
 801fc0e:	3318      	adds	r3, #24
 801fc10:	681b      	ldr	r3, [r3, #0]
 801fc12:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801fc14:	683b      	ldr	r3, [r7, #0]
 801fc16:	3304      	adds	r3, #4
 801fc18:	681b      	ldr	r3, [r3, #0]
 801fc1a:	2b00      	cmp	r3, #0
 801fc1c:	d102      	bne.n	801fc24 <etharp_input+0x74>
    for_us = 0;
 801fc1e:	2300      	movs	r3, #0
 801fc20:	75fb      	strb	r3, [r7, #23]
 801fc22:	e009      	b.n	801fc38 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801fc24:	68ba      	ldr	r2, [r7, #8]
 801fc26:	683b      	ldr	r3, [r7, #0]
 801fc28:	3304      	adds	r3, #4
 801fc2a:	681b      	ldr	r3, [r3, #0]
 801fc2c:	429a      	cmp	r2, r3
 801fc2e:	bf0c      	ite	eq
 801fc30:	2301      	moveq	r3, #1
 801fc32:	2300      	movne	r3, #0
 801fc34:	b2db      	uxtb	r3, r3
 801fc36:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801fc38:	693b      	ldr	r3, [r7, #16]
 801fc3a:	f103 0208 	add.w	r2, r3, #8
 801fc3e:	7dfb      	ldrb	r3, [r7, #23]
 801fc40:	2b00      	cmp	r3, #0
 801fc42:	d001      	beq.n	801fc48 <etharp_input+0x98>
 801fc44:	2301      	movs	r3, #1
 801fc46:	e000      	b.n	801fc4a <etharp_input+0x9a>
 801fc48:	2302      	movs	r3, #2
 801fc4a:	f107 010c 	add.w	r1, r7, #12
 801fc4e:	6838      	ldr	r0, [r7, #0]
 801fc50:	f7ff fed8 	bl	801fa04 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801fc54:	693b      	ldr	r3, [r7, #16]
 801fc56:	88db      	ldrh	r3, [r3, #6]
 801fc58:	b29b      	uxth	r3, r3
 801fc5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fc5e:	d003      	beq.n	801fc68 <etharp_input+0xb8>
 801fc60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fc64:	d01e      	beq.n	801fca4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801fc66:	e025      	b.n	801fcb4 <etharp_input+0x104>
      if (for_us) {
 801fc68:	7dfb      	ldrb	r3, [r7, #23]
 801fc6a:	2b00      	cmp	r3, #0
 801fc6c:	d021      	beq.n	801fcb2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801fc6e:	683b      	ldr	r3, [r7, #0]
 801fc70:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801fc74:	693b      	ldr	r3, [r7, #16]
 801fc76:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801fc7a:	683b      	ldr	r3, [r7, #0]
 801fc7c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801fc80:	683b      	ldr	r3, [r7, #0]
 801fc82:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801fc84:	693a      	ldr	r2, [r7, #16]
 801fc86:	3208      	adds	r2, #8
        etharp_raw(netif,
 801fc88:	2102      	movs	r1, #2
 801fc8a:	9103      	str	r1, [sp, #12]
 801fc8c:	f107 010c 	add.w	r1, r7, #12
 801fc90:	9102      	str	r1, [sp, #8]
 801fc92:	9201      	str	r2, [sp, #4]
 801fc94:	9300      	str	r3, [sp, #0]
 801fc96:	462b      	mov	r3, r5
 801fc98:	4622      	mov	r2, r4
 801fc9a:	4601      	mov	r1, r0
 801fc9c:	6838      	ldr	r0, [r7, #0]
 801fc9e:	f000 faef 	bl	8020280 <etharp_raw>
      break;
 801fca2:	e006      	b.n	801fcb2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801fca4:	f107 030c 	add.w	r3, r7, #12
 801fca8:	4619      	mov	r1, r3
 801fcaa:	6838      	ldr	r0, [r7, #0]
 801fcac:	f7fe f9fc 	bl	801e0a8 <dhcp_arp_reply>
      break;
 801fcb0:	e000      	b.n	801fcb4 <etharp_input+0x104>
      break;
 801fcb2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801fcb4:	6878      	ldr	r0, [r7, #4]
 801fcb6:	f7f6 fbe9 	bl	801648c <pbuf_free>
}
 801fcba:	3718      	adds	r7, #24
 801fcbc:	46bd      	mov	sp, r7
 801fcbe:	bdb0      	pop	{r4, r5, r7, pc}
 801fcc0:	0802a60c 	.word	0x0802a60c
 801fcc4:	0802a75c 	.word	0x0802a75c
 801fcc8:	0802a684 	.word	0x0802a684

0801fccc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801fccc:	b580      	push	{r7, lr}
 801fcce:	b086      	sub	sp, #24
 801fcd0:	af02      	add	r7, sp, #8
 801fcd2:	60f8      	str	r0, [r7, #12]
 801fcd4:	60b9      	str	r1, [r7, #8]
 801fcd6:	4613      	mov	r3, r2
 801fcd8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801fcda:	79fa      	ldrb	r2, [r7, #7]
 801fcdc:	4944      	ldr	r1, [pc, #272]	; (801fdf0 <etharp_output_to_arp_index+0x124>)
 801fcde:	4613      	mov	r3, r2
 801fce0:	005b      	lsls	r3, r3, #1
 801fce2:	4413      	add	r3, r2
 801fce4:	00db      	lsls	r3, r3, #3
 801fce6:	440b      	add	r3, r1
 801fce8:	3314      	adds	r3, #20
 801fcea:	781b      	ldrb	r3, [r3, #0]
 801fcec:	2b01      	cmp	r3, #1
 801fcee:	d806      	bhi.n	801fcfe <etharp_output_to_arp_index+0x32>
 801fcf0:	4b40      	ldr	r3, [pc, #256]	; (801fdf4 <etharp_output_to_arp_index+0x128>)
 801fcf2:	f240 22ee 	movw	r2, #750	; 0x2ee
 801fcf6:	4940      	ldr	r1, [pc, #256]	; (801fdf8 <etharp_output_to_arp_index+0x12c>)
 801fcf8:	4840      	ldr	r0, [pc, #256]	; (801fdfc <etharp_output_to_arp_index+0x130>)
 801fcfa:	f004 f96d 	bl	8023fd8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801fcfe:	79fa      	ldrb	r2, [r7, #7]
 801fd00:	493b      	ldr	r1, [pc, #236]	; (801fdf0 <etharp_output_to_arp_index+0x124>)
 801fd02:	4613      	mov	r3, r2
 801fd04:	005b      	lsls	r3, r3, #1
 801fd06:	4413      	add	r3, r2
 801fd08:	00db      	lsls	r3, r3, #3
 801fd0a:	440b      	add	r3, r1
 801fd0c:	3314      	adds	r3, #20
 801fd0e:	781b      	ldrb	r3, [r3, #0]
 801fd10:	2b02      	cmp	r3, #2
 801fd12:	d153      	bne.n	801fdbc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801fd14:	79fa      	ldrb	r2, [r7, #7]
 801fd16:	4936      	ldr	r1, [pc, #216]	; (801fdf0 <etharp_output_to_arp_index+0x124>)
 801fd18:	4613      	mov	r3, r2
 801fd1a:	005b      	lsls	r3, r3, #1
 801fd1c:	4413      	add	r3, r2
 801fd1e:	00db      	lsls	r3, r3, #3
 801fd20:	440b      	add	r3, r1
 801fd22:	3312      	adds	r3, #18
 801fd24:	881b      	ldrh	r3, [r3, #0]
 801fd26:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801fd2a:	d919      	bls.n	801fd60 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801fd2c:	79fa      	ldrb	r2, [r7, #7]
 801fd2e:	4613      	mov	r3, r2
 801fd30:	005b      	lsls	r3, r3, #1
 801fd32:	4413      	add	r3, r2
 801fd34:	00db      	lsls	r3, r3, #3
 801fd36:	4a2e      	ldr	r2, [pc, #184]	; (801fdf0 <etharp_output_to_arp_index+0x124>)
 801fd38:	4413      	add	r3, r2
 801fd3a:	3304      	adds	r3, #4
 801fd3c:	4619      	mov	r1, r3
 801fd3e:	68f8      	ldr	r0, [r7, #12]
 801fd40:	f000 fb4c 	bl	80203dc <etharp_request>
 801fd44:	4603      	mov	r3, r0
 801fd46:	2b00      	cmp	r3, #0
 801fd48:	d138      	bne.n	801fdbc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801fd4a:	79fa      	ldrb	r2, [r7, #7]
 801fd4c:	4928      	ldr	r1, [pc, #160]	; (801fdf0 <etharp_output_to_arp_index+0x124>)
 801fd4e:	4613      	mov	r3, r2
 801fd50:	005b      	lsls	r3, r3, #1
 801fd52:	4413      	add	r3, r2
 801fd54:	00db      	lsls	r3, r3, #3
 801fd56:	440b      	add	r3, r1
 801fd58:	3314      	adds	r3, #20
 801fd5a:	2203      	movs	r2, #3
 801fd5c:	701a      	strb	r2, [r3, #0]
 801fd5e:	e02d      	b.n	801fdbc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801fd60:	79fa      	ldrb	r2, [r7, #7]
 801fd62:	4923      	ldr	r1, [pc, #140]	; (801fdf0 <etharp_output_to_arp_index+0x124>)
 801fd64:	4613      	mov	r3, r2
 801fd66:	005b      	lsls	r3, r3, #1
 801fd68:	4413      	add	r3, r2
 801fd6a:	00db      	lsls	r3, r3, #3
 801fd6c:	440b      	add	r3, r1
 801fd6e:	3312      	adds	r3, #18
 801fd70:	881b      	ldrh	r3, [r3, #0]
 801fd72:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801fd76:	d321      	bcc.n	801fdbc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801fd78:	79fa      	ldrb	r2, [r7, #7]
 801fd7a:	4613      	mov	r3, r2
 801fd7c:	005b      	lsls	r3, r3, #1
 801fd7e:	4413      	add	r3, r2
 801fd80:	00db      	lsls	r3, r3, #3
 801fd82:	4a1b      	ldr	r2, [pc, #108]	; (801fdf0 <etharp_output_to_arp_index+0x124>)
 801fd84:	4413      	add	r3, r2
 801fd86:	1d19      	adds	r1, r3, #4
 801fd88:	79fa      	ldrb	r2, [r7, #7]
 801fd8a:	4613      	mov	r3, r2
 801fd8c:	005b      	lsls	r3, r3, #1
 801fd8e:	4413      	add	r3, r2
 801fd90:	00db      	lsls	r3, r3, #3
 801fd92:	3308      	adds	r3, #8
 801fd94:	4a16      	ldr	r2, [pc, #88]	; (801fdf0 <etharp_output_to_arp_index+0x124>)
 801fd96:	4413      	add	r3, r2
 801fd98:	3304      	adds	r3, #4
 801fd9a:	461a      	mov	r2, r3
 801fd9c:	68f8      	ldr	r0, [r7, #12]
 801fd9e:	f000 fafb 	bl	8020398 <etharp_request_dst>
 801fda2:	4603      	mov	r3, r0
 801fda4:	2b00      	cmp	r3, #0
 801fda6:	d109      	bne.n	801fdbc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801fda8:	79fa      	ldrb	r2, [r7, #7]
 801fdaa:	4911      	ldr	r1, [pc, #68]	; (801fdf0 <etharp_output_to_arp_index+0x124>)
 801fdac:	4613      	mov	r3, r2
 801fdae:	005b      	lsls	r3, r3, #1
 801fdb0:	4413      	add	r3, r2
 801fdb2:	00db      	lsls	r3, r3, #3
 801fdb4:	440b      	add	r3, r1
 801fdb6:	3314      	adds	r3, #20
 801fdb8:	2203      	movs	r2, #3
 801fdba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801fdbc:	68fb      	ldr	r3, [r7, #12]
 801fdbe:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801fdc2:	79fa      	ldrb	r2, [r7, #7]
 801fdc4:	4613      	mov	r3, r2
 801fdc6:	005b      	lsls	r3, r3, #1
 801fdc8:	4413      	add	r3, r2
 801fdca:	00db      	lsls	r3, r3, #3
 801fdcc:	3308      	adds	r3, #8
 801fdce:	4a08      	ldr	r2, [pc, #32]	; (801fdf0 <etharp_output_to_arp_index+0x124>)
 801fdd0:	4413      	add	r3, r2
 801fdd2:	3304      	adds	r3, #4
 801fdd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801fdd8:	9200      	str	r2, [sp, #0]
 801fdda:	460a      	mov	r2, r1
 801fddc:	68b9      	ldr	r1, [r7, #8]
 801fdde:	68f8      	ldr	r0, [r7, #12]
 801fde0:	f001 feee 	bl	8021bc0 <ethernet_output>
 801fde4:	4603      	mov	r3, r0
}
 801fde6:	4618      	mov	r0, r3
 801fde8:	3710      	adds	r7, #16
 801fdea:	46bd      	mov	sp, r7
 801fdec:	bd80      	pop	{r7, pc}
 801fdee:	bf00      	nop
 801fdf0:	200132c4 	.word	0x200132c4
 801fdf4:	0802a60c 	.word	0x0802a60c
 801fdf8:	0802a77c 	.word	0x0802a77c
 801fdfc:	0802a684 	.word	0x0802a684

0801fe00 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801fe00:	b580      	push	{r7, lr}
 801fe02:	b08a      	sub	sp, #40	; 0x28
 801fe04:	af02      	add	r7, sp, #8
 801fe06:	60f8      	str	r0, [r7, #12]
 801fe08:	60b9      	str	r1, [r7, #8]
 801fe0a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801fe0c:	687b      	ldr	r3, [r7, #4]
 801fe0e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801fe10:	68fb      	ldr	r3, [r7, #12]
 801fe12:	2b00      	cmp	r3, #0
 801fe14:	d106      	bne.n	801fe24 <etharp_output+0x24>
 801fe16:	4b73      	ldr	r3, [pc, #460]	; (801ffe4 <etharp_output+0x1e4>)
 801fe18:	f240 321e 	movw	r2, #798	; 0x31e
 801fe1c:	4972      	ldr	r1, [pc, #456]	; (801ffe8 <etharp_output+0x1e8>)
 801fe1e:	4873      	ldr	r0, [pc, #460]	; (801ffec <etharp_output+0x1ec>)
 801fe20:	f004 f8da 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801fe24:	68bb      	ldr	r3, [r7, #8]
 801fe26:	2b00      	cmp	r3, #0
 801fe28:	d106      	bne.n	801fe38 <etharp_output+0x38>
 801fe2a:	4b6e      	ldr	r3, [pc, #440]	; (801ffe4 <etharp_output+0x1e4>)
 801fe2c:	f240 321f 	movw	r2, #799	; 0x31f
 801fe30:	496f      	ldr	r1, [pc, #444]	; (801fff0 <etharp_output+0x1f0>)
 801fe32:	486e      	ldr	r0, [pc, #440]	; (801ffec <etharp_output+0x1ec>)
 801fe34:	f004 f8d0 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801fe38:	687b      	ldr	r3, [r7, #4]
 801fe3a:	2b00      	cmp	r3, #0
 801fe3c:	d106      	bne.n	801fe4c <etharp_output+0x4c>
 801fe3e:	4b69      	ldr	r3, [pc, #420]	; (801ffe4 <etharp_output+0x1e4>)
 801fe40:	f44f 7248 	mov.w	r2, #800	; 0x320
 801fe44:	496b      	ldr	r1, [pc, #428]	; (801fff4 <etharp_output+0x1f4>)
 801fe46:	4869      	ldr	r0, [pc, #420]	; (801ffec <etharp_output+0x1ec>)
 801fe48:	f004 f8c6 	bl	8023fd8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801fe4c:	687b      	ldr	r3, [r7, #4]
 801fe4e:	681b      	ldr	r3, [r3, #0]
 801fe50:	68f9      	ldr	r1, [r7, #12]
 801fe52:	4618      	mov	r0, r3
 801fe54:	f000 ff16 	bl	8020c84 <ip4_addr_isbroadcast_u32>
 801fe58:	4603      	mov	r3, r0
 801fe5a:	2b00      	cmp	r3, #0
 801fe5c:	d002      	beq.n	801fe64 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801fe5e:	4b66      	ldr	r3, [pc, #408]	; (801fff8 <etharp_output+0x1f8>)
 801fe60:	61fb      	str	r3, [r7, #28]
 801fe62:	e0af      	b.n	801ffc4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801fe64:	687b      	ldr	r3, [r7, #4]
 801fe66:	681b      	ldr	r3, [r3, #0]
 801fe68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801fe6c:	2be0      	cmp	r3, #224	; 0xe0
 801fe6e:	d118      	bne.n	801fea2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801fe70:	2301      	movs	r3, #1
 801fe72:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801fe74:	2300      	movs	r3, #0
 801fe76:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801fe78:	235e      	movs	r3, #94	; 0x5e
 801fe7a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801fe7c:	687b      	ldr	r3, [r7, #4]
 801fe7e:	3301      	adds	r3, #1
 801fe80:	781b      	ldrb	r3, [r3, #0]
 801fe82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801fe86:	b2db      	uxtb	r3, r3
 801fe88:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801fe8a:	687b      	ldr	r3, [r7, #4]
 801fe8c:	3302      	adds	r3, #2
 801fe8e:	781b      	ldrb	r3, [r3, #0]
 801fe90:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801fe92:	687b      	ldr	r3, [r7, #4]
 801fe94:	3303      	adds	r3, #3
 801fe96:	781b      	ldrb	r3, [r3, #0]
 801fe98:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801fe9a:	f107 0310 	add.w	r3, r7, #16
 801fe9e:	61fb      	str	r3, [r7, #28]
 801fea0:	e090      	b.n	801ffc4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801fea2:	687b      	ldr	r3, [r7, #4]
 801fea4:	681a      	ldr	r2, [r3, #0]
 801fea6:	68fb      	ldr	r3, [r7, #12]
 801fea8:	3304      	adds	r3, #4
 801feaa:	681b      	ldr	r3, [r3, #0]
 801feac:	405a      	eors	r2, r3
 801feae:	68fb      	ldr	r3, [r7, #12]
 801feb0:	3308      	adds	r3, #8
 801feb2:	681b      	ldr	r3, [r3, #0]
 801feb4:	4013      	ands	r3, r2
 801feb6:	2b00      	cmp	r3, #0
 801feb8:	d012      	beq.n	801fee0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801feba:	687b      	ldr	r3, [r7, #4]
 801febc:	681b      	ldr	r3, [r3, #0]
 801febe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801fec0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801fec4:	4293      	cmp	r3, r2
 801fec6:	d00b      	beq.n	801fee0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801fec8:	68fb      	ldr	r3, [r7, #12]
 801feca:	330c      	adds	r3, #12
 801fecc:	681b      	ldr	r3, [r3, #0]
 801fece:	2b00      	cmp	r3, #0
 801fed0:	d003      	beq.n	801feda <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801fed2:	68fb      	ldr	r3, [r7, #12]
 801fed4:	330c      	adds	r3, #12
 801fed6:	61bb      	str	r3, [r7, #24]
 801fed8:	e002      	b.n	801fee0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801feda:	f06f 0303 	mvn.w	r3, #3
 801fede:	e07d      	b.n	801ffdc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801fee0:	4b46      	ldr	r3, [pc, #280]	; (801fffc <etharp_output+0x1fc>)
 801fee2:	781b      	ldrb	r3, [r3, #0]
 801fee4:	4619      	mov	r1, r3
 801fee6:	4a46      	ldr	r2, [pc, #280]	; (8020000 <etharp_output+0x200>)
 801fee8:	460b      	mov	r3, r1
 801feea:	005b      	lsls	r3, r3, #1
 801feec:	440b      	add	r3, r1
 801feee:	00db      	lsls	r3, r3, #3
 801fef0:	4413      	add	r3, r2
 801fef2:	3314      	adds	r3, #20
 801fef4:	781b      	ldrb	r3, [r3, #0]
 801fef6:	2b01      	cmp	r3, #1
 801fef8:	d925      	bls.n	801ff46 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801fefa:	4b40      	ldr	r3, [pc, #256]	; (801fffc <etharp_output+0x1fc>)
 801fefc:	781b      	ldrb	r3, [r3, #0]
 801fefe:	4619      	mov	r1, r3
 801ff00:	4a3f      	ldr	r2, [pc, #252]	; (8020000 <etharp_output+0x200>)
 801ff02:	460b      	mov	r3, r1
 801ff04:	005b      	lsls	r3, r3, #1
 801ff06:	440b      	add	r3, r1
 801ff08:	00db      	lsls	r3, r3, #3
 801ff0a:	4413      	add	r3, r2
 801ff0c:	3308      	adds	r3, #8
 801ff0e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ff10:	68fa      	ldr	r2, [r7, #12]
 801ff12:	429a      	cmp	r2, r3
 801ff14:	d117      	bne.n	801ff46 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801ff16:	69bb      	ldr	r3, [r7, #24]
 801ff18:	681a      	ldr	r2, [r3, #0]
 801ff1a:	4b38      	ldr	r3, [pc, #224]	; (801fffc <etharp_output+0x1fc>)
 801ff1c:	781b      	ldrb	r3, [r3, #0]
 801ff1e:	4618      	mov	r0, r3
 801ff20:	4937      	ldr	r1, [pc, #220]	; (8020000 <etharp_output+0x200>)
 801ff22:	4603      	mov	r3, r0
 801ff24:	005b      	lsls	r3, r3, #1
 801ff26:	4403      	add	r3, r0
 801ff28:	00db      	lsls	r3, r3, #3
 801ff2a:	440b      	add	r3, r1
 801ff2c:	3304      	adds	r3, #4
 801ff2e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801ff30:	429a      	cmp	r2, r3
 801ff32:	d108      	bne.n	801ff46 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801ff34:	4b31      	ldr	r3, [pc, #196]	; (801fffc <etharp_output+0x1fc>)
 801ff36:	781b      	ldrb	r3, [r3, #0]
 801ff38:	461a      	mov	r2, r3
 801ff3a:	68b9      	ldr	r1, [r7, #8]
 801ff3c:	68f8      	ldr	r0, [r7, #12]
 801ff3e:	f7ff fec5 	bl	801fccc <etharp_output_to_arp_index>
 801ff42:	4603      	mov	r3, r0
 801ff44:	e04a      	b.n	801ffdc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ff46:	2300      	movs	r3, #0
 801ff48:	75fb      	strb	r3, [r7, #23]
 801ff4a:	e031      	b.n	801ffb0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ff4c:	7dfa      	ldrb	r2, [r7, #23]
 801ff4e:	492c      	ldr	r1, [pc, #176]	; (8020000 <etharp_output+0x200>)
 801ff50:	4613      	mov	r3, r2
 801ff52:	005b      	lsls	r3, r3, #1
 801ff54:	4413      	add	r3, r2
 801ff56:	00db      	lsls	r3, r3, #3
 801ff58:	440b      	add	r3, r1
 801ff5a:	3314      	adds	r3, #20
 801ff5c:	781b      	ldrb	r3, [r3, #0]
 801ff5e:	2b01      	cmp	r3, #1
 801ff60:	d923      	bls.n	801ffaa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801ff62:	7dfa      	ldrb	r2, [r7, #23]
 801ff64:	4926      	ldr	r1, [pc, #152]	; (8020000 <etharp_output+0x200>)
 801ff66:	4613      	mov	r3, r2
 801ff68:	005b      	lsls	r3, r3, #1
 801ff6a:	4413      	add	r3, r2
 801ff6c:	00db      	lsls	r3, r3, #3
 801ff6e:	440b      	add	r3, r1
 801ff70:	3308      	adds	r3, #8
 801ff72:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ff74:	68fa      	ldr	r2, [r7, #12]
 801ff76:	429a      	cmp	r2, r3
 801ff78:	d117      	bne.n	801ffaa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801ff7a:	69bb      	ldr	r3, [r7, #24]
 801ff7c:	6819      	ldr	r1, [r3, #0]
 801ff7e:	7dfa      	ldrb	r2, [r7, #23]
 801ff80:	481f      	ldr	r0, [pc, #124]	; (8020000 <etharp_output+0x200>)
 801ff82:	4613      	mov	r3, r2
 801ff84:	005b      	lsls	r3, r3, #1
 801ff86:	4413      	add	r3, r2
 801ff88:	00db      	lsls	r3, r3, #3
 801ff8a:	4403      	add	r3, r0
 801ff8c:	3304      	adds	r3, #4
 801ff8e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801ff90:	4299      	cmp	r1, r3
 801ff92:	d10a      	bne.n	801ffaa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801ff94:	4a19      	ldr	r2, [pc, #100]	; (801fffc <etharp_output+0x1fc>)
 801ff96:	7dfb      	ldrb	r3, [r7, #23]
 801ff98:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801ff9a:	7dfb      	ldrb	r3, [r7, #23]
 801ff9c:	461a      	mov	r2, r3
 801ff9e:	68b9      	ldr	r1, [r7, #8]
 801ffa0:	68f8      	ldr	r0, [r7, #12]
 801ffa2:	f7ff fe93 	bl	801fccc <etharp_output_to_arp_index>
 801ffa6:	4603      	mov	r3, r0
 801ffa8:	e018      	b.n	801ffdc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ffaa:	7dfb      	ldrb	r3, [r7, #23]
 801ffac:	3301      	adds	r3, #1
 801ffae:	75fb      	strb	r3, [r7, #23]
 801ffb0:	7dfb      	ldrb	r3, [r7, #23]
 801ffb2:	2b09      	cmp	r3, #9
 801ffb4:	d9ca      	bls.n	801ff4c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801ffb6:	68ba      	ldr	r2, [r7, #8]
 801ffb8:	69b9      	ldr	r1, [r7, #24]
 801ffba:	68f8      	ldr	r0, [r7, #12]
 801ffbc:	f000 f822 	bl	8020004 <etharp_query>
 801ffc0:	4603      	mov	r3, r0
 801ffc2:	e00b      	b.n	801ffdc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801ffc4:	68fb      	ldr	r3, [r7, #12]
 801ffc6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801ffca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ffce:	9300      	str	r3, [sp, #0]
 801ffd0:	69fb      	ldr	r3, [r7, #28]
 801ffd2:	68b9      	ldr	r1, [r7, #8]
 801ffd4:	68f8      	ldr	r0, [r7, #12]
 801ffd6:	f001 fdf3 	bl	8021bc0 <ethernet_output>
 801ffda:	4603      	mov	r3, r0
}
 801ffdc:	4618      	mov	r0, r3
 801ffde:	3720      	adds	r7, #32
 801ffe0:	46bd      	mov	sp, r7
 801ffe2:	bd80      	pop	{r7, pc}
 801ffe4:	0802a60c 	.word	0x0802a60c
 801ffe8:	0802a75c 	.word	0x0802a75c
 801ffec:	0802a684 	.word	0x0802a684
 801fff0:	0802a7ac 	.word	0x0802a7ac
 801fff4:	0802a74c 	.word	0x0802a74c
 801fff8:	0802af78 	.word	0x0802af78
 801fffc:	200133b4 	.word	0x200133b4
 8020000:	200132c4 	.word	0x200132c4

08020004 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8020004:	b580      	push	{r7, lr}
 8020006:	b08c      	sub	sp, #48	; 0x30
 8020008:	af02      	add	r7, sp, #8
 802000a:	60f8      	str	r0, [r7, #12]
 802000c:	60b9      	str	r1, [r7, #8]
 802000e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8020010:	68fb      	ldr	r3, [r7, #12]
 8020012:	332a      	adds	r3, #42	; 0x2a
 8020014:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8020016:	23ff      	movs	r3, #255	; 0xff
 8020018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 802001c:	2300      	movs	r3, #0
 802001e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8020020:	68bb      	ldr	r3, [r7, #8]
 8020022:	681b      	ldr	r3, [r3, #0]
 8020024:	68f9      	ldr	r1, [r7, #12]
 8020026:	4618      	mov	r0, r3
 8020028:	f000 fe2c 	bl	8020c84 <ip4_addr_isbroadcast_u32>
 802002c:	4603      	mov	r3, r0
 802002e:	2b00      	cmp	r3, #0
 8020030:	d10c      	bne.n	802004c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8020032:	68bb      	ldr	r3, [r7, #8]
 8020034:	681b      	ldr	r3, [r3, #0]
 8020036:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 802003a:	2be0      	cmp	r3, #224	; 0xe0
 802003c:	d006      	beq.n	802004c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 802003e:	68bb      	ldr	r3, [r7, #8]
 8020040:	2b00      	cmp	r3, #0
 8020042:	d003      	beq.n	802004c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8020044:	68bb      	ldr	r3, [r7, #8]
 8020046:	681b      	ldr	r3, [r3, #0]
 8020048:	2b00      	cmp	r3, #0
 802004a:	d102      	bne.n	8020052 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 802004c:	f06f 030f 	mvn.w	r3, #15
 8020050:	e101      	b.n	8020256 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8020052:	68fa      	ldr	r2, [r7, #12]
 8020054:	2101      	movs	r1, #1
 8020056:	68b8      	ldr	r0, [r7, #8]
 8020058:	f7ff fb5c 	bl	801f714 <etharp_find_entry>
 802005c:	4603      	mov	r3, r0
 802005e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8020060:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8020064:	2b00      	cmp	r3, #0
 8020066:	da02      	bge.n	802006e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8020068:	8a7b      	ldrh	r3, [r7, #18]
 802006a:	b25b      	sxtb	r3, r3
 802006c:	e0f3      	b.n	8020256 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 802006e:	8a7b      	ldrh	r3, [r7, #18]
 8020070:	2b7e      	cmp	r3, #126	; 0x7e
 8020072:	d906      	bls.n	8020082 <etharp_query+0x7e>
 8020074:	4b7a      	ldr	r3, [pc, #488]	; (8020260 <etharp_query+0x25c>)
 8020076:	f240 32c1 	movw	r2, #961	; 0x3c1
 802007a:	497a      	ldr	r1, [pc, #488]	; (8020264 <etharp_query+0x260>)
 802007c:	487a      	ldr	r0, [pc, #488]	; (8020268 <etharp_query+0x264>)
 802007e:	f003 ffab 	bl	8023fd8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8020082:	8a7b      	ldrh	r3, [r7, #18]
 8020084:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8020086:	7c7a      	ldrb	r2, [r7, #17]
 8020088:	4978      	ldr	r1, [pc, #480]	; (802026c <etharp_query+0x268>)
 802008a:	4613      	mov	r3, r2
 802008c:	005b      	lsls	r3, r3, #1
 802008e:	4413      	add	r3, r2
 8020090:	00db      	lsls	r3, r3, #3
 8020092:	440b      	add	r3, r1
 8020094:	3314      	adds	r3, #20
 8020096:	781b      	ldrb	r3, [r3, #0]
 8020098:	2b00      	cmp	r3, #0
 802009a:	d115      	bne.n	80200c8 <etharp_query+0xc4>
    is_new_entry = 1;
 802009c:	2301      	movs	r3, #1
 802009e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80200a0:	7c7a      	ldrb	r2, [r7, #17]
 80200a2:	4972      	ldr	r1, [pc, #456]	; (802026c <etharp_query+0x268>)
 80200a4:	4613      	mov	r3, r2
 80200a6:	005b      	lsls	r3, r3, #1
 80200a8:	4413      	add	r3, r2
 80200aa:	00db      	lsls	r3, r3, #3
 80200ac:	440b      	add	r3, r1
 80200ae:	3314      	adds	r3, #20
 80200b0:	2201      	movs	r2, #1
 80200b2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80200b4:	7c7a      	ldrb	r2, [r7, #17]
 80200b6:	496d      	ldr	r1, [pc, #436]	; (802026c <etharp_query+0x268>)
 80200b8:	4613      	mov	r3, r2
 80200ba:	005b      	lsls	r3, r3, #1
 80200bc:	4413      	add	r3, r2
 80200be:	00db      	lsls	r3, r3, #3
 80200c0:	440b      	add	r3, r1
 80200c2:	3308      	adds	r3, #8
 80200c4:	68fa      	ldr	r2, [r7, #12]
 80200c6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80200c8:	7c7a      	ldrb	r2, [r7, #17]
 80200ca:	4968      	ldr	r1, [pc, #416]	; (802026c <etharp_query+0x268>)
 80200cc:	4613      	mov	r3, r2
 80200ce:	005b      	lsls	r3, r3, #1
 80200d0:	4413      	add	r3, r2
 80200d2:	00db      	lsls	r3, r3, #3
 80200d4:	440b      	add	r3, r1
 80200d6:	3314      	adds	r3, #20
 80200d8:	781b      	ldrb	r3, [r3, #0]
 80200da:	2b01      	cmp	r3, #1
 80200dc:	d011      	beq.n	8020102 <etharp_query+0xfe>
 80200de:	7c7a      	ldrb	r2, [r7, #17]
 80200e0:	4962      	ldr	r1, [pc, #392]	; (802026c <etharp_query+0x268>)
 80200e2:	4613      	mov	r3, r2
 80200e4:	005b      	lsls	r3, r3, #1
 80200e6:	4413      	add	r3, r2
 80200e8:	00db      	lsls	r3, r3, #3
 80200ea:	440b      	add	r3, r1
 80200ec:	3314      	adds	r3, #20
 80200ee:	781b      	ldrb	r3, [r3, #0]
 80200f0:	2b01      	cmp	r3, #1
 80200f2:	d806      	bhi.n	8020102 <etharp_query+0xfe>
 80200f4:	4b5a      	ldr	r3, [pc, #360]	; (8020260 <etharp_query+0x25c>)
 80200f6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80200fa:	495d      	ldr	r1, [pc, #372]	; (8020270 <etharp_query+0x26c>)
 80200fc:	485a      	ldr	r0, [pc, #360]	; (8020268 <etharp_query+0x264>)
 80200fe:	f003 ff6b 	bl	8023fd8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8020102:	6a3b      	ldr	r3, [r7, #32]
 8020104:	2b00      	cmp	r3, #0
 8020106:	d102      	bne.n	802010e <etharp_query+0x10a>
 8020108:	687b      	ldr	r3, [r7, #4]
 802010a:	2b00      	cmp	r3, #0
 802010c:	d10c      	bne.n	8020128 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 802010e:	68b9      	ldr	r1, [r7, #8]
 8020110:	68f8      	ldr	r0, [r7, #12]
 8020112:	f000 f963 	bl	80203dc <etharp_request>
 8020116:	4603      	mov	r3, r0
 8020118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 802011c:	687b      	ldr	r3, [r7, #4]
 802011e:	2b00      	cmp	r3, #0
 8020120:	d102      	bne.n	8020128 <etharp_query+0x124>
      return result;
 8020122:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8020126:	e096      	b.n	8020256 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8020128:	687b      	ldr	r3, [r7, #4]
 802012a:	2b00      	cmp	r3, #0
 802012c:	d106      	bne.n	802013c <etharp_query+0x138>
 802012e:	4b4c      	ldr	r3, [pc, #304]	; (8020260 <etharp_query+0x25c>)
 8020130:	f240 32e1 	movw	r2, #993	; 0x3e1
 8020134:	494f      	ldr	r1, [pc, #316]	; (8020274 <etharp_query+0x270>)
 8020136:	484c      	ldr	r0, [pc, #304]	; (8020268 <etharp_query+0x264>)
 8020138:	f003 ff4e 	bl	8023fd8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 802013c:	7c7a      	ldrb	r2, [r7, #17]
 802013e:	494b      	ldr	r1, [pc, #300]	; (802026c <etharp_query+0x268>)
 8020140:	4613      	mov	r3, r2
 8020142:	005b      	lsls	r3, r3, #1
 8020144:	4413      	add	r3, r2
 8020146:	00db      	lsls	r3, r3, #3
 8020148:	440b      	add	r3, r1
 802014a:	3314      	adds	r3, #20
 802014c:	781b      	ldrb	r3, [r3, #0]
 802014e:	2b01      	cmp	r3, #1
 8020150:	d917      	bls.n	8020182 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8020152:	4a49      	ldr	r2, [pc, #292]	; (8020278 <etharp_query+0x274>)
 8020154:	7c7b      	ldrb	r3, [r7, #17]
 8020156:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8020158:	7c7a      	ldrb	r2, [r7, #17]
 802015a:	4613      	mov	r3, r2
 802015c:	005b      	lsls	r3, r3, #1
 802015e:	4413      	add	r3, r2
 8020160:	00db      	lsls	r3, r3, #3
 8020162:	3308      	adds	r3, #8
 8020164:	4a41      	ldr	r2, [pc, #260]	; (802026c <etharp_query+0x268>)
 8020166:	4413      	add	r3, r2
 8020168:	3304      	adds	r3, #4
 802016a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802016e:	9200      	str	r2, [sp, #0]
 8020170:	697a      	ldr	r2, [r7, #20]
 8020172:	6879      	ldr	r1, [r7, #4]
 8020174:	68f8      	ldr	r0, [r7, #12]
 8020176:	f001 fd23 	bl	8021bc0 <ethernet_output>
 802017a:	4603      	mov	r3, r0
 802017c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020180:	e067      	b.n	8020252 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8020182:	7c7a      	ldrb	r2, [r7, #17]
 8020184:	4939      	ldr	r1, [pc, #228]	; (802026c <etharp_query+0x268>)
 8020186:	4613      	mov	r3, r2
 8020188:	005b      	lsls	r3, r3, #1
 802018a:	4413      	add	r3, r2
 802018c:	00db      	lsls	r3, r3, #3
 802018e:	440b      	add	r3, r1
 8020190:	3314      	adds	r3, #20
 8020192:	781b      	ldrb	r3, [r3, #0]
 8020194:	2b01      	cmp	r3, #1
 8020196:	d15c      	bne.n	8020252 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8020198:	2300      	movs	r3, #0
 802019a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 802019c:	687b      	ldr	r3, [r7, #4]
 802019e:	61fb      	str	r3, [r7, #28]
    while (p) {
 80201a0:	e01c      	b.n	80201dc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80201a2:	69fb      	ldr	r3, [r7, #28]
 80201a4:	895a      	ldrh	r2, [r3, #10]
 80201a6:	69fb      	ldr	r3, [r7, #28]
 80201a8:	891b      	ldrh	r3, [r3, #8]
 80201aa:	429a      	cmp	r2, r3
 80201ac:	d10a      	bne.n	80201c4 <etharp_query+0x1c0>
 80201ae:	69fb      	ldr	r3, [r7, #28]
 80201b0:	681b      	ldr	r3, [r3, #0]
 80201b2:	2b00      	cmp	r3, #0
 80201b4:	d006      	beq.n	80201c4 <etharp_query+0x1c0>
 80201b6:	4b2a      	ldr	r3, [pc, #168]	; (8020260 <etharp_query+0x25c>)
 80201b8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80201bc:	492f      	ldr	r1, [pc, #188]	; (802027c <etharp_query+0x278>)
 80201be:	482a      	ldr	r0, [pc, #168]	; (8020268 <etharp_query+0x264>)
 80201c0:	f003 ff0a 	bl	8023fd8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80201c4:	69fb      	ldr	r3, [r7, #28]
 80201c6:	7b1b      	ldrb	r3, [r3, #12]
 80201c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80201cc:	2b00      	cmp	r3, #0
 80201ce:	d002      	beq.n	80201d6 <etharp_query+0x1d2>
        copy_needed = 1;
 80201d0:	2301      	movs	r3, #1
 80201d2:	61bb      	str	r3, [r7, #24]
        break;
 80201d4:	e005      	b.n	80201e2 <etharp_query+0x1de>
      }
      p = p->next;
 80201d6:	69fb      	ldr	r3, [r7, #28]
 80201d8:	681b      	ldr	r3, [r3, #0]
 80201da:	61fb      	str	r3, [r7, #28]
    while (p) {
 80201dc:	69fb      	ldr	r3, [r7, #28]
 80201de:	2b00      	cmp	r3, #0
 80201e0:	d1df      	bne.n	80201a2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80201e2:	69bb      	ldr	r3, [r7, #24]
 80201e4:	2b00      	cmp	r3, #0
 80201e6:	d007      	beq.n	80201f8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80201e8:	687a      	ldr	r2, [r7, #4]
 80201ea:	f44f 7120 	mov.w	r1, #640	; 0x280
 80201ee:	200e      	movs	r0, #14
 80201f0:	f7f6 fbc4 	bl	801697c <pbuf_clone>
 80201f4:	61f8      	str	r0, [r7, #28]
 80201f6:	e004      	b.n	8020202 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80201f8:	687b      	ldr	r3, [r7, #4]
 80201fa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80201fc:	69f8      	ldr	r0, [r7, #28]
 80201fe:	f7f6 f9eb 	bl	80165d8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8020202:	69fb      	ldr	r3, [r7, #28]
 8020204:	2b00      	cmp	r3, #0
 8020206:	d021      	beq.n	802024c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8020208:	7c7a      	ldrb	r2, [r7, #17]
 802020a:	4918      	ldr	r1, [pc, #96]	; (802026c <etharp_query+0x268>)
 802020c:	4613      	mov	r3, r2
 802020e:	005b      	lsls	r3, r3, #1
 8020210:	4413      	add	r3, r2
 8020212:	00db      	lsls	r3, r3, #3
 8020214:	440b      	add	r3, r1
 8020216:	681b      	ldr	r3, [r3, #0]
 8020218:	2b00      	cmp	r3, #0
 802021a:	d00a      	beq.n	8020232 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 802021c:	7c7a      	ldrb	r2, [r7, #17]
 802021e:	4913      	ldr	r1, [pc, #76]	; (802026c <etharp_query+0x268>)
 8020220:	4613      	mov	r3, r2
 8020222:	005b      	lsls	r3, r3, #1
 8020224:	4413      	add	r3, r2
 8020226:	00db      	lsls	r3, r3, #3
 8020228:	440b      	add	r3, r1
 802022a:	681b      	ldr	r3, [r3, #0]
 802022c:	4618      	mov	r0, r3
 802022e:	f7f6 f92d 	bl	801648c <pbuf_free>
      }
      arp_table[i].q = p;
 8020232:	7c7a      	ldrb	r2, [r7, #17]
 8020234:	490d      	ldr	r1, [pc, #52]	; (802026c <etharp_query+0x268>)
 8020236:	4613      	mov	r3, r2
 8020238:	005b      	lsls	r3, r3, #1
 802023a:	4413      	add	r3, r2
 802023c:	00db      	lsls	r3, r3, #3
 802023e:	440b      	add	r3, r1
 8020240:	69fa      	ldr	r2, [r7, #28]
 8020242:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8020244:	2300      	movs	r3, #0
 8020246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802024a:	e002      	b.n	8020252 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 802024c:	23ff      	movs	r3, #255	; 0xff
 802024e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8020252:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8020256:	4618      	mov	r0, r3
 8020258:	3728      	adds	r7, #40	; 0x28
 802025a:	46bd      	mov	sp, r7
 802025c:	bd80      	pop	{r7, pc}
 802025e:	bf00      	nop
 8020260:	0802a60c 	.word	0x0802a60c
 8020264:	0802a7b8 	.word	0x0802a7b8
 8020268:	0802a684 	.word	0x0802a684
 802026c:	200132c4 	.word	0x200132c4
 8020270:	0802a7c8 	.word	0x0802a7c8
 8020274:	0802a7ac 	.word	0x0802a7ac
 8020278:	200133b4 	.word	0x200133b4
 802027c:	0802a7f0 	.word	0x0802a7f0

08020280 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8020280:	b580      	push	{r7, lr}
 8020282:	b08a      	sub	sp, #40	; 0x28
 8020284:	af02      	add	r7, sp, #8
 8020286:	60f8      	str	r0, [r7, #12]
 8020288:	60b9      	str	r1, [r7, #8]
 802028a:	607a      	str	r2, [r7, #4]
 802028c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 802028e:	2300      	movs	r3, #0
 8020290:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8020292:	68fb      	ldr	r3, [r7, #12]
 8020294:	2b00      	cmp	r3, #0
 8020296:	d106      	bne.n	80202a6 <etharp_raw+0x26>
 8020298:	4b3a      	ldr	r3, [pc, #232]	; (8020384 <etharp_raw+0x104>)
 802029a:	f240 4257 	movw	r2, #1111	; 0x457
 802029e:	493a      	ldr	r1, [pc, #232]	; (8020388 <etharp_raw+0x108>)
 80202a0:	483a      	ldr	r0, [pc, #232]	; (802038c <etharp_raw+0x10c>)
 80202a2:	f003 fe99 	bl	8023fd8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80202a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80202aa:	211c      	movs	r1, #28
 80202ac:	200e      	movs	r0, #14
 80202ae:	f7f5 fe09 	bl	8015ec4 <pbuf_alloc>
 80202b2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80202b4:	69bb      	ldr	r3, [r7, #24]
 80202b6:	2b00      	cmp	r3, #0
 80202b8:	d102      	bne.n	80202c0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80202ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80202be:	e05d      	b.n	802037c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80202c0:	69bb      	ldr	r3, [r7, #24]
 80202c2:	895b      	ldrh	r3, [r3, #10]
 80202c4:	2b1b      	cmp	r3, #27
 80202c6:	d806      	bhi.n	80202d6 <etharp_raw+0x56>
 80202c8:	4b2e      	ldr	r3, [pc, #184]	; (8020384 <etharp_raw+0x104>)
 80202ca:	f240 4262 	movw	r2, #1122	; 0x462
 80202ce:	4930      	ldr	r1, [pc, #192]	; (8020390 <etharp_raw+0x110>)
 80202d0:	482e      	ldr	r0, [pc, #184]	; (802038c <etharp_raw+0x10c>)
 80202d2:	f003 fe81 	bl	8023fd8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80202d6:	69bb      	ldr	r3, [r7, #24]
 80202d8:	685b      	ldr	r3, [r3, #4]
 80202da:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80202dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80202de:	4618      	mov	r0, r3
 80202e0:	f7f4 fcd6 	bl	8014c90 <lwip_htons>
 80202e4:	4603      	mov	r3, r0
 80202e6:	461a      	mov	r2, r3
 80202e8:	697b      	ldr	r3, [r7, #20]
 80202ea:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80202ec:	68fb      	ldr	r3, [r7, #12]
 80202ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80202f2:	2b06      	cmp	r3, #6
 80202f4:	d006      	beq.n	8020304 <etharp_raw+0x84>
 80202f6:	4b23      	ldr	r3, [pc, #140]	; (8020384 <etharp_raw+0x104>)
 80202f8:	f240 4269 	movw	r2, #1129	; 0x469
 80202fc:	4925      	ldr	r1, [pc, #148]	; (8020394 <etharp_raw+0x114>)
 80202fe:	4823      	ldr	r0, [pc, #140]	; (802038c <etharp_raw+0x10c>)
 8020300:	f003 fe6a 	bl	8023fd8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8020304:	697b      	ldr	r3, [r7, #20]
 8020306:	3308      	adds	r3, #8
 8020308:	2206      	movs	r2, #6
 802030a:	6839      	ldr	r1, [r7, #0]
 802030c:	4618      	mov	r0, r3
 802030e:	f004 f94c 	bl	80245aa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8020312:	697b      	ldr	r3, [r7, #20]
 8020314:	3312      	adds	r3, #18
 8020316:	2206      	movs	r2, #6
 8020318:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802031a:	4618      	mov	r0, r3
 802031c:	f004 f945 	bl	80245aa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8020320:	697b      	ldr	r3, [r7, #20]
 8020322:	330e      	adds	r3, #14
 8020324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020326:	6812      	ldr	r2, [r2, #0]
 8020328:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 802032a:	697b      	ldr	r3, [r7, #20]
 802032c:	3318      	adds	r3, #24
 802032e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020330:	6812      	ldr	r2, [r2, #0]
 8020332:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8020334:	697b      	ldr	r3, [r7, #20]
 8020336:	2200      	movs	r2, #0
 8020338:	701a      	strb	r2, [r3, #0]
 802033a:	2200      	movs	r2, #0
 802033c:	f042 0201 	orr.w	r2, r2, #1
 8020340:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8020342:	697b      	ldr	r3, [r7, #20]
 8020344:	2200      	movs	r2, #0
 8020346:	f042 0208 	orr.w	r2, r2, #8
 802034a:	709a      	strb	r2, [r3, #2]
 802034c:	2200      	movs	r2, #0
 802034e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8020350:	697b      	ldr	r3, [r7, #20]
 8020352:	2206      	movs	r2, #6
 8020354:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8020356:	697b      	ldr	r3, [r7, #20]
 8020358:	2204      	movs	r2, #4
 802035a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 802035c:	f640 0306 	movw	r3, #2054	; 0x806
 8020360:	9300      	str	r3, [sp, #0]
 8020362:	687b      	ldr	r3, [r7, #4]
 8020364:	68ba      	ldr	r2, [r7, #8]
 8020366:	69b9      	ldr	r1, [r7, #24]
 8020368:	68f8      	ldr	r0, [r7, #12]
 802036a:	f001 fc29 	bl	8021bc0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 802036e:	69b8      	ldr	r0, [r7, #24]
 8020370:	f7f6 f88c 	bl	801648c <pbuf_free>
  p = NULL;
 8020374:	2300      	movs	r3, #0
 8020376:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8020378:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 802037c:	4618      	mov	r0, r3
 802037e:	3720      	adds	r7, #32
 8020380:	46bd      	mov	sp, r7
 8020382:	bd80      	pop	{r7, pc}
 8020384:	0802a60c 	.word	0x0802a60c
 8020388:	0802a75c 	.word	0x0802a75c
 802038c:	0802a684 	.word	0x0802a684
 8020390:	0802a80c 	.word	0x0802a80c
 8020394:	0802a840 	.word	0x0802a840

08020398 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8020398:	b580      	push	{r7, lr}
 802039a:	b088      	sub	sp, #32
 802039c:	af04      	add	r7, sp, #16
 802039e:	60f8      	str	r0, [r7, #12]
 80203a0:	60b9      	str	r1, [r7, #8]
 80203a2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80203a4:	68fb      	ldr	r3, [r7, #12]
 80203a6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80203aa:	68fb      	ldr	r3, [r7, #12]
 80203ac:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80203b0:	68fb      	ldr	r3, [r7, #12]
 80203b2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80203b4:	2201      	movs	r2, #1
 80203b6:	9203      	str	r2, [sp, #12]
 80203b8:	68ba      	ldr	r2, [r7, #8]
 80203ba:	9202      	str	r2, [sp, #8]
 80203bc:	4a06      	ldr	r2, [pc, #24]	; (80203d8 <etharp_request_dst+0x40>)
 80203be:	9201      	str	r2, [sp, #4]
 80203c0:	9300      	str	r3, [sp, #0]
 80203c2:	4603      	mov	r3, r0
 80203c4:	687a      	ldr	r2, [r7, #4]
 80203c6:	68f8      	ldr	r0, [r7, #12]
 80203c8:	f7ff ff5a 	bl	8020280 <etharp_raw>
 80203cc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80203ce:	4618      	mov	r0, r3
 80203d0:	3710      	adds	r7, #16
 80203d2:	46bd      	mov	sp, r7
 80203d4:	bd80      	pop	{r7, pc}
 80203d6:	bf00      	nop
 80203d8:	0802af80 	.word	0x0802af80

080203dc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80203dc:	b580      	push	{r7, lr}
 80203de:	b082      	sub	sp, #8
 80203e0:	af00      	add	r7, sp, #0
 80203e2:	6078      	str	r0, [r7, #4]
 80203e4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80203e6:	4a05      	ldr	r2, [pc, #20]	; (80203fc <etharp_request+0x20>)
 80203e8:	6839      	ldr	r1, [r7, #0]
 80203ea:	6878      	ldr	r0, [r7, #4]
 80203ec:	f7ff ffd4 	bl	8020398 <etharp_request_dst>
 80203f0:	4603      	mov	r3, r0
}
 80203f2:	4618      	mov	r0, r3
 80203f4:	3708      	adds	r7, #8
 80203f6:	46bd      	mov	sp, r7
 80203f8:	bd80      	pop	{r7, pc}
 80203fa:	bf00      	nop
 80203fc:	0802af78 	.word	0x0802af78

08020400 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8020400:	b580      	push	{r7, lr}
 8020402:	b08e      	sub	sp, #56	; 0x38
 8020404:	af04      	add	r7, sp, #16
 8020406:	6078      	str	r0, [r7, #4]
 8020408:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 802040a:	4b79      	ldr	r3, [pc, #484]	; (80205f0 <icmp_input+0x1f0>)
 802040c:	689b      	ldr	r3, [r3, #8]
 802040e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8020410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020412:	781b      	ldrb	r3, [r3, #0]
 8020414:	f003 030f 	and.w	r3, r3, #15
 8020418:	b2db      	uxtb	r3, r3
 802041a:	009b      	lsls	r3, r3, #2
 802041c:	b2db      	uxtb	r3, r3
 802041e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8020420:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020422:	2b13      	cmp	r3, #19
 8020424:	f240 80cd 	bls.w	80205c2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8020428:	687b      	ldr	r3, [r7, #4]
 802042a:	895b      	ldrh	r3, [r3, #10]
 802042c:	2b03      	cmp	r3, #3
 802042e:	f240 80ca 	bls.w	80205c6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8020432:	687b      	ldr	r3, [r7, #4]
 8020434:	685b      	ldr	r3, [r3, #4]
 8020436:	781b      	ldrb	r3, [r3, #0]
 8020438:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 802043c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8020440:	2b00      	cmp	r3, #0
 8020442:	f000 80b7 	beq.w	80205b4 <icmp_input+0x1b4>
 8020446:	2b08      	cmp	r3, #8
 8020448:	f040 80b7 	bne.w	80205ba <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 802044c:	4b69      	ldr	r3, [pc, #420]	; (80205f4 <icmp_input+0x1f4>)
 802044e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020450:	4b67      	ldr	r3, [pc, #412]	; (80205f0 <icmp_input+0x1f0>)
 8020452:	695b      	ldr	r3, [r3, #20]
 8020454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020458:	2be0      	cmp	r3, #224	; 0xe0
 802045a:	f000 80bb 	beq.w	80205d4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 802045e:	4b64      	ldr	r3, [pc, #400]	; (80205f0 <icmp_input+0x1f0>)
 8020460:	695b      	ldr	r3, [r3, #20]
 8020462:	4a63      	ldr	r2, [pc, #396]	; (80205f0 <icmp_input+0x1f0>)
 8020464:	6812      	ldr	r2, [r2, #0]
 8020466:	4611      	mov	r1, r2
 8020468:	4618      	mov	r0, r3
 802046a:	f000 fc0b 	bl	8020c84 <ip4_addr_isbroadcast_u32>
 802046e:	4603      	mov	r3, r0
 8020470:	2b00      	cmp	r3, #0
 8020472:	f040 80b1 	bne.w	80205d8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8020476:	687b      	ldr	r3, [r7, #4]
 8020478:	891b      	ldrh	r3, [r3, #8]
 802047a:	2b07      	cmp	r3, #7
 802047c:	f240 80a5 	bls.w	80205ca <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8020480:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020482:	330e      	adds	r3, #14
 8020484:	4619      	mov	r1, r3
 8020486:	6878      	ldr	r0, [r7, #4]
 8020488:	f7f5 ff6a 	bl	8016360 <pbuf_add_header>
 802048c:	4603      	mov	r3, r0
 802048e:	2b00      	cmp	r3, #0
 8020490:	d04b      	beq.n	802052a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8020492:	687b      	ldr	r3, [r7, #4]
 8020494:	891a      	ldrh	r2, [r3, #8]
 8020496:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020498:	4413      	add	r3, r2
 802049a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 802049c:	687b      	ldr	r3, [r7, #4]
 802049e:	891b      	ldrh	r3, [r3, #8]
 80204a0:	8b7a      	ldrh	r2, [r7, #26]
 80204a2:	429a      	cmp	r2, r3
 80204a4:	f0c0 809a 	bcc.w	80205dc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80204a8:	8b7b      	ldrh	r3, [r7, #26]
 80204aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80204ae:	4619      	mov	r1, r3
 80204b0:	200e      	movs	r0, #14
 80204b2:	f7f5 fd07 	bl	8015ec4 <pbuf_alloc>
 80204b6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80204b8:	697b      	ldr	r3, [r7, #20]
 80204ba:	2b00      	cmp	r3, #0
 80204bc:	f000 8090 	beq.w	80205e0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80204c0:	697b      	ldr	r3, [r7, #20]
 80204c2:	895b      	ldrh	r3, [r3, #10]
 80204c4:	461a      	mov	r2, r3
 80204c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80204c8:	3308      	adds	r3, #8
 80204ca:	429a      	cmp	r2, r3
 80204cc:	d203      	bcs.n	80204d6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80204ce:	6978      	ldr	r0, [r7, #20]
 80204d0:	f7f5 ffdc 	bl	801648c <pbuf_free>
          goto icmperr;
 80204d4:	e085      	b.n	80205e2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80204d6:	697b      	ldr	r3, [r7, #20]
 80204d8:	685b      	ldr	r3, [r3, #4]
 80204da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80204dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80204de:	4618      	mov	r0, r3
 80204e0:	f004 f863 	bl	80245aa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80204e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80204e6:	4619      	mov	r1, r3
 80204e8:	6978      	ldr	r0, [r7, #20]
 80204ea:	f7f5 ff49 	bl	8016380 <pbuf_remove_header>
 80204ee:	4603      	mov	r3, r0
 80204f0:	2b00      	cmp	r3, #0
 80204f2:	d009      	beq.n	8020508 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80204f4:	4b40      	ldr	r3, [pc, #256]	; (80205f8 <icmp_input+0x1f8>)
 80204f6:	22b6      	movs	r2, #182	; 0xb6
 80204f8:	4940      	ldr	r1, [pc, #256]	; (80205fc <icmp_input+0x1fc>)
 80204fa:	4841      	ldr	r0, [pc, #260]	; (8020600 <icmp_input+0x200>)
 80204fc:	f003 fd6c 	bl	8023fd8 <iprintf>
          pbuf_free(r);
 8020500:	6978      	ldr	r0, [r7, #20]
 8020502:	f7f5 ffc3 	bl	801648c <pbuf_free>
          goto icmperr;
 8020506:	e06c      	b.n	80205e2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8020508:	6879      	ldr	r1, [r7, #4]
 802050a:	6978      	ldr	r0, [r7, #20]
 802050c:	f7f6 f8f2 	bl	80166f4 <pbuf_copy>
 8020510:	4603      	mov	r3, r0
 8020512:	2b00      	cmp	r3, #0
 8020514:	d003      	beq.n	802051e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8020516:	6978      	ldr	r0, [r7, #20]
 8020518:	f7f5 ffb8 	bl	801648c <pbuf_free>
          goto icmperr;
 802051c:	e061      	b.n	80205e2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 802051e:	6878      	ldr	r0, [r7, #4]
 8020520:	f7f5 ffb4 	bl	801648c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8020524:	697b      	ldr	r3, [r7, #20]
 8020526:	607b      	str	r3, [r7, #4]
 8020528:	e00f      	b.n	802054a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 802052a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802052c:	330e      	adds	r3, #14
 802052e:	4619      	mov	r1, r3
 8020530:	6878      	ldr	r0, [r7, #4]
 8020532:	f7f5 ff25 	bl	8016380 <pbuf_remove_header>
 8020536:	4603      	mov	r3, r0
 8020538:	2b00      	cmp	r3, #0
 802053a:	d006      	beq.n	802054a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 802053c:	4b2e      	ldr	r3, [pc, #184]	; (80205f8 <icmp_input+0x1f8>)
 802053e:	22c7      	movs	r2, #199	; 0xc7
 8020540:	4930      	ldr	r1, [pc, #192]	; (8020604 <icmp_input+0x204>)
 8020542:	482f      	ldr	r0, [pc, #188]	; (8020600 <icmp_input+0x200>)
 8020544:	f003 fd48 	bl	8023fd8 <iprintf>
          goto icmperr;
 8020548:	e04b      	b.n	80205e2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 802054a:	687b      	ldr	r3, [r7, #4]
 802054c:	685b      	ldr	r3, [r3, #4]
 802054e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8020550:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020552:	4619      	mov	r1, r3
 8020554:	6878      	ldr	r0, [r7, #4]
 8020556:	f7f5 ff03 	bl	8016360 <pbuf_add_header>
 802055a:	4603      	mov	r3, r0
 802055c:	2b00      	cmp	r3, #0
 802055e:	d12b      	bne.n	80205b8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8020560:	687b      	ldr	r3, [r7, #4]
 8020562:	685b      	ldr	r3, [r3, #4]
 8020564:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8020566:	69fb      	ldr	r3, [r7, #28]
 8020568:	681a      	ldr	r2, [r3, #0]
 802056a:	68fb      	ldr	r3, [r7, #12]
 802056c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 802056e:	4b20      	ldr	r3, [pc, #128]	; (80205f0 <icmp_input+0x1f0>)
 8020570:	691a      	ldr	r2, [r3, #16]
 8020572:	68fb      	ldr	r3, [r7, #12]
 8020574:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8020576:	693b      	ldr	r3, [r7, #16]
 8020578:	2200      	movs	r2, #0
 802057a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 802057c:	693b      	ldr	r3, [r7, #16]
 802057e:	2200      	movs	r2, #0
 8020580:	709a      	strb	r2, [r3, #2]
 8020582:	2200      	movs	r2, #0
 8020584:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8020586:	68fb      	ldr	r3, [r7, #12]
 8020588:	22ff      	movs	r2, #255	; 0xff
 802058a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 802058c:	68fb      	ldr	r3, [r7, #12]
 802058e:	2200      	movs	r2, #0
 8020590:	729a      	strb	r2, [r3, #10]
 8020592:	2200      	movs	r2, #0
 8020594:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8020596:	683b      	ldr	r3, [r7, #0]
 8020598:	9302      	str	r3, [sp, #8]
 802059a:	2301      	movs	r3, #1
 802059c:	9301      	str	r3, [sp, #4]
 802059e:	2300      	movs	r3, #0
 80205a0:	9300      	str	r3, [sp, #0]
 80205a2:	23ff      	movs	r3, #255	; 0xff
 80205a4:	2200      	movs	r2, #0
 80205a6:	69f9      	ldr	r1, [r7, #28]
 80205a8:	6878      	ldr	r0, [r7, #4]
 80205aa:	f000 fa93 	bl	8020ad4 <ip4_output_if>
 80205ae:	4603      	mov	r3, r0
 80205b0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80205b2:	e001      	b.n	80205b8 <icmp_input+0x1b8>
      break;
 80205b4:	bf00      	nop
 80205b6:	e000      	b.n	80205ba <icmp_input+0x1ba>
      break;
 80205b8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80205ba:	6878      	ldr	r0, [r7, #4]
 80205bc:	f7f5 ff66 	bl	801648c <pbuf_free>
  return;
 80205c0:	e013      	b.n	80205ea <icmp_input+0x1ea>
    goto lenerr;
 80205c2:	bf00      	nop
 80205c4:	e002      	b.n	80205cc <icmp_input+0x1cc>
    goto lenerr;
 80205c6:	bf00      	nop
 80205c8:	e000      	b.n	80205cc <icmp_input+0x1cc>
        goto lenerr;
 80205ca:	bf00      	nop
lenerr:
  pbuf_free(p);
 80205cc:	6878      	ldr	r0, [r7, #4]
 80205ce:	f7f5 ff5d 	bl	801648c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80205d2:	e00a      	b.n	80205ea <icmp_input+0x1ea>
        goto icmperr;
 80205d4:	bf00      	nop
 80205d6:	e004      	b.n	80205e2 <icmp_input+0x1e2>
        goto icmperr;
 80205d8:	bf00      	nop
 80205da:	e002      	b.n	80205e2 <icmp_input+0x1e2>
          goto icmperr;
 80205dc:	bf00      	nop
 80205de:	e000      	b.n	80205e2 <icmp_input+0x1e2>
          goto icmperr;
 80205e0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80205e2:	6878      	ldr	r0, [r7, #4]
 80205e4:	f7f5 ff52 	bl	801648c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80205e8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80205ea:	3728      	adds	r7, #40	; 0x28
 80205ec:	46bd      	mov	sp, r7
 80205ee:	bd80      	pop	{r7, pc}
 80205f0:	2000fa84 	.word	0x2000fa84
 80205f4:	2000fa98 	.word	0x2000fa98
 80205f8:	0802a884 	.word	0x0802a884
 80205fc:	0802a8bc 	.word	0x0802a8bc
 8020600:	0802a8f4 	.word	0x0802a8f4
 8020604:	0802a91c 	.word	0x0802a91c

08020608 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8020608:	b580      	push	{r7, lr}
 802060a:	b082      	sub	sp, #8
 802060c:	af00      	add	r7, sp, #0
 802060e:	6078      	str	r0, [r7, #4]
 8020610:	460b      	mov	r3, r1
 8020612:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8020614:	78fb      	ldrb	r3, [r7, #3]
 8020616:	461a      	mov	r2, r3
 8020618:	2103      	movs	r1, #3
 802061a:	6878      	ldr	r0, [r7, #4]
 802061c:	f000 f814 	bl	8020648 <icmp_send_response>
}
 8020620:	bf00      	nop
 8020622:	3708      	adds	r7, #8
 8020624:	46bd      	mov	sp, r7
 8020626:	bd80      	pop	{r7, pc}

08020628 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8020628:	b580      	push	{r7, lr}
 802062a:	b082      	sub	sp, #8
 802062c:	af00      	add	r7, sp, #0
 802062e:	6078      	str	r0, [r7, #4]
 8020630:	460b      	mov	r3, r1
 8020632:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8020634:	78fb      	ldrb	r3, [r7, #3]
 8020636:	461a      	mov	r2, r3
 8020638:	210b      	movs	r1, #11
 802063a:	6878      	ldr	r0, [r7, #4]
 802063c:	f000 f804 	bl	8020648 <icmp_send_response>
}
 8020640:	bf00      	nop
 8020642:	3708      	adds	r7, #8
 8020644:	46bd      	mov	sp, r7
 8020646:	bd80      	pop	{r7, pc}

08020648 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8020648:	b580      	push	{r7, lr}
 802064a:	b08c      	sub	sp, #48	; 0x30
 802064c:	af04      	add	r7, sp, #16
 802064e:	6078      	str	r0, [r7, #4]
 8020650:	460b      	mov	r3, r1
 8020652:	70fb      	strb	r3, [r7, #3]
 8020654:	4613      	mov	r3, r2
 8020656:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8020658:	f44f 7220 	mov.w	r2, #640	; 0x280
 802065c:	2124      	movs	r1, #36	; 0x24
 802065e:	2022      	movs	r0, #34	; 0x22
 8020660:	f7f5 fc30 	bl	8015ec4 <pbuf_alloc>
 8020664:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8020666:	69fb      	ldr	r3, [r7, #28]
 8020668:	2b00      	cmp	r3, #0
 802066a:	d04c      	beq.n	8020706 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 802066c:	69fb      	ldr	r3, [r7, #28]
 802066e:	895b      	ldrh	r3, [r3, #10]
 8020670:	2b23      	cmp	r3, #35	; 0x23
 8020672:	d806      	bhi.n	8020682 <icmp_send_response+0x3a>
 8020674:	4b26      	ldr	r3, [pc, #152]	; (8020710 <icmp_send_response+0xc8>)
 8020676:	f44f 72b4 	mov.w	r2, #360	; 0x168
 802067a:	4926      	ldr	r1, [pc, #152]	; (8020714 <icmp_send_response+0xcc>)
 802067c:	4826      	ldr	r0, [pc, #152]	; (8020718 <icmp_send_response+0xd0>)
 802067e:	f003 fcab 	bl	8023fd8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8020682:	687b      	ldr	r3, [r7, #4]
 8020684:	685b      	ldr	r3, [r3, #4]
 8020686:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8020688:	69fb      	ldr	r3, [r7, #28]
 802068a:	685b      	ldr	r3, [r3, #4]
 802068c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 802068e:	697b      	ldr	r3, [r7, #20]
 8020690:	78fa      	ldrb	r2, [r7, #3]
 8020692:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8020694:	697b      	ldr	r3, [r7, #20]
 8020696:	78ba      	ldrb	r2, [r7, #2]
 8020698:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 802069a:	697b      	ldr	r3, [r7, #20]
 802069c:	2200      	movs	r2, #0
 802069e:	711a      	strb	r2, [r3, #4]
 80206a0:	2200      	movs	r2, #0
 80206a2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80206a4:	697b      	ldr	r3, [r7, #20]
 80206a6:	2200      	movs	r2, #0
 80206a8:	719a      	strb	r2, [r3, #6]
 80206aa:	2200      	movs	r2, #0
 80206ac:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80206ae:	69fb      	ldr	r3, [r7, #28]
 80206b0:	685b      	ldr	r3, [r3, #4]
 80206b2:	f103 0008 	add.w	r0, r3, #8
 80206b6:	687b      	ldr	r3, [r7, #4]
 80206b8:	685b      	ldr	r3, [r3, #4]
 80206ba:	221c      	movs	r2, #28
 80206bc:	4619      	mov	r1, r3
 80206be:	f003 ff74 	bl	80245aa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80206c2:	69bb      	ldr	r3, [r7, #24]
 80206c4:	68db      	ldr	r3, [r3, #12]
 80206c6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80206c8:	f107 030c 	add.w	r3, r7, #12
 80206cc:	4618      	mov	r0, r3
 80206ce:	f000 f825 	bl	802071c <ip4_route>
 80206d2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80206d4:	693b      	ldr	r3, [r7, #16]
 80206d6:	2b00      	cmp	r3, #0
 80206d8:	d011      	beq.n	80206fe <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80206da:	697b      	ldr	r3, [r7, #20]
 80206dc:	2200      	movs	r2, #0
 80206de:	709a      	strb	r2, [r3, #2]
 80206e0:	2200      	movs	r2, #0
 80206e2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80206e4:	f107 020c 	add.w	r2, r7, #12
 80206e8:	693b      	ldr	r3, [r7, #16]
 80206ea:	9302      	str	r3, [sp, #8]
 80206ec:	2301      	movs	r3, #1
 80206ee:	9301      	str	r3, [sp, #4]
 80206f0:	2300      	movs	r3, #0
 80206f2:	9300      	str	r3, [sp, #0]
 80206f4:	23ff      	movs	r3, #255	; 0xff
 80206f6:	2100      	movs	r1, #0
 80206f8:	69f8      	ldr	r0, [r7, #28]
 80206fa:	f000 f9eb 	bl	8020ad4 <ip4_output_if>
  }
  pbuf_free(q);
 80206fe:	69f8      	ldr	r0, [r7, #28]
 8020700:	f7f5 fec4 	bl	801648c <pbuf_free>
 8020704:	e000      	b.n	8020708 <icmp_send_response+0xc0>
    return;
 8020706:	bf00      	nop
}
 8020708:	3720      	adds	r7, #32
 802070a:	46bd      	mov	sp, r7
 802070c:	bd80      	pop	{r7, pc}
 802070e:	bf00      	nop
 8020710:	0802a884 	.word	0x0802a884
 8020714:	0802a950 	.word	0x0802a950
 8020718:	0802a8f4 	.word	0x0802a8f4

0802071c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 802071c:	b480      	push	{r7}
 802071e:	b085      	sub	sp, #20
 8020720:	af00      	add	r7, sp, #0
 8020722:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8020724:	4b33      	ldr	r3, [pc, #204]	; (80207f4 <ip4_route+0xd8>)
 8020726:	681b      	ldr	r3, [r3, #0]
 8020728:	60fb      	str	r3, [r7, #12]
 802072a:	e036      	b.n	802079a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 802072c:	68fb      	ldr	r3, [r7, #12]
 802072e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020732:	f003 0301 	and.w	r3, r3, #1
 8020736:	b2db      	uxtb	r3, r3
 8020738:	2b00      	cmp	r3, #0
 802073a:	d02b      	beq.n	8020794 <ip4_route+0x78>
 802073c:	68fb      	ldr	r3, [r7, #12]
 802073e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020742:	089b      	lsrs	r3, r3, #2
 8020744:	f003 0301 	and.w	r3, r3, #1
 8020748:	b2db      	uxtb	r3, r3
 802074a:	2b00      	cmp	r3, #0
 802074c:	d022      	beq.n	8020794 <ip4_route+0x78>
 802074e:	68fb      	ldr	r3, [r7, #12]
 8020750:	3304      	adds	r3, #4
 8020752:	681b      	ldr	r3, [r3, #0]
 8020754:	2b00      	cmp	r3, #0
 8020756:	d01d      	beq.n	8020794 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8020758:	687b      	ldr	r3, [r7, #4]
 802075a:	681a      	ldr	r2, [r3, #0]
 802075c:	68fb      	ldr	r3, [r7, #12]
 802075e:	3304      	adds	r3, #4
 8020760:	681b      	ldr	r3, [r3, #0]
 8020762:	405a      	eors	r2, r3
 8020764:	68fb      	ldr	r3, [r7, #12]
 8020766:	3308      	adds	r3, #8
 8020768:	681b      	ldr	r3, [r3, #0]
 802076a:	4013      	ands	r3, r2
 802076c:	2b00      	cmp	r3, #0
 802076e:	d101      	bne.n	8020774 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8020770:	68fb      	ldr	r3, [r7, #12]
 8020772:	e038      	b.n	80207e6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8020774:	68fb      	ldr	r3, [r7, #12]
 8020776:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802077a:	f003 0302 	and.w	r3, r3, #2
 802077e:	2b00      	cmp	r3, #0
 8020780:	d108      	bne.n	8020794 <ip4_route+0x78>
 8020782:	687b      	ldr	r3, [r7, #4]
 8020784:	681a      	ldr	r2, [r3, #0]
 8020786:	68fb      	ldr	r3, [r7, #12]
 8020788:	330c      	adds	r3, #12
 802078a:	681b      	ldr	r3, [r3, #0]
 802078c:	429a      	cmp	r2, r3
 802078e:	d101      	bne.n	8020794 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8020790:	68fb      	ldr	r3, [r7, #12]
 8020792:	e028      	b.n	80207e6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8020794:	68fb      	ldr	r3, [r7, #12]
 8020796:	681b      	ldr	r3, [r3, #0]
 8020798:	60fb      	str	r3, [r7, #12]
 802079a:	68fb      	ldr	r3, [r7, #12]
 802079c:	2b00      	cmp	r3, #0
 802079e:	d1c5      	bne.n	802072c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80207a0:	4b15      	ldr	r3, [pc, #84]	; (80207f8 <ip4_route+0xdc>)
 80207a2:	681b      	ldr	r3, [r3, #0]
 80207a4:	2b00      	cmp	r3, #0
 80207a6:	d01a      	beq.n	80207de <ip4_route+0xc2>
 80207a8:	4b13      	ldr	r3, [pc, #76]	; (80207f8 <ip4_route+0xdc>)
 80207aa:	681b      	ldr	r3, [r3, #0]
 80207ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80207b0:	f003 0301 	and.w	r3, r3, #1
 80207b4:	2b00      	cmp	r3, #0
 80207b6:	d012      	beq.n	80207de <ip4_route+0xc2>
 80207b8:	4b0f      	ldr	r3, [pc, #60]	; (80207f8 <ip4_route+0xdc>)
 80207ba:	681b      	ldr	r3, [r3, #0]
 80207bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80207c0:	f003 0304 	and.w	r3, r3, #4
 80207c4:	2b00      	cmp	r3, #0
 80207c6:	d00a      	beq.n	80207de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80207c8:	4b0b      	ldr	r3, [pc, #44]	; (80207f8 <ip4_route+0xdc>)
 80207ca:	681b      	ldr	r3, [r3, #0]
 80207cc:	3304      	adds	r3, #4
 80207ce:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80207d0:	2b00      	cmp	r3, #0
 80207d2:	d004      	beq.n	80207de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80207d4:	687b      	ldr	r3, [r7, #4]
 80207d6:	681b      	ldr	r3, [r3, #0]
 80207d8:	b2db      	uxtb	r3, r3
 80207da:	2b7f      	cmp	r3, #127	; 0x7f
 80207dc:	d101      	bne.n	80207e2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80207de:	2300      	movs	r3, #0
 80207e0:	e001      	b.n	80207e6 <ip4_route+0xca>
  }

  return netif_default;
 80207e2:	4b05      	ldr	r3, [pc, #20]	; (80207f8 <ip4_route+0xdc>)
 80207e4:	681b      	ldr	r3, [r3, #0]
}
 80207e6:	4618      	mov	r0, r3
 80207e8:	3714      	adds	r7, #20
 80207ea:	46bd      	mov	sp, r7
 80207ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207f0:	4770      	bx	lr
 80207f2:	bf00      	nop
 80207f4:	20013224 	.word	0x20013224
 80207f8:	20013228 	.word	0x20013228

080207fc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80207fc:	b580      	push	{r7, lr}
 80207fe:	b082      	sub	sp, #8
 8020800:	af00      	add	r7, sp, #0
 8020802:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8020804:	687b      	ldr	r3, [r7, #4]
 8020806:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802080a:	f003 0301 	and.w	r3, r3, #1
 802080e:	b2db      	uxtb	r3, r3
 8020810:	2b00      	cmp	r3, #0
 8020812:	d016      	beq.n	8020842 <ip4_input_accept+0x46>
 8020814:	687b      	ldr	r3, [r7, #4]
 8020816:	3304      	adds	r3, #4
 8020818:	681b      	ldr	r3, [r3, #0]
 802081a:	2b00      	cmp	r3, #0
 802081c:	d011      	beq.n	8020842 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 802081e:	4b0b      	ldr	r3, [pc, #44]	; (802084c <ip4_input_accept+0x50>)
 8020820:	695a      	ldr	r2, [r3, #20]
 8020822:	687b      	ldr	r3, [r7, #4]
 8020824:	3304      	adds	r3, #4
 8020826:	681b      	ldr	r3, [r3, #0]
 8020828:	429a      	cmp	r2, r3
 802082a:	d008      	beq.n	802083e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 802082c:	4b07      	ldr	r3, [pc, #28]	; (802084c <ip4_input_accept+0x50>)
 802082e:	695b      	ldr	r3, [r3, #20]
 8020830:	6879      	ldr	r1, [r7, #4]
 8020832:	4618      	mov	r0, r3
 8020834:	f000 fa26 	bl	8020c84 <ip4_addr_isbroadcast_u32>
 8020838:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 802083a:	2b00      	cmp	r3, #0
 802083c:	d001      	beq.n	8020842 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 802083e:	2301      	movs	r3, #1
 8020840:	e000      	b.n	8020844 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8020842:	2300      	movs	r3, #0
}
 8020844:	4618      	mov	r0, r3
 8020846:	3708      	adds	r7, #8
 8020848:	46bd      	mov	sp, r7
 802084a:	bd80      	pop	{r7, pc}
 802084c:	2000fa84 	.word	0x2000fa84

08020850 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8020850:	b580      	push	{r7, lr}
 8020852:	b088      	sub	sp, #32
 8020854:	af00      	add	r7, sp, #0
 8020856:	6078      	str	r0, [r7, #4]
 8020858:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 802085a:	2301      	movs	r3, #1
 802085c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 802085e:	687b      	ldr	r3, [r7, #4]
 8020860:	685b      	ldr	r3, [r3, #4]
 8020862:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8020864:	69fb      	ldr	r3, [r7, #28]
 8020866:	781b      	ldrb	r3, [r3, #0]
 8020868:	091b      	lsrs	r3, r3, #4
 802086a:	b2db      	uxtb	r3, r3
 802086c:	2b04      	cmp	r3, #4
 802086e:	d004      	beq.n	802087a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8020870:	6878      	ldr	r0, [r7, #4]
 8020872:	f7f5 fe0b 	bl	801648c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8020876:	2300      	movs	r3, #0
 8020878:	e123      	b.n	8020ac2 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 802087a:	69fb      	ldr	r3, [r7, #28]
 802087c:	781b      	ldrb	r3, [r3, #0]
 802087e:	f003 030f 	and.w	r3, r3, #15
 8020882:	b2db      	uxtb	r3, r3
 8020884:	009b      	lsls	r3, r3, #2
 8020886:	b2db      	uxtb	r3, r3
 8020888:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 802088a:	69fb      	ldr	r3, [r7, #28]
 802088c:	885b      	ldrh	r3, [r3, #2]
 802088e:	b29b      	uxth	r3, r3
 8020890:	4618      	mov	r0, r3
 8020892:	f7f4 f9fd 	bl	8014c90 <lwip_htons>
 8020896:	4603      	mov	r3, r0
 8020898:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 802089a:	687b      	ldr	r3, [r7, #4]
 802089c:	891b      	ldrh	r3, [r3, #8]
 802089e:	8a3a      	ldrh	r2, [r7, #16]
 80208a0:	429a      	cmp	r2, r3
 80208a2:	d204      	bcs.n	80208ae <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80208a4:	8a3b      	ldrh	r3, [r7, #16]
 80208a6:	4619      	mov	r1, r3
 80208a8:	6878      	ldr	r0, [r7, #4]
 80208aa:	f7f5 fc69 	bl	8016180 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80208ae:	687b      	ldr	r3, [r7, #4]
 80208b0:	895b      	ldrh	r3, [r3, #10]
 80208b2:	8a7a      	ldrh	r2, [r7, #18]
 80208b4:	429a      	cmp	r2, r3
 80208b6:	d807      	bhi.n	80208c8 <ip4_input+0x78>
 80208b8:	687b      	ldr	r3, [r7, #4]
 80208ba:	891b      	ldrh	r3, [r3, #8]
 80208bc:	8a3a      	ldrh	r2, [r7, #16]
 80208be:	429a      	cmp	r2, r3
 80208c0:	d802      	bhi.n	80208c8 <ip4_input+0x78>
 80208c2:	8a7b      	ldrh	r3, [r7, #18]
 80208c4:	2b13      	cmp	r3, #19
 80208c6:	d804      	bhi.n	80208d2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80208c8:	6878      	ldr	r0, [r7, #4]
 80208ca:	f7f5 fddf 	bl	801648c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80208ce:	2300      	movs	r3, #0
 80208d0:	e0f7      	b.n	8020ac2 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80208d2:	69fb      	ldr	r3, [r7, #28]
 80208d4:	691b      	ldr	r3, [r3, #16]
 80208d6:	4a7d      	ldr	r2, [pc, #500]	; (8020acc <ip4_input+0x27c>)
 80208d8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80208da:	69fb      	ldr	r3, [r7, #28]
 80208dc:	68db      	ldr	r3, [r3, #12]
 80208de:	4a7b      	ldr	r2, [pc, #492]	; (8020acc <ip4_input+0x27c>)
 80208e0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80208e2:	4b7a      	ldr	r3, [pc, #488]	; (8020acc <ip4_input+0x27c>)
 80208e4:	695b      	ldr	r3, [r3, #20]
 80208e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80208ea:	2be0      	cmp	r3, #224	; 0xe0
 80208ec:	d112      	bne.n	8020914 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80208ee:	683b      	ldr	r3, [r7, #0]
 80208f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80208f4:	f003 0301 	and.w	r3, r3, #1
 80208f8:	b2db      	uxtb	r3, r3
 80208fa:	2b00      	cmp	r3, #0
 80208fc:	d007      	beq.n	802090e <ip4_input+0xbe>
 80208fe:	683b      	ldr	r3, [r7, #0]
 8020900:	3304      	adds	r3, #4
 8020902:	681b      	ldr	r3, [r3, #0]
 8020904:	2b00      	cmp	r3, #0
 8020906:	d002      	beq.n	802090e <ip4_input+0xbe>
      netif = inp;
 8020908:	683b      	ldr	r3, [r7, #0]
 802090a:	61bb      	str	r3, [r7, #24]
 802090c:	e02a      	b.n	8020964 <ip4_input+0x114>
    } else {
      netif = NULL;
 802090e:	2300      	movs	r3, #0
 8020910:	61bb      	str	r3, [r7, #24]
 8020912:	e027      	b.n	8020964 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8020914:	6838      	ldr	r0, [r7, #0]
 8020916:	f7ff ff71 	bl	80207fc <ip4_input_accept>
 802091a:	4603      	mov	r3, r0
 802091c:	2b00      	cmp	r3, #0
 802091e:	d002      	beq.n	8020926 <ip4_input+0xd6>
      netif = inp;
 8020920:	683b      	ldr	r3, [r7, #0]
 8020922:	61bb      	str	r3, [r7, #24]
 8020924:	e01e      	b.n	8020964 <ip4_input+0x114>
    } else {
      netif = NULL;
 8020926:	2300      	movs	r3, #0
 8020928:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 802092a:	4b68      	ldr	r3, [pc, #416]	; (8020acc <ip4_input+0x27c>)
 802092c:	695b      	ldr	r3, [r3, #20]
 802092e:	b2db      	uxtb	r3, r3
 8020930:	2b7f      	cmp	r3, #127	; 0x7f
 8020932:	d017      	beq.n	8020964 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8020934:	4b66      	ldr	r3, [pc, #408]	; (8020ad0 <ip4_input+0x280>)
 8020936:	681b      	ldr	r3, [r3, #0]
 8020938:	61bb      	str	r3, [r7, #24]
 802093a:	e00e      	b.n	802095a <ip4_input+0x10a>
          if (netif == inp) {
 802093c:	69ba      	ldr	r2, [r7, #24]
 802093e:	683b      	ldr	r3, [r7, #0]
 8020940:	429a      	cmp	r2, r3
 8020942:	d006      	beq.n	8020952 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8020944:	69b8      	ldr	r0, [r7, #24]
 8020946:	f7ff ff59 	bl	80207fc <ip4_input_accept>
 802094a:	4603      	mov	r3, r0
 802094c:	2b00      	cmp	r3, #0
 802094e:	d108      	bne.n	8020962 <ip4_input+0x112>
 8020950:	e000      	b.n	8020954 <ip4_input+0x104>
            continue;
 8020952:	bf00      	nop
        NETIF_FOREACH(netif) {
 8020954:	69bb      	ldr	r3, [r7, #24]
 8020956:	681b      	ldr	r3, [r3, #0]
 8020958:	61bb      	str	r3, [r7, #24]
 802095a:	69bb      	ldr	r3, [r7, #24]
 802095c:	2b00      	cmp	r3, #0
 802095e:	d1ed      	bne.n	802093c <ip4_input+0xec>
 8020960:	e000      	b.n	8020964 <ip4_input+0x114>
            break;
 8020962:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8020964:	69bb      	ldr	r3, [r7, #24]
 8020966:	2b00      	cmp	r3, #0
 8020968:	d111      	bne.n	802098e <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 802096a:	69fb      	ldr	r3, [r7, #28]
 802096c:	7a5b      	ldrb	r3, [r3, #9]
 802096e:	2b11      	cmp	r3, #17
 8020970:	d10d      	bne.n	802098e <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8020972:	8a7b      	ldrh	r3, [r7, #18]
 8020974:	69fa      	ldr	r2, [r7, #28]
 8020976:	4413      	add	r3, r2
 8020978:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 802097a:	68fb      	ldr	r3, [r7, #12]
 802097c:	885b      	ldrh	r3, [r3, #2]
 802097e:	b29b      	uxth	r3, r3
 8020980:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8020984:	d103      	bne.n	802098e <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8020986:	683b      	ldr	r3, [r7, #0]
 8020988:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 802098a:	2300      	movs	r3, #0
 802098c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 802098e:	697b      	ldr	r3, [r7, #20]
 8020990:	2b00      	cmp	r3, #0
 8020992:	d017      	beq.n	80209c4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8020994:	4b4d      	ldr	r3, [pc, #308]	; (8020acc <ip4_input+0x27c>)
 8020996:	691b      	ldr	r3, [r3, #16]
 8020998:	2b00      	cmp	r3, #0
 802099a:	d013      	beq.n	80209c4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 802099c:	4b4b      	ldr	r3, [pc, #300]	; (8020acc <ip4_input+0x27c>)
 802099e:	691b      	ldr	r3, [r3, #16]
 80209a0:	6839      	ldr	r1, [r7, #0]
 80209a2:	4618      	mov	r0, r3
 80209a4:	f000 f96e 	bl	8020c84 <ip4_addr_isbroadcast_u32>
 80209a8:	4603      	mov	r3, r0
 80209aa:	2b00      	cmp	r3, #0
 80209ac:	d105      	bne.n	80209ba <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80209ae:	4b47      	ldr	r3, [pc, #284]	; (8020acc <ip4_input+0x27c>)
 80209b0:	691b      	ldr	r3, [r3, #16]
 80209b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80209b6:	2be0      	cmp	r3, #224	; 0xe0
 80209b8:	d104      	bne.n	80209c4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80209ba:	6878      	ldr	r0, [r7, #4]
 80209bc:	f7f5 fd66 	bl	801648c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80209c0:	2300      	movs	r3, #0
 80209c2:	e07e      	b.n	8020ac2 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80209c4:	69bb      	ldr	r3, [r7, #24]
 80209c6:	2b00      	cmp	r3, #0
 80209c8:	d104      	bne.n	80209d4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80209ca:	6878      	ldr	r0, [r7, #4]
 80209cc:	f7f5 fd5e 	bl	801648c <pbuf_free>
    return ERR_OK;
 80209d0:	2300      	movs	r3, #0
 80209d2:	e076      	b.n	8020ac2 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80209d4:	69fb      	ldr	r3, [r7, #28]
 80209d6:	88db      	ldrh	r3, [r3, #6]
 80209d8:	b29b      	uxth	r3, r3
 80209da:	461a      	mov	r2, r3
 80209dc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80209e0:	4013      	ands	r3, r2
 80209e2:	2b00      	cmp	r3, #0
 80209e4:	d00b      	beq.n	80209fe <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80209e6:	6878      	ldr	r0, [r7, #4]
 80209e8:	f000 fd22 	bl	8021430 <ip4_reass>
 80209ec:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80209ee:	687b      	ldr	r3, [r7, #4]
 80209f0:	2b00      	cmp	r3, #0
 80209f2:	d101      	bne.n	80209f8 <ip4_input+0x1a8>
      return ERR_OK;
 80209f4:	2300      	movs	r3, #0
 80209f6:	e064      	b.n	8020ac2 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80209f8:	687b      	ldr	r3, [r7, #4]
 80209fa:	685b      	ldr	r3, [r3, #4]
 80209fc:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80209fe:	4a33      	ldr	r2, [pc, #204]	; (8020acc <ip4_input+0x27c>)
 8020a00:	69bb      	ldr	r3, [r7, #24]
 8020a02:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8020a04:	4a31      	ldr	r2, [pc, #196]	; (8020acc <ip4_input+0x27c>)
 8020a06:	683b      	ldr	r3, [r7, #0]
 8020a08:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8020a0a:	4a30      	ldr	r2, [pc, #192]	; (8020acc <ip4_input+0x27c>)
 8020a0c:	69fb      	ldr	r3, [r7, #28]
 8020a0e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8020a10:	69fb      	ldr	r3, [r7, #28]
 8020a12:	781b      	ldrb	r3, [r3, #0]
 8020a14:	f003 030f 	and.w	r3, r3, #15
 8020a18:	b2db      	uxtb	r3, r3
 8020a1a:	009b      	lsls	r3, r3, #2
 8020a1c:	b2db      	uxtb	r3, r3
 8020a1e:	b29a      	uxth	r2, r3
 8020a20:	4b2a      	ldr	r3, [pc, #168]	; (8020acc <ip4_input+0x27c>)
 8020a22:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8020a24:	8a7b      	ldrh	r3, [r7, #18]
 8020a26:	4619      	mov	r1, r3
 8020a28:	6878      	ldr	r0, [r7, #4]
 8020a2a:	f7f5 fca9 	bl	8016380 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8020a2e:	69fb      	ldr	r3, [r7, #28]
 8020a30:	7a5b      	ldrb	r3, [r3, #9]
 8020a32:	2b11      	cmp	r3, #17
 8020a34:	d006      	beq.n	8020a44 <ip4_input+0x1f4>
 8020a36:	2b11      	cmp	r3, #17
 8020a38:	dc13      	bgt.n	8020a62 <ip4_input+0x212>
 8020a3a:	2b01      	cmp	r3, #1
 8020a3c:	d00c      	beq.n	8020a58 <ip4_input+0x208>
 8020a3e:	2b06      	cmp	r3, #6
 8020a40:	d005      	beq.n	8020a4e <ip4_input+0x1fe>
 8020a42:	e00e      	b.n	8020a62 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8020a44:	6839      	ldr	r1, [r7, #0]
 8020a46:	6878      	ldr	r0, [r7, #4]
 8020a48:	f7fc fac6 	bl	801cfd8 <udp_input>
        break;
 8020a4c:	e026      	b.n	8020a9c <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8020a4e:	6839      	ldr	r1, [r7, #0]
 8020a50:	6878      	ldr	r0, [r7, #4]
 8020a52:	f7f7 fe71 	bl	8018738 <tcp_input>
        break;
 8020a56:	e021      	b.n	8020a9c <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8020a58:	6839      	ldr	r1, [r7, #0]
 8020a5a:	6878      	ldr	r0, [r7, #4]
 8020a5c:	f7ff fcd0 	bl	8020400 <icmp_input>
        break;
 8020a60:	e01c      	b.n	8020a9c <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8020a62:	4b1a      	ldr	r3, [pc, #104]	; (8020acc <ip4_input+0x27c>)
 8020a64:	695b      	ldr	r3, [r3, #20]
 8020a66:	69b9      	ldr	r1, [r7, #24]
 8020a68:	4618      	mov	r0, r3
 8020a6a:	f000 f90b 	bl	8020c84 <ip4_addr_isbroadcast_u32>
 8020a6e:	4603      	mov	r3, r0
 8020a70:	2b00      	cmp	r3, #0
 8020a72:	d10f      	bne.n	8020a94 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020a74:	4b15      	ldr	r3, [pc, #84]	; (8020acc <ip4_input+0x27c>)
 8020a76:	695b      	ldr	r3, [r3, #20]
 8020a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8020a7c:	2be0      	cmp	r3, #224	; 0xe0
 8020a7e:	d009      	beq.n	8020a94 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8020a80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8020a84:	4619      	mov	r1, r3
 8020a86:	6878      	ldr	r0, [r7, #4]
 8020a88:	f7f5 fced 	bl	8016466 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8020a8c:	2102      	movs	r1, #2
 8020a8e:	6878      	ldr	r0, [r7, #4]
 8020a90:	f7ff fdba 	bl	8020608 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8020a94:	6878      	ldr	r0, [r7, #4]
 8020a96:	f7f5 fcf9 	bl	801648c <pbuf_free>
        break;
 8020a9a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8020a9c:	4b0b      	ldr	r3, [pc, #44]	; (8020acc <ip4_input+0x27c>)
 8020a9e:	2200      	movs	r2, #0
 8020aa0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8020aa2:	4b0a      	ldr	r3, [pc, #40]	; (8020acc <ip4_input+0x27c>)
 8020aa4:	2200      	movs	r2, #0
 8020aa6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8020aa8:	4b08      	ldr	r3, [pc, #32]	; (8020acc <ip4_input+0x27c>)
 8020aaa:	2200      	movs	r2, #0
 8020aac:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8020aae:	4b07      	ldr	r3, [pc, #28]	; (8020acc <ip4_input+0x27c>)
 8020ab0:	2200      	movs	r2, #0
 8020ab2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8020ab4:	4b05      	ldr	r3, [pc, #20]	; (8020acc <ip4_input+0x27c>)
 8020ab6:	2200      	movs	r2, #0
 8020ab8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8020aba:	4b04      	ldr	r3, [pc, #16]	; (8020acc <ip4_input+0x27c>)
 8020abc:	2200      	movs	r2, #0
 8020abe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8020ac0:	2300      	movs	r3, #0
}
 8020ac2:	4618      	mov	r0, r3
 8020ac4:	3720      	adds	r7, #32
 8020ac6:	46bd      	mov	sp, r7
 8020ac8:	bd80      	pop	{r7, pc}
 8020aca:	bf00      	nop
 8020acc:	2000fa84 	.word	0x2000fa84
 8020ad0:	20013224 	.word	0x20013224

08020ad4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8020ad4:	b580      	push	{r7, lr}
 8020ad6:	b08a      	sub	sp, #40	; 0x28
 8020ad8:	af04      	add	r7, sp, #16
 8020ada:	60f8      	str	r0, [r7, #12]
 8020adc:	60b9      	str	r1, [r7, #8]
 8020ade:	607a      	str	r2, [r7, #4]
 8020ae0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8020ae2:	68bb      	ldr	r3, [r7, #8]
 8020ae4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8020ae6:	687b      	ldr	r3, [r7, #4]
 8020ae8:	2b00      	cmp	r3, #0
 8020aea:	d009      	beq.n	8020b00 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8020aec:	68bb      	ldr	r3, [r7, #8]
 8020aee:	2b00      	cmp	r3, #0
 8020af0:	d003      	beq.n	8020afa <ip4_output_if+0x26>
 8020af2:	68bb      	ldr	r3, [r7, #8]
 8020af4:	681b      	ldr	r3, [r3, #0]
 8020af6:	2b00      	cmp	r3, #0
 8020af8:	d102      	bne.n	8020b00 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8020afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020afc:	3304      	adds	r3, #4
 8020afe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8020b00:	78fa      	ldrb	r2, [r7, #3]
 8020b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b04:	9302      	str	r3, [sp, #8]
 8020b06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8020b0a:	9301      	str	r3, [sp, #4]
 8020b0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8020b10:	9300      	str	r3, [sp, #0]
 8020b12:	4613      	mov	r3, r2
 8020b14:	687a      	ldr	r2, [r7, #4]
 8020b16:	6979      	ldr	r1, [r7, #20]
 8020b18:	68f8      	ldr	r0, [r7, #12]
 8020b1a:	f000 f805 	bl	8020b28 <ip4_output_if_src>
 8020b1e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8020b20:	4618      	mov	r0, r3
 8020b22:	3718      	adds	r7, #24
 8020b24:	46bd      	mov	sp, r7
 8020b26:	bd80      	pop	{r7, pc}

08020b28 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8020b28:	b580      	push	{r7, lr}
 8020b2a:	b088      	sub	sp, #32
 8020b2c:	af00      	add	r7, sp, #0
 8020b2e:	60f8      	str	r0, [r7, #12]
 8020b30:	60b9      	str	r1, [r7, #8]
 8020b32:	607a      	str	r2, [r7, #4]
 8020b34:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8020b36:	68fb      	ldr	r3, [r7, #12]
 8020b38:	7b9b      	ldrb	r3, [r3, #14]
 8020b3a:	2b01      	cmp	r3, #1
 8020b3c:	d006      	beq.n	8020b4c <ip4_output_if_src+0x24>
 8020b3e:	4b4b      	ldr	r3, [pc, #300]	; (8020c6c <ip4_output_if_src+0x144>)
 8020b40:	f44f 7255 	mov.w	r2, #852	; 0x354
 8020b44:	494a      	ldr	r1, [pc, #296]	; (8020c70 <ip4_output_if_src+0x148>)
 8020b46:	484b      	ldr	r0, [pc, #300]	; (8020c74 <ip4_output_if_src+0x14c>)
 8020b48:	f003 fa46 	bl	8023fd8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8020b4c:	687b      	ldr	r3, [r7, #4]
 8020b4e:	2b00      	cmp	r3, #0
 8020b50:	d060      	beq.n	8020c14 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8020b52:	2314      	movs	r3, #20
 8020b54:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8020b56:	2114      	movs	r1, #20
 8020b58:	68f8      	ldr	r0, [r7, #12]
 8020b5a:	f7f5 fc01 	bl	8016360 <pbuf_add_header>
 8020b5e:	4603      	mov	r3, r0
 8020b60:	2b00      	cmp	r3, #0
 8020b62:	d002      	beq.n	8020b6a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8020b64:	f06f 0301 	mvn.w	r3, #1
 8020b68:	e07c      	b.n	8020c64 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8020b6a:	68fb      	ldr	r3, [r7, #12]
 8020b6c:	685b      	ldr	r3, [r3, #4]
 8020b6e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8020b70:	68fb      	ldr	r3, [r7, #12]
 8020b72:	895b      	ldrh	r3, [r3, #10]
 8020b74:	2b13      	cmp	r3, #19
 8020b76:	d806      	bhi.n	8020b86 <ip4_output_if_src+0x5e>
 8020b78:	4b3c      	ldr	r3, [pc, #240]	; (8020c6c <ip4_output_if_src+0x144>)
 8020b7a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8020b7e:	493e      	ldr	r1, [pc, #248]	; (8020c78 <ip4_output_if_src+0x150>)
 8020b80:	483c      	ldr	r0, [pc, #240]	; (8020c74 <ip4_output_if_src+0x14c>)
 8020b82:	f003 fa29 	bl	8023fd8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8020b86:	69fb      	ldr	r3, [r7, #28]
 8020b88:	78fa      	ldrb	r2, [r7, #3]
 8020b8a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8020b8c:	69fb      	ldr	r3, [r7, #28]
 8020b8e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8020b92:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8020b94:	687b      	ldr	r3, [r7, #4]
 8020b96:	681a      	ldr	r2, [r3, #0]
 8020b98:	69fb      	ldr	r3, [r7, #28]
 8020b9a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8020b9c:	8b7b      	ldrh	r3, [r7, #26]
 8020b9e:	089b      	lsrs	r3, r3, #2
 8020ba0:	b29b      	uxth	r3, r3
 8020ba2:	b2db      	uxtb	r3, r3
 8020ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020ba8:	b2da      	uxtb	r2, r3
 8020baa:	69fb      	ldr	r3, [r7, #28]
 8020bac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8020bae:	69fb      	ldr	r3, [r7, #28]
 8020bb0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8020bb4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8020bb6:	68fb      	ldr	r3, [r7, #12]
 8020bb8:	891b      	ldrh	r3, [r3, #8]
 8020bba:	4618      	mov	r0, r3
 8020bbc:	f7f4 f868 	bl	8014c90 <lwip_htons>
 8020bc0:	4603      	mov	r3, r0
 8020bc2:	461a      	mov	r2, r3
 8020bc4:	69fb      	ldr	r3, [r7, #28]
 8020bc6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8020bc8:	69fb      	ldr	r3, [r7, #28]
 8020bca:	2200      	movs	r2, #0
 8020bcc:	719a      	strb	r2, [r3, #6]
 8020bce:	2200      	movs	r2, #0
 8020bd0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8020bd2:	4b2a      	ldr	r3, [pc, #168]	; (8020c7c <ip4_output_if_src+0x154>)
 8020bd4:	881b      	ldrh	r3, [r3, #0]
 8020bd6:	4618      	mov	r0, r3
 8020bd8:	f7f4 f85a 	bl	8014c90 <lwip_htons>
 8020bdc:	4603      	mov	r3, r0
 8020bde:	461a      	mov	r2, r3
 8020be0:	69fb      	ldr	r3, [r7, #28]
 8020be2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8020be4:	4b25      	ldr	r3, [pc, #148]	; (8020c7c <ip4_output_if_src+0x154>)
 8020be6:	881b      	ldrh	r3, [r3, #0]
 8020be8:	3301      	adds	r3, #1
 8020bea:	b29a      	uxth	r2, r3
 8020bec:	4b23      	ldr	r3, [pc, #140]	; (8020c7c <ip4_output_if_src+0x154>)
 8020bee:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8020bf0:	68bb      	ldr	r3, [r7, #8]
 8020bf2:	2b00      	cmp	r3, #0
 8020bf4:	d104      	bne.n	8020c00 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8020bf6:	4b22      	ldr	r3, [pc, #136]	; (8020c80 <ip4_output_if_src+0x158>)
 8020bf8:	681a      	ldr	r2, [r3, #0]
 8020bfa:	69fb      	ldr	r3, [r7, #28]
 8020bfc:	60da      	str	r2, [r3, #12]
 8020bfe:	e003      	b.n	8020c08 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8020c00:	68bb      	ldr	r3, [r7, #8]
 8020c02:	681a      	ldr	r2, [r3, #0]
 8020c04:	69fb      	ldr	r3, [r7, #28]
 8020c06:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8020c08:	69fb      	ldr	r3, [r7, #28]
 8020c0a:	2200      	movs	r2, #0
 8020c0c:	729a      	strb	r2, [r3, #10]
 8020c0e:	2200      	movs	r2, #0
 8020c10:	72da      	strb	r2, [r3, #11]
 8020c12:	e00f      	b.n	8020c34 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8020c14:	68fb      	ldr	r3, [r7, #12]
 8020c16:	895b      	ldrh	r3, [r3, #10]
 8020c18:	2b13      	cmp	r3, #19
 8020c1a:	d802      	bhi.n	8020c22 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8020c1c:	f06f 0301 	mvn.w	r3, #1
 8020c20:	e020      	b.n	8020c64 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8020c22:	68fb      	ldr	r3, [r7, #12]
 8020c24:	685b      	ldr	r3, [r3, #4]
 8020c26:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8020c28:	69fb      	ldr	r3, [r7, #28]
 8020c2a:	691b      	ldr	r3, [r3, #16]
 8020c2c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8020c2e:	f107 0314 	add.w	r3, r7, #20
 8020c32:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8020c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020c38:	2b00      	cmp	r3, #0
 8020c3a:	d00c      	beq.n	8020c56 <ip4_output_if_src+0x12e>
 8020c3c:	68fb      	ldr	r3, [r7, #12]
 8020c3e:	891a      	ldrh	r2, [r3, #8]
 8020c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020c44:	429a      	cmp	r2, r3
 8020c46:	d906      	bls.n	8020c56 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8020c48:	687a      	ldr	r2, [r7, #4]
 8020c4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8020c4c:	68f8      	ldr	r0, [r7, #12]
 8020c4e:	f000 fde3 	bl	8021818 <ip4_frag>
 8020c52:	4603      	mov	r3, r0
 8020c54:	e006      	b.n	8020c64 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8020c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c58:	695b      	ldr	r3, [r3, #20]
 8020c5a:	687a      	ldr	r2, [r7, #4]
 8020c5c:	68f9      	ldr	r1, [r7, #12]
 8020c5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020c60:	4798      	blx	r3
 8020c62:	4603      	mov	r3, r0
}
 8020c64:	4618      	mov	r0, r3
 8020c66:	3720      	adds	r7, #32
 8020c68:	46bd      	mov	sp, r7
 8020c6a:	bd80      	pop	{r7, pc}
 8020c6c:	0802a97c 	.word	0x0802a97c
 8020c70:	0802a9b0 	.word	0x0802a9b0
 8020c74:	0802a9bc 	.word	0x0802a9bc
 8020c78:	0802a9e4 	.word	0x0802a9e4
 8020c7c:	200133b6 	.word	0x200133b6
 8020c80:	0802af70 	.word	0x0802af70

08020c84 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8020c84:	b480      	push	{r7}
 8020c86:	b085      	sub	sp, #20
 8020c88:	af00      	add	r7, sp, #0
 8020c8a:	6078      	str	r0, [r7, #4]
 8020c8c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8020c8e:	687b      	ldr	r3, [r7, #4]
 8020c90:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8020c92:	687b      	ldr	r3, [r7, #4]
 8020c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8020c98:	d002      	beq.n	8020ca0 <ip4_addr_isbroadcast_u32+0x1c>
 8020c9a:	687b      	ldr	r3, [r7, #4]
 8020c9c:	2b00      	cmp	r3, #0
 8020c9e:	d101      	bne.n	8020ca4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8020ca0:	2301      	movs	r3, #1
 8020ca2:	e02a      	b.n	8020cfa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8020ca4:	683b      	ldr	r3, [r7, #0]
 8020ca6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020caa:	f003 0302 	and.w	r3, r3, #2
 8020cae:	2b00      	cmp	r3, #0
 8020cb0:	d101      	bne.n	8020cb6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8020cb2:	2300      	movs	r3, #0
 8020cb4:	e021      	b.n	8020cfa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8020cb6:	683b      	ldr	r3, [r7, #0]
 8020cb8:	3304      	adds	r3, #4
 8020cba:	681b      	ldr	r3, [r3, #0]
 8020cbc:	687a      	ldr	r2, [r7, #4]
 8020cbe:	429a      	cmp	r2, r3
 8020cc0:	d101      	bne.n	8020cc6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8020cc2:	2300      	movs	r3, #0
 8020cc4:	e019      	b.n	8020cfa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8020cc6:	68fa      	ldr	r2, [r7, #12]
 8020cc8:	683b      	ldr	r3, [r7, #0]
 8020cca:	3304      	adds	r3, #4
 8020ccc:	681b      	ldr	r3, [r3, #0]
 8020cce:	405a      	eors	r2, r3
 8020cd0:	683b      	ldr	r3, [r7, #0]
 8020cd2:	3308      	adds	r3, #8
 8020cd4:	681b      	ldr	r3, [r3, #0]
 8020cd6:	4013      	ands	r3, r2
 8020cd8:	2b00      	cmp	r3, #0
 8020cda:	d10d      	bne.n	8020cf8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8020cdc:	683b      	ldr	r3, [r7, #0]
 8020cde:	3308      	adds	r3, #8
 8020ce0:	681b      	ldr	r3, [r3, #0]
 8020ce2:	43da      	mvns	r2, r3
 8020ce4:	687b      	ldr	r3, [r7, #4]
 8020ce6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8020ce8:	683b      	ldr	r3, [r7, #0]
 8020cea:	3308      	adds	r3, #8
 8020cec:	681b      	ldr	r3, [r3, #0]
 8020cee:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8020cf0:	429a      	cmp	r2, r3
 8020cf2:	d101      	bne.n	8020cf8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8020cf4:	2301      	movs	r3, #1
 8020cf6:	e000      	b.n	8020cfa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8020cf8:	2300      	movs	r3, #0
  }
}
 8020cfa:	4618      	mov	r0, r3
 8020cfc:	3714      	adds	r7, #20
 8020cfe:	46bd      	mov	sp, r7
 8020d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d04:	4770      	bx	lr
	...

08020d08 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8020d08:	b580      	push	{r7, lr}
 8020d0a:	b082      	sub	sp, #8
 8020d0c:	af00      	add	r7, sp, #0
 8020d0e:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8020d10:	2210      	movs	r2, #16
 8020d12:	4904      	ldr	r1, [pc, #16]	; (8020d24 <ip4addr_ntoa+0x1c>)
 8020d14:	6878      	ldr	r0, [r7, #4]
 8020d16:	f000 f807 	bl	8020d28 <ip4addr_ntoa_r>
 8020d1a:	4603      	mov	r3, r0
}
 8020d1c:	4618      	mov	r0, r3
 8020d1e:	3708      	adds	r7, #8
 8020d20:	46bd      	mov	sp, r7
 8020d22:	bd80      	pop	{r7, pc}
 8020d24:	200133b8 	.word	0x200133b8

08020d28 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8020d28:	b480      	push	{r7}
 8020d2a:	b08d      	sub	sp, #52	; 0x34
 8020d2c:	af00      	add	r7, sp, #0
 8020d2e:	60f8      	str	r0, [r7, #12]
 8020d30:	60b9      	str	r1, [r7, #8]
 8020d32:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8020d34:	2300      	movs	r3, #0
 8020d36:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8020d38:	68fb      	ldr	r3, [r7, #12]
 8020d3a:	681b      	ldr	r3, [r3, #0]
 8020d3c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8020d3e:	68bb      	ldr	r3, [r7, #8]
 8020d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8020d42:	f107 0318 	add.w	r3, r7, #24
 8020d46:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8020d48:	2300      	movs	r3, #0
 8020d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020d4e:	e058      	b.n	8020e02 <ip4addr_ntoa_r+0xda>
    i = 0;
 8020d50:	2300      	movs	r3, #0
 8020d52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8020d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020d58:	781a      	ldrb	r2, [r3, #0]
 8020d5a:	4b32      	ldr	r3, [pc, #200]	; (8020e24 <ip4addr_ntoa_r+0xfc>)
 8020d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8020d60:	08d9      	lsrs	r1, r3, #3
 8020d62:	460b      	mov	r3, r1
 8020d64:	009b      	lsls	r3, r3, #2
 8020d66:	440b      	add	r3, r1
 8020d68:	005b      	lsls	r3, r3, #1
 8020d6a:	1ad3      	subs	r3, r2, r3
 8020d6c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8020d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020d70:	781b      	ldrb	r3, [r3, #0]
 8020d72:	4a2c      	ldr	r2, [pc, #176]	; (8020e24 <ip4addr_ntoa_r+0xfc>)
 8020d74:	fba2 2303 	umull	r2, r3, r2, r3
 8020d78:	08db      	lsrs	r3, r3, #3
 8020d7a:	b2da      	uxtb	r2, r3
 8020d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020d7e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8020d80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8020d84:	1c5a      	adds	r2, r3, #1
 8020d86:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8020d8a:	4619      	mov	r1, r3
 8020d8c:	7ffb      	ldrb	r3, [r7, #31]
 8020d8e:	3330      	adds	r3, #48	; 0x30
 8020d90:	b2da      	uxtb	r2, r3
 8020d92:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8020d96:	443b      	add	r3, r7
 8020d98:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8020d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020d9e:	781b      	ldrb	r3, [r3, #0]
 8020da0:	2b00      	cmp	r3, #0
 8020da2:	d1d8      	bne.n	8020d56 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8020da4:	e011      	b.n	8020dca <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8020da6:	6a3b      	ldr	r3, [r7, #32]
 8020da8:	1c5a      	adds	r2, r3, #1
 8020daa:	623a      	str	r2, [r7, #32]
 8020dac:	687a      	ldr	r2, [r7, #4]
 8020dae:	429a      	cmp	r2, r3
 8020db0:	dc01      	bgt.n	8020db6 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8020db2:	2300      	movs	r3, #0
 8020db4:	e030      	b.n	8020e18 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8020db6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8020dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020dbc:	1c59      	adds	r1, r3, #1
 8020dbe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8020dc0:	3230      	adds	r2, #48	; 0x30
 8020dc2:	443a      	add	r2, r7
 8020dc4:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8020dc8:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8020dca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8020dce:	1e5a      	subs	r2, r3, #1
 8020dd0:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8020dd4:	2b00      	cmp	r3, #0
 8020dd6:	d1e6      	bne.n	8020da6 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8020dd8:	6a3b      	ldr	r3, [r7, #32]
 8020dda:	1c5a      	adds	r2, r3, #1
 8020ddc:	623a      	str	r2, [r7, #32]
 8020dde:	687a      	ldr	r2, [r7, #4]
 8020de0:	429a      	cmp	r2, r3
 8020de2:	dc01      	bgt.n	8020de8 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8020de4:	2300      	movs	r3, #0
 8020de6:	e017      	b.n	8020e18 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8020de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020dea:	1c5a      	adds	r2, r3, #1
 8020dec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8020dee:	222e      	movs	r2, #46	; 0x2e
 8020df0:	701a      	strb	r2, [r3, #0]
    ap++;
 8020df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020df4:	3301      	adds	r3, #1
 8020df6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8020df8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020dfc:	3301      	adds	r3, #1
 8020dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020e02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020e06:	2b03      	cmp	r3, #3
 8020e08:	d9a2      	bls.n	8020d50 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8020e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020e0c:	3b01      	subs	r3, #1
 8020e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020e12:	2200      	movs	r2, #0
 8020e14:	701a      	strb	r2, [r3, #0]
  return buf;
 8020e16:	68bb      	ldr	r3, [r7, #8]
}
 8020e18:	4618      	mov	r0, r3
 8020e1a:	3734      	adds	r7, #52	; 0x34
 8020e1c:	46bd      	mov	sp, r7
 8020e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e22:	4770      	bx	lr
 8020e24:	cccccccd 	.word	0xcccccccd

08020e28 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8020e28:	b580      	push	{r7, lr}
 8020e2a:	b084      	sub	sp, #16
 8020e2c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8020e2e:	2300      	movs	r3, #0
 8020e30:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8020e32:	4b12      	ldr	r3, [pc, #72]	; (8020e7c <ip_reass_tmr+0x54>)
 8020e34:	681b      	ldr	r3, [r3, #0]
 8020e36:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8020e38:	e018      	b.n	8020e6c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8020e3a:	68fb      	ldr	r3, [r7, #12]
 8020e3c:	7fdb      	ldrb	r3, [r3, #31]
 8020e3e:	2b00      	cmp	r3, #0
 8020e40:	d00b      	beq.n	8020e5a <ip_reass_tmr+0x32>
      r->timer--;
 8020e42:	68fb      	ldr	r3, [r7, #12]
 8020e44:	7fdb      	ldrb	r3, [r3, #31]
 8020e46:	3b01      	subs	r3, #1
 8020e48:	b2da      	uxtb	r2, r3
 8020e4a:	68fb      	ldr	r3, [r7, #12]
 8020e4c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8020e4e:	68fb      	ldr	r3, [r7, #12]
 8020e50:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8020e52:	68fb      	ldr	r3, [r7, #12]
 8020e54:	681b      	ldr	r3, [r3, #0]
 8020e56:	60fb      	str	r3, [r7, #12]
 8020e58:	e008      	b.n	8020e6c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8020e5a:	68fb      	ldr	r3, [r7, #12]
 8020e5c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8020e5e:	68fb      	ldr	r3, [r7, #12]
 8020e60:	681b      	ldr	r3, [r3, #0]
 8020e62:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8020e64:	68b9      	ldr	r1, [r7, #8]
 8020e66:	6878      	ldr	r0, [r7, #4]
 8020e68:	f000 f80a 	bl	8020e80 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8020e6c:	68fb      	ldr	r3, [r7, #12]
 8020e6e:	2b00      	cmp	r3, #0
 8020e70:	d1e3      	bne.n	8020e3a <ip_reass_tmr+0x12>
    }
  }
}
 8020e72:	bf00      	nop
 8020e74:	bf00      	nop
 8020e76:	3710      	adds	r7, #16
 8020e78:	46bd      	mov	sp, r7
 8020e7a:	bd80      	pop	{r7, pc}
 8020e7c:	200133c8 	.word	0x200133c8

08020e80 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8020e80:	b580      	push	{r7, lr}
 8020e82:	b088      	sub	sp, #32
 8020e84:	af00      	add	r7, sp, #0
 8020e86:	6078      	str	r0, [r7, #4]
 8020e88:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8020e8a:	2300      	movs	r3, #0
 8020e8c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8020e8e:	683a      	ldr	r2, [r7, #0]
 8020e90:	687b      	ldr	r3, [r7, #4]
 8020e92:	429a      	cmp	r2, r3
 8020e94:	d105      	bne.n	8020ea2 <ip_reass_free_complete_datagram+0x22>
 8020e96:	4b45      	ldr	r3, [pc, #276]	; (8020fac <ip_reass_free_complete_datagram+0x12c>)
 8020e98:	22ab      	movs	r2, #171	; 0xab
 8020e9a:	4945      	ldr	r1, [pc, #276]	; (8020fb0 <ip_reass_free_complete_datagram+0x130>)
 8020e9c:	4845      	ldr	r0, [pc, #276]	; (8020fb4 <ip_reass_free_complete_datagram+0x134>)
 8020e9e:	f003 f89b 	bl	8023fd8 <iprintf>
  if (prev != NULL) {
 8020ea2:	683b      	ldr	r3, [r7, #0]
 8020ea4:	2b00      	cmp	r3, #0
 8020ea6:	d00a      	beq.n	8020ebe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8020ea8:	683b      	ldr	r3, [r7, #0]
 8020eaa:	681b      	ldr	r3, [r3, #0]
 8020eac:	687a      	ldr	r2, [r7, #4]
 8020eae:	429a      	cmp	r2, r3
 8020eb0:	d005      	beq.n	8020ebe <ip_reass_free_complete_datagram+0x3e>
 8020eb2:	4b3e      	ldr	r3, [pc, #248]	; (8020fac <ip_reass_free_complete_datagram+0x12c>)
 8020eb4:	22ad      	movs	r2, #173	; 0xad
 8020eb6:	4940      	ldr	r1, [pc, #256]	; (8020fb8 <ip_reass_free_complete_datagram+0x138>)
 8020eb8:	483e      	ldr	r0, [pc, #248]	; (8020fb4 <ip_reass_free_complete_datagram+0x134>)
 8020eba:	f003 f88d 	bl	8023fd8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8020ebe:	687b      	ldr	r3, [r7, #4]
 8020ec0:	685b      	ldr	r3, [r3, #4]
 8020ec2:	685b      	ldr	r3, [r3, #4]
 8020ec4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8020ec6:	697b      	ldr	r3, [r7, #20]
 8020ec8:	889b      	ldrh	r3, [r3, #4]
 8020eca:	b29b      	uxth	r3, r3
 8020ecc:	2b00      	cmp	r3, #0
 8020ece:	d12a      	bne.n	8020f26 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8020ed0:	687b      	ldr	r3, [r7, #4]
 8020ed2:	685b      	ldr	r3, [r3, #4]
 8020ed4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8020ed6:	697b      	ldr	r3, [r7, #20]
 8020ed8:	681a      	ldr	r2, [r3, #0]
 8020eda:	687b      	ldr	r3, [r7, #4]
 8020edc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8020ede:	69bb      	ldr	r3, [r7, #24]
 8020ee0:	6858      	ldr	r0, [r3, #4]
 8020ee2:	687b      	ldr	r3, [r7, #4]
 8020ee4:	3308      	adds	r3, #8
 8020ee6:	2214      	movs	r2, #20
 8020ee8:	4619      	mov	r1, r3
 8020eea:	f003 fb5e 	bl	80245aa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8020eee:	2101      	movs	r1, #1
 8020ef0:	69b8      	ldr	r0, [r7, #24]
 8020ef2:	f7ff fb99 	bl	8020628 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8020ef6:	69b8      	ldr	r0, [r7, #24]
 8020ef8:	f7f5 fb56 	bl	80165a8 <pbuf_clen>
 8020efc:	4603      	mov	r3, r0
 8020efe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8020f00:	8bfa      	ldrh	r2, [r7, #30]
 8020f02:	8a7b      	ldrh	r3, [r7, #18]
 8020f04:	4413      	add	r3, r2
 8020f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020f0a:	db05      	blt.n	8020f18 <ip_reass_free_complete_datagram+0x98>
 8020f0c:	4b27      	ldr	r3, [pc, #156]	; (8020fac <ip_reass_free_complete_datagram+0x12c>)
 8020f0e:	22bc      	movs	r2, #188	; 0xbc
 8020f10:	492a      	ldr	r1, [pc, #168]	; (8020fbc <ip_reass_free_complete_datagram+0x13c>)
 8020f12:	4828      	ldr	r0, [pc, #160]	; (8020fb4 <ip_reass_free_complete_datagram+0x134>)
 8020f14:	f003 f860 	bl	8023fd8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8020f18:	8bfa      	ldrh	r2, [r7, #30]
 8020f1a:	8a7b      	ldrh	r3, [r7, #18]
 8020f1c:	4413      	add	r3, r2
 8020f1e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8020f20:	69b8      	ldr	r0, [r7, #24]
 8020f22:	f7f5 fab3 	bl	801648c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8020f26:	687b      	ldr	r3, [r7, #4]
 8020f28:	685b      	ldr	r3, [r3, #4]
 8020f2a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8020f2c:	e01f      	b.n	8020f6e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8020f2e:	69bb      	ldr	r3, [r7, #24]
 8020f30:	685b      	ldr	r3, [r3, #4]
 8020f32:	617b      	str	r3, [r7, #20]
    pcur = p;
 8020f34:	69bb      	ldr	r3, [r7, #24]
 8020f36:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8020f38:	697b      	ldr	r3, [r7, #20]
 8020f3a:	681b      	ldr	r3, [r3, #0]
 8020f3c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8020f3e:	68f8      	ldr	r0, [r7, #12]
 8020f40:	f7f5 fb32 	bl	80165a8 <pbuf_clen>
 8020f44:	4603      	mov	r3, r0
 8020f46:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8020f48:	8bfa      	ldrh	r2, [r7, #30]
 8020f4a:	8a7b      	ldrh	r3, [r7, #18]
 8020f4c:	4413      	add	r3, r2
 8020f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020f52:	db05      	blt.n	8020f60 <ip_reass_free_complete_datagram+0xe0>
 8020f54:	4b15      	ldr	r3, [pc, #84]	; (8020fac <ip_reass_free_complete_datagram+0x12c>)
 8020f56:	22cc      	movs	r2, #204	; 0xcc
 8020f58:	4918      	ldr	r1, [pc, #96]	; (8020fbc <ip_reass_free_complete_datagram+0x13c>)
 8020f5a:	4816      	ldr	r0, [pc, #88]	; (8020fb4 <ip_reass_free_complete_datagram+0x134>)
 8020f5c:	f003 f83c 	bl	8023fd8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8020f60:	8bfa      	ldrh	r2, [r7, #30]
 8020f62:	8a7b      	ldrh	r3, [r7, #18]
 8020f64:	4413      	add	r3, r2
 8020f66:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8020f68:	68f8      	ldr	r0, [r7, #12]
 8020f6a:	f7f5 fa8f 	bl	801648c <pbuf_free>
  while (p != NULL) {
 8020f6e:	69bb      	ldr	r3, [r7, #24]
 8020f70:	2b00      	cmp	r3, #0
 8020f72:	d1dc      	bne.n	8020f2e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8020f74:	6839      	ldr	r1, [r7, #0]
 8020f76:	6878      	ldr	r0, [r7, #4]
 8020f78:	f000 f8c2 	bl	8021100 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8020f7c:	4b10      	ldr	r3, [pc, #64]	; (8020fc0 <ip_reass_free_complete_datagram+0x140>)
 8020f7e:	881b      	ldrh	r3, [r3, #0]
 8020f80:	8bfa      	ldrh	r2, [r7, #30]
 8020f82:	429a      	cmp	r2, r3
 8020f84:	d905      	bls.n	8020f92 <ip_reass_free_complete_datagram+0x112>
 8020f86:	4b09      	ldr	r3, [pc, #36]	; (8020fac <ip_reass_free_complete_datagram+0x12c>)
 8020f88:	22d2      	movs	r2, #210	; 0xd2
 8020f8a:	490e      	ldr	r1, [pc, #56]	; (8020fc4 <ip_reass_free_complete_datagram+0x144>)
 8020f8c:	4809      	ldr	r0, [pc, #36]	; (8020fb4 <ip_reass_free_complete_datagram+0x134>)
 8020f8e:	f003 f823 	bl	8023fd8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8020f92:	4b0b      	ldr	r3, [pc, #44]	; (8020fc0 <ip_reass_free_complete_datagram+0x140>)
 8020f94:	881a      	ldrh	r2, [r3, #0]
 8020f96:	8bfb      	ldrh	r3, [r7, #30]
 8020f98:	1ad3      	subs	r3, r2, r3
 8020f9a:	b29a      	uxth	r2, r3
 8020f9c:	4b08      	ldr	r3, [pc, #32]	; (8020fc0 <ip_reass_free_complete_datagram+0x140>)
 8020f9e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8020fa0:	8bfb      	ldrh	r3, [r7, #30]
}
 8020fa2:	4618      	mov	r0, r3
 8020fa4:	3720      	adds	r7, #32
 8020fa6:	46bd      	mov	sp, r7
 8020fa8:	bd80      	pop	{r7, pc}
 8020faa:	bf00      	nop
 8020fac:	0802aa14 	.word	0x0802aa14
 8020fb0:	0802aa50 	.word	0x0802aa50
 8020fb4:	0802aa5c 	.word	0x0802aa5c
 8020fb8:	0802aa84 	.word	0x0802aa84
 8020fbc:	0802aa98 	.word	0x0802aa98
 8020fc0:	200133cc 	.word	0x200133cc
 8020fc4:	0802aab8 	.word	0x0802aab8

08020fc8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8020fc8:	b580      	push	{r7, lr}
 8020fca:	b08a      	sub	sp, #40	; 0x28
 8020fcc:	af00      	add	r7, sp, #0
 8020fce:	6078      	str	r0, [r7, #4]
 8020fd0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8020fd2:	2300      	movs	r3, #0
 8020fd4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8020fd6:	2300      	movs	r3, #0
 8020fd8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8020fda:	2300      	movs	r3, #0
 8020fdc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8020fde:	2300      	movs	r3, #0
 8020fe0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8020fe2:	2300      	movs	r3, #0
 8020fe4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8020fe6:	4b28      	ldr	r3, [pc, #160]	; (8021088 <ip_reass_remove_oldest_datagram+0xc0>)
 8020fe8:	681b      	ldr	r3, [r3, #0]
 8020fea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8020fec:	e030      	b.n	8021050 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8020fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ff0:	695a      	ldr	r2, [r3, #20]
 8020ff2:	687b      	ldr	r3, [r7, #4]
 8020ff4:	68db      	ldr	r3, [r3, #12]
 8020ff6:	429a      	cmp	r2, r3
 8020ff8:	d10c      	bne.n	8021014 <ip_reass_remove_oldest_datagram+0x4c>
 8020ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ffc:	699a      	ldr	r2, [r3, #24]
 8020ffe:	687b      	ldr	r3, [r7, #4]
 8021000:	691b      	ldr	r3, [r3, #16]
 8021002:	429a      	cmp	r2, r3
 8021004:	d106      	bne.n	8021014 <ip_reass_remove_oldest_datagram+0x4c>
 8021006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021008:	899a      	ldrh	r2, [r3, #12]
 802100a:	687b      	ldr	r3, [r7, #4]
 802100c:	889b      	ldrh	r3, [r3, #4]
 802100e:	b29b      	uxth	r3, r3
 8021010:	429a      	cmp	r2, r3
 8021012:	d014      	beq.n	802103e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8021014:	693b      	ldr	r3, [r7, #16]
 8021016:	3301      	adds	r3, #1
 8021018:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 802101a:	6a3b      	ldr	r3, [r7, #32]
 802101c:	2b00      	cmp	r3, #0
 802101e:	d104      	bne.n	802102a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8021020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021022:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8021024:	69fb      	ldr	r3, [r7, #28]
 8021026:	61bb      	str	r3, [r7, #24]
 8021028:	e009      	b.n	802103e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 802102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802102c:	7fda      	ldrb	r2, [r3, #31]
 802102e:	6a3b      	ldr	r3, [r7, #32]
 8021030:	7fdb      	ldrb	r3, [r3, #31]
 8021032:	429a      	cmp	r2, r3
 8021034:	d803      	bhi.n	802103e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8021036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021038:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 802103a:	69fb      	ldr	r3, [r7, #28]
 802103c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 802103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021040:	681b      	ldr	r3, [r3, #0]
 8021042:	2b00      	cmp	r3, #0
 8021044:	d001      	beq.n	802104a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8021046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021048:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 802104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802104c:	681b      	ldr	r3, [r3, #0]
 802104e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8021050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021052:	2b00      	cmp	r3, #0
 8021054:	d1cb      	bne.n	8020fee <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8021056:	6a3b      	ldr	r3, [r7, #32]
 8021058:	2b00      	cmp	r3, #0
 802105a:	d008      	beq.n	802106e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 802105c:	69b9      	ldr	r1, [r7, #24]
 802105e:	6a38      	ldr	r0, [r7, #32]
 8021060:	f7ff ff0e 	bl	8020e80 <ip_reass_free_complete_datagram>
 8021064:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8021066:	697a      	ldr	r2, [r7, #20]
 8021068:	68fb      	ldr	r3, [r7, #12]
 802106a:	4413      	add	r3, r2
 802106c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 802106e:	697a      	ldr	r2, [r7, #20]
 8021070:	683b      	ldr	r3, [r7, #0]
 8021072:	429a      	cmp	r2, r3
 8021074:	da02      	bge.n	802107c <ip_reass_remove_oldest_datagram+0xb4>
 8021076:	693b      	ldr	r3, [r7, #16]
 8021078:	2b01      	cmp	r3, #1
 802107a:	dcac      	bgt.n	8020fd6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 802107c:	697b      	ldr	r3, [r7, #20]
}
 802107e:	4618      	mov	r0, r3
 8021080:	3728      	adds	r7, #40	; 0x28
 8021082:	46bd      	mov	sp, r7
 8021084:	bd80      	pop	{r7, pc}
 8021086:	bf00      	nop
 8021088:	200133c8 	.word	0x200133c8

0802108c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 802108c:	b580      	push	{r7, lr}
 802108e:	b084      	sub	sp, #16
 8021090:	af00      	add	r7, sp, #0
 8021092:	6078      	str	r0, [r7, #4]
 8021094:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8021096:	2004      	movs	r0, #4
 8021098:	f7f4 fad2 	bl	8015640 <memp_malloc>
 802109c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 802109e:	68fb      	ldr	r3, [r7, #12]
 80210a0:	2b00      	cmp	r3, #0
 80210a2:	d110      	bne.n	80210c6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80210a4:	6839      	ldr	r1, [r7, #0]
 80210a6:	6878      	ldr	r0, [r7, #4]
 80210a8:	f7ff ff8e 	bl	8020fc8 <ip_reass_remove_oldest_datagram>
 80210ac:	4602      	mov	r2, r0
 80210ae:	683b      	ldr	r3, [r7, #0]
 80210b0:	4293      	cmp	r3, r2
 80210b2:	dc03      	bgt.n	80210bc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80210b4:	2004      	movs	r0, #4
 80210b6:	f7f4 fac3 	bl	8015640 <memp_malloc>
 80210ba:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80210bc:	68fb      	ldr	r3, [r7, #12]
 80210be:	2b00      	cmp	r3, #0
 80210c0:	d101      	bne.n	80210c6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80210c2:	2300      	movs	r3, #0
 80210c4:	e016      	b.n	80210f4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80210c6:	2220      	movs	r2, #32
 80210c8:	2100      	movs	r1, #0
 80210ca:	68f8      	ldr	r0, [r7, #12]
 80210cc:	f003 f948 	bl	8024360 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80210d0:	68fb      	ldr	r3, [r7, #12]
 80210d2:	220f      	movs	r2, #15
 80210d4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80210d6:	4b09      	ldr	r3, [pc, #36]	; (80210fc <ip_reass_enqueue_new_datagram+0x70>)
 80210d8:	681a      	ldr	r2, [r3, #0]
 80210da:	68fb      	ldr	r3, [r7, #12]
 80210dc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80210de:	4a07      	ldr	r2, [pc, #28]	; (80210fc <ip_reass_enqueue_new_datagram+0x70>)
 80210e0:	68fb      	ldr	r3, [r7, #12]
 80210e2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80210e4:	68fb      	ldr	r3, [r7, #12]
 80210e6:	3308      	adds	r3, #8
 80210e8:	2214      	movs	r2, #20
 80210ea:	6879      	ldr	r1, [r7, #4]
 80210ec:	4618      	mov	r0, r3
 80210ee:	f003 fa5c 	bl	80245aa <memcpy>
  return ipr;
 80210f2:	68fb      	ldr	r3, [r7, #12]
}
 80210f4:	4618      	mov	r0, r3
 80210f6:	3710      	adds	r7, #16
 80210f8:	46bd      	mov	sp, r7
 80210fa:	bd80      	pop	{r7, pc}
 80210fc:	200133c8 	.word	0x200133c8

08021100 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8021100:	b580      	push	{r7, lr}
 8021102:	b082      	sub	sp, #8
 8021104:	af00      	add	r7, sp, #0
 8021106:	6078      	str	r0, [r7, #4]
 8021108:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 802110a:	4b10      	ldr	r3, [pc, #64]	; (802114c <ip_reass_dequeue_datagram+0x4c>)
 802110c:	681b      	ldr	r3, [r3, #0]
 802110e:	687a      	ldr	r2, [r7, #4]
 8021110:	429a      	cmp	r2, r3
 8021112:	d104      	bne.n	802111e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8021114:	687b      	ldr	r3, [r7, #4]
 8021116:	681b      	ldr	r3, [r3, #0]
 8021118:	4a0c      	ldr	r2, [pc, #48]	; (802114c <ip_reass_dequeue_datagram+0x4c>)
 802111a:	6013      	str	r3, [r2, #0]
 802111c:	e00d      	b.n	802113a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 802111e:	683b      	ldr	r3, [r7, #0]
 8021120:	2b00      	cmp	r3, #0
 8021122:	d106      	bne.n	8021132 <ip_reass_dequeue_datagram+0x32>
 8021124:	4b0a      	ldr	r3, [pc, #40]	; (8021150 <ip_reass_dequeue_datagram+0x50>)
 8021126:	f240 1245 	movw	r2, #325	; 0x145
 802112a:	490a      	ldr	r1, [pc, #40]	; (8021154 <ip_reass_dequeue_datagram+0x54>)
 802112c:	480a      	ldr	r0, [pc, #40]	; (8021158 <ip_reass_dequeue_datagram+0x58>)
 802112e:	f002 ff53 	bl	8023fd8 <iprintf>
    prev->next = ipr->next;
 8021132:	687b      	ldr	r3, [r7, #4]
 8021134:	681a      	ldr	r2, [r3, #0]
 8021136:	683b      	ldr	r3, [r7, #0]
 8021138:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 802113a:	6879      	ldr	r1, [r7, #4]
 802113c:	2004      	movs	r0, #4
 802113e:	f7f4 faf5 	bl	801572c <memp_free>
}
 8021142:	bf00      	nop
 8021144:	3708      	adds	r7, #8
 8021146:	46bd      	mov	sp, r7
 8021148:	bd80      	pop	{r7, pc}
 802114a:	bf00      	nop
 802114c:	200133c8 	.word	0x200133c8
 8021150:	0802aa14 	.word	0x0802aa14
 8021154:	0802aadc 	.word	0x0802aadc
 8021158:	0802aa5c 	.word	0x0802aa5c

0802115c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 802115c:	b580      	push	{r7, lr}
 802115e:	b08c      	sub	sp, #48	; 0x30
 8021160:	af00      	add	r7, sp, #0
 8021162:	60f8      	str	r0, [r7, #12]
 8021164:	60b9      	str	r1, [r7, #8]
 8021166:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8021168:	2300      	movs	r3, #0
 802116a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 802116c:	2301      	movs	r3, #1
 802116e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8021170:	68bb      	ldr	r3, [r7, #8]
 8021172:	685b      	ldr	r3, [r3, #4]
 8021174:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8021176:	69fb      	ldr	r3, [r7, #28]
 8021178:	885b      	ldrh	r3, [r3, #2]
 802117a:	b29b      	uxth	r3, r3
 802117c:	4618      	mov	r0, r3
 802117e:	f7f3 fd87 	bl	8014c90 <lwip_htons>
 8021182:	4603      	mov	r3, r0
 8021184:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8021186:	69fb      	ldr	r3, [r7, #28]
 8021188:	781b      	ldrb	r3, [r3, #0]
 802118a:	f003 030f 	and.w	r3, r3, #15
 802118e:	b2db      	uxtb	r3, r3
 8021190:	009b      	lsls	r3, r3, #2
 8021192:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8021194:	7e7b      	ldrb	r3, [r7, #25]
 8021196:	b29b      	uxth	r3, r3
 8021198:	8b7a      	ldrh	r2, [r7, #26]
 802119a:	429a      	cmp	r2, r3
 802119c:	d202      	bcs.n	80211a4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 802119e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80211a2:	e135      	b.n	8021410 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80211a4:	7e7b      	ldrb	r3, [r7, #25]
 80211a6:	b29b      	uxth	r3, r3
 80211a8:	8b7a      	ldrh	r2, [r7, #26]
 80211aa:	1ad3      	subs	r3, r2, r3
 80211ac:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80211ae:	69fb      	ldr	r3, [r7, #28]
 80211b0:	88db      	ldrh	r3, [r3, #6]
 80211b2:	b29b      	uxth	r3, r3
 80211b4:	4618      	mov	r0, r3
 80211b6:	f7f3 fd6b 	bl	8014c90 <lwip_htons>
 80211ba:	4603      	mov	r3, r0
 80211bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80211c0:	b29b      	uxth	r3, r3
 80211c2:	00db      	lsls	r3, r3, #3
 80211c4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80211c6:	68bb      	ldr	r3, [r7, #8]
 80211c8:	685b      	ldr	r3, [r3, #4]
 80211ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80211cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80211ce:	2200      	movs	r2, #0
 80211d0:	701a      	strb	r2, [r3, #0]
 80211d2:	2200      	movs	r2, #0
 80211d4:	705a      	strb	r2, [r3, #1]
 80211d6:	2200      	movs	r2, #0
 80211d8:	709a      	strb	r2, [r3, #2]
 80211da:	2200      	movs	r2, #0
 80211dc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80211de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80211e0:	8afa      	ldrh	r2, [r7, #22]
 80211e2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80211e4:	8afa      	ldrh	r2, [r7, #22]
 80211e6:	8b7b      	ldrh	r3, [r7, #26]
 80211e8:	4413      	add	r3, r2
 80211ea:	b29a      	uxth	r2, r3
 80211ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80211ee:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80211f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80211f2:	88db      	ldrh	r3, [r3, #6]
 80211f4:	b29b      	uxth	r3, r3
 80211f6:	8afa      	ldrh	r2, [r7, #22]
 80211f8:	429a      	cmp	r2, r3
 80211fa:	d902      	bls.n	8021202 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80211fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021200:	e106      	b.n	8021410 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8021202:	68fb      	ldr	r3, [r7, #12]
 8021204:	685b      	ldr	r3, [r3, #4]
 8021206:	627b      	str	r3, [r7, #36]	; 0x24
 8021208:	e068      	b.n	80212dc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 802120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802120c:	685b      	ldr	r3, [r3, #4]
 802120e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8021210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021212:	889b      	ldrh	r3, [r3, #4]
 8021214:	b29a      	uxth	r2, r3
 8021216:	693b      	ldr	r3, [r7, #16]
 8021218:	889b      	ldrh	r3, [r3, #4]
 802121a:	b29b      	uxth	r3, r3
 802121c:	429a      	cmp	r2, r3
 802121e:	d235      	bcs.n	802128c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8021220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021224:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8021226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021228:	2b00      	cmp	r3, #0
 802122a:	d020      	beq.n	802126e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 802122c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802122e:	889b      	ldrh	r3, [r3, #4]
 8021230:	b29a      	uxth	r2, r3
 8021232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021234:	88db      	ldrh	r3, [r3, #6]
 8021236:	b29b      	uxth	r3, r3
 8021238:	429a      	cmp	r2, r3
 802123a:	d307      	bcc.n	802124c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 802123c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802123e:	88db      	ldrh	r3, [r3, #6]
 8021240:	b29a      	uxth	r2, r3
 8021242:	693b      	ldr	r3, [r7, #16]
 8021244:	889b      	ldrh	r3, [r3, #4]
 8021246:	b29b      	uxth	r3, r3
 8021248:	429a      	cmp	r2, r3
 802124a:	d902      	bls.n	8021252 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 802124c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021250:	e0de      	b.n	8021410 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8021252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021254:	68ba      	ldr	r2, [r7, #8]
 8021256:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8021258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802125a:	88db      	ldrh	r3, [r3, #6]
 802125c:	b29a      	uxth	r2, r3
 802125e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021260:	889b      	ldrh	r3, [r3, #4]
 8021262:	b29b      	uxth	r3, r3
 8021264:	429a      	cmp	r2, r3
 8021266:	d03d      	beq.n	80212e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8021268:	2300      	movs	r3, #0
 802126a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 802126c:	e03a      	b.n	80212e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 802126e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021270:	88db      	ldrh	r3, [r3, #6]
 8021272:	b29a      	uxth	r2, r3
 8021274:	693b      	ldr	r3, [r7, #16]
 8021276:	889b      	ldrh	r3, [r3, #4]
 8021278:	b29b      	uxth	r3, r3
 802127a:	429a      	cmp	r2, r3
 802127c:	d902      	bls.n	8021284 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 802127e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021282:	e0c5      	b.n	8021410 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8021284:	68fb      	ldr	r3, [r7, #12]
 8021286:	68ba      	ldr	r2, [r7, #8]
 8021288:	605a      	str	r2, [r3, #4]
      break;
 802128a:	e02b      	b.n	80212e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 802128c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802128e:	889b      	ldrh	r3, [r3, #4]
 8021290:	b29a      	uxth	r2, r3
 8021292:	693b      	ldr	r3, [r7, #16]
 8021294:	889b      	ldrh	r3, [r3, #4]
 8021296:	b29b      	uxth	r3, r3
 8021298:	429a      	cmp	r2, r3
 802129a:	d102      	bne.n	80212a2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 802129c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80212a0:	e0b6      	b.n	8021410 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80212a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80212a4:	889b      	ldrh	r3, [r3, #4]
 80212a6:	b29a      	uxth	r2, r3
 80212a8:	693b      	ldr	r3, [r7, #16]
 80212aa:	88db      	ldrh	r3, [r3, #6]
 80212ac:	b29b      	uxth	r3, r3
 80212ae:	429a      	cmp	r2, r3
 80212b0:	d202      	bcs.n	80212b8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80212b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80212b6:	e0ab      	b.n	8021410 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80212b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80212ba:	2b00      	cmp	r3, #0
 80212bc:	d009      	beq.n	80212d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80212be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80212c0:	88db      	ldrh	r3, [r3, #6]
 80212c2:	b29a      	uxth	r2, r3
 80212c4:	693b      	ldr	r3, [r7, #16]
 80212c6:	889b      	ldrh	r3, [r3, #4]
 80212c8:	b29b      	uxth	r3, r3
 80212ca:	429a      	cmp	r2, r3
 80212cc:	d001      	beq.n	80212d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80212ce:	2300      	movs	r3, #0
 80212d0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80212d2:	693b      	ldr	r3, [r7, #16]
 80212d4:	681b      	ldr	r3, [r3, #0]
 80212d6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80212d8:	693b      	ldr	r3, [r7, #16]
 80212da:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80212dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80212de:	2b00      	cmp	r3, #0
 80212e0:	d193      	bne.n	802120a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80212e2:	e000      	b.n	80212e6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80212e4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80212e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80212e8:	2b00      	cmp	r3, #0
 80212ea:	d12d      	bne.n	8021348 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80212ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80212ee:	2b00      	cmp	r3, #0
 80212f0:	d01c      	beq.n	802132c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80212f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80212f4:	88db      	ldrh	r3, [r3, #6]
 80212f6:	b29a      	uxth	r2, r3
 80212f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80212fa:	889b      	ldrh	r3, [r3, #4]
 80212fc:	b29b      	uxth	r3, r3
 80212fe:	429a      	cmp	r2, r3
 8021300:	d906      	bls.n	8021310 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8021302:	4b45      	ldr	r3, [pc, #276]	; (8021418 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021304:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8021308:	4944      	ldr	r1, [pc, #272]	; (802141c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 802130a:	4845      	ldr	r0, [pc, #276]	; (8021420 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 802130c:	f002 fe64 	bl	8023fd8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8021310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021312:	68ba      	ldr	r2, [r7, #8]
 8021314:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8021316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021318:	88db      	ldrh	r3, [r3, #6]
 802131a:	b29a      	uxth	r2, r3
 802131c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802131e:	889b      	ldrh	r3, [r3, #4]
 8021320:	b29b      	uxth	r3, r3
 8021322:	429a      	cmp	r2, r3
 8021324:	d010      	beq.n	8021348 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8021326:	2300      	movs	r3, #0
 8021328:	623b      	str	r3, [r7, #32]
 802132a:	e00d      	b.n	8021348 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 802132c:	68fb      	ldr	r3, [r7, #12]
 802132e:	685b      	ldr	r3, [r3, #4]
 8021330:	2b00      	cmp	r3, #0
 8021332:	d006      	beq.n	8021342 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8021334:	4b38      	ldr	r3, [pc, #224]	; (8021418 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021336:	f44f 72df 	mov.w	r2, #446	; 0x1be
 802133a:	493a      	ldr	r1, [pc, #232]	; (8021424 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 802133c:	4838      	ldr	r0, [pc, #224]	; (8021420 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 802133e:	f002 fe4b 	bl	8023fd8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8021342:	68fb      	ldr	r3, [r7, #12]
 8021344:	68ba      	ldr	r2, [r7, #8]
 8021346:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8021348:	687b      	ldr	r3, [r7, #4]
 802134a:	2b00      	cmp	r3, #0
 802134c:	d105      	bne.n	802135a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 802134e:	68fb      	ldr	r3, [r7, #12]
 8021350:	7f9b      	ldrb	r3, [r3, #30]
 8021352:	f003 0301 	and.w	r3, r3, #1
 8021356:	2b00      	cmp	r3, #0
 8021358:	d059      	beq.n	802140e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 802135a:	6a3b      	ldr	r3, [r7, #32]
 802135c:	2b00      	cmp	r3, #0
 802135e:	d04f      	beq.n	8021400 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8021360:	68fb      	ldr	r3, [r7, #12]
 8021362:	685b      	ldr	r3, [r3, #4]
 8021364:	2b00      	cmp	r3, #0
 8021366:	d006      	beq.n	8021376 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8021368:	68fb      	ldr	r3, [r7, #12]
 802136a:	685b      	ldr	r3, [r3, #4]
 802136c:	685b      	ldr	r3, [r3, #4]
 802136e:	889b      	ldrh	r3, [r3, #4]
 8021370:	b29b      	uxth	r3, r3
 8021372:	2b00      	cmp	r3, #0
 8021374:	d002      	beq.n	802137c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8021376:	2300      	movs	r3, #0
 8021378:	623b      	str	r3, [r7, #32]
 802137a:	e041      	b.n	8021400 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 802137c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802137e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8021380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021382:	681b      	ldr	r3, [r3, #0]
 8021384:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8021386:	e012      	b.n	80213ae <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8021388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802138a:	685b      	ldr	r3, [r3, #4]
 802138c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 802138e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021390:	88db      	ldrh	r3, [r3, #6]
 8021392:	b29a      	uxth	r2, r3
 8021394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021396:	889b      	ldrh	r3, [r3, #4]
 8021398:	b29b      	uxth	r3, r3
 802139a:	429a      	cmp	r2, r3
 802139c:	d002      	beq.n	80213a4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 802139e:	2300      	movs	r3, #0
 80213a0:	623b      	str	r3, [r7, #32]
            break;
 80213a2:	e007      	b.n	80213b4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80213a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80213a6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80213a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80213aa:	681b      	ldr	r3, [r3, #0]
 80213ac:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80213ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213b0:	2b00      	cmp	r3, #0
 80213b2:	d1e9      	bne.n	8021388 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80213b4:	6a3b      	ldr	r3, [r7, #32]
 80213b6:	2b00      	cmp	r3, #0
 80213b8:	d022      	beq.n	8021400 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80213ba:	68fb      	ldr	r3, [r7, #12]
 80213bc:	685b      	ldr	r3, [r3, #4]
 80213be:	2b00      	cmp	r3, #0
 80213c0:	d106      	bne.n	80213d0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80213c2:	4b15      	ldr	r3, [pc, #84]	; (8021418 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80213c4:	f240 12df 	movw	r2, #479	; 0x1df
 80213c8:	4917      	ldr	r1, [pc, #92]	; (8021428 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80213ca:	4815      	ldr	r0, [pc, #84]	; (8021420 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80213cc:	f002 fe04 	bl	8023fd8 <iprintf>
          LWIP_ASSERT("sanity check",
 80213d0:	68fb      	ldr	r3, [r7, #12]
 80213d2:	685b      	ldr	r3, [r3, #4]
 80213d4:	685b      	ldr	r3, [r3, #4]
 80213d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80213d8:	429a      	cmp	r2, r3
 80213da:	d106      	bne.n	80213ea <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80213dc:	4b0e      	ldr	r3, [pc, #56]	; (8021418 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80213de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80213e2:	4911      	ldr	r1, [pc, #68]	; (8021428 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80213e4:	480e      	ldr	r0, [pc, #56]	; (8021420 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80213e6:	f002 fdf7 	bl	8023fd8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80213ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80213ec:	681b      	ldr	r3, [r3, #0]
 80213ee:	2b00      	cmp	r3, #0
 80213f0:	d006      	beq.n	8021400 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80213f2:	4b09      	ldr	r3, [pc, #36]	; (8021418 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80213f4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80213f8:	490c      	ldr	r1, [pc, #48]	; (802142c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80213fa:	4809      	ldr	r0, [pc, #36]	; (8021420 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80213fc:	f002 fdec 	bl	8023fd8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8021400:	6a3b      	ldr	r3, [r7, #32]
 8021402:	2b00      	cmp	r3, #0
 8021404:	bf14      	ite	ne
 8021406:	2301      	movne	r3, #1
 8021408:	2300      	moveq	r3, #0
 802140a:	b2db      	uxtb	r3, r3
 802140c:	e000      	b.n	8021410 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 802140e:	2300      	movs	r3, #0
}
 8021410:	4618      	mov	r0, r3
 8021412:	3730      	adds	r7, #48	; 0x30
 8021414:	46bd      	mov	sp, r7
 8021416:	bd80      	pop	{r7, pc}
 8021418:	0802aa14 	.word	0x0802aa14
 802141c:	0802aaf8 	.word	0x0802aaf8
 8021420:	0802aa5c 	.word	0x0802aa5c
 8021424:	0802ab18 	.word	0x0802ab18
 8021428:	0802ab50 	.word	0x0802ab50
 802142c:	0802ab60 	.word	0x0802ab60

08021430 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8021430:	b580      	push	{r7, lr}
 8021432:	b08e      	sub	sp, #56	; 0x38
 8021434:	af00      	add	r7, sp, #0
 8021436:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8021438:	687b      	ldr	r3, [r7, #4]
 802143a:	685b      	ldr	r3, [r3, #4]
 802143c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 802143e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021440:	781b      	ldrb	r3, [r3, #0]
 8021442:	f003 030f 	and.w	r3, r3, #15
 8021446:	b2db      	uxtb	r3, r3
 8021448:	009b      	lsls	r3, r3, #2
 802144a:	b2db      	uxtb	r3, r3
 802144c:	2b14      	cmp	r3, #20
 802144e:	f040 8171 	bne.w	8021734 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8021452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021454:	88db      	ldrh	r3, [r3, #6]
 8021456:	b29b      	uxth	r3, r3
 8021458:	4618      	mov	r0, r3
 802145a:	f7f3 fc19 	bl	8014c90 <lwip_htons>
 802145e:	4603      	mov	r3, r0
 8021460:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021464:	b29b      	uxth	r3, r3
 8021466:	00db      	lsls	r3, r3, #3
 8021468:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802146a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802146c:	885b      	ldrh	r3, [r3, #2]
 802146e:	b29b      	uxth	r3, r3
 8021470:	4618      	mov	r0, r3
 8021472:	f7f3 fc0d 	bl	8014c90 <lwip_htons>
 8021476:	4603      	mov	r3, r0
 8021478:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 802147a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802147c:	781b      	ldrb	r3, [r3, #0]
 802147e:	f003 030f 	and.w	r3, r3, #15
 8021482:	b2db      	uxtb	r3, r3
 8021484:	009b      	lsls	r3, r3, #2
 8021486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 802148a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802148e:	b29b      	uxth	r3, r3
 8021490:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021492:	429a      	cmp	r2, r3
 8021494:	f0c0 8150 	bcc.w	8021738 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8021498:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802149c:	b29b      	uxth	r3, r3
 802149e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80214a0:	1ad3      	subs	r3, r2, r3
 80214a2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80214a4:	6878      	ldr	r0, [r7, #4]
 80214a6:	f7f5 f87f 	bl	80165a8 <pbuf_clen>
 80214aa:	4603      	mov	r3, r0
 80214ac:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80214ae:	4b8c      	ldr	r3, [pc, #560]	; (80216e0 <ip4_reass+0x2b0>)
 80214b0:	881b      	ldrh	r3, [r3, #0]
 80214b2:	461a      	mov	r2, r3
 80214b4:	8c3b      	ldrh	r3, [r7, #32]
 80214b6:	4413      	add	r3, r2
 80214b8:	2b0a      	cmp	r3, #10
 80214ba:	dd10      	ble.n	80214de <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80214bc:	8c3b      	ldrh	r3, [r7, #32]
 80214be:	4619      	mov	r1, r3
 80214c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80214c2:	f7ff fd81 	bl	8020fc8 <ip_reass_remove_oldest_datagram>
 80214c6:	4603      	mov	r3, r0
 80214c8:	2b00      	cmp	r3, #0
 80214ca:	f000 8137 	beq.w	802173c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80214ce:	4b84      	ldr	r3, [pc, #528]	; (80216e0 <ip4_reass+0x2b0>)
 80214d0:	881b      	ldrh	r3, [r3, #0]
 80214d2:	461a      	mov	r2, r3
 80214d4:	8c3b      	ldrh	r3, [r7, #32]
 80214d6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80214d8:	2b0a      	cmp	r3, #10
 80214da:	f300 812f 	bgt.w	802173c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80214de:	4b81      	ldr	r3, [pc, #516]	; (80216e4 <ip4_reass+0x2b4>)
 80214e0:	681b      	ldr	r3, [r3, #0]
 80214e2:	633b      	str	r3, [r7, #48]	; 0x30
 80214e4:	e015      	b.n	8021512 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80214e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80214e8:	695a      	ldr	r2, [r3, #20]
 80214ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80214ec:	68db      	ldr	r3, [r3, #12]
 80214ee:	429a      	cmp	r2, r3
 80214f0:	d10c      	bne.n	802150c <ip4_reass+0xdc>
 80214f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80214f4:	699a      	ldr	r2, [r3, #24]
 80214f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80214f8:	691b      	ldr	r3, [r3, #16]
 80214fa:	429a      	cmp	r2, r3
 80214fc:	d106      	bne.n	802150c <ip4_reass+0xdc>
 80214fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021500:	899a      	ldrh	r2, [r3, #12]
 8021502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021504:	889b      	ldrh	r3, [r3, #4]
 8021506:	b29b      	uxth	r3, r3
 8021508:	429a      	cmp	r2, r3
 802150a:	d006      	beq.n	802151a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 802150c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802150e:	681b      	ldr	r3, [r3, #0]
 8021510:	633b      	str	r3, [r7, #48]	; 0x30
 8021512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021514:	2b00      	cmp	r3, #0
 8021516:	d1e6      	bne.n	80214e6 <ip4_reass+0xb6>
 8021518:	e000      	b.n	802151c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 802151a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 802151c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802151e:	2b00      	cmp	r3, #0
 8021520:	d109      	bne.n	8021536 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8021522:	8c3b      	ldrh	r3, [r7, #32]
 8021524:	4619      	mov	r1, r3
 8021526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021528:	f7ff fdb0 	bl	802108c <ip_reass_enqueue_new_datagram>
 802152c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 802152e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021530:	2b00      	cmp	r3, #0
 8021532:	d11c      	bne.n	802156e <ip4_reass+0x13e>
      goto nullreturn;
 8021534:	e105      	b.n	8021742 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8021536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021538:	88db      	ldrh	r3, [r3, #6]
 802153a:	b29b      	uxth	r3, r3
 802153c:	4618      	mov	r0, r3
 802153e:	f7f3 fba7 	bl	8014c90 <lwip_htons>
 8021542:	4603      	mov	r3, r0
 8021544:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021548:	2b00      	cmp	r3, #0
 802154a:	d110      	bne.n	802156e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 802154c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802154e:	89db      	ldrh	r3, [r3, #14]
 8021550:	4618      	mov	r0, r3
 8021552:	f7f3 fb9d 	bl	8014c90 <lwip_htons>
 8021556:	4603      	mov	r3, r0
 8021558:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 802155c:	2b00      	cmp	r3, #0
 802155e:	d006      	beq.n	802156e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8021560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021562:	3308      	adds	r3, #8
 8021564:	2214      	movs	r2, #20
 8021566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8021568:	4618      	mov	r0, r3
 802156a:	f003 f81e 	bl	80245aa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 802156e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021570:	88db      	ldrh	r3, [r3, #6]
 8021572:	b29b      	uxth	r3, r3
 8021574:	f003 0320 	and.w	r3, r3, #32
 8021578:	2b00      	cmp	r3, #0
 802157a:	bf0c      	ite	eq
 802157c:	2301      	moveq	r3, #1
 802157e:	2300      	movne	r3, #0
 8021580:	b2db      	uxtb	r3, r3
 8021582:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8021584:	69fb      	ldr	r3, [r7, #28]
 8021586:	2b00      	cmp	r3, #0
 8021588:	d00e      	beq.n	80215a8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 802158a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802158c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802158e:	4413      	add	r3, r2
 8021590:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8021592:	8b7a      	ldrh	r2, [r7, #26]
 8021594:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021596:	429a      	cmp	r2, r3
 8021598:	f0c0 80a0 	bcc.w	80216dc <ip4_reass+0x2ac>
 802159c:	8b7b      	ldrh	r3, [r7, #26]
 802159e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80215a2:	4293      	cmp	r3, r2
 80215a4:	f200 809a 	bhi.w	80216dc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80215a8:	69fa      	ldr	r2, [r7, #28]
 80215aa:	6879      	ldr	r1, [r7, #4]
 80215ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80215ae:	f7ff fdd5 	bl	802115c <ip_reass_chain_frag_into_datagram_and_validate>
 80215b2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80215b4:	697b      	ldr	r3, [r7, #20]
 80215b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80215ba:	f000 809b 	beq.w	80216f4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80215be:	4b48      	ldr	r3, [pc, #288]	; (80216e0 <ip4_reass+0x2b0>)
 80215c0:	881a      	ldrh	r2, [r3, #0]
 80215c2:	8c3b      	ldrh	r3, [r7, #32]
 80215c4:	4413      	add	r3, r2
 80215c6:	b29a      	uxth	r2, r3
 80215c8:	4b45      	ldr	r3, [pc, #276]	; (80216e0 <ip4_reass+0x2b0>)
 80215ca:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80215cc:	69fb      	ldr	r3, [r7, #28]
 80215ce:	2b00      	cmp	r3, #0
 80215d0:	d00d      	beq.n	80215ee <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80215d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80215d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80215d6:	4413      	add	r3, r2
 80215d8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80215da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215dc:	8a7a      	ldrh	r2, [r7, #18]
 80215de:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80215e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215e2:	7f9b      	ldrb	r3, [r3, #30]
 80215e4:	f043 0301 	orr.w	r3, r3, #1
 80215e8:	b2da      	uxtb	r2, r3
 80215ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215ec:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80215ee:	697b      	ldr	r3, [r7, #20]
 80215f0:	2b01      	cmp	r3, #1
 80215f2:	d171      	bne.n	80216d8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80215f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215f6:	8b9b      	ldrh	r3, [r3, #28]
 80215f8:	3314      	adds	r3, #20
 80215fa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80215fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215fe:	685b      	ldr	r3, [r3, #4]
 8021600:	685b      	ldr	r3, [r3, #4]
 8021602:	681b      	ldr	r3, [r3, #0]
 8021604:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8021606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021608:	685b      	ldr	r3, [r3, #4]
 802160a:	685b      	ldr	r3, [r3, #4]
 802160c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 802160e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021610:	3308      	adds	r3, #8
 8021612:	2214      	movs	r2, #20
 8021614:	4619      	mov	r1, r3
 8021616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021618:	f002 ffc7 	bl	80245aa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 802161c:	8a3b      	ldrh	r3, [r7, #16]
 802161e:	4618      	mov	r0, r3
 8021620:	f7f3 fb36 	bl	8014c90 <lwip_htons>
 8021624:	4603      	mov	r3, r0
 8021626:	461a      	mov	r2, r3
 8021628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802162a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 802162c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802162e:	2200      	movs	r2, #0
 8021630:	719a      	strb	r2, [r3, #6]
 8021632:	2200      	movs	r2, #0
 8021634:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8021636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021638:	2200      	movs	r2, #0
 802163a:	729a      	strb	r2, [r3, #10]
 802163c:	2200      	movs	r2, #0
 802163e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8021640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021642:	685b      	ldr	r3, [r3, #4]
 8021644:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8021646:	e00d      	b.n	8021664 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8021648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802164a:	685b      	ldr	r3, [r3, #4]
 802164c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 802164e:	2114      	movs	r1, #20
 8021650:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8021652:	f7f4 fe95 	bl	8016380 <pbuf_remove_header>
      pbuf_cat(p, r);
 8021656:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021658:	6878      	ldr	r0, [r7, #4]
 802165a:	f7f4 ffe5 	bl	8016628 <pbuf_cat>
      r = iprh->next_pbuf;
 802165e:	68fb      	ldr	r3, [r7, #12]
 8021660:	681b      	ldr	r3, [r3, #0]
 8021662:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8021664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021666:	2b00      	cmp	r3, #0
 8021668:	d1ee      	bne.n	8021648 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 802166a:	4b1e      	ldr	r3, [pc, #120]	; (80216e4 <ip4_reass+0x2b4>)
 802166c:	681b      	ldr	r3, [r3, #0]
 802166e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021670:	429a      	cmp	r2, r3
 8021672:	d102      	bne.n	802167a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8021674:	2300      	movs	r3, #0
 8021676:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021678:	e010      	b.n	802169c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802167a:	4b1a      	ldr	r3, [pc, #104]	; (80216e4 <ip4_reass+0x2b4>)
 802167c:	681b      	ldr	r3, [r3, #0]
 802167e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021680:	e007      	b.n	8021692 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8021682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021684:	681b      	ldr	r3, [r3, #0]
 8021686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021688:	429a      	cmp	r2, r3
 802168a:	d006      	beq.n	802169a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802168c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802168e:	681b      	ldr	r3, [r3, #0]
 8021690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021694:	2b00      	cmp	r3, #0
 8021696:	d1f4      	bne.n	8021682 <ip4_reass+0x252>
 8021698:	e000      	b.n	802169c <ip4_reass+0x26c>
          break;
 802169a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 802169c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802169e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80216a0:	f7ff fd2e 	bl	8021100 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80216a4:	6878      	ldr	r0, [r7, #4]
 80216a6:	f7f4 ff7f 	bl	80165a8 <pbuf_clen>
 80216aa:	4603      	mov	r3, r0
 80216ac:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80216ae:	4b0c      	ldr	r3, [pc, #48]	; (80216e0 <ip4_reass+0x2b0>)
 80216b0:	881b      	ldrh	r3, [r3, #0]
 80216b2:	8c3a      	ldrh	r2, [r7, #32]
 80216b4:	429a      	cmp	r2, r3
 80216b6:	d906      	bls.n	80216c6 <ip4_reass+0x296>
 80216b8:	4b0b      	ldr	r3, [pc, #44]	; (80216e8 <ip4_reass+0x2b8>)
 80216ba:	f240 229b 	movw	r2, #667	; 0x29b
 80216be:	490b      	ldr	r1, [pc, #44]	; (80216ec <ip4_reass+0x2bc>)
 80216c0:	480b      	ldr	r0, [pc, #44]	; (80216f0 <ip4_reass+0x2c0>)
 80216c2:	f002 fc89 	bl	8023fd8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80216c6:	4b06      	ldr	r3, [pc, #24]	; (80216e0 <ip4_reass+0x2b0>)
 80216c8:	881a      	ldrh	r2, [r3, #0]
 80216ca:	8c3b      	ldrh	r3, [r7, #32]
 80216cc:	1ad3      	subs	r3, r2, r3
 80216ce:	b29a      	uxth	r2, r3
 80216d0:	4b03      	ldr	r3, [pc, #12]	; (80216e0 <ip4_reass+0x2b0>)
 80216d2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80216d4:	687b      	ldr	r3, [r7, #4]
 80216d6:	e038      	b.n	802174a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80216d8:	2300      	movs	r3, #0
 80216da:	e036      	b.n	802174a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80216dc:	bf00      	nop
 80216de:	e00a      	b.n	80216f6 <ip4_reass+0x2c6>
 80216e0:	200133cc 	.word	0x200133cc
 80216e4:	200133c8 	.word	0x200133c8
 80216e8:	0802aa14 	.word	0x0802aa14
 80216ec:	0802ab84 	.word	0x0802ab84
 80216f0:	0802aa5c 	.word	0x0802aa5c
    goto nullreturn_ipr;
 80216f4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80216f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80216f8:	2b00      	cmp	r3, #0
 80216fa:	d106      	bne.n	802170a <ip4_reass+0x2da>
 80216fc:	4b15      	ldr	r3, [pc, #84]	; (8021754 <ip4_reass+0x324>)
 80216fe:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8021702:	4915      	ldr	r1, [pc, #84]	; (8021758 <ip4_reass+0x328>)
 8021704:	4815      	ldr	r0, [pc, #84]	; (802175c <ip4_reass+0x32c>)
 8021706:	f002 fc67 	bl	8023fd8 <iprintf>
  if (ipr->p == NULL) {
 802170a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802170c:	685b      	ldr	r3, [r3, #4]
 802170e:	2b00      	cmp	r3, #0
 8021710:	d116      	bne.n	8021740 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8021712:	4b13      	ldr	r3, [pc, #76]	; (8021760 <ip4_reass+0x330>)
 8021714:	681b      	ldr	r3, [r3, #0]
 8021716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021718:	429a      	cmp	r2, r3
 802171a:	d006      	beq.n	802172a <ip4_reass+0x2fa>
 802171c:	4b0d      	ldr	r3, [pc, #52]	; (8021754 <ip4_reass+0x324>)
 802171e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8021722:	4910      	ldr	r1, [pc, #64]	; (8021764 <ip4_reass+0x334>)
 8021724:	480d      	ldr	r0, [pc, #52]	; (802175c <ip4_reass+0x32c>)
 8021726:	f002 fc57 	bl	8023fd8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 802172a:	2100      	movs	r1, #0
 802172c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802172e:	f7ff fce7 	bl	8021100 <ip_reass_dequeue_datagram>
 8021732:	e006      	b.n	8021742 <ip4_reass+0x312>
    goto nullreturn;
 8021734:	bf00      	nop
 8021736:	e004      	b.n	8021742 <ip4_reass+0x312>
    goto nullreturn;
 8021738:	bf00      	nop
 802173a:	e002      	b.n	8021742 <ip4_reass+0x312>
      goto nullreturn;
 802173c:	bf00      	nop
 802173e:	e000      	b.n	8021742 <ip4_reass+0x312>
  }

nullreturn:
 8021740:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8021742:	6878      	ldr	r0, [r7, #4]
 8021744:	f7f4 fea2 	bl	801648c <pbuf_free>
  return NULL;
 8021748:	2300      	movs	r3, #0
}
 802174a:	4618      	mov	r0, r3
 802174c:	3738      	adds	r7, #56	; 0x38
 802174e:	46bd      	mov	sp, r7
 8021750:	bd80      	pop	{r7, pc}
 8021752:	bf00      	nop
 8021754:	0802aa14 	.word	0x0802aa14
 8021758:	0802aba0 	.word	0x0802aba0
 802175c:	0802aa5c 	.word	0x0802aa5c
 8021760:	200133c8 	.word	0x200133c8
 8021764:	0802abac 	.word	0x0802abac

08021768 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8021768:	b580      	push	{r7, lr}
 802176a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 802176c:	2005      	movs	r0, #5
 802176e:	f7f3 ff67 	bl	8015640 <memp_malloc>
 8021772:	4603      	mov	r3, r0
}
 8021774:	4618      	mov	r0, r3
 8021776:	bd80      	pop	{r7, pc}

08021778 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8021778:	b580      	push	{r7, lr}
 802177a:	b082      	sub	sp, #8
 802177c:	af00      	add	r7, sp, #0
 802177e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8021780:	687b      	ldr	r3, [r7, #4]
 8021782:	2b00      	cmp	r3, #0
 8021784:	d106      	bne.n	8021794 <ip_frag_free_pbuf_custom_ref+0x1c>
 8021786:	4b07      	ldr	r3, [pc, #28]	; (80217a4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8021788:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 802178c:	4906      	ldr	r1, [pc, #24]	; (80217a8 <ip_frag_free_pbuf_custom_ref+0x30>)
 802178e:	4807      	ldr	r0, [pc, #28]	; (80217ac <ip_frag_free_pbuf_custom_ref+0x34>)
 8021790:	f002 fc22 	bl	8023fd8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8021794:	6879      	ldr	r1, [r7, #4]
 8021796:	2005      	movs	r0, #5
 8021798:	f7f3 ffc8 	bl	801572c <memp_free>
}
 802179c:	bf00      	nop
 802179e:	3708      	adds	r7, #8
 80217a0:	46bd      	mov	sp, r7
 80217a2:	bd80      	pop	{r7, pc}
 80217a4:	0802aa14 	.word	0x0802aa14
 80217a8:	0802abcc 	.word	0x0802abcc
 80217ac:	0802aa5c 	.word	0x0802aa5c

080217b0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80217b0:	b580      	push	{r7, lr}
 80217b2:	b084      	sub	sp, #16
 80217b4:	af00      	add	r7, sp, #0
 80217b6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80217b8:	687b      	ldr	r3, [r7, #4]
 80217ba:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80217bc:	68fb      	ldr	r3, [r7, #12]
 80217be:	2b00      	cmp	r3, #0
 80217c0:	d106      	bne.n	80217d0 <ipfrag_free_pbuf_custom+0x20>
 80217c2:	4b11      	ldr	r3, [pc, #68]	; (8021808 <ipfrag_free_pbuf_custom+0x58>)
 80217c4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80217c8:	4910      	ldr	r1, [pc, #64]	; (802180c <ipfrag_free_pbuf_custom+0x5c>)
 80217ca:	4811      	ldr	r0, [pc, #68]	; (8021810 <ipfrag_free_pbuf_custom+0x60>)
 80217cc:	f002 fc04 	bl	8023fd8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80217d0:	68fa      	ldr	r2, [r7, #12]
 80217d2:	687b      	ldr	r3, [r7, #4]
 80217d4:	429a      	cmp	r2, r3
 80217d6:	d006      	beq.n	80217e6 <ipfrag_free_pbuf_custom+0x36>
 80217d8:	4b0b      	ldr	r3, [pc, #44]	; (8021808 <ipfrag_free_pbuf_custom+0x58>)
 80217da:	f240 22cf 	movw	r2, #719	; 0x2cf
 80217de:	490d      	ldr	r1, [pc, #52]	; (8021814 <ipfrag_free_pbuf_custom+0x64>)
 80217e0:	480b      	ldr	r0, [pc, #44]	; (8021810 <ipfrag_free_pbuf_custom+0x60>)
 80217e2:	f002 fbf9 	bl	8023fd8 <iprintf>
  if (pcr->original != NULL) {
 80217e6:	68fb      	ldr	r3, [r7, #12]
 80217e8:	695b      	ldr	r3, [r3, #20]
 80217ea:	2b00      	cmp	r3, #0
 80217ec:	d004      	beq.n	80217f8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80217ee:	68fb      	ldr	r3, [r7, #12]
 80217f0:	695b      	ldr	r3, [r3, #20]
 80217f2:	4618      	mov	r0, r3
 80217f4:	f7f4 fe4a 	bl	801648c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80217f8:	68f8      	ldr	r0, [r7, #12]
 80217fa:	f7ff ffbd 	bl	8021778 <ip_frag_free_pbuf_custom_ref>
}
 80217fe:	bf00      	nop
 8021800:	3710      	adds	r7, #16
 8021802:	46bd      	mov	sp, r7
 8021804:	bd80      	pop	{r7, pc}
 8021806:	bf00      	nop
 8021808:	0802aa14 	.word	0x0802aa14
 802180c:	0802abd8 	.word	0x0802abd8
 8021810:	0802aa5c 	.word	0x0802aa5c
 8021814:	0802abe4 	.word	0x0802abe4

08021818 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8021818:	b580      	push	{r7, lr}
 802181a:	b094      	sub	sp, #80	; 0x50
 802181c:	af02      	add	r7, sp, #8
 802181e:	60f8      	str	r0, [r7, #12]
 8021820:	60b9      	str	r1, [r7, #8]
 8021822:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8021824:	2300      	movs	r3, #0
 8021826:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 802182a:	68bb      	ldr	r3, [r7, #8]
 802182c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802182e:	3b14      	subs	r3, #20
 8021830:	2b00      	cmp	r3, #0
 8021832:	da00      	bge.n	8021836 <ip4_frag+0x1e>
 8021834:	3307      	adds	r3, #7
 8021836:	10db      	asrs	r3, r3, #3
 8021838:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 802183a:	2314      	movs	r3, #20
 802183c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 802183e:	68fb      	ldr	r3, [r7, #12]
 8021840:	685b      	ldr	r3, [r3, #4]
 8021842:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8021844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021846:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8021848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802184a:	781b      	ldrb	r3, [r3, #0]
 802184c:	f003 030f 	and.w	r3, r3, #15
 8021850:	b2db      	uxtb	r3, r3
 8021852:	009b      	lsls	r3, r3, #2
 8021854:	b2db      	uxtb	r3, r3
 8021856:	2b14      	cmp	r3, #20
 8021858:	d002      	beq.n	8021860 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 802185a:	f06f 0305 	mvn.w	r3, #5
 802185e:	e110      	b.n	8021a82 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8021860:	68fb      	ldr	r3, [r7, #12]
 8021862:	895b      	ldrh	r3, [r3, #10]
 8021864:	2b13      	cmp	r3, #19
 8021866:	d809      	bhi.n	802187c <ip4_frag+0x64>
 8021868:	4b88      	ldr	r3, [pc, #544]	; (8021a8c <ip4_frag+0x274>)
 802186a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 802186e:	4988      	ldr	r1, [pc, #544]	; (8021a90 <ip4_frag+0x278>)
 8021870:	4888      	ldr	r0, [pc, #544]	; (8021a94 <ip4_frag+0x27c>)
 8021872:	f002 fbb1 	bl	8023fd8 <iprintf>
 8021876:	f06f 0305 	mvn.w	r3, #5
 802187a:	e102      	b.n	8021a82 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 802187c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802187e:	88db      	ldrh	r3, [r3, #6]
 8021880:	b29b      	uxth	r3, r3
 8021882:	4618      	mov	r0, r3
 8021884:	f7f3 fa04 	bl	8014c90 <lwip_htons>
 8021888:	4603      	mov	r3, r0
 802188a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 802188c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802188e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021892:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8021896:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8021898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802189c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 802189e:	68fb      	ldr	r3, [r7, #12]
 80218a0:	891b      	ldrh	r3, [r3, #8]
 80218a2:	3b14      	subs	r3, #20
 80218a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80218a8:	e0e1      	b.n	8021a6e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80218aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80218ac:	00db      	lsls	r3, r3, #3
 80218ae:	b29b      	uxth	r3, r3
 80218b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80218b4:	4293      	cmp	r3, r2
 80218b6:	bf28      	it	cs
 80218b8:	4613      	movcs	r3, r2
 80218ba:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80218bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80218c0:	2114      	movs	r1, #20
 80218c2:	200e      	movs	r0, #14
 80218c4:	f7f4 fafe 	bl	8015ec4 <pbuf_alloc>
 80218c8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80218ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218cc:	2b00      	cmp	r3, #0
 80218ce:	f000 80d5 	beq.w	8021a7c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80218d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218d4:	895b      	ldrh	r3, [r3, #10]
 80218d6:	2b13      	cmp	r3, #19
 80218d8:	d806      	bhi.n	80218e8 <ip4_frag+0xd0>
 80218da:	4b6c      	ldr	r3, [pc, #432]	; (8021a8c <ip4_frag+0x274>)
 80218dc:	f44f 7249 	mov.w	r2, #804	; 0x324
 80218e0:	496d      	ldr	r1, [pc, #436]	; (8021a98 <ip4_frag+0x280>)
 80218e2:	486c      	ldr	r0, [pc, #432]	; (8021a94 <ip4_frag+0x27c>)
 80218e4:	f002 fb78 	bl	8023fd8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80218e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218ea:	685b      	ldr	r3, [r3, #4]
 80218ec:	2214      	movs	r2, #20
 80218ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80218f0:	4618      	mov	r0, r3
 80218f2:	f002 fe5a 	bl	80245aa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80218f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218f8:	685b      	ldr	r3, [r3, #4]
 80218fa:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80218fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80218fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8021902:	e064      	b.n	80219ce <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8021904:	68fb      	ldr	r3, [r7, #12]
 8021906:	895a      	ldrh	r2, [r3, #10]
 8021908:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802190a:	1ad3      	subs	r3, r2, r3
 802190c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 802190e:	68fb      	ldr	r3, [r7, #12]
 8021910:	895b      	ldrh	r3, [r3, #10]
 8021912:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8021914:	429a      	cmp	r2, r3
 8021916:	d906      	bls.n	8021926 <ip4_frag+0x10e>
 8021918:	4b5c      	ldr	r3, [pc, #368]	; (8021a8c <ip4_frag+0x274>)
 802191a:	f240 322d 	movw	r2, #813	; 0x32d
 802191e:	495f      	ldr	r1, [pc, #380]	; (8021a9c <ip4_frag+0x284>)
 8021920:	485c      	ldr	r0, [pc, #368]	; (8021a94 <ip4_frag+0x27c>)
 8021922:	f002 fb59 	bl	8023fd8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8021926:	8bfa      	ldrh	r2, [r7, #30]
 8021928:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802192c:	4293      	cmp	r3, r2
 802192e:	bf28      	it	cs
 8021930:	4613      	movcs	r3, r2
 8021932:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8021936:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802193a:	2b00      	cmp	r3, #0
 802193c:	d105      	bne.n	802194a <ip4_frag+0x132>
        poff = 0;
 802193e:	2300      	movs	r3, #0
 8021940:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8021942:	68fb      	ldr	r3, [r7, #12]
 8021944:	681b      	ldr	r3, [r3, #0]
 8021946:	60fb      	str	r3, [r7, #12]
        continue;
 8021948:	e041      	b.n	80219ce <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 802194a:	f7ff ff0d 	bl	8021768 <ip_frag_alloc_pbuf_custom_ref>
 802194e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8021950:	69bb      	ldr	r3, [r7, #24]
 8021952:	2b00      	cmp	r3, #0
 8021954:	d103      	bne.n	802195e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8021956:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021958:	f7f4 fd98 	bl	801648c <pbuf_free>
        goto memerr;
 802195c:	e08f      	b.n	8021a7e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 802195e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8021960:	68fb      	ldr	r3, [r7, #12]
 8021962:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8021964:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8021966:	4413      	add	r3, r2
 8021968:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 802196c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8021970:	9201      	str	r2, [sp, #4]
 8021972:	9300      	str	r3, [sp, #0]
 8021974:	4603      	mov	r3, r0
 8021976:	2241      	movs	r2, #65	; 0x41
 8021978:	2000      	movs	r0, #0
 802197a:	f7f4 fbcd 	bl	8016118 <pbuf_alloced_custom>
 802197e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8021980:	697b      	ldr	r3, [r7, #20]
 8021982:	2b00      	cmp	r3, #0
 8021984:	d106      	bne.n	8021994 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8021986:	69b8      	ldr	r0, [r7, #24]
 8021988:	f7ff fef6 	bl	8021778 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 802198c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802198e:	f7f4 fd7d 	bl	801648c <pbuf_free>
        goto memerr;
 8021992:	e074      	b.n	8021a7e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8021994:	68f8      	ldr	r0, [r7, #12]
 8021996:	f7f4 fe1f 	bl	80165d8 <pbuf_ref>
      pcr->original = p;
 802199a:	69bb      	ldr	r3, [r7, #24]
 802199c:	68fa      	ldr	r2, [r7, #12]
 802199e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80219a0:	69bb      	ldr	r3, [r7, #24]
 80219a2:	4a3f      	ldr	r2, [pc, #252]	; (8021aa0 <ip4_frag+0x288>)
 80219a4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80219a6:	6979      	ldr	r1, [r7, #20]
 80219a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80219aa:	f7f4 fe3d 	bl	8016628 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80219ae:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80219b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80219b6:	1ad3      	subs	r3, r2, r3
 80219b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80219bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80219c0:	2b00      	cmp	r3, #0
 80219c2:	d004      	beq.n	80219ce <ip4_frag+0x1b6>
        poff = 0;
 80219c4:	2300      	movs	r3, #0
 80219c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80219c8:	68fb      	ldr	r3, [r7, #12]
 80219ca:	681b      	ldr	r3, [r3, #0]
 80219cc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80219ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80219d2:	2b00      	cmp	r3, #0
 80219d4:	d196      	bne.n	8021904 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80219d6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80219d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80219dc:	4413      	add	r3, r2
 80219de:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80219e0:	68bb      	ldr	r3, [r7, #8]
 80219e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80219e4:	f1a3 0213 	sub.w	r2, r3, #19
 80219e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80219ec:	429a      	cmp	r2, r3
 80219ee:	bfcc      	ite	gt
 80219f0:	2301      	movgt	r3, #1
 80219f2:	2300      	movle	r3, #0
 80219f4:	b2db      	uxtb	r3, r3
 80219f6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80219f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80219fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021a00:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8021a02:	6a3b      	ldr	r3, [r7, #32]
 8021a04:	2b00      	cmp	r3, #0
 8021a06:	d002      	beq.n	8021a0e <ip4_frag+0x1f6>
 8021a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a0a:	2b00      	cmp	r3, #0
 8021a0c:	d003      	beq.n	8021a16 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8021a0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8021a10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021a14:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8021a16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8021a18:	4618      	mov	r0, r3
 8021a1a:	f7f3 f939 	bl	8014c90 <lwip_htons>
 8021a1e:	4603      	mov	r3, r0
 8021a20:	461a      	mov	r2, r3
 8021a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a24:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8021a26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8021a28:	3314      	adds	r3, #20
 8021a2a:	b29b      	uxth	r3, r3
 8021a2c:	4618      	mov	r0, r3
 8021a2e:	f7f3 f92f 	bl	8014c90 <lwip_htons>
 8021a32:	4603      	mov	r3, r0
 8021a34:	461a      	mov	r2, r3
 8021a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a38:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8021a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a3c:	2200      	movs	r2, #0
 8021a3e:	729a      	strb	r2, [r3, #10]
 8021a40:	2200      	movs	r2, #0
 8021a42:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8021a44:	68bb      	ldr	r3, [r7, #8]
 8021a46:	695b      	ldr	r3, [r3, #20]
 8021a48:	687a      	ldr	r2, [r7, #4]
 8021a4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8021a4c:	68b8      	ldr	r0, [r7, #8]
 8021a4e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8021a50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021a52:	f7f4 fd1b 	bl	801648c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8021a56:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8021a5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8021a5c:	1ad3      	subs	r3, r2, r3
 8021a5e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8021a62:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8021a66:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021a68:	4413      	add	r3, r2
 8021a6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8021a6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021a72:	2b00      	cmp	r3, #0
 8021a74:	f47f af19 	bne.w	80218aa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8021a78:	2300      	movs	r3, #0
 8021a7a:	e002      	b.n	8021a82 <ip4_frag+0x26a>
      goto memerr;
 8021a7c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8021a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8021a82:	4618      	mov	r0, r3
 8021a84:	3748      	adds	r7, #72	; 0x48
 8021a86:	46bd      	mov	sp, r7
 8021a88:	bd80      	pop	{r7, pc}
 8021a8a:	bf00      	nop
 8021a8c:	0802aa14 	.word	0x0802aa14
 8021a90:	0802abf0 	.word	0x0802abf0
 8021a94:	0802aa5c 	.word	0x0802aa5c
 8021a98:	0802ac0c 	.word	0x0802ac0c
 8021a9c:	0802ac2c 	.word	0x0802ac2c
 8021aa0:	080217b1 	.word	0x080217b1

08021aa4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8021aa4:	b580      	push	{r7, lr}
 8021aa6:	b086      	sub	sp, #24
 8021aa8:	af00      	add	r7, sp, #0
 8021aaa:	6078      	str	r0, [r7, #4]
 8021aac:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8021aae:	230e      	movs	r3, #14
 8021ab0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8021ab2:	687b      	ldr	r3, [r7, #4]
 8021ab4:	895b      	ldrh	r3, [r3, #10]
 8021ab6:	2b0e      	cmp	r3, #14
 8021ab8:	d96e      	bls.n	8021b98 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8021aba:	687b      	ldr	r3, [r7, #4]
 8021abc:	7bdb      	ldrb	r3, [r3, #15]
 8021abe:	2b00      	cmp	r3, #0
 8021ac0:	d106      	bne.n	8021ad0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8021ac2:	683b      	ldr	r3, [r7, #0]
 8021ac4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8021ac8:	3301      	adds	r3, #1
 8021aca:	b2da      	uxtb	r2, r3
 8021acc:	687b      	ldr	r3, [r7, #4]
 8021ace:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8021ad0:	687b      	ldr	r3, [r7, #4]
 8021ad2:	685b      	ldr	r3, [r3, #4]
 8021ad4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8021ad6:	693b      	ldr	r3, [r7, #16]
 8021ad8:	7b1a      	ldrb	r2, [r3, #12]
 8021ada:	7b5b      	ldrb	r3, [r3, #13]
 8021adc:	021b      	lsls	r3, r3, #8
 8021ade:	4313      	orrs	r3, r2
 8021ae0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8021ae2:	693b      	ldr	r3, [r7, #16]
 8021ae4:	781b      	ldrb	r3, [r3, #0]
 8021ae6:	f003 0301 	and.w	r3, r3, #1
 8021aea:	2b00      	cmp	r3, #0
 8021aec:	d023      	beq.n	8021b36 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8021aee:	693b      	ldr	r3, [r7, #16]
 8021af0:	781b      	ldrb	r3, [r3, #0]
 8021af2:	2b01      	cmp	r3, #1
 8021af4:	d10f      	bne.n	8021b16 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8021af6:	693b      	ldr	r3, [r7, #16]
 8021af8:	785b      	ldrb	r3, [r3, #1]
 8021afa:	2b00      	cmp	r3, #0
 8021afc:	d11b      	bne.n	8021b36 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8021afe:	693b      	ldr	r3, [r7, #16]
 8021b00:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8021b02:	2b5e      	cmp	r3, #94	; 0x5e
 8021b04:	d117      	bne.n	8021b36 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8021b06:	687b      	ldr	r3, [r7, #4]
 8021b08:	7b5b      	ldrb	r3, [r3, #13]
 8021b0a:	f043 0310 	orr.w	r3, r3, #16
 8021b0e:	b2da      	uxtb	r2, r3
 8021b10:	687b      	ldr	r3, [r7, #4]
 8021b12:	735a      	strb	r2, [r3, #13]
 8021b14:	e00f      	b.n	8021b36 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8021b16:	693b      	ldr	r3, [r7, #16]
 8021b18:	2206      	movs	r2, #6
 8021b1a:	4928      	ldr	r1, [pc, #160]	; (8021bbc <ethernet_input+0x118>)
 8021b1c:	4618      	mov	r0, r3
 8021b1e:	f002 fbf5 	bl	802430c <memcmp>
 8021b22:	4603      	mov	r3, r0
 8021b24:	2b00      	cmp	r3, #0
 8021b26:	d106      	bne.n	8021b36 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8021b28:	687b      	ldr	r3, [r7, #4]
 8021b2a:	7b5b      	ldrb	r3, [r3, #13]
 8021b2c:	f043 0308 	orr.w	r3, r3, #8
 8021b30:	b2da      	uxtb	r2, r3
 8021b32:	687b      	ldr	r3, [r7, #4]
 8021b34:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8021b36:	89fb      	ldrh	r3, [r7, #14]
 8021b38:	2b08      	cmp	r3, #8
 8021b3a:	d003      	beq.n	8021b44 <ethernet_input+0xa0>
 8021b3c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8021b40:	d014      	beq.n	8021b6c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8021b42:	e032      	b.n	8021baa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8021b44:	683b      	ldr	r3, [r7, #0]
 8021b46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021b4a:	f003 0308 	and.w	r3, r3, #8
 8021b4e:	2b00      	cmp	r3, #0
 8021b50:	d024      	beq.n	8021b9c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8021b52:	8afb      	ldrh	r3, [r7, #22]
 8021b54:	4619      	mov	r1, r3
 8021b56:	6878      	ldr	r0, [r7, #4]
 8021b58:	f7f4 fc12 	bl	8016380 <pbuf_remove_header>
 8021b5c:	4603      	mov	r3, r0
 8021b5e:	2b00      	cmp	r3, #0
 8021b60:	d11e      	bne.n	8021ba0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8021b62:	6839      	ldr	r1, [r7, #0]
 8021b64:	6878      	ldr	r0, [r7, #4]
 8021b66:	f7fe fe73 	bl	8020850 <ip4_input>
      break;
 8021b6a:	e013      	b.n	8021b94 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8021b6c:	683b      	ldr	r3, [r7, #0]
 8021b6e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021b72:	f003 0308 	and.w	r3, r3, #8
 8021b76:	2b00      	cmp	r3, #0
 8021b78:	d014      	beq.n	8021ba4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8021b7a:	8afb      	ldrh	r3, [r7, #22]
 8021b7c:	4619      	mov	r1, r3
 8021b7e:	6878      	ldr	r0, [r7, #4]
 8021b80:	f7f4 fbfe 	bl	8016380 <pbuf_remove_header>
 8021b84:	4603      	mov	r3, r0
 8021b86:	2b00      	cmp	r3, #0
 8021b88:	d10e      	bne.n	8021ba8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8021b8a:	6839      	ldr	r1, [r7, #0]
 8021b8c:	6878      	ldr	r0, [r7, #4]
 8021b8e:	f7fe f80f 	bl	801fbb0 <etharp_input>
      break;
 8021b92:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8021b94:	2300      	movs	r3, #0
 8021b96:	e00c      	b.n	8021bb2 <ethernet_input+0x10e>
    goto free_and_return;
 8021b98:	bf00      	nop
 8021b9a:	e006      	b.n	8021baa <ethernet_input+0x106>
        goto free_and_return;
 8021b9c:	bf00      	nop
 8021b9e:	e004      	b.n	8021baa <ethernet_input+0x106>
        goto free_and_return;
 8021ba0:	bf00      	nop
 8021ba2:	e002      	b.n	8021baa <ethernet_input+0x106>
        goto free_and_return;
 8021ba4:	bf00      	nop
 8021ba6:	e000      	b.n	8021baa <ethernet_input+0x106>
        goto free_and_return;
 8021ba8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8021baa:	6878      	ldr	r0, [r7, #4]
 8021bac:	f7f4 fc6e 	bl	801648c <pbuf_free>
  return ERR_OK;
 8021bb0:	2300      	movs	r3, #0
}
 8021bb2:	4618      	mov	r0, r3
 8021bb4:	3718      	adds	r7, #24
 8021bb6:	46bd      	mov	sp, r7
 8021bb8:	bd80      	pop	{r7, pc}
 8021bba:	bf00      	nop
 8021bbc:	0802af78 	.word	0x0802af78

08021bc0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8021bc0:	b580      	push	{r7, lr}
 8021bc2:	b086      	sub	sp, #24
 8021bc4:	af00      	add	r7, sp, #0
 8021bc6:	60f8      	str	r0, [r7, #12]
 8021bc8:	60b9      	str	r1, [r7, #8]
 8021bca:	607a      	str	r2, [r7, #4]
 8021bcc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8021bce:	8c3b      	ldrh	r3, [r7, #32]
 8021bd0:	4618      	mov	r0, r3
 8021bd2:	f7f3 f85d 	bl	8014c90 <lwip_htons>
 8021bd6:	4603      	mov	r3, r0
 8021bd8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8021bda:	210e      	movs	r1, #14
 8021bdc:	68b8      	ldr	r0, [r7, #8]
 8021bde:	f7f4 fbbf 	bl	8016360 <pbuf_add_header>
 8021be2:	4603      	mov	r3, r0
 8021be4:	2b00      	cmp	r3, #0
 8021be6:	d125      	bne.n	8021c34 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8021be8:	68bb      	ldr	r3, [r7, #8]
 8021bea:	685b      	ldr	r3, [r3, #4]
 8021bec:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8021bee:	693b      	ldr	r3, [r7, #16]
 8021bf0:	8afa      	ldrh	r2, [r7, #22]
 8021bf2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8021bf4:	693b      	ldr	r3, [r7, #16]
 8021bf6:	2206      	movs	r2, #6
 8021bf8:	6839      	ldr	r1, [r7, #0]
 8021bfa:	4618      	mov	r0, r3
 8021bfc:	f002 fcd5 	bl	80245aa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8021c00:	693b      	ldr	r3, [r7, #16]
 8021c02:	3306      	adds	r3, #6
 8021c04:	2206      	movs	r2, #6
 8021c06:	6879      	ldr	r1, [r7, #4]
 8021c08:	4618      	mov	r0, r3
 8021c0a:	f002 fcce 	bl	80245aa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8021c0e:	68fb      	ldr	r3, [r7, #12]
 8021c10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8021c14:	2b06      	cmp	r3, #6
 8021c16:	d006      	beq.n	8021c26 <ethernet_output+0x66>
 8021c18:	4b0a      	ldr	r3, [pc, #40]	; (8021c44 <ethernet_output+0x84>)
 8021c1a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8021c1e:	490a      	ldr	r1, [pc, #40]	; (8021c48 <ethernet_output+0x88>)
 8021c20:	480a      	ldr	r0, [pc, #40]	; (8021c4c <ethernet_output+0x8c>)
 8021c22:	f002 f9d9 	bl	8023fd8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8021c26:	68fb      	ldr	r3, [r7, #12]
 8021c28:	699b      	ldr	r3, [r3, #24]
 8021c2a:	68b9      	ldr	r1, [r7, #8]
 8021c2c:	68f8      	ldr	r0, [r7, #12]
 8021c2e:	4798      	blx	r3
 8021c30:	4603      	mov	r3, r0
 8021c32:	e002      	b.n	8021c3a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8021c34:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8021c36:	f06f 0301 	mvn.w	r3, #1
}
 8021c3a:	4618      	mov	r0, r3
 8021c3c:	3718      	adds	r7, #24
 8021c3e:	46bd      	mov	sp, r7
 8021c40:	bd80      	pop	{r7, pc}
 8021c42:	bf00      	nop
 8021c44:	0802ac3c 	.word	0x0802ac3c
 8021c48:	0802ac74 	.word	0x0802ac74
 8021c4c:	0802aca8 	.word	0x0802aca8

08021c50 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8021c50:	b580      	push	{r7, lr}
 8021c52:	b086      	sub	sp, #24
 8021c54:	af00      	add	r7, sp, #0
 8021c56:	6078      	str	r0, [r7, #4]
 8021c58:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8021c5a:	683b      	ldr	r3, [r7, #0]
 8021c5c:	60bb      	str	r3, [r7, #8]
 8021c5e:	2304      	movs	r3, #4
 8021c60:	60fb      	str	r3, [r7, #12]
 8021c62:	2300      	movs	r3, #0
 8021c64:	613b      	str	r3, [r7, #16]
 8021c66:	2300      	movs	r3, #0
 8021c68:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8021c6a:	f107 0308 	add.w	r3, r7, #8
 8021c6e:	2100      	movs	r1, #0
 8021c70:	4618      	mov	r0, r3
 8021c72:	f7e7 f90e 	bl	8008e92 <osMessageCreate>
 8021c76:	4602      	mov	r2, r0
 8021c78:	687b      	ldr	r3, [r7, #4]
 8021c7a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8021c7c:	687b      	ldr	r3, [r7, #4]
 8021c7e:	681b      	ldr	r3, [r3, #0]
 8021c80:	2b00      	cmp	r3, #0
 8021c82:	d102      	bne.n	8021c8a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8021c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021c88:	e000      	b.n	8021c8c <sys_mbox_new+0x3c>

  return ERR_OK;
 8021c8a:	2300      	movs	r3, #0
}
 8021c8c:	4618      	mov	r0, r3
 8021c8e:	3718      	adds	r7, #24
 8021c90:	46bd      	mov	sp, r7
 8021c92:	bd80      	pop	{r7, pc}

08021c94 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8021c94:	b580      	push	{r7, lr}
 8021c96:	b082      	sub	sp, #8
 8021c98:	af00      	add	r7, sp, #0
 8021c9a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8021c9c:	687b      	ldr	r3, [r7, #4]
 8021c9e:	681b      	ldr	r3, [r3, #0]
 8021ca0:	4618      	mov	r0, r3
 8021ca2:	f7e7 f9d3 	bl	800904c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8021ca6:	687b      	ldr	r3, [r7, #4]
 8021ca8:	681b      	ldr	r3, [r3, #0]
 8021caa:	4618      	mov	r0, r3
 8021cac:	f7e7 f9e4 	bl	8009078 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8021cb0:	bf00      	nop
 8021cb2:	3708      	adds	r7, #8
 8021cb4:	46bd      	mov	sp, r7
 8021cb6:	bd80      	pop	{r7, pc}

08021cb8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8021cb8:	b580      	push	{r7, lr}
 8021cba:	b084      	sub	sp, #16
 8021cbc:	af00      	add	r7, sp, #0
 8021cbe:	6078      	str	r0, [r7, #4]
 8021cc0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8021cc2:	687b      	ldr	r3, [r7, #4]
 8021cc4:	681b      	ldr	r3, [r3, #0]
 8021cc6:	6839      	ldr	r1, [r7, #0]
 8021cc8:	2200      	movs	r2, #0
 8021cca:	4618      	mov	r0, r3
 8021ccc:	f7e7 f90a 	bl	8008ee4 <osMessagePut>
 8021cd0:	4603      	mov	r3, r0
 8021cd2:	2b00      	cmp	r3, #0
 8021cd4:	d102      	bne.n	8021cdc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8021cd6:	2300      	movs	r3, #0
 8021cd8:	73fb      	strb	r3, [r7, #15]
 8021cda:	e001      	b.n	8021ce0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8021cdc:	23ff      	movs	r3, #255	; 0xff
 8021cde:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8021ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8021ce4:	4618      	mov	r0, r3
 8021ce6:	3710      	adds	r7, #16
 8021ce8:	46bd      	mov	sp, r7
 8021cea:	bd80      	pop	{r7, pc}

08021cec <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8021cec:	b580      	push	{r7, lr}
 8021cee:	b08c      	sub	sp, #48	; 0x30
 8021cf0:	af00      	add	r7, sp, #0
 8021cf2:	61f8      	str	r0, [r7, #28]
 8021cf4:	61b9      	str	r1, [r7, #24]
 8021cf6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8021cf8:	f7e6 fef6 	bl	8008ae8 <osKernelSysTick>
 8021cfc:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8021cfe:	697b      	ldr	r3, [r7, #20]
 8021d00:	2b00      	cmp	r3, #0
 8021d02:	d017      	beq.n	8021d34 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8021d04:	69fb      	ldr	r3, [r7, #28]
 8021d06:	6819      	ldr	r1, [r3, #0]
 8021d08:	f107 0320 	add.w	r3, r7, #32
 8021d0c:	697a      	ldr	r2, [r7, #20]
 8021d0e:	4618      	mov	r0, r3
 8021d10:	f7e7 f928 	bl	8008f64 <osMessageGet>

    if(event.status == osEventMessage)
 8021d14:	6a3b      	ldr	r3, [r7, #32]
 8021d16:	2b10      	cmp	r3, #16
 8021d18:	d109      	bne.n	8021d2e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8021d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d1c:	461a      	mov	r2, r3
 8021d1e:	69bb      	ldr	r3, [r7, #24]
 8021d20:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8021d22:	f7e6 fee1 	bl	8008ae8 <osKernelSysTick>
 8021d26:	4602      	mov	r2, r0
 8021d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021d2a:	1ad3      	subs	r3, r2, r3
 8021d2c:	e019      	b.n	8021d62 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8021d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021d32:	e016      	b.n	8021d62 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8021d34:	69fb      	ldr	r3, [r7, #28]
 8021d36:	6819      	ldr	r1, [r3, #0]
 8021d38:	463b      	mov	r3, r7
 8021d3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021d3e:	4618      	mov	r0, r3
 8021d40:	f7e7 f910 	bl	8008f64 <osMessageGet>
 8021d44:	f107 0320 	add.w	r3, r7, #32
 8021d48:	463a      	mov	r2, r7
 8021d4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8021d4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8021d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d52:	461a      	mov	r2, r3
 8021d54:	69bb      	ldr	r3, [r7, #24]
 8021d56:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8021d58:	f7e6 fec6 	bl	8008ae8 <osKernelSysTick>
 8021d5c:	4602      	mov	r2, r0
 8021d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021d60:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8021d62:	4618      	mov	r0, r3
 8021d64:	3730      	adds	r7, #48	; 0x30
 8021d66:	46bd      	mov	sp, r7
 8021d68:	bd80      	pop	{r7, pc}

08021d6a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8021d6a:	b580      	push	{r7, lr}
 8021d6c:	b086      	sub	sp, #24
 8021d6e:	af00      	add	r7, sp, #0
 8021d70:	6078      	str	r0, [r7, #4]
 8021d72:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8021d74:	687b      	ldr	r3, [r7, #4]
 8021d76:	6819      	ldr	r1, [r3, #0]
 8021d78:	f107 030c 	add.w	r3, r7, #12
 8021d7c:	2200      	movs	r2, #0
 8021d7e:	4618      	mov	r0, r3
 8021d80:	f7e7 f8f0 	bl	8008f64 <osMessageGet>

  if(event.status == osEventMessage)
 8021d84:	68fb      	ldr	r3, [r7, #12]
 8021d86:	2b10      	cmp	r3, #16
 8021d88:	d105      	bne.n	8021d96 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8021d8a:	693b      	ldr	r3, [r7, #16]
 8021d8c:	461a      	mov	r2, r3
 8021d8e:	683b      	ldr	r3, [r7, #0]
 8021d90:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8021d92:	2300      	movs	r3, #0
 8021d94:	e001      	b.n	8021d9a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8021d96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8021d9a:	4618      	mov	r0, r3
 8021d9c:	3718      	adds	r7, #24
 8021d9e:	46bd      	mov	sp, r7
 8021da0:	bd80      	pop	{r7, pc}

08021da2 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8021da2:	b480      	push	{r7}
 8021da4:	b083      	sub	sp, #12
 8021da6:	af00      	add	r7, sp, #0
 8021da8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8021daa:	687b      	ldr	r3, [r7, #4]
 8021dac:	681b      	ldr	r3, [r3, #0]
 8021dae:	2b00      	cmp	r3, #0
 8021db0:	d101      	bne.n	8021db6 <sys_mbox_valid+0x14>
    return 0;
 8021db2:	2300      	movs	r3, #0
 8021db4:	e000      	b.n	8021db8 <sys_mbox_valid+0x16>
  else
    return 1;
 8021db6:	2301      	movs	r3, #1
}
 8021db8:	4618      	mov	r0, r3
 8021dba:	370c      	adds	r7, #12
 8021dbc:	46bd      	mov	sp, r7
 8021dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dc2:	4770      	bx	lr

08021dc4 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8021dc4:	b480      	push	{r7}
 8021dc6:	b083      	sub	sp, #12
 8021dc8:	af00      	add	r7, sp, #0
 8021dca:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8021dcc:	687b      	ldr	r3, [r7, #4]
 8021dce:	2200      	movs	r2, #0
 8021dd0:	601a      	str	r2, [r3, #0]
}
 8021dd2:	bf00      	nop
 8021dd4:	370c      	adds	r7, #12
 8021dd6:	46bd      	mov	sp, r7
 8021dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ddc:	4770      	bx	lr

08021dde <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8021dde:	b580      	push	{r7, lr}
 8021de0:	b084      	sub	sp, #16
 8021de2:	af00      	add	r7, sp, #0
 8021de4:	6078      	str	r0, [r7, #4]
 8021de6:	460b      	mov	r3, r1
 8021de8:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8021dea:	2300      	movs	r3, #0
 8021dec:	60bb      	str	r3, [r7, #8]
 8021dee:	2300      	movs	r3, #0
 8021df0:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8021df2:	f107 0308 	add.w	r3, r7, #8
 8021df6:	2101      	movs	r1, #1
 8021df8:	4618      	mov	r0, r3
 8021dfa:	f7e6 ff81 	bl	8008d00 <osSemaphoreCreate>
 8021dfe:	4602      	mov	r2, r0
 8021e00:	687b      	ldr	r3, [r7, #4]
 8021e02:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8021e04:	687b      	ldr	r3, [r7, #4]
 8021e06:	681b      	ldr	r3, [r3, #0]
 8021e08:	2b00      	cmp	r3, #0
 8021e0a:	d102      	bne.n	8021e12 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8021e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021e10:	e009      	b.n	8021e26 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8021e12:	78fb      	ldrb	r3, [r7, #3]
 8021e14:	2b00      	cmp	r3, #0
 8021e16:	d105      	bne.n	8021e24 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8021e18:	687b      	ldr	r3, [r7, #4]
 8021e1a:	681b      	ldr	r3, [r3, #0]
 8021e1c:	2100      	movs	r1, #0
 8021e1e:	4618      	mov	r0, r3
 8021e20:	f7e6 ffa0 	bl	8008d64 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8021e24:	2300      	movs	r3, #0
}
 8021e26:	4618      	mov	r0, r3
 8021e28:	3710      	adds	r7, #16
 8021e2a:	46bd      	mov	sp, r7
 8021e2c:	bd80      	pop	{r7, pc}

08021e2e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8021e2e:	b580      	push	{r7, lr}
 8021e30:	b084      	sub	sp, #16
 8021e32:	af00      	add	r7, sp, #0
 8021e34:	6078      	str	r0, [r7, #4]
 8021e36:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8021e38:	f7e6 fe56 	bl	8008ae8 <osKernelSysTick>
 8021e3c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8021e3e:	683b      	ldr	r3, [r7, #0]
 8021e40:	2b00      	cmp	r3, #0
 8021e42:	d011      	beq.n	8021e68 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8021e44:	687b      	ldr	r3, [r7, #4]
 8021e46:	681b      	ldr	r3, [r3, #0]
 8021e48:	6839      	ldr	r1, [r7, #0]
 8021e4a:	4618      	mov	r0, r3
 8021e4c:	f7e6 ff8a 	bl	8008d64 <osSemaphoreWait>
 8021e50:	4603      	mov	r3, r0
 8021e52:	2b00      	cmp	r3, #0
 8021e54:	d105      	bne.n	8021e62 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8021e56:	f7e6 fe47 	bl	8008ae8 <osKernelSysTick>
 8021e5a:	4602      	mov	r2, r0
 8021e5c:	68fb      	ldr	r3, [r7, #12]
 8021e5e:	1ad3      	subs	r3, r2, r3
 8021e60:	e012      	b.n	8021e88 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8021e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021e66:	e00f      	b.n	8021e88 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8021e68:	bf00      	nop
 8021e6a:	687b      	ldr	r3, [r7, #4]
 8021e6c:	681b      	ldr	r3, [r3, #0]
 8021e6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8021e72:	4618      	mov	r0, r3
 8021e74:	f7e6 ff76 	bl	8008d64 <osSemaphoreWait>
 8021e78:	4603      	mov	r3, r0
 8021e7a:	2b00      	cmp	r3, #0
 8021e7c:	d1f5      	bne.n	8021e6a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8021e7e:	f7e6 fe33 	bl	8008ae8 <osKernelSysTick>
 8021e82:	4602      	mov	r2, r0
 8021e84:	68fb      	ldr	r3, [r7, #12]
 8021e86:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8021e88:	4618      	mov	r0, r3
 8021e8a:	3710      	adds	r7, #16
 8021e8c:	46bd      	mov	sp, r7
 8021e8e:	bd80      	pop	{r7, pc}

08021e90 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8021e90:	b580      	push	{r7, lr}
 8021e92:	b082      	sub	sp, #8
 8021e94:	af00      	add	r7, sp, #0
 8021e96:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8021e98:	687b      	ldr	r3, [r7, #4]
 8021e9a:	681b      	ldr	r3, [r3, #0]
 8021e9c:	4618      	mov	r0, r3
 8021e9e:	f7e6 ffaf 	bl	8008e00 <osSemaphoreRelease>
}
 8021ea2:	bf00      	nop
 8021ea4:	3708      	adds	r7, #8
 8021ea6:	46bd      	mov	sp, r7
 8021ea8:	bd80      	pop	{r7, pc}

08021eaa <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8021eaa:	b580      	push	{r7, lr}
 8021eac:	b082      	sub	sp, #8
 8021eae:	af00      	add	r7, sp, #0
 8021eb0:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8021eb2:	687b      	ldr	r3, [r7, #4]
 8021eb4:	681b      	ldr	r3, [r3, #0]
 8021eb6:	4618      	mov	r0, r3
 8021eb8:	f7e6 ffd8 	bl	8008e6c <osSemaphoreDelete>
}
 8021ebc:	bf00      	nop
 8021ebe:	3708      	adds	r7, #8
 8021ec0:	46bd      	mov	sp, r7
 8021ec2:	bd80      	pop	{r7, pc}

08021ec4 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8021ec4:	b480      	push	{r7}
 8021ec6:	b083      	sub	sp, #12
 8021ec8:	af00      	add	r7, sp, #0
 8021eca:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8021ecc:	687b      	ldr	r3, [r7, #4]
 8021ece:	681b      	ldr	r3, [r3, #0]
 8021ed0:	2b00      	cmp	r3, #0
 8021ed2:	d101      	bne.n	8021ed8 <sys_sem_valid+0x14>
    return 0;
 8021ed4:	2300      	movs	r3, #0
 8021ed6:	e000      	b.n	8021eda <sys_sem_valid+0x16>
  else
    return 1;
 8021ed8:	2301      	movs	r3, #1
}
 8021eda:	4618      	mov	r0, r3
 8021edc:	370c      	adds	r7, #12
 8021ede:	46bd      	mov	sp, r7
 8021ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ee4:	4770      	bx	lr

08021ee6 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8021ee6:	b480      	push	{r7}
 8021ee8:	b083      	sub	sp, #12
 8021eea:	af00      	add	r7, sp, #0
 8021eec:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8021eee:	687b      	ldr	r3, [r7, #4]
 8021ef0:	2200      	movs	r2, #0
 8021ef2:	601a      	str	r2, [r3, #0]
}
 8021ef4:	bf00      	nop
 8021ef6:	370c      	adds	r7, #12
 8021ef8:	46bd      	mov	sp, r7
 8021efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021efe:	4770      	bx	lr

08021f00 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8021f00:	b580      	push	{r7, lr}
 8021f02:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8021f04:	4803      	ldr	r0, [pc, #12]	; (8021f14 <sys_init+0x14>)
 8021f06:	f7e6 fe5f 	bl	8008bc8 <osMutexCreate>
 8021f0a:	4603      	mov	r3, r0
 8021f0c:	4a02      	ldr	r2, [pc, #8]	; (8021f18 <sys_init+0x18>)
 8021f0e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8021f10:	bf00      	nop
 8021f12:	bd80      	pop	{r7, pc}
 8021f14:	0802af88 	.word	0x0802af88
 8021f18:	200133d0 	.word	0x200133d0

08021f1c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8021f1c:	b580      	push	{r7, lr}
 8021f1e:	b084      	sub	sp, #16
 8021f20:	af00      	add	r7, sp, #0
 8021f22:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8021f24:	2300      	movs	r3, #0
 8021f26:	60bb      	str	r3, [r7, #8]
 8021f28:	2300      	movs	r3, #0
 8021f2a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8021f2c:	f107 0308 	add.w	r3, r7, #8
 8021f30:	4618      	mov	r0, r3
 8021f32:	f7e6 fe49 	bl	8008bc8 <osMutexCreate>
 8021f36:	4602      	mov	r2, r0
 8021f38:	687b      	ldr	r3, [r7, #4]
 8021f3a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8021f3c:	687b      	ldr	r3, [r7, #4]
 8021f3e:	681b      	ldr	r3, [r3, #0]
 8021f40:	2b00      	cmp	r3, #0
 8021f42:	d102      	bne.n	8021f4a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8021f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021f48:	e000      	b.n	8021f4c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8021f4a:	2300      	movs	r3, #0
}
 8021f4c:	4618      	mov	r0, r3
 8021f4e:	3710      	adds	r7, #16
 8021f50:	46bd      	mov	sp, r7
 8021f52:	bd80      	pop	{r7, pc}

08021f54 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8021f54:	b580      	push	{r7, lr}
 8021f56:	b082      	sub	sp, #8
 8021f58:	af00      	add	r7, sp, #0
 8021f5a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8021f5c:	687b      	ldr	r3, [r7, #4]
 8021f5e:	681b      	ldr	r3, [r3, #0]
 8021f60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8021f64:	4618      	mov	r0, r3
 8021f66:	f7e6 fe47 	bl	8008bf8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8021f6a:	bf00      	nop
 8021f6c:	3708      	adds	r7, #8
 8021f6e:	46bd      	mov	sp, r7
 8021f70:	bd80      	pop	{r7, pc}

08021f72 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8021f72:	b580      	push	{r7, lr}
 8021f74:	b082      	sub	sp, #8
 8021f76:	af00      	add	r7, sp, #0
 8021f78:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8021f7a:	687b      	ldr	r3, [r7, #4]
 8021f7c:	681b      	ldr	r3, [r3, #0]
 8021f7e:	4618      	mov	r0, r3
 8021f80:	f7e6 fe88 	bl	8008c94 <osMutexRelease>
}
 8021f84:	bf00      	nop
 8021f86:	3708      	adds	r7, #8
 8021f88:	46bd      	mov	sp, r7
 8021f8a:	bd80      	pop	{r7, pc}

08021f8c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8021f8c:	b580      	push	{r7, lr}
 8021f8e:	b08c      	sub	sp, #48	; 0x30
 8021f90:	af00      	add	r7, sp, #0
 8021f92:	60f8      	str	r0, [r7, #12]
 8021f94:	60b9      	str	r1, [r7, #8]
 8021f96:	607a      	str	r2, [r7, #4]
 8021f98:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8021f9a:	f107 0314 	add.w	r3, r7, #20
 8021f9e:	2200      	movs	r2, #0
 8021fa0:	601a      	str	r2, [r3, #0]
 8021fa2:	605a      	str	r2, [r3, #4]
 8021fa4:	609a      	str	r2, [r3, #8]
 8021fa6:	60da      	str	r2, [r3, #12]
 8021fa8:	611a      	str	r2, [r3, #16]
 8021faa:	615a      	str	r2, [r3, #20]
 8021fac:	619a      	str	r2, [r3, #24]
 8021fae:	68fb      	ldr	r3, [r7, #12]
 8021fb0:	617b      	str	r3, [r7, #20]
 8021fb2:	68bb      	ldr	r3, [r7, #8]
 8021fb4:	61bb      	str	r3, [r7, #24]
 8021fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021fb8:	b21b      	sxth	r3, r3
 8021fba:	83bb      	strh	r3, [r7, #28]
 8021fbc:	683b      	ldr	r3, [r7, #0]
 8021fbe:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8021fc0:	f107 0314 	add.w	r3, r7, #20
 8021fc4:	6879      	ldr	r1, [r7, #4]
 8021fc6:	4618      	mov	r0, r3
 8021fc8:	f7e6 fd9e 	bl	8008b08 <osThreadCreate>
 8021fcc:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8021fce:	4618      	mov	r0, r3
 8021fd0:	3730      	adds	r7, #48	; 0x30
 8021fd2:	46bd      	mov	sp, r7
 8021fd4:	bd80      	pop	{r7, pc}
	...

08021fd8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8021fd8:	b580      	push	{r7, lr}
 8021fda:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8021fdc:	4b04      	ldr	r3, [pc, #16]	; (8021ff0 <sys_arch_protect+0x18>)
 8021fde:	681b      	ldr	r3, [r3, #0]
 8021fe0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8021fe4:	4618      	mov	r0, r3
 8021fe6:	f7e6 fe07 	bl	8008bf8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8021fea:	2301      	movs	r3, #1
}
 8021fec:	4618      	mov	r0, r3
 8021fee:	bd80      	pop	{r7, pc}
 8021ff0:	200133d0 	.word	0x200133d0

08021ff4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8021ff4:	b580      	push	{r7, lr}
 8021ff6:	b082      	sub	sp, #8
 8021ff8:	af00      	add	r7, sp, #0
 8021ffa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8021ffc:	4b04      	ldr	r3, [pc, #16]	; (8022010 <sys_arch_unprotect+0x1c>)
 8021ffe:	681b      	ldr	r3, [r3, #0]
 8022000:	4618      	mov	r0, r3
 8022002:	f7e6 fe47 	bl	8008c94 <osMutexRelease>
}
 8022006:	bf00      	nop
 8022008:	3708      	adds	r7, #8
 802200a:	46bd      	mov	sp, r7
 802200c:	bd80      	pop	{r7, pc}
 802200e:	bf00      	nop
 8022010:	200133d0 	.word	0x200133d0

08022014 <CalculaCRCByte>:

#include "modbus.h"



uint16_t CalculaCRCByte ( uint16_t crc, uint8_t byte ) {
 8022014:	b480      	push	{r7}
 8022016:	b085      	sub	sp, #20
 8022018:	af00      	add	r7, sp, #0
 802201a:	4603      	mov	r3, r0
 802201c:	460a      	mov	r2, r1
 802201e:	80fb      	strh	r3, [r7, #6]
 8022020:	4613      	mov	r3, r2
 8022022:	717b      	strb	r3, [r7, #5]
  uint8_t i;
  crc = crc^byte;
 8022024:	797b      	ldrb	r3, [r7, #5]
 8022026:	b29a      	uxth	r2, r3
 8022028:	88fb      	ldrh	r3, [r7, #6]
 802202a:	4053      	eors	r3, r2
 802202c:	80fb      	strh	r3, [r7, #6]
  for ( i = 0; i < 8; i++ ) {
 802202e:	2300      	movs	r3, #0
 8022030:	73fb      	strb	r3, [r7, #15]
 8022032:	e011      	b.n	8022058 <CalculaCRCByte+0x44>
    if ( ( crc & 1 ) == 1 ) crc = ( crc >> 1 ) ^cPOLINOMIO;
 8022034:	88fb      	ldrh	r3, [r7, #6]
 8022036:	f003 0301 	and.w	r3, r3, #1
 802203a:	2b00      	cmp	r3, #0
 802203c:	d006      	beq.n	802204c <CalculaCRCByte+0x38>
 802203e:	88fb      	ldrh	r3, [r7, #6]
 8022040:	085b      	lsrs	r3, r3, #1
 8022042:	b29a      	uxth	r2, r3
 8022044:	4b09      	ldr	r3, [pc, #36]	; (802206c <CalculaCRCByte+0x58>)
 8022046:	4053      	eors	r3, r2
 8022048:	80fb      	strh	r3, [r7, #6]
 802204a:	e002      	b.n	8022052 <CalculaCRCByte+0x3e>
    else crc = crc >> 1;
 802204c:	88fb      	ldrh	r3, [r7, #6]
 802204e:	085b      	lsrs	r3, r3, #1
 8022050:	80fb      	strh	r3, [r7, #6]
  for ( i = 0; i < 8; i++ ) {
 8022052:	7bfb      	ldrb	r3, [r7, #15]
 8022054:	3301      	adds	r3, #1
 8022056:	73fb      	strb	r3, [r7, #15]
 8022058:	7bfb      	ldrb	r3, [r7, #15]
 802205a:	2b07      	cmp	r3, #7
 802205c:	d9ea      	bls.n	8022034 <CalculaCRCByte+0x20>
  }
  return crc;
 802205e:	88fb      	ldrh	r3, [r7, #6]
}
 8022060:	4618      	mov	r0, r3
 8022062:	3714      	adds	r7, #20
 8022064:	46bd      	mov	sp, r7
 8022066:	f85d 7b04 	ldr.w	r7, [sp], #4
 802206a:	4770      	bx	lr
 802206c:	ffffa001 	.word	0xffffa001

08022070 <CalculaCRCStream>:


uint16_t CalculaCRCStream ( uint8_t *str, uint16_t tam ) {
 8022070:	b580      	push	{r7, lr}
 8022072:	b084      	sub	sp, #16
 8022074:	af00      	add	r7, sp, #0
 8022076:	6078      	str	r0, [r7, #4]
 8022078:	460b      	mov	r3, r1
 802207a:	807b      	strh	r3, [r7, #2]
  uint16_t i,crc;
  crc = 0xFFFF;
 802207c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022080:	81bb      	strh	r3, [r7, #12]
  for( i = 0; i < tam; i++, str++ ) crc = CalculaCRCByte ( crc, *str );
 8022082:	2300      	movs	r3, #0
 8022084:	81fb      	strh	r3, [r7, #14]
 8022086:	e00e      	b.n	80220a6 <CalculaCRCStream+0x36>
 8022088:	687b      	ldr	r3, [r7, #4]
 802208a:	781a      	ldrb	r2, [r3, #0]
 802208c:	89bb      	ldrh	r3, [r7, #12]
 802208e:	4611      	mov	r1, r2
 8022090:	4618      	mov	r0, r3
 8022092:	f7ff ffbf 	bl	8022014 <CalculaCRCByte>
 8022096:	4603      	mov	r3, r0
 8022098:	81bb      	strh	r3, [r7, #12]
 802209a:	89fb      	ldrh	r3, [r7, #14]
 802209c:	3301      	adds	r3, #1
 802209e:	81fb      	strh	r3, [r7, #14]
 80220a0:	687b      	ldr	r3, [r7, #4]
 80220a2:	3301      	adds	r3, #1
 80220a4:	607b      	str	r3, [r7, #4]
 80220a6:	89fa      	ldrh	r2, [r7, #14]
 80220a8:	887b      	ldrh	r3, [r7, #2]
 80220aa:	429a      	cmp	r2, r3
 80220ac:	d3ec      	bcc.n	8022088 <CalculaCRCStream+0x18>
  return crc;
 80220ae:	89bb      	ldrh	r3, [r7, #12]
}
 80220b0:	4618      	mov	r0, r3
 80220b2:	3710      	adds	r7, #16
 80220b4:	46bd      	mov	sp, r7
 80220b6:	bd80      	pop	{r7, pc}

080220b8 <ReadCoilRegister>:


uint8_t ReadCoilRegister ( uint8_t *buffer, uint8_t *ptr ) {
 80220b8:	b580      	push	{r7, lr}
 80220ba:	b084      	sub	sp, #16
 80220bc:	af00      	add	r7, sp, #0
 80220be:	6078      	str	r0, [r7, #4]
 80220c0:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = 2 * buffer [ 5 ];
 80220c2:	687b      	ldr	r3, [r7, #4]
 80220c4:	3305      	adds	r3, #5
 80220c6:	781b      	ldrb	r3, [r3, #0]
 80220c8:	005b      	lsls	r3, r3, #1
 80220ca:	73bb      	strb	r3, [r7, #14]
	buffer [ 2 ] = bytecount;
 80220cc:	687b      	ldr	r3, [r7, #4]
 80220ce:	3302      	adds	r3, #2
 80220d0:	7bba      	ldrb	r2, [r7, #14]
 80220d2:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 80220d4:	2300      	movs	r3, #0
 80220d6:	73fb      	strb	r3, [r7, #15]
 80220d8:	e015      	b.n	8022106 <ReadCoilRegister+0x4e>
		#ifdef LITTLE_ENDIAN
		buffer [ i + 3 ] = *( ptr + i + 1 );
 80220da:	7bfb      	ldrb	r3, [r7, #15]
 80220dc:	3301      	adds	r3, #1
 80220de:	683a      	ldr	r2, [r7, #0]
 80220e0:	441a      	add	r2, r3
 80220e2:	7bfb      	ldrb	r3, [r7, #15]
 80220e4:	3303      	adds	r3, #3
 80220e6:	6879      	ldr	r1, [r7, #4]
 80220e8:	440b      	add	r3, r1
 80220ea:	7812      	ldrb	r2, [r2, #0]
 80220ec:	701a      	strb	r2, [r3, #0]
		buffer [ i + 3 + 1 ] = *( ptr + i );
 80220ee:	7bfb      	ldrb	r3, [r7, #15]
 80220f0:	683a      	ldr	r2, [r7, #0]
 80220f2:	441a      	add	r2, r3
 80220f4:	7bfb      	ldrb	r3, [r7, #15]
 80220f6:	3304      	adds	r3, #4
 80220f8:	6879      	ldr	r1, [r7, #4]
 80220fa:	440b      	add	r3, r1
 80220fc:	7812      	ldrb	r2, [r2, #0]
 80220fe:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 8022100:	7bfb      	ldrb	r3, [r7, #15]
 8022102:	3302      	adds	r3, #2
 8022104:	73fb      	strb	r3, [r7, #15]
 8022106:	7bfa      	ldrb	r2, [r7, #15]
 8022108:	7bbb      	ldrb	r3, [r7, #14]
 802210a:	429a      	cmp	r2, r3
 802210c:	d3e5      	bcc.n	80220da <ReadCoilRegister+0x22>
		#ifdef BIG_ENDIAN
		buffer [ i + 3 ] = *( ptr + i );
		buffer [ i + 3 + 1 ] = *( ptr + i + 1 );
		#endif
	}
	crc = CalculaCRCStream ( buffer, bytecount + 3 );
 802210e:	7bbb      	ldrb	r3, [r7, #14]
 8022110:	b29b      	uxth	r3, r3
 8022112:	3303      	adds	r3, #3
 8022114:	b29b      	uxth	r3, r3
 8022116:	4619      	mov	r1, r3
 8022118:	6878      	ldr	r0, [r7, #4]
 802211a:	f7ff ffa9 	bl	8022070 <CalculaCRCStream>
 802211e:	4603      	mov	r3, r0
 8022120:	81bb      	strh	r3, [r7, #12]
	buffer [ bytecount + 3 ] = ( uint8_t ) ( crc & 0x00FF );
 8022122:	7bbb      	ldrb	r3, [r7, #14]
 8022124:	3303      	adds	r3, #3
 8022126:	687a      	ldr	r2, [r7, #4]
 8022128:	4413      	add	r3, r2
 802212a:	89ba      	ldrh	r2, [r7, #12]
 802212c:	b2d2      	uxtb	r2, r2
 802212e:	701a      	strb	r2, [r3, #0]
	buffer [ bytecount + 4 ] = ( uint8_t ) ( crc >> 8);
 8022130:	89bb      	ldrh	r3, [r7, #12]
 8022132:	0a1b      	lsrs	r3, r3, #8
 8022134:	b299      	uxth	r1, r3
 8022136:	7bbb      	ldrb	r3, [r7, #14]
 8022138:	3304      	adds	r3, #4
 802213a:	687a      	ldr	r2, [r7, #4]
 802213c:	4413      	add	r3, r2
 802213e:	b2ca      	uxtb	r2, r1
 8022140:	701a      	strb	r2, [r3, #0]
	return ( bytecount + 5 );
 8022142:	7bbb      	ldrb	r3, [r7, #14]
 8022144:	3305      	adds	r3, #5
 8022146:	b2db      	uxtb	r3, r3
}
 8022148:	4618      	mov	r0, r3
 802214a:	3710      	adds	r7, #16
 802214c:	46bd      	mov	sp, r7
 802214e:	bd80      	pop	{r7, pc}

08022150 <ReadInputRegister>:


uint8_t ReadInputRegister ( uint8_t *buffer, uint8_t *ptr ) {
 8022150:	b580      	push	{r7, lr}
 8022152:	b084      	sub	sp, #16
 8022154:	af00      	add	r7, sp, #0
 8022156:	6078      	str	r0, [r7, #4]
 8022158:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = 2 * buffer [ 5 ];
 802215a:	687b      	ldr	r3, [r7, #4]
 802215c:	3305      	adds	r3, #5
 802215e:	781b      	ldrb	r3, [r3, #0]
 8022160:	005b      	lsls	r3, r3, #1
 8022162:	73bb      	strb	r3, [r7, #14]
	buffer [ 2 ] = bytecount;
 8022164:	687b      	ldr	r3, [r7, #4]
 8022166:	3302      	adds	r3, #2
 8022168:	7bba      	ldrb	r2, [r7, #14]
 802216a:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 802216c:	2300      	movs	r3, #0
 802216e:	73fb      	strb	r3, [r7, #15]
 8022170:	e015      	b.n	802219e <ReadInputRegister+0x4e>
		#ifdef LITTLE_ENDIAN
		buffer [ i + 3 ] = *( ptr + i + 1 );
 8022172:	7bfb      	ldrb	r3, [r7, #15]
 8022174:	3301      	adds	r3, #1
 8022176:	683a      	ldr	r2, [r7, #0]
 8022178:	441a      	add	r2, r3
 802217a:	7bfb      	ldrb	r3, [r7, #15]
 802217c:	3303      	adds	r3, #3
 802217e:	6879      	ldr	r1, [r7, #4]
 8022180:	440b      	add	r3, r1
 8022182:	7812      	ldrb	r2, [r2, #0]
 8022184:	701a      	strb	r2, [r3, #0]
		buffer [ i + 3 + 1 ] = *( ptr + i );
 8022186:	7bfb      	ldrb	r3, [r7, #15]
 8022188:	683a      	ldr	r2, [r7, #0]
 802218a:	441a      	add	r2, r3
 802218c:	7bfb      	ldrb	r3, [r7, #15]
 802218e:	3304      	adds	r3, #4
 8022190:	6879      	ldr	r1, [r7, #4]
 8022192:	440b      	add	r3, r1
 8022194:	7812      	ldrb	r2, [r2, #0]
 8022196:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 8022198:	7bfb      	ldrb	r3, [r7, #15]
 802219a:	3302      	adds	r3, #2
 802219c:	73fb      	strb	r3, [r7, #15]
 802219e:	7bfa      	ldrb	r2, [r7, #15]
 80221a0:	7bbb      	ldrb	r3, [r7, #14]
 80221a2:	429a      	cmp	r2, r3
 80221a4:	d3e5      	bcc.n	8022172 <ReadInputRegister+0x22>
		#ifdef BIG_ENDIAN
		buffer [ i + 3 ] = *( ptr + i );
		buffer [ i + 3 + 1 ] = *( ptr + i + 1 );
		#endif
	}
	crc = CalculaCRCStream ( buffer, bytecount + 3 );
 80221a6:	7bbb      	ldrb	r3, [r7, #14]
 80221a8:	b29b      	uxth	r3, r3
 80221aa:	3303      	adds	r3, #3
 80221ac:	b29b      	uxth	r3, r3
 80221ae:	4619      	mov	r1, r3
 80221b0:	6878      	ldr	r0, [r7, #4]
 80221b2:	f7ff ff5d 	bl	8022070 <CalculaCRCStream>
 80221b6:	4603      	mov	r3, r0
 80221b8:	81bb      	strh	r3, [r7, #12]
	buffer[ bytecount + 3 ] = ( uint8_t ) ( crc & 0x00FF );
 80221ba:	7bbb      	ldrb	r3, [r7, #14]
 80221bc:	3303      	adds	r3, #3
 80221be:	687a      	ldr	r2, [r7, #4]
 80221c0:	4413      	add	r3, r2
 80221c2:	89ba      	ldrh	r2, [r7, #12]
 80221c4:	b2d2      	uxtb	r2, r2
 80221c6:	701a      	strb	r2, [r3, #0]
	buffer[ bytecount + 4 ] = ( uint8_t ) ( crc >> 8 );
 80221c8:	89bb      	ldrh	r3, [r7, #12]
 80221ca:	0a1b      	lsrs	r3, r3, #8
 80221cc:	b299      	uxth	r1, r3
 80221ce:	7bbb      	ldrb	r3, [r7, #14]
 80221d0:	3304      	adds	r3, #4
 80221d2:	687a      	ldr	r2, [r7, #4]
 80221d4:	4413      	add	r3, r2
 80221d6:	b2ca      	uxtb	r2, r1
 80221d8:	701a      	strb	r2, [r3, #0]
	return ( bytecount + 5 );
 80221da:	7bbb      	ldrb	r3, [r7, #14]
 80221dc:	3305      	adds	r3, #5
 80221de:	b2db      	uxtb	r3, r3
}
 80221e0:	4618      	mov	r0, r3
 80221e2:	3710      	adds	r7, #16
 80221e4:	46bd      	mov	sp, r7
 80221e6:	bd80      	pop	{r7, pc}

080221e8 <ReadHoldingRegister>:


uint8_t ReadHoldingRegister ( uint8_t *buffer, uint8_t *ptr ) {
 80221e8:	b580      	push	{r7, lr}
 80221ea:	b084      	sub	sp, #16
 80221ec:	af00      	add	r7, sp, #0
 80221ee:	6078      	str	r0, [r7, #4]
 80221f0:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = 2 * buffer [ 5 ];
 80221f2:	687b      	ldr	r3, [r7, #4]
 80221f4:	3305      	adds	r3, #5
 80221f6:	781b      	ldrb	r3, [r3, #0]
 80221f8:	005b      	lsls	r3, r3, #1
 80221fa:	73bb      	strb	r3, [r7, #14]
	buffer [ 2 ] = bytecount;
 80221fc:	687b      	ldr	r3, [r7, #4]
 80221fe:	3302      	adds	r3, #2
 8022200:	7bba      	ldrb	r2, [r7, #14]
 8022202:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < bytecount; i += 2) {
 8022204:	2300      	movs	r3, #0
 8022206:	73fb      	strb	r3, [r7, #15]
 8022208:	e015      	b.n	8022236 <ReadHoldingRegister+0x4e>
		#ifdef LITTLE_ENDIAN
		buffer [ i + 3 ] = *( ptr + i + 1 );
 802220a:	7bfb      	ldrb	r3, [r7, #15]
 802220c:	3301      	adds	r3, #1
 802220e:	683a      	ldr	r2, [r7, #0]
 8022210:	441a      	add	r2, r3
 8022212:	7bfb      	ldrb	r3, [r7, #15]
 8022214:	3303      	adds	r3, #3
 8022216:	6879      	ldr	r1, [r7, #4]
 8022218:	440b      	add	r3, r1
 802221a:	7812      	ldrb	r2, [r2, #0]
 802221c:	701a      	strb	r2, [r3, #0]
		buffer [ i + 3 + 1 ] = *( ptr + i );
 802221e:	7bfb      	ldrb	r3, [r7, #15]
 8022220:	683a      	ldr	r2, [r7, #0]
 8022222:	441a      	add	r2, r3
 8022224:	7bfb      	ldrb	r3, [r7, #15]
 8022226:	3304      	adds	r3, #4
 8022228:	6879      	ldr	r1, [r7, #4]
 802222a:	440b      	add	r3, r1
 802222c:	7812      	ldrb	r2, [r2, #0]
 802222e:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < bytecount; i += 2) {
 8022230:	7bfb      	ldrb	r3, [r7, #15]
 8022232:	3302      	adds	r3, #2
 8022234:	73fb      	strb	r3, [r7, #15]
 8022236:	7bfa      	ldrb	r2, [r7, #15]
 8022238:	7bbb      	ldrb	r3, [r7, #14]
 802223a:	429a      	cmp	r2, r3
 802223c:	d3e5      	bcc.n	802220a <ReadHoldingRegister+0x22>
		#ifdef BIG_ENDIAN
		buffer [ i + 3 ]   = *( ptr + i );
		buffer [ i + 3 + 1 ] = *( ptr + i + 1 );
		#endif
	}
	crc = CalculaCRCStream(buffer, bytecount + 3 );
 802223e:	7bbb      	ldrb	r3, [r7, #14]
 8022240:	b29b      	uxth	r3, r3
 8022242:	3303      	adds	r3, #3
 8022244:	b29b      	uxth	r3, r3
 8022246:	4619      	mov	r1, r3
 8022248:	6878      	ldr	r0, [r7, #4]
 802224a:	f7ff ff11 	bl	8022070 <CalculaCRCStream>
 802224e:	4603      	mov	r3, r0
 8022250:	81bb      	strh	r3, [r7, #12]
	buffer[ bytecount + 3 ] = ( uint8_t ) ( crc & 0x00FF );
 8022252:	7bbb      	ldrb	r3, [r7, #14]
 8022254:	3303      	adds	r3, #3
 8022256:	687a      	ldr	r2, [r7, #4]
 8022258:	4413      	add	r3, r2
 802225a:	89ba      	ldrh	r2, [r7, #12]
 802225c:	b2d2      	uxtb	r2, r2
 802225e:	701a      	strb	r2, [r3, #0]
	buffer[ bytecount + 4 ] = ( uint8_t ) ( crc >> 8 );
 8022260:	89bb      	ldrh	r3, [r7, #12]
 8022262:	0a1b      	lsrs	r3, r3, #8
 8022264:	b299      	uxth	r1, r3
 8022266:	7bbb      	ldrb	r3, [r7, #14]
 8022268:	3304      	adds	r3, #4
 802226a:	687a      	ldr	r2, [r7, #4]
 802226c:	4413      	add	r3, r2
 802226e:	b2ca      	uxtb	r2, r1
 8022270:	701a      	strb	r2, [r3, #0]
	return ( bytecount + 5 );
 8022272:	7bbb      	ldrb	r3, [r7, #14]
 8022274:	3305      	adds	r3, #5
 8022276:	b2db      	uxtb	r3, r3
}
 8022278:	4618      	mov	r0, r3
 802227a:	3710      	adds	r7, #16
 802227c:	46bd      	mov	sp, r7
 802227e:	bd80      	pop	{r7, pc}

08022280 <PresetSingleRegister>:


uint8_t PresetSingleRegister ( uint8_t *buffer, uint8_t *ptr ) {
 8022280:	b480      	push	{r7}
 8022282:	b083      	sub	sp, #12
 8022284:	af00      	add	r7, sp, #0
 8022286:	6078      	str	r0, [r7, #4]
 8022288:	6039      	str	r1, [r7, #0]
	#ifdef LITTLE_ENDIAN
	*( ptr ) = buffer [ 5 ];
 802228a:	687b      	ldr	r3, [r7, #4]
 802228c:	795a      	ldrb	r2, [r3, #5]
 802228e:	683b      	ldr	r3, [r7, #0]
 8022290:	701a      	strb	r2, [r3, #0]
	*( ptr + 1 ) = buffer [ 4 ];
 8022292:	683b      	ldr	r3, [r7, #0]
 8022294:	3301      	adds	r3, #1
 8022296:	687a      	ldr	r2, [r7, #4]
 8022298:	7912      	ldrb	r2, [r2, #4]
 802229a:	701a      	strb	r2, [r3, #0]
	#endif
	#ifdef BIG_ENDIAN
	*( ptr ) = buffer [ 4 ];
	*( ptr + 1 ) = buffer [ 5 ];
	#endif
	return ( 8 );
 802229c:	2308      	movs	r3, #8
}
 802229e:	4618      	mov	r0, r3
 80222a0:	370c      	adds	r7, #12
 80222a2:	46bd      	mov	sp, r7
 80222a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222a8:	4770      	bx	lr

080222aa <PresetMultipleRegisters>:

uint8_t PresetMultipleRegisters ( uint8_t *buffer, uint8_t *ptr ) {
 80222aa:	b580      	push	{r7, lr}
 80222ac:	b084      	sub	sp, #16
 80222ae:	af00      	add	r7, sp, #0
 80222b0:	6078      	str	r0, [r7, #4]
 80222b2:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = buffer [ 6 ];
 80222b4:	687b      	ldr	r3, [r7, #4]
 80222b6:	799b      	ldrb	r3, [r3, #6]
 80222b8:	73bb      	strb	r3, [r7, #14]
	for ( i = 0; i < bytecount; i += 2 ) {
 80222ba:	2300      	movs	r3, #0
 80222bc:	73fb      	strb	r3, [r7, #15]
 80222be:	e016      	b.n	80222ee <PresetMultipleRegisters+0x44>
		#ifdef LITTLE_ENDIAN
		*( ptr + i ) = buffer [ 7 + i + 1 ];
 80222c0:	7bfb      	ldrb	r3, [r7, #15]
 80222c2:	3308      	adds	r3, #8
 80222c4:	687a      	ldr	r2, [r7, #4]
 80222c6:	441a      	add	r2, r3
 80222c8:	7bfb      	ldrb	r3, [r7, #15]
 80222ca:	6839      	ldr	r1, [r7, #0]
 80222cc:	440b      	add	r3, r1
 80222ce:	7812      	ldrb	r2, [r2, #0]
 80222d0:	701a      	strb	r2, [r3, #0]
		*( ptr + i + 1 ) = buffer [ 7 + i ];
 80222d2:	7bfb      	ldrb	r3, [r7, #15]
 80222d4:	3307      	adds	r3, #7
 80222d6:	461a      	mov	r2, r3
 80222d8:	687b      	ldr	r3, [r7, #4]
 80222da:	441a      	add	r2, r3
 80222dc:	7bfb      	ldrb	r3, [r7, #15]
 80222de:	3301      	adds	r3, #1
 80222e0:	6839      	ldr	r1, [r7, #0]
 80222e2:	440b      	add	r3, r1
 80222e4:	7812      	ldrb	r2, [r2, #0]
 80222e6:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 80222e8:	7bfb      	ldrb	r3, [r7, #15]
 80222ea:	3302      	adds	r3, #2
 80222ec:	73fb      	strb	r3, [r7, #15]
 80222ee:	7bfa      	ldrb	r2, [r7, #15]
 80222f0:	7bbb      	ldrb	r3, [r7, #14]
 80222f2:	429a      	cmp	r2, r3
 80222f4:	d3e4      	bcc.n	80222c0 <PresetMultipleRegisters+0x16>
		#ifdef BIG_ENDIAN
		*( ptr + i ) = buffer [ 7 + i ];
		*( ptr + i + 1 ) = buffer [ 7 + i + 1 ];
		#endif
	}
	crc = CalculaCRCStream ( buffer, 6 );
 80222f6:	2106      	movs	r1, #6
 80222f8:	6878      	ldr	r0, [r7, #4]
 80222fa:	f7ff feb9 	bl	8022070 <CalculaCRCStream>
 80222fe:	4603      	mov	r3, r0
 8022300:	81bb      	strh	r3, [r7, #12]
	buffer [ 6 ] = ( uint8_t ) ( crc & 0x00FF );
 8022302:	687b      	ldr	r3, [r7, #4]
 8022304:	3306      	adds	r3, #6
 8022306:	89ba      	ldrh	r2, [r7, #12]
 8022308:	b2d2      	uxtb	r2, r2
 802230a:	701a      	strb	r2, [r3, #0]
	buffer [ 7 ] = ( uint8_t ) ( crc >> 8 );
 802230c:	89bb      	ldrh	r3, [r7, #12]
 802230e:	0a1b      	lsrs	r3, r3, #8
 8022310:	b29a      	uxth	r2, r3
 8022312:	687b      	ldr	r3, [r7, #4]
 8022314:	3307      	adds	r3, #7
 8022316:	b2d2      	uxtb	r2, r2
 8022318:	701a      	strb	r2, [r3, #0]
	return ( 8 );
 802231a:	2308      	movs	r3, #8
}
 802231c:	4618      	mov	r0, r3
 802231e:	3710      	adds	r7, #16
 8022320:	46bd      	mov	sp, r7
 8022322:	bd80      	pop	{r7, pc}

08022324 <InterpreterMODBUS>:


TModbusMap *ModbusMap;

uint16_t InterpreterMODBUS(uint8_t *msg, uint16_t len)
{
 8022324:	b580      	push	{r7, lr}
 8022326:	b086      	sub	sp, #24
 8022328:	af00      	add	r7, sp, #0
 802232a:	6078      	str	r0, [r7, #4]
 802232c:	460b      	mov	r3, r1
 802232e:	807b      	strh	r3, [r7, #2]
	uint8_t *ptr;
	uint16_t crccal, crcrec, address, totalbytes;

	crccal = 0;
 8022330:	2300      	movs	r3, #0
 8022332:	82bb      	strh	r3, [r7, #20]
	crcrec = 0;
 8022334:	2300      	movs	r3, #0
 8022336:	827b      	strh	r3, [r7, #18]
	address = (msg[2] << 8) | msg[3];
 8022338:	687b      	ldr	r3, [r7, #4]
 802233a:	3302      	adds	r3, #2
 802233c:	781b      	ldrb	r3, [r3, #0]
 802233e:	021b      	lsls	r3, r3, #8
 8022340:	b21a      	sxth	r2, r3
 8022342:	687b      	ldr	r3, [r7, #4]
 8022344:	3303      	adds	r3, #3
 8022346:	781b      	ldrb	r3, [r3, #0]
 8022348:	b21b      	sxth	r3, r3
 802234a:	4313      	orrs	r3, r2
 802234c:	b21b      	sxth	r3, r3
 802234e:	823b      	strh	r3, [r7, #16]
	//bytecount = msg[6];
	crccal = CalculaCRCStream(msg, len - 2);
 8022350:	887b      	ldrh	r3, [r7, #2]
 8022352:	3b02      	subs	r3, #2
 8022354:	b29b      	uxth	r3, r3
 8022356:	4619      	mov	r1, r3
 8022358:	6878      	ldr	r0, [r7, #4]
 802235a:	f7ff fe89 	bl	8022070 <CalculaCRCStream>
 802235e:	4603      	mov	r3, r0
 8022360:	82bb      	strh	r3, [r7, #20]
	crcrec = (msg[len - 1] << 8) | msg[len - 2];
 8022362:	887b      	ldrh	r3, [r7, #2]
 8022364:	3b01      	subs	r3, #1
 8022366:	687a      	ldr	r2, [r7, #4]
 8022368:	4413      	add	r3, r2
 802236a:	781b      	ldrb	r3, [r3, #0]
 802236c:	021b      	lsls	r3, r3, #8
 802236e:	b21a      	sxth	r2, r3
 8022370:	887b      	ldrh	r3, [r7, #2]
 8022372:	3b02      	subs	r3, #2
 8022374:	6879      	ldr	r1, [r7, #4]
 8022376:	440b      	add	r3, r1
 8022378:	781b      	ldrb	r3, [r3, #0]
 802237a:	b21b      	sxth	r3, r3
 802237c:	4313      	orrs	r3, r2
 802237e:	b21b      	sxth	r3, r3
 8022380:	827b      	strh	r3, [r7, #18]

	if (crccal == crcrec)
 8022382:	8aba      	ldrh	r2, [r7, #20]
 8022384:	8a7b      	ldrh	r3, [r7, #18]
 8022386:	429a      	cmp	r2, r3
 8022388:	f040 80be 	bne.w	8022508 <InterpreterMODBUS+0x1e4>
	{
		switch (msg[0])
 802238c:	687b      	ldr	r3, [r7, #4]
 802238e:	781b      	ldrb	r3, [r3, #0]
 8022390:	2b01      	cmp	r3, #1
 8022392:	f040 80bd 	bne.w	8022510 <InterpreterMODBUS+0x1ec>
		{
		case 0x01: // Escravo 1
			switch (msg[1])
 8022396:	687b      	ldr	r3, [r7, #4]
 8022398:	3301      	adds	r3, #1
 802239a:	781b      	ldrb	r3, [r3, #0]
 802239c:	3b01      	subs	r3, #1
 802239e:	2b0f      	cmp	r3, #15
 80223a0:	f200 80b5 	bhi.w	802250e <InterpreterMODBUS+0x1ea>
 80223a4:	a201      	add	r2, pc, #4	; (adr r2, 80223ac <InterpreterMODBUS+0x88>)
 80223a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80223aa:	bf00      	nop
 80223ac:	080223ed 	.word	0x080223ed
 80223b0:	08022505 	.word	0x08022505
 80223b4:	08022405 	.word	0x08022405
 80223b8:	0802241d 	.word	0x0802241d
 80223bc:	08022505 	.word	0x08022505
 80223c0:	08022435 	.word	0x08022435
 80223c4:	0802250f 	.word	0x0802250f
 80223c8:	0802250f 	.word	0x0802250f
 80223cc:	0802250f 	.word	0x0802250f
 80223d0:	0802250f 	.word	0x0802250f
 80223d4:	0802250f 	.word	0x0802250f
 80223d8:	0802250f 	.word	0x0802250f
 80223dc:	0802250f 	.word	0x0802250f
 80223e0:	0802250f 	.word	0x0802250f
 80223e4:	08022505 	.word	0x08022505
 80223e8:	0802249d 	.word	0x0802249d
			{
			case 0x01: // Read coil registers

				ptr = GetAddrCoilRegister(address); // Pega o endereco real na memeria do CR
 80223ec:	8a3b      	ldrh	r3, [r7, #16]
 80223ee:	4618      	mov	r0, r3
 80223f0:	f000 f896 	bl	8022520 <GetAddrCoilRegister>
 80223f4:	60f8      	str	r0, [r7, #12]
				totalbytes = ReadCoilRegister(msg, ptr); // Le o valor do IR e monta parte da mensagem
 80223f6:	68f9      	ldr	r1, [r7, #12]
 80223f8:	6878      	ldr	r0, [r7, #4]
 80223fa:	f7ff fe5d 	bl	80220b8 <ReadCoilRegister>
 80223fe:	4603      	mov	r3, r0
 8022400:	82fb      	strh	r3, [r7, #22]

				break;
 8022402:	e080      	b.n	8022506 <InterpreterMODBUS+0x1e2>
			case 0x02: // Read input status
				break;
			case 0x03: // Read holding registers
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 8022404:	8a3b      	ldrh	r3, [r7, #16]
 8022406:	4618      	mov	r0, r3
 8022408:	f000 f8d6 	bl	80225b8 <GetAddrHoldingRegister>
 802240c:	60f8      	str	r0, [r7, #12]
				totalbytes = ReadHoldingRegister(msg, ptr);	// Le o valor do IR e monta parte da mensagem
 802240e:	68f9      	ldr	r1, [r7, #12]
 8022410:	6878      	ldr	r0, [r7, #4]
 8022412:	f7ff fee9 	bl	80221e8 <ReadHoldingRegister>
 8022416:	4603      	mov	r3, r0
 8022418:	82fb      	strh	r3, [r7, #22]
				break;
 802241a:	e074      	b.n	8022506 <InterpreterMODBUS+0x1e2>
			case 0x04: // Read input registers
				ptr = GetAddrInputRegister(address); // Pega o endereco real na memoria do IR
 802241c:	8a3b      	ldrh	r3, [r7, #16]
 802241e:	4618      	mov	r0, r3
 8022420:	f000 f8a4 	bl	802256c <GetAddrInputRegister>
 8022424:	60f8      	str	r0, [r7, #12]
				totalbytes = ReadInputRegister(msg, ptr); // Le o valor do IR e monta parte da mensagem
 8022426:	68f9      	ldr	r1, [r7, #12]
 8022428:	6878      	ldr	r0, [r7, #4]
 802242a:	f7ff fe91 	bl	8022150 <ReadInputRegister>
 802242e:	4603      	mov	r3, r0
 8022430:	82fb      	strh	r3, [r7, #22]
				break;
 8022432:	e068      	b.n	8022506 <InterpreterMODBUS+0x1e2>
			case 0x05: // Force single coil
				break;
			case 0x06: // Preset single register
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 8022434:	8a3b      	ldrh	r3, [r7, #16]
 8022436:	4618      	mov	r0, r3
 8022438:	f000 f8be 	bl	80225b8 <GetAddrHoldingRegister>
 802243c:	60f8      	str	r0, [r7, #12]
				totalbytes = PresetSingleRegister(msg, ptr); // Grava o valor do HR e monta parte da mensagem
 802243e:	68f9      	ldr	r1, [r7, #12]
 8022440:	6878      	ldr	r0, [r7, #4]
 8022442:	f7ff ff1d 	bl	8022280 <PresetSingleRegister>
 8022446:	4603      	mov	r3, r0
 8022448:	82fb      	strh	r3, [r7, #22]


				//eeprom_write_char ( address, *( ptr ) );
				//eeprom_write_char ( address + 1, *( ptr + 1 ) );

				if (totalbytes)
 802244a:	8afb      	ldrh	r3, [r7, #22]
 802244c:	2b00      	cmp	r3, #0
 802244e:	d01f      	beq.n	8022490 <InterpreterMODBUS+0x16c>
				{ //Implementado para possibilitar a gravacao do Tipo de Hardware (Input Register) via CfgHorus

					if ((ModbusMap->HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW] != 0) && (ModbusMap->INPUTREGISTERS[ADD_TIPO_HARDW] != ModbusMap->HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW]))
 8022450:	4b32      	ldr	r3, [pc, #200]	; (802251c <InterpreterMODBUS+0x1f8>)
 8022452:	681b      	ldr	r3, [r3, #0]
 8022454:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8022458:	2b00      	cmp	r3, #0
 802245a:	d015      	beq.n	8022488 <InterpreterMODBUS+0x164>
 802245c:	4b2f      	ldr	r3, [pc, #188]	; (802251c <InterpreterMODBUS+0x1f8>)
 802245e:	681b      	ldr	r3, [r3, #0]
 8022460:	f8b3 23d4 	ldrh.w	r2, [r3, #980]	; 0x3d4
 8022464:	4b2d      	ldr	r3, [pc, #180]	; (802251c <InterpreterMODBUS+0x1f8>)
 8022466:	681b      	ldr	r3, [r3, #0]
 8022468:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 802246c:	429a      	cmp	r2, r3
 802246e:	d00b      	beq.n	8022488 <InterpreterMODBUS+0x164>
					{
						//if((modbusMapa.COPIA_TIPO_HARDW != 0) && (modbusMapa.TIPO_HARDW != modbusMapa.COPIA_TIPO_HARDW)){

						ModbusMap->INPUTREGISTERS[ADD_TIPO_HARDW] = ModbusMap->HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW];
 8022470:	4b2a      	ldr	r3, [pc, #168]	; (802251c <InterpreterMODBUS+0x1f8>)
 8022472:	681a      	ldr	r2, [r3, #0]
 8022474:	4b29      	ldr	r3, [pc, #164]	; (802251c <InterpreterMODBUS+0x1f8>)
 8022476:	681b      	ldr	r3, [r3, #0]
 8022478:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 802247c:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4

						//modbusMapa.TIPO_HARDW = modbusMapa.COPIA_TIPO_HARDW;

						ptr = (uint8_t*) GetAddrInputRegister(ADD_TIPO_HARDW);
 8022480:	206f      	movs	r0, #111	; 0x6f
 8022482:	f000 f873 	bl	802256c <GetAddrInputRegister>
 8022486:	60f8      	str	r0, [r7, #12]

						//while(eeprom_write_int(END_TIPO_HARDW_EEPROM, MB.TIPO_HARDW));
					}

					CfgFiles_UpdateCfgFileByIndex(MAP_FILE_IDX, false);
 8022488:	2100      	movs	r1, #0
 802248a:	2000      	movs	r0, #0
 802248c:	f7df fe80 	bl	8002190 <CfgFiles_UpdateCfgFileByIndex>
				}
#ifdef WATCHDOG
        fWatchDogReset();
#endif
				//Carrega conte�do gravado para RAM para comparacao no CfgHorus
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 8022490:	8a3b      	ldrh	r3, [r7, #16]
 8022492:	4618      	mov	r0, r3
 8022494:	f000 f890 	bl	80225b8 <GetAddrHoldingRegister>
 8022498:	60f8      	str	r0, [r7, #12]

				//eeprom_read_stream(ptr, bytecount, (address * 2));
				break;
 802249a:	e034      	b.n	8022506 <InterpreterMODBUS+0x1e2>
			case 0x0F: // Preset multiple coils
				break;
			case 0x10: // Preset multiple resgisters
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memeria do HR
 802249c:	8a3b      	ldrh	r3, [r7, #16]
 802249e:	4618      	mov	r0, r3
 80224a0:	f000 f88a 	bl	80225b8 <GetAddrHoldingRegister>
 80224a4:	60f8      	str	r0, [r7, #12]

				totalbytes = PresetMultipleRegisters(msg, ptr); // Grava o valor do HR e monta parte da mensagem
 80224a6:	68f9      	ldr	r1, [r7, #12]
 80224a8:	6878      	ldr	r0, [r7, #4]
 80224aa:	f7ff fefe 	bl	80222aa <PresetMultipleRegisters>
 80224ae:	4603      	mov	r3, r0
 80224b0:	82fb      	strh	r3, [r7, #22]

				//eeprom_write_stream((address * 2), bytecount, ptr);

				if (totalbytes)
 80224b2:	8afb      	ldrh	r3, [r7, #22]
 80224b4:	2b00      	cmp	r3, #0
 80224b6:	d01f      	beq.n	80224f8 <InterpreterMODBUS+0x1d4>
				{ //Implementado para possibilitar a gravacao do Tipo de Hardware (Input Register) via CfgHorus

					if ((ModbusMap->HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW] != 0) && (ModbusMap->INPUTREGISTERS[ADD_TIPO_HARDW] != ModbusMap->HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW]))
 80224b8:	4b18      	ldr	r3, [pc, #96]	; (802251c <InterpreterMODBUS+0x1f8>)
 80224ba:	681b      	ldr	r3, [r3, #0]
 80224bc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80224c0:	2b00      	cmp	r3, #0
 80224c2:	d015      	beq.n	80224f0 <InterpreterMODBUS+0x1cc>
 80224c4:	4b15      	ldr	r3, [pc, #84]	; (802251c <InterpreterMODBUS+0x1f8>)
 80224c6:	681b      	ldr	r3, [r3, #0]
 80224c8:	f8b3 23d4 	ldrh.w	r2, [r3, #980]	; 0x3d4
 80224cc:	4b13      	ldr	r3, [pc, #76]	; (802251c <InterpreterMODBUS+0x1f8>)
 80224ce:	681b      	ldr	r3, [r3, #0]
 80224d0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80224d4:	429a      	cmp	r2, r3
 80224d6:	d00b      	beq.n	80224f0 <InterpreterMODBUS+0x1cc>
					{
						ModbusMap->INPUTREGISTERS[ADD_TIPO_HARDW] = ModbusMap->HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW];
 80224d8:	4b10      	ldr	r3, [pc, #64]	; (802251c <InterpreterMODBUS+0x1f8>)
 80224da:	681a      	ldr	r2, [r3, #0]
 80224dc:	4b0f      	ldr	r3, [pc, #60]	; (802251c <InterpreterMODBUS+0x1f8>)
 80224de:	681b      	ldr	r3, [r3, #0]
 80224e0:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 80224e4:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4

						ptr = (uint8_t*) GetAddrInputRegister(ADD_TIPO_HARDW);
 80224e8:	206f      	movs	r0, #111	; 0x6f
 80224ea:	f000 f83f 	bl	802256c <GetAddrInputRegister>
 80224ee:	60f8      	str	r0, [r7, #12]
					}

				    CfgFiles_UpdateCfgFileByIndex(MAP_FILE_IDX, false);
 80224f0:	2100      	movs	r1, #0
 80224f2:	2000      	movs	r0, #0
 80224f4:	f7df fe4c 	bl	8002190 <CfgFiles_UpdateCfgFileByIndex>
				}
#ifdef WATCHDOG
        fWatchDogReset();
#endif
				//Carrega conte�do gravado para RAM para comparacao no CfgHorus
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 80224f8:	8a3b      	ldrh	r3, [r7, #16]
 80224fa:	4618      	mov	r0, r3
 80224fc:	f000 f85c 	bl	80225b8 <GetAddrHoldingRegister>
 8022500:	60f8      	str	r0, [r7, #12]
				// eeprom_read_stream(ptr, bytecount, (address * 2));
				break;
 8022502:	e000      	b.n	8022506 <InterpreterMODBUS+0x1e2>
				break;
 8022504:	bf00      	nop
			}
			break;
 8022506:	e002      	b.n	802250e <InterpreterMODBUS+0x1ea>
		}
	}
	else
	{

		totalbytes = 0;
 8022508:	2300      	movs	r3, #0
 802250a:	82fb      	strh	r3, [r7, #22]
 802250c:	e000      	b.n	8022510 <InterpreterMODBUS+0x1ec>
			break;
 802250e:	bf00      	nop
	}

	return totalbytes;
 8022510:	8afb      	ldrh	r3, [r7, #22]
}
 8022512:	4618      	mov	r0, r3
 8022514:	3718      	adds	r7, #24
 8022516:	46bd      	mov	sp, r7
 8022518:	bd80      	pop	{r7, pc}
 802251a:	bf00      	nop
 802251c:	200133d4 	.word	0x200133d4

08022520 <GetAddrCoilRegister>:

uint8_t* GetAddrCoilRegister(uint16_t address)
{
 8022520:	b480      	push	{r7}
 8022522:	b085      	sub	sp, #20
 8022524:	af00      	add	r7, sp, #0
 8022526:	4603      	mov	r3, r0
 8022528:	80fb      	strh	r3, [r7, #6]

	uint8_t *ptr;

	switch (address)
 802252a:	88fb      	ldrh	r3, [r7, #6]
 802252c:	2b02      	cmp	r3, #2
 802252e:	d00f      	beq.n	8022550 <GetAddrCoilRegister+0x30>
 8022530:	2b02      	cmp	r3, #2
 8022532:	dc12      	bgt.n	802255a <GetAddrCoilRegister+0x3a>
 8022534:	2b00      	cmp	r3, #0
 8022536:	d002      	beq.n	802253e <GetAddrCoilRegister+0x1e>
 8022538:	2b01      	cmp	r3, #1
 802253a:	d004      	beq.n	8022546 <GetAddrCoilRegister+0x26>
 802253c:	e00d      	b.n	802255a <GetAddrCoilRegister+0x3a>
	{

	case ADD_IN_1:
		ptr = (uint8_t*) &ModbusMap->COILS[ADD_IN_1];
 802253e:	4b0a      	ldr	r3, [pc, #40]	; (8022568 <GetAddrCoilRegister+0x48>)
 8022540:	681b      	ldr	r3, [r3, #0]
 8022542:	60fb      	str	r3, [r7, #12]
		break;
 8022544:	e009      	b.n	802255a <GetAddrCoilRegister+0x3a>
	case ADD_IN_2:
		ptr = (uint8_t*) &ModbusMap->COILS[ADD_IN_2];
 8022546:	4b08      	ldr	r3, [pc, #32]	; (8022568 <GetAddrCoilRegister+0x48>)
 8022548:	681b      	ldr	r3, [r3, #0]
 802254a:	3302      	adds	r3, #2
 802254c:	60fb      	str	r3, [r7, #12]
		break;
 802254e:	e004      	b.n	802255a <GetAddrCoilRegister+0x3a>
	case ADD_OUT_1:
		ptr = (uint8_t*) &ModbusMap->COILS[ADD_OUT_1];
 8022550:	4b05      	ldr	r3, [pc, #20]	; (8022568 <GetAddrCoilRegister+0x48>)
 8022552:	681b      	ldr	r3, [r3, #0]
 8022554:	3304      	adds	r3, #4
 8022556:	60fb      	str	r3, [r7, #12]
		break;
 8022558:	bf00      	nop
	}
	return ptr;
 802255a:	68fb      	ldr	r3, [r7, #12]
}
 802255c:	4618      	mov	r0, r3
 802255e:	3714      	adds	r7, #20
 8022560:	46bd      	mov	sp, r7
 8022562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022566:	4770      	bx	lr
 8022568:	200133d4 	.word	0x200133d4

0802256c <GetAddrInputRegister>:

uint8_t* GetAddrInputRegister(uint16_t address)
{
 802256c:	b480      	push	{r7}
 802256e:	b085      	sub	sp, #20
 8022570:	af00      	add	r7, sp, #0
 8022572:	4603      	mov	r3, r0
 8022574:	80fb      	strh	r3, [r7, #6]

	uint8_t *ptr;

	if (address < 256)
 8022576:	88fb      	ldrh	r3, [r7, #6]
 8022578:	2bff      	cmp	r3, #255	; 0xff
 802257a:	d809      	bhi.n	8022590 <GetAddrInputRegister+0x24>

		ptr = (uint8_t*) &ModbusMap->INPUTREGISTERS[ADD_IMEI_1 + (address)];
 802257c:	4b0d      	ldr	r3, [pc, #52]	; (80225b4 <GetAddrInputRegister+0x48>)
 802257e:	681a      	ldr	r2, [r3, #0]
 8022580:	88fb      	ldrh	r3, [r7, #6]
 8022582:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8022586:	005b      	lsls	r3, r3, #1
 8022588:	4413      	add	r3, r2
 802258a:	3306      	adds	r3, #6
 802258c:	60fb      	str	r3, [r7, #12]
 802258e:	e00a      	b.n	80225a6 <GetAddrInputRegister+0x3a>
	else
		ptr = (uint8_t*) &ModbusMap->ESPELHO[ADD_IMEI_1 + ((address - 256))];
 8022590:	4b08      	ldr	r3, [pc, #32]	; (80225b4 <GetAddrInputRegister+0x48>)
 8022592:	681a      	ldr	r2, [r3, #0]
 8022594:	88fb      	ldrh	r3, [r7, #6]
 8022596:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 802259a:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 802259e:	005b      	lsls	r3, r3, #1
 80225a0:	4413      	add	r3, r2
 80225a2:	3304      	adds	r3, #4
 80225a4:	60fb      	str	r3, [r7, #12]
	return ptr;
 80225a6:	68fb      	ldr	r3, [r7, #12]
}
 80225a8:	4618      	mov	r0, r3
 80225aa:	3714      	adds	r7, #20
 80225ac:	46bd      	mov	sp, r7
 80225ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225b2:	4770      	bx	lr
 80225b4:	200133d4 	.word	0x200133d4

080225b8 <GetAddrHoldingRegister>:

uint8_t* GetAddrHoldingRegister(uint16_t address)
{
 80225b8:	b480      	push	{r7}
 80225ba:	b085      	sub	sp, #20
 80225bc:	af00      	add	r7, sp, #0
 80225be:	4603      	mov	r3, r0
 80225c0:	80fb      	strh	r3, [r7, #6]

	uint8_t *ptr;

	if (address < 500)
 80225c2:	88fb      	ldrh	r3, [r7, #6]
 80225c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80225c8:	d207      	bcs.n	80225da <GetAddrHoldingRegister+0x22>

		ptr = (uint8_t*) &ModbusMap->HOLDINGREGISTERS[ADD_TEMVALCONGPR + (address)];
 80225ca:	4b0b      	ldr	r3, [pc, #44]	; (80225f8 <GetAddrHoldingRegister+0x40>)
 80225cc:	681a      	ldr	r2, [r3, #0]
 80225ce:	88fb      	ldrh	r3, [r7, #6]
 80225d0:	005b      	lsls	r3, r3, #1
 80225d2:	4413      	add	r3, r2
 80225d4:	3306      	adds	r3, #6
 80225d6:	60fb      	str	r3, [r7, #12]
 80225d8:	e007      	b.n	80225ea <GetAddrHoldingRegister+0x32>
	//ptr = (uint8_t*) &modbusMapa.TEMVALCONGPR + (address * 2);
	else
		ptr = (uint8_t*) &ModbusMap->HOLDINGREGISTERS[(ADD_NUMSER_1 - 130) + (address - 500)];
 80225da:	4b07      	ldr	r3, [pc, #28]	; (80225f8 <GetAddrHoldingRegister+0x40>)
 80225dc:	681a      	ldr	r2, [r3, #0]
 80225de:	88fb      	ldrh	r3, [r7, #6]
 80225e0:	3b82      	subs	r3, #130	; 0x82
 80225e2:	005b      	lsls	r3, r3, #1
 80225e4:	4413      	add	r3, r2
 80225e6:	3306      	adds	r3, #6
 80225e8:	60fb      	str	r3, [r7, #12]
	//ptr = (uint8_t*) &modbusMapa.NUMSER_1 + ((address - 500) * 2);
	return ptr;
 80225ea:	68fb      	ldr	r3, [r7, #12]
}
 80225ec:	4618      	mov	r0, r3
 80225ee:	3714      	adds	r7, #20
 80225f0:	46bd      	mov	sp, r7
 80225f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225f6:	4770      	bx	lr
 80225f8:	200133d4 	.word	0x200133d4

080225fc <CreateDefaultModbusMap>:
}



void CreateDefaultModbusMap(void *fileDataBuffer, TModbusMap *modbusMap)
{
 80225fc:	b580      	push	{r7, lr}
 80225fe:	b086      	sub	sp, #24
 8022600:	af00      	add	r7, sp, #0
 8022602:	6078      	str	r0, [r7, #4]
 8022604:	6039      	str	r1, [r7, #0]
  if (modbusMap == NULL)
 8022606:	683b      	ldr	r3, [r7, #0]
 8022608:	2b00      	cmp	r3, #0
 802260a:	d03e      	beq.n	802268a <CreateDefaultModbusMap+0x8e>
    return;
  memset(fileDataBuffer, 0, (1024 * 2));
 802260c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8022610:	2100      	movs	r1, #0
 8022612:	6878      	ldr	r0, [r7, #4]
 8022614:	f001 fea4 	bl	8024360 <memset>

  for (int var = 0; var < TOTAL_VARIAVEIS_INPUT; ++var)
 8022618:	2300      	movs	r3, #0
 802261a:	617b      	str	r3, [r7, #20]
 802261c:	e00a      	b.n	8022634 <CreateDefaultModbusMap+0x38>
  {

    modbusMap->INPUTREGISTERS [var] = 1;
 802261e:	683a      	ldr	r2, [r7, #0]
 8022620:	697b      	ldr	r3, [r7, #20]
 8022622:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8022626:	005b      	lsls	r3, r3, #1
 8022628:	4413      	add	r3, r2
 802262a:	2201      	movs	r2, #1
 802262c:	80da      	strh	r2, [r3, #6]
  for (int var = 0; var < TOTAL_VARIAVEIS_INPUT; ++var)
 802262e:	697b      	ldr	r3, [r7, #20]
 8022630:	3301      	adds	r3, #1
 8022632:	617b      	str	r3, [r7, #20]
 8022634:	697b      	ldr	r3, [r7, #20]
 8022636:	2b76      	cmp	r3, #118	; 0x76
 8022638:	ddf1      	ble.n	802261e <CreateDefaultModbusMap+0x22>
  }

  for (int var = 0; var < TOTAL_VARIAVEIS_HOLDING; ++var)
 802263a:	2300      	movs	r3, #0
 802263c:	613b      	str	r3, [r7, #16]
 802263e:	e008      	b.n	8022652 <CreateDefaultModbusMap+0x56>
  {

    modbusMap->HOLDINGREGISTERS [var] = 2;
 8022640:	683a      	ldr	r2, [r7, #0]
 8022642:	693b      	ldr	r3, [r7, #16]
 8022644:	005b      	lsls	r3, r3, #1
 8022646:	4413      	add	r3, r2
 8022648:	2202      	movs	r2, #2
 802264a:	80da      	strh	r2, [r3, #6]
  for (int var = 0; var < TOTAL_VARIAVEIS_HOLDING; ++var)
 802264c:	693b      	ldr	r3, [r7, #16]
 802264e:	3301      	adds	r3, #1
 8022650:	613b      	str	r3, [r7, #16]
 8022652:	693b      	ldr	r3, [r7, #16]
 8022654:	f5b3 7fbc 	cmp.w	r3, #376	; 0x178
 8022658:	dbf2      	blt.n	8022640 <CreateDefaultModbusMap+0x44>
  }

  for (int var = 0; var < TOTAL_VARIAVEIS_ESPELHO; ++var)
 802265a:	2300      	movs	r3, #0
 802265c:	60fb      	str	r3, [r7, #12]
 802265e:	e00a      	b.n	8022676 <CreateDefaultModbusMap+0x7a>
  {

    modbusMap->ESPELHO [var] = 3;
 8022660:	683a      	ldr	r2, [r7, #0]
 8022662:	68fb      	ldr	r3, [r7, #12]
 8022664:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8022668:	005b      	lsls	r3, r3, #1
 802266a:	4413      	add	r3, r2
 802266c:	2203      	movs	r2, #3
 802266e:	809a      	strh	r2, [r3, #4]
  for (int var = 0; var < TOTAL_VARIAVEIS_ESPELHO; ++var)
 8022670:	68fb      	ldr	r3, [r7, #12]
 8022672:	3301      	adds	r3, #1
 8022674:	60fb      	str	r3, [r7, #12]
 8022676:	68fb      	ldr	r3, [r7, #12]
 8022678:	2b4a      	cmp	r3, #74	; 0x4a
 802267a:	ddf1      	ble.n	8022660 <CreateDefaultModbusMap+0x64>
  }

  memcpy(fileDataBuffer, modbusMap, sizeof(TModbusMap));
 802267c:	f240 427a 	movw	r2, #1146	; 0x47a
 8022680:	6839      	ldr	r1, [r7, #0]
 8022682:	6878      	ldr	r0, [r7, #4]
 8022684:	f001 ff91 	bl	80245aa <memcpy>
 8022688:	e000      	b.n	802268c <CreateDefaultModbusMap+0x90>
    return;
 802268a:	bf00      	nop
}
 802268c:	3718      	adds	r7, #24
 802268e:	46bd      	mov	sp, r7
 8022690:	bd80      	pop	{r7, pc}
	...

08022694 <ModbusInit>:


void ModbusInit ()
{
 8022694:	b480      	push	{r7}
 8022696:	af00      	add	r7, sp, #0
  ModbusMap = &modbusMapFile;
 8022698:	4b03      	ldr	r3, [pc, #12]	; (80226a8 <ModbusInit+0x14>)
 802269a:	4a04      	ldr	r2, [pc, #16]	; (80226ac <ModbusInit+0x18>)
 802269c:	601a      	str	r2, [r3, #0]

}
 802269e:	bf00      	nop
 80226a0:	46bd      	mov	sp, r7
 80226a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226a6:	4770      	bx	lr
 80226a8:	200133d4 	.word	0x200133d4
 80226ac:	20000450 	.word	0x20000450

080226b0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80226b0:	b480      	push	{r7}
 80226b2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80226b4:	bf00      	nop
 80226b6:	46bd      	mov	sp, r7
 80226b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226bc:	4770      	bx	lr
	...

080226c0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80226c0:	b580      	push	{r7, lr}
 80226c2:	b086      	sub	sp, #24
 80226c4:	af04      	add	r7, sp, #16
 80226c6:	4603      	mov	r3, r0
 80226c8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80226ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80226ce:	9302      	str	r3, [sp, #8]
 80226d0:	2301      	movs	r3, #1
 80226d2:	9301      	str	r3, [sp, #4]
 80226d4:	1dfb      	adds	r3, r7, #7
 80226d6:	9300      	str	r3, [sp, #0]
 80226d8:	2301      	movs	r3, #1
 80226da:	2200      	movs	r2, #0
 80226dc:	2178      	movs	r1, #120	; 0x78
 80226de:	4803      	ldr	r0, [pc, #12]	; (80226ec <ssd1306_WriteCommand+0x2c>)
 80226e0:	f7e3 f846 	bl	8005770 <HAL_I2C_Mem_Write>
}
 80226e4:	bf00      	nop
 80226e6:	3708      	adds	r7, #8
 80226e8:	46bd      	mov	sp, r7
 80226ea:	bd80      	pop	{r7, pc}
 80226ec:	200018d4 	.word	0x200018d4

080226f0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80226f0:	b580      	push	{r7, lr}
 80226f2:	b086      	sub	sp, #24
 80226f4:	af04      	add	r7, sp, #16
 80226f6:	6078      	str	r0, [r7, #4]
 80226f8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80226fa:	683b      	ldr	r3, [r7, #0]
 80226fc:	b29b      	uxth	r3, r3
 80226fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022702:	9202      	str	r2, [sp, #8]
 8022704:	9301      	str	r3, [sp, #4]
 8022706:	687b      	ldr	r3, [r7, #4]
 8022708:	9300      	str	r3, [sp, #0]
 802270a:	2301      	movs	r3, #1
 802270c:	2240      	movs	r2, #64	; 0x40
 802270e:	2178      	movs	r1, #120	; 0x78
 8022710:	4803      	ldr	r0, [pc, #12]	; (8022720 <ssd1306_WriteData+0x30>)
 8022712:	f7e3 f82d 	bl	8005770 <HAL_I2C_Mem_Write>
}
 8022716:	bf00      	nop
 8022718:	3708      	adds	r7, #8
 802271a:	46bd      	mov	sp, r7
 802271c:	bd80      	pop	{r7, pc}
 802271e:	bf00      	nop
 8022720:	200018d4 	.word	0x200018d4

08022724 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8022724:	b580      	push	{r7, lr}
 8022726:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8022728:	f7ff ffc2 	bl	80226b0 <ssd1306_Reset>

    // Wait for the screen to boot
    //HAL_Delay(100);

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 802272c:	2000      	movs	r0, #0
 802272e:	f000 f9cf 	bl	8022ad0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8022732:	2020      	movs	r0, #32
 8022734:	f7ff ffc4 	bl	80226c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8022738:	2000      	movs	r0, #0
 802273a:	f7ff ffc1 	bl	80226c0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 802273e:	20b0      	movs	r0, #176	; 0xb0
 8022740:	f7ff ffbe 	bl	80226c0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8022744:	20c8      	movs	r0, #200	; 0xc8
 8022746:	f7ff ffbb 	bl	80226c0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 802274a:	2000      	movs	r0, #0
 802274c:	f7ff ffb8 	bl	80226c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8022750:	2010      	movs	r0, #16
 8022752:	f7ff ffb5 	bl	80226c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8022756:	2040      	movs	r0, #64	; 0x40
 8022758:	f7ff ffb2 	bl	80226c0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 802275c:	20ff      	movs	r0, #255	; 0xff
 802275e:	f000 f9a3 	bl	8022aa8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8022762:	20a1      	movs	r0, #161	; 0xa1
 8022764:	f7ff ffac 	bl	80226c0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8022768:	20a6      	movs	r0, #166	; 0xa6
 802276a:	f7ff ffa9 	bl	80226c0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 802276e:	20a8      	movs	r0, #168	; 0xa8
 8022770:	f7ff ffa6 	bl	80226c0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8022774:	201f      	movs	r0, #31
 8022776:	f7ff ffa3 	bl	80226c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 802277a:	20a4      	movs	r0, #164	; 0xa4
 802277c:	f7ff ffa0 	bl	80226c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8022780:	20d3      	movs	r0, #211	; 0xd3
 8022782:	f7ff ff9d 	bl	80226c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8022786:	2000      	movs	r0, #0
 8022788:	f7ff ff9a 	bl	80226c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 802278c:	20d5      	movs	r0, #213	; 0xd5
 802278e:	f7ff ff97 	bl	80226c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8022792:	20f0      	movs	r0, #240	; 0xf0
 8022794:	f7ff ff94 	bl	80226c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8022798:	20d9      	movs	r0, #217	; 0xd9
 802279a:	f7ff ff91 	bl	80226c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 802279e:	2022      	movs	r0, #34	; 0x22
 80227a0:	f7ff ff8e 	bl	80226c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80227a4:	20da      	movs	r0, #218	; 0xda
 80227a6:	f7ff ff8b 	bl	80226c0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80227aa:	2002      	movs	r0, #2
 80227ac:	f7ff ff88 	bl	80226c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80227b0:	20db      	movs	r0, #219	; 0xdb
 80227b2:	f7ff ff85 	bl	80226c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80227b6:	2020      	movs	r0, #32
 80227b8:	f7ff ff82 	bl	80226c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80227bc:	208d      	movs	r0, #141	; 0x8d
 80227be:	f7ff ff7f 	bl	80226c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80227c2:	2014      	movs	r0, #20
 80227c4:	f7ff ff7c 	bl	80226c0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80227c8:	2001      	movs	r0, #1
 80227ca:	f000 f981 	bl	8022ad0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80227ce:	2000      	movs	r0, #0
 80227d0:	f000 f810 	bl	80227f4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80227d4:	f000 f826 	bl	8022824 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80227d8:	4b05      	ldr	r3, [pc, #20]	; (80227f0 <ssd1306_Init+0xcc>)
 80227da:	2200      	movs	r2, #0
 80227dc:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80227de:	4b04      	ldr	r3, [pc, #16]	; (80227f0 <ssd1306_Init+0xcc>)
 80227e0:	2200      	movs	r2, #0
 80227e2:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80227e4:	4b02      	ldr	r3, [pc, #8]	; (80227f0 <ssd1306_Init+0xcc>)
 80227e6:	2201      	movs	r2, #1
 80227e8:	711a      	strb	r2, [r3, #4]
}
 80227ea:	bf00      	nop
 80227ec:	bd80      	pop	{r7, pc}
 80227ee:	bf00      	nop
 80227f0:	200135d8 	.word	0x200135d8

080227f4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80227f4:	b580      	push	{r7, lr}
 80227f6:	b082      	sub	sp, #8
 80227f8:	af00      	add	r7, sp, #0
 80227fa:	4603      	mov	r3, r0
 80227fc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80227fe:	79fb      	ldrb	r3, [r7, #7]
 8022800:	2b00      	cmp	r3, #0
 8022802:	d101      	bne.n	8022808 <ssd1306_Fill+0x14>
 8022804:	2300      	movs	r3, #0
 8022806:	e000      	b.n	802280a <ssd1306_Fill+0x16>
 8022808:	23ff      	movs	r3, #255	; 0xff
 802280a:	f44f 7200 	mov.w	r2, #512	; 0x200
 802280e:	4619      	mov	r1, r3
 8022810:	4803      	ldr	r0, [pc, #12]	; (8022820 <ssd1306_Fill+0x2c>)
 8022812:	f001 fda5 	bl	8024360 <memset>
}
 8022816:	bf00      	nop
 8022818:	3708      	adds	r7, #8
 802281a:	46bd      	mov	sp, r7
 802281c:	bd80      	pop	{r7, pc}
 802281e:	bf00      	nop
 8022820:	200133d8 	.word	0x200133d8

08022824 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8022824:	b580      	push	{r7, lr}
 8022826:	b082      	sub	sp, #8
 8022828:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 802282a:	2300      	movs	r3, #0
 802282c:	71fb      	strb	r3, [r7, #7]
 802282e:	e016      	b.n	802285e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8022830:	79fb      	ldrb	r3, [r7, #7]
 8022832:	3b50      	subs	r3, #80	; 0x50
 8022834:	b2db      	uxtb	r3, r3
 8022836:	4618      	mov	r0, r3
 8022838:	f7ff ff42 	bl	80226c0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 802283c:	2000      	movs	r0, #0
 802283e:	f7ff ff3f 	bl	80226c0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8022842:	2010      	movs	r0, #16
 8022844:	f7ff ff3c 	bl	80226c0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8022848:	79fb      	ldrb	r3, [r7, #7]
 802284a:	01db      	lsls	r3, r3, #7
 802284c:	4a08      	ldr	r2, [pc, #32]	; (8022870 <ssd1306_UpdateScreen+0x4c>)
 802284e:	4413      	add	r3, r2
 8022850:	2180      	movs	r1, #128	; 0x80
 8022852:	4618      	mov	r0, r3
 8022854:	f7ff ff4c 	bl	80226f0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8022858:	79fb      	ldrb	r3, [r7, #7]
 802285a:	3301      	adds	r3, #1
 802285c:	71fb      	strb	r3, [r7, #7]
 802285e:	79fb      	ldrb	r3, [r7, #7]
 8022860:	2b03      	cmp	r3, #3
 8022862:	d9e5      	bls.n	8022830 <ssd1306_UpdateScreen+0xc>
    }
}
 8022864:	bf00      	nop
 8022866:	bf00      	nop
 8022868:	3708      	adds	r7, #8
 802286a:	46bd      	mov	sp, r7
 802286c:	bd80      	pop	{r7, pc}
 802286e:	bf00      	nop
 8022870:	200133d8 	.word	0x200133d8

08022874 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8022874:	b480      	push	{r7}
 8022876:	b083      	sub	sp, #12
 8022878:	af00      	add	r7, sp, #0
 802287a:	4603      	mov	r3, r0
 802287c:	71fb      	strb	r3, [r7, #7]
 802287e:	460b      	mov	r3, r1
 8022880:	71bb      	strb	r3, [r7, #6]
 8022882:	4613      	mov	r3, r2
 8022884:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8022886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802288a:	2b00      	cmp	r3, #0
 802288c:	db3d      	blt.n	802290a <ssd1306_DrawPixel+0x96>
 802288e:	79bb      	ldrb	r3, [r7, #6]
 8022890:	2b1f      	cmp	r3, #31
 8022892:	d83a      	bhi.n	802290a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8022894:	797b      	ldrb	r3, [r7, #5]
 8022896:	2b01      	cmp	r3, #1
 8022898:	d11a      	bne.n	80228d0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 802289a:	79fa      	ldrb	r2, [r7, #7]
 802289c:	79bb      	ldrb	r3, [r7, #6]
 802289e:	08db      	lsrs	r3, r3, #3
 80228a0:	b2d8      	uxtb	r0, r3
 80228a2:	4603      	mov	r3, r0
 80228a4:	01db      	lsls	r3, r3, #7
 80228a6:	4413      	add	r3, r2
 80228a8:	4a1b      	ldr	r2, [pc, #108]	; (8022918 <ssd1306_DrawPixel+0xa4>)
 80228aa:	5cd3      	ldrb	r3, [r2, r3]
 80228ac:	b25a      	sxtb	r2, r3
 80228ae:	79bb      	ldrb	r3, [r7, #6]
 80228b0:	f003 0307 	and.w	r3, r3, #7
 80228b4:	2101      	movs	r1, #1
 80228b6:	fa01 f303 	lsl.w	r3, r1, r3
 80228ba:	b25b      	sxtb	r3, r3
 80228bc:	4313      	orrs	r3, r2
 80228be:	b259      	sxtb	r1, r3
 80228c0:	79fa      	ldrb	r2, [r7, #7]
 80228c2:	4603      	mov	r3, r0
 80228c4:	01db      	lsls	r3, r3, #7
 80228c6:	4413      	add	r3, r2
 80228c8:	b2c9      	uxtb	r1, r1
 80228ca:	4a13      	ldr	r2, [pc, #76]	; (8022918 <ssd1306_DrawPixel+0xa4>)
 80228cc:	54d1      	strb	r1, [r2, r3]
 80228ce:	e01d      	b.n	802290c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80228d0:	79fa      	ldrb	r2, [r7, #7]
 80228d2:	79bb      	ldrb	r3, [r7, #6]
 80228d4:	08db      	lsrs	r3, r3, #3
 80228d6:	b2d8      	uxtb	r0, r3
 80228d8:	4603      	mov	r3, r0
 80228da:	01db      	lsls	r3, r3, #7
 80228dc:	4413      	add	r3, r2
 80228de:	4a0e      	ldr	r2, [pc, #56]	; (8022918 <ssd1306_DrawPixel+0xa4>)
 80228e0:	5cd3      	ldrb	r3, [r2, r3]
 80228e2:	b25a      	sxtb	r2, r3
 80228e4:	79bb      	ldrb	r3, [r7, #6]
 80228e6:	f003 0307 	and.w	r3, r3, #7
 80228ea:	2101      	movs	r1, #1
 80228ec:	fa01 f303 	lsl.w	r3, r1, r3
 80228f0:	b25b      	sxtb	r3, r3
 80228f2:	43db      	mvns	r3, r3
 80228f4:	b25b      	sxtb	r3, r3
 80228f6:	4013      	ands	r3, r2
 80228f8:	b259      	sxtb	r1, r3
 80228fa:	79fa      	ldrb	r2, [r7, #7]
 80228fc:	4603      	mov	r3, r0
 80228fe:	01db      	lsls	r3, r3, #7
 8022900:	4413      	add	r3, r2
 8022902:	b2c9      	uxtb	r1, r1
 8022904:	4a04      	ldr	r2, [pc, #16]	; (8022918 <ssd1306_DrawPixel+0xa4>)
 8022906:	54d1      	strb	r1, [r2, r3]
 8022908:	e000      	b.n	802290c <ssd1306_DrawPixel+0x98>
        return;
 802290a:	bf00      	nop
    }
}
 802290c:	370c      	adds	r7, #12
 802290e:	46bd      	mov	sp, r7
 8022910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022914:	4770      	bx	lr
 8022916:	bf00      	nop
 8022918:	200133d8 	.word	0x200133d8

0802291c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 802291c:	b590      	push	{r4, r7, lr}
 802291e:	b089      	sub	sp, #36	; 0x24
 8022920:	af00      	add	r7, sp, #0
 8022922:	4604      	mov	r4, r0
 8022924:	1d38      	adds	r0, r7, #4
 8022926:	e880 0006 	stmia.w	r0, {r1, r2}
 802292a:	461a      	mov	r2, r3
 802292c:	4623      	mov	r3, r4
 802292e:	73fb      	strb	r3, [r7, #15]
 8022930:	4613      	mov	r3, r2
 8022932:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8022934:	7bfb      	ldrb	r3, [r7, #15]
 8022936:	2b1f      	cmp	r3, #31
 8022938:	d902      	bls.n	8022940 <ssd1306_WriteChar+0x24>
 802293a:	7bfb      	ldrb	r3, [r7, #15]
 802293c:	2b7e      	cmp	r3, #126	; 0x7e
 802293e:	d901      	bls.n	8022944 <ssd1306_WriteChar+0x28>
        return 0;
 8022940:	2300      	movs	r3, #0
 8022942:	e06d      	b.n	8022a20 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8022944:	4b38      	ldr	r3, [pc, #224]	; (8022a28 <ssd1306_WriteChar+0x10c>)
 8022946:	881b      	ldrh	r3, [r3, #0]
 8022948:	461a      	mov	r2, r3
 802294a:	793b      	ldrb	r3, [r7, #4]
 802294c:	4413      	add	r3, r2
 802294e:	2b80      	cmp	r3, #128	; 0x80
 8022950:	dc06      	bgt.n	8022960 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8022952:	4b35      	ldr	r3, [pc, #212]	; (8022a28 <ssd1306_WriteChar+0x10c>)
 8022954:	885b      	ldrh	r3, [r3, #2]
 8022956:	461a      	mov	r2, r3
 8022958:	797b      	ldrb	r3, [r7, #5]
 802295a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 802295c:	2b20      	cmp	r3, #32
 802295e:	dd01      	ble.n	8022964 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8022960:	2300      	movs	r3, #0
 8022962:	e05d      	b.n	8022a20 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8022964:	2300      	movs	r3, #0
 8022966:	61fb      	str	r3, [r7, #28]
 8022968:	e04c      	b.n	8022a04 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 802296a:	68ba      	ldr	r2, [r7, #8]
 802296c:	7bfb      	ldrb	r3, [r7, #15]
 802296e:	3b20      	subs	r3, #32
 8022970:	7979      	ldrb	r1, [r7, #5]
 8022972:	fb01 f303 	mul.w	r3, r1, r3
 8022976:	4619      	mov	r1, r3
 8022978:	69fb      	ldr	r3, [r7, #28]
 802297a:	440b      	add	r3, r1
 802297c:	005b      	lsls	r3, r3, #1
 802297e:	4413      	add	r3, r2
 8022980:	881b      	ldrh	r3, [r3, #0]
 8022982:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8022984:	2300      	movs	r3, #0
 8022986:	61bb      	str	r3, [r7, #24]
 8022988:	e034      	b.n	80229f4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 802298a:	697a      	ldr	r2, [r7, #20]
 802298c:	69bb      	ldr	r3, [r7, #24]
 802298e:	fa02 f303 	lsl.w	r3, r2, r3
 8022992:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8022996:	2b00      	cmp	r3, #0
 8022998:	d012      	beq.n	80229c0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 802299a:	4b23      	ldr	r3, [pc, #140]	; (8022a28 <ssd1306_WriteChar+0x10c>)
 802299c:	881b      	ldrh	r3, [r3, #0]
 802299e:	b2da      	uxtb	r2, r3
 80229a0:	69bb      	ldr	r3, [r7, #24]
 80229a2:	b2db      	uxtb	r3, r3
 80229a4:	4413      	add	r3, r2
 80229a6:	b2d8      	uxtb	r0, r3
 80229a8:	4b1f      	ldr	r3, [pc, #124]	; (8022a28 <ssd1306_WriteChar+0x10c>)
 80229aa:	885b      	ldrh	r3, [r3, #2]
 80229ac:	b2da      	uxtb	r2, r3
 80229ae:	69fb      	ldr	r3, [r7, #28]
 80229b0:	b2db      	uxtb	r3, r3
 80229b2:	4413      	add	r3, r2
 80229b4:	b2db      	uxtb	r3, r3
 80229b6:	7bba      	ldrb	r2, [r7, #14]
 80229b8:	4619      	mov	r1, r3
 80229ba:	f7ff ff5b 	bl	8022874 <ssd1306_DrawPixel>
 80229be:	e016      	b.n	80229ee <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80229c0:	4b19      	ldr	r3, [pc, #100]	; (8022a28 <ssd1306_WriteChar+0x10c>)
 80229c2:	881b      	ldrh	r3, [r3, #0]
 80229c4:	b2da      	uxtb	r2, r3
 80229c6:	69bb      	ldr	r3, [r7, #24]
 80229c8:	b2db      	uxtb	r3, r3
 80229ca:	4413      	add	r3, r2
 80229cc:	b2d8      	uxtb	r0, r3
 80229ce:	4b16      	ldr	r3, [pc, #88]	; (8022a28 <ssd1306_WriteChar+0x10c>)
 80229d0:	885b      	ldrh	r3, [r3, #2]
 80229d2:	b2da      	uxtb	r2, r3
 80229d4:	69fb      	ldr	r3, [r7, #28]
 80229d6:	b2db      	uxtb	r3, r3
 80229d8:	4413      	add	r3, r2
 80229da:	b2d9      	uxtb	r1, r3
 80229dc:	7bbb      	ldrb	r3, [r7, #14]
 80229de:	2b00      	cmp	r3, #0
 80229e0:	bf0c      	ite	eq
 80229e2:	2301      	moveq	r3, #1
 80229e4:	2300      	movne	r3, #0
 80229e6:	b2db      	uxtb	r3, r3
 80229e8:	461a      	mov	r2, r3
 80229ea:	f7ff ff43 	bl	8022874 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80229ee:	69bb      	ldr	r3, [r7, #24]
 80229f0:	3301      	adds	r3, #1
 80229f2:	61bb      	str	r3, [r7, #24]
 80229f4:	793b      	ldrb	r3, [r7, #4]
 80229f6:	461a      	mov	r2, r3
 80229f8:	69bb      	ldr	r3, [r7, #24]
 80229fa:	4293      	cmp	r3, r2
 80229fc:	d3c5      	bcc.n	802298a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80229fe:	69fb      	ldr	r3, [r7, #28]
 8022a00:	3301      	adds	r3, #1
 8022a02:	61fb      	str	r3, [r7, #28]
 8022a04:	797b      	ldrb	r3, [r7, #5]
 8022a06:	461a      	mov	r2, r3
 8022a08:	69fb      	ldr	r3, [r7, #28]
 8022a0a:	4293      	cmp	r3, r2
 8022a0c:	d3ad      	bcc.n	802296a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8022a0e:	4b06      	ldr	r3, [pc, #24]	; (8022a28 <ssd1306_WriteChar+0x10c>)
 8022a10:	881a      	ldrh	r2, [r3, #0]
 8022a12:	793b      	ldrb	r3, [r7, #4]
 8022a14:	b29b      	uxth	r3, r3
 8022a16:	4413      	add	r3, r2
 8022a18:	b29a      	uxth	r2, r3
 8022a1a:	4b03      	ldr	r3, [pc, #12]	; (8022a28 <ssd1306_WriteChar+0x10c>)
 8022a1c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8022a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8022a20:	4618      	mov	r0, r3
 8022a22:	3724      	adds	r7, #36	; 0x24
 8022a24:	46bd      	mov	sp, r7
 8022a26:	bd90      	pop	{r4, r7, pc}
 8022a28:	200135d8 	.word	0x200135d8

08022a2c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8022a2c:	b580      	push	{r7, lr}
 8022a2e:	b084      	sub	sp, #16
 8022a30:	af00      	add	r7, sp, #0
 8022a32:	60f8      	str	r0, [r7, #12]
 8022a34:	1d38      	adds	r0, r7, #4
 8022a36:	e880 0006 	stmia.w	r0, {r1, r2}
 8022a3a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8022a3c:	e012      	b.n	8022a64 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8022a3e:	68fb      	ldr	r3, [r7, #12]
 8022a40:	7818      	ldrb	r0, [r3, #0]
 8022a42:	78fb      	ldrb	r3, [r7, #3]
 8022a44:	1d3a      	adds	r2, r7, #4
 8022a46:	ca06      	ldmia	r2, {r1, r2}
 8022a48:	f7ff ff68 	bl	802291c <ssd1306_WriteChar>
 8022a4c:	4603      	mov	r3, r0
 8022a4e:	461a      	mov	r2, r3
 8022a50:	68fb      	ldr	r3, [r7, #12]
 8022a52:	781b      	ldrb	r3, [r3, #0]
 8022a54:	429a      	cmp	r2, r3
 8022a56:	d002      	beq.n	8022a5e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8022a58:	68fb      	ldr	r3, [r7, #12]
 8022a5a:	781b      	ldrb	r3, [r3, #0]
 8022a5c:	e008      	b.n	8022a70 <ssd1306_WriteString+0x44>
        }
        str++;
 8022a5e:	68fb      	ldr	r3, [r7, #12]
 8022a60:	3301      	adds	r3, #1
 8022a62:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8022a64:	68fb      	ldr	r3, [r7, #12]
 8022a66:	781b      	ldrb	r3, [r3, #0]
 8022a68:	2b00      	cmp	r3, #0
 8022a6a:	d1e8      	bne.n	8022a3e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8022a6c:	68fb      	ldr	r3, [r7, #12]
 8022a6e:	781b      	ldrb	r3, [r3, #0]
}
 8022a70:	4618      	mov	r0, r3
 8022a72:	3710      	adds	r7, #16
 8022a74:	46bd      	mov	sp, r7
 8022a76:	bd80      	pop	{r7, pc}

08022a78 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8022a78:	b480      	push	{r7}
 8022a7a:	b083      	sub	sp, #12
 8022a7c:	af00      	add	r7, sp, #0
 8022a7e:	4603      	mov	r3, r0
 8022a80:	460a      	mov	r2, r1
 8022a82:	71fb      	strb	r3, [r7, #7]
 8022a84:	4613      	mov	r3, r2
 8022a86:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8022a88:	79fb      	ldrb	r3, [r7, #7]
 8022a8a:	b29a      	uxth	r2, r3
 8022a8c:	4b05      	ldr	r3, [pc, #20]	; (8022aa4 <ssd1306_SetCursor+0x2c>)
 8022a8e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8022a90:	79bb      	ldrb	r3, [r7, #6]
 8022a92:	b29a      	uxth	r2, r3
 8022a94:	4b03      	ldr	r3, [pc, #12]	; (8022aa4 <ssd1306_SetCursor+0x2c>)
 8022a96:	805a      	strh	r2, [r3, #2]
}
 8022a98:	bf00      	nop
 8022a9a:	370c      	adds	r7, #12
 8022a9c:	46bd      	mov	sp, r7
 8022a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022aa2:	4770      	bx	lr
 8022aa4:	200135d8 	.word	0x200135d8

08022aa8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8022aa8:	b580      	push	{r7, lr}
 8022aaa:	b084      	sub	sp, #16
 8022aac:	af00      	add	r7, sp, #0
 8022aae:	4603      	mov	r3, r0
 8022ab0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8022ab2:	2381      	movs	r3, #129	; 0x81
 8022ab4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8022ab6:	7bfb      	ldrb	r3, [r7, #15]
 8022ab8:	4618      	mov	r0, r3
 8022aba:	f7ff fe01 	bl	80226c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8022abe:	79fb      	ldrb	r3, [r7, #7]
 8022ac0:	4618      	mov	r0, r3
 8022ac2:	f7ff fdfd 	bl	80226c0 <ssd1306_WriteCommand>
}
 8022ac6:	bf00      	nop
 8022ac8:	3710      	adds	r7, #16
 8022aca:	46bd      	mov	sp, r7
 8022acc:	bd80      	pop	{r7, pc}
	...

08022ad0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8022ad0:	b580      	push	{r7, lr}
 8022ad2:	b084      	sub	sp, #16
 8022ad4:	af00      	add	r7, sp, #0
 8022ad6:	4603      	mov	r3, r0
 8022ad8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8022ada:	79fb      	ldrb	r3, [r7, #7]
 8022adc:	2b00      	cmp	r3, #0
 8022ade:	d005      	beq.n	8022aec <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8022ae0:	23af      	movs	r3, #175	; 0xaf
 8022ae2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8022ae4:	4b08      	ldr	r3, [pc, #32]	; (8022b08 <ssd1306_SetDisplayOn+0x38>)
 8022ae6:	2201      	movs	r2, #1
 8022ae8:	715a      	strb	r2, [r3, #5]
 8022aea:	e004      	b.n	8022af6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8022aec:	23ae      	movs	r3, #174	; 0xae
 8022aee:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8022af0:	4b05      	ldr	r3, [pc, #20]	; (8022b08 <ssd1306_SetDisplayOn+0x38>)
 8022af2:	2200      	movs	r2, #0
 8022af4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8022af6:	7bfb      	ldrb	r3, [r7, #15]
 8022af8:	4618      	mov	r0, r3
 8022afa:	f7ff fde1 	bl	80226c0 <ssd1306_WriteCommand>
}
 8022afe:	bf00      	nop
 8022b00:	3710      	adds	r7, #16
 8022b02:	46bd      	mov	sp, r7
 8022b04:	bd80      	pop	{r7, pc}
 8022b06:	bf00      	nop
 8022b08:	200135d8 	.word	0x200135d8

08022b0c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8022b0c:	b580      	push	{r7, lr}
 8022b0e:	b086      	sub	sp, #24
 8022b10:	af02      	add	r7, sp, #8
 8022b12:	4603      	mov	r3, r0
 8022b14:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

 HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8022b16:	f107 020f 	add.w	r2, r7, #15
 8022b1a:	1df9      	adds	r1, r7, #7
 8022b1c:	2364      	movs	r3, #100	; 0x64
 8022b1e:	9300      	str	r3, [sp, #0]
 8022b20:	2301      	movs	r3, #1
 8022b22:	4804      	ldr	r0, [pc, #16]	; (8022b34 <W25qxx_Spi+0x28>)
 8022b24:	f7e4 f8fc 	bl	8006d20 <HAL_SPI_TransmitReceive>


	return ret;
 8022b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8022b2a:	4618      	mov	r0, r3
 8022b2c:	3710      	adds	r7, #16
 8022b2e:	46bd      	mov	sp, r7
 8022b30:	bd80      	pop	{r7, pc}
 8022b32:	bf00      	nop
 8022b34:	20001984 	.word	0x20001984

08022b38 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8022b38:	b580      	push	{r7, lr}
 8022b3a:	b084      	sub	sp, #16
 8022b3c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8022b3e:	2300      	movs	r3, #0
 8022b40:	60fb      	str	r3, [r7, #12]
 8022b42:	2300      	movs	r3, #0
 8022b44:	60bb      	str	r3, [r7, #8]
 8022b46:	2300      	movs	r3, #0
 8022b48:	607b      	str	r3, [r7, #4]
 8022b4a:	2300      	movs	r3, #0
 8022b4c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8022b4e:	2200      	movs	r2, #0
 8022b50:	2108      	movs	r1, #8
 8022b52:	4813      	ldr	r0, [pc, #76]	; (8022ba0 <W25qxx_ReadID+0x68>)
 8022b54:	f7e2 fc94 	bl	8005480 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8022b58:	209f      	movs	r0, #159	; 0x9f
 8022b5a:	f7ff ffd7 	bl	8022b0c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8022b5e:	20a5      	movs	r0, #165	; 0xa5
 8022b60:	f7ff ffd4 	bl	8022b0c <W25qxx_Spi>
 8022b64:	4603      	mov	r3, r0
 8022b66:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8022b68:	20a5      	movs	r0, #165	; 0xa5
 8022b6a:	f7ff ffcf 	bl	8022b0c <W25qxx_Spi>
 8022b6e:	4603      	mov	r3, r0
 8022b70:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8022b72:	20a5      	movs	r0, #165	; 0xa5
 8022b74:	f7ff ffca 	bl	8022b0c <W25qxx_Spi>
 8022b78:	4603      	mov	r3, r0
 8022b7a:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8022b7c:	2201      	movs	r2, #1
 8022b7e:	2108      	movs	r1, #8
 8022b80:	4807      	ldr	r0, [pc, #28]	; (8022ba0 <W25qxx_ReadID+0x68>)
 8022b82:	f7e2 fc7d 	bl	8005480 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8022b86:	68bb      	ldr	r3, [r7, #8]
 8022b88:	041a      	lsls	r2, r3, #16
 8022b8a:	687b      	ldr	r3, [r7, #4]
 8022b8c:	021b      	lsls	r3, r3, #8
 8022b8e:	4313      	orrs	r3, r2
 8022b90:	683a      	ldr	r2, [r7, #0]
 8022b92:	4313      	orrs	r3, r2
 8022b94:	60fb      	str	r3, [r7, #12]
	return Temp;
 8022b96:	68fb      	ldr	r3, [r7, #12]
}
 8022b98:	4618      	mov	r0, r3
 8022b9a:	3710      	adds	r7, #16
 8022b9c:	46bd      	mov	sp, r7
 8022b9e:	bd80      	pop	{r7, pc}
 8022ba0:	40021000 	.word	0x40021000

08022ba4 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8022ba4:	b590      	push	{r4, r7, lr}
 8022ba6:	b083      	sub	sp, #12
 8022ba8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8022baa:	2200      	movs	r2, #0
 8022bac:	2108      	movs	r1, #8
 8022bae:	4816      	ldr	r0, [pc, #88]	; (8022c08 <W25qxx_ReadUniqID+0x64>)
 8022bb0:	f7e2 fc66 	bl	8005480 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8022bb4:	204b      	movs	r0, #75	; 0x4b
 8022bb6:	f7ff ffa9 	bl	8022b0c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8022bba:	2300      	movs	r3, #0
 8022bbc:	71fb      	strb	r3, [r7, #7]
 8022bbe:	e005      	b.n	8022bcc <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8022bc0:	20a5      	movs	r0, #165	; 0xa5
 8022bc2:	f7ff ffa3 	bl	8022b0c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8022bc6:	79fb      	ldrb	r3, [r7, #7]
 8022bc8:	3301      	adds	r3, #1
 8022bca:	71fb      	strb	r3, [r7, #7]
 8022bcc:	79fb      	ldrb	r3, [r7, #7]
 8022bce:	2b03      	cmp	r3, #3
 8022bd0:	d9f6      	bls.n	8022bc0 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8022bd2:	2300      	movs	r3, #0
 8022bd4:	71bb      	strb	r3, [r7, #6]
 8022bd6:	e00b      	b.n	8022bf0 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8022bd8:	79bc      	ldrb	r4, [r7, #6]
 8022bda:	20a5      	movs	r0, #165	; 0xa5
 8022bdc:	f7ff ff96 	bl	8022b0c <W25qxx_Spi>
 8022be0:	4603      	mov	r3, r0
 8022be2:	461a      	mov	r2, r3
 8022be4:	4b09      	ldr	r3, [pc, #36]	; (8022c0c <W25qxx_ReadUniqID+0x68>)
 8022be6:	4423      	add	r3, r4
 8022be8:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8022bea:	79bb      	ldrb	r3, [r7, #6]
 8022bec:	3301      	adds	r3, #1
 8022bee:	71bb      	strb	r3, [r7, #6]
 8022bf0:	79bb      	ldrb	r3, [r7, #6]
 8022bf2:	2b07      	cmp	r3, #7
 8022bf4:	d9f0      	bls.n	8022bd8 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8022bf6:	2201      	movs	r2, #1
 8022bf8:	2108      	movs	r1, #8
 8022bfa:	4803      	ldr	r0, [pc, #12]	; (8022c08 <W25qxx_ReadUniqID+0x64>)
 8022bfc:	f7e2 fc40 	bl	8005480 <HAL_GPIO_WritePin>
}
 8022c00:	bf00      	nop
 8022c02:	370c      	adds	r7, #12
 8022c04:	46bd      	mov	sp, r7
 8022c06:	bd90      	pop	{r4, r7, pc}
 8022c08:	40021000 	.word	0x40021000
 8022c0c:	200135e0 	.word	0x200135e0

08022c10 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8022c10:	b580      	push	{r7, lr}
 8022c12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8022c14:	2200      	movs	r2, #0
 8022c16:	2108      	movs	r1, #8
 8022c18:	4807      	ldr	r0, [pc, #28]	; (8022c38 <W25qxx_WriteEnable+0x28>)
 8022c1a:	f7e2 fc31 	bl	8005480 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8022c1e:	2006      	movs	r0, #6
 8022c20:	f7ff ff74 	bl	8022b0c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8022c24:	2201      	movs	r2, #1
 8022c26:	2108      	movs	r1, #8
 8022c28:	4803      	ldr	r0, [pc, #12]	; (8022c38 <W25qxx_WriteEnable+0x28>)
 8022c2a:	f7e2 fc29 	bl	8005480 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8022c2e:	2001      	movs	r0, #1
 8022c30:	f7e5 ffb6 	bl	8008ba0 <osDelay>
}
 8022c34:	bf00      	nop
 8022c36:	bd80      	pop	{r7, pc}
 8022c38:	40021000 	.word	0x40021000

08022c3c <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8022c3c:	b580      	push	{r7, lr}
 8022c3e:	b084      	sub	sp, #16
 8022c40:	af00      	add	r7, sp, #0
 8022c42:	4603      	mov	r3, r0
 8022c44:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8022c46:	2300      	movs	r3, #0
 8022c48:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8022c4a:	2200      	movs	r2, #0
 8022c4c:	2108      	movs	r1, #8
 8022c4e:	481c      	ldr	r0, [pc, #112]	; (8022cc0 <W25qxx_ReadStatusRegister+0x84>)
 8022c50:	f7e2 fc16 	bl	8005480 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8022c54:	79fb      	ldrb	r3, [r7, #7]
 8022c56:	2b01      	cmp	r3, #1
 8022c58:	d10c      	bne.n	8022c74 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8022c5a:	2005      	movs	r0, #5
 8022c5c:	f7ff ff56 	bl	8022b0c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8022c60:	20a5      	movs	r0, #165	; 0xa5
 8022c62:	f7ff ff53 	bl	8022b0c <W25qxx_Spi>
 8022c66:	4603      	mov	r3, r0
 8022c68:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8022c6a:	4a16      	ldr	r2, [pc, #88]	; (8022cc4 <W25qxx_ReadStatusRegister+0x88>)
 8022c6c:	7bfb      	ldrb	r3, [r7, #15]
 8022c6e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8022c72:	e01b      	b.n	8022cac <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8022c74:	79fb      	ldrb	r3, [r7, #7]
 8022c76:	2b02      	cmp	r3, #2
 8022c78:	d10c      	bne.n	8022c94 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8022c7a:	2035      	movs	r0, #53	; 0x35
 8022c7c:	f7ff ff46 	bl	8022b0c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8022c80:	20a5      	movs	r0, #165	; 0xa5
 8022c82:	f7ff ff43 	bl	8022b0c <W25qxx_Spi>
 8022c86:	4603      	mov	r3, r0
 8022c88:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8022c8a:	4a0e      	ldr	r2, [pc, #56]	; (8022cc4 <W25qxx_ReadStatusRegister+0x88>)
 8022c8c:	7bfb      	ldrb	r3, [r7, #15]
 8022c8e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8022c92:	e00b      	b.n	8022cac <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8022c94:	2015      	movs	r0, #21
 8022c96:	f7ff ff39 	bl	8022b0c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8022c9a:	20a5      	movs	r0, #165	; 0xa5
 8022c9c:	f7ff ff36 	bl	8022b0c <W25qxx_Spi>
 8022ca0:	4603      	mov	r3, r0
 8022ca2:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8022ca4:	4a07      	ldr	r2, [pc, #28]	; (8022cc4 <W25qxx_ReadStatusRegister+0x88>)
 8022ca6:	7bfb      	ldrb	r3, [r7, #15]
 8022ca8:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8022cac:	2201      	movs	r2, #1
 8022cae:	2108      	movs	r1, #8
 8022cb0:	4803      	ldr	r0, [pc, #12]	; (8022cc0 <W25qxx_ReadStatusRegister+0x84>)
 8022cb2:	f7e2 fbe5 	bl	8005480 <HAL_GPIO_WritePin>
	return status;
 8022cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8022cb8:	4618      	mov	r0, r3
 8022cba:	3710      	adds	r7, #16
 8022cbc:	46bd      	mov	sp, r7
 8022cbe:	bd80      	pop	{r7, pc}
 8022cc0:	40021000 	.word	0x40021000
 8022cc4:	200135e0 	.word	0x200135e0

08022cc8 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8022cc8:	b580      	push	{r7, lr}
 8022cca:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8022ccc:	2001      	movs	r0, #1
 8022cce:	f7e5 ff67 	bl	8008ba0 <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8022cd2:	2200      	movs	r2, #0
 8022cd4:	2108      	movs	r1, #8
 8022cd6:	480f      	ldr	r0, [pc, #60]	; (8022d14 <W25qxx_WaitForWriteEnd+0x4c>)
 8022cd8:	f7e2 fbd2 	bl	8005480 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8022cdc:	2005      	movs	r0, #5
 8022cde:	f7ff ff15 	bl	8022b0c <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8022ce2:	20a5      	movs	r0, #165	; 0xa5
 8022ce4:	f7ff ff12 	bl	8022b0c <W25qxx_Spi>
 8022ce8:	4603      	mov	r3, r0
 8022cea:	461a      	mov	r2, r3
 8022cec:	4b0a      	ldr	r3, [pc, #40]	; (8022d18 <W25qxx_WaitForWriteEnd+0x50>)
 8022cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8022cf2:	2001      	movs	r0, #1
 8022cf4:	f7e5 ff54 	bl	8008ba0 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8022cf8:	4b07      	ldr	r3, [pc, #28]	; (8022d18 <W25qxx_WaitForWriteEnd+0x50>)
 8022cfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8022cfe:	f003 0301 	and.w	r3, r3, #1
 8022d02:	2b00      	cmp	r3, #0
 8022d04:	d1ed      	bne.n	8022ce2 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8022d06:	2201      	movs	r2, #1
 8022d08:	2108      	movs	r1, #8
 8022d0a:	4802      	ldr	r0, [pc, #8]	; (8022d14 <W25qxx_WaitForWriteEnd+0x4c>)
 8022d0c:	f7e2 fbb8 	bl	8005480 <HAL_GPIO_WritePin>
}
 8022d10:	bf00      	nop
 8022d12:	bd80      	pop	{r7, pc}
 8022d14:	40021000 	.word	0x40021000
 8022d18:	200135e0 	.word	0x200135e0

08022d1c <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8022d1c:	b580      	push	{r7, lr}
 8022d1e:	b082      	sub	sp, #8
 8022d20:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8022d22:	4b65      	ldr	r3, [pc, #404]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022d24:	2201      	movs	r2, #1
 8022d26:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8022d2a:	e002      	b.n	8022d32 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8022d2c:	2001      	movs	r0, #1
 8022d2e:	f7e5 ff37 	bl	8008ba0 <osDelay>
	while (HAL_GetTick() < 100)
 8022d32:	f7e0 fe83 	bl	8003a3c <HAL_GetTick>
 8022d36:	4603      	mov	r3, r0
 8022d38:	2b63      	cmp	r3, #99	; 0x63
 8022d3a:	d9f7      	bls.n	8022d2c <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8022d3c:	2201      	movs	r2, #1
 8022d3e:	2108      	movs	r1, #8
 8022d40:	485e      	ldr	r0, [pc, #376]	; (8022ebc <W25qxx_Init+0x1a0>)
 8022d42:	f7e2 fb9d 	bl	8005480 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8022d46:	2064      	movs	r0, #100	; 0x64
 8022d48:	f7e5 ff2a 	bl	8008ba0 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8022d4c:	f7ff fef4 	bl	8022b38 <W25qxx_ReadID>
 8022d50:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8022d52:	687b      	ldr	r3, [r7, #4]
 8022d54:	b2db      	uxtb	r3, r3
 8022d56:	3b11      	subs	r3, #17
 8022d58:	2b0f      	cmp	r3, #15
 8022d5a:	d86c      	bhi.n	8022e36 <W25qxx_Init+0x11a>
 8022d5c:	a201      	add	r2, pc, #4	; (adr r2, 8022d64 <W25qxx_Init+0x48>)
 8022d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022d62:	bf00      	nop
 8022d64:	08022e29 	.word	0x08022e29
 8022d68:	08022e1b 	.word	0x08022e1b
 8022d6c:	08022e0d 	.word	0x08022e0d
 8022d70:	08022dff 	.word	0x08022dff
 8022d74:	08022df1 	.word	0x08022df1
 8022d78:	08022de3 	.word	0x08022de3
 8022d7c:	08022dd5 	.word	0x08022dd5
 8022d80:	08022dc5 	.word	0x08022dc5
 8022d84:	08022db5 	.word	0x08022db5
 8022d88:	08022e37 	.word	0x08022e37
 8022d8c:	08022e37 	.word	0x08022e37
 8022d90:	08022e37 	.word	0x08022e37
 8022d94:	08022e37 	.word	0x08022e37
 8022d98:	08022e37 	.word	0x08022e37
 8022d9c:	08022e37 	.word	0x08022e37
 8022da0:	08022da5 	.word	0x08022da5
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8022da4:	4b44      	ldr	r3, [pc, #272]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022da6:	220a      	movs	r2, #10
 8022da8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8022daa:	4b43      	ldr	r3, [pc, #268]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022dac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8022db0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8022db2:	e046      	b.n	8022e42 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8022db4:	4b40      	ldr	r3, [pc, #256]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022db6:	2209      	movs	r2, #9
 8022db8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8022dba:	4b3f      	ldr	r3, [pc, #252]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8022dc0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8022dc2:	e03e      	b.n	8022e42 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8022dc4:	4b3c      	ldr	r3, [pc, #240]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022dc6:	2208      	movs	r2, #8
 8022dc8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8022dca:	4b3b      	ldr	r3, [pc, #236]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022dcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8022dd0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8022dd2:	e036      	b.n	8022e42 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8022dd4:	4b38      	ldr	r3, [pc, #224]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022dd6:	2207      	movs	r2, #7
 8022dd8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8022dda:	4b37      	ldr	r3, [pc, #220]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022ddc:	2280      	movs	r2, #128	; 0x80
 8022dde:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8022de0:	e02f      	b.n	8022e42 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8022de2:	4b35      	ldr	r3, [pc, #212]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022de4:	2206      	movs	r2, #6
 8022de6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8022de8:	4b33      	ldr	r3, [pc, #204]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022dea:	2240      	movs	r2, #64	; 0x40
 8022dec:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8022dee:	e028      	b.n	8022e42 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8022df0:	4b31      	ldr	r3, [pc, #196]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022df2:	2205      	movs	r2, #5
 8022df4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8022df6:	4b30      	ldr	r3, [pc, #192]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022df8:	2220      	movs	r2, #32
 8022dfa:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8022dfc:	e021      	b.n	8022e42 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8022dfe:	4b2e      	ldr	r3, [pc, #184]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022e00:	2204      	movs	r2, #4
 8022e02:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8022e04:	4b2c      	ldr	r3, [pc, #176]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022e06:	2210      	movs	r2, #16
 8022e08:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8022e0a:	e01a      	b.n	8022e42 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8022e0c:	4b2a      	ldr	r3, [pc, #168]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022e0e:	2203      	movs	r2, #3
 8022e10:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8022e12:	4b29      	ldr	r3, [pc, #164]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022e14:	2208      	movs	r2, #8
 8022e16:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8022e18:	e013      	b.n	8022e42 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8022e1a:	4b27      	ldr	r3, [pc, #156]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022e1c:	2202      	movs	r2, #2
 8022e1e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8022e20:	4b25      	ldr	r3, [pc, #148]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022e22:	2204      	movs	r2, #4
 8022e24:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8022e26:	e00c      	b.n	8022e42 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8022e28:	4b23      	ldr	r3, [pc, #140]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022e2a:	2201      	movs	r2, #1
 8022e2c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8022e2e:	4b22      	ldr	r3, [pc, #136]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022e30:	2202      	movs	r2, #2
 8022e32:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8022e34:	e005      	b.n	8022e42 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8022e36:	4b20      	ldr	r3, [pc, #128]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022e38:	2200      	movs	r2, #0
 8022e3a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8022e3e:	2300      	movs	r3, #0
 8022e40:	e036      	b.n	8022eb0 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8022e42:	4b1d      	ldr	r3, [pc, #116]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8022e48:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8022e4a:	4b1b      	ldr	r3, [pc, #108]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022e4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8022e50:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8022e52:	4b19      	ldr	r3, [pc, #100]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022e54:	69db      	ldr	r3, [r3, #28]
 8022e56:	011b      	lsls	r3, r3, #4
 8022e58:	4a17      	ldr	r2, [pc, #92]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022e5a:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8022e5c:	4b16      	ldr	r3, [pc, #88]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022e5e:	695b      	ldr	r3, [r3, #20]
 8022e60:	4a15      	ldr	r2, [pc, #84]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022e62:	6912      	ldr	r2, [r2, #16]
 8022e64:	fb02 f303 	mul.w	r3, r2, r3
 8022e68:	4a13      	ldr	r2, [pc, #76]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022e6a:	8952      	ldrh	r2, [r2, #10]
 8022e6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8022e70:	4a11      	ldr	r2, [pc, #68]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022e72:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8022e74:	4b10      	ldr	r3, [pc, #64]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022e76:	691b      	ldr	r3, [r3, #16]
 8022e78:	011b      	lsls	r3, r3, #4
 8022e7a:	4a0f      	ldr	r2, [pc, #60]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022e7c:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8022e7e:	4b0e      	ldr	r3, [pc, #56]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022e80:	695b      	ldr	r3, [r3, #20]
 8022e82:	4a0d      	ldr	r2, [pc, #52]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022e84:	6912      	ldr	r2, [r2, #16]
 8022e86:	fb02 f303 	mul.w	r3, r2, r3
 8022e8a:	0a9b      	lsrs	r3, r3, #10
 8022e8c:	4a0a      	ldr	r2, [pc, #40]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022e8e:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8022e90:	f7ff fe88 	bl	8022ba4 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8022e94:	2001      	movs	r0, #1
 8022e96:	f7ff fed1 	bl	8022c3c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8022e9a:	2002      	movs	r0, #2
 8022e9c:	f7ff fece 	bl	8022c3c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8022ea0:	2003      	movs	r0, #3
 8022ea2:	f7ff fecb 	bl	8022c3c <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8022ea6:	4b04      	ldr	r3, [pc, #16]	; (8022eb8 <W25qxx_Init+0x19c>)
 8022ea8:	2200      	movs	r2, #0
 8022eaa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8022eae:	2301      	movs	r3, #1
}
 8022eb0:	4618      	mov	r0, r3
 8022eb2:	3708      	adds	r7, #8
 8022eb4:	46bd      	mov	sp, r7
 8022eb6:	bd80      	pop	{r7, pc}
 8022eb8:	200135e0 	.word	0x200135e0
 8022ebc:	40021000 	.word	0x40021000

08022ec0 <W25qxx_EraseSector>:
#endif
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
uint8_t W25qxx_EraseSector(uint32_t SectorAddr) {
 8022ec0:	b580      	push	{r7, lr}
 8022ec2:	b082      	sub	sp, #8
 8022ec4:	af00      	add	r7, sp, #0
 8022ec6:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8022ec8:	e002      	b.n	8022ed0 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8022eca:	2001      	movs	r0, #1
 8022ecc:	f7e5 fe68 	bl	8008ba0 <osDelay>
	while (w25qxx.Lock == 1)
 8022ed0:	4b26      	ldr	r3, [pc, #152]	; (8022f6c <W25qxx_EraseSector+0xac>)
 8022ed2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8022ed6:	2b01      	cmp	r3, #1
 8022ed8:	d0f7      	beq.n	8022eca <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8022eda:	4b24      	ldr	r3, [pc, #144]	; (8022f6c <W25qxx_EraseSector+0xac>)
 8022edc:	2201      	movs	r2, #1
 8022ede:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8022ee2:	f7ff fef1 	bl	8022cc8 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8022ee6:	4b21      	ldr	r3, [pc, #132]	; (8022f6c <W25qxx_EraseSector+0xac>)
 8022ee8:	691a      	ldr	r2, [r3, #16]
 8022eea:	687b      	ldr	r3, [r7, #4]
 8022eec:	fb02 f303 	mul.w	r3, r2, r3
 8022ef0:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8022ef2:	f7ff fe8d 	bl	8022c10 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8022ef6:	2200      	movs	r2, #0
 8022ef8:	2108      	movs	r1, #8
 8022efa:	481d      	ldr	r0, [pc, #116]	; (8022f70 <W25qxx_EraseSector+0xb0>)
 8022efc:	f7e2 fac0 	bl	8005480 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256) {
 8022f00:	4b1a      	ldr	r3, [pc, #104]	; (8022f6c <W25qxx_EraseSector+0xac>)
 8022f02:	781b      	ldrb	r3, [r3, #0]
 8022f04:	2b08      	cmp	r3, #8
 8022f06:	d909      	bls.n	8022f1c <W25qxx_EraseSector+0x5c>
		W25qxx_Spi(0x21);
 8022f08:	2021      	movs	r0, #33	; 0x21
 8022f0a:	f7ff fdff 	bl	8022b0c <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8022f0e:	687b      	ldr	r3, [r7, #4]
 8022f10:	0e1b      	lsrs	r3, r3, #24
 8022f12:	b2db      	uxtb	r3, r3
 8022f14:	4618      	mov	r0, r3
 8022f16:	f7ff fdf9 	bl	8022b0c <W25qxx_Spi>
 8022f1a:	e002      	b.n	8022f22 <W25qxx_EraseSector+0x62>
	} else {
		W25qxx_Spi(0x20);
 8022f1c:	2020      	movs	r0, #32
 8022f1e:	f7ff fdf5 	bl	8022b0c <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8022f22:	687b      	ldr	r3, [r7, #4]
 8022f24:	0c1b      	lsrs	r3, r3, #16
 8022f26:	b2db      	uxtb	r3, r3
 8022f28:	4618      	mov	r0, r3
 8022f2a:	f7ff fdef 	bl	8022b0c <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8022f2e:	687b      	ldr	r3, [r7, #4]
 8022f30:	0a1b      	lsrs	r3, r3, #8
 8022f32:	b2db      	uxtb	r3, r3
 8022f34:	4618      	mov	r0, r3
 8022f36:	f7ff fde9 	bl	8022b0c <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8022f3a:	687b      	ldr	r3, [r7, #4]
 8022f3c:	b2db      	uxtb	r3, r3
 8022f3e:	4618      	mov	r0, r3
 8022f40:	f7ff fde4 	bl	8022b0c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8022f44:	2201      	movs	r2, #1
 8022f46:	2108      	movs	r1, #8
 8022f48:	4809      	ldr	r0, [pc, #36]	; (8022f70 <W25qxx_EraseSector+0xb0>)
 8022f4a:	f7e2 fa99 	bl	8005480 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 8022f4e:	f7ff febb 	bl	8022cc8 <W25qxx_WaitForWriteEnd>

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8022f52:	2001      	movs	r0, #1
 8022f54:	f7e5 fe24 	bl	8008ba0 <osDelay>
	w25qxx.Lock = 0;
 8022f58:	4b04      	ldr	r3, [pc, #16]	; (8022f6c <W25qxx_EraseSector+0xac>)
 8022f5a:	2200      	movs	r2, #0
 8022f5c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

}
 8022f60:	bf00      	nop
 8022f62:	4618      	mov	r0, r3
 8022f64:	3708      	adds	r7, #8
 8022f66:	46bd      	mov	sp, r7
 8022f68:	bd80      	pop	{r7, pc}
 8022f6a:	bf00      	nop
 8022f6c:	200135e0 	.word	0x200135e0
 8022f70:	40021000 	.word	0x40021000

08022f74 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8022f74:	b480      	push	{r7}
 8022f76:	b083      	sub	sp, #12
 8022f78:	af00      	add	r7, sp, #0
 8022f7a:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8022f7c:	4b07      	ldr	r3, [pc, #28]	; (8022f9c <W25qxx_SectorToPage+0x28>)
 8022f7e:	691b      	ldr	r3, [r3, #16]
 8022f80:	687a      	ldr	r2, [r7, #4]
 8022f82:	fb02 f303 	mul.w	r3, r2, r3
 8022f86:	4a05      	ldr	r2, [pc, #20]	; (8022f9c <W25qxx_SectorToPage+0x28>)
 8022f88:	8952      	ldrh	r2, [r2, #10]
 8022f8a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8022f8e:	4618      	mov	r0, r3
 8022f90:	370c      	adds	r7, #12
 8022f92:	46bd      	mov	sp, r7
 8022f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f98:	4770      	bx	lr
 8022f9a:	bf00      	nop
 8022f9c:	200135e0 	.word	0x200135e0

08022fa0 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8022fa0:	b580      	push	{r7, lr}
 8022fa2:	b084      	sub	sp, #16
 8022fa4:	af00      	add	r7, sp, #0
 8022fa6:	60f8      	str	r0, [r7, #12]
 8022fa8:	60b9      	str	r1, [r7, #8]
 8022faa:	607a      	str	r2, [r7, #4]
 8022fac:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8022fae:	e002      	b.n	8022fb6 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8022fb0:	2001      	movs	r0, #1
 8022fb2:	f7e5 fdf5 	bl	8008ba0 <osDelay>
	while (w25qxx.Lock == 1)
 8022fb6:	4b39      	ldr	r3, [pc, #228]	; (802309c <W25qxx_WritePage+0xfc>)
 8022fb8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8022fbc:	2b01      	cmp	r3, #1
 8022fbe:	d0f7      	beq.n	8022fb0 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8022fc0:	4b36      	ldr	r3, [pc, #216]	; (802309c <W25qxx_WritePage+0xfc>)
 8022fc2:	2201      	movs	r2, #1
 8022fc4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8022fc8:	683a      	ldr	r2, [r7, #0]
 8022fca:	687b      	ldr	r3, [r7, #4]
 8022fcc:	4413      	add	r3, r2
 8022fce:	4a33      	ldr	r2, [pc, #204]	; (802309c <W25qxx_WritePage+0xfc>)
 8022fd0:	8952      	ldrh	r2, [r2, #10]
 8022fd2:	4293      	cmp	r3, r2
 8022fd4:	d802      	bhi.n	8022fdc <W25qxx_WritePage+0x3c>
 8022fd6:	683b      	ldr	r3, [r7, #0]
 8022fd8:	2b00      	cmp	r3, #0
 8022fda:	d105      	bne.n	8022fe8 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8022fdc:	4b2f      	ldr	r3, [pc, #188]	; (802309c <W25qxx_WritePage+0xfc>)
 8022fde:	895b      	ldrh	r3, [r3, #10]
 8022fe0:	461a      	mov	r2, r3
 8022fe2:	687b      	ldr	r3, [r7, #4]
 8022fe4:	1ad3      	subs	r3, r2, r3
 8022fe6:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8022fe8:	687a      	ldr	r2, [r7, #4]
 8022fea:	683b      	ldr	r3, [r7, #0]
 8022fec:	4413      	add	r3, r2
 8022fee:	4a2b      	ldr	r2, [pc, #172]	; (802309c <W25qxx_WritePage+0xfc>)
 8022ff0:	8952      	ldrh	r2, [r2, #10]
 8022ff2:	4293      	cmp	r3, r2
 8022ff4:	d905      	bls.n	8023002 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8022ff6:	4b29      	ldr	r3, [pc, #164]	; (802309c <W25qxx_WritePage+0xfc>)
 8022ff8:	895b      	ldrh	r3, [r3, #10]
 8022ffa:	461a      	mov	r2, r3
 8022ffc:	687b      	ldr	r3, [r7, #4]
 8022ffe:	1ad3      	subs	r3, r2, r3
 8023000:	603b      	str	r3, [r7, #0]

	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	uint32_t StartTime = HAL_GetTick();
#endif

	W25qxx_WaitForWriteEnd();
 8023002:	f7ff fe61 	bl	8022cc8 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8023006:	f7ff fe03 	bl	8022c10 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 802300a:	2200      	movs	r2, #0
 802300c:	2108      	movs	r1, #8
 802300e:	4824      	ldr	r0, [pc, #144]	; (80230a0 <W25qxx_WritePage+0x100>)
 8023010:	f7e2 fa36 	bl	8005480 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8023014:	4b21      	ldr	r3, [pc, #132]	; (802309c <W25qxx_WritePage+0xfc>)
 8023016:	895b      	ldrh	r3, [r3, #10]
 8023018:	461a      	mov	r2, r3
 802301a:	68bb      	ldr	r3, [r7, #8]
 802301c:	fb02 f303 	mul.w	r3, r2, r3
 8023020:	687a      	ldr	r2, [r7, #4]
 8023022:	4413      	add	r3, r2
 8023024:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8023026:	4b1d      	ldr	r3, [pc, #116]	; (802309c <W25qxx_WritePage+0xfc>)
 8023028:	781b      	ldrb	r3, [r3, #0]
 802302a:	2b08      	cmp	r3, #8
 802302c:	d909      	bls.n	8023042 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 802302e:	2012      	movs	r0, #18
 8023030:	f7ff fd6c 	bl	8022b0c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8023034:	68bb      	ldr	r3, [r7, #8]
 8023036:	0e1b      	lsrs	r3, r3, #24
 8023038:	b2db      	uxtb	r3, r3
 802303a:	4618      	mov	r0, r3
 802303c:	f7ff fd66 	bl	8022b0c <W25qxx_Spi>
 8023040:	e002      	b.n	8023048 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8023042:	2002      	movs	r0, #2
 8023044:	f7ff fd62 	bl	8022b0c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8023048:	68bb      	ldr	r3, [r7, #8]
 802304a:	0c1b      	lsrs	r3, r3, #16
 802304c:	b2db      	uxtb	r3, r3
 802304e:	4618      	mov	r0, r3
 8023050:	f7ff fd5c 	bl	8022b0c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8023054:	68bb      	ldr	r3, [r7, #8]
 8023056:	0a1b      	lsrs	r3, r3, #8
 8023058:	b2db      	uxtb	r3, r3
 802305a:	4618      	mov	r0, r3
 802305c:	f7ff fd56 	bl	8022b0c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8023060:	68bb      	ldr	r3, [r7, #8]
 8023062:	b2db      	uxtb	r3, r3
 8023064:	4618      	mov	r0, r3
 8023066:	f7ff fd51 	bl	8022b0c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 802306a:	683b      	ldr	r3, [r7, #0]
 802306c:	b29a      	uxth	r2, r3
 802306e:	2364      	movs	r3, #100	; 0x64
 8023070:	68f9      	ldr	r1, [r7, #12]
 8023072:	480c      	ldr	r0, [pc, #48]	; (80230a4 <W25qxx_WritePage+0x104>)
 8023074:	f7e3 fbf9 	bl	800686a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8023078:	2201      	movs	r2, #1
 802307a:	2108      	movs	r1, #8
 802307c:	4808      	ldr	r0, [pc, #32]	; (80230a0 <W25qxx_WritePage+0x100>)
 802307e:	f7e2 f9ff 	bl	8005480 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8023082:	f7ff fe21 	bl	8022cc8 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8023086:	2001      	movs	r0, #1
 8023088:	f7e5 fd8a 	bl	8008ba0 <osDelay>
	w25qxx.Lock = 0;
 802308c:	4b03      	ldr	r3, [pc, #12]	; (802309c <W25qxx_WritePage+0xfc>)
 802308e:	2200      	movs	r2, #0
 8023090:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8023094:	bf00      	nop
 8023096:	3710      	adds	r7, #16
 8023098:	46bd      	mov	sp, r7
 802309a:	bd80      	pop	{r7, pc}
 802309c:	200135e0 	.word	0x200135e0
 80230a0:	40021000 	.word	0x40021000
 80230a4:	20001984 	.word	0x20001984

080230a8 <W25qxx_WriteSector>:
//###################################################################################################################
uint8_t W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 80230a8:	b580      	push	{r7, lr}
 80230aa:	b088      	sub	sp, #32
 80230ac:	af00      	add	r7, sp, #0
 80230ae:	60f8      	str	r0, [r7, #12]
 80230b0:	60b9      	str	r1, [r7, #8]
 80230b2:	607a      	str	r2, [r7, #4]
 80230b4:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 80230b6:	4b2d      	ldr	r3, [pc, #180]	; (802316c <W25qxx_WriteSector+0xc4>)
 80230b8:	691b      	ldr	r3, [r3, #16]
 80230ba:	683a      	ldr	r2, [r7, #0]
 80230bc:	429a      	cmp	r2, r3
 80230be:	d802      	bhi.n	80230c6 <W25qxx_WriteSector+0x1e>
 80230c0:	683b      	ldr	r3, [r7, #0]
 80230c2:	2b00      	cmp	r3, #0
 80230c4:	d102      	bne.n	80230cc <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 80230c6:	4b29      	ldr	r3, [pc, #164]	; (802316c <W25qxx_WriteSector+0xc4>)
 80230c8:	691b      	ldr	r3, [r3, #16]
 80230ca:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80230cc:	4b27      	ldr	r3, [pc, #156]	; (802316c <W25qxx_WriteSector+0xc4>)
 80230ce:	691b      	ldr	r3, [r3, #16]
 80230d0:	687a      	ldr	r2, [r7, #4]
 80230d2:	429a      	cmp	r2, r3
 80230d4:	d301      	bcc.n	80230da <W25qxx_WriteSector+0x32>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
		W25qxx_Delay(100);
#endif
		return 0;
 80230d6:	2300      	movs	r3, #0
 80230d8:	e043      	b.n	8023162 <W25qxx_WriteSector+0xba>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80230da:	687a      	ldr	r2, [r7, #4]
 80230dc:	683b      	ldr	r3, [r7, #0]
 80230de:	441a      	add	r2, r3
 80230e0:	4b22      	ldr	r3, [pc, #136]	; (802316c <W25qxx_WriteSector+0xc4>)
 80230e2:	691b      	ldr	r3, [r3, #16]
 80230e4:	429a      	cmp	r2, r3
 80230e6:	d905      	bls.n	80230f4 <W25qxx_WriteSector+0x4c>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 80230e8:	4b20      	ldr	r3, [pc, #128]	; (802316c <W25qxx_WriteSector+0xc4>)
 80230ea:	691a      	ldr	r2, [r3, #16]
 80230ec:	687b      	ldr	r3, [r7, #4]
 80230ee:	1ad3      	subs	r3, r2, r3
 80230f0:	61bb      	str	r3, [r7, #24]
 80230f2:	e001      	b.n	80230f8 <W25qxx_WriteSector+0x50>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80230f4:	683b      	ldr	r3, [r7, #0]
 80230f6:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80230f8:	68b8      	ldr	r0, [r7, #8]
 80230fa:	f7ff ff3b 	bl	8022f74 <W25qxx_SectorToPage>
 80230fe:	4602      	mov	r2, r0
 8023100:	4b1a      	ldr	r3, [pc, #104]	; (802316c <W25qxx_WriteSector+0xc4>)
 8023102:	895b      	ldrh	r3, [r3, #10]
 8023104:	4619      	mov	r1, r3
 8023106:	687b      	ldr	r3, [r7, #4]
 8023108:	fbb3 f3f1 	udiv	r3, r3, r1
 802310c:	4413      	add	r3, r2
 802310e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8023110:	4b16      	ldr	r3, [pc, #88]	; (802316c <W25qxx_WriteSector+0xc4>)
 8023112:	895b      	ldrh	r3, [r3, #10]
 8023114:	461a      	mov	r2, r3
 8023116:	687b      	ldr	r3, [r7, #4]
 8023118:	fbb3 f1f2 	udiv	r1, r3, r2
 802311c:	fb01 f202 	mul.w	r2, r1, r2
 8023120:	1a9b      	subs	r3, r3, r2
 8023122:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8023124:	69bb      	ldr	r3, [r7, #24]
 8023126:	697a      	ldr	r2, [r7, #20]
 8023128:	69f9      	ldr	r1, [r7, #28]
 802312a:	68f8      	ldr	r0, [r7, #12]
 802312c:	f7ff ff38 	bl	8022fa0 <W25qxx_WritePage>
		StartPage++;
 8023130:	69fb      	ldr	r3, [r7, #28]
 8023132:	3301      	adds	r3, #1
 8023134:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8023136:	4b0d      	ldr	r3, [pc, #52]	; (802316c <W25qxx_WriteSector+0xc4>)
 8023138:	895b      	ldrh	r3, [r3, #10]
 802313a:	461a      	mov	r2, r3
 802313c:	697b      	ldr	r3, [r7, #20]
 802313e:	1a9a      	subs	r2, r3, r2
 8023140:	69bb      	ldr	r3, [r7, #24]
 8023142:	4413      	add	r3, r2
 8023144:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8023146:	4b09      	ldr	r3, [pc, #36]	; (802316c <W25qxx_WriteSector+0xc4>)
 8023148:	895b      	ldrh	r3, [r3, #10]
 802314a:	461a      	mov	r2, r3
 802314c:	697b      	ldr	r3, [r7, #20]
 802314e:	1ad3      	subs	r3, r2, r3
 8023150:	68fa      	ldr	r2, [r7, #12]
 8023152:	4413      	add	r3, r2
 8023154:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8023156:	2300      	movs	r3, #0
 8023158:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 802315a:	69bb      	ldr	r3, [r7, #24]
 802315c:	2b00      	cmp	r3, #0
 802315e:	dce1      	bgt.n	8023124 <W25qxx_WriteSector+0x7c>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif

	return 1;
 8023160:	2301      	movs	r3, #1

}
 8023162:	4618      	mov	r0, r3
 8023164:	3720      	adds	r7, #32
 8023166:	46bd      	mov	sp, r7
 8023168:	bd80      	pop	{r7, pc}
 802316a:	bf00      	nop
 802316c:	200135e0 	.word	0x200135e0

08023170 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8023170:	b580      	push	{r7, lr}
 8023172:	b084      	sub	sp, #16
 8023174:	af00      	add	r7, sp, #0
 8023176:	60f8      	str	r0, [r7, #12]
 8023178:	60b9      	str	r1, [r7, #8]
 802317a:	607a      	str	r2, [r7, #4]
 802317c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 802317e:	e002      	b.n	8023186 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8023180:	2001      	movs	r0, #1
 8023182:	f7e5 fd0d 	bl	8008ba0 <osDelay>
	while (w25qxx.Lock == 1)
 8023186:	4b36      	ldr	r3, [pc, #216]	; (8023260 <W25qxx_ReadPage+0xf0>)
 8023188:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 802318c:	2b01      	cmp	r3, #1
 802318e:	d0f7      	beq.n	8023180 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8023190:	4b33      	ldr	r3, [pc, #204]	; (8023260 <W25qxx_ReadPage+0xf0>)
 8023192:	2201      	movs	r2, #1
 8023194:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8023198:	4b31      	ldr	r3, [pc, #196]	; (8023260 <W25qxx_ReadPage+0xf0>)
 802319a:	895b      	ldrh	r3, [r3, #10]
 802319c:	461a      	mov	r2, r3
 802319e:	683b      	ldr	r3, [r7, #0]
 80231a0:	4293      	cmp	r3, r2
 80231a2:	d802      	bhi.n	80231aa <W25qxx_ReadPage+0x3a>
 80231a4:	683b      	ldr	r3, [r7, #0]
 80231a6:	2b00      	cmp	r3, #0
 80231a8:	d102      	bne.n	80231b0 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80231aa:	4b2d      	ldr	r3, [pc, #180]	; (8023260 <W25qxx_ReadPage+0xf0>)
 80231ac:	895b      	ldrh	r3, [r3, #10]
 80231ae:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80231b0:	687a      	ldr	r2, [r7, #4]
 80231b2:	683b      	ldr	r3, [r7, #0]
 80231b4:	4413      	add	r3, r2
 80231b6:	4a2a      	ldr	r2, [pc, #168]	; (8023260 <W25qxx_ReadPage+0xf0>)
 80231b8:	8952      	ldrh	r2, [r2, #10]
 80231ba:	4293      	cmp	r3, r2
 80231bc:	d905      	bls.n	80231ca <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80231be:	4b28      	ldr	r3, [pc, #160]	; (8023260 <W25qxx_ReadPage+0xf0>)
 80231c0:	895b      	ldrh	r3, [r3, #10]
 80231c2:	461a      	mov	r2, r3
 80231c4:	687b      	ldr	r3, [r7, #4]
 80231c6:	1ad3      	subs	r3, r2, r3
 80231c8:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG_1 == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	uint32_t StartTime = HAL_GetTick();

#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80231ca:	4b25      	ldr	r3, [pc, #148]	; (8023260 <W25qxx_ReadPage+0xf0>)
 80231cc:	895b      	ldrh	r3, [r3, #10]
 80231ce:	461a      	mov	r2, r3
 80231d0:	68bb      	ldr	r3, [r7, #8]
 80231d2:	fb02 f303 	mul.w	r3, r2, r3
 80231d6:	687a      	ldr	r2, [r7, #4]
 80231d8:	4413      	add	r3, r2
 80231da:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80231dc:	2200      	movs	r2, #0
 80231de:	2108      	movs	r1, #8
 80231e0:	4820      	ldr	r0, [pc, #128]	; (8023264 <W25qxx_ReadPage+0xf4>)
 80231e2:	f7e2 f94d 	bl	8005480 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80231e6:	4b1e      	ldr	r3, [pc, #120]	; (8023260 <W25qxx_ReadPage+0xf0>)
 80231e8:	781b      	ldrb	r3, [r3, #0]
 80231ea:	2b08      	cmp	r3, #8
 80231ec:	d909      	bls.n	8023202 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 80231ee:	200c      	movs	r0, #12
 80231f0:	f7ff fc8c 	bl	8022b0c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80231f4:	68bb      	ldr	r3, [r7, #8]
 80231f6:	0e1b      	lsrs	r3, r3, #24
 80231f8:	b2db      	uxtb	r3, r3
 80231fa:	4618      	mov	r0, r3
 80231fc:	f7ff fc86 	bl	8022b0c <W25qxx_Spi>
 8023200:	e002      	b.n	8023208 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8023202:	200b      	movs	r0, #11
 8023204:	f7ff fc82 	bl	8022b0c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8023208:	68bb      	ldr	r3, [r7, #8]
 802320a:	0c1b      	lsrs	r3, r3, #16
 802320c:	b2db      	uxtb	r3, r3
 802320e:	4618      	mov	r0, r3
 8023210:	f7ff fc7c 	bl	8022b0c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8023214:	68bb      	ldr	r3, [r7, #8]
 8023216:	0a1b      	lsrs	r3, r3, #8
 8023218:	b2db      	uxtb	r3, r3
 802321a:	4618      	mov	r0, r3
 802321c:	f7ff fc76 	bl	8022b0c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8023220:	68bb      	ldr	r3, [r7, #8]
 8023222:	b2db      	uxtb	r3, r3
 8023224:	4618      	mov	r0, r3
 8023226:	f7ff fc71 	bl	8022b0c <W25qxx_Spi>
	W25qxx_Spi(0);
 802322a:	2000      	movs	r0, #0
 802322c:	f7ff fc6e 	bl	8022b0c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8023230:	683b      	ldr	r3, [r7, #0]
 8023232:	b29a      	uxth	r2, r3
 8023234:	2364      	movs	r3, #100	; 0x64
 8023236:	68f9      	ldr	r1, [r7, #12]
 8023238:	480b      	ldr	r0, [pc, #44]	; (8023268 <W25qxx_ReadPage+0xf8>)
 802323a:	f7e3 fc59 	bl	8006af0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 802323e:	2201      	movs	r2, #1
 8023240:	2108      	movs	r1, #8
 8023242:	4808      	ldr	r0, [pc, #32]	; (8023264 <W25qxx_ReadPage+0xf4>)
 8023244:	f7e2 f91c 	bl	8005480 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8023248:	2001      	movs	r0, #1
 802324a:	f7e5 fca9 	bl	8008ba0 <osDelay>
	w25qxx.Lock = 0;
 802324e:	4b04      	ldr	r3, [pc, #16]	; (8023260 <W25qxx_ReadPage+0xf0>)
 8023250:	2200      	movs	r2, #0
 8023252:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8023256:	bf00      	nop
 8023258:	3710      	adds	r7, #16
 802325a:	46bd      	mov	sp, r7
 802325c:	bd80      	pop	{r7, pc}
 802325e:	bf00      	nop
 8023260:	200135e0 	.word	0x200135e0
 8023264:	40021000 	.word	0x40021000
 8023268:	20001984 	.word	0x20001984

0802326c <W25qxx_ReadSector>:
//###################################################################################################################
uint8_t W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 802326c:	b580      	push	{r7, lr}
 802326e:	b088      	sub	sp, #32
 8023270:	af00      	add	r7, sp, #0
 8023272:	60f8      	str	r0, [r7, #12]
 8023274:	60b9      	str	r1, [r7, #8]
 8023276:	607a      	str	r2, [r7, #4]
 8023278:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 802327a:	4b2d      	ldr	r3, [pc, #180]	; (8023330 <W25qxx_ReadSector+0xc4>)
 802327c:	691b      	ldr	r3, [r3, #16]
 802327e:	683a      	ldr	r2, [r7, #0]
 8023280:	429a      	cmp	r2, r3
 8023282:	d802      	bhi.n	802328a <W25qxx_ReadSector+0x1e>
 8023284:	683b      	ldr	r3, [r7, #0]
 8023286:	2b00      	cmp	r3, #0
 8023288:	d102      	bne.n	8023290 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 802328a:	4b29      	ldr	r3, [pc, #164]	; (8023330 <W25qxx_ReadSector+0xc4>)
 802328c:	691b      	ldr	r3, [r3, #16]
 802328e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8023290:	4b27      	ldr	r3, [pc, #156]	; (8023330 <W25qxx_ReadSector+0xc4>)
 8023292:	691b      	ldr	r3, [r3, #16]
 8023294:	687a      	ldr	r2, [r7, #4]
 8023296:	429a      	cmp	r2, r3
 8023298:	d301      	bcc.n	802329e <W25qxx_ReadSector+0x32>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
		W25qxx_Delay(100);
#endif
		return 0;
 802329a:	2300      	movs	r3, #0
 802329c:	e043      	b.n	8023326 <W25qxx_ReadSector+0xba>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 802329e:	687a      	ldr	r2, [r7, #4]
 80232a0:	683b      	ldr	r3, [r7, #0]
 80232a2:	441a      	add	r2, r3
 80232a4:	4b22      	ldr	r3, [pc, #136]	; (8023330 <W25qxx_ReadSector+0xc4>)
 80232a6:	691b      	ldr	r3, [r3, #16]
 80232a8:	429a      	cmp	r2, r3
 80232aa:	d905      	bls.n	80232b8 <W25qxx_ReadSector+0x4c>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80232ac:	4b20      	ldr	r3, [pc, #128]	; (8023330 <W25qxx_ReadSector+0xc4>)
 80232ae:	691a      	ldr	r2, [r3, #16]
 80232b0:	687b      	ldr	r3, [r7, #4]
 80232b2:	1ad3      	subs	r3, r2, r3
 80232b4:	61bb      	str	r3, [r7, #24]
 80232b6:	e001      	b.n	80232bc <W25qxx_ReadSector+0x50>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80232b8:	683b      	ldr	r3, [r7, #0]
 80232ba:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80232bc:	68b8      	ldr	r0, [r7, #8]
 80232be:	f7ff fe59 	bl	8022f74 <W25qxx_SectorToPage>
 80232c2:	4602      	mov	r2, r0
 80232c4:	4b1a      	ldr	r3, [pc, #104]	; (8023330 <W25qxx_ReadSector+0xc4>)
 80232c6:	895b      	ldrh	r3, [r3, #10]
 80232c8:	4619      	mov	r1, r3
 80232ca:	687b      	ldr	r3, [r7, #4]
 80232cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80232d0:	4413      	add	r3, r2
 80232d2:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80232d4:	4b16      	ldr	r3, [pc, #88]	; (8023330 <W25qxx_ReadSector+0xc4>)
 80232d6:	895b      	ldrh	r3, [r3, #10]
 80232d8:	461a      	mov	r2, r3
 80232da:	687b      	ldr	r3, [r7, #4]
 80232dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80232e0:	fb01 f202 	mul.w	r2, r1, r2
 80232e4:	1a9b      	subs	r3, r3, r2
 80232e6:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 80232e8:	69bb      	ldr	r3, [r7, #24]
 80232ea:	697a      	ldr	r2, [r7, #20]
 80232ec:	69f9      	ldr	r1, [r7, #28]
 80232ee:	68f8      	ldr	r0, [r7, #12]
 80232f0:	f7ff ff3e 	bl	8023170 <W25qxx_ReadPage>
		StartPage++;
 80232f4:	69fb      	ldr	r3, [r7, #28]
 80232f6:	3301      	adds	r3, #1
 80232f8:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 80232fa:	4b0d      	ldr	r3, [pc, #52]	; (8023330 <W25qxx_ReadSector+0xc4>)
 80232fc:	895b      	ldrh	r3, [r3, #10]
 80232fe:	461a      	mov	r2, r3
 8023300:	697b      	ldr	r3, [r7, #20]
 8023302:	1a9a      	subs	r2, r3, r2
 8023304:	69bb      	ldr	r3, [r7, #24]
 8023306:	4413      	add	r3, r2
 8023308:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 802330a:	4b09      	ldr	r3, [pc, #36]	; (8023330 <W25qxx_ReadSector+0xc4>)
 802330c:	895b      	ldrh	r3, [r3, #10]
 802330e:	461a      	mov	r2, r3
 8023310:	697b      	ldr	r3, [r7, #20]
 8023312:	1ad3      	subs	r3, r2, r3
 8023314:	68fa      	ldr	r2, [r7, #12]
 8023316:	4413      	add	r3, r2
 8023318:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 802331a:	2300      	movs	r3, #0
 802331c:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 802331e:	69bb      	ldr	r3, [r7, #24]
 8023320:	2b00      	cmp	r3, #0
 8023322:	dce1      	bgt.n	80232e8 <W25qxx_ReadSector+0x7c>
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif


	return 1;
 8023324:	2301      	movs	r3, #1
}
 8023326:	4618      	mov	r0, r3
 8023328:	3720      	adds	r7, #32
 802332a:	46bd      	mov	sp, r7
 802332c:	bd80      	pop	{r7, pc}
 802332e:	bf00      	nop
 8023330:	200135e0 	.word	0x200135e0

08023334 <__assert_func>:
 8023334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023336:	4614      	mov	r4, r2
 8023338:	461a      	mov	r2, r3
 802333a:	4b09      	ldr	r3, [pc, #36]	; (8023360 <__assert_func+0x2c>)
 802333c:	681b      	ldr	r3, [r3, #0]
 802333e:	4605      	mov	r5, r0
 8023340:	68d8      	ldr	r0, [r3, #12]
 8023342:	b14c      	cbz	r4, 8023358 <__assert_func+0x24>
 8023344:	4b07      	ldr	r3, [pc, #28]	; (8023364 <__assert_func+0x30>)
 8023346:	9100      	str	r1, [sp, #0]
 8023348:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802334c:	4906      	ldr	r1, [pc, #24]	; (8023368 <__assert_func+0x34>)
 802334e:	462b      	mov	r3, r5
 8023350:	f000 fe12 	bl	8023f78 <fiprintf>
 8023354:	f001 f937 	bl	80245c6 <abort>
 8023358:	4b04      	ldr	r3, [pc, #16]	; (802336c <__assert_func+0x38>)
 802335a:	461c      	mov	r4, r3
 802335c:	e7f3      	b.n	8023346 <__assert_func+0x12>
 802335e:	bf00      	nop
 8023360:	20000098 	.word	0x20000098
 8023364:	0802b580 	.word	0x0802b580
 8023368:	0802b58d 	.word	0x0802b58d
 802336c:	0802b5bb 	.word	0x0802b5bb

08023370 <malloc>:
 8023370:	4b02      	ldr	r3, [pc, #8]	; (802337c <malloc+0xc>)
 8023372:	4601      	mov	r1, r0
 8023374:	6818      	ldr	r0, [r3, #0]
 8023376:	f000 b82b 	b.w	80233d0 <_malloc_r>
 802337a:	bf00      	nop
 802337c:	20000098 	.word	0x20000098

08023380 <free>:
 8023380:	4b02      	ldr	r3, [pc, #8]	; (802338c <free+0xc>)
 8023382:	4601      	mov	r1, r0
 8023384:	6818      	ldr	r0, [r3, #0]
 8023386:	f001 bfa1 	b.w	80252cc <_free_r>
 802338a:	bf00      	nop
 802338c:	20000098 	.word	0x20000098

08023390 <sbrk_aligned>:
 8023390:	b570      	push	{r4, r5, r6, lr}
 8023392:	4e0e      	ldr	r6, [pc, #56]	; (80233cc <sbrk_aligned+0x3c>)
 8023394:	460c      	mov	r4, r1
 8023396:	6831      	ldr	r1, [r6, #0]
 8023398:	4605      	mov	r5, r0
 802339a:	b911      	cbnz	r1, 80233a2 <sbrk_aligned+0x12>
 802339c:	f001 f8b4 	bl	8024508 <_sbrk_r>
 80233a0:	6030      	str	r0, [r6, #0]
 80233a2:	4621      	mov	r1, r4
 80233a4:	4628      	mov	r0, r5
 80233a6:	f001 f8af 	bl	8024508 <_sbrk_r>
 80233aa:	1c43      	adds	r3, r0, #1
 80233ac:	d00a      	beq.n	80233c4 <sbrk_aligned+0x34>
 80233ae:	1cc4      	adds	r4, r0, #3
 80233b0:	f024 0403 	bic.w	r4, r4, #3
 80233b4:	42a0      	cmp	r0, r4
 80233b6:	d007      	beq.n	80233c8 <sbrk_aligned+0x38>
 80233b8:	1a21      	subs	r1, r4, r0
 80233ba:	4628      	mov	r0, r5
 80233bc:	f001 f8a4 	bl	8024508 <_sbrk_r>
 80233c0:	3001      	adds	r0, #1
 80233c2:	d101      	bne.n	80233c8 <sbrk_aligned+0x38>
 80233c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80233c8:	4620      	mov	r0, r4
 80233ca:	bd70      	pop	{r4, r5, r6, pc}
 80233cc:	2001360c 	.word	0x2001360c

080233d0 <_malloc_r>:
 80233d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80233d4:	1ccd      	adds	r5, r1, #3
 80233d6:	f025 0503 	bic.w	r5, r5, #3
 80233da:	3508      	adds	r5, #8
 80233dc:	2d0c      	cmp	r5, #12
 80233de:	bf38      	it	cc
 80233e0:	250c      	movcc	r5, #12
 80233e2:	2d00      	cmp	r5, #0
 80233e4:	4607      	mov	r7, r0
 80233e6:	db01      	blt.n	80233ec <_malloc_r+0x1c>
 80233e8:	42a9      	cmp	r1, r5
 80233ea:	d905      	bls.n	80233f8 <_malloc_r+0x28>
 80233ec:	230c      	movs	r3, #12
 80233ee:	603b      	str	r3, [r7, #0]
 80233f0:	2600      	movs	r6, #0
 80233f2:	4630      	mov	r0, r6
 80233f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80233f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80234cc <_malloc_r+0xfc>
 80233fc:	f000 f868 	bl	80234d0 <__malloc_lock>
 8023400:	f8d8 3000 	ldr.w	r3, [r8]
 8023404:	461c      	mov	r4, r3
 8023406:	bb5c      	cbnz	r4, 8023460 <_malloc_r+0x90>
 8023408:	4629      	mov	r1, r5
 802340a:	4638      	mov	r0, r7
 802340c:	f7ff ffc0 	bl	8023390 <sbrk_aligned>
 8023410:	1c43      	adds	r3, r0, #1
 8023412:	4604      	mov	r4, r0
 8023414:	d155      	bne.n	80234c2 <_malloc_r+0xf2>
 8023416:	f8d8 4000 	ldr.w	r4, [r8]
 802341a:	4626      	mov	r6, r4
 802341c:	2e00      	cmp	r6, #0
 802341e:	d145      	bne.n	80234ac <_malloc_r+0xdc>
 8023420:	2c00      	cmp	r4, #0
 8023422:	d048      	beq.n	80234b6 <_malloc_r+0xe6>
 8023424:	6823      	ldr	r3, [r4, #0]
 8023426:	4631      	mov	r1, r6
 8023428:	4638      	mov	r0, r7
 802342a:	eb04 0903 	add.w	r9, r4, r3
 802342e:	f001 f86b 	bl	8024508 <_sbrk_r>
 8023432:	4581      	cmp	r9, r0
 8023434:	d13f      	bne.n	80234b6 <_malloc_r+0xe6>
 8023436:	6821      	ldr	r1, [r4, #0]
 8023438:	1a6d      	subs	r5, r5, r1
 802343a:	4629      	mov	r1, r5
 802343c:	4638      	mov	r0, r7
 802343e:	f7ff ffa7 	bl	8023390 <sbrk_aligned>
 8023442:	3001      	adds	r0, #1
 8023444:	d037      	beq.n	80234b6 <_malloc_r+0xe6>
 8023446:	6823      	ldr	r3, [r4, #0]
 8023448:	442b      	add	r3, r5
 802344a:	6023      	str	r3, [r4, #0]
 802344c:	f8d8 3000 	ldr.w	r3, [r8]
 8023450:	2b00      	cmp	r3, #0
 8023452:	d038      	beq.n	80234c6 <_malloc_r+0xf6>
 8023454:	685a      	ldr	r2, [r3, #4]
 8023456:	42a2      	cmp	r2, r4
 8023458:	d12b      	bne.n	80234b2 <_malloc_r+0xe2>
 802345a:	2200      	movs	r2, #0
 802345c:	605a      	str	r2, [r3, #4]
 802345e:	e00f      	b.n	8023480 <_malloc_r+0xb0>
 8023460:	6822      	ldr	r2, [r4, #0]
 8023462:	1b52      	subs	r2, r2, r5
 8023464:	d41f      	bmi.n	80234a6 <_malloc_r+0xd6>
 8023466:	2a0b      	cmp	r2, #11
 8023468:	d917      	bls.n	802349a <_malloc_r+0xca>
 802346a:	1961      	adds	r1, r4, r5
 802346c:	42a3      	cmp	r3, r4
 802346e:	6025      	str	r5, [r4, #0]
 8023470:	bf18      	it	ne
 8023472:	6059      	strne	r1, [r3, #4]
 8023474:	6863      	ldr	r3, [r4, #4]
 8023476:	bf08      	it	eq
 8023478:	f8c8 1000 	streq.w	r1, [r8]
 802347c:	5162      	str	r2, [r4, r5]
 802347e:	604b      	str	r3, [r1, #4]
 8023480:	4638      	mov	r0, r7
 8023482:	f104 060b 	add.w	r6, r4, #11
 8023486:	f000 f829 	bl	80234dc <__malloc_unlock>
 802348a:	f026 0607 	bic.w	r6, r6, #7
 802348e:	1d23      	adds	r3, r4, #4
 8023490:	1af2      	subs	r2, r6, r3
 8023492:	d0ae      	beq.n	80233f2 <_malloc_r+0x22>
 8023494:	1b9b      	subs	r3, r3, r6
 8023496:	50a3      	str	r3, [r4, r2]
 8023498:	e7ab      	b.n	80233f2 <_malloc_r+0x22>
 802349a:	42a3      	cmp	r3, r4
 802349c:	6862      	ldr	r2, [r4, #4]
 802349e:	d1dd      	bne.n	802345c <_malloc_r+0x8c>
 80234a0:	f8c8 2000 	str.w	r2, [r8]
 80234a4:	e7ec      	b.n	8023480 <_malloc_r+0xb0>
 80234a6:	4623      	mov	r3, r4
 80234a8:	6864      	ldr	r4, [r4, #4]
 80234aa:	e7ac      	b.n	8023406 <_malloc_r+0x36>
 80234ac:	4634      	mov	r4, r6
 80234ae:	6876      	ldr	r6, [r6, #4]
 80234b0:	e7b4      	b.n	802341c <_malloc_r+0x4c>
 80234b2:	4613      	mov	r3, r2
 80234b4:	e7cc      	b.n	8023450 <_malloc_r+0x80>
 80234b6:	230c      	movs	r3, #12
 80234b8:	603b      	str	r3, [r7, #0]
 80234ba:	4638      	mov	r0, r7
 80234bc:	f000 f80e 	bl	80234dc <__malloc_unlock>
 80234c0:	e797      	b.n	80233f2 <_malloc_r+0x22>
 80234c2:	6025      	str	r5, [r4, #0]
 80234c4:	e7dc      	b.n	8023480 <_malloc_r+0xb0>
 80234c6:	605b      	str	r3, [r3, #4]
 80234c8:	deff      	udf	#255	; 0xff
 80234ca:	bf00      	nop
 80234cc:	20013608 	.word	0x20013608

080234d0 <__malloc_lock>:
 80234d0:	4801      	ldr	r0, [pc, #4]	; (80234d8 <__malloc_lock+0x8>)
 80234d2:	f001 b860 	b.w	8024596 <__retarget_lock_acquire_recursive>
 80234d6:	bf00      	nop
 80234d8:	20013750 	.word	0x20013750

080234dc <__malloc_unlock>:
 80234dc:	4801      	ldr	r0, [pc, #4]	; (80234e4 <__malloc_unlock+0x8>)
 80234de:	f001 b85b 	b.w	8024598 <__retarget_lock_release_recursive>
 80234e2:	bf00      	nop
 80234e4:	20013750 	.word	0x20013750

080234e8 <rand>:
 80234e8:	4b16      	ldr	r3, [pc, #88]	; (8023544 <rand+0x5c>)
 80234ea:	b510      	push	{r4, lr}
 80234ec:	681c      	ldr	r4, [r3, #0]
 80234ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80234f0:	b9b3      	cbnz	r3, 8023520 <rand+0x38>
 80234f2:	2018      	movs	r0, #24
 80234f4:	f7ff ff3c 	bl	8023370 <malloc>
 80234f8:	4602      	mov	r2, r0
 80234fa:	6320      	str	r0, [r4, #48]	; 0x30
 80234fc:	b920      	cbnz	r0, 8023508 <rand+0x20>
 80234fe:	4b12      	ldr	r3, [pc, #72]	; (8023548 <rand+0x60>)
 8023500:	4812      	ldr	r0, [pc, #72]	; (802354c <rand+0x64>)
 8023502:	2152      	movs	r1, #82	; 0x52
 8023504:	f7ff ff16 	bl	8023334 <__assert_func>
 8023508:	4911      	ldr	r1, [pc, #68]	; (8023550 <rand+0x68>)
 802350a:	4b12      	ldr	r3, [pc, #72]	; (8023554 <rand+0x6c>)
 802350c:	e9c0 1300 	strd	r1, r3, [r0]
 8023510:	4b11      	ldr	r3, [pc, #68]	; (8023558 <rand+0x70>)
 8023512:	6083      	str	r3, [r0, #8]
 8023514:	230b      	movs	r3, #11
 8023516:	8183      	strh	r3, [r0, #12]
 8023518:	2100      	movs	r1, #0
 802351a:	2001      	movs	r0, #1
 802351c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8023520:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8023522:	480e      	ldr	r0, [pc, #56]	; (802355c <rand+0x74>)
 8023524:	690b      	ldr	r3, [r1, #16]
 8023526:	694c      	ldr	r4, [r1, #20]
 8023528:	4a0d      	ldr	r2, [pc, #52]	; (8023560 <rand+0x78>)
 802352a:	4358      	muls	r0, r3
 802352c:	fb02 0004 	mla	r0, r2, r4, r0
 8023530:	fba3 3202 	umull	r3, r2, r3, r2
 8023534:	3301      	adds	r3, #1
 8023536:	eb40 0002 	adc.w	r0, r0, r2
 802353a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 802353e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8023542:	bd10      	pop	{r4, pc}
 8023544:	20000098 	.word	0x20000098
 8023548:	0802b5bc 	.word	0x0802b5bc
 802354c:	0802b5d3 	.word	0x0802b5d3
 8023550:	abcd330e 	.word	0xabcd330e
 8023554:	e66d1234 	.word	0xe66d1234
 8023558:	0005deec 	.word	0x0005deec
 802355c:	5851f42d 	.word	0x5851f42d
 8023560:	4c957f2d 	.word	0x4c957f2d

08023564 <__cvt>:
 8023564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023568:	ec55 4b10 	vmov	r4, r5, d0
 802356c:	2d00      	cmp	r5, #0
 802356e:	460e      	mov	r6, r1
 8023570:	4619      	mov	r1, r3
 8023572:	462b      	mov	r3, r5
 8023574:	bfbb      	ittet	lt
 8023576:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 802357a:	461d      	movlt	r5, r3
 802357c:	2300      	movge	r3, #0
 802357e:	232d      	movlt	r3, #45	; 0x2d
 8023580:	700b      	strb	r3, [r1, #0]
 8023582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023584:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8023588:	4691      	mov	r9, r2
 802358a:	f023 0820 	bic.w	r8, r3, #32
 802358e:	bfbc      	itt	lt
 8023590:	4622      	movlt	r2, r4
 8023592:	4614      	movlt	r4, r2
 8023594:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8023598:	d005      	beq.n	80235a6 <__cvt+0x42>
 802359a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 802359e:	d100      	bne.n	80235a2 <__cvt+0x3e>
 80235a0:	3601      	adds	r6, #1
 80235a2:	2102      	movs	r1, #2
 80235a4:	e000      	b.n	80235a8 <__cvt+0x44>
 80235a6:	2103      	movs	r1, #3
 80235a8:	ab03      	add	r3, sp, #12
 80235aa:	9301      	str	r3, [sp, #4]
 80235ac:	ab02      	add	r3, sp, #8
 80235ae:	9300      	str	r3, [sp, #0]
 80235b0:	ec45 4b10 	vmov	d0, r4, r5
 80235b4:	4653      	mov	r3, sl
 80235b6:	4632      	mov	r2, r6
 80235b8:	f001 f896 	bl	80246e8 <_dtoa_r>
 80235bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80235c0:	4607      	mov	r7, r0
 80235c2:	d102      	bne.n	80235ca <__cvt+0x66>
 80235c4:	f019 0f01 	tst.w	r9, #1
 80235c8:	d022      	beq.n	8023610 <__cvt+0xac>
 80235ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80235ce:	eb07 0906 	add.w	r9, r7, r6
 80235d2:	d110      	bne.n	80235f6 <__cvt+0x92>
 80235d4:	783b      	ldrb	r3, [r7, #0]
 80235d6:	2b30      	cmp	r3, #48	; 0x30
 80235d8:	d10a      	bne.n	80235f0 <__cvt+0x8c>
 80235da:	2200      	movs	r2, #0
 80235dc:	2300      	movs	r3, #0
 80235de:	4620      	mov	r0, r4
 80235e0:	4629      	mov	r1, r5
 80235e2:	f7dd fa81 	bl	8000ae8 <__aeabi_dcmpeq>
 80235e6:	b918      	cbnz	r0, 80235f0 <__cvt+0x8c>
 80235e8:	f1c6 0601 	rsb	r6, r6, #1
 80235ec:	f8ca 6000 	str.w	r6, [sl]
 80235f0:	f8da 3000 	ldr.w	r3, [sl]
 80235f4:	4499      	add	r9, r3
 80235f6:	2200      	movs	r2, #0
 80235f8:	2300      	movs	r3, #0
 80235fa:	4620      	mov	r0, r4
 80235fc:	4629      	mov	r1, r5
 80235fe:	f7dd fa73 	bl	8000ae8 <__aeabi_dcmpeq>
 8023602:	b108      	cbz	r0, 8023608 <__cvt+0xa4>
 8023604:	f8cd 900c 	str.w	r9, [sp, #12]
 8023608:	2230      	movs	r2, #48	; 0x30
 802360a:	9b03      	ldr	r3, [sp, #12]
 802360c:	454b      	cmp	r3, r9
 802360e:	d307      	bcc.n	8023620 <__cvt+0xbc>
 8023610:	9b03      	ldr	r3, [sp, #12]
 8023612:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023614:	1bdb      	subs	r3, r3, r7
 8023616:	4638      	mov	r0, r7
 8023618:	6013      	str	r3, [r2, #0]
 802361a:	b004      	add	sp, #16
 802361c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023620:	1c59      	adds	r1, r3, #1
 8023622:	9103      	str	r1, [sp, #12]
 8023624:	701a      	strb	r2, [r3, #0]
 8023626:	e7f0      	b.n	802360a <__cvt+0xa6>

08023628 <__exponent>:
 8023628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802362a:	4603      	mov	r3, r0
 802362c:	2900      	cmp	r1, #0
 802362e:	bfb8      	it	lt
 8023630:	4249      	neglt	r1, r1
 8023632:	f803 2b02 	strb.w	r2, [r3], #2
 8023636:	bfb4      	ite	lt
 8023638:	222d      	movlt	r2, #45	; 0x2d
 802363a:	222b      	movge	r2, #43	; 0x2b
 802363c:	2909      	cmp	r1, #9
 802363e:	7042      	strb	r2, [r0, #1]
 8023640:	dd2a      	ble.n	8023698 <__exponent+0x70>
 8023642:	f10d 0207 	add.w	r2, sp, #7
 8023646:	4617      	mov	r7, r2
 8023648:	260a      	movs	r6, #10
 802364a:	4694      	mov	ip, r2
 802364c:	fb91 f5f6 	sdiv	r5, r1, r6
 8023650:	fb06 1415 	mls	r4, r6, r5, r1
 8023654:	3430      	adds	r4, #48	; 0x30
 8023656:	f80c 4c01 	strb.w	r4, [ip, #-1]
 802365a:	460c      	mov	r4, r1
 802365c:	2c63      	cmp	r4, #99	; 0x63
 802365e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8023662:	4629      	mov	r1, r5
 8023664:	dcf1      	bgt.n	802364a <__exponent+0x22>
 8023666:	3130      	adds	r1, #48	; 0x30
 8023668:	f1ac 0402 	sub.w	r4, ip, #2
 802366c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8023670:	1c41      	adds	r1, r0, #1
 8023672:	4622      	mov	r2, r4
 8023674:	42ba      	cmp	r2, r7
 8023676:	d30a      	bcc.n	802368e <__exponent+0x66>
 8023678:	f10d 0209 	add.w	r2, sp, #9
 802367c:	eba2 020c 	sub.w	r2, r2, ip
 8023680:	42bc      	cmp	r4, r7
 8023682:	bf88      	it	hi
 8023684:	2200      	movhi	r2, #0
 8023686:	4413      	add	r3, r2
 8023688:	1a18      	subs	r0, r3, r0
 802368a:	b003      	add	sp, #12
 802368c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802368e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8023692:	f801 5f01 	strb.w	r5, [r1, #1]!
 8023696:	e7ed      	b.n	8023674 <__exponent+0x4c>
 8023698:	2330      	movs	r3, #48	; 0x30
 802369a:	3130      	adds	r1, #48	; 0x30
 802369c:	7083      	strb	r3, [r0, #2]
 802369e:	70c1      	strb	r1, [r0, #3]
 80236a0:	1d03      	adds	r3, r0, #4
 80236a2:	e7f1      	b.n	8023688 <__exponent+0x60>

080236a4 <_printf_float>:
 80236a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236a8:	ed2d 8b02 	vpush	{d8}
 80236ac:	b08d      	sub	sp, #52	; 0x34
 80236ae:	460c      	mov	r4, r1
 80236b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80236b4:	4616      	mov	r6, r2
 80236b6:	461f      	mov	r7, r3
 80236b8:	4605      	mov	r5, r0
 80236ba:	f000 fe97 	bl	80243ec <_localeconv_r>
 80236be:	f8d0 a000 	ldr.w	sl, [r0]
 80236c2:	4650      	mov	r0, sl
 80236c4:	f7dc fde4 	bl	8000290 <strlen>
 80236c8:	2300      	movs	r3, #0
 80236ca:	930a      	str	r3, [sp, #40]	; 0x28
 80236cc:	6823      	ldr	r3, [r4, #0]
 80236ce:	9305      	str	r3, [sp, #20]
 80236d0:	f8d8 3000 	ldr.w	r3, [r8]
 80236d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80236d8:	3307      	adds	r3, #7
 80236da:	f023 0307 	bic.w	r3, r3, #7
 80236de:	f103 0208 	add.w	r2, r3, #8
 80236e2:	f8c8 2000 	str.w	r2, [r8]
 80236e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80236ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80236ee:	9307      	str	r3, [sp, #28]
 80236f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80236f4:	ee08 0a10 	vmov	s16, r0
 80236f8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80236fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023700:	4b9e      	ldr	r3, [pc, #632]	; (802397c <_printf_float+0x2d8>)
 8023702:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023706:	f7dd fa21 	bl	8000b4c <__aeabi_dcmpun>
 802370a:	bb88      	cbnz	r0, 8023770 <_printf_float+0xcc>
 802370c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023710:	4b9a      	ldr	r3, [pc, #616]	; (802397c <_printf_float+0x2d8>)
 8023712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023716:	f7dd f9fb 	bl	8000b10 <__aeabi_dcmple>
 802371a:	bb48      	cbnz	r0, 8023770 <_printf_float+0xcc>
 802371c:	2200      	movs	r2, #0
 802371e:	2300      	movs	r3, #0
 8023720:	4640      	mov	r0, r8
 8023722:	4649      	mov	r1, r9
 8023724:	f7dd f9ea 	bl	8000afc <__aeabi_dcmplt>
 8023728:	b110      	cbz	r0, 8023730 <_printf_float+0x8c>
 802372a:	232d      	movs	r3, #45	; 0x2d
 802372c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023730:	4a93      	ldr	r2, [pc, #588]	; (8023980 <_printf_float+0x2dc>)
 8023732:	4b94      	ldr	r3, [pc, #592]	; (8023984 <_printf_float+0x2e0>)
 8023734:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8023738:	bf94      	ite	ls
 802373a:	4690      	movls	r8, r2
 802373c:	4698      	movhi	r8, r3
 802373e:	2303      	movs	r3, #3
 8023740:	6123      	str	r3, [r4, #16]
 8023742:	9b05      	ldr	r3, [sp, #20]
 8023744:	f023 0304 	bic.w	r3, r3, #4
 8023748:	6023      	str	r3, [r4, #0]
 802374a:	f04f 0900 	mov.w	r9, #0
 802374e:	9700      	str	r7, [sp, #0]
 8023750:	4633      	mov	r3, r6
 8023752:	aa0b      	add	r2, sp, #44	; 0x2c
 8023754:	4621      	mov	r1, r4
 8023756:	4628      	mov	r0, r5
 8023758:	f000 f9da 	bl	8023b10 <_printf_common>
 802375c:	3001      	adds	r0, #1
 802375e:	f040 8090 	bne.w	8023882 <_printf_float+0x1de>
 8023762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023766:	b00d      	add	sp, #52	; 0x34
 8023768:	ecbd 8b02 	vpop	{d8}
 802376c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023770:	4642      	mov	r2, r8
 8023772:	464b      	mov	r3, r9
 8023774:	4640      	mov	r0, r8
 8023776:	4649      	mov	r1, r9
 8023778:	f7dd f9e8 	bl	8000b4c <__aeabi_dcmpun>
 802377c:	b140      	cbz	r0, 8023790 <_printf_float+0xec>
 802377e:	464b      	mov	r3, r9
 8023780:	2b00      	cmp	r3, #0
 8023782:	bfbc      	itt	lt
 8023784:	232d      	movlt	r3, #45	; 0x2d
 8023786:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802378a:	4a7f      	ldr	r2, [pc, #508]	; (8023988 <_printf_float+0x2e4>)
 802378c:	4b7f      	ldr	r3, [pc, #508]	; (802398c <_printf_float+0x2e8>)
 802378e:	e7d1      	b.n	8023734 <_printf_float+0x90>
 8023790:	6863      	ldr	r3, [r4, #4]
 8023792:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8023796:	9206      	str	r2, [sp, #24]
 8023798:	1c5a      	adds	r2, r3, #1
 802379a:	d13f      	bne.n	802381c <_printf_float+0x178>
 802379c:	2306      	movs	r3, #6
 802379e:	6063      	str	r3, [r4, #4]
 80237a0:	9b05      	ldr	r3, [sp, #20]
 80237a2:	6861      	ldr	r1, [r4, #4]
 80237a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80237a8:	2300      	movs	r3, #0
 80237aa:	9303      	str	r3, [sp, #12]
 80237ac:	ab0a      	add	r3, sp, #40	; 0x28
 80237ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80237b2:	ab09      	add	r3, sp, #36	; 0x24
 80237b4:	ec49 8b10 	vmov	d0, r8, r9
 80237b8:	9300      	str	r3, [sp, #0]
 80237ba:	6022      	str	r2, [r4, #0]
 80237bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80237c0:	4628      	mov	r0, r5
 80237c2:	f7ff fecf 	bl	8023564 <__cvt>
 80237c6:	9b06      	ldr	r3, [sp, #24]
 80237c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80237ca:	2b47      	cmp	r3, #71	; 0x47
 80237cc:	4680      	mov	r8, r0
 80237ce:	d108      	bne.n	80237e2 <_printf_float+0x13e>
 80237d0:	1cc8      	adds	r0, r1, #3
 80237d2:	db02      	blt.n	80237da <_printf_float+0x136>
 80237d4:	6863      	ldr	r3, [r4, #4]
 80237d6:	4299      	cmp	r1, r3
 80237d8:	dd41      	ble.n	802385e <_printf_float+0x1ba>
 80237da:	f1ab 0302 	sub.w	r3, fp, #2
 80237de:	fa5f fb83 	uxtb.w	fp, r3
 80237e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80237e6:	d820      	bhi.n	802382a <_printf_float+0x186>
 80237e8:	3901      	subs	r1, #1
 80237ea:	465a      	mov	r2, fp
 80237ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80237f0:	9109      	str	r1, [sp, #36]	; 0x24
 80237f2:	f7ff ff19 	bl	8023628 <__exponent>
 80237f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80237f8:	1813      	adds	r3, r2, r0
 80237fa:	2a01      	cmp	r2, #1
 80237fc:	4681      	mov	r9, r0
 80237fe:	6123      	str	r3, [r4, #16]
 8023800:	dc02      	bgt.n	8023808 <_printf_float+0x164>
 8023802:	6822      	ldr	r2, [r4, #0]
 8023804:	07d2      	lsls	r2, r2, #31
 8023806:	d501      	bpl.n	802380c <_printf_float+0x168>
 8023808:	3301      	adds	r3, #1
 802380a:	6123      	str	r3, [r4, #16]
 802380c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8023810:	2b00      	cmp	r3, #0
 8023812:	d09c      	beq.n	802374e <_printf_float+0xaa>
 8023814:	232d      	movs	r3, #45	; 0x2d
 8023816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802381a:	e798      	b.n	802374e <_printf_float+0xaa>
 802381c:	9a06      	ldr	r2, [sp, #24]
 802381e:	2a47      	cmp	r2, #71	; 0x47
 8023820:	d1be      	bne.n	80237a0 <_printf_float+0xfc>
 8023822:	2b00      	cmp	r3, #0
 8023824:	d1bc      	bne.n	80237a0 <_printf_float+0xfc>
 8023826:	2301      	movs	r3, #1
 8023828:	e7b9      	b.n	802379e <_printf_float+0xfa>
 802382a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 802382e:	d118      	bne.n	8023862 <_printf_float+0x1be>
 8023830:	2900      	cmp	r1, #0
 8023832:	6863      	ldr	r3, [r4, #4]
 8023834:	dd0b      	ble.n	802384e <_printf_float+0x1aa>
 8023836:	6121      	str	r1, [r4, #16]
 8023838:	b913      	cbnz	r3, 8023840 <_printf_float+0x19c>
 802383a:	6822      	ldr	r2, [r4, #0]
 802383c:	07d0      	lsls	r0, r2, #31
 802383e:	d502      	bpl.n	8023846 <_printf_float+0x1a2>
 8023840:	3301      	adds	r3, #1
 8023842:	440b      	add	r3, r1
 8023844:	6123      	str	r3, [r4, #16]
 8023846:	65a1      	str	r1, [r4, #88]	; 0x58
 8023848:	f04f 0900 	mov.w	r9, #0
 802384c:	e7de      	b.n	802380c <_printf_float+0x168>
 802384e:	b913      	cbnz	r3, 8023856 <_printf_float+0x1b2>
 8023850:	6822      	ldr	r2, [r4, #0]
 8023852:	07d2      	lsls	r2, r2, #31
 8023854:	d501      	bpl.n	802385a <_printf_float+0x1b6>
 8023856:	3302      	adds	r3, #2
 8023858:	e7f4      	b.n	8023844 <_printf_float+0x1a0>
 802385a:	2301      	movs	r3, #1
 802385c:	e7f2      	b.n	8023844 <_printf_float+0x1a0>
 802385e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8023862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023864:	4299      	cmp	r1, r3
 8023866:	db05      	blt.n	8023874 <_printf_float+0x1d0>
 8023868:	6823      	ldr	r3, [r4, #0]
 802386a:	6121      	str	r1, [r4, #16]
 802386c:	07d8      	lsls	r0, r3, #31
 802386e:	d5ea      	bpl.n	8023846 <_printf_float+0x1a2>
 8023870:	1c4b      	adds	r3, r1, #1
 8023872:	e7e7      	b.n	8023844 <_printf_float+0x1a0>
 8023874:	2900      	cmp	r1, #0
 8023876:	bfd4      	ite	le
 8023878:	f1c1 0202 	rsble	r2, r1, #2
 802387c:	2201      	movgt	r2, #1
 802387e:	4413      	add	r3, r2
 8023880:	e7e0      	b.n	8023844 <_printf_float+0x1a0>
 8023882:	6823      	ldr	r3, [r4, #0]
 8023884:	055a      	lsls	r2, r3, #21
 8023886:	d407      	bmi.n	8023898 <_printf_float+0x1f4>
 8023888:	6923      	ldr	r3, [r4, #16]
 802388a:	4642      	mov	r2, r8
 802388c:	4631      	mov	r1, r6
 802388e:	4628      	mov	r0, r5
 8023890:	47b8      	blx	r7
 8023892:	3001      	adds	r0, #1
 8023894:	d12c      	bne.n	80238f0 <_printf_float+0x24c>
 8023896:	e764      	b.n	8023762 <_printf_float+0xbe>
 8023898:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802389c:	f240 80e0 	bls.w	8023a60 <_printf_float+0x3bc>
 80238a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80238a4:	2200      	movs	r2, #0
 80238a6:	2300      	movs	r3, #0
 80238a8:	f7dd f91e 	bl	8000ae8 <__aeabi_dcmpeq>
 80238ac:	2800      	cmp	r0, #0
 80238ae:	d034      	beq.n	802391a <_printf_float+0x276>
 80238b0:	4a37      	ldr	r2, [pc, #220]	; (8023990 <_printf_float+0x2ec>)
 80238b2:	2301      	movs	r3, #1
 80238b4:	4631      	mov	r1, r6
 80238b6:	4628      	mov	r0, r5
 80238b8:	47b8      	blx	r7
 80238ba:	3001      	adds	r0, #1
 80238bc:	f43f af51 	beq.w	8023762 <_printf_float+0xbe>
 80238c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80238c4:	429a      	cmp	r2, r3
 80238c6:	db02      	blt.n	80238ce <_printf_float+0x22a>
 80238c8:	6823      	ldr	r3, [r4, #0]
 80238ca:	07d8      	lsls	r0, r3, #31
 80238cc:	d510      	bpl.n	80238f0 <_printf_float+0x24c>
 80238ce:	ee18 3a10 	vmov	r3, s16
 80238d2:	4652      	mov	r2, sl
 80238d4:	4631      	mov	r1, r6
 80238d6:	4628      	mov	r0, r5
 80238d8:	47b8      	blx	r7
 80238da:	3001      	adds	r0, #1
 80238dc:	f43f af41 	beq.w	8023762 <_printf_float+0xbe>
 80238e0:	f04f 0800 	mov.w	r8, #0
 80238e4:	f104 091a 	add.w	r9, r4, #26
 80238e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80238ea:	3b01      	subs	r3, #1
 80238ec:	4543      	cmp	r3, r8
 80238ee:	dc09      	bgt.n	8023904 <_printf_float+0x260>
 80238f0:	6823      	ldr	r3, [r4, #0]
 80238f2:	079b      	lsls	r3, r3, #30
 80238f4:	f100 8107 	bmi.w	8023b06 <_printf_float+0x462>
 80238f8:	68e0      	ldr	r0, [r4, #12]
 80238fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80238fc:	4298      	cmp	r0, r3
 80238fe:	bfb8      	it	lt
 8023900:	4618      	movlt	r0, r3
 8023902:	e730      	b.n	8023766 <_printf_float+0xc2>
 8023904:	2301      	movs	r3, #1
 8023906:	464a      	mov	r2, r9
 8023908:	4631      	mov	r1, r6
 802390a:	4628      	mov	r0, r5
 802390c:	47b8      	blx	r7
 802390e:	3001      	adds	r0, #1
 8023910:	f43f af27 	beq.w	8023762 <_printf_float+0xbe>
 8023914:	f108 0801 	add.w	r8, r8, #1
 8023918:	e7e6      	b.n	80238e8 <_printf_float+0x244>
 802391a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802391c:	2b00      	cmp	r3, #0
 802391e:	dc39      	bgt.n	8023994 <_printf_float+0x2f0>
 8023920:	4a1b      	ldr	r2, [pc, #108]	; (8023990 <_printf_float+0x2ec>)
 8023922:	2301      	movs	r3, #1
 8023924:	4631      	mov	r1, r6
 8023926:	4628      	mov	r0, r5
 8023928:	47b8      	blx	r7
 802392a:	3001      	adds	r0, #1
 802392c:	f43f af19 	beq.w	8023762 <_printf_float+0xbe>
 8023930:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8023934:	4313      	orrs	r3, r2
 8023936:	d102      	bne.n	802393e <_printf_float+0x29a>
 8023938:	6823      	ldr	r3, [r4, #0]
 802393a:	07d9      	lsls	r1, r3, #31
 802393c:	d5d8      	bpl.n	80238f0 <_printf_float+0x24c>
 802393e:	ee18 3a10 	vmov	r3, s16
 8023942:	4652      	mov	r2, sl
 8023944:	4631      	mov	r1, r6
 8023946:	4628      	mov	r0, r5
 8023948:	47b8      	blx	r7
 802394a:	3001      	adds	r0, #1
 802394c:	f43f af09 	beq.w	8023762 <_printf_float+0xbe>
 8023950:	f04f 0900 	mov.w	r9, #0
 8023954:	f104 0a1a 	add.w	sl, r4, #26
 8023958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802395a:	425b      	negs	r3, r3
 802395c:	454b      	cmp	r3, r9
 802395e:	dc01      	bgt.n	8023964 <_printf_float+0x2c0>
 8023960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023962:	e792      	b.n	802388a <_printf_float+0x1e6>
 8023964:	2301      	movs	r3, #1
 8023966:	4652      	mov	r2, sl
 8023968:	4631      	mov	r1, r6
 802396a:	4628      	mov	r0, r5
 802396c:	47b8      	blx	r7
 802396e:	3001      	adds	r0, #1
 8023970:	f43f aef7 	beq.w	8023762 <_printf_float+0xbe>
 8023974:	f109 0901 	add.w	r9, r9, #1
 8023978:	e7ee      	b.n	8023958 <_printf_float+0x2b4>
 802397a:	bf00      	nop
 802397c:	7fefffff 	.word	0x7fefffff
 8023980:	0802b72c 	.word	0x0802b72c
 8023984:	0802b730 	.word	0x0802b730
 8023988:	0802b734 	.word	0x0802b734
 802398c:	0802b738 	.word	0x0802b738
 8023990:	0802b73c 	.word	0x0802b73c
 8023994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023996:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8023998:	429a      	cmp	r2, r3
 802399a:	bfa8      	it	ge
 802399c:	461a      	movge	r2, r3
 802399e:	2a00      	cmp	r2, #0
 80239a0:	4691      	mov	r9, r2
 80239a2:	dc37      	bgt.n	8023a14 <_printf_float+0x370>
 80239a4:	f04f 0b00 	mov.w	fp, #0
 80239a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80239ac:	f104 021a 	add.w	r2, r4, #26
 80239b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80239b2:	9305      	str	r3, [sp, #20]
 80239b4:	eba3 0309 	sub.w	r3, r3, r9
 80239b8:	455b      	cmp	r3, fp
 80239ba:	dc33      	bgt.n	8023a24 <_printf_float+0x380>
 80239bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80239c0:	429a      	cmp	r2, r3
 80239c2:	db3b      	blt.n	8023a3c <_printf_float+0x398>
 80239c4:	6823      	ldr	r3, [r4, #0]
 80239c6:	07da      	lsls	r2, r3, #31
 80239c8:	d438      	bmi.n	8023a3c <_printf_float+0x398>
 80239ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80239ce:	eba2 0903 	sub.w	r9, r2, r3
 80239d2:	9b05      	ldr	r3, [sp, #20]
 80239d4:	1ad2      	subs	r2, r2, r3
 80239d6:	4591      	cmp	r9, r2
 80239d8:	bfa8      	it	ge
 80239da:	4691      	movge	r9, r2
 80239dc:	f1b9 0f00 	cmp.w	r9, #0
 80239e0:	dc35      	bgt.n	8023a4e <_printf_float+0x3aa>
 80239e2:	f04f 0800 	mov.w	r8, #0
 80239e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80239ea:	f104 0a1a 	add.w	sl, r4, #26
 80239ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80239f2:	1a9b      	subs	r3, r3, r2
 80239f4:	eba3 0309 	sub.w	r3, r3, r9
 80239f8:	4543      	cmp	r3, r8
 80239fa:	f77f af79 	ble.w	80238f0 <_printf_float+0x24c>
 80239fe:	2301      	movs	r3, #1
 8023a00:	4652      	mov	r2, sl
 8023a02:	4631      	mov	r1, r6
 8023a04:	4628      	mov	r0, r5
 8023a06:	47b8      	blx	r7
 8023a08:	3001      	adds	r0, #1
 8023a0a:	f43f aeaa 	beq.w	8023762 <_printf_float+0xbe>
 8023a0e:	f108 0801 	add.w	r8, r8, #1
 8023a12:	e7ec      	b.n	80239ee <_printf_float+0x34a>
 8023a14:	4613      	mov	r3, r2
 8023a16:	4631      	mov	r1, r6
 8023a18:	4642      	mov	r2, r8
 8023a1a:	4628      	mov	r0, r5
 8023a1c:	47b8      	blx	r7
 8023a1e:	3001      	adds	r0, #1
 8023a20:	d1c0      	bne.n	80239a4 <_printf_float+0x300>
 8023a22:	e69e      	b.n	8023762 <_printf_float+0xbe>
 8023a24:	2301      	movs	r3, #1
 8023a26:	4631      	mov	r1, r6
 8023a28:	4628      	mov	r0, r5
 8023a2a:	9205      	str	r2, [sp, #20]
 8023a2c:	47b8      	blx	r7
 8023a2e:	3001      	adds	r0, #1
 8023a30:	f43f ae97 	beq.w	8023762 <_printf_float+0xbe>
 8023a34:	9a05      	ldr	r2, [sp, #20]
 8023a36:	f10b 0b01 	add.w	fp, fp, #1
 8023a3a:	e7b9      	b.n	80239b0 <_printf_float+0x30c>
 8023a3c:	ee18 3a10 	vmov	r3, s16
 8023a40:	4652      	mov	r2, sl
 8023a42:	4631      	mov	r1, r6
 8023a44:	4628      	mov	r0, r5
 8023a46:	47b8      	blx	r7
 8023a48:	3001      	adds	r0, #1
 8023a4a:	d1be      	bne.n	80239ca <_printf_float+0x326>
 8023a4c:	e689      	b.n	8023762 <_printf_float+0xbe>
 8023a4e:	9a05      	ldr	r2, [sp, #20]
 8023a50:	464b      	mov	r3, r9
 8023a52:	4442      	add	r2, r8
 8023a54:	4631      	mov	r1, r6
 8023a56:	4628      	mov	r0, r5
 8023a58:	47b8      	blx	r7
 8023a5a:	3001      	adds	r0, #1
 8023a5c:	d1c1      	bne.n	80239e2 <_printf_float+0x33e>
 8023a5e:	e680      	b.n	8023762 <_printf_float+0xbe>
 8023a60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023a62:	2a01      	cmp	r2, #1
 8023a64:	dc01      	bgt.n	8023a6a <_printf_float+0x3c6>
 8023a66:	07db      	lsls	r3, r3, #31
 8023a68:	d53a      	bpl.n	8023ae0 <_printf_float+0x43c>
 8023a6a:	2301      	movs	r3, #1
 8023a6c:	4642      	mov	r2, r8
 8023a6e:	4631      	mov	r1, r6
 8023a70:	4628      	mov	r0, r5
 8023a72:	47b8      	blx	r7
 8023a74:	3001      	adds	r0, #1
 8023a76:	f43f ae74 	beq.w	8023762 <_printf_float+0xbe>
 8023a7a:	ee18 3a10 	vmov	r3, s16
 8023a7e:	4652      	mov	r2, sl
 8023a80:	4631      	mov	r1, r6
 8023a82:	4628      	mov	r0, r5
 8023a84:	47b8      	blx	r7
 8023a86:	3001      	adds	r0, #1
 8023a88:	f43f ae6b 	beq.w	8023762 <_printf_float+0xbe>
 8023a8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8023a90:	2200      	movs	r2, #0
 8023a92:	2300      	movs	r3, #0
 8023a94:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8023a98:	f7dd f826 	bl	8000ae8 <__aeabi_dcmpeq>
 8023a9c:	b9d8      	cbnz	r0, 8023ad6 <_printf_float+0x432>
 8023a9e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8023aa2:	f108 0201 	add.w	r2, r8, #1
 8023aa6:	4631      	mov	r1, r6
 8023aa8:	4628      	mov	r0, r5
 8023aaa:	47b8      	blx	r7
 8023aac:	3001      	adds	r0, #1
 8023aae:	d10e      	bne.n	8023ace <_printf_float+0x42a>
 8023ab0:	e657      	b.n	8023762 <_printf_float+0xbe>
 8023ab2:	2301      	movs	r3, #1
 8023ab4:	4652      	mov	r2, sl
 8023ab6:	4631      	mov	r1, r6
 8023ab8:	4628      	mov	r0, r5
 8023aba:	47b8      	blx	r7
 8023abc:	3001      	adds	r0, #1
 8023abe:	f43f ae50 	beq.w	8023762 <_printf_float+0xbe>
 8023ac2:	f108 0801 	add.w	r8, r8, #1
 8023ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023ac8:	3b01      	subs	r3, #1
 8023aca:	4543      	cmp	r3, r8
 8023acc:	dcf1      	bgt.n	8023ab2 <_printf_float+0x40e>
 8023ace:	464b      	mov	r3, r9
 8023ad0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8023ad4:	e6da      	b.n	802388c <_printf_float+0x1e8>
 8023ad6:	f04f 0800 	mov.w	r8, #0
 8023ada:	f104 0a1a 	add.w	sl, r4, #26
 8023ade:	e7f2      	b.n	8023ac6 <_printf_float+0x422>
 8023ae0:	2301      	movs	r3, #1
 8023ae2:	4642      	mov	r2, r8
 8023ae4:	e7df      	b.n	8023aa6 <_printf_float+0x402>
 8023ae6:	2301      	movs	r3, #1
 8023ae8:	464a      	mov	r2, r9
 8023aea:	4631      	mov	r1, r6
 8023aec:	4628      	mov	r0, r5
 8023aee:	47b8      	blx	r7
 8023af0:	3001      	adds	r0, #1
 8023af2:	f43f ae36 	beq.w	8023762 <_printf_float+0xbe>
 8023af6:	f108 0801 	add.w	r8, r8, #1
 8023afa:	68e3      	ldr	r3, [r4, #12]
 8023afc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023afe:	1a5b      	subs	r3, r3, r1
 8023b00:	4543      	cmp	r3, r8
 8023b02:	dcf0      	bgt.n	8023ae6 <_printf_float+0x442>
 8023b04:	e6f8      	b.n	80238f8 <_printf_float+0x254>
 8023b06:	f04f 0800 	mov.w	r8, #0
 8023b0a:	f104 0919 	add.w	r9, r4, #25
 8023b0e:	e7f4      	b.n	8023afa <_printf_float+0x456>

08023b10 <_printf_common>:
 8023b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023b14:	4616      	mov	r6, r2
 8023b16:	4699      	mov	r9, r3
 8023b18:	688a      	ldr	r2, [r1, #8]
 8023b1a:	690b      	ldr	r3, [r1, #16]
 8023b1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023b20:	4293      	cmp	r3, r2
 8023b22:	bfb8      	it	lt
 8023b24:	4613      	movlt	r3, r2
 8023b26:	6033      	str	r3, [r6, #0]
 8023b28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8023b2c:	4607      	mov	r7, r0
 8023b2e:	460c      	mov	r4, r1
 8023b30:	b10a      	cbz	r2, 8023b36 <_printf_common+0x26>
 8023b32:	3301      	adds	r3, #1
 8023b34:	6033      	str	r3, [r6, #0]
 8023b36:	6823      	ldr	r3, [r4, #0]
 8023b38:	0699      	lsls	r1, r3, #26
 8023b3a:	bf42      	ittt	mi
 8023b3c:	6833      	ldrmi	r3, [r6, #0]
 8023b3e:	3302      	addmi	r3, #2
 8023b40:	6033      	strmi	r3, [r6, #0]
 8023b42:	6825      	ldr	r5, [r4, #0]
 8023b44:	f015 0506 	ands.w	r5, r5, #6
 8023b48:	d106      	bne.n	8023b58 <_printf_common+0x48>
 8023b4a:	f104 0a19 	add.w	sl, r4, #25
 8023b4e:	68e3      	ldr	r3, [r4, #12]
 8023b50:	6832      	ldr	r2, [r6, #0]
 8023b52:	1a9b      	subs	r3, r3, r2
 8023b54:	42ab      	cmp	r3, r5
 8023b56:	dc26      	bgt.n	8023ba6 <_printf_common+0x96>
 8023b58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023b5c:	1e13      	subs	r3, r2, #0
 8023b5e:	6822      	ldr	r2, [r4, #0]
 8023b60:	bf18      	it	ne
 8023b62:	2301      	movne	r3, #1
 8023b64:	0692      	lsls	r2, r2, #26
 8023b66:	d42b      	bmi.n	8023bc0 <_printf_common+0xb0>
 8023b68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023b6c:	4649      	mov	r1, r9
 8023b6e:	4638      	mov	r0, r7
 8023b70:	47c0      	blx	r8
 8023b72:	3001      	adds	r0, #1
 8023b74:	d01e      	beq.n	8023bb4 <_printf_common+0xa4>
 8023b76:	6823      	ldr	r3, [r4, #0]
 8023b78:	6922      	ldr	r2, [r4, #16]
 8023b7a:	f003 0306 	and.w	r3, r3, #6
 8023b7e:	2b04      	cmp	r3, #4
 8023b80:	bf02      	ittt	eq
 8023b82:	68e5      	ldreq	r5, [r4, #12]
 8023b84:	6833      	ldreq	r3, [r6, #0]
 8023b86:	1aed      	subeq	r5, r5, r3
 8023b88:	68a3      	ldr	r3, [r4, #8]
 8023b8a:	bf0c      	ite	eq
 8023b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023b90:	2500      	movne	r5, #0
 8023b92:	4293      	cmp	r3, r2
 8023b94:	bfc4      	itt	gt
 8023b96:	1a9b      	subgt	r3, r3, r2
 8023b98:	18ed      	addgt	r5, r5, r3
 8023b9a:	2600      	movs	r6, #0
 8023b9c:	341a      	adds	r4, #26
 8023b9e:	42b5      	cmp	r5, r6
 8023ba0:	d11a      	bne.n	8023bd8 <_printf_common+0xc8>
 8023ba2:	2000      	movs	r0, #0
 8023ba4:	e008      	b.n	8023bb8 <_printf_common+0xa8>
 8023ba6:	2301      	movs	r3, #1
 8023ba8:	4652      	mov	r2, sl
 8023baa:	4649      	mov	r1, r9
 8023bac:	4638      	mov	r0, r7
 8023bae:	47c0      	blx	r8
 8023bb0:	3001      	adds	r0, #1
 8023bb2:	d103      	bne.n	8023bbc <_printf_common+0xac>
 8023bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023bbc:	3501      	adds	r5, #1
 8023bbe:	e7c6      	b.n	8023b4e <_printf_common+0x3e>
 8023bc0:	18e1      	adds	r1, r4, r3
 8023bc2:	1c5a      	adds	r2, r3, #1
 8023bc4:	2030      	movs	r0, #48	; 0x30
 8023bc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8023bca:	4422      	add	r2, r4
 8023bcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023bd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023bd4:	3302      	adds	r3, #2
 8023bd6:	e7c7      	b.n	8023b68 <_printf_common+0x58>
 8023bd8:	2301      	movs	r3, #1
 8023bda:	4622      	mov	r2, r4
 8023bdc:	4649      	mov	r1, r9
 8023bde:	4638      	mov	r0, r7
 8023be0:	47c0      	blx	r8
 8023be2:	3001      	adds	r0, #1
 8023be4:	d0e6      	beq.n	8023bb4 <_printf_common+0xa4>
 8023be6:	3601      	adds	r6, #1
 8023be8:	e7d9      	b.n	8023b9e <_printf_common+0x8e>
	...

08023bec <_printf_i>:
 8023bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023bf0:	7e0f      	ldrb	r7, [r1, #24]
 8023bf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023bf4:	2f78      	cmp	r7, #120	; 0x78
 8023bf6:	4691      	mov	r9, r2
 8023bf8:	4680      	mov	r8, r0
 8023bfa:	460c      	mov	r4, r1
 8023bfc:	469a      	mov	sl, r3
 8023bfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8023c02:	d807      	bhi.n	8023c14 <_printf_i+0x28>
 8023c04:	2f62      	cmp	r7, #98	; 0x62
 8023c06:	d80a      	bhi.n	8023c1e <_printf_i+0x32>
 8023c08:	2f00      	cmp	r7, #0
 8023c0a:	f000 80d4 	beq.w	8023db6 <_printf_i+0x1ca>
 8023c0e:	2f58      	cmp	r7, #88	; 0x58
 8023c10:	f000 80c0 	beq.w	8023d94 <_printf_i+0x1a8>
 8023c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023c18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8023c1c:	e03a      	b.n	8023c94 <_printf_i+0xa8>
 8023c1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8023c22:	2b15      	cmp	r3, #21
 8023c24:	d8f6      	bhi.n	8023c14 <_printf_i+0x28>
 8023c26:	a101      	add	r1, pc, #4	; (adr r1, 8023c2c <_printf_i+0x40>)
 8023c28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023c2c:	08023c85 	.word	0x08023c85
 8023c30:	08023c99 	.word	0x08023c99
 8023c34:	08023c15 	.word	0x08023c15
 8023c38:	08023c15 	.word	0x08023c15
 8023c3c:	08023c15 	.word	0x08023c15
 8023c40:	08023c15 	.word	0x08023c15
 8023c44:	08023c99 	.word	0x08023c99
 8023c48:	08023c15 	.word	0x08023c15
 8023c4c:	08023c15 	.word	0x08023c15
 8023c50:	08023c15 	.word	0x08023c15
 8023c54:	08023c15 	.word	0x08023c15
 8023c58:	08023d9d 	.word	0x08023d9d
 8023c5c:	08023cc5 	.word	0x08023cc5
 8023c60:	08023d57 	.word	0x08023d57
 8023c64:	08023c15 	.word	0x08023c15
 8023c68:	08023c15 	.word	0x08023c15
 8023c6c:	08023dbf 	.word	0x08023dbf
 8023c70:	08023c15 	.word	0x08023c15
 8023c74:	08023cc5 	.word	0x08023cc5
 8023c78:	08023c15 	.word	0x08023c15
 8023c7c:	08023c15 	.word	0x08023c15
 8023c80:	08023d5f 	.word	0x08023d5f
 8023c84:	682b      	ldr	r3, [r5, #0]
 8023c86:	1d1a      	adds	r2, r3, #4
 8023c88:	681b      	ldr	r3, [r3, #0]
 8023c8a:	602a      	str	r2, [r5, #0]
 8023c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023c90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023c94:	2301      	movs	r3, #1
 8023c96:	e09f      	b.n	8023dd8 <_printf_i+0x1ec>
 8023c98:	6820      	ldr	r0, [r4, #0]
 8023c9a:	682b      	ldr	r3, [r5, #0]
 8023c9c:	0607      	lsls	r7, r0, #24
 8023c9e:	f103 0104 	add.w	r1, r3, #4
 8023ca2:	6029      	str	r1, [r5, #0]
 8023ca4:	d501      	bpl.n	8023caa <_printf_i+0xbe>
 8023ca6:	681e      	ldr	r6, [r3, #0]
 8023ca8:	e003      	b.n	8023cb2 <_printf_i+0xc6>
 8023caa:	0646      	lsls	r6, r0, #25
 8023cac:	d5fb      	bpl.n	8023ca6 <_printf_i+0xba>
 8023cae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8023cb2:	2e00      	cmp	r6, #0
 8023cb4:	da03      	bge.n	8023cbe <_printf_i+0xd2>
 8023cb6:	232d      	movs	r3, #45	; 0x2d
 8023cb8:	4276      	negs	r6, r6
 8023cba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023cbe:	485a      	ldr	r0, [pc, #360]	; (8023e28 <_printf_i+0x23c>)
 8023cc0:	230a      	movs	r3, #10
 8023cc2:	e012      	b.n	8023cea <_printf_i+0xfe>
 8023cc4:	682b      	ldr	r3, [r5, #0]
 8023cc6:	6820      	ldr	r0, [r4, #0]
 8023cc8:	1d19      	adds	r1, r3, #4
 8023cca:	6029      	str	r1, [r5, #0]
 8023ccc:	0605      	lsls	r5, r0, #24
 8023cce:	d501      	bpl.n	8023cd4 <_printf_i+0xe8>
 8023cd0:	681e      	ldr	r6, [r3, #0]
 8023cd2:	e002      	b.n	8023cda <_printf_i+0xee>
 8023cd4:	0641      	lsls	r1, r0, #25
 8023cd6:	d5fb      	bpl.n	8023cd0 <_printf_i+0xe4>
 8023cd8:	881e      	ldrh	r6, [r3, #0]
 8023cda:	4853      	ldr	r0, [pc, #332]	; (8023e28 <_printf_i+0x23c>)
 8023cdc:	2f6f      	cmp	r7, #111	; 0x6f
 8023cde:	bf0c      	ite	eq
 8023ce0:	2308      	moveq	r3, #8
 8023ce2:	230a      	movne	r3, #10
 8023ce4:	2100      	movs	r1, #0
 8023ce6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023cea:	6865      	ldr	r5, [r4, #4]
 8023cec:	60a5      	str	r5, [r4, #8]
 8023cee:	2d00      	cmp	r5, #0
 8023cf0:	bfa2      	ittt	ge
 8023cf2:	6821      	ldrge	r1, [r4, #0]
 8023cf4:	f021 0104 	bicge.w	r1, r1, #4
 8023cf8:	6021      	strge	r1, [r4, #0]
 8023cfa:	b90e      	cbnz	r6, 8023d00 <_printf_i+0x114>
 8023cfc:	2d00      	cmp	r5, #0
 8023cfe:	d04b      	beq.n	8023d98 <_printf_i+0x1ac>
 8023d00:	4615      	mov	r5, r2
 8023d02:	fbb6 f1f3 	udiv	r1, r6, r3
 8023d06:	fb03 6711 	mls	r7, r3, r1, r6
 8023d0a:	5dc7      	ldrb	r7, [r0, r7]
 8023d0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8023d10:	4637      	mov	r7, r6
 8023d12:	42bb      	cmp	r3, r7
 8023d14:	460e      	mov	r6, r1
 8023d16:	d9f4      	bls.n	8023d02 <_printf_i+0x116>
 8023d18:	2b08      	cmp	r3, #8
 8023d1a:	d10b      	bne.n	8023d34 <_printf_i+0x148>
 8023d1c:	6823      	ldr	r3, [r4, #0]
 8023d1e:	07de      	lsls	r6, r3, #31
 8023d20:	d508      	bpl.n	8023d34 <_printf_i+0x148>
 8023d22:	6923      	ldr	r3, [r4, #16]
 8023d24:	6861      	ldr	r1, [r4, #4]
 8023d26:	4299      	cmp	r1, r3
 8023d28:	bfde      	ittt	le
 8023d2a:	2330      	movle	r3, #48	; 0x30
 8023d2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8023d30:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8023d34:	1b52      	subs	r2, r2, r5
 8023d36:	6122      	str	r2, [r4, #16]
 8023d38:	f8cd a000 	str.w	sl, [sp]
 8023d3c:	464b      	mov	r3, r9
 8023d3e:	aa03      	add	r2, sp, #12
 8023d40:	4621      	mov	r1, r4
 8023d42:	4640      	mov	r0, r8
 8023d44:	f7ff fee4 	bl	8023b10 <_printf_common>
 8023d48:	3001      	adds	r0, #1
 8023d4a:	d14a      	bne.n	8023de2 <_printf_i+0x1f6>
 8023d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023d50:	b004      	add	sp, #16
 8023d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023d56:	6823      	ldr	r3, [r4, #0]
 8023d58:	f043 0320 	orr.w	r3, r3, #32
 8023d5c:	6023      	str	r3, [r4, #0]
 8023d5e:	4833      	ldr	r0, [pc, #204]	; (8023e2c <_printf_i+0x240>)
 8023d60:	2778      	movs	r7, #120	; 0x78
 8023d62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8023d66:	6823      	ldr	r3, [r4, #0]
 8023d68:	6829      	ldr	r1, [r5, #0]
 8023d6a:	061f      	lsls	r7, r3, #24
 8023d6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8023d70:	d402      	bmi.n	8023d78 <_printf_i+0x18c>
 8023d72:	065f      	lsls	r7, r3, #25
 8023d74:	bf48      	it	mi
 8023d76:	b2b6      	uxthmi	r6, r6
 8023d78:	07df      	lsls	r7, r3, #31
 8023d7a:	bf48      	it	mi
 8023d7c:	f043 0320 	orrmi.w	r3, r3, #32
 8023d80:	6029      	str	r1, [r5, #0]
 8023d82:	bf48      	it	mi
 8023d84:	6023      	strmi	r3, [r4, #0]
 8023d86:	b91e      	cbnz	r6, 8023d90 <_printf_i+0x1a4>
 8023d88:	6823      	ldr	r3, [r4, #0]
 8023d8a:	f023 0320 	bic.w	r3, r3, #32
 8023d8e:	6023      	str	r3, [r4, #0]
 8023d90:	2310      	movs	r3, #16
 8023d92:	e7a7      	b.n	8023ce4 <_printf_i+0xf8>
 8023d94:	4824      	ldr	r0, [pc, #144]	; (8023e28 <_printf_i+0x23c>)
 8023d96:	e7e4      	b.n	8023d62 <_printf_i+0x176>
 8023d98:	4615      	mov	r5, r2
 8023d9a:	e7bd      	b.n	8023d18 <_printf_i+0x12c>
 8023d9c:	682b      	ldr	r3, [r5, #0]
 8023d9e:	6826      	ldr	r6, [r4, #0]
 8023da0:	6961      	ldr	r1, [r4, #20]
 8023da2:	1d18      	adds	r0, r3, #4
 8023da4:	6028      	str	r0, [r5, #0]
 8023da6:	0635      	lsls	r5, r6, #24
 8023da8:	681b      	ldr	r3, [r3, #0]
 8023daa:	d501      	bpl.n	8023db0 <_printf_i+0x1c4>
 8023dac:	6019      	str	r1, [r3, #0]
 8023dae:	e002      	b.n	8023db6 <_printf_i+0x1ca>
 8023db0:	0670      	lsls	r0, r6, #25
 8023db2:	d5fb      	bpl.n	8023dac <_printf_i+0x1c0>
 8023db4:	8019      	strh	r1, [r3, #0]
 8023db6:	2300      	movs	r3, #0
 8023db8:	6123      	str	r3, [r4, #16]
 8023dba:	4615      	mov	r5, r2
 8023dbc:	e7bc      	b.n	8023d38 <_printf_i+0x14c>
 8023dbe:	682b      	ldr	r3, [r5, #0]
 8023dc0:	1d1a      	adds	r2, r3, #4
 8023dc2:	602a      	str	r2, [r5, #0]
 8023dc4:	681d      	ldr	r5, [r3, #0]
 8023dc6:	6862      	ldr	r2, [r4, #4]
 8023dc8:	2100      	movs	r1, #0
 8023dca:	4628      	mov	r0, r5
 8023dcc:	f7dc fa10 	bl	80001f0 <memchr>
 8023dd0:	b108      	cbz	r0, 8023dd6 <_printf_i+0x1ea>
 8023dd2:	1b40      	subs	r0, r0, r5
 8023dd4:	6060      	str	r0, [r4, #4]
 8023dd6:	6863      	ldr	r3, [r4, #4]
 8023dd8:	6123      	str	r3, [r4, #16]
 8023dda:	2300      	movs	r3, #0
 8023ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023de0:	e7aa      	b.n	8023d38 <_printf_i+0x14c>
 8023de2:	6923      	ldr	r3, [r4, #16]
 8023de4:	462a      	mov	r2, r5
 8023de6:	4649      	mov	r1, r9
 8023de8:	4640      	mov	r0, r8
 8023dea:	47d0      	blx	sl
 8023dec:	3001      	adds	r0, #1
 8023dee:	d0ad      	beq.n	8023d4c <_printf_i+0x160>
 8023df0:	6823      	ldr	r3, [r4, #0]
 8023df2:	079b      	lsls	r3, r3, #30
 8023df4:	d413      	bmi.n	8023e1e <_printf_i+0x232>
 8023df6:	68e0      	ldr	r0, [r4, #12]
 8023df8:	9b03      	ldr	r3, [sp, #12]
 8023dfa:	4298      	cmp	r0, r3
 8023dfc:	bfb8      	it	lt
 8023dfe:	4618      	movlt	r0, r3
 8023e00:	e7a6      	b.n	8023d50 <_printf_i+0x164>
 8023e02:	2301      	movs	r3, #1
 8023e04:	4632      	mov	r2, r6
 8023e06:	4649      	mov	r1, r9
 8023e08:	4640      	mov	r0, r8
 8023e0a:	47d0      	blx	sl
 8023e0c:	3001      	adds	r0, #1
 8023e0e:	d09d      	beq.n	8023d4c <_printf_i+0x160>
 8023e10:	3501      	adds	r5, #1
 8023e12:	68e3      	ldr	r3, [r4, #12]
 8023e14:	9903      	ldr	r1, [sp, #12]
 8023e16:	1a5b      	subs	r3, r3, r1
 8023e18:	42ab      	cmp	r3, r5
 8023e1a:	dcf2      	bgt.n	8023e02 <_printf_i+0x216>
 8023e1c:	e7eb      	b.n	8023df6 <_printf_i+0x20a>
 8023e1e:	2500      	movs	r5, #0
 8023e20:	f104 0619 	add.w	r6, r4, #25
 8023e24:	e7f5      	b.n	8023e12 <_printf_i+0x226>
 8023e26:	bf00      	nop
 8023e28:	0802b73e 	.word	0x0802b73e
 8023e2c:	0802b74f 	.word	0x0802b74f

08023e30 <std>:
 8023e30:	2300      	movs	r3, #0
 8023e32:	b510      	push	{r4, lr}
 8023e34:	4604      	mov	r4, r0
 8023e36:	e9c0 3300 	strd	r3, r3, [r0]
 8023e3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023e3e:	6083      	str	r3, [r0, #8]
 8023e40:	8181      	strh	r1, [r0, #12]
 8023e42:	6643      	str	r3, [r0, #100]	; 0x64
 8023e44:	81c2      	strh	r2, [r0, #14]
 8023e46:	6183      	str	r3, [r0, #24]
 8023e48:	4619      	mov	r1, r3
 8023e4a:	2208      	movs	r2, #8
 8023e4c:	305c      	adds	r0, #92	; 0x5c
 8023e4e:	f000 fa87 	bl	8024360 <memset>
 8023e52:	4b0d      	ldr	r3, [pc, #52]	; (8023e88 <std+0x58>)
 8023e54:	6263      	str	r3, [r4, #36]	; 0x24
 8023e56:	4b0d      	ldr	r3, [pc, #52]	; (8023e8c <std+0x5c>)
 8023e58:	62a3      	str	r3, [r4, #40]	; 0x28
 8023e5a:	4b0d      	ldr	r3, [pc, #52]	; (8023e90 <std+0x60>)
 8023e5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023e5e:	4b0d      	ldr	r3, [pc, #52]	; (8023e94 <std+0x64>)
 8023e60:	6323      	str	r3, [r4, #48]	; 0x30
 8023e62:	4b0d      	ldr	r3, [pc, #52]	; (8023e98 <std+0x68>)
 8023e64:	6224      	str	r4, [r4, #32]
 8023e66:	429c      	cmp	r4, r3
 8023e68:	d006      	beq.n	8023e78 <std+0x48>
 8023e6a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8023e6e:	4294      	cmp	r4, r2
 8023e70:	d002      	beq.n	8023e78 <std+0x48>
 8023e72:	33d0      	adds	r3, #208	; 0xd0
 8023e74:	429c      	cmp	r4, r3
 8023e76:	d105      	bne.n	8023e84 <std+0x54>
 8023e78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023e80:	f000 bb88 	b.w	8024594 <__retarget_lock_init_recursive>
 8023e84:	bd10      	pop	{r4, pc}
 8023e86:	bf00      	nop
 8023e88:	0802415d 	.word	0x0802415d
 8023e8c:	0802417f 	.word	0x0802417f
 8023e90:	080241b7 	.word	0x080241b7
 8023e94:	080241db 	.word	0x080241db
 8023e98:	20013610 	.word	0x20013610

08023e9c <stdio_exit_handler>:
 8023e9c:	4a02      	ldr	r2, [pc, #8]	; (8023ea8 <stdio_exit_handler+0xc>)
 8023e9e:	4903      	ldr	r1, [pc, #12]	; (8023eac <stdio_exit_handler+0x10>)
 8023ea0:	4803      	ldr	r0, [pc, #12]	; (8023eb0 <stdio_exit_handler+0x14>)
 8023ea2:	f000 b87b 	b.w	8023f9c <_fwalk_sglue>
 8023ea6:	bf00      	nop
 8023ea8:	20000040 	.word	0x20000040
 8023eac:	080260a1 	.word	0x080260a1
 8023eb0:	2000004c 	.word	0x2000004c

08023eb4 <cleanup_stdio>:
 8023eb4:	6841      	ldr	r1, [r0, #4]
 8023eb6:	4b0c      	ldr	r3, [pc, #48]	; (8023ee8 <cleanup_stdio+0x34>)
 8023eb8:	4299      	cmp	r1, r3
 8023eba:	b510      	push	{r4, lr}
 8023ebc:	4604      	mov	r4, r0
 8023ebe:	d001      	beq.n	8023ec4 <cleanup_stdio+0x10>
 8023ec0:	f002 f8ee 	bl	80260a0 <_fflush_r>
 8023ec4:	68a1      	ldr	r1, [r4, #8]
 8023ec6:	4b09      	ldr	r3, [pc, #36]	; (8023eec <cleanup_stdio+0x38>)
 8023ec8:	4299      	cmp	r1, r3
 8023eca:	d002      	beq.n	8023ed2 <cleanup_stdio+0x1e>
 8023ecc:	4620      	mov	r0, r4
 8023ece:	f002 f8e7 	bl	80260a0 <_fflush_r>
 8023ed2:	68e1      	ldr	r1, [r4, #12]
 8023ed4:	4b06      	ldr	r3, [pc, #24]	; (8023ef0 <cleanup_stdio+0x3c>)
 8023ed6:	4299      	cmp	r1, r3
 8023ed8:	d004      	beq.n	8023ee4 <cleanup_stdio+0x30>
 8023eda:	4620      	mov	r0, r4
 8023edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023ee0:	f002 b8de 	b.w	80260a0 <_fflush_r>
 8023ee4:	bd10      	pop	{r4, pc}
 8023ee6:	bf00      	nop
 8023ee8:	20013610 	.word	0x20013610
 8023eec:	20013678 	.word	0x20013678
 8023ef0:	200136e0 	.word	0x200136e0

08023ef4 <global_stdio_init.part.0>:
 8023ef4:	b510      	push	{r4, lr}
 8023ef6:	4b0b      	ldr	r3, [pc, #44]	; (8023f24 <global_stdio_init.part.0+0x30>)
 8023ef8:	4c0b      	ldr	r4, [pc, #44]	; (8023f28 <global_stdio_init.part.0+0x34>)
 8023efa:	4a0c      	ldr	r2, [pc, #48]	; (8023f2c <global_stdio_init.part.0+0x38>)
 8023efc:	601a      	str	r2, [r3, #0]
 8023efe:	4620      	mov	r0, r4
 8023f00:	2200      	movs	r2, #0
 8023f02:	2104      	movs	r1, #4
 8023f04:	f7ff ff94 	bl	8023e30 <std>
 8023f08:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8023f0c:	2201      	movs	r2, #1
 8023f0e:	2109      	movs	r1, #9
 8023f10:	f7ff ff8e 	bl	8023e30 <std>
 8023f14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8023f18:	2202      	movs	r2, #2
 8023f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023f1e:	2112      	movs	r1, #18
 8023f20:	f7ff bf86 	b.w	8023e30 <std>
 8023f24:	20013748 	.word	0x20013748
 8023f28:	20013610 	.word	0x20013610
 8023f2c:	08023e9d 	.word	0x08023e9d

08023f30 <__sfp_lock_acquire>:
 8023f30:	4801      	ldr	r0, [pc, #4]	; (8023f38 <__sfp_lock_acquire+0x8>)
 8023f32:	f000 bb30 	b.w	8024596 <__retarget_lock_acquire_recursive>
 8023f36:	bf00      	nop
 8023f38:	20013751 	.word	0x20013751

08023f3c <__sfp_lock_release>:
 8023f3c:	4801      	ldr	r0, [pc, #4]	; (8023f44 <__sfp_lock_release+0x8>)
 8023f3e:	f000 bb2b 	b.w	8024598 <__retarget_lock_release_recursive>
 8023f42:	bf00      	nop
 8023f44:	20013751 	.word	0x20013751

08023f48 <__sinit>:
 8023f48:	b510      	push	{r4, lr}
 8023f4a:	4604      	mov	r4, r0
 8023f4c:	f7ff fff0 	bl	8023f30 <__sfp_lock_acquire>
 8023f50:	6a23      	ldr	r3, [r4, #32]
 8023f52:	b11b      	cbz	r3, 8023f5c <__sinit+0x14>
 8023f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023f58:	f7ff bff0 	b.w	8023f3c <__sfp_lock_release>
 8023f5c:	4b04      	ldr	r3, [pc, #16]	; (8023f70 <__sinit+0x28>)
 8023f5e:	6223      	str	r3, [r4, #32]
 8023f60:	4b04      	ldr	r3, [pc, #16]	; (8023f74 <__sinit+0x2c>)
 8023f62:	681b      	ldr	r3, [r3, #0]
 8023f64:	2b00      	cmp	r3, #0
 8023f66:	d1f5      	bne.n	8023f54 <__sinit+0xc>
 8023f68:	f7ff ffc4 	bl	8023ef4 <global_stdio_init.part.0>
 8023f6c:	e7f2      	b.n	8023f54 <__sinit+0xc>
 8023f6e:	bf00      	nop
 8023f70:	08023eb5 	.word	0x08023eb5
 8023f74:	20013748 	.word	0x20013748

08023f78 <fiprintf>:
 8023f78:	b40e      	push	{r1, r2, r3}
 8023f7a:	b503      	push	{r0, r1, lr}
 8023f7c:	4601      	mov	r1, r0
 8023f7e:	ab03      	add	r3, sp, #12
 8023f80:	4805      	ldr	r0, [pc, #20]	; (8023f98 <fiprintf+0x20>)
 8023f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8023f86:	6800      	ldr	r0, [r0, #0]
 8023f88:	9301      	str	r3, [sp, #4]
 8023f8a:	f001 fee9 	bl	8025d60 <_vfiprintf_r>
 8023f8e:	b002      	add	sp, #8
 8023f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8023f94:	b003      	add	sp, #12
 8023f96:	4770      	bx	lr
 8023f98:	20000098 	.word	0x20000098

08023f9c <_fwalk_sglue>:
 8023f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023fa0:	4607      	mov	r7, r0
 8023fa2:	4688      	mov	r8, r1
 8023fa4:	4614      	mov	r4, r2
 8023fa6:	2600      	movs	r6, #0
 8023fa8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023fac:	f1b9 0901 	subs.w	r9, r9, #1
 8023fb0:	d505      	bpl.n	8023fbe <_fwalk_sglue+0x22>
 8023fb2:	6824      	ldr	r4, [r4, #0]
 8023fb4:	2c00      	cmp	r4, #0
 8023fb6:	d1f7      	bne.n	8023fa8 <_fwalk_sglue+0xc>
 8023fb8:	4630      	mov	r0, r6
 8023fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023fbe:	89ab      	ldrh	r3, [r5, #12]
 8023fc0:	2b01      	cmp	r3, #1
 8023fc2:	d907      	bls.n	8023fd4 <_fwalk_sglue+0x38>
 8023fc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023fc8:	3301      	adds	r3, #1
 8023fca:	d003      	beq.n	8023fd4 <_fwalk_sglue+0x38>
 8023fcc:	4629      	mov	r1, r5
 8023fce:	4638      	mov	r0, r7
 8023fd0:	47c0      	blx	r8
 8023fd2:	4306      	orrs	r6, r0
 8023fd4:	3568      	adds	r5, #104	; 0x68
 8023fd6:	e7e9      	b.n	8023fac <_fwalk_sglue+0x10>

08023fd8 <iprintf>:
 8023fd8:	b40f      	push	{r0, r1, r2, r3}
 8023fda:	b507      	push	{r0, r1, r2, lr}
 8023fdc:	4906      	ldr	r1, [pc, #24]	; (8023ff8 <iprintf+0x20>)
 8023fde:	ab04      	add	r3, sp, #16
 8023fe0:	6808      	ldr	r0, [r1, #0]
 8023fe2:	f853 2b04 	ldr.w	r2, [r3], #4
 8023fe6:	6881      	ldr	r1, [r0, #8]
 8023fe8:	9301      	str	r3, [sp, #4]
 8023fea:	f001 feb9 	bl	8025d60 <_vfiprintf_r>
 8023fee:	b003      	add	sp, #12
 8023ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8023ff4:	b004      	add	sp, #16
 8023ff6:	4770      	bx	lr
 8023ff8:	20000098 	.word	0x20000098

08023ffc <_puts_r>:
 8023ffc:	6a03      	ldr	r3, [r0, #32]
 8023ffe:	b570      	push	{r4, r5, r6, lr}
 8024000:	6884      	ldr	r4, [r0, #8]
 8024002:	4605      	mov	r5, r0
 8024004:	460e      	mov	r6, r1
 8024006:	b90b      	cbnz	r3, 802400c <_puts_r+0x10>
 8024008:	f7ff ff9e 	bl	8023f48 <__sinit>
 802400c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802400e:	07db      	lsls	r3, r3, #31
 8024010:	d405      	bmi.n	802401e <_puts_r+0x22>
 8024012:	89a3      	ldrh	r3, [r4, #12]
 8024014:	0598      	lsls	r0, r3, #22
 8024016:	d402      	bmi.n	802401e <_puts_r+0x22>
 8024018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802401a:	f000 fabc 	bl	8024596 <__retarget_lock_acquire_recursive>
 802401e:	89a3      	ldrh	r3, [r4, #12]
 8024020:	0719      	lsls	r1, r3, #28
 8024022:	d513      	bpl.n	802404c <_puts_r+0x50>
 8024024:	6923      	ldr	r3, [r4, #16]
 8024026:	b18b      	cbz	r3, 802404c <_puts_r+0x50>
 8024028:	3e01      	subs	r6, #1
 802402a:	68a3      	ldr	r3, [r4, #8]
 802402c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8024030:	3b01      	subs	r3, #1
 8024032:	60a3      	str	r3, [r4, #8]
 8024034:	b9e9      	cbnz	r1, 8024072 <_puts_r+0x76>
 8024036:	2b00      	cmp	r3, #0
 8024038:	da2e      	bge.n	8024098 <_puts_r+0x9c>
 802403a:	4622      	mov	r2, r4
 802403c:	210a      	movs	r1, #10
 802403e:	4628      	mov	r0, r5
 8024040:	f000 f8cf 	bl	80241e2 <__swbuf_r>
 8024044:	3001      	adds	r0, #1
 8024046:	d007      	beq.n	8024058 <_puts_r+0x5c>
 8024048:	250a      	movs	r5, #10
 802404a:	e007      	b.n	802405c <_puts_r+0x60>
 802404c:	4621      	mov	r1, r4
 802404e:	4628      	mov	r0, r5
 8024050:	f000 f904 	bl	802425c <__swsetup_r>
 8024054:	2800      	cmp	r0, #0
 8024056:	d0e7      	beq.n	8024028 <_puts_r+0x2c>
 8024058:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 802405c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802405e:	07da      	lsls	r2, r3, #31
 8024060:	d405      	bmi.n	802406e <_puts_r+0x72>
 8024062:	89a3      	ldrh	r3, [r4, #12]
 8024064:	059b      	lsls	r3, r3, #22
 8024066:	d402      	bmi.n	802406e <_puts_r+0x72>
 8024068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802406a:	f000 fa95 	bl	8024598 <__retarget_lock_release_recursive>
 802406e:	4628      	mov	r0, r5
 8024070:	bd70      	pop	{r4, r5, r6, pc}
 8024072:	2b00      	cmp	r3, #0
 8024074:	da04      	bge.n	8024080 <_puts_r+0x84>
 8024076:	69a2      	ldr	r2, [r4, #24]
 8024078:	429a      	cmp	r2, r3
 802407a:	dc06      	bgt.n	802408a <_puts_r+0x8e>
 802407c:	290a      	cmp	r1, #10
 802407e:	d004      	beq.n	802408a <_puts_r+0x8e>
 8024080:	6823      	ldr	r3, [r4, #0]
 8024082:	1c5a      	adds	r2, r3, #1
 8024084:	6022      	str	r2, [r4, #0]
 8024086:	7019      	strb	r1, [r3, #0]
 8024088:	e7cf      	b.n	802402a <_puts_r+0x2e>
 802408a:	4622      	mov	r2, r4
 802408c:	4628      	mov	r0, r5
 802408e:	f000 f8a8 	bl	80241e2 <__swbuf_r>
 8024092:	3001      	adds	r0, #1
 8024094:	d1c9      	bne.n	802402a <_puts_r+0x2e>
 8024096:	e7df      	b.n	8024058 <_puts_r+0x5c>
 8024098:	6823      	ldr	r3, [r4, #0]
 802409a:	250a      	movs	r5, #10
 802409c:	1c5a      	adds	r2, r3, #1
 802409e:	6022      	str	r2, [r4, #0]
 80240a0:	701d      	strb	r5, [r3, #0]
 80240a2:	e7db      	b.n	802405c <_puts_r+0x60>

080240a4 <puts>:
 80240a4:	4b02      	ldr	r3, [pc, #8]	; (80240b0 <puts+0xc>)
 80240a6:	4601      	mov	r1, r0
 80240a8:	6818      	ldr	r0, [r3, #0]
 80240aa:	f7ff bfa7 	b.w	8023ffc <_puts_r>
 80240ae:	bf00      	nop
 80240b0:	20000098 	.word	0x20000098

080240b4 <sniprintf>:
 80240b4:	b40c      	push	{r2, r3}
 80240b6:	b530      	push	{r4, r5, lr}
 80240b8:	4b17      	ldr	r3, [pc, #92]	; (8024118 <sniprintf+0x64>)
 80240ba:	1e0c      	subs	r4, r1, #0
 80240bc:	681d      	ldr	r5, [r3, #0]
 80240be:	b09d      	sub	sp, #116	; 0x74
 80240c0:	da08      	bge.n	80240d4 <sniprintf+0x20>
 80240c2:	238b      	movs	r3, #139	; 0x8b
 80240c4:	602b      	str	r3, [r5, #0]
 80240c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80240ca:	b01d      	add	sp, #116	; 0x74
 80240cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80240d0:	b002      	add	sp, #8
 80240d2:	4770      	bx	lr
 80240d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80240d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80240dc:	bf14      	ite	ne
 80240de:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80240e2:	4623      	moveq	r3, r4
 80240e4:	9304      	str	r3, [sp, #16]
 80240e6:	9307      	str	r3, [sp, #28]
 80240e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80240ec:	9002      	str	r0, [sp, #8]
 80240ee:	9006      	str	r0, [sp, #24]
 80240f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80240f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80240f6:	ab21      	add	r3, sp, #132	; 0x84
 80240f8:	a902      	add	r1, sp, #8
 80240fa:	4628      	mov	r0, r5
 80240fc:	9301      	str	r3, [sp, #4]
 80240fe:	f001 fd07 	bl	8025b10 <_svfiprintf_r>
 8024102:	1c43      	adds	r3, r0, #1
 8024104:	bfbc      	itt	lt
 8024106:	238b      	movlt	r3, #139	; 0x8b
 8024108:	602b      	strlt	r3, [r5, #0]
 802410a:	2c00      	cmp	r4, #0
 802410c:	d0dd      	beq.n	80240ca <sniprintf+0x16>
 802410e:	9b02      	ldr	r3, [sp, #8]
 8024110:	2200      	movs	r2, #0
 8024112:	701a      	strb	r2, [r3, #0]
 8024114:	e7d9      	b.n	80240ca <sniprintf+0x16>
 8024116:	bf00      	nop
 8024118:	20000098 	.word	0x20000098

0802411c <siprintf>:
 802411c:	b40e      	push	{r1, r2, r3}
 802411e:	b500      	push	{lr}
 8024120:	b09c      	sub	sp, #112	; 0x70
 8024122:	ab1d      	add	r3, sp, #116	; 0x74
 8024124:	9002      	str	r0, [sp, #8]
 8024126:	9006      	str	r0, [sp, #24]
 8024128:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802412c:	4809      	ldr	r0, [pc, #36]	; (8024154 <siprintf+0x38>)
 802412e:	9107      	str	r1, [sp, #28]
 8024130:	9104      	str	r1, [sp, #16]
 8024132:	4909      	ldr	r1, [pc, #36]	; (8024158 <siprintf+0x3c>)
 8024134:	f853 2b04 	ldr.w	r2, [r3], #4
 8024138:	9105      	str	r1, [sp, #20]
 802413a:	6800      	ldr	r0, [r0, #0]
 802413c:	9301      	str	r3, [sp, #4]
 802413e:	a902      	add	r1, sp, #8
 8024140:	f001 fce6 	bl	8025b10 <_svfiprintf_r>
 8024144:	9b02      	ldr	r3, [sp, #8]
 8024146:	2200      	movs	r2, #0
 8024148:	701a      	strb	r2, [r3, #0]
 802414a:	b01c      	add	sp, #112	; 0x70
 802414c:	f85d eb04 	ldr.w	lr, [sp], #4
 8024150:	b003      	add	sp, #12
 8024152:	4770      	bx	lr
 8024154:	20000098 	.word	0x20000098
 8024158:	ffff0208 	.word	0xffff0208

0802415c <__sread>:
 802415c:	b510      	push	{r4, lr}
 802415e:	460c      	mov	r4, r1
 8024160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024164:	f000 f9be 	bl	80244e4 <_read_r>
 8024168:	2800      	cmp	r0, #0
 802416a:	bfab      	itete	ge
 802416c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802416e:	89a3      	ldrhlt	r3, [r4, #12]
 8024170:	181b      	addge	r3, r3, r0
 8024172:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8024176:	bfac      	ite	ge
 8024178:	6563      	strge	r3, [r4, #84]	; 0x54
 802417a:	81a3      	strhlt	r3, [r4, #12]
 802417c:	bd10      	pop	{r4, pc}

0802417e <__swrite>:
 802417e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024182:	461f      	mov	r7, r3
 8024184:	898b      	ldrh	r3, [r1, #12]
 8024186:	05db      	lsls	r3, r3, #23
 8024188:	4605      	mov	r5, r0
 802418a:	460c      	mov	r4, r1
 802418c:	4616      	mov	r6, r2
 802418e:	d505      	bpl.n	802419c <__swrite+0x1e>
 8024190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024194:	2302      	movs	r3, #2
 8024196:	2200      	movs	r2, #0
 8024198:	f000 f992 	bl	80244c0 <_lseek_r>
 802419c:	89a3      	ldrh	r3, [r4, #12]
 802419e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80241a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80241a6:	81a3      	strh	r3, [r4, #12]
 80241a8:	4632      	mov	r2, r6
 80241aa:	463b      	mov	r3, r7
 80241ac:	4628      	mov	r0, r5
 80241ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80241b2:	f000 b9b9 	b.w	8024528 <_write_r>

080241b6 <__sseek>:
 80241b6:	b510      	push	{r4, lr}
 80241b8:	460c      	mov	r4, r1
 80241ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80241be:	f000 f97f 	bl	80244c0 <_lseek_r>
 80241c2:	1c43      	adds	r3, r0, #1
 80241c4:	89a3      	ldrh	r3, [r4, #12]
 80241c6:	bf15      	itete	ne
 80241c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80241ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80241ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80241d2:	81a3      	strheq	r3, [r4, #12]
 80241d4:	bf18      	it	ne
 80241d6:	81a3      	strhne	r3, [r4, #12]
 80241d8:	bd10      	pop	{r4, pc}

080241da <__sclose>:
 80241da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80241de:	f000 b909 	b.w	80243f4 <_close_r>

080241e2 <__swbuf_r>:
 80241e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80241e4:	460e      	mov	r6, r1
 80241e6:	4614      	mov	r4, r2
 80241e8:	4605      	mov	r5, r0
 80241ea:	b118      	cbz	r0, 80241f4 <__swbuf_r+0x12>
 80241ec:	6a03      	ldr	r3, [r0, #32]
 80241ee:	b90b      	cbnz	r3, 80241f4 <__swbuf_r+0x12>
 80241f0:	f7ff feaa 	bl	8023f48 <__sinit>
 80241f4:	69a3      	ldr	r3, [r4, #24]
 80241f6:	60a3      	str	r3, [r4, #8]
 80241f8:	89a3      	ldrh	r3, [r4, #12]
 80241fa:	071a      	lsls	r2, r3, #28
 80241fc:	d525      	bpl.n	802424a <__swbuf_r+0x68>
 80241fe:	6923      	ldr	r3, [r4, #16]
 8024200:	b31b      	cbz	r3, 802424a <__swbuf_r+0x68>
 8024202:	6823      	ldr	r3, [r4, #0]
 8024204:	6922      	ldr	r2, [r4, #16]
 8024206:	1a98      	subs	r0, r3, r2
 8024208:	6963      	ldr	r3, [r4, #20]
 802420a:	b2f6      	uxtb	r6, r6
 802420c:	4283      	cmp	r3, r0
 802420e:	4637      	mov	r7, r6
 8024210:	dc04      	bgt.n	802421c <__swbuf_r+0x3a>
 8024212:	4621      	mov	r1, r4
 8024214:	4628      	mov	r0, r5
 8024216:	f001 ff43 	bl	80260a0 <_fflush_r>
 802421a:	b9e0      	cbnz	r0, 8024256 <__swbuf_r+0x74>
 802421c:	68a3      	ldr	r3, [r4, #8]
 802421e:	3b01      	subs	r3, #1
 8024220:	60a3      	str	r3, [r4, #8]
 8024222:	6823      	ldr	r3, [r4, #0]
 8024224:	1c5a      	adds	r2, r3, #1
 8024226:	6022      	str	r2, [r4, #0]
 8024228:	701e      	strb	r6, [r3, #0]
 802422a:	6962      	ldr	r2, [r4, #20]
 802422c:	1c43      	adds	r3, r0, #1
 802422e:	429a      	cmp	r2, r3
 8024230:	d004      	beq.n	802423c <__swbuf_r+0x5a>
 8024232:	89a3      	ldrh	r3, [r4, #12]
 8024234:	07db      	lsls	r3, r3, #31
 8024236:	d506      	bpl.n	8024246 <__swbuf_r+0x64>
 8024238:	2e0a      	cmp	r6, #10
 802423a:	d104      	bne.n	8024246 <__swbuf_r+0x64>
 802423c:	4621      	mov	r1, r4
 802423e:	4628      	mov	r0, r5
 8024240:	f001 ff2e 	bl	80260a0 <_fflush_r>
 8024244:	b938      	cbnz	r0, 8024256 <__swbuf_r+0x74>
 8024246:	4638      	mov	r0, r7
 8024248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802424a:	4621      	mov	r1, r4
 802424c:	4628      	mov	r0, r5
 802424e:	f000 f805 	bl	802425c <__swsetup_r>
 8024252:	2800      	cmp	r0, #0
 8024254:	d0d5      	beq.n	8024202 <__swbuf_r+0x20>
 8024256:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 802425a:	e7f4      	b.n	8024246 <__swbuf_r+0x64>

0802425c <__swsetup_r>:
 802425c:	b538      	push	{r3, r4, r5, lr}
 802425e:	4b2a      	ldr	r3, [pc, #168]	; (8024308 <__swsetup_r+0xac>)
 8024260:	4605      	mov	r5, r0
 8024262:	6818      	ldr	r0, [r3, #0]
 8024264:	460c      	mov	r4, r1
 8024266:	b118      	cbz	r0, 8024270 <__swsetup_r+0x14>
 8024268:	6a03      	ldr	r3, [r0, #32]
 802426a:	b90b      	cbnz	r3, 8024270 <__swsetup_r+0x14>
 802426c:	f7ff fe6c 	bl	8023f48 <__sinit>
 8024270:	89a3      	ldrh	r3, [r4, #12]
 8024272:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024276:	0718      	lsls	r0, r3, #28
 8024278:	d422      	bmi.n	80242c0 <__swsetup_r+0x64>
 802427a:	06d9      	lsls	r1, r3, #27
 802427c:	d407      	bmi.n	802428e <__swsetup_r+0x32>
 802427e:	2309      	movs	r3, #9
 8024280:	602b      	str	r3, [r5, #0]
 8024282:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8024286:	81a3      	strh	r3, [r4, #12]
 8024288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802428c:	e034      	b.n	80242f8 <__swsetup_r+0x9c>
 802428e:	0758      	lsls	r0, r3, #29
 8024290:	d512      	bpl.n	80242b8 <__swsetup_r+0x5c>
 8024292:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024294:	b141      	cbz	r1, 80242a8 <__swsetup_r+0x4c>
 8024296:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802429a:	4299      	cmp	r1, r3
 802429c:	d002      	beq.n	80242a4 <__swsetup_r+0x48>
 802429e:	4628      	mov	r0, r5
 80242a0:	f001 f814 	bl	80252cc <_free_r>
 80242a4:	2300      	movs	r3, #0
 80242a6:	6363      	str	r3, [r4, #52]	; 0x34
 80242a8:	89a3      	ldrh	r3, [r4, #12]
 80242aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80242ae:	81a3      	strh	r3, [r4, #12]
 80242b0:	2300      	movs	r3, #0
 80242b2:	6063      	str	r3, [r4, #4]
 80242b4:	6923      	ldr	r3, [r4, #16]
 80242b6:	6023      	str	r3, [r4, #0]
 80242b8:	89a3      	ldrh	r3, [r4, #12]
 80242ba:	f043 0308 	orr.w	r3, r3, #8
 80242be:	81a3      	strh	r3, [r4, #12]
 80242c0:	6923      	ldr	r3, [r4, #16]
 80242c2:	b94b      	cbnz	r3, 80242d8 <__swsetup_r+0x7c>
 80242c4:	89a3      	ldrh	r3, [r4, #12]
 80242c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80242ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80242ce:	d003      	beq.n	80242d8 <__swsetup_r+0x7c>
 80242d0:	4621      	mov	r1, r4
 80242d2:	4628      	mov	r0, r5
 80242d4:	f001 ff32 	bl	802613c <__smakebuf_r>
 80242d8:	89a0      	ldrh	r0, [r4, #12]
 80242da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80242de:	f010 0301 	ands.w	r3, r0, #1
 80242e2:	d00a      	beq.n	80242fa <__swsetup_r+0x9e>
 80242e4:	2300      	movs	r3, #0
 80242e6:	60a3      	str	r3, [r4, #8]
 80242e8:	6963      	ldr	r3, [r4, #20]
 80242ea:	425b      	negs	r3, r3
 80242ec:	61a3      	str	r3, [r4, #24]
 80242ee:	6923      	ldr	r3, [r4, #16]
 80242f0:	b943      	cbnz	r3, 8024304 <__swsetup_r+0xa8>
 80242f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80242f6:	d1c4      	bne.n	8024282 <__swsetup_r+0x26>
 80242f8:	bd38      	pop	{r3, r4, r5, pc}
 80242fa:	0781      	lsls	r1, r0, #30
 80242fc:	bf58      	it	pl
 80242fe:	6963      	ldrpl	r3, [r4, #20]
 8024300:	60a3      	str	r3, [r4, #8]
 8024302:	e7f4      	b.n	80242ee <__swsetup_r+0x92>
 8024304:	2000      	movs	r0, #0
 8024306:	e7f7      	b.n	80242f8 <__swsetup_r+0x9c>
 8024308:	20000098 	.word	0x20000098

0802430c <memcmp>:
 802430c:	b510      	push	{r4, lr}
 802430e:	3901      	subs	r1, #1
 8024310:	4402      	add	r2, r0
 8024312:	4290      	cmp	r0, r2
 8024314:	d101      	bne.n	802431a <memcmp+0xe>
 8024316:	2000      	movs	r0, #0
 8024318:	e005      	b.n	8024326 <memcmp+0x1a>
 802431a:	7803      	ldrb	r3, [r0, #0]
 802431c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8024320:	42a3      	cmp	r3, r4
 8024322:	d001      	beq.n	8024328 <memcmp+0x1c>
 8024324:	1b18      	subs	r0, r3, r4
 8024326:	bd10      	pop	{r4, pc}
 8024328:	3001      	adds	r0, #1
 802432a:	e7f2      	b.n	8024312 <memcmp+0x6>

0802432c <memmove>:
 802432c:	4288      	cmp	r0, r1
 802432e:	b510      	push	{r4, lr}
 8024330:	eb01 0402 	add.w	r4, r1, r2
 8024334:	d902      	bls.n	802433c <memmove+0x10>
 8024336:	4284      	cmp	r4, r0
 8024338:	4623      	mov	r3, r4
 802433a:	d807      	bhi.n	802434c <memmove+0x20>
 802433c:	1e43      	subs	r3, r0, #1
 802433e:	42a1      	cmp	r1, r4
 8024340:	d008      	beq.n	8024354 <memmove+0x28>
 8024342:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024346:	f803 2f01 	strb.w	r2, [r3, #1]!
 802434a:	e7f8      	b.n	802433e <memmove+0x12>
 802434c:	4402      	add	r2, r0
 802434e:	4601      	mov	r1, r0
 8024350:	428a      	cmp	r2, r1
 8024352:	d100      	bne.n	8024356 <memmove+0x2a>
 8024354:	bd10      	pop	{r4, pc}
 8024356:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802435a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802435e:	e7f7      	b.n	8024350 <memmove+0x24>

08024360 <memset>:
 8024360:	4402      	add	r2, r0
 8024362:	4603      	mov	r3, r0
 8024364:	4293      	cmp	r3, r2
 8024366:	d100      	bne.n	802436a <memset+0xa>
 8024368:	4770      	bx	lr
 802436a:	f803 1b01 	strb.w	r1, [r3], #1
 802436e:	e7f9      	b.n	8024364 <memset+0x4>

08024370 <strcat>:
 8024370:	b510      	push	{r4, lr}
 8024372:	4602      	mov	r2, r0
 8024374:	7814      	ldrb	r4, [r2, #0]
 8024376:	4613      	mov	r3, r2
 8024378:	3201      	adds	r2, #1
 802437a:	2c00      	cmp	r4, #0
 802437c:	d1fa      	bne.n	8024374 <strcat+0x4>
 802437e:	3b01      	subs	r3, #1
 8024380:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024384:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024388:	2a00      	cmp	r2, #0
 802438a:	d1f9      	bne.n	8024380 <strcat+0x10>
 802438c:	bd10      	pop	{r4, pc}

0802438e <strchr>:
 802438e:	b2c9      	uxtb	r1, r1
 8024390:	4603      	mov	r3, r0
 8024392:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024396:	b11a      	cbz	r2, 80243a0 <strchr+0x12>
 8024398:	428a      	cmp	r2, r1
 802439a:	d1f9      	bne.n	8024390 <strchr+0x2>
 802439c:	4618      	mov	r0, r3
 802439e:	4770      	bx	lr
 80243a0:	2900      	cmp	r1, #0
 80243a2:	bf18      	it	ne
 80243a4:	2300      	movne	r3, #0
 80243a6:	e7f9      	b.n	802439c <strchr+0xe>

080243a8 <strcspn>:
 80243a8:	b570      	push	{r4, r5, r6, lr}
 80243aa:	4603      	mov	r3, r0
 80243ac:	461e      	mov	r6, r3
 80243ae:	f813 4b01 	ldrb.w	r4, [r3], #1
 80243b2:	b144      	cbz	r4, 80243c6 <strcspn+0x1e>
 80243b4:	1e4a      	subs	r2, r1, #1
 80243b6:	e001      	b.n	80243bc <strcspn+0x14>
 80243b8:	42a5      	cmp	r5, r4
 80243ba:	d004      	beq.n	80243c6 <strcspn+0x1e>
 80243bc:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80243c0:	2d00      	cmp	r5, #0
 80243c2:	d1f9      	bne.n	80243b8 <strcspn+0x10>
 80243c4:	e7f2      	b.n	80243ac <strcspn+0x4>
 80243c6:	1a30      	subs	r0, r6, r0
 80243c8:	bd70      	pop	{r4, r5, r6, pc}

080243ca <strspn>:
 80243ca:	b570      	push	{r4, r5, r6, lr}
 80243cc:	4603      	mov	r3, r0
 80243ce:	461e      	mov	r6, r3
 80243d0:	f813 4b01 	ldrb.w	r4, [r3], #1
 80243d4:	b13c      	cbz	r4, 80243e6 <strspn+0x1c>
 80243d6:	1e4a      	subs	r2, r1, #1
 80243d8:	e001      	b.n	80243de <strspn+0x14>
 80243da:	42a5      	cmp	r5, r4
 80243dc:	d0f7      	beq.n	80243ce <strspn+0x4>
 80243de:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80243e2:	2d00      	cmp	r5, #0
 80243e4:	d1f9      	bne.n	80243da <strspn+0x10>
 80243e6:	1a30      	subs	r0, r6, r0
 80243e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080243ec <_localeconv_r>:
 80243ec:	4800      	ldr	r0, [pc, #0]	; (80243f0 <_localeconv_r+0x4>)
 80243ee:	4770      	bx	lr
 80243f0:	2000018c 	.word	0x2000018c

080243f4 <_close_r>:
 80243f4:	b538      	push	{r3, r4, r5, lr}
 80243f6:	4d06      	ldr	r5, [pc, #24]	; (8024410 <_close_r+0x1c>)
 80243f8:	2300      	movs	r3, #0
 80243fa:	4604      	mov	r4, r0
 80243fc:	4608      	mov	r0, r1
 80243fe:	602b      	str	r3, [r5, #0]
 8024400:	f7df f86b 	bl	80034da <_close>
 8024404:	1c43      	adds	r3, r0, #1
 8024406:	d102      	bne.n	802440e <_close_r+0x1a>
 8024408:	682b      	ldr	r3, [r5, #0]
 802440a:	b103      	cbz	r3, 802440e <_close_r+0x1a>
 802440c:	6023      	str	r3, [r4, #0]
 802440e:	bd38      	pop	{r3, r4, r5, pc}
 8024410:	2001374c 	.word	0x2001374c

08024414 <_reclaim_reent>:
 8024414:	4b29      	ldr	r3, [pc, #164]	; (80244bc <_reclaim_reent+0xa8>)
 8024416:	681b      	ldr	r3, [r3, #0]
 8024418:	4283      	cmp	r3, r0
 802441a:	b570      	push	{r4, r5, r6, lr}
 802441c:	4604      	mov	r4, r0
 802441e:	d04b      	beq.n	80244b8 <_reclaim_reent+0xa4>
 8024420:	69c3      	ldr	r3, [r0, #28]
 8024422:	b143      	cbz	r3, 8024436 <_reclaim_reent+0x22>
 8024424:	68db      	ldr	r3, [r3, #12]
 8024426:	2b00      	cmp	r3, #0
 8024428:	d144      	bne.n	80244b4 <_reclaim_reent+0xa0>
 802442a:	69e3      	ldr	r3, [r4, #28]
 802442c:	6819      	ldr	r1, [r3, #0]
 802442e:	b111      	cbz	r1, 8024436 <_reclaim_reent+0x22>
 8024430:	4620      	mov	r0, r4
 8024432:	f000 ff4b 	bl	80252cc <_free_r>
 8024436:	6961      	ldr	r1, [r4, #20]
 8024438:	b111      	cbz	r1, 8024440 <_reclaim_reent+0x2c>
 802443a:	4620      	mov	r0, r4
 802443c:	f000 ff46 	bl	80252cc <_free_r>
 8024440:	69e1      	ldr	r1, [r4, #28]
 8024442:	b111      	cbz	r1, 802444a <_reclaim_reent+0x36>
 8024444:	4620      	mov	r0, r4
 8024446:	f000 ff41 	bl	80252cc <_free_r>
 802444a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802444c:	b111      	cbz	r1, 8024454 <_reclaim_reent+0x40>
 802444e:	4620      	mov	r0, r4
 8024450:	f000 ff3c 	bl	80252cc <_free_r>
 8024454:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024456:	b111      	cbz	r1, 802445e <_reclaim_reent+0x4a>
 8024458:	4620      	mov	r0, r4
 802445a:	f000 ff37 	bl	80252cc <_free_r>
 802445e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8024460:	b111      	cbz	r1, 8024468 <_reclaim_reent+0x54>
 8024462:	4620      	mov	r0, r4
 8024464:	f000 ff32 	bl	80252cc <_free_r>
 8024468:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802446a:	b111      	cbz	r1, 8024472 <_reclaim_reent+0x5e>
 802446c:	4620      	mov	r0, r4
 802446e:	f000 ff2d 	bl	80252cc <_free_r>
 8024472:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8024474:	b111      	cbz	r1, 802447c <_reclaim_reent+0x68>
 8024476:	4620      	mov	r0, r4
 8024478:	f000 ff28 	bl	80252cc <_free_r>
 802447c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802447e:	b111      	cbz	r1, 8024486 <_reclaim_reent+0x72>
 8024480:	4620      	mov	r0, r4
 8024482:	f000 ff23 	bl	80252cc <_free_r>
 8024486:	6a23      	ldr	r3, [r4, #32]
 8024488:	b1b3      	cbz	r3, 80244b8 <_reclaim_reent+0xa4>
 802448a:	4620      	mov	r0, r4
 802448c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024490:	4718      	bx	r3
 8024492:	5949      	ldr	r1, [r1, r5]
 8024494:	b941      	cbnz	r1, 80244a8 <_reclaim_reent+0x94>
 8024496:	3504      	adds	r5, #4
 8024498:	69e3      	ldr	r3, [r4, #28]
 802449a:	2d80      	cmp	r5, #128	; 0x80
 802449c:	68d9      	ldr	r1, [r3, #12]
 802449e:	d1f8      	bne.n	8024492 <_reclaim_reent+0x7e>
 80244a0:	4620      	mov	r0, r4
 80244a2:	f000 ff13 	bl	80252cc <_free_r>
 80244a6:	e7c0      	b.n	802442a <_reclaim_reent+0x16>
 80244a8:	680e      	ldr	r6, [r1, #0]
 80244aa:	4620      	mov	r0, r4
 80244ac:	f000 ff0e 	bl	80252cc <_free_r>
 80244b0:	4631      	mov	r1, r6
 80244b2:	e7ef      	b.n	8024494 <_reclaim_reent+0x80>
 80244b4:	2500      	movs	r5, #0
 80244b6:	e7ef      	b.n	8024498 <_reclaim_reent+0x84>
 80244b8:	bd70      	pop	{r4, r5, r6, pc}
 80244ba:	bf00      	nop
 80244bc:	20000098 	.word	0x20000098

080244c0 <_lseek_r>:
 80244c0:	b538      	push	{r3, r4, r5, lr}
 80244c2:	4d07      	ldr	r5, [pc, #28]	; (80244e0 <_lseek_r+0x20>)
 80244c4:	4604      	mov	r4, r0
 80244c6:	4608      	mov	r0, r1
 80244c8:	4611      	mov	r1, r2
 80244ca:	2200      	movs	r2, #0
 80244cc:	602a      	str	r2, [r5, #0]
 80244ce:	461a      	mov	r2, r3
 80244d0:	f7df f82a 	bl	8003528 <_lseek>
 80244d4:	1c43      	adds	r3, r0, #1
 80244d6:	d102      	bne.n	80244de <_lseek_r+0x1e>
 80244d8:	682b      	ldr	r3, [r5, #0]
 80244da:	b103      	cbz	r3, 80244de <_lseek_r+0x1e>
 80244dc:	6023      	str	r3, [r4, #0]
 80244de:	bd38      	pop	{r3, r4, r5, pc}
 80244e0:	2001374c 	.word	0x2001374c

080244e4 <_read_r>:
 80244e4:	b538      	push	{r3, r4, r5, lr}
 80244e6:	4d07      	ldr	r5, [pc, #28]	; (8024504 <_read_r+0x20>)
 80244e8:	4604      	mov	r4, r0
 80244ea:	4608      	mov	r0, r1
 80244ec:	4611      	mov	r1, r2
 80244ee:	2200      	movs	r2, #0
 80244f0:	602a      	str	r2, [r5, #0]
 80244f2:	461a      	mov	r2, r3
 80244f4:	f7de ffb8 	bl	8003468 <_read>
 80244f8:	1c43      	adds	r3, r0, #1
 80244fa:	d102      	bne.n	8024502 <_read_r+0x1e>
 80244fc:	682b      	ldr	r3, [r5, #0]
 80244fe:	b103      	cbz	r3, 8024502 <_read_r+0x1e>
 8024500:	6023      	str	r3, [r4, #0]
 8024502:	bd38      	pop	{r3, r4, r5, pc}
 8024504:	2001374c 	.word	0x2001374c

08024508 <_sbrk_r>:
 8024508:	b538      	push	{r3, r4, r5, lr}
 802450a:	4d06      	ldr	r5, [pc, #24]	; (8024524 <_sbrk_r+0x1c>)
 802450c:	2300      	movs	r3, #0
 802450e:	4604      	mov	r4, r0
 8024510:	4608      	mov	r0, r1
 8024512:	602b      	str	r3, [r5, #0]
 8024514:	f7df f816 	bl	8003544 <_sbrk>
 8024518:	1c43      	adds	r3, r0, #1
 802451a:	d102      	bne.n	8024522 <_sbrk_r+0x1a>
 802451c:	682b      	ldr	r3, [r5, #0]
 802451e:	b103      	cbz	r3, 8024522 <_sbrk_r+0x1a>
 8024520:	6023      	str	r3, [r4, #0]
 8024522:	bd38      	pop	{r3, r4, r5, pc}
 8024524:	2001374c 	.word	0x2001374c

08024528 <_write_r>:
 8024528:	b538      	push	{r3, r4, r5, lr}
 802452a:	4d07      	ldr	r5, [pc, #28]	; (8024548 <_write_r+0x20>)
 802452c:	4604      	mov	r4, r0
 802452e:	4608      	mov	r0, r1
 8024530:	4611      	mov	r1, r2
 8024532:	2200      	movs	r2, #0
 8024534:	602a      	str	r2, [r5, #0]
 8024536:	461a      	mov	r2, r3
 8024538:	f7de ffb3 	bl	80034a2 <_write>
 802453c:	1c43      	adds	r3, r0, #1
 802453e:	d102      	bne.n	8024546 <_write_r+0x1e>
 8024540:	682b      	ldr	r3, [r5, #0]
 8024542:	b103      	cbz	r3, 8024546 <_write_r+0x1e>
 8024544:	6023      	str	r3, [r4, #0]
 8024546:	bd38      	pop	{r3, r4, r5, pc}
 8024548:	2001374c 	.word	0x2001374c

0802454c <__libc_init_array>:
 802454c:	b570      	push	{r4, r5, r6, lr}
 802454e:	4d0d      	ldr	r5, [pc, #52]	; (8024584 <__libc_init_array+0x38>)
 8024550:	4c0d      	ldr	r4, [pc, #52]	; (8024588 <__libc_init_array+0x3c>)
 8024552:	1b64      	subs	r4, r4, r5
 8024554:	10a4      	asrs	r4, r4, #2
 8024556:	2600      	movs	r6, #0
 8024558:	42a6      	cmp	r6, r4
 802455a:	d109      	bne.n	8024570 <__libc_init_array+0x24>
 802455c:	4d0b      	ldr	r5, [pc, #44]	; (802458c <__libc_init_array+0x40>)
 802455e:	4c0c      	ldr	r4, [pc, #48]	; (8024590 <__libc_init_array+0x44>)
 8024560:	f001 fefa 	bl	8026358 <_init>
 8024564:	1b64      	subs	r4, r4, r5
 8024566:	10a4      	asrs	r4, r4, #2
 8024568:	2600      	movs	r6, #0
 802456a:	42a6      	cmp	r6, r4
 802456c:	d105      	bne.n	802457a <__libc_init_array+0x2e>
 802456e:	bd70      	pop	{r4, r5, r6, pc}
 8024570:	f855 3b04 	ldr.w	r3, [r5], #4
 8024574:	4798      	blx	r3
 8024576:	3601      	adds	r6, #1
 8024578:	e7ee      	b.n	8024558 <__libc_init_array+0xc>
 802457a:	f855 3b04 	ldr.w	r3, [r5], #4
 802457e:	4798      	blx	r3
 8024580:	3601      	adds	r6, #1
 8024582:	e7f2      	b.n	802456a <__libc_init_array+0x1e>
 8024584:	0802b950 	.word	0x0802b950
 8024588:	0802b950 	.word	0x0802b950
 802458c:	0802b950 	.word	0x0802b950
 8024590:	0802b954 	.word	0x0802b954

08024594 <__retarget_lock_init_recursive>:
 8024594:	4770      	bx	lr

08024596 <__retarget_lock_acquire_recursive>:
 8024596:	4770      	bx	lr

08024598 <__retarget_lock_release_recursive>:
 8024598:	4770      	bx	lr

0802459a <strcpy>:
 802459a:	4603      	mov	r3, r0
 802459c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80245a0:	f803 2b01 	strb.w	r2, [r3], #1
 80245a4:	2a00      	cmp	r2, #0
 80245a6:	d1f9      	bne.n	802459c <strcpy+0x2>
 80245a8:	4770      	bx	lr

080245aa <memcpy>:
 80245aa:	440a      	add	r2, r1
 80245ac:	4291      	cmp	r1, r2
 80245ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80245b2:	d100      	bne.n	80245b6 <memcpy+0xc>
 80245b4:	4770      	bx	lr
 80245b6:	b510      	push	{r4, lr}
 80245b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80245bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80245c0:	4291      	cmp	r1, r2
 80245c2:	d1f9      	bne.n	80245b8 <memcpy+0xe>
 80245c4:	bd10      	pop	{r4, pc}

080245c6 <abort>:
 80245c6:	b508      	push	{r3, lr}
 80245c8:	2006      	movs	r0, #6
 80245ca:	f001 fe1b 	bl	8026204 <raise>
 80245ce:	2001      	movs	r0, #1
 80245d0:	f7de ff40 	bl	8003454 <_exit>

080245d4 <quorem>:
 80245d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245d8:	6903      	ldr	r3, [r0, #16]
 80245da:	690c      	ldr	r4, [r1, #16]
 80245dc:	42a3      	cmp	r3, r4
 80245de:	4607      	mov	r7, r0
 80245e0:	db7e      	blt.n	80246e0 <quorem+0x10c>
 80245e2:	3c01      	subs	r4, #1
 80245e4:	f101 0814 	add.w	r8, r1, #20
 80245e8:	f100 0514 	add.w	r5, r0, #20
 80245ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80245f0:	9301      	str	r3, [sp, #4]
 80245f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80245f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80245fa:	3301      	adds	r3, #1
 80245fc:	429a      	cmp	r2, r3
 80245fe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8024602:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8024606:	fbb2 f6f3 	udiv	r6, r2, r3
 802460a:	d331      	bcc.n	8024670 <quorem+0x9c>
 802460c:	f04f 0e00 	mov.w	lr, #0
 8024610:	4640      	mov	r0, r8
 8024612:	46ac      	mov	ip, r5
 8024614:	46f2      	mov	sl, lr
 8024616:	f850 2b04 	ldr.w	r2, [r0], #4
 802461a:	b293      	uxth	r3, r2
 802461c:	fb06 e303 	mla	r3, r6, r3, lr
 8024620:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8024624:	0c1a      	lsrs	r2, r3, #16
 8024626:	b29b      	uxth	r3, r3
 8024628:	ebaa 0303 	sub.w	r3, sl, r3
 802462c:	f8dc a000 	ldr.w	sl, [ip]
 8024630:	fa13 f38a 	uxtah	r3, r3, sl
 8024634:	fb06 220e 	mla	r2, r6, lr, r2
 8024638:	9300      	str	r3, [sp, #0]
 802463a:	9b00      	ldr	r3, [sp, #0]
 802463c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8024640:	b292      	uxth	r2, r2
 8024642:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8024646:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802464a:	f8bd 3000 	ldrh.w	r3, [sp]
 802464e:	4581      	cmp	r9, r0
 8024650:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8024654:	f84c 3b04 	str.w	r3, [ip], #4
 8024658:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802465c:	d2db      	bcs.n	8024616 <quorem+0x42>
 802465e:	f855 300b 	ldr.w	r3, [r5, fp]
 8024662:	b92b      	cbnz	r3, 8024670 <quorem+0x9c>
 8024664:	9b01      	ldr	r3, [sp, #4]
 8024666:	3b04      	subs	r3, #4
 8024668:	429d      	cmp	r5, r3
 802466a:	461a      	mov	r2, r3
 802466c:	d32c      	bcc.n	80246c8 <quorem+0xf4>
 802466e:	613c      	str	r4, [r7, #16]
 8024670:	4638      	mov	r0, r7
 8024672:	f001 f8f3 	bl	802585c <__mcmp>
 8024676:	2800      	cmp	r0, #0
 8024678:	db22      	blt.n	80246c0 <quorem+0xec>
 802467a:	3601      	adds	r6, #1
 802467c:	4629      	mov	r1, r5
 802467e:	2000      	movs	r0, #0
 8024680:	f858 2b04 	ldr.w	r2, [r8], #4
 8024684:	f8d1 c000 	ldr.w	ip, [r1]
 8024688:	b293      	uxth	r3, r2
 802468a:	1ac3      	subs	r3, r0, r3
 802468c:	0c12      	lsrs	r2, r2, #16
 802468e:	fa13 f38c 	uxtah	r3, r3, ip
 8024692:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8024696:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802469a:	b29b      	uxth	r3, r3
 802469c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80246a0:	45c1      	cmp	r9, r8
 80246a2:	f841 3b04 	str.w	r3, [r1], #4
 80246a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80246aa:	d2e9      	bcs.n	8024680 <quorem+0xac>
 80246ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80246b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80246b4:	b922      	cbnz	r2, 80246c0 <quorem+0xec>
 80246b6:	3b04      	subs	r3, #4
 80246b8:	429d      	cmp	r5, r3
 80246ba:	461a      	mov	r2, r3
 80246bc:	d30a      	bcc.n	80246d4 <quorem+0x100>
 80246be:	613c      	str	r4, [r7, #16]
 80246c0:	4630      	mov	r0, r6
 80246c2:	b003      	add	sp, #12
 80246c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80246c8:	6812      	ldr	r2, [r2, #0]
 80246ca:	3b04      	subs	r3, #4
 80246cc:	2a00      	cmp	r2, #0
 80246ce:	d1ce      	bne.n	802466e <quorem+0x9a>
 80246d0:	3c01      	subs	r4, #1
 80246d2:	e7c9      	b.n	8024668 <quorem+0x94>
 80246d4:	6812      	ldr	r2, [r2, #0]
 80246d6:	3b04      	subs	r3, #4
 80246d8:	2a00      	cmp	r2, #0
 80246da:	d1f0      	bne.n	80246be <quorem+0xea>
 80246dc:	3c01      	subs	r4, #1
 80246de:	e7eb      	b.n	80246b8 <quorem+0xe4>
 80246e0:	2000      	movs	r0, #0
 80246e2:	e7ee      	b.n	80246c2 <quorem+0xee>
 80246e4:	0000      	movs	r0, r0
	...

080246e8 <_dtoa_r>:
 80246e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246ec:	ed2d 8b04 	vpush	{d8-d9}
 80246f0:	69c5      	ldr	r5, [r0, #28]
 80246f2:	b093      	sub	sp, #76	; 0x4c
 80246f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80246f8:	ec57 6b10 	vmov	r6, r7, d0
 80246fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8024700:	9107      	str	r1, [sp, #28]
 8024702:	4604      	mov	r4, r0
 8024704:	920a      	str	r2, [sp, #40]	; 0x28
 8024706:	930d      	str	r3, [sp, #52]	; 0x34
 8024708:	b975      	cbnz	r5, 8024728 <_dtoa_r+0x40>
 802470a:	2010      	movs	r0, #16
 802470c:	f7fe fe30 	bl	8023370 <malloc>
 8024710:	4602      	mov	r2, r0
 8024712:	61e0      	str	r0, [r4, #28]
 8024714:	b920      	cbnz	r0, 8024720 <_dtoa_r+0x38>
 8024716:	4bae      	ldr	r3, [pc, #696]	; (80249d0 <_dtoa_r+0x2e8>)
 8024718:	21ef      	movs	r1, #239	; 0xef
 802471a:	48ae      	ldr	r0, [pc, #696]	; (80249d4 <_dtoa_r+0x2ec>)
 802471c:	f7fe fe0a 	bl	8023334 <__assert_func>
 8024720:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8024724:	6005      	str	r5, [r0, #0]
 8024726:	60c5      	str	r5, [r0, #12]
 8024728:	69e3      	ldr	r3, [r4, #28]
 802472a:	6819      	ldr	r1, [r3, #0]
 802472c:	b151      	cbz	r1, 8024744 <_dtoa_r+0x5c>
 802472e:	685a      	ldr	r2, [r3, #4]
 8024730:	604a      	str	r2, [r1, #4]
 8024732:	2301      	movs	r3, #1
 8024734:	4093      	lsls	r3, r2
 8024736:	608b      	str	r3, [r1, #8]
 8024738:	4620      	mov	r0, r4
 802473a:	f000 fe53 	bl	80253e4 <_Bfree>
 802473e:	69e3      	ldr	r3, [r4, #28]
 8024740:	2200      	movs	r2, #0
 8024742:	601a      	str	r2, [r3, #0]
 8024744:	1e3b      	subs	r3, r7, #0
 8024746:	bfbb      	ittet	lt
 8024748:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802474c:	9303      	strlt	r3, [sp, #12]
 802474e:	2300      	movge	r3, #0
 8024750:	2201      	movlt	r2, #1
 8024752:	bfac      	ite	ge
 8024754:	f8c8 3000 	strge.w	r3, [r8]
 8024758:	f8c8 2000 	strlt.w	r2, [r8]
 802475c:	4b9e      	ldr	r3, [pc, #632]	; (80249d8 <_dtoa_r+0x2f0>)
 802475e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8024762:	ea33 0308 	bics.w	r3, r3, r8
 8024766:	d11b      	bne.n	80247a0 <_dtoa_r+0xb8>
 8024768:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802476a:	f242 730f 	movw	r3, #9999	; 0x270f
 802476e:	6013      	str	r3, [r2, #0]
 8024770:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8024774:	4333      	orrs	r3, r6
 8024776:	f000 8593 	beq.w	80252a0 <_dtoa_r+0xbb8>
 802477a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802477c:	b963      	cbnz	r3, 8024798 <_dtoa_r+0xb0>
 802477e:	4b97      	ldr	r3, [pc, #604]	; (80249dc <_dtoa_r+0x2f4>)
 8024780:	e027      	b.n	80247d2 <_dtoa_r+0xea>
 8024782:	4b97      	ldr	r3, [pc, #604]	; (80249e0 <_dtoa_r+0x2f8>)
 8024784:	9300      	str	r3, [sp, #0]
 8024786:	3308      	adds	r3, #8
 8024788:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802478a:	6013      	str	r3, [r2, #0]
 802478c:	9800      	ldr	r0, [sp, #0]
 802478e:	b013      	add	sp, #76	; 0x4c
 8024790:	ecbd 8b04 	vpop	{d8-d9}
 8024794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024798:	4b90      	ldr	r3, [pc, #576]	; (80249dc <_dtoa_r+0x2f4>)
 802479a:	9300      	str	r3, [sp, #0]
 802479c:	3303      	adds	r3, #3
 802479e:	e7f3      	b.n	8024788 <_dtoa_r+0xa0>
 80247a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80247a4:	2200      	movs	r2, #0
 80247a6:	ec51 0b17 	vmov	r0, r1, d7
 80247aa:	eeb0 8a47 	vmov.f32	s16, s14
 80247ae:	eef0 8a67 	vmov.f32	s17, s15
 80247b2:	2300      	movs	r3, #0
 80247b4:	f7dc f998 	bl	8000ae8 <__aeabi_dcmpeq>
 80247b8:	4681      	mov	r9, r0
 80247ba:	b160      	cbz	r0, 80247d6 <_dtoa_r+0xee>
 80247bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80247be:	2301      	movs	r3, #1
 80247c0:	6013      	str	r3, [r2, #0]
 80247c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80247c4:	2b00      	cmp	r3, #0
 80247c6:	f000 8568 	beq.w	802529a <_dtoa_r+0xbb2>
 80247ca:	4b86      	ldr	r3, [pc, #536]	; (80249e4 <_dtoa_r+0x2fc>)
 80247cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80247ce:	6013      	str	r3, [r2, #0]
 80247d0:	3b01      	subs	r3, #1
 80247d2:	9300      	str	r3, [sp, #0]
 80247d4:	e7da      	b.n	802478c <_dtoa_r+0xa4>
 80247d6:	aa10      	add	r2, sp, #64	; 0x40
 80247d8:	a911      	add	r1, sp, #68	; 0x44
 80247da:	4620      	mov	r0, r4
 80247dc:	eeb0 0a48 	vmov.f32	s0, s16
 80247e0:	eef0 0a68 	vmov.f32	s1, s17
 80247e4:	f001 f8e0 	bl	80259a8 <__d2b>
 80247e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80247ec:	4682      	mov	sl, r0
 80247ee:	2d00      	cmp	r5, #0
 80247f0:	d07f      	beq.n	80248f2 <_dtoa_r+0x20a>
 80247f2:	ee18 3a90 	vmov	r3, s17
 80247f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80247fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80247fe:	ec51 0b18 	vmov	r0, r1, d8
 8024802:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8024806:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802480a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 802480e:	4619      	mov	r1, r3
 8024810:	2200      	movs	r2, #0
 8024812:	4b75      	ldr	r3, [pc, #468]	; (80249e8 <_dtoa_r+0x300>)
 8024814:	f7db fd48 	bl	80002a8 <__aeabi_dsub>
 8024818:	a367      	add	r3, pc, #412	; (adr r3, 80249b8 <_dtoa_r+0x2d0>)
 802481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802481e:	f7db fefb 	bl	8000618 <__aeabi_dmul>
 8024822:	a367      	add	r3, pc, #412	; (adr r3, 80249c0 <_dtoa_r+0x2d8>)
 8024824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024828:	f7db fd40 	bl	80002ac <__adddf3>
 802482c:	4606      	mov	r6, r0
 802482e:	4628      	mov	r0, r5
 8024830:	460f      	mov	r7, r1
 8024832:	f7db fe87 	bl	8000544 <__aeabi_i2d>
 8024836:	a364      	add	r3, pc, #400	; (adr r3, 80249c8 <_dtoa_r+0x2e0>)
 8024838:	e9d3 2300 	ldrd	r2, r3, [r3]
 802483c:	f7db feec 	bl	8000618 <__aeabi_dmul>
 8024840:	4602      	mov	r2, r0
 8024842:	460b      	mov	r3, r1
 8024844:	4630      	mov	r0, r6
 8024846:	4639      	mov	r1, r7
 8024848:	f7db fd30 	bl	80002ac <__adddf3>
 802484c:	4606      	mov	r6, r0
 802484e:	460f      	mov	r7, r1
 8024850:	f7dc f992 	bl	8000b78 <__aeabi_d2iz>
 8024854:	2200      	movs	r2, #0
 8024856:	4683      	mov	fp, r0
 8024858:	2300      	movs	r3, #0
 802485a:	4630      	mov	r0, r6
 802485c:	4639      	mov	r1, r7
 802485e:	f7dc f94d 	bl	8000afc <__aeabi_dcmplt>
 8024862:	b148      	cbz	r0, 8024878 <_dtoa_r+0x190>
 8024864:	4658      	mov	r0, fp
 8024866:	f7db fe6d 	bl	8000544 <__aeabi_i2d>
 802486a:	4632      	mov	r2, r6
 802486c:	463b      	mov	r3, r7
 802486e:	f7dc f93b 	bl	8000ae8 <__aeabi_dcmpeq>
 8024872:	b908      	cbnz	r0, 8024878 <_dtoa_r+0x190>
 8024874:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8024878:	f1bb 0f16 	cmp.w	fp, #22
 802487c:	d857      	bhi.n	802492e <_dtoa_r+0x246>
 802487e:	4b5b      	ldr	r3, [pc, #364]	; (80249ec <_dtoa_r+0x304>)
 8024880:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8024884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024888:	ec51 0b18 	vmov	r0, r1, d8
 802488c:	f7dc f936 	bl	8000afc <__aeabi_dcmplt>
 8024890:	2800      	cmp	r0, #0
 8024892:	d04e      	beq.n	8024932 <_dtoa_r+0x24a>
 8024894:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8024898:	2300      	movs	r3, #0
 802489a:	930c      	str	r3, [sp, #48]	; 0x30
 802489c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802489e:	1b5b      	subs	r3, r3, r5
 80248a0:	1e5a      	subs	r2, r3, #1
 80248a2:	bf45      	ittet	mi
 80248a4:	f1c3 0301 	rsbmi	r3, r3, #1
 80248a8:	9305      	strmi	r3, [sp, #20]
 80248aa:	2300      	movpl	r3, #0
 80248ac:	2300      	movmi	r3, #0
 80248ae:	9206      	str	r2, [sp, #24]
 80248b0:	bf54      	ite	pl
 80248b2:	9305      	strpl	r3, [sp, #20]
 80248b4:	9306      	strmi	r3, [sp, #24]
 80248b6:	f1bb 0f00 	cmp.w	fp, #0
 80248ba:	db3c      	blt.n	8024936 <_dtoa_r+0x24e>
 80248bc:	9b06      	ldr	r3, [sp, #24]
 80248be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80248c2:	445b      	add	r3, fp
 80248c4:	9306      	str	r3, [sp, #24]
 80248c6:	2300      	movs	r3, #0
 80248c8:	9308      	str	r3, [sp, #32]
 80248ca:	9b07      	ldr	r3, [sp, #28]
 80248cc:	2b09      	cmp	r3, #9
 80248ce:	d868      	bhi.n	80249a2 <_dtoa_r+0x2ba>
 80248d0:	2b05      	cmp	r3, #5
 80248d2:	bfc4      	itt	gt
 80248d4:	3b04      	subgt	r3, #4
 80248d6:	9307      	strgt	r3, [sp, #28]
 80248d8:	9b07      	ldr	r3, [sp, #28]
 80248da:	f1a3 0302 	sub.w	r3, r3, #2
 80248de:	bfcc      	ite	gt
 80248e0:	2500      	movgt	r5, #0
 80248e2:	2501      	movle	r5, #1
 80248e4:	2b03      	cmp	r3, #3
 80248e6:	f200 8085 	bhi.w	80249f4 <_dtoa_r+0x30c>
 80248ea:	e8df f003 	tbb	[pc, r3]
 80248ee:	3b2e      	.short	0x3b2e
 80248f0:	5839      	.short	0x5839
 80248f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80248f6:	441d      	add	r5, r3
 80248f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80248fc:	2b20      	cmp	r3, #32
 80248fe:	bfc1      	itttt	gt
 8024900:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8024904:	fa08 f803 	lslgt.w	r8, r8, r3
 8024908:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 802490c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8024910:	bfd6      	itet	le
 8024912:	f1c3 0320 	rsble	r3, r3, #32
 8024916:	ea48 0003 	orrgt.w	r0, r8, r3
 802491a:	fa06 f003 	lslle.w	r0, r6, r3
 802491e:	f7db fe01 	bl	8000524 <__aeabi_ui2d>
 8024922:	2201      	movs	r2, #1
 8024924:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8024928:	3d01      	subs	r5, #1
 802492a:	920e      	str	r2, [sp, #56]	; 0x38
 802492c:	e76f      	b.n	802480e <_dtoa_r+0x126>
 802492e:	2301      	movs	r3, #1
 8024930:	e7b3      	b.n	802489a <_dtoa_r+0x1b2>
 8024932:	900c      	str	r0, [sp, #48]	; 0x30
 8024934:	e7b2      	b.n	802489c <_dtoa_r+0x1b4>
 8024936:	9b05      	ldr	r3, [sp, #20]
 8024938:	eba3 030b 	sub.w	r3, r3, fp
 802493c:	9305      	str	r3, [sp, #20]
 802493e:	f1cb 0300 	rsb	r3, fp, #0
 8024942:	9308      	str	r3, [sp, #32]
 8024944:	2300      	movs	r3, #0
 8024946:	930b      	str	r3, [sp, #44]	; 0x2c
 8024948:	e7bf      	b.n	80248ca <_dtoa_r+0x1e2>
 802494a:	2300      	movs	r3, #0
 802494c:	9309      	str	r3, [sp, #36]	; 0x24
 802494e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024950:	2b00      	cmp	r3, #0
 8024952:	dc52      	bgt.n	80249fa <_dtoa_r+0x312>
 8024954:	2301      	movs	r3, #1
 8024956:	9301      	str	r3, [sp, #4]
 8024958:	9304      	str	r3, [sp, #16]
 802495a:	461a      	mov	r2, r3
 802495c:	920a      	str	r2, [sp, #40]	; 0x28
 802495e:	e00b      	b.n	8024978 <_dtoa_r+0x290>
 8024960:	2301      	movs	r3, #1
 8024962:	e7f3      	b.n	802494c <_dtoa_r+0x264>
 8024964:	2300      	movs	r3, #0
 8024966:	9309      	str	r3, [sp, #36]	; 0x24
 8024968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802496a:	445b      	add	r3, fp
 802496c:	9301      	str	r3, [sp, #4]
 802496e:	3301      	adds	r3, #1
 8024970:	2b01      	cmp	r3, #1
 8024972:	9304      	str	r3, [sp, #16]
 8024974:	bfb8      	it	lt
 8024976:	2301      	movlt	r3, #1
 8024978:	69e0      	ldr	r0, [r4, #28]
 802497a:	2100      	movs	r1, #0
 802497c:	2204      	movs	r2, #4
 802497e:	f102 0614 	add.w	r6, r2, #20
 8024982:	429e      	cmp	r6, r3
 8024984:	d93d      	bls.n	8024a02 <_dtoa_r+0x31a>
 8024986:	6041      	str	r1, [r0, #4]
 8024988:	4620      	mov	r0, r4
 802498a:	f000 fceb 	bl	8025364 <_Balloc>
 802498e:	9000      	str	r0, [sp, #0]
 8024990:	2800      	cmp	r0, #0
 8024992:	d139      	bne.n	8024a08 <_dtoa_r+0x320>
 8024994:	4b16      	ldr	r3, [pc, #88]	; (80249f0 <_dtoa_r+0x308>)
 8024996:	4602      	mov	r2, r0
 8024998:	f240 11af 	movw	r1, #431	; 0x1af
 802499c:	e6bd      	b.n	802471a <_dtoa_r+0x32>
 802499e:	2301      	movs	r3, #1
 80249a0:	e7e1      	b.n	8024966 <_dtoa_r+0x27e>
 80249a2:	2501      	movs	r5, #1
 80249a4:	2300      	movs	r3, #0
 80249a6:	9307      	str	r3, [sp, #28]
 80249a8:	9509      	str	r5, [sp, #36]	; 0x24
 80249aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80249ae:	9301      	str	r3, [sp, #4]
 80249b0:	9304      	str	r3, [sp, #16]
 80249b2:	2200      	movs	r2, #0
 80249b4:	2312      	movs	r3, #18
 80249b6:	e7d1      	b.n	802495c <_dtoa_r+0x274>
 80249b8:	636f4361 	.word	0x636f4361
 80249bc:	3fd287a7 	.word	0x3fd287a7
 80249c0:	8b60c8b3 	.word	0x8b60c8b3
 80249c4:	3fc68a28 	.word	0x3fc68a28
 80249c8:	509f79fb 	.word	0x509f79fb
 80249cc:	3fd34413 	.word	0x3fd34413
 80249d0:	0802b5bc 	.word	0x0802b5bc
 80249d4:	0802b76d 	.word	0x0802b76d
 80249d8:	7ff00000 	.word	0x7ff00000
 80249dc:	0802b769 	.word	0x0802b769
 80249e0:	0802b760 	.word	0x0802b760
 80249e4:	0802b73d 	.word	0x0802b73d
 80249e8:	3ff80000 	.word	0x3ff80000
 80249ec:	0802b858 	.word	0x0802b858
 80249f0:	0802b7c5 	.word	0x0802b7c5
 80249f4:	2301      	movs	r3, #1
 80249f6:	9309      	str	r3, [sp, #36]	; 0x24
 80249f8:	e7d7      	b.n	80249aa <_dtoa_r+0x2c2>
 80249fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80249fc:	9301      	str	r3, [sp, #4]
 80249fe:	9304      	str	r3, [sp, #16]
 8024a00:	e7ba      	b.n	8024978 <_dtoa_r+0x290>
 8024a02:	3101      	adds	r1, #1
 8024a04:	0052      	lsls	r2, r2, #1
 8024a06:	e7ba      	b.n	802497e <_dtoa_r+0x296>
 8024a08:	69e3      	ldr	r3, [r4, #28]
 8024a0a:	9a00      	ldr	r2, [sp, #0]
 8024a0c:	601a      	str	r2, [r3, #0]
 8024a0e:	9b04      	ldr	r3, [sp, #16]
 8024a10:	2b0e      	cmp	r3, #14
 8024a12:	f200 80a8 	bhi.w	8024b66 <_dtoa_r+0x47e>
 8024a16:	2d00      	cmp	r5, #0
 8024a18:	f000 80a5 	beq.w	8024b66 <_dtoa_r+0x47e>
 8024a1c:	f1bb 0f00 	cmp.w	fp, #0
 8024a20:	dd38      	ble.n	8024a94 <_dtoa_r+0x3ac>
 8024a22:	4bc0      	ldr	r3, [pc, #768]	; (8024d24 <_dtoa_r+0x63c>)
 8024a24:	f00b 020f 	and.w	r2, fp, #15
 8024a28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8024a2c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8024a30:	e9d3 6700 	ldrd	r6, r7, [r3]
 8024a34:	ea4f 182b 	mov.w	r8, fp, asr #4
 8024a38:	d019      	beq.n	8024a6e <_dtoa_r+0x386>
 8024a3a:	4bbb      	ldr	r3, [pc, #748]	; (8024d28 <_dtoa_r+0x640>)
 8024a3c:	ec51 0b18 	vmov	r0, r1, d8
 8024a40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8024a44:	f7db ff12 	bl	800086c <__aeabi_ddiv>
 8024a48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024a4c:	f008 080f 	and.w	r8, r8, #15
 8024a50:	2503      	movs	r5, #3
 8024a52:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8024d28 <_dtoa_r+0x640>
 8024a56:	f1b8 0f00 	cmp.w	r8, #0
 8024a5a:	d10a      	bne.n	8024a72 <_dtoa_r+0x38a>
 8024a5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024a60:	4632      	mov	r2, r6
 8024a62:	463b      	mov	r3, r7
 8024a64:	f7db ff02 	bl	800086c <__aeabi_ddiv>
 8024a68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024a6c:	e02b      	b.n	8024ac6 <_dtoa_r+0x3de>
 8024a6e:	2502      	movs	r5, #2
 8024a70:	e7ef      	b.n	8024a52 <_dtoa_r+0x36a>
 8024a72:	f018 0f01 	tst.w	r8, #1
 8024a76:	d008      	beq.n	8024a8a <_dtoa_r+0x3a2>
 8024a78:	4630      	mov	r0, r6
 8024a7a:	4639      	mov	r1, r7
 8024a7c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8024a80:	f7db fdca 	bl	8000618 <__aeabi_dmul>
 8024a84:	3501      	adds	r5, #1
 8024a86:	4606      	mov	r6, r0
 8024a88:	460f      	mov	r7, r1
 8024a8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8024a8e:	f109 0908 	add.w	r9, r9, #8
 8024a92:	e7e0      	b.n	8024a56 <_dtoa_r+0x36e>
 8024a94:	f000 809f 	beq.w	8024bd6 <_dtoa_r+0x4ee>
 8024a98:	f1cb 0600 	rsb	r6, fp, #0
 8024a9c:	4ba1      	ldr	r3, [pc, #644]	; (8024d24 <_dtoa_r+0x63c>)
 8024a9e:	4fa2      	ldr	r7, [pc, #648]	; (8024d28 <_dtoa_r+0x640>)
 8024aa0:	f006 020f 	and.w	r2, r6, #15
 8024aa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8024aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024aac:	ec51 0b18 	vmov	r0, r1, d8
 8024ab0:	f7db fdb2 	bl	8000618 <__aeabi_dmul>
 8024ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024ab8:	1136      	asrs	r6, r6, #4
 8024aba:	2300      	movs	r3, #0
 8024abc:	2502      	movs	r5, #2
 8024abe:	2e00      	cmp	r6, #0
 8024ac0:	d17e      	bne.n	8024bc0 <_dtoa_r+0x4d8>
 8024ac2:	2b00      	cmp	r3, #0
 8024ac4:	d1d0      	bne.n	8024a68 <_dtoa_r+0x380>
 8024ac6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024ac8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8024acc:	2b00      	cmp	r3, #0
 8024ace:	f000 8084 	beq.w	8024bda <_dtoa_r+0x4f2>
 8024ad2:	4b96      	ldr	r3, [pc, #600]	; (8024d2c <_dtoa_r+0x644>)
 8024ad4:	2200      	movs	r2, #0
 8024ad6:	4640      	mov	r0, r8
 8024ad8:	4649      	mov	r1, r9
 8024ada:	f7dc f80f 	bl	8000afc <__aeabi_dcmplt>
 8024ade:	2800      	cmp	r0, #0
 8024ae0:	d07b      	beq.n	8024bda <_dtoa_r+0x4f2>
 8024ae2:	9b04      	ldr	r3, [sp, #16]
 8024ae4:	2b00      	cmp	r3, #0
 8024ae6:	d078      	beq.n	8024bda <_dtoa_r+0x4f2>
 8024ae8:	9b01      	ldr	r3, [sp, #4]
 8024aea:	2b00      	cmp	r3, #0
 8024aec:	dd39      	ble.n	8024b62 <_dtoa_r+0x47a>
 8024aee:	4b90      	ldr	r3, [pc, #576]	; (8024d30 <_dtoa_r+0x648>)
 8024af0:	2200      	movs	r2, #0
 8024af2:	4640      	mov	r0, r8
 8024af4:	4649      	mov	r1, r9
 8024af6:	f7db fd8f 	bl	8000618 <__aeabi_dmul>
 8024afa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024afe:	9e01      	ldr	r6, [sp, #4]
 8024b00:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8024b04:	3501      	adds	r5, #1
 8024b06:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8024b0a:	4628      	mov	r0, r5
 8024b0c:	f7db fd1a 	bl	8000544 <__aeabi_i2d>
 8024b10:	4642      	mov	r2, r8
 8024b12:	464b      	mov	r3, r9
 8024b14:	f7db fd80 	bl	8000618 <__aeabi_dmul>
 8024b18:	4b86      	ldr	r3, [pc, #536]	; (8024d34 <_dtoa_r+0x64c>)
 8024b1a:	2200      	movs	r2, #0
 8024b1c:	f7db fbc6 	bl	80002ac <__adddf3>
 8024b20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8024b24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024b28:	9303      	str	r3, [sp, #12]
 8024b2a:	2e00      	cmp	r6, #0
 8024b2c:	d158      	bne.n	8024be0 <_dtoa_r+0x4f8>
 8024b2e:	4b82      	ldr	r3, [pc, #520]	; (8024d38 <_dtoa_r+0x650>)
 8024b30:	2200      	movs	r2, #0
 8024b32:	4640      	mov	r0, r8
 8024b34:	4649      	mov	r1, r9
 8024b36:	f7db fbb7 	bl	80002a8 <__aeabi_dsub>
 8024b3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8024b3e:	4680      	mov	r8, r0
 8024b40:	4689      	mov	r9, r1
 8024b42:	f7db fff9 	bl	8000b38 <__aeabi_dcmpgt>
 8024b46:	2800      	cmp	r0, #0
 8024b48:	f040 8296 	bne.w	8025078 <_dtoa_r+0x990>
 8024b4c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8024b50:	4640      	mov	r0, r8
 8024b52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024b56:	4649      	mov	r1, r9
 8024b58:	f7db ffd0 	bl	8000afc <__aeabi_dcmplt>
 8024b5c:	2800      	cmp	r0, #0
 8024b5e:	f040 8289 	bne.w	8025074 <_dtoa_r+0x98c>
 8024b62:	ed8d 8b02 	vstr	d8, [sp, #8]
 8024b66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024b68:	2b00      	cmp	r3, #0
 8024b6a:	f2c0 814e 	blt.w	8024e0a <_dtoa_r+0x722>
 8024b6e:	f1bb 0f0e 	cmp.w	fp, #14
 8024b72:	f300 814a 	bgt.w	8024e0a <_dtoa_r+0x722>
 8024b76:	4b6b      	ldr	r3, [pc, #428]	; (8024d24 <_dtoa_r+0x63c>)
 8024b78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8024b7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8024b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024b82:	2b00      	cmp	r3, #0
 8024b84:	f280 80dc 	bge.w	8024d40 <_dtoa_r+0x658>
 8024b88:	9b04      	ldr	r3, [sp, #16]
 8024b8a:	2b00      	cmp	r3, #0
 8024b8c:	f300 80d8 	bgt.w	8024d40 <_dtoa_r+0x658>
 8024b90:	f040 826f 	bne.w	8025072 <_dtoa_r+0x98a>
 8024b94:	4b68      	ldr	r3, [pc, #416]	; (8024d38 <_dtoa_r+0x650>)
 8024b96:	2200      	movs	r2, #0
 8024b98:	4640      	mov	r0, r8
 8024b9a:	4649      	mov	r1, r9
 8024b9c:	f7db fd3c 	bl	8000618 <__aeabi_dmul>
 8024ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8024ba4:	f7db ffbe 	bl	8000b24 <__aeabi_dcmpge>
 8024ba8:	9e04      	ldr	r6, [sp, #16]
 8024baa:	4637      	mov	r7, r6
 8024bac:	2800      	cmp	r0, #0
 8024bae:	f040 8245 	bne.w	802503c <_dtoa_r+0x954>
 8024bb2:	9d00      	ldr	r5, [sp, #0]
 8024bb4:	2331      	movs	r3, #49	; 0x31
 8024bb6:	f805 3b01 	strb.w	r3, [r5], #1
 8024bba:	f10b 0b01 	add.w	fp, fp, #1
 8024bbe:	e241      	b.n	8025044 <_dtoa_r+0x95c>
 8024bc0:	07f2      	lsls	r2, r6, #31
 8024bc2:	d505      	bpl.n	8024bd0 <_dtoa_r+0x4e8>
 8024bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8024bc8:	f7db fd26 	bl	8000618 <__aeabi_dmul>
 8024bcc:	3501      	adds	r5, #1
 8024bce:	2301      	movs	r3, #1
 8024bd0:	1076      	asrs	r6, r6, #1
 8024bd2:	3708      	adds	r7, #8
 8024bd4:	e773      	b.n	8024abe <_dtoa_r+0x3d6>
 8024bd6:	2502      	movs	r5, #2
 8024bd8:	e775      	b.n	8024ac6 <_dtoa_r+0x3de>
 8024bda:	9e04      	ldr	r6, [sp, #16]
 8024bdc:	465f      	mov	r7, fp
 8024bde:	e792      	b.n	8024b06 <_dtoa_r+0x41e>
 8024be0:	9900      	ldr	r1, [sp, #0]
 8024be2:	4b50      	ldr	r3, [pc, #320]	; (8024d24 <_dtoa_r+0x63c>)
 8024be4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024be8:	4431      	add	r1, r6
 8024bea:	9102      	str	r1, [sp, #8]
 8024bec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024bee:	eeb0 9a47 	vmov.f32	s18, s14
 8024bf2:	eef0 9a67 	vmov.f32	s19, s15
 8024bf6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8024bfa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8024bfe:	2900      	cmp	r1, #0
 8024c00:	d044      	beq.n	8024c8c <_dtoa_r+0x5a4>
 8024c02:	494e      	ldr	r1, [pc, #312]	; (8024d3c <_dtoa_r+0x654>)
 8024c04:	2000      	movs	r0, #0
 8024c06:	f7db fe31 	bl	800086c <__aeabi_ddiv>
 8024c0a:	ec53 2b19 	vmov	r2, r3, d9
 8024c0e:	f7db fb4b 	bl	80002a8 <__aeabi_dsub>
 8024c12:	9d00      	ldr	r5, [sp, #0]
 8024c14:	ec41 0b19 	vmov	d9, r0, r1
 8024c18:	4649      	mov	r1, r9
 8024c1a:	4640      	mov	r0, r8
 8024c1c:	f7db ffac 	bl	8000b78 <__aeabi_d2iz>
 8024c20:	4606      	mov	r6, r0
 8024c22:	f7db fc8f 	bl	8000544 <__aeabi_i2d>
 8024c26:	4602      	mov	r2, r0
 8024c28:	460b      	mov	r3, r1
 8024c2a:	4640      	mov	r0, r8
 8024c2c:	4649      	mov	r1, r9
 8024c2e:	f7db fb3b 	bl	80002a8 <__aeabi_dsub>
 8024c32:	3630      	adds	r6, #48	; 0x30
 8024c34:	f805 6b01 	strb.w	r6, [r5], #1
 8024c38:	ec53 2b19 	vmov	r2, r3, d9
 8024c3c:	4680      	mov	r8, r0
 8024c3e:	4689      	mov	r9, r1
 8024c40:	f7db ff5c 	bl	8000afc <__aeabi_dcmplt>
 8024c44:	2800      	cmp	r0, #0
 8024c46:	d164      	bne.n	8024d12 <_dtoa_r+0x62a>
 8024c48:	4642      	mov	r2, r8
 8024c4a:	464b      	mov	r3, r9
 8024c4c:	4937      	ldr	r1, [pc, #220]	; (8024d2c <_dtoa_r+0x644>)
 8024c4e:	2000      	movs	r0, #0
 8024c50:	f7db fb2a 	bl	80002a8 <__aeabi_dsub>
 8024c54:	ec53 2b19 	vmov	r2, r3, d9
 8024c58:	f7db ff50 	bl	8000afc <__aeabi_dcmplt>
 8024c5c:	2800      	cmp	r0, #0
 8024c5e:	f040 80b6 	bne.w	8024dce <_dtoa_r+0x6e6>
 8024c62:	9b02      	ldr	r3, [sp, #8]
 8024c64:	429d      	cmp	r5, r3
 8024c66:	f43f af7c 	beq.w	8024b62 <_dtoa_r+0x47a>
 8024c6a:	4b31      	ldr	r3, [pc, #196]	; (8024d30 <_dtoa_r+0x648>)
 8024c6c:	ec51 0b19 	vmov	r0, r1, d9
 8024c70:	2200      	movs	r2, #0
 8024c72:	f7db fcd1 	bl	8000618 <__aeabi_dmul>
 8024c76:	4b2e      	ldr	r3, [pc, #184]	; (8024d30 <_dtoa_r+0x648>)
 8024c78:	ec41 0b19 	vmov	d9, r0, r1
 8024c7c:	2200      	movs	r2, #0
 8024c7e:	4640      	mov	r0, r8
 8024c80:	4649      	mov	r1, r9
 8024c82:	f7db fcc9 	bl	8000618 <__aeabi_dmul>
 8024c86:	4680      	mov	r8, r0
 8024c88:	4689      	mov	r9, r1
 8024c8a:	e7c5      	b.n	8024c18 <_dtoa_r+0x530>
 8024c8c:	ec51 0b17 	vmov	r0, r1, d7
 8024c90:	f7db fcc2 	bl	8000618 <__aeabi_dmul>
 8024c94:	9b02      	ldr	r3, [sp, #8]
 8024c96:	9d00      	ldr	r5, [sp, #0]
 8024c98:	930f      	str	r3, [sp, #60]	; 0x3c
 8024c9a:	ec41 0b19 	vmov	d9, r0, r1
 8024c9e:	4649      	mov	r1, r9
 8024ca0:	4640      	mov	r0, r8
 8024ca2:	f7db ff69 	bl	8000b78 <__aeabi_d2iz>
 8024ca6:	4606      	mov	r6, r0
 8024ca8:	f7db fc4c 	bl	8000544 <__aeabi_i2d>
 8024cac:	3630      	adds	r6, #48	; 0x30
 8024cae:	4602      	mov	r2, r0
 8024cb0:	460b      	mov	r3, r1
 8024cb2:	4640      	mov	r0, r8
 8024cb4:	4649      	mov	r1, r9
 8024cb6:	f7db faf7 	bl	80002a8 <__aeabi_dsub>
 8024cba:	f805 6b01 	strb.w	r6, [r5], #1
 8024cbe:	9b02      	ldr	r3, [sp, #8]
 8024cc0:	429d      	cmp	r5, r3
 8024cc2:	4680      	mov	r8, r0
 8024cc4:	4689      	mov	r9, r1
 8024cc6:	f04f 0200 	mov.w	r2, #0
 8024cca:	d124      	bne.n	8024d16 <_dtoa_r+0x62e>
 8024ccc:	4b1b      	ldr	r3, [pc, #108]	; (8024d3c <_dtoa_r+0x654>)
 8024cce:	ec51 0b19 	vmov	r0, r1, d9
 8024cd2:	f7db faeb 	bl	80002ac <__adddf3>
 8024cd6:	4602      	mov	r2, r0
 8024cd8:	460b      	mov	r3, r1
 8024cda:	4640      	mov	r0, r8
 8024cdc:	4649      	mov	r1, r9
 8024cde:	f7db ff2b 	bl	8000b38 <__aeabi_dcmpgt>
 8024ce2:	2800      	cmp	r0, #0
 8024ce4:	d173      	bne.n	8024dce <_dtoa_r+0x6e6>
 8024ce6:	ec53 2b19 	vmov	r2, r3, d9
 8024cea:	4914      	ldr	r1, [pc, #80]	; (8024d3c <_dtoa_r+0x654>)
 8024cec:	2000      	movs	r0, #0
 8024cee:	f7db fadb 	bl	80002a8 <__aeabi_dsub>
 8024cf2:	4602      	mov	r2, r0
 8024cf4:	460b      	mov	r3, r1
 8024cf6:	4640      	mov	r0, r8
 8024cf8:	4649      	mov	r1, r9
 8024cfa:	f7db feff 	bl	8000afc <__aeabi_dcmplt>
 8024cfe:	2800      	cmp	r0, #0
 8024d00:	f43f af2f 	beq.w	8024b62 <_dtoa_r+0x47a>
 8024d04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024d06:	1e6b      	subs	r3, r5, #1
 8024d08:	930f      	str	r3, [sp, #60]	; 0x3c
 8024d0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8024d0e:	2b30      	cmp	r3, #48	; 0x30
 8024d10:	d0f8      	beq.n	8024d04 <_dtoa_r+0x61c>
 8024d12:	46bb      	mov	fp, r7
 8024d14:	e04a      	b.n	8024dac <_dtoa_r+0x6c4>
 8024d16:	4b06      	ldr	r3, [pc, #24]	; (8024d30 <_dtoa_r+0x648>)
 8024d18:	f7db fc7e 	bl	8000618 <__aeabi_dmul>
 8024d1c:	4680      	mov	r8, r0
 8024d1e:	4689      	mov	r9, r1
 8024d20:	e7bd      	b.n	8024c9e <_dtoa_r+0x5b6>
 8024d22:	bf00      	nop
 8024d24:	0802b858 	.word	0x0802b858
 8024d28:	0802b830 	.word	0x0802b830
 8024d2c:	3ff00000 	.word	0x3ff00000
 8024d30:	40240000 	.word	0x40240000
 8024d34:	401c0000 	.word	0x401c0000
 8024d38:	40140000 	.word	0x40140000
 8024d3c:	3fe00000 	.word	0x3fe00000
 8024d40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8024d44:	9d00      	ldr	r5, [sp, #0]
 8024d46:	4642      	mov	r2, r8
 8024d48:	464b      	mov	r3, r9
 8024d4a:	4630      	mov	r0, r6
 8024d4c:	4639      	mov	r1, r7
 8024d4e:	f7db fd8d 	bl	800086c <__aeabi_ddiv>
 8024d52:	f7db ff11 	bl	8000b78 <__aeabi_d2iz>
 8024d56:	9001      	str	r0, [sp, #4]
 8024d58:	f7db fbf4 	bl	8000544 <__aeabi_i2d>
 8024d5c:	4642      	mov	r2, r8
 8024d5e:	464b      	mov	r3, r9
 8024d60:	f7db fc5a 	bl	8000618 <__aeabi_dmul>
 8024d64:	4602      	mov	r2, r0
 8024d66:	460b      	mov	r3, r1
 8024d68:	4630      	mov	r0, r6
 8024d6a:	4639      	mov	r1, r7
 8024d6c:	f7db fa9c 	bl	80002a8 <__aeabi_dsub>
 8024d70:	9e01      	ldr	r6, [sp, #4]
 8024d72:	9f04      	ldr	r7, [sp, #16]
 8024d74:	3630      	adds	r6, #48	; 0x30
 8024d76:	f805 6b01 	strb.w	r6, [r5], #1
 8024d7a:	9e00      	ldr	r6, [sp, #0]
 8024d7c:	1bae      	subs	r6, r5, r6
 8024d7e:	42b7      	cmp	r7, r6
 8024d80:	4602      	mov	r2, r0
 8024d82:	460b      	mov	r3, r1
 8024d84:	d134      	bne.n	8024df0 <_dtoa_r+0x708>
 8024d86:	f7db fa91 	bl	80002ac <__adddf3>
 8024d8a:	4642      	mov	r2, r8
 8024d8c:	464b      	mov	r3, r9
 8024d8e:	4606      	mov	r6, r0
 8024d90:	460f      	mov	r7, r1
 8024d92:	f7db fed1 	bl	8000b38 <__aeabi_dcmpgt>
 8024d96:	b9c8      	cbnz	r0, 8024dcc <_dtoa_r+0x6e4>
 8024d98:	4642      	mov	r2, r8
 8024d9a:	464b      	mov	r3, r9
 8024d9c:	4630      	mov	r0, r6
 8024d9e:	4639      	mov	r1, r7
 8024da0:	f7db fea2 	bl	8000ae8 <__aeabi_dcmpeq>
 8024da4:	b110      	cbz	r0, 8024dac <_dtoa_r+0x6c4>
 8024da6:	9b01      	ldr	r3, [sp, #4]
 8024da8:	07db      	lsls	r3, r3, #31
 8024daa:	d40f      	bmi.n	8024dcc <_dtoa_r+0x6e4>
 8024dac:	4651      	mov	r1, sl
 8024dae:	4620      	mov	r0, r4
 8024db0:	f000 fb18 	bl	80253e4 <_Bfree>
 8024db4:	2300      	movs	r3, #0
 8024db6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024db8:	702b      	strb	r3, [r5, #0]
 8024dba:	f10b 0301 	add.w	r3, fp, #1
 8024dbe:	6013      	str	r3, [r2, #0]
 8024dc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024dc2:	2b00      	cmp	r3, #0
 8024dc4:	f43f ace2 	beq.w	802478c <_dtoa_r+0xa4>
 8024dc8:	601d      	str	r5, [r3, #0]
 8024dca:	e4df      	b.n	802478c <_dtoa_r+0xa4>
 8024dcc:	465f      	mov	r7, fp
 8024dce:	462b      	mov	r3, r5
 8024dd0:	461d      	mov	r5, r3
 8024dd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8024dd6:	2a39      	cmp	r2, #57	; 0x39
 8024dd8:	d106      	bne.n	8024de8 <_dtoa_r+0x700>
 8024dda:	9a00      	ldr	r2, [sp, #0]
 8024ddc:	429a      	cmp	r2, r3
 8024dde:	d1f7      	bne.n	8024dd0 <_dtoa_r+0x6e8>
 8024de0:	9900      	ldr	r1, [sp, #0]
 8024de2:	2230      	movs	r2, #48	; 0x30
 8024de4:	3701      	adds	r7, #1
 8024de6:	700a      	strb	r2, [r1, #0]
 8024de8:	781a      	ldrb	r2, [r3, #0]
 8024dea:	3201      	adds	r2, #1
 8024dec:	701a      	strb	r2, [r3, #0]
 8024dee:	e790      	b.n	8024d12 <_dtoa_r+0x62a>
 8024df0:	4ba3      	ldr	r3, [pc, #652]	; (8025080 <_dtoa_r+0x998>)
 8024df2:	2200      	movs	r2, #0
 8024df4:	f7db fc10 	bl	8000618 <__aeabi_dmul>
 8024df8:	2200      	movs	r2, #0
 8024dfa:	2300      	movs	r3, #0
 8024dfc:	4606      	mov	r6, r0
 8024dfe:	460f      	mov	r7, r1
 8024e00:	f7db fe72 	bl	8000ae8 <__aeabi_dcmpeq>
 8024e04:	2800      	cmp	r0, #0
 8024e06:	d09e      	beq.n	8024d46 <_dtoa_r+0x65e>
 8024e08:	e7d0      	b.n	8024dac <_dtoa_r+0x6c4>
 8024e0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024e0c:	2a00      	cmp	r2, #0
 8024e0e:	f000 80ca 	beq.w	8024fa6 <_dtoa_r+0x8be>
 8024e12:	9a07      	ldr	r2, [sp, #28]
 8024e14:	2a01      	cmp	r2, #1
 8024e16:	f300 80ad 	bgt.w	8024f74 <_dtoa_r+0x88c>
 8024e1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024e1c:	2a00      	cmp	r2, #0
 8024e1e:	f000 80a5 	beq.w	8024f6c <_dtoa_r+0x884>
 8024e22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8024e26:	9e08      	ldr	r6, [sp, #32]
 8024e28:	9d05      	ldr	r5, [sp, #20]
 8024e2a:	9a05      	ldr	r2, [sp, #20]
 8024e2c:	441a      	add	r2, r3
 8024e2e:	9205      	str	r2, [sp, #20]
 8024e30:	9a06      	ldr	r2, [sp, #24]
 8024e32:	2101      	movs	r1, #1
 8024e34:	441a      	add	r2, r3
 8024e36:	4620      	mov	r0, r4
 8024e38:	9206      	str	r2, [sp, #24]
 8024e3a:	f000 fb89 	bl	8025550 <__i2b>
 8024e3e:	4607      	mov	r7, r0
 8024e40:	b165      	cbz	r5, 8024e5c <_dtoa_r+0x774>
 8024e42:	9b06      	ldr	r3, [sp, #24]
 8024e44:	2b00      	cmp	r3, #0
 8024e46:	dd09      	ble.n	8024e5c <_dtoa_r+0x774>
 8024e48:	42ab      	cmp	r3, r5
 8024e4a:	9a05      	ldr	r2, [sp, #20]
 8024e4c:	bfa8      	it	ge
 8024e4e:	462b      	movge	r3, r5
 8024e50:	1ad2      	subs	r2, r2, r3
 8024e52:	9205      	str	r2, [sp, #20]
 8024e54:	9a06      	ldr	r2, [sp, #24]
 8024e56:	1aed      	subs	r5, r5, r3
 8024e58:	1ad3      	subs	r3, r2, r3
 8024e5a:	9306      	str	r3, [sp, #24]
 8024e5c:	9b08      	ldr	r3, [sp, #32]
 8024e5e:	b1f3      	cbz	r3, 8024e9e <_dtoa_r+0x7b6>
 8024e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e62:	2b00      	cmp	r3, #0
 8024e64:	f000 80a3 	beq.w	8024fae <_dtoa_r+0x8c6>
 8024e68:	2e00      	cmp	r6, #0
 8024e6a:	dd10      	ble.n	8024e8e <_dtoa_r+0x7a6>
 8024e6c:	4639      	mov	r1, r7
 8024e6e:	4632      	mov	r2, r6
 8024e70:	4620      	mov	r0, r4
 8024e72:	f000 fc2d 	bl	80256d0 <__pow5mult>
 8024e76:	4652      	mov	r2, sl
 8024e78:	4601      	mov	r1, r0
 8024e7a:	4607      	mov	r7, r0
 8024e7c:	4620      	mov	r0, r4
 8024e7e:	f000 fb7d 	bl	802557c <__multiply>
 8024e82:	4651      	mov	r1, sl
 8024e84:	4680      	mov	r8, r0
 8024e86:	4620      	mov	r0, r4
 8024e88:	f000 faac 	bl	80253e4 <_Bfree>
 8024e8c:	46c2      	mov	sl, r8
 8024e8e:	9b08      	ldr	r3, [sp, #32]
 8024e90:	1b9a      	subs	r2, r3, r6
 8024e92:	d004      	beq.n	8024e9e <_dtoa_r+0x7b6>
 8024e94:	4651      	mov	r1, sl
 8024e96:	4620      	mov	r0, r4
 8024e98:	f000 fc1a 	bl	80256d0 <__pow5mult>
 8024e9c:	4682      	mov	sl, r0
 8024e9e:	2101      	movs	r1, #1
 8024ea0:	4620      	mov	r0, r4
 8024ea2:	f000 fb55 	bl	8025550 <__i2b>
 8024ea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024ea8:	2b00      	cmp	r3, #0
 8024eaa:	4606      	mov	r6, r0
 8024eac:	f340 8081 	ble.w	8024fb2 <_dtoa_r+0x8ca>
 8024eb0:	461a      	mov	r2, r3
 8024eb2:	4601      	mov	r1, r0
 8024eb4:	4620      	mov	r0, r4
 8024eb6:	f000 fc0b 	bl	80256d0 <__pow5mult>
 8024eba:	9b07      	ldr	r3, [sp, #28]
 8024ebc:	2b01      	cmp	r3, #1
 8024ebe:	4606      	mov	r6, r0
 8024ec0:	dd7a      	ble.n	8024fb8 <_dtoa_r+0x8d0>
 8024ec2:	f04f 0800 	mov.w	r8, #0
 8024ec6:	6933      	ldr	r3, [r6, #16]
 8024ec8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8024ecc:	6918      	ldr	r0, [r3, #16]
 8024ece:	f000 faf1 	bl	80254b4 <__hi0bits>
 8024ed2:	f1c0 0020 	rsb	r0, r0, #32
 8024ed6:	9b06      	ldr	r3, [sp, #24]
 8024ed8:	4418      	add	r0, r3
 8024eda:	f010 001f 	ands.w	r0, r0, #31
 8024ede:	f000 8094 	beq.w	802500a <_dtoa_r+0x922>
 8024ee2:	f1c0 0320 	rsb	r3, r0, #32
 8024ee6:	2b04      	cmp	r3, #4
 8024ee8:	f340 8085 	ble.w	8024ff6 <_dtoa_r+0x90e>
 8024eec:	9b05      	ldr	r3, [sp, #20]
 8024eee:	f1c0 001c 	rsb	r0, r0, #28
 8024ef2:	4403      	add	r3, r0
 8024ef4:	9305      	str	r3, [sp, #20]
 8024ef6:	9b06      	ldr	r3, [sp, #24]
 8024ef8:	4403      	add	r3, r0
 8024efa:	4405      	add	r5, r0
 8024efc:	9306      	str	r3, [sp, #24]
 8024efe:	9b05      	ldr	r3, [sp, #20]
 8024f00:	2b00      	cmp	r3, #0
 8024f02:	dd05      	ble.n	8024f10 <_dtoa_r+0x828>
 8024f04:	4651      	mov	r1, sl
 8024f06:	461a      	mov	r2, r3
 8024f08:	4620      	mov	r0, r4
 8024f0a:	f000 fc3b 	bl	8025784 <__lshift>
 8024f0e:	4682      	mov	sl, r0
 8024f10:	9b06      	ldr	r3, [sp, #24]
 8024f12:	2b00      	cmp	r3, #0
 8024f14:	dd05      	ble.n	8024f22 <_dtoa_r+0x83a>
 8024f16:	4631      	mov	r1, r6
 8024f18:	461a      	mov	r2, r3
 8024f1a:	4620      	mov	r0, r4
 8024f1c:	f000 fc32 	bl	8025784 <__lshift>
 8024f20:	4606      	mov	r6, r0
 8024f22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024f24:	2b00      	cmp	r3, #0
 8024f26:	d072      	beq.n	802500e <_dtoa_r+0x926>
 8024f28:	4631      	mov	r1, r6
 8024f2a:	4650      	mov	r0, sl
 8024f2c:	f000 fc96 	bl	802585c <__mcmp>
 8024f30:	2800      	cmp	r0, #0
 8024f32:	da6c      	bge.n	802500e <_dtoa_r+0x926>
 8024f34:	2300      	movs	r3, #0
 8024f36:	4651      	mov	r1, sl
 8024f38:	220a      	movs	r2, #10
 8024f3a:	4620      	mov	r0, r4
 8024f3c:	f000 fa74 	bl	8025428 <__multadd>
 8024f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f42:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8024f46:	4682      	mov	sl, r0
 8024f48:	2b00      	cmp	r3, #0
 8024f4a:	f000 81b0 	beq.w	80252ae <_dtoa_r+0xbc6>
 8024f4e:	2300      	movs	r3, #0
 8024f50:	4639      	mov	r1, r7
 8024f52:	220a      	movs	r2, #10
 8024f54:	4620      	mov	r0, r4
 8024f56:	f000 fa67 	bl	8025428 <__multadd>
 8024f5a:	9b01      	ldr	r3, [sp, #4]
 8024f5c:	2b00      	cmp	r3, #0
 8024f5e:	4607      	mov	r7, r0
 8024f60:	f300 8096 	bgt.w	8025090 <_dtoa_r+0x9a8>
 8024f64:	9b07      	ldr	r3, [sp, #28]
 8024f66:	2b02      	cmp	r3, #2
 8024f68:	dc59      	bgt.n	802501e <_dtoa_r+0x936>
 8024f6a:	e091      	b.n	8025090 <_dtoa_r+0x9a8>
 8024f6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024f6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8024f72:	e758      	b.n	8024e26 <_dtoa_r+0x73e>
 8024f74:	9b04      	ldr	r3, [sp, #16]
 8024f76:	1e5e      	subs	r6, r3, #1
 8024f78:	9b08      	ldr	r3, [sp, #32]
 8024f7a:	42b3      	cmp	r3, r6
 8024f7c:	bfbf      	itttt	lt
 8024f7e:	9b08      	ldrlt	r3, [sp, #32]
 8024f80:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8024f82:	9608      	strlt	r6, [sp, #32]
 8024f84:	1af3      	sublt	r3, r6, r3
 8024f86:	bfb4      	ite	lt
 8024f88:	18d2      	addlt	r2, r2, r3
 8024f8a:	1b9e      	subge	r6, r3, r6
 8024f8c:	9b04      	ldr	r3, [sp, #16]
 8024f8e:	bfbc      	itt	lt
 8024f90:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8024f92:	2600      	movlt	r6, #0
 8024f94:	2b00      	cmp	r3, #0
 8024f96:	bfb7      	itett	lt
 8024f98:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8024f9c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8024fa0:	1a9d      	sublt	r5, r3, r2
 8024fa2:	2300      	movlt	r3, #0
 8024fa4:	e741      	b.n	8024e2a <_dtoa_r+0x742>
 8024fa6:	9e08      	ldr	r6, [sp, #32]
 8024fa8:	9d05      	ldr	r5, [sp, #20]
 8024faa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024fac:	e748      	b.n	8024e40 <_dtoa_r+0x758>
 8024fae:	9a08      	ldr	r2, [sp, #32]
 8024fb0:	e770      	b.n	8024e94 <_dtoa_r+0x7ac>
 8024fb2:	9b07      	ldr	r3, [sp, #28]
 8024fb4:	2b01      	cmp	r3, #1
 8024fb6:	dc19      	bgt.n	8024fec <_dtoa_r+0x904>
 8024fb8:	9b02      	ldr	r3, [sp, #8]
 8024fba:	b9bb      	cbnz	r3, 8024fec <_dtoa_r+0x904>
 8024fbc:	9b03      	ldr	r3, [sp, #12]
 8024fbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8024fc2:	b99b      	cbnz	r3, 8024fec <_dtoa_r+0x904>
 8024fc4:	9b03      	ldr	r3, [sp, #12]
 8024fc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024fca:	0d1b      	lsrs	r3, r3, #20
 8024fcc:	051b      	lsls	r3, r3, #20
 8024fce:	b183      	cbz	r3, 8024ff2 <_dtoa_r+0x90a>
 8024fd0:	9b05      	ldr	r3, [sp, #20]
 8024fd2:	3301      	adds	r3, #1
 8024fd4:	9305      	str	r3, [sp, #20]
 8024fd6:	9b06      	ldr	r3, [sp, #24]
 8024fd8:	3301      	adds	r3, #1
 8024fda:	9306      	str	r3, [sp, #24]
 8024fdc:	f04f 0801 	mov.w	r8, #1
 8024fe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024fe2:	2b00      	cmp	r3, #0
 8024fe4:	f47f af6f 	bne.w	8024ec6 <_dtoa_r+0x7de>
 8024fe8:	2001      	movs	r0, #1
 8024fea:	e774      	b.n	8024ed6 <_dtoa_r+0x7ee>
 8024fec:	f04f 0800 	mov.w	r8, #0
 8024ff0:	e7f6      	b.n	8024fe0 <_dtoa_r+0x8f8>
 8024ff2:	4698      	mov	r8, r3
 8024ff4:	e7f4      	b.n	8024fe0 <_dtoa_r+0x8f8>
 8024ff6:	d082      	beq.n	8024efe <_dtoa_r+0x816>
 8024ff8:	9a05      	ldr	r2, [sp, #20]
 8024ffa:	331c      	adds	r3, #28
 8024ffc:	441a      	add	r2, r3
 8024ffe:	9205      	str	r2, [sp, #20]
 8025000:	9a06      	ldr	r2, [sp, #24]
 8025002:	441a      	add	r2, r3
 8025004:	441d      	add	r5, r3
 8025006:	9206      	str	r2, [sp, #24]
 8025008:	e779      	b.n	8024efe <_dtoa_r+0x816>
 802500a:	4603      	mov	r3, r0
 802500c:	e7f4      	b.n	8024ff8 <_dtoa_r+0x910>
 802500e:	9b04      	ldr	r3, [sp, #16]
 8025010:	2b00      	cmp	r3, #0
 8025012:	dc37      	bgt.n	8025084 <_dtoa_r+0x99c>
 8025014:	9b07      	ldr	r3, [sp, #28]
 8025016:	2b02      	cmp	r3, #2
 8025018:	dd34      	ble.n	8025084 <_dtoa_r+0x99c>
 802501a:	9b04      	ldr	r3, [sp, #16]
 802501c:	9301      	str	r3, [sp, #4]
 802501e:	9b01      	ldr	r3, [sp, #4]
 8025020:	b963      	cbnz	r3, 802503c <_dtoa_r+0x954>
 8025022:	4631      	mov	r1, r6
 8025024:	2205      	movs	r2, #5
 8025026:	4620      	mov	r0, r4
 8025028:	f000 f9fe 	bl	8025428 <__multadd>
 802502c:	4601      	mov	r1, r0
 802502e:	4606      	mov	r6, r0
 8025030:	4650      	mov	r0, sl
 8025032:	f000 fc13 	bl	802585c <__mcmp>
 8025036:	2800      	cmp	r0, #0
 8025038:	f73f adbb 	bgt.w	8024bb2 <_dtoa_r+0x4ca>
 802503c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802503e:	9d00      	ldr	r5, [sp, #0]
 8025040:	ea6f 0b03 	mvn.w	fp, r3
 8025044:	f04f 0800 	mov.w	r8, #0
 8025048:	4631      	mov	r1, r6
 802504a:	4620      	mov	r0, r4
 802504c:	f000 f9ca 	bl	80253e4 <_Bfree>
 8025050:	2f00      	cmp	r7, #0
 8025052:	f43f aeab 	beq.w	8024dac <_dtoa_r+0x6c4>
 8025056:	f1b8 0f00 	cmp.w	r8, #0
 802505a:	d005      	beq.n	8025068 <_dtoa_r+0x980>
 802505c:	45b8      	cmp	r8, r7
 802505e:	d003      	beq.n	8025068 <_dtoa_r+0x980>
 8025060:	4641      	mov	r1, r8
 8025062:	4620      	mov	r0, r4
 8025064:	f000 f9be 	bl	80253e4 <_Bfree>
 8025068:	4639      	mov	r1, r7
 802506a:	4620      	mov	r0, r4
 802506c:	f000 f9ba 	bl	80253e4 <_Bfree>
 8025070:	e69c      	b.n	8024dac <_dtoa_r+0x6c4>
 8025072:	2600      	movs	r6, #0
 8025074:	4637      	mov	r7, r6
 8025076:	e7e1      	b.n	802503c <_dtoa_r+0x954>
 8025078:	46bb      	mov	fp, r7
 802507a:	4637      	mov	r7, r6
 802507c:	e599      	b.n	8024bb2 <_dtoa_r+0x4ca>
 802507e:	bf00      	nop
 8025080:	40240000 	.word	0x40240000
 8025084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025086:	2b00      	cmp	r3, #0
 8025088:	f000 80c8 	beq.w	802521c <_dtoa_r+0xb34>
 802508c:	9b04      	ldr	r3, [sp, #16]
 802508e:	9301      	str	r3, [sp, #4]
 8025090:	2d00      	cmp	r5, #0
 8025092:	dd05      	ble.n	80250a0 <_dtoa_r+0x9b8>
 8025094:	4639      	mov	r1, r7
 8025096:	462a      	mov	r2, r5
 8025098:	4620      	mov	r0, r4
 802509a:	f000 fb73 	bl	8025784 <__lshift>
 802509e:	4607      	mov	r7, r0
 80250a0:	f1b8 0f00 	cmp.w	r8, #0
 80250a4:	d05b      	beq.n	802515e <_dtoa_r+0xa76>
 80250a6:	6879      	ldr	r1, [r7, #4]
 80250a8:	4620      	mov	r0, r4
 80250aa:	f000 f95b 	bl	8025364 <_Balloc>
 80250ae:	4605      	mov	r5, r0
 80250b0:	b928      	cbnz	r0, 80250be <_dtoa_r+0x9d6>
 80250b2:	4b83      	ldr	r3, [pc, #524]	; (80252c0 <_dtoa_r+0xbd8>)
 80250b4:	4602      	mov	r2, r0
 80250b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80250ba:	f7ff bb2e 	b.w	802471a <_dtoa_r+0x32>
 80250be:	693a      	ldr	r2, [r7, #16]
 80250c0:	3202      	adds	r2, #2
 80250c2:	0092      	lsls	r2, r2, #2
 80250c4:	f107 010c 	add.w	r1, r7, #12
 80250c8:	300c      	adds	r0, #12
 80250ca:	f7ff fa6e 	bl	80245aa <memcpy>
 80250ce:	2201      	movs	r2, #1
 80250d0:	4629      	mov	r1, r5
 80250d2:	4620      	mov	r0, r4
 80250d4:	f000 fb56 	bl	8025784 <__lshift>
 80250d8:	9b00      	ldr	r3, [sp, #0]
 80250da:	3301      	adds	r3, #1
 80250dc:	9304      	str	r3, [sp, #16]
 80250de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80250e2:	4413      	add	r3, r2
 80250e4:	9308      	str	r3, [sp, #32]
 80250e6:	9b02      	ldr	r3, [sp, #8]
 80250e8:	f003 0301 	and.w	r3, r3, #1
 80250ec:	46b8      	mov	r8, r7
 80250ee:	9306      	str	r3, [sp, #24]
 80250f0:	4607      	mov	r7, r0
 80250f2:	9b04      	ldr	r3, [sp, #16]
 80250f4:	4631      	mov	r1, r6
 80250f6:	3b01      	subs	r3, #1
 80250f8:	4650      	mov	r0, sl
 80250fa:	9301      	str	r3, [sp, #4]
 80250fc:	f7ff fa6a 	bl	80245d4 <quorem>
 8025100:	4641      	mov	r1, r8
 8025102:	9002      	str	r0, [sp, #8]
 8025104:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8025108:	4650      	mov	r0, sl
 802510a:	f000 fba7 	bl	802585c <__mcmp>
 802510e:	463a      	mov	r2, r7
 8025110:	9005      	str	r0, [sp, #20]
 8025112:	4631      	mov	r1, r6
 8025114:	4620      	mov	r0, r4
 8025116:	f000 fbbd 	bl	8025894 <__mdiff>
 802511a:	68c2      	ldr	r2, [r0, #12]
 802511c:	4605      	mov	r5, r0
 802511e:	bb02      	cbnz	r2, 8025162 <_dtoa_r+0xa7a>
 8025120:	4601      	mov	r1, r0
 8025122:	4650      	mov	r0, sl
 8025124:	f000 fb9a 	bl	802585c <__mcmp>
 8025128:	4602      	mov	r2, r0
 802512a:	4629      	mov	r1, r5
 802512c:	4620      	mov	r0, r4
 802512e:	9209      	str	r2, [sp, #36]	; 0x24
 8025130:	f000 f958 	bl	80253e4 <_Bfree>
 8025134:	9b07      	ldr	r3, [sp, #28]
 8025136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025138:	9d04      	ldr	r5, [sp, #16]
 802513a:	ea43 0102 	orr.w	r1, r3, r2
 802513e:	9b06      	ldr	r3, [sp, #24]
 8025140:	4319      	orrs	r1, r3
 8025142:	d110      	bne.n	8025166 <_dtoa_r+0xa7e>
 8025144:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8025148:	d029      	beq.n	802519e <_dtoa_r+0xab6>
 802514a:	9b05      	ldr	r3, [sp, #20]
 802514c:	2b00      	cmp	r3, #0
 802514e:	dd02      	ble.n	8025156 <_dtoa_r+0xa6e>
 8025150:	9b02      	ldr	r3, [sp, #8]
 8025152:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8025156:	9b01      	ldr	r3, [sp, #4]
 8025158:	f883 9000 	strb.w	r9, [r3]
 802515c:	e774      	b.n	8025048 <_dtoa_r+0x960>
 802515e:	4638      	mov	r0, r7
 8025160:	e7ba      	b.n	80250d8 <_dtoa_r+0x9f0>
 8025162:	2201      	movs	r2, #1
 8025164:	e7e1      	b.n	802512a <_dtoa_r+0xa42>
 8025166:	9b05      	ldr	r3, [sp, #20]
 8025168:	2b00      	cmp	r3, #0
 802516a:	db04      	blt.n	8025176 <_dtoa_r+0xa8e>
 802516c:	9907      	ldr	r1, [sp, #28]
 802516e:	430b      	orrs	r3, r1
 8025170:	9906      	ldr	r1, [sp, #24]
 8025172:	430b      	orrs	r3, r1
 8025174:	d120      	bne.n	80251b8 <_dtoa_r+0xad0>
 8025176:	2a00      	cmp	r2, #0
 8025178:	dded      	ble.n	8025156 <_dtoa_r+0xa6e>
 802517a:	4651      	mov	r1, sl
 802517c:	2201      	movs	r2, #1
 802517e:	4620      	mov	r0, r4
 8025180:	f000 fb00 	bl	8025784 <__lshift>
 8025184:	4631      	mov	r1, r6
 8025186:	4682      	mov	sl, r0
 8025188:	f000 fb68 	bl	802585c <__mcmp>
 802518c:	2800      	cmp	r0, #0
 802518e:	dc03      	bgt.n	8025198 <_dtoa_r+0xab0>
 8025190:	d1e1      	bne.n	8025156 <_dtoa_r+0xa6e>
 8025192:	f019 0f01 	tst.w	r9, #1
 8025196:	d0de      	beq.n	8025156 <_dtoa_r+0xa6e>
 8025198:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802519c:	d1d8      	bne.n	8025150 <_dtoa_r+0xa68>
 802519e:	9a01      	ldr	r2, [sp, #4]
 80251a0:	2339      	movs	r3, #57	; 0x39
 80251a2:	7013      	strb	r3, [r2, #0]
 80251a4:	462b      	mov	r3, r5
 80251a6:	461d      	mov	r5, r3
 80251a8:	3b01      	subs	r3, #1
 80251aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80251ae:	2a39      	cmp	r2, #57	; 0x39
 80251b0:	d06c      	beq.n	802528c <_dtoa_r+0xba4>
 80251b2:	3201      	adds	r2, #1
 80251b4:	701a      	strb	r2, [r3, #0]
 80251b6:	e747      	b.n	8025048 <_dtoa_r+0x960>
 80251b8:	2a00      	cmp	r2, #0
 80251ba:	dd07      	ble.n	80251cc <_dtoa_r+0xae4>
 80251bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80251c0:	d0ed      	beq.n	802519e <_dtoa_r+0xab6>
 80251c2:	9a01      	ldr	r2, [sp, #4]
 80251c4:	f109 0301 	add.w	r3, r9, #1
 80251c8:	7013      	strb	r3, [r2, #0]
 80251ca:	e73d      	b.n	8025048 <_dtoa_r+0x960>
 80251cc:	9b04      	ldr	r3, [sp, #16]
 80251ce:	9a08      	ldr	r2, [sp, #32]
 80251d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80251d4:	4293      	cmp	r3, r2
 80251d6:	d043      	beq.n	8025260 <_dtoa_r+0xb78>
 80251d8:	4651      	mov	r1, sl
 80251da:	2300      	movs	r3, #0
 80251dc:	220a      	movs	r2, #10
 80251de:	4620      	mov	r0, r4
 80251e0:	f000 f922 	bl	8025428 <__multadd>
 80251e4:	45b8      	cmp	r8, r7
 80251e6:	4682      	mov	sl, r0
 80251e8:	f04f 0300 	mov.w	r3, #0
 80251ec:	f04f 020a 	mov.w	r2, #10
 80251f0:	4641      	mov	r1, r8
 80251f2:	4620      	mov	r0, r4
 80251f4:	d107      	bne.n	8025206 <_dtoa_r+0xb1e>
 80251f6:	f000 f917 	bl	8025428 <__multadd>
 80251fa:	4680      	mov	r8, r0
 80251fc:	4607      	mov	r7, r0
 80251fe:	9b04      	ldr	r3, [sp, #16]
 8025200:	3301      	adds	r3, #1
 8025202:	9304      	str	r3, [sp, #16]
 8025204:	e775      	b.n	80250f2 <_dtoa_r+0xa0a>
 8025206:	f000 f90f 	bl	8025428 <__multadd>
 802520a:	4639      	mov	r1, r7
 802520c:	4680      	mov	r8, r0
 802520e:	2300      	movs	r3, #0
 8025210:	220a      	movs	r2, #10
 8025212:	4620      	mov	r0, r4
 8025214:	f000 f908 	bl	8025428 <__multadd>
 8025218:	4607      	mov	r7, r0
 802521a:	e7f0      	b.n	80251fe <_dtoa_r+0xb16>
 802521c:	9b04      	ldr	r3, [sp, #16]
 802521e:	9301      	str	r3, [sp, #4]
 8025220:	9d00      	ldr	r5, [sp, #0]
 8025222:	4631      	mov	r1, r6
 8025224:	4650      	mov	r0, sl
 8025226:	f7ff f9d5 	bl	80245d4 <quorem>
 802522a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 802522e:	9b00      	ldr	r3, [sp, #0]
 8025230:	f805 9b01 	strb.w	r9, [r5], #1
 8025234:	1aea      	subs	r2, r5, r3
 8025236:	9b01      	ldr	r3, [sp, #4]
 8025238:	4293      	cmp	r3, r2
 802523a:	dd07      	ble.n	802524c <_dtoa_r+0xb64>
 802523c:	4651      	mov	r1, sl
 802523e:	2300      	movs	r3, #0
 8025240:	220a      	movs	r2, #10
 8025242:	4620      	mov	r0, r4
 8025244:	f000 f8f0 	bl	8025428 <__multadd>
 8025248:	4682      	mov	sl, r0
 802524a:	e7ea      	b.n	8025222 <_dtoa_r+0xb3a>
 802524c:	9b01      	ldr	r3, [sp, #4]
 802524e:	2b00      	cmp	r3, #0
 8025250:	bfc8      	it	gt
 8025252:	461d      	movgt	r5, r3
 8025254:	9b00      	ldr	r3, [sp, #0]
 8025256:	bfd8      	it	le
 8025258:	2501      	movle	r5, #1
 802525a:	441d      	add	r5, r3
 802525c:	f04f 0800 	mov.w	r8, #0
 8025260:	4651      	mov	r1, sl
 8025262:	2201      	movs	r2, #1
 8025264:	4620      	mov	r0, r4
 8025266:	f000 fa8d 	bl	8025784 <__lshift>
 802526a:	4631      	mov	r1, r6
 802526c:	4682      	mov	sl, r0
 802526e:	f000 faf5 	bl	802585c <__mcmp>
 8025272:	2800      	cmp	r0, #0
 8025274:	dc96      	bgt.n	80251a4 <_dtoa_r+0xabc>
 8025276:	d102      	bne.n	802527e <_dtoa_r+0xb96>
 8025278:	f019 0f01 	tst.w	r9, #1
 802527c:	d192      	bne.n	80251a4 <_dtoa_r+0xabc>
 802527e:	462b      	mov	r3, r5
 8025280:	461d      	mov	r5, r3
 8025282:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025286:	2a30      	cmp	r2, #48	; 0x30
 8025288:	d0fa      	beq.n	8025280 <_dtoa_r+0xb98>
 802528a:	e6dd      	b.n	8025048 <_dtoa_r+0x960>
 802528c:	9a00      	ldr	r2, [sp, #0]
 802528e:	429a      	cmp	r2, r3
 8025290:	d189      	bne.n	80251a6 <_dtoa_r+0xabe>
 8025292:	f10b 0b01 	add.w	fp, fp, #1
 8025296:	2331      	movs	r3, #49	; 0x31
 8025298:	e796      	b.n	80251c8 <_dtoa_r+0xae0>
 802529a:	4b0a      	ldr	r3, [pc, #40]	; (80252c4 <_dtoa_r+0xbdc>)
 802529c:	f7ff ba99 	b.w	80247d2 <_dtoa_r+0xea>
 80252a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80252a2:	2b00      	cmp	r3, #0
 80252a4:	f47f aa6d 	bne.w	8024782 <_dtoa_r+0x9a>
 80252a8:	4b07      	ldr	r3, [pc, #28]	; (80252c8 <_dtoa_r+0xbe0>)
 80252aa:	f7ff ba92 	b.w	80247d2 <_dtoa_r+0xea>
 80252ae:	9b01      	ldr	r3, [sp, #4]
 80252b0:	2b00      	cmp	r3, #0
 80252b2:	dcb5      	bgt.n	8025220 <_dtoa_r+0xb38>
 80252b4:	9b07      	ldr	r3, [sp, #28]
 80252b6:	2b02      	cmp	r3, #2
 80252b8:	f73f aeb1 	bgt.w	802501e <_dtoa_r+0x936>
 80252bc:	e7b0      	b.n	8025220 <_dtoa_r+0xb38>
 80252be:	bf00      	nop
 80252c0:	0802b7c5 	.word	0x0802b7c5
 80252c4:	0802b73c 	.word	0x0802b73c
 80252c8:	0802b760 	.word	0x0802b760

080252cc <_free_r>:
 80252cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80252ce:	2900      	cmp	r1, #0
 80252d0:	d044      	beq.n	802535c <_free_r+0x90>
 80252d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80252d6:	9001      	str	r0, [sp, #4]
 80252d8:	2b00      	cmp	r3, #0
 80252da:	f1a1 0404 	sub.w	r4, r1, #4
 80252de:	bfb8      	it	lt
 80252e0:	18e4      	addlt	r4, r4, r3
 80252e2:	f7fe f8f5 	bl	80234d0 <__malloc_lock>
 80252e6:	4a1e      	ldr	r2, [pc, #120]	; (8025360 <_free_r+0x94>)
 80252e8:	9801      	ldr	r0, [sp, #4]
 80252ea:	6813      	ldr	r3, [r2, #0]
 80252ec:	b933      	cbnz	r3, 80252fc <_free_r+0x30>
 80252ee:	6063      	str	r3, [r4, #4]
 80252f0:	6014      	str	r4, [r2, #0]
 80252f2:	b003      	add	sp, #12
 80252f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80252f8:	f7fe b8f0 	b.w	80234dc <__malloc_unlock>
 80252fc:	42a3      	cmp	r3, r4
 80252fe:	d908      	bls.n	8025312 <_free_r+0x46>
 8025300:	6825      	ldr	r5, [r4, #0]
 8025302:	1961      	adds	r1, r4, r5
 8025304:	428b      	cmp	r3, r1
 8025306:	bf01      	itttt	eq
 8025308:	6819      	ldreq	r1, [r3, #0]
 802530a:	685b      	ldreq	r3, [r3, #4]
 802530c:	1949      	addeq	r1, r1, r5
 802530e:	6021      	streq	r1, [r4, #0]
 8025310:	e7ed      	b.n	80252ee <_free_r+0x22>
 8025312:	461a      	mov	r2, r3
 8025314:	685b      	ldr	r3, [r3, #4]
 8025316:	b10b      	cbz	r3, 802531c <_free_r+0x50>
 8025318:	42a3      	cmp	r3, r4
 802531a:	d9fa      	bls.n	8025312 <_free_r+0x46>
 802531c:	6811      	ldr	r1, [r2, #0]
 802531e:	1855      	adds	r5, r2, r1
 8025320:	42a5      	cmp	r5, r4
 8025322:	d10b      	bne.n	802533c <_free_r+0x70>
 8025324:	6824      	ldr	r4, [r4, #0]
 8025326:	4421      	add	r1, r4
 8025328:	1854      	adds	r4, r2, r1
 802532a:	42a3      	cmp	r3, r4
 802532c:	6011      	str	r1, [r2, #0]
 802532e:	d1e0      	bne.n	80252f2 <_free_r+0x26>
 8025330:	681c      	ldr	r4, [r3, #0]
 8025332:	685b      	ldr	r3, [r3, #4]
 8025334:	6053      	str	r3, [r2, #4]
 8025336:	440c      	add	r4, r1
 8025338:	6014      	str	r4, [r2, #0]
 802533a:	e7da      	b.n	80252f2 <_free_r+0x26>
 802533c:	d902      	bls.n	8025344 <_free_r+0x78>
 802533e:	230c      	movs	r3, #12
 8025340:	6003      	str	r3, [r0, #0]
 8025342:	e7d6      	b.n	80252f2 <_free_r+0x26>
 8025344:	6825      	ldr	r5, [r4, #0]
 8025346:	1961      	adds	r1, r4, r5
 8025348:	428b      	cmp	r3, r1
 802534a:	bf04      	itt	eq
 802534c:	6819      	ldreq	r1, [r3, #0]
 802534e:	685b      	ldreq	r3, [r3, #4]
 8025350:	6063      	str	r3, [r4, #4]
 8025352:	bf04      	itt	eq
 8025354:	1949      	addeq	r1, r1, r5
 8025356:	6021      	streq	r1, [r4, #0]
 8025358:	6054      	str	r4, [r2, #4]
 802535a:	e7ca      	b.n	80252f2 <_free_r+0x26>
 802535c:	b003      	add	sp, #12
 802535e:	bd30      	pop	{r4, r5, pc}
 8025360:	20013608 	.word	0x20013608

08025364 <_Balloc>:
 8025364:	b570      	push	{r4, r5, r6, lr}
 8025366:	69c6      	ldr	r6, [r0, #28]
 8025368:	4604      	mov	r4, r0
 802536a:	460d      	mov	r5, r1
 802536c:	b976      	cbnz	r6, 802538c <_Balloc+0x28>
 802536e:	2010      	movs	r0, #16
 8025370:	f7fd fffe 	bl	8023370 <malloc>
 8025374:	4602      	mov	r2, r0
 8025376:	61e0      	str	r0, [r4, #28]
 8025378:	b920      	cbnz	r0, 8025384 <_Balloc+0x20>
 802537a:	4b18      	ldr	r3, [pc, #96]	; (80253dc <_Balloc+0x78>)
 802537c:	4818      	ldr	r0, [pc, #96]	; (80253e0 <_Balloc+0x7c>)
 802537e:	216b      	movs	r1, #107	; 0x6b
 8025380:	f7fd ffd8 	bl	8023334 <__assert_func>
 8025384:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025388:	6006      	str	r6, [r0, #0]
 802538a:	60c6      	str	r6, [r0, #12]
 802538c:	69e6      	ldr	r6, [r4, #28]
 802538e:	68f3      	ldr	r3, [r6, #12]
 8025390:	b183      	cbz	r3, 80253b4 <_Balloc+0x50>
 8025392:	69e3      	ldr	r3, [r4, #28]
 8025394:	68db      	ldr	r3, [r3, #12]
 8025396:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802539a:	b9b8      	cbnz	r0, 80253cc <_Balloc+0x68>
 802539c:	2101      	movs	r1, #1
 802539e:	fa01 f605 	lsl.w	r6, r1, r5
 80253a2:	1d72      	adds	r2, r6, #5
 80253a4:	0092      	lsls	r2, r2, #2
 80253a6:	4620      	mov	r0, r4
 80253a8:	f000 ff6a 	bl	8026280 <_calloc_r>
 80253ac:	b160      	cbz	r0, 80253c8 <_Balloc+0x64>
 80253ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80253b2:	e00e      	b.n	80253d2 <_Balloc+0x6e>
 80253b4:	2221      	movs	r2, #33	; 0x21
 80253b6:	2104      	movs	r1, #4
 80253b8:	4620      	mov	r0, r4
 80253ba:	f000 ff61 	bl	8026280 <_calloc_r>
 80253be:	69e3      	ldr	r3, [r4, #28]
 80253c0:	60f0      	str	r0, [r6, #12]
 80253c2:	68db      	ldr	r3, [r3, #12]
 80253c4:	2b00      	cmp	r3, #0
 80253c6:	d1e4      	bne.n	8025392 <_Balloc+0x2e>
 80253c8:	2000      	movs	r0, #0
 80253ca:	bd70      	pop	{r4, r5, r6, pc}
 80253cc:	6802      	ldr	r2, [r0, #0]
 80253ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80253d2:	2300      	movs	r3, #0
 80253d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80253d8:	e7f7      	b.n	80253ca <_Balloc+0x66>
 80253da:	bf00      	nop
 80253dc:	0802b5bc 	.word	0x0802b5bc
 80253e0:	0802b7d6 	.word	0x0802b7d6

080253e4 <_Bfree>:
 80253e4:	b570      	push	{r4, r5, r6, lr}
 80253e6:	69c6      	ldr	r6, [r0, #28]
 80253e8:	4605      	mov	r5, r0
 80253ea:	460c      	mov	r4, r1
 80253ec:	b976      	cbnz	r6, 802540c <_Bfree+0x28>
 80253ee:	2010      	movs	r0, #16
 80253f0:	f7fd ffbe 	bl	8023370 <malloc>
 80253f4:	4602      	mov	r2, r0
 80253f6:	61e8      	str	r0, [r5, #28]
 80253f8:	b920      	cbnz	r0, 8025404 <_Bfree+0x20>
 80253fa:	4b09      	ldr	r3, [pc, #36]	; (8025420 <_Bfree+0x3c>)
 80253fc:	4809      	ldr	r0, [pc, #36]	; (8025424 <_Bfree+0x40>)
 80253fe:	218f      	movs	r1, #143	; 0x8f
 8025400:	f7fd ff98 	bl	8023334 <__assert_func>
 8025404:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025408:	6006      	str	r6, [r0, #0]
 802540a:	60c6      	str	r6, [r0, #12]
 802540c:	b13c      	cbz	r4, 802541e <_Bfree+0x3a>
 802540e:	69eb      	ldr	r3, [r5, #28]
 8025410:	6862      	ldr	r2, [r4, #4]
 8025412:	68db      	ldr	r3, [r3, #12]
 8025414:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025418:	6021      	str	r1, [r4, #0]
 802541a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802541e:	bd70      	pop	{r4, r5, r6, pc}
 8025420:	0802b5bc 	.word	0x0802b5bc
 8025424:	0802b7d6 	.word	0x0802b7d6

08025428 <__multadd>:
 8025428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802542c:	690d      	ldr	r5, [r1, #16]
 802542e:	4607      	mov	r7, r0
 8025430:	460c      	mov	r4, r1
 8025432:	461e      	mov	r6, r3
 8025434:	f101 0c14 	add.w	ip, r1, #20
 8025438:	2000      	movs	r0, #0
 802543a:	f8dc 3000 	ldr.w	r3, [ip]
 802543e:	b299      	uxth	r1, r3
 8025440:	fb02 6101 	mla	r1, r2, r1, r6
 8025444:	0c1e      	lsrs	r6, r3, #16
 8025446:	0c0b      	lsrs	r3, r1, #16
 8025448:	fb02 3306 	mla	r3, r2, r6, r3
 802544c:	b289      	uxth	r1, r1
 802544e:	3001      	adds	r0, #1
 8025450:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8025454:	4285      	cmp	r5, r0
 8025456:	f84c 1b04 	str.w	r1, [ip], #4
 802545a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802545e:	dcec      	bgt.n	802543a <__multadd+0x12>
 8025460:	b30e      	cbz	r6, 80254a6 <__multadd+0x7e>
 8025462:	68a3      	ldr	r3, [r4, #8]
 8025464:	42ab      	cmp	r3, r5
 8025466:	dc19      	bgt.n	802549c <__multadd+0x74>
 8025468:	6861      	ldr	r1, [r4, #4]
 802546a:	4638      	mov	r0, r7
 802546c:	3101      	adds	r1, #1
 802546e:	f7ff ff79 	bl	8025364 <_Balloc>
 8025472:	4680      	mov	r8, r0
 8025474:	b928      	cbnz	r0, 8025482 <__multadd+0x5a>
 8025476:	4602      	mov	r2, r0
 8025478:	4b0c      	ldr	r3, [pc, #48]	; (80254ac <__multadd+0x84>)
 802547a:	480d      	ldr	r0, [pc, #52]	; (80254b0 <__multadd+0x88>)
 802547c:	21ba      	movs	r1, #186	; 0xba
 802547e:	f7fd ff59 	bl	8023334 <__assert_func>
 8025482:	6922      	ldr	r2, [r4, #16]
 8025484:	3202      	adds	r2, #2
 8025486:	f104 010c 	add.w	r1, r4, #12
 802548a:	0092      	lsls	r2, r2, #2
 802548c:	300c      	adds	r0, #12
 802548e:	f7ff f88c 	bl	80245aa <memcpy>
 8025492:	4621      	mov	r1, r4
 8025494:	4638      	mov	r0, r7
 8025496:	f7ff ffa5 	bl	80253e4 <_Bfree>
 802549a:	4644      	mov	r4, r8
 802549c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80254a0:	3501      	adds	r5, #1
 80254a2:	615e      	str	r6, [r3, #20]
 80254a4:	6125      	str	r5, [r4, #16]
 80254a6:	4620      	mov	r0, r4
 80254a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80254ac:	0802b7c5 	.word	0x0802b7c5
 80254b0:	0802b7d6 	.word	0x0802b7d6

080254b4 <__hi0bits>:
 80254b4:	0c03      	lsrs	r3, r0, #16
 80254b6:	041b      	lsls	r3, r3, #16
 80254b8:	b9d3      	cbnz	r3, 80254f0 <__hi0bits+0x3c>
 80254ba:	0400      	lsls	r0, r0, #16
 80254bc:	2310      	movs	r3, #16
 80254be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80254c2:	bf04      	itt	eq
 80254c4:	0200      	lsleq	r0, r0, #8
 80254c6:	3308      	addeq	r3, #8
 80254c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80254cc:	bf04      	itt	eq
 80254ce:	0100      	lsleq	r0, r0, #4
 80254d0:	3304      	addeq	r3, #4
 80254d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80254d6:	bf04      	itt	eq
 80254d8:	0080      	lsleq	r0, r0, #2
 80254da:	3302      	addeq	r3, #2
 80254dc:	2800      	cmp	r0, #0
 80254de:	db05      	blt.n	80254ec <__hi0bits+0x38>
 80254e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80254e4:	f103 0301 	add.w	r3, r3, #1
 80254e8:	bf08      	it	eq
 80254ea:	2320      	moveq	r3, #32
 80254ec:	4618      	mov	r0, r3
 80254ee:	4770      	bx	lr
 80254f0:	2300      	movs	r3, #0
 80254f2:	e7e4      	b.n	80254be <__hi0bits+0xa>

080254f4 <__lo0bits>:
 80254f4:	6803      	ldr	r3, [r0, #0]
 80254f6:	f013 0207 	ands.w	r2, r3, #7
 80254fa:	d00c      	beq.n	8025516 <__lo0bits+0x22>
 80254fc:	07d9      	lsls	r1, r3, #31
 80254fe:	d422      	bmi.n	8025546 <__lo0bits+0x52>
 8025500:	079a      	lsls	r2, r3, #30
 8025502:	bf49      	itett	mi
 8025504:	085b      	lsrmi	r3, r3, #1
 8025506:	089b      	lsrpl	r3, r3, #2
 8025508:	6003      	strmi	r3, [r0, #0]
 802550a:	2201      	movmi	r2, #1
 802550c:	bf5c      	itt	pl
 802550e:	6003      	strpl	r3, [r0, #0]
 8025510:	2202      	movpl	r2, #2
 8025512:	4610      	mov	r0, r2
 8025514:	4770      	bx	lr
 8025516:	b299      	uxth	r1, r3
 8025518:	b909      	cbnz	r1, 802551e <__lo0bits+0x2a>
 802551a:	0c1b      	lsrs	r3, r3, #16
 802551c:	2210      	movs	r2, #16
 802551e:	b2d9      	uxtb	r1, r3
 8025520:	b909      	cbnz	r1, 8025526 <__lo0bits+0x32>
 8025522:	3208      	adds	r2, #8
 8025524:	0a1b      	lsrs	r3, r3, #8
 8025526:	0719      	lsls	r1, r3, #28
 8025528:	bf04      	itt	eq
 802552a:	091b      	lsreq	r3, r3, #4
 802552c:	3204      	addeq	r2, #4
 802552e:	0799      	lsls	r1, r3, #30
 8025530:	bf04      	itt	eq
 8025532:	089b      	lsreq	r3, r3, #2
 8025534:	3202      	addeq	r2, #2
 8025536:	07d9      	lsls	r1, r3, #31
 8025538:	d403      	bmi.n	8025542 <__lo0bits+0x4e>
 802553a:	085b      	lsrs	r3, r3, #1
 802553c:	f102 0201 	add.w	r2, r2, #1
 8025540:	d003      	beq.n	802554a <__lo0bits+0x56>
 8025542:	6003      	str	r3, [r0, #0]
 8025544:	e7e5      	b.n	8025512 <__lo0bits+0x1e>
 8025546:	2200      	movs	r2, #0
 8025548:	e7e3      	b.n	8025512 <__lo0bits+0x1e>
 802554a:	2220      	movs	r2, #32
 802554c:	e7e1      	b.n	8025512 <__lo0bits+0x1e>
	...

08025550 <__i2b>:
 8025550:	b510      	push	{r4, lr}
 8025552:	460c      	mov	r4, r1
 8025554:	2101      	movs	r1, #1
 8025556:	f7ff ff05 	bl	8025364 <_Balloc>
 802555a:	4602      	mov	r2, r0
 802555c:	b928      	cbnz	r0, 802556a <__i2b+0x1a>
 802555e:	4b05      	ldr	r3, [pc, #20]	; (8025574 <__i2b+0x24>)
 8025560:	4805      	ldr	r0, [pc, #20]	; (8025578 <__i2b+0x28>)
 8025562:	f240 1145 	movw	r1, #325	; 0x145
 8025566:	f7fd fee5 	bl	8023334 <__assert_func>
 802556a:	2301      	movs	r3, #1
 802556c:	6144      	str	r4, [r0, #20]
 802556e:	6103      	str	r3, [r0, #16]
 8025570:	bd10      	pop	{r4, pc}
 8025572:	bf00      	nop
 8025574:	0802b7c5 	.word	0x0802b7c5
 8025578:	0802b7d6 	.word	0x0802b7d6

0802557c <__multiply>:
 802557c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025580:	4691      	mov	r9, r2
 8025582:	690a      	ldr	r2, [r1, #16]
 8025584:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8025588:	429a      	cmp	r2, r3
 802558a:	bfb8      	it	lt
 802558c:	460b      	movlt	r3, r1
 802558e:	460c      	mov	r4, r1
 8025590:	bfbc      	itt	lt
 8025592:	464c      	movlt	r4, r9
 8025594:	4699      	movlt	r9, r3
 8025596:	6927      	ldr	r7, [r4, #16]
 8025598:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802559c:	68a3      	ldr	r3, [r4, #8]
 802559e:	6861      	ldr	r1, [r4, #4]
 80255a0:	eb07 060a 	add.w	r6, r7, sl
 80255a4:	42b3      	cmp	r3, r6
 80255a6:	b085      	sub	sp, #20
 80255a8:	bfb8      	it	lt
 80255aa:	3101      	addlt	r1, #1
 80255ac:	f7ff feda 	bl	8025364 <_Balloc>
 80255b0:	b930      	cbnz	r0, 80255c0 <__multiply+0x44>
 80255b2:	4602      	mov	r2, r0
 80255b4:	4b44      	ldr	r3, [pc, #272]	; (80256c8 <__multiply+0x14c>)
 80255b6:	4845      	ldr	r0, [pc, #276]	; (80256cc <__multiply+0x150>)
 80255b8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80255bc:	f7fd feba 	bl	8023334 <__assert_func>
 80255c0:	f100 0514 	add.w	r5, r0, #20
 80255c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80255c8:	462b      	mov	r3, r5
 80255ca:	2200      	movs	r2, #0
 80255cc:	4543      	cmp	r3, r8
 80255ce:	d321      	bcc.n	8025614 <__multiply+0x98>
 80255d0:	f104 0314 	add.w	r3, r4, #20
 80255d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80255d8:	f109 0314 	add.w	r3, r9, #20
 80255dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80255e0:	9202      	str	r2, [sp, #8]
 80255e2:	1b3a      	subs	r2, r7, r4
 80255e4:	3a15      	subs	r2, #21
 80255e6:	f022 0203 	bic.w	r2, r2, #3
 80255ea:	3204      	adds	r2, #4
 80255ec:	f104 0115 	add.w	r1, r4, #21
 80255f0:	428f      	cmp	r7, r1
 80255f2:	bf38      	it	cc
 80255f4:	2204      	movcc	r2, #4
 80255f6:	9201      	str	r2, [sp, #4]
 80255f8:	9a02      	ldr	r2, [sp, #8]
 80255fa:	9303      	str	r3, [sp, #12]
 80255fc:	429a      	cmp	r2, r3
 80255fe:	d80c      	bhi.n	802561a <__multiply+0x9e>
 8025600:	2e00      	cmp	r6, #0
 8025602:	dd03      	ble.n	802560c <__multiply+0x90>
 8025604:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8025608:	2b00      	cmp	r3, #0
 802560a:	d05b      	beq.n	80256c4 <__multiply+0x148>
 802560c:	6106      	str	r6, [r0, #16]
 802560e:	b005      	add	sp, #20
 8025610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025614:	f843 2b04 	str.w	r2, [r3], #4
 8025618:	e7d8      	b.n	80255cc <__multiply+0x50>
 802561a:	f8b3 a000 	ldrh.w	sl, [r3]
 802561e:	f1ba 0f00 	cmp.w	sl, #0
 8025622:	d024      	beq.n	802566e <__multiply+0xf2>
 8025624:	f104 0e14 	add.w	lr, r4, #20
 8025628:	46a9      	mov	r9, r5
 802562a:	f04f 0c00 	mov.w	ip, #0
 802562e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8025632:	f8d9 1000 	ldr.w	r1, [r9]
 8025636:	fa1f fb82 	uxth.w	fp, r2
 802563a:	b289      	uxth	r1, r1
 802563c:	fb0a 110b 	mla	r1, sl, fp, r1
 8025640:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8025644:	f8d9 2000 	ldr.w	r2, [r9]
 8025648:	4461      	add	r1, ip
 802564a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802564e:	fb0a c20b 	mla	r2, sl, fp, ip
 8025652:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8025656:	b289      	uxth	r1, r1
 8025658:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802565c:	4577      	cmp	r7, lr
 802565e:	f849 1b04 	str.w	r1, [r9], #4
 8025662:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8025666:	d8e2      	bhi.n	802562e <__multiply+0xb2>
 8025668:	9a01      	ldr	r2, [sp, #4]
 802566a:	f845 c002 	str.w	ip, [r5, r2]
 802566e:	9a03      	ldr	r2, [sp, #12]
 8025670:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8025674:	3304      	adds	r3, #4
 8025676:	f1b9 0f00 	cmp.w	r9, #0
 802567a:	d021      	beq.n	80256c0 <__multiply+0x144>
 802567c:	6829      	ldr	r1, [r5, #0]
 802567e:	f104 0c14 	add.w	ip, r4, #20
 8025682:	46ae      	mov	lr, r5
 8025684:	f04f 0a00 	mov.w	sl, #0
 8025688:	f8bc b000 	ldrh.w	fp, [ip]
 802568c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8025690:	fb09 220b 	mla	r2, r9, fp, r2
 8025694:	4452      	add	r2, sl
 8025696:	b289      	uxth	r1, r1
 8025698:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802569c:	f84e 1b04 	str.w	r1, [lr], #4
 80256a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80256a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80256a8:	f8be 1000 	ldrh.w	r1, [lr]
 80256ac:	fb09 110a 	mla	r1, r9, sl, r1
 80256b0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80256b4:	4567      	cmp	r7, ip
 80256b6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80256ba:	d8e5      	bhi.n	8025688 <__multiply+0x10c>
 80256bc:	9a01      	ldr	r2, [sp, #4]
 80256be:	50a9      	str	r1, [r5, r2]
 80256c0:	3504      	adds	r5, #4
 80256c2:	e799      	b.n	80255f8 <__multiply+0x7c>
 80256c4:	3e01      	subs	r6, #1
 80256c6:	e79b      	b.n	8025600 <__multiply+0x84>
 80256c8:	0802b7c5 	.word	0x0802b7c5
 80256cc:	0802b7d6 	.word	0x0802b7d6

080256d0 <__pow5mult>:
 80256d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80256d4:	4615      	mov	r5, r2
 80256d6:	f012 0203 	ands.w	r2, r2, #3
 80256da:	4606      	mov	r6, r0
 80256dc:	460f      	mov	r7, r1
 80256de:	d007      	beq.n	80256f0 <__pow5mult+0x20>
 80256e0:	4c25      	ldr	r4, [pc, #148]	; (8025778 <__pow5mult+0xa8>)
 80256e2:	3a01      	subs	r2, #1
 80256e4:	2300      	movs	r3, #0
 80256e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80256ea:	f7ff fe9d 	bl	8025428 <__multadd>
 80256ee:	4607      	mov	r7, r0
 80256f0:	10ad      	asrs	r5, r5, #2
 80256f2:	d03d      	beq.n	8025770 <__pow5mult+0xa0>
 80256f4:	69f4      	ldr	r4, [r6, #28]
 80256f6:	b97c      	cbnz	r4, 8025718 <__pow5mult+0x48>
 80256f8:	2010      	movs	r0, #16
 80256fa:	f7fd fe39 	bl	8023370 <malloc>
 80256fe:	4602      	mov	r2, r0
 8025700:	61f0      	str	r0, [r6, #28]
 8025702:	b928      	cbnz	r0, 8025710 <__pow5mult+0x40>
 8025704:	4b1d      	ldr	r3, [pc, #116]	; (802577c <__pow5mult+0xac>)
 8025706:	481e      	ldr	r0, [pc, #120]	; (8025780 <__pow5mult+0xb0>)
 8025708:	f240 11b3 	movw	r1, #435	; 0x1b3
 802570c:	f7fd fe12 	bl	8023334 <__assert_func>
 8025710:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8025714:	6004      	str	r4, [r0, #0]
 8025716:	60c4      	str	r4, [r0, #12]
 8025718:	f8d6 801c 	ldr.w	r8, [r6, #28]
 802571c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8025720:	b94c      	cbnz	r4, 8025736 <__pow5mult+0x66>
 8025722:	f240 2171 	movw	r1, #625	; 0x271
 8025726:	4630      	mov	r0, r6
 8025728:	f7ff ff12 	bl	8025550 <__i2b>
 802572c:	2300      	movs	r3, #0
 802572e:	f8c8 0008 	str.w	r0, [r8, #8]
 8025732:	4604      	mov	r4, r0
 8025734:	6003      	str	r3, [r0, #0]
 8025736:	f04f 0900 	mov.w	r9, #0
 802573a:	07eb      	lsls	r3, r5, #31
 802573c:	d50a      	bpl.n	8025754 <__pow5mult+0x84>
 802573e:	4639      	mov	r1, r7
 8025740:	4622      	mov	r2, r4
 8025742:	4630      	mov	r0, r6
 8025744:	f7ff ff1a 	bl	802557c <__multiply>
 8025748:	4639      	mov	r1, r7
 802574a:	4680      	mov	r8, r0
 802574c:	4630      	mov	r0, r6
 802574e:	f7ff fe49 	bl	80253e4 <_Bfree>
 8025752:	4647      	mov	r7, r8
 8025754:	106d      	asrs	r5, r5, #1
 8025756:	d00b      	beq.n	8025770 <__pow5mult+0xa0>
 8025758:	6820      	ldr	r0, [r4, #0]
 802575a:	b938      	cbnz	r0, 802576c <__pow5mult+0x9c>
 802575c:	4622      	mov	r2, r4
 802575e:	4621      	mov	r1, r4
 8025760:	4630      	mov	r0, r6
 8025762:	f7ff ff0b 	bl	802557c <__multiply>
 8025766:	6020      	str	r0, [r4, #0]
 8025768:	f8c0 9000 	str.w	r9, [r0]
 802576c:	4604      	mov	r4, r0
 802576e:	e7e4      	b.n	802573a <__pow5mult+0x6a>
 8025770:	4638      	mov	r0, r7
 8025772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025776:	bf00      	nop
 8025778:	0802b920 	.word	0x0802b920
 802577c:	0802b5bc 	.word	0x0802b5bc
 8025780:	0802b7d6 	.word	0x0802b7d6

08025784 <__lshift>:
 8025784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025788:	460c      	mov	r4, r1
 802578a:	6849      	ldr	r1, [r1, #4]
 802578c:	6923      	ldr	r3, [r4, #16]
 802578e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8025792:	68a3      	ldr	r3, [r4, #8]
 8025794:	4607      	mov	r7, r0
 8025796:	4691      	mov	r9, r2
 8025798:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802579c:	f108 0601 	add.w	r6, r8, #1
 80257a0:	42b3      	cmp	r3, r6
 80257a2:	db0b      	blt.n	80257bc <__lshift+0x38>
 80257a4:	4638      	mov	r0, r7
 80257a6:	f7ff fddd 	bl	8025364 <_Balloc>
 80257aa:	4605      	mov	r5, r0
 80257ac:	b948      	cbnz	r0, 80257c2 <__lshift+0x3e>
 80257ae:	4602      	mov	r2, r0
 80257b0:	4b28      	ldr	r3, [pc, #160]	; (8025854 <__lshift+0xd0>)
 80257b2:	4829      	ldr	r0, [pc, #164]	; (8025858 <__lshift+0xd4>)
 80257b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80257b8:	f7fd fdbc 	bl	8023334 <__assert_func>
 80257bc:	3101      	adds	r1, #1
 80257be:	005b      	lsls	r3, r3, #1
 80257c0:	e7ee      	b.n	80257a0 <__lshift+0x1c>
 80257c2:	2300      	movs	r3, #0
 80257c4:	f100 0114 	add.w	r1, r0, #20
 80257c8:	f100 0210 	add.w	r2, r0, #16
 80257cc:	4618      	mov	r0, r3
 80257ce:	4553      	cmp	r3, sl
 80257d0:	db33      	blt.n	802583a <__lshift+0xb6>
 80257d2:	6920      	ldr	r0, [r4, #16]
 80257d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80257d8:	f104 0314 	add.w	r3, r4, #20
 80257dc:	f019 091f 	ands.w	r9, r9, #31
 80257e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80257e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80257e8:	d02b      	beq.n	8025842 <__lshift+0xbe>
 80257ea:	f1c9 0e20 	rsb	lr, r9, #32
 80257ee:	468a      	mov	sl, r1
 80257f0:	2200      	movs	r2, #0
 80257f2:	6818      	ldr	r0, [r3, #0]
 80257f4:	fa00 f009 	lsl.w	r0, r0, r9
 80257f8:	4310      	orrs	r0, r2
 80257fa:	f84a 0b04 	str.w	r0, [sl], #4
 80257fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8025802:	459c      	cmp	ip, r3
 8025804:	fa22 f20e 	lsr.w	r2, r2, lr
 8025808:	d8f3      	bhi.n	80257f2 <__lshift+0x6e>
 802580a:	ebac 0304 	sub.w	r3, ip, r4
 802580e:	3b15      	subs	r3, #21
 8025810:	f023 0303 	bic.w	r3, r3, #3
 8025814:	3304      	adds	r3, #4
 8025816:	f104 0015 	add.w	r0, r4, #21
 802581a:	4584      	cmp	ip, r0
 802581c:	bf38      	it	cc
 802581e:	2304      	movcc	r3, #4
 8025820:	50ca      	str	r2, [r1, r3]
 8025822:	b10a      	cbz	r2, 8025828 <__lshift+0xa4>
 8025824:	f108 0602 	add.w	r6, r8, #2
 8025828:	3e01      	subs	r6, #1
 802582a:	4638      	mov	r0, r7
 802582c:	612e      	str	r6, [r5, #16]
 802582e:	4621      	mov	r1, r4
 8025830:	f7ff fdd8 	bl	80253e4 <_Bfree>
 8025834:	4628      	mov	r0, r5
 8025836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802583a:	f842 0f04 	str.w	r0, [r2, #4]!
 802583e:	3301      	adds	r3, #1
 8025840:	e7c5      	b.n	80257ce <__lshift+0x4a>
 8025842:	3904      	subs	r1, #4
 8025844:	f853 2b04 	ldr.w	r2, [r3], #4
 8025848:	f841 2f04 	str.w	r2, [r1, #4]!
 802584c:	459c      	cmp	ip, r3
 802584e:	d8f9      	bhi.n	8025844 <__lshift+0xc0>
 8025850:	e7ea      	b.n	8025828 <__lshift+0xa4>
 8025852:	bf00      	nop
 8025854:	0802b7c5 	.word	0x0802b7c5
 8025858:	0802b7d6 	.word	0x0802b7d6

0802585c <__mcmp>:
 802585c:	b530      	push	{r4, r5, lr}
 802585e:	6902      	ldr	r2, [r0, #16]
 8025860:	690c      	ldr	r4, [r1, #16]
 8025862:	1b12      	subs	r2, r2, r4
 8025864:	d10e      	bne.n	8025884 <__mcmp+0x28>
 8025866:	f100 0314 	add.w	r3, r0, #20
 802586a:	3114      	adds	r1, #20
 802586c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8025870:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8025874:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8025878:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802587c:	42a5      	cmp	r5, r4
 802587e:	d003      	beq.n	8025888 <__mcmp+0x2c>
 8025880:	d305      	bcc.n	802588e <__mcmp+0x32>
 8025882:	2201      	movs	r2, #1
 8025884:	4610      	mov	r0, r2
 8025886:	bd30      	pop	{r4, r5, pc}
 8025888:	4283      	cmp	r3, r0
 802588a:	d3f3      	bcc.n	8025874 <__mcmp+0x18>
 802588c:	e7fa      	b.n	8025884 <__mcmp+0x28>
 802588e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025892:	e7f7      	b.n	8025884 <__mcmp+0x28>

08025894 <__mdiff>:
 8025894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025898:	460c      	mov	r4, r1
 802589a:	4606      	mov	r6, r0
 802589c:	4611      	mov	r1, r2
 802589e:	4620      	mov	r0, r4
 80258a0:	4690      	mov	r8, r2
 80258a2:	f7ff ffdb 	bl	802585c <__mcmp>
 80258a6:	1e05      	subs	r5, r0, #0
 80258a8:	d110      	bne.n	80258cc <__mdiff+0x38>
 80258aa:	4629      	mov	r1, r5
 80258ac:	4630      	mov	r0, r6
 80258ae:	f7ff fd59 	bl	8025364 <_Balloc>
 80258b2:	b930      	cbnz	r0, 80258c2 <__mdiff+0x2e>
 80258b4:	4b3a      	ldr	r3, [pc, #232]	; (80259a0 <__mdiff+0x10c>)
 80258b6:	4602      	mov	r2, r0
 80258b8:	f240 2137 	movw	r1, #567	; 0x237
 80258bc:	4839      	ldr	r0, [pc, #228]	; (80259a4 <__mdiff+0x110>)
 80258be:	f7fd fd39 	bl	8023334 <__assert_func>
 80258c2:	2301      	movs	r3, #1
 80258c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80258c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80258cc:	bfa4      	itt	ge
 80258ce:	4643      	movge	r3, r8
 80258d0:	46a0      	movge	r8, r4
 80258d2:	4630      	mov	r0, r6
 80258d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80258d8:	bfa6      	itte	ge
 80258da:	461c      	movge	r4, r3
 80258dc:	2500      	movge	r5, #0
 80258de:	2501      	movlt	r5, #1
 80258e0:	f7ff fd40 	bl	8025364 <_Balloc>
 80258e4:	b920      	cbnz	r0, 80258f0 <__mdiff+0x5c>
 80258e6:	4b2e      	ldr	r3, [pc, #184]	; (80259a0 <__mdiff+0x10c>)
 80258e8:	4602      	mov	r2, r0
 80258ea:	f240 2145 	movw	r1, #581	; 0x245
 80258ee:	e7e5      	b.n	80258bc <__mdiff+0x28>
 80258f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80258f4:	6926      	ldr	r6, [r4, #16]
 80258f6:	60c5      	str	r5, [r0, #12]
 80258f8:	f104 0914 	add.w	r9, r4, #20
 80258fc:	f108 0514 	add.w	r5, r8, #20
 8025900:	f100 0e14 	add.w	lr, r0, #20
 8025904:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8025908:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802590c:	f108 0210 	add.w	r2, r8, #16
 8025910:	46f2      	mov	sl, lr
 8025912:	2100      	movs	r1, #0
 8025914:	f859 3b04 	ldr.w	r3, [r9], #4
 8025918:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802591c:	fa11 f88b 	uxtah	r8, r1, fp
 8025920:	b299      	uxth	r1, r3
 8025922:	0c1b      	lsrs	r3, r3, #16
 8025924:	eba8 0801 	sub.w	r8, r8, r1
 8025928:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802592c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8025930:	fa1f f888 	uxth.w	r8, r8
 8025934:	1419      	asrs	r1, r3, #16
 8025936:	454e      	cmp	r6, r9
 8025938:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802593c:	f84a 3b04 	str.w	r3, [sl], #4
 8025940:	d8e8      	bhi.n	8025914 <__mdiff+0x80>
 8025942:	1b33      	subs	r3, r6, r4
 8025944:	3b15      	subs	r3, #21
 8025946:	f023 0303 	bic.w	r3, r3, #3
 802594a:	3304      	adds	r3, #4
 802594c:	3415      	adds	r4, #21
 802594e:	42a6      	cmp	r6, r4
 8025950:	bf38      	it	cc
 8025952:	2304      	movcc	r3, #4
 8025954:	441d      	add	r5, r3
 8025956:	4473      	add	r3, lr
 8025958:	469e      	mov	lr, r3
 802595a:	462e      	mov	r6, r5
 802595c:	4566      	cmp	r6, ip
 802595e:	d30e      	bcc.n	802597e <__mdiff+0xea>
 8025960:	f10c 0203 	add.w	r2, ip, #3
 8025964:	1b52      	subs	r2, r2, r5
 8025966:	f022 0203 	bic.w	r2, r2, #3
 802596a:	3d03      	subs	r5, #3
 802596c:	45ac      	cmp	ip, r5
 802596e:	bf38      	it	cc
 8025970:	2200      	movcc	r2, #0
 8025972:	4413      	add	r3, r2
 8025974:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8025978:	b17a      	cbz	r2, 802599a <__mdiff+0x106>
 802597a:	6107      	str	r7, [r0, #16]
 802597c:	e7a4      	b.n	80258c8 <__mdiff+0x34>
 802597e:	f856 8b04 	ldr.w	r8, [r6], #4
 8025982:	fa11 f288 	uxtah	r2, r1, r8
 8025986:	1414      	asrs	r4, r2, #16
 8025988:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802598c:	b292      	uxth	r2, r2
 802598e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8025992:	f84e 2b04 	str.w	r2, [lr], #4
 8025996:	1421      	asrs	r1, r4, #16
 8025998:	e7e0      	b.n	802595c <__mdiff+0xc8>
 802599a:	3f01      	subs	r7, #1
 802599c:	e7ea      	b.n	8025974 <__mdiff+0xe0>
 802599e:	bf00      	nop
 80259a0:	0802b7c5 	.word	0x0802b7c5
 80259a4:	0802b7d6 	.word	0x0802b7d6

080259a8 <__d2b>:
 80259a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80259ac:	460f      	mov	r7, r1
 80259ae:	2101      	movs	r1, #1
 80259b0:	ec59 8b10 	vmov	r8, r9, d0
 80259b4:	4616      	mov	r6, r2
 80259b6:	f7ff fcd5 	bl	8025364 <_Balloc>
 80259ba:	4604      	mov	r4, r0
 80259bc:	b930      	cbnz	r0, 80259cc <__d2b+0x24>
 80259be:	4602      	mov	r2, r0
 80259c0:	4b24      	ldr	r3, [pc, #144]	; (8025a54 <__d2b+0xac>)
 80259c2:	4825      	ldr	r0, [pc, #148]	; (8025a58 <__d2b+0xb0>)
 80259c4:	f240 310f 	movw	r1, #783	; 0x30f
 80259c8:	f7fd fcb4 	bl	8023334 <__assert_func>
 80259cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80259d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80259d4:	bb2d      	cbnz	r5, 8025a22 <__d2b+0x7a>
 80259d6:	9301      	str	r3, [sp, #4]
 80259d8:	f1b8 0300 	subs.w	r3, r8, #0
 80259dc:	d026      	beq.n	8025a2c <__d2b+0x84>
 80259de:	4668      	mov	r0, sp
 80259e0:	9300      	str	r3, [sp, #0]
 80259e2:	f7ff fd87 	bl	80254f4 <__lo0bits>
 80259e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80259ea:	b1e8      	cbz	r0, 8025a28 <__d2b+0x80>
 80259ec:	f1c0 0320 	rsb	r3, r0, #32
 80259f0:	fa02 f303 	lsl.w	r3, r2, r3
 80259f4:	430b      	orrs	r3, r1
 80259f6:	40c2      	lsrs	r2, r0
 80259f8:	6163      	str	r3, [r4, #20]
 80259fa:	9201      	str	r2, [sp, #4]
 80259fc:	9b01      	ldr	r3, [sp, #4]
 80259fe:	61a3      	str	r3, [r4, #24]
 8025a00:	2b00      	cmp	r3, #0
 8025a02:	bf14      	ite	ne
 8025a04:	2202      	movne	r2, #2
 8025a06:	2201      	moveq	r2, #1
 8025a08:	6122      	str	r2, [r4, #16]
 8025a0a:	b1bd      	cbz	r5, 8025a3c <__d2b+0x94>
 8025a0c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8025a10:	4405      	add	r5, r0
 8025a12:	603d      	str	r5, [r7, #0]
 8025a14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8025a18:	6030      	str	r0, [r6, #0]
 8025a1a:	4620      	mov	r0, r4
 8025a1c:	b003      	add	sp, #12
 8025a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8025a26:	e7d6      	b.n	80259d6 <__d2b+0x2e>
 8025a28:	6161      	str	r1, [r4, #20]
 8025a2a:	e7e7      	b.n	80259fc <__d2b+0x54>
 8025a2c:	a801      	add	r0, sp, #4
 8025a2e:	f7ff fd61 	bl	80254f4 <__lo0bits>
 8025a32:	9b01      	ldr	r3, [sp, #4]
 8025a34:	6163      	str	r3, [r4, #20]
 8025a36:	3020      	adds	r0, #32
 8025a38:	2201      	movs	r2, #1
 8025a3a:	e7e5      	b.n	8025a08 <__d2b+0x60>
 8025a3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8025a40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8025a44:	6038      	str	r0, [r7, #0]
 8025a46:	6918      	ldr	r0, [r3, #16]
 8025a48:	f7ff fd34 	bl	80254b4 <__hi0bits>
 8025a4c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8025a50:	e7e2      	b.n	8025a18 <__d2b+0x70>
 8025a52:	bf00      	nop
 8025a54:	0802b7c5 	.word	0x0802b7c5
 8025a58:	0802b7d6 	.word	0x0802b7d6

08025a5c <__ssputs_r>:
 8025a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025a60:	688e      	ldr	r6, [r1, #8]
 8025a62:	461f      	mov	r7, r3
 8025a64:	42be      	cmp	r6, r7
 8025a66:	680b      	ldr	r3, [r1, #0]
 8025a68:	4682      	mov	sl, r0
 8025a6a:	460c      	mov	r4, r1
 8025a6c:	4690      	mov	r8, r2
 8025a6e:	d82c      	bhi.n	8025aca <__ssputs_r+0x6e>
 8025a70:	898a      	ldrh	r2, [r1, #12]
 8025a72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8025a76:	d026      	beq.n	8025ac6 <__ssputs_r+0x6a>
 8025a78:	6965      	ldr	r5, [r4, #20]
 8025a7a:	6909      	ldr	r1, [r1, #16]
 8025a7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025a80:	eba3 0901 	sub.w	r9, r3, r1
 8025a84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8025a88:	1c7b      	adds	r3, r7, #1
 8025a8a:	444b      	add	r3, r9
 8025a8c:	106d      	asrs	r5, r5, #1
 8025a8e:	429d      	cmp	r5, r3
 8025a90:	bf38      	it	cc
 8025a92:	461d      	movcc	r5, r3
 8025a94:	0553      	lsls	r3, r2, #21
 8025a96:	d527      	bpl.n	8025ae8 <__ssputs_r+0x8c>
 8025a98:	4629      	mov	r1, r5
 8025a9a:	f7fd fc99 	bl	80233d0 <_malloc_r>
 8025a9e:	4606      	mov	r6, r0
 8025aa0:	b360      	cbz	r0, 8025afc <__ssputs_r+0xa0>
 8025aa2:	6921      	ldr	r1, [r4, #16]
 8025aa4:	464a      	mov	r2, r9
 8025aa6:	f7fe fd80 	bl	80245aa <memcpy>
 8025aaa:	89a3      	ldrh	r3, [r4, #12]
 8025aac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8025ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025ab4:	81a3      	strh	r3, [r4, #12]
 8025ab6:	6126      	str	r6, [r4, #16]
 8025ab8:	6165      	str	r5, [r4, #20]
 8025aba:	444e      	add	r6, r9
 8025abc:	eba5 0509 	sub.w	r5, r5, r9
 8025ac0:	6026      	str	r6, [r4, #0]
 8025ac2:	60a5      	str	r5, [r4, #8]
 8025ac4:	463e      	mov	r6, r7
 8025ac6:	42be      	cmp	r6, r7
 8025ac8:	d900      	bls.n	8025acc <__ssputs_r+0x70>
 8025aca:	463e      	mov	r6, r7
 8025acc:	6820      	ldr	r0, [r4, #0]
 8025ace:	4632      	mov	r2, r6
 8025ad0:	4641      	mov	r1, r8
 8025ad2:	f7fe fc2b 	bl	802432c <memmove>
 8025ad6:	68a3      	ldr	r3, [r4, #8]
 8025ad8:	1b9b      	subs	r3, r3, r6
 8025ada:	60a3      	str	r3, [r4, #8]
 8025adc:	6823      	ldr	r3, [r4, #0]
 8025ade:	4433      	add	r3, r6
 8025ae0:	6023      	str	r3, [r4, #0]
 8025ae2:	2000      	movs	r0, #0
 8025ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025ae8:	462a      	mov	r2, r5
 8025aea:	f000 fbf1 	bl	80262d0 <_realloc_r>
 8025aee:	4606      	mov	r6, r0
 8025af0:	2800      	cmp	r0, #0
 8025af2:	d1e0      	bne.n	8025ab6 <__ssputs_r+0x5a>
 8025af4:	6921      	ldr	r1, [r4, #16]
 8025af6:	4650      	mov	r0, sl
 8025af8:	f7ff fbe8 	bl	80252cc <_free_r>
 8025afc:	230c      	movs	r3, #12
 8025afe:	f8ca 3000 	str.w	r3, [sl]
 8025b02:	89a3      	ldrh	r3, [r4, #12]
 8025b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025b08:	81a3      	strh	r3, [r4, #12]
 8025b0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025b0e:	e7e9      	b.n	8025ae4 <__ssputs_r+0x88>

08025b10 <_svfiprintf_r>:
 8025b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b14:	4698      	mov	r8, r3
 8025b16:	898b      	ldrh	r3, [r1, #12]
 8025b18:	061b      	lsls	r3, r3, #24
 8025b1a:	b09d      	sub	sp, #116	; 0x74
 8025b1c:	4607      	mov	r7, r0
 8025b1e:	460d      	mov	r5, r1
 8025b20:	4614      	mov	r4, r2
 8025b22:	d50e      	bpl.n	8025b42 <_svfiprintf_r+0x32>
 8025b24:	690b      	ldr	r3, [r1, #16]
 8025b26:	b963      	cbnz	r3, 8025b42 <_svfiprintf_r+0x32>
 8025b28:	2140      	movs	r1, #64	; 0x40
 8025b2a:	f7fd fc51 	bl	80233d0 <_malloc_r>
 8025b2e:	6028      	str	r0, [r5, #0]
 8025b30:	6128      	str	r0, [r5, #16]
 8025b32:	b920      	cbnz	r0, 8025b3e <_svfiprintf_r+0x2e>
 8025b34:	230c      	movs	r3, #12
 8025b36:	603b      	str	r3, [r7, #0]
 8025b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025b3c:	e0d0      	b.n	8025ce0 <_svfiprintf_r+0x1d0>
 8025b3e:	2340      	movs	r3, #64	; 0x40
 8025b40:	616b      	str	r3, [r5, #20]
 8025b42:	2300      	movs	r3, #0
 8025b44:	9309      	str	r3, [sp, #36]	; 0x24
 8025b46:	2320      	movs	r3, #32
 8025b48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8025b50:	2330      	movs	r3, #48	; 0x30
 8025b52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8025cf8 <_svfiprintf_r+0x1e8>
 8025b56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025b5a:	f04f 0901 	mov.w	r9, #1
 8025b5e:	4623      	mov	r3, r4
 8025b60:	469a      	mov	sl, r3
 8025b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025b66:	b10a      	cbz	r2, 8025b6c <_svfiprintf_r+0x5c>
 8025b68:	2a25      	cmp	r2, #37	; 0x25
 8025b6a:	d1f9      	bne.n	8025b60 <_svfiprintf_r+0x50>
 8025b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8025b70:	d00b      	beq.n	8025b8a <_svfiprintf_r+0x7a>
 8025b72:	465b      	mov	r3, fp
 8025b74:	4622      	mov	r2, r4
 8025b76:	4629      	mov	r1, r5
 8025b78:	4638      	mov	r0, r7
 8025b7a:	f7ff ff6f 	bl	8025a5c <__ssputs_r>
 8025b7e:	3001      	adds	r0, #1
 8025b80:	f000 80a9 	beq.w	8025cd6 <_svfiprintf_r+0x1c6>
 8025b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025b86:	445a      	add	r2, fp
 8025b88:	9209      	str	r2, [sp, #36]	; 0x24
 8025b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8025b8e:	2b00      	cmp	r3, #0
 8025b90:	f000 80a1 	beq.w	8025cd6 <_svfiprintf_r+0x1c6>
 8025b94:	2300      	movs	r3, #0
 8025b96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025b9e:	f10a 0a01 	add.w	sl, sl, #1
 8025ba2:	9304      	str	r3, [sp, #16]
 8025ba4:	9307      	str	r3, [sp, #28]
 8025ba6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025baa:	931a      	str	r3, [sp, #104]	; 0x68
 8025bac:	4654      	mov	r4, sl
 8025bae:	2205      	movs	r2, #5
 8025bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025bb4:	4850      	ldr	r0, [pc, #320]	; (8025cf8 <_svfiprintf_r+0x1e8>)
 8025bb6:	f7da fb1b 	bl	80001f0 <memchr>
 8025bba:	9a04      	ldr	r2, [sp, #16]
 8025bbc:	b9d8      	cbnz	r0, 8025bf6 <_svfiprintf_r+0xe6>
 8025bbe:	06d0      	lsls	r0, r2, #27
 8025bc0:	bf44      	itt	mi
 8025bc2:	2320      	movmi	r3, #32
 8025bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025bc8:	0711      	lsls	r1, r2, #28
 8025bca:	bf44      	itt	mi
 8025bcc:	232b      	movmi	r3, #43	; 0x2b
 8025bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8025bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8025bd8:	d015      	beq.n	8025c06 <_svfiprintf_r+0xf6>
 8025bda:	9a07      	ldr	r2, [sp, #28]
 8025bdc:	4654      	mov	r4, sl
 8025bde:	2000      	movs	r0, #0
 8025be0:	f04f 0c0a 	mov.w	ip, #10
 8025be4:	4621      	mov	r1, r4
 8025be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025bea:	3b30      	subs	r3, #48	; 0x30
 8025bec:	2b09      	cmp	r3, #9
 8025bee:	d94d      	bls.n	8025c8c <_svfiprintf_r+0x17c>
 8025bf0:	b1b0      	cbz	r0, 8025c20 <_svfiprintf_r+0x110>
 8025bf2:	9207      	str	r2, [sp, #28]
 8025bf4:	e014      	b.n	8025c20 <_svfiprintf_r+0x110>
 8025bf6:	eba0 0308 	sub.w	r3, r0, r8
 8025bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8025bfe:	4313      	orrs	r3, r2
 8025c00:	9304      	str	r3, [sp, #16]
 8025c02:	46a2      	mov	sl, r4
 8025c04:	e7d2      	b.n	8025bac <_svfiprintf_r+0x9c>
 8025c06:	9b03      	ldr	r3, [sp, #12]
 8025c08:	1d19      	adds	r1, r3, #4
 8025c0a:	681b      	ldr	r3, [r3, #0]
 8025c0c:	9103      	str	r1, [sp, #12]
 8025c0e:	2b00      	cmp	r3, #0
 8025c10:	bfbb      	ittet	lt
 8025c12:	425b      	neglt	r3, r3
 8025c14:	f042 0202 	orrlt.w	r2, r2, #2
 8025c18:	9307      	strge	r3, [sp, #28]
 8025c1a:	9307      	strlt	r3, [sp, #28]
 8025c1c:	bfb8      	it	lt
 8025c1e:	9204      	strlt	r2, [sp, #16]
 8025c20:	7823      	ldrb	r3, [r4, #0]
 8025c22:	2b2e      	cmp	r3, #46	; 0x2e
 8025c24:	d10c      	bne.n	8025c40 <_svfiprintf_r+0x130>
 8025c26:	7863      	ldrb	r3, [r4, #1]
 8025c28:	2b2a      	cmp	r3, #42	; 0x2a
 8025c2a:	d134      	bne.n	8025c96 <_svfiprintf_r+0x186>
 8025c2c:	9b03      	ldr	r3, [sp, #12]
 8025c2e:	1d1a      	adds	r2, r3, #4
 8025c30:	681b      	ldr	r3, [r3, #0]
 8025c32:	9203      	str	r2, [sp, #12]
 8025c34:	2b00      	cmp	r3, #0
 8025c36:	bfb8      	it	lt
 8025c38:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8025c3c:	3402      	adds	r4, #2
 8025c3e:	9305      	str	r3, [sp, #20]
 8025c40:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8025d08 <_svfiprintf_r+0x1f8>
 8025c44:	7821      	ldrb	r1, [r4, #0]
 8025c46:	2203      	movs	r2, #3
 8025c48:	4650      	mov	r0, sl
 8025c4a:	f7da fad1 	bl	80001f0 <memchr>
 8025c4e:	b138      	cbz	r0, 8025c60 <_svfiprintf_r+0x150>
 8025c50:	9b04      	ldr	r3, [sp, #16]
 8025c52:	eba0 000a 	sub.w	r0, r0, sl
 8025c56:	2240      	movs	r2, #64	; 0x40
 8025c58:	4082      	lsls	r2, r0
 8025c5a:	4313      	orrs	r3, r2
 8025c5c:	3401      	adds	r4, #1
 8025c5e:	9304      	str	r3, [sp, #16]
 8025c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025c64:	4825      	ldr	r0, [pc, #148]	; (8025cfc <_svfiprintf_r+0x1ec>)
 8025c66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025c6a:	2206      	movs	r2, #6
 8025c6c:	f7da fac0 	bl	80001f0 <memchr>
 8025c70:	2800      	cmp	r0, #0
 8025c72:	d038      	beq.n	8025ce6 <_svfiprintf_r+0x1d6>
 8025c74:	4b22      	ldr	r3, [pc, #136]	; (8025d00 <_svfiprintf_r+0x1f0>)
 8025c76:	bb1b      	cbnz	r3, 8025cc0 <_svfiprintf_r+0x1b0>
 8025c78:	9b03      	ldr	r3, [sp, #12]
 8025c7a:	3307      	adds	r3, #7
 8025c7c:	f023 0307 	bic.w	r3, r3, #7
 8025c80:	3308      	adds	r3, #8
 8025c82:	9303      	str	r3, [sp, #12]
 8025c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025c86:	4433      	add	r3, r6
 8025c88:	9309      	str	r3, [sp, #36]	; 0x24
 8025c8a:	e768      	b.n	8025b5e <_svfiprintf_r+0x4e>
 8025c8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8025c90:	460c      	mov	r4, r1
 8025c92:	2001      	movs	r0, #1
 8025c94:	e7a6      	b.n	8025be4 <_svfiprintf_r+0xd4>
 8025c96:	2300      	movs	r3, #0
 8025c98:	3401      	adds	r4, #1
 8025c9a:	9305      	str	r3, [sp, #20]
 8025c9c:	4619      	mov	r1, r3
 8025c9e:	f04f 0c0a 	mov.w	ip, #10
 8025ca2:	4620      	mov	r0, r4
 8025ca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025ca8:	3a30      	subs	r2, #48	; 0x30
 8025caa:	2a09      	cmp	r2, #9
 8025cac:	d903      	bls.n	8025cb6 <_svfiprintf_r+0x1a6>
 8025cae:	2b00      	cmp	r3, #0
 8025cb0:	d0c6      	beq.n	8025c40 <_svfiprintf_r+0x130>
 8025cb2:	9105      	str	r1, [sp, #20]
 8025cb4:	e7c4      	b.n	8025c40 <_svfiprintf_r+0x130>
 8025cb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8025cba:	4604      	mov	r4, r0
 8025cbc:	2301      	movs	r3, #1
 8025cbe:	e7f0      	b.n	8025ca2 <_svfiprintf_r+0x192>
 8025cc0:	ab03      	add	r3, sp, #12
 8025cc2:	9300      	str	r3, [sp, #0]
 8025cc4:	462a      	mov	r2, r5
 8025cc6:	4b0f      	ldr	r3, [pc, #60]	; (8025d04 <_svfiprintf_r+0x1f4>)
 8025cc8:	a904      	add	r1, sp, #16
 8025cca:	4638      	mov	r0, r7
 8025ccc:	f7fd fcea 	bl	80236a4 <_printf_float>
 8025cd0:	1c42      	adds	r2, r0, #1
 8025cd2:	4606      	mov	r6, r0
 8025cd4:	d1d6      	bne.n	8025c84 <_svfiprintf_r+0x174>
 8025cd6:	89ab      	ldrh	r3, [r5, #12]
 8025cd8:	065b      	lsls	r3, r3, #25
 8025cda:	f53f af2d 	bmi.w	8025b38 <_svfiprintf_r+0x28>
 8025cde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025ce0:	b01d      	add	sp, #116	; 0x74
 8025ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ce6:	ab03      	add	r3, sp, #12
 8025ce8:	9300      	str	r3, [sp, #0]
 8025cea:	462a      	mov	r2, r5
 8025cec:	4b05      	ldr	r3, [pc, #20]	; (8025d04 <_svfiprintf_r+0x1f4>)
 8025cee:	a904      	add	r1, sp, #16
 8025cf0:	4638      	mov	r0, r7
 8025cf2:	f7fd ff7b 	bl	8023bec <_printf_i>
 8025cf6:	e7eb      	b.n	8025cd0 <_svfiprintf_r+0x1c0>
 8025cf8:	0802b92c 	.word	0x0802b92c
 8025cfc:	0802b936 	.word	0x0802b936
 8025d00:	080236a5 	.word	0x080236a5
 8025d04:	08025a5d 	.word	0x08025a5d
 8025d08:	0802b932 	.word	0x0802b932

08025d0c <__sfputc_r>:
 8025d0c:	6893      	ldr	r3, [r2, #8]
 8025d0e:	3b01      	subs	r3, #1
 8025d10:	2b00      	cmp	r3, #0
 8025d12:	b410      	push	{r4}
 8025d14:	6093      	str	r3, [r2, #8]
 8025d16:	da08      	bge.n	8025d2a <__sfputc_r+0x1e>
 8025d18:	6994      	ldr	r4, [r2, #24]
 8025d1a:	42a3      	cmp	r3, r4
 8025d1c:	db01      	blt.n	8025d22 <__sfputc_r+0x16>
 8025d1e:	290a      	cmp	r1, #10
 8025d20:	d103      	bne.n	8025d2a <__sfputc_r+0x1e>
 8025d22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025d26:	f7fe ba5c 	b.w	80241e2 <__swbuf_r>
 8025d2a:	6813      	ldr	r3, [r2, #0]
 8025d2c:	1c58      	adds	r0, r3, #1
 8025d2e:	6010      	str	r0, [r2, #0]
 8025d30:	7019      	strb	r1, [r3, #0]
 8025d32:	4608      	mov	r0, r1
 8025d34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025d38:	4770      	bx	lr

08025d3a <__sfputs_r>:
 8025d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d3c:	4606      	mov	r6, r0
 8025d3e:	460f      	mov	r7, r1
 8025d40:	4614      	mov	r4, r2
 8025d42:	18d5      	adds	r5, r2, r3
 8025d44:	42ac      	cmp	r4, r5
 8025d46:	d101      	bne.n	8025d4c <__sfputs_r+0x12>
 8025d48:	2000      	movs	r0, #0
 8025d4a:	e007      	b.n	8025d5c <__sfputs_r+0x22>
 8025d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025d50:	463a      	mov	r2, r7
 8025d52:	4630      	mov	r0, r6
 8025d54:	f7ff ffda 	bl	8025d0c <__sfputc_r>
 8025d58:	1c43      	adds	r3, r0, #1
 8025d5a:	d1f3      	bne.n	8025d44 <__sfputs_r+0xa>
 8025d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025d60 <_vfiprintf_r>:
 8025d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d64:	460d      	mov	r5, r1
 8025d66:	b09d      	sub	sp, #116	; 0x74
 8025d68:	4614      	mov	r4, r2
 8025d6a:	4698      	mov	r8, r3
 8025d6c:	4606      	mov	r6, r0
 8025d6e:	b118      	cbz	r0, 8025d78 <_vfiprintf_r+0x18>
 8025d70:	6a03      	ldr	r3, [r0, #32]
 8025d72:	b90b      	cbnz	r3, 8025d78 <_vfiprintf_r+0x18>
 8025d74:	f7fe f8e8 	bl	8023f48 <__sinit>
 8025d78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025d7a:	07d9      	lsls	r1, r3, #31
 8025d7c:	d405      	bmi.n	8025d8a <_vfiprintf_r+0x2a>
 8025d7e:	89ab      	ldrh	r3, [r5, #12]
 8025d80:	059a      	lsls	r2, r3, #22
 8025d82:	d402      	bmi.n	8025d8a <_vfiprintf_r+0x2a>
 8025d84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025d86:	f7fe fc06 	bl	8024596 <__retarget_lock_acquire_recursive>
 8025d8a:	89ab      	ldrh	r3, [r5, #12]
 8025d8c:	071b      	lsls	r3, r3, #28
 8025d8e:	d501      	bpl.n	8025d94 <_vfiprintf_r+0x34>
 8025d90:	692b      	ldr	r3, [r5, #16]
 8025d92:	b99b      	cbnz	r3, 8025dbc <_vfiprintf_r+0x5c>
 8025d94:	4629      	mov	r1, r5
 8025d96:	4630      	mov	r0, r6
 8025d98:	f7fe fa60 	bl	802425c <__swsetup_r>
 8025d9c:	b170      	cbz	r0, 8025dbc <_vfiprintf_r+0x5c>
 8025d9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025da0:	07dc      	lsls	r4, r3, #31
 8025da2:	d504      	bpl.n	8025dae <_vfiprintf_r+0x4e>
 8025da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025da8:	b01d      	add	sp, #116	; 0x74
 8025daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025dae:	89ab      	ldrh	r3, [r5, #12]
 8025db0:	0598      	lsls	r0, r3, #22
 8025db2:	d4f7      	bmi.n	8025da4 <_vfiprintf_r+0x44>
 8025db4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025db6:	f7fe fbef 	bl	8024598 <__retarget_lock_release_recursive>
 8025dba:	e7f3      	b.n	8025da4 <_vfiprintf_r+0x44>
 8025dbc:	2300      	movs	r3, #0
 8025dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8025dc0:	2320      	movs	r3, #32
 8025dc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025dc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8025dca:	2330      	movs	r3, #48	; 0x30
 8025dcc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8025f80 <_vfiprintf_r+0x220>
 8025dd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025dd4:	f04f 0901 	mov.w	r9, #1
 8025dd8:	4623      	mov	r3, r4
 8025dda:	469a      	mov	sl, r3
 8025ddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025de0:	b10a      	cbz	r2, 8025de6 <_vfiprintf_r+0x86>
 8025de2:	2a25      	cmp	r2, #37	; 0x25
 8025de4:	d1f9      	bne.n	8025dda <_vfiprintf_r+0x7a>
 8025de6:	ebba 0b04 	subs.w	fp, sl, r4
 8025dea:	d00b      	beq.n	8025e04 <_vfiprintf_r+0xa4>
 8025dec:	465b      	mov	r3, fp
 8025dee:	4622      	mov	r2, r4
 8025df0:	4629      	mov	r1, r5
 8025df2:	4630      	mov	r0, r6
 8025df4:	f7ff ffa1 	bl	8025d3a <__sfputs_r>
 8025df8:	3001      	adds	r0, #1
 8025dfa:	f000 80a9 	beq.w	8025f50 <_vfiprintf_r+0x1f0>
 8025dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025e00:	445a      	add	r2, fp
 8025e02:	9209      	str	r2, [sp, #36]	; 0x24
 8025e04:	f89a 3000 	ldrb.w	r3, [sl]
 8025e08:	2b00      	cmp	r3, #0
 8025e0a:	f000 80a1 	beq.w	8025f50 <_vfiprintf_r+0x1f0>
 8025e0e:	2300      	movs	r3, #0
 8025e10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025e14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025e18:	f10a 0a01 	add.w	sl, sl, #1
 8025e1c:	9304      	str	r3, [sp, #16]
 8025e1e:	9307      	str	r3, [sp, #28]
 8025e20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025e24:	931a      	str	r3, [sp, #104]	; 0x68
 8025e26:	4654      	mov	r4, sl
 8025e28:	2205      	movs	r2, #5
 8025e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025e2e:	4854      	ldr	r0, [pc, #336]	; (8025f80 <_vfiprintf_r+0x220>)
 8025e30:	f7da f9de 	bl	80001f0 <memchr>
 8025e34:	9a04      	ldr	r2, [sp, #16]
 8025e36:	b9d8      	cbnz	r0, 8025e70 <_vfiprintf_r+0x110>
 8025e38:	06d1      	lsls	r1, r2, #27
 8025e3a:	bf44      	itt	mi
 8025e3c:	2320      	movmi	r3, #32
 8025e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025e42:	0713      	lsls	r3, r2, #28
 8025e44:	bf44      	itt	mi
 8025e46:	232b      	movmi	r3, #43	; 0x2b
 8025e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8025e50:	2b2a      	cmp	r3, #42	; 0x2a
 8025e52:	d015      	beq.n	8025e80 <_vfiprintf_r+0x120>
 8025e54:	9a07      	ldr	r2, [sp, #28]
 8025e56:	4654      	mov	r4, sl
 8025e58:	2000      	movs	r0, #0
 8025e5a:	f04f 0c0a 	mov.w	ip, #10
 8025e5e:	4621      	mov	r1, r4
 8025e60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025e64:	3b30      	subs	r3, #48	; 0x30
 8025e66:	2b09      	cmp	r3, #9
 8025e68:	d94d      	bls.n	8025f06 <_vfiprintf_r+0x1a6>
 8025e6a:	b1b0      	cbz	r0, 8025e9a <_vfiprintf_r+0x13a>
 8025e6c:	9207      	str	r2, [sp, #28]
 8025e6e:	e014      	b.n	8025e9a <_vfiprintf_r+0x13a>
 8025e70:	eba0 0308 	sub.w	r3, r0, r8
 8025e74:	fa09 f303 	lsl.w	r3, r9, r3
 8025e78:	4313      	orrs	r3, r2
 8025e7a:	9304      	str	r3, [sp, #16]
 8025e7c:	46a2      	mov	sl, r4
 8025e7e:	e7d2      	b.n	8025e26 <_vfiprintf_r+0xc6>
 8025e80:	9b03      	ldr	r3, [sp, #12]
 8025e82:	1d19      	adds	r1, r3, #4
 8025e84:	681b      	ldr	r3, [r3, #0]
 8025e86:	9103      	str	r1, [sp, #12]
 8025e88:	2b00      	cmp	r3, #0
 8025e8a:	bfbb      	ittet	lt
 8025e8c:	425b      	neglt	r3, r3
 8025e8e:	f042 0202 	orrlt.w	r2, r2, #2
 8025e92:	9307      	strge	r3, [sp, #28]
 8025e94:	9307      	strlt	r3, [sp, #28]
 8025e96:	bfb8      	it	lt
 8025e98:	9204      	strlt	r2, [sp, #16]
 8025e9a:	7823      	ldrb	r3, [r4, #0]
 8025e9c:	2b2e      	cmp	r3, #46	; 0x2e
 8025e9e:	d10c      	bne.n	8025eba <_vfiprintf_r+0x15a>
 8025ea0:	7863      	ldrb	r3, [r4, #1]
 8025ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8025ea4:	d134      	bne.n	8025f10 <_vfiprintf_r+0x1b0>
 8025ea6:	9b03      	ldr	r3, [sp, #12]
 8025ea8:	1d1a      	adds	r2, r3, #4
 8025eaa:	681b      	ldr	r3, [r3, #0]
 8025eac:	9203      	str	r2, [sp, #12]
 8025eae:	2b00      	cmp	r3, #0
 8025eb0:	bfb8      	it	lt
 8025eb2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8025eb6:	3402      	adds	r4, #2
 8025eb8:	9305      	str	r3, [sp, #20]
 8025eba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8025f90 <_vfiprintf_r+0x230>
 8025ebe:	7821      	ldrb	r1, [r4, #0]
 8025ec0:	2203      	movs	r2, #3
 8025ec2:	4650      	mov	r0, sl
 8025ec4:	f7da f994 	bl	80001f0 <memchr>
 8025ec8:	b138      	cbz	r0, 8025eda <_vfiprintf_r+0x17a>
 8025eca:	9b04      	ldr	r3, [sp, #16]
 8025ecc:	eba0 000a 	sub.w	r0, r0, sl
 8025ed0:	2240      	movs	r2, #64	; 0x40
 8025ed2:	4082      	lsls	r2, r0
 8025ed4:	4313      	orrs	r3, r2
 8025ed6:	3401      	adds	r4, #1
 8025ed8:	9304      	str	r3, [sp, #16]
 8025eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025ede:	4829      	ldr	r0, [pc, #164]	; (8025f84 <_vfiprintf_r+0x224>)
 8025ee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025ee4:	2206      	movs	r2, #6
 8025ee6:	f7da f983 	bl	80001f0 <memchr>
 8025eea:	2800      	cmp	r0, #0
 8025eec:	d03f      	beq.n	8025f6e <_vfiprintf_r+0x20e>
 8025eee:	4b26      	ldr	r3, [pc, #152]	; (8025f88 <_vfiprintf_r+0x228>)
 8025ef0:	bb1b      	cbnz	r3, 8025f3a <_vfiprintf_r+0x1da>
 8025ef2:	9b03      	ldr	r3, [sp, #12]
 8025ef4:	3307      	adds	r3, #7
 8025ef6:	f023 0307 	bic.w	r3, r3, #7
 8025efa:	3308      	adds	r3, #8
 8025efc:	9303      	str	r3, [sp, #12]
 8025efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025f00:	443b      	add	r3, r7
 8025f02:	9309      	str	r3, [sp, #36]	; 0x24
 8025f04:	e768      	b.n	8025dd8 <_vfiprintf_r+0x78>
 8025f06:	fb0c 3202 	mla	r2, ip, r2, r3
 8025f0a:	460c      	mov	r4, r1
 8025f0c:	2001      	movs	r0, #1
 8025f0e:	e7a6      	b.n	8025e5e <_vfiprintf_r+0xfe>
 8025f10:	2300      	movs	r3, #0
 8025f12:	3401      	adds	r4, #1
 8025f14:	9305      	str	r3, [sp, #20]
 8025f16:	4619      	mov	r1, r3
 8025f18:	f04f 0c0a 	mov.w	ip, #10
 8025f1c:	4620      	mov	r0, r4
 8025f1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025f22:	3a30      	subs	r2, #48	; 0x30
 8025f24:	2a09      	cmp	r2, #9
 8025f26:	d903      	bls.n	8025f30 <_vfiprintf_r+0x1d0>
 8025f28:	2b00      	cmp	r3, #0
 8025f2a:	d0c6      	beq.n	8025eba <_vfiprintf_r+0x15a>
 8025f2c:	9105      	str	r1, [sp, #20]
 8025f2e:	e7c4      	b.n	8025eba <_vfiprintf_r+0x15a>
 8025f30:	fb0c 2101 	mla	r1, ip, r1, r2
 8025f34:	4604      	mov	r4, r0
 8025f36:	2301      	movs	r3, #1
 8025f38:	e7f0      	b.n	8025f1c <_vfiprintf_r+0x1bc>
 8025f3a:	ab03      	add	r3, sp, #12
 8025f3c:	9300      	str	r3, [sp, #0]
 8025f3e:	462a      	mov	r2, r5
 8025f40:	4b12      	ldr	r3, [pc, #72]	; (8025f8c <_vfiprintf_r+0x22c>)
 8025f42:	a904      	add	r1, sp, #16
 8025f44:	4630      	mov	r0, r6
 8025f46:	f7fd fbad 	bl	80236a4 <_printf_float>
 8025f4a:	4607      	mov	r7, r0
 8025f4c:	1c78      	adds	r0, r7, #1
 8025f4e:	d1d6      	bne.n	8025efe <_vfiprintf_r+0x19e>
 8025f50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025f52:	07d9      	lsls	r1, r3, #31
 8025f54:	d405      	bmi.n	8025f62 <_vfiprintf_r+0x202>
 8025f56:	89ab      	ldrh	r3, [r5, #12]
 8025f58:	059a      	lsls	r2, r3, #22
 8025f5a:	d402      	bmi.n	8025f62 <_vfiprintf_r+0x202>
 8025f5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025f5e:	f7fe fb1b 	bl	8024598 <__retarget_lock_release_recursive>
 8025f62:	89ab      	ldrh	r3, [r5, #12]
 8025f64:	065b      	lsls	r3, r3, #25
 8025f66:	f53f af1d 	bmi.w	8025da4 <_vfiprintf_r+0x44>
 8025f6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025f6c:	e71c      	b.n	8025da8 <_vfiprintf_r+0x48>
 8025f6e:	ab03      	add	r3, sp, #12
 8025f70:	9300      	str	r3, [sp, #0]
 8025f72:	462a      	mov	r2, r5
 8025f74:	4b05      	ldr	r3, [pc, #20]	; (8025f8c <_vfiprintf_r+0x22c>)
 8025f76:	a904      	add	r1, sp, #16
 8025f78:	4630      	mov	r0, r6
 8025f7a:	f7fd fe37 	bl	8023bec <_printf_i>
 8025f7e:	e7e4      	b.n	8025f4a <_vfiprintf_r+0x1ea>
 8025f80:	0802b92c 	.word	0x0802b92c
 8025f84:	0802b936 	.word	0x0802b936
 8025f88:	080236a5 	.word	0x080236a5
 8025f8c:	08025d3b 	.word	0x08025d3b
 8025f90:	0802b932 	.word	0x0802b932

08025f94 <__sflush_r>:
 8025f94:	898a      	ldrh	r2, [r1, #12]
 8025f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025f9a:	4605      	mov	r5, r0
 8025f9c:	0710      	lsls	r0, r2, #28
 8025f9e:	460c      	mov	r4, r1
 8025fa0:	d458      	bmi.n	8026054 <__sflush_r+0xc0>
 8025fa2:	684b      	ldr	r3, [r1, #4]
 8025fa4:	2b00      	cmp	r3, #0
 8025fa6:	dc05      	bgt.n	8025fb4 <__sflush_r+0x20>
 8025fa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025faa:	2b00      	cmp	r3, #0
 8025fac:	dc02      	bgt.n	8025fb4 <__sflush_r+0x20>
 8025fae:	2000      	movs	r0, #0
 8025fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025fb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025fb6:	2e00      	cmp	r6, #0
 8025fb8:	d0f9      	beq.n	8025fae <__sflush_r+0x1a>
 8025fba:	2300      	movs	r3, #0
 8025fbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025fc0:	682f      	ldr	r7, [r5, #0]
 8025fc2:	6a21      	ldr	r1, [r4, #32]
 8025fc4:	602b      	str	r3, [r5, #0]
 8025fc6:	d032      	beq.n	802602e <__sflush_r+0x9a>
 8025fc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025fca:	89a3      	ldrh	r3, [r4, #12]
 8025fcc:	075a      	lsls	r2, r3, #29
 8025fce:	d505      	bpl.n	8025fdc <__sflush_r+0x48>
 8025fd0:	6863      	ldr	r3, [r4, #4]
 8025fd2:	1ac0      	subs	r0, r0, r3
 8025fd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025fd6:	b10b      	cbz	r3, 8025fdc <__sflush_r+0x48>
 8025fd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025fda:	1ac0      	subs	r0, r0, r3
 8025fdc:	2300      	movs	r3, #0
 8025fde:	4602      	mov	r2, r0
 8025fe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025fe2:	6a21      	ldr	r1, [r4, #32]
 8025fe4:	4628      	mov	r0, r5
 8025fe6:	47b0      	blx	r6
 8025fe8:	1c43      	adds	r3, r0, #1
 8025fea:	89a3      	ldrh	r3, [r4, #12]
 8025fec:	d106      	bne.n	8025ffc <__sflush_r+0x68>
 8025fee:	6829      	ldr	r1, [r5, #0]
 8025ff0:	291d      	cmp	r1, #29
 8025ff2:	d82b      	bhi.n	802604c <__sflush_r+0xb8>
 8025ff4:	4a29      	ldr	r2, [pc, #164]	; (802609c <__sflush_r+0x108>)
 8025ff6:	410a      	asrs	r2, r1
 8025ff8:	07d6      	lsls	r6, r2, #31
 8025ffa:	d427      	bmi.n	802604c <__sflush_r+0xb8>
 8025ffc:	2200      	movs	r2, #0
 8025ffe:	6062      	str	r2, [r4, #4]
 8026000:	04d9      	lsls	r1, r3, #19
 8026002:	6922      	ldr	r2, [r4, #16]
 8026004:	6022      	str	r2, [r4, #0]
 8026006:	d504      	bpl.n	8026012 <__sflush_r+0x7e>
 8026008:	1c42      	adds	r2, r0, #1
 802600a:	d101      	bne.n	8026010 <__sflush_r+0x7c>
 802600c:	682b      	ldr	r3, [r5, #0]
 802600e:	b903      	cbnz	r3, 8026012 <__sflush_r+0x7e>
 8026010:	6560      	str	r0, [r4, #84]	; 0x54
 8026012:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026014:	602f      	str	r7, [r5, #0]
 8026016:	2900      	cmp	r1, #0
 8026018:	d0c9      	beq.n	8025fae <__sflush_r+0x1a>
 802601a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802601e:	4299      	cmp	r1, r3
 8026020:	d002      	beq.n	8026028 <__sflush_r+0x94>
 8026022:	4628      	mov	r0, r5
 8026024:	f7ff f952 	bl	80252cc <_free_r>
 8026028:	2000      	movs	r0, #0
 802602a:	6360      	str	r0, [r4, #52]	; 0x34
 802602c:	e7c0      	b.n	8025fb0 <__sflush_r+0x1c>
 802602e:	2301      	movs	r3, #1
 8026030:	4628      	mov	r0, r5
 8026032:	47b0      	blx	r6
 8026034:	1c41      	adds	r1, r0, #1
 8026036:	d1c8      	bne.n	8025fca <__sflush_r+0x36>
 8026038:	682b      	ldr	r3, [r5, #0]
 802603a:	2b00      	cmp	r3, #0
 802603c:	d0c5      	beq.n	8025fca <__sflush_r+0x36>
 802603e:	2b1d      	cmp	r3, #29
 8026040:	d001      	beq.n	8026046 <__sflush_r+0xb2>
 8026042:	2b16      	cmp	r3, #22
 8026044:	d101      	bne.n	802604a <__sflush_r+0xb6>
 8026046:	602f      	str	r7, [r5, #0]
 8026048:	e7b1      	b.n	8025fae <__sflush_r+0x1a>
 802604a:	89a3      	ldrh	r3, [r4, #12]
 802604c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026050:	81a3      	strh	r3, [r4, #12]
 8026052:	e7ad      	b.n	8025fb0 <__sflush_r+0x1c>
 8026054:	690f      	ldr	r7, [r1, #16]
 8026056:	2f00      	cmp	r7, #0
 8026058:	d0a9      	beq.n	8025fae <__sflush_r+0x1a>
 802605a:	0793      	lsls	r3, r2, #30
 802605c:	680e      	ldr	r6, [r1, #0]
 802605e:	bf08      	it	eq
 8026060:	694b      	ldreq	r3, [r1, #20]
 8026062:	600f      	str	r7, [r1, #0]
 8026064:	bf18      	it	ne
 8026066:	2300      	movne	r3, #0
 8026068:	eba6 0807 	sub.w	r8, r6, r7
 802606c:	608b      	str	r3, [r1, #8]
 802606e:	f1b8 0f00 	cmp.w	r8, #0
 8026072:	dd9c      	ble.n	8025fae <__sflush_r+0x1a>
 8026074:	6a21      	ldr	r1, [r4, #32]
 8026076:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8026078:	4643      	mov	r3, r8
 802607a:	463a      	mov	r2, r7
 802607c:	4628      	mov	r0, r5
 802607e:	47b0      	blx	r6
 8026080:	2800      	cmp	r0, #0
 8026082:	dc06      	bgt.n	8026092 <__sflush_r+0xfe>
 8026084:	89a3      	ldrh	r3, [r4, #12]
 8026086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802608a:	81a3      	strh	r3, [r4, #12]
 802608c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8026090:	e78e      	b.n	8025fb0 <__sflush_r+0x1c>
 8026092:	4407      	add	r7, r0
 8026094:	eba8 0800 	sub.w	r8, r8, r0
 8026098:	e7e9      	b.n	802606e <__sflush_r+0xda>
 802609a:	bf00      	nop
 802609c:	dfbffffe 	.word	0xdfbffffe

080260a0 <_fflush_r>:
 80260a0:	b538      	push	{r3, r4, r5, lr}
 80260a2:	690b      	ldr	r3, [r1, #16]
 80260a4:	4605      	mov	r5, r0
 80260a6:	460c      	mov	r4, r1
 80260a8:	b913      	cbnz	r3, 80260b0 <_fflush_r+0x10>
 80260aa:	2500      	movs	r5, #0
 80260ac:	4628      	mov	r0, r5
 80260ae:	bd38      	pop	{r3, r4, r5, pc}
 80260b0:	b118      	cbz	r0, 80260ba <_fflush_r+0x1a>
 80260b2:	6a03      	ldr	r3, [r0, #32]
 80260b4:	b90b      	cbnz	r3, 80260ba <_fflush_r+0x1a>
 80260b6:	f7fd ff47 	bl	8023f48 <__sinit>
 80260ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80260be:	2b00      	cmp	r3, #0
 80260c0:	d0f3      	beq.n	80260aa <_fflush_r+0xa>
 80260c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80260c4:	07d0      	lsls	r0, r2, #31
 80260c6:	d404      	bmi.n	80260d2 <_fflush_r+0x32>
 80260c8:	0599      	lsls	r1, r3, #22
 80260ca:	d402      	bmi.n	80260d2 <_fflush_r+0x32>
 80260cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80260ce:	f7fe fa62 	bl	8024596 <__retarget_lock_acquire_recursive>
 80260d2:	4628      	mov	r0, r5
 80260d4:	4621      	mov	r1, r4
 80260d6:	f7ff ff5d 	bl	8025f94 <__sflush_r>
 80260da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80260dc:	07da      	lsls	r2, r3, #31
 80260de:	4605      	mov	r5, r0
 80260e0:	d4e4      	bmi.n	80260ac <_fflush_r+0xc>
 80260e2:	89a3      	ldrh	r3, [r4, #12]
 80260e4:	059b      	lsls	r3, r3, #22
 80260e6:	d4e1      	bmi.n	80260ac <_fflush_r+0xc>
 80260e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80260ea:	f7fe fa55 	bl	8024598 <__retarget_lock_release_recursive>
 80260ee:	e7dd      	b.n	80260ac <_fflush_r+0xc>

080260f0 <__swhatbuf_r>:
 80260f0:	b570      	push	{r4, r5, r6, lr}
 80260f2:	460c      	mov	r4, r1
 80260f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80260f8:	2900      	cmp	r1, #0
 80260fa:	b096      	sub	sp, #88	; 0x58
 80260fc:	4615      	mov	r5, r2
 80260fe:	461e      	mov	r6, r3
 8026100:	da0d      	bge.n	802611e <__swhatbuf_r+0x2e>
 8026102:	89a3      	ldrh	r3, [r4, #12]
 8026104:	f013 0f80 	tst.w	r3, #128	; 0x80
 8026108:	f04f 0100 	mov.w	r1, #0
 802610c:	bf0c      	ite	eq
 802610e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8026112:	2340      	movne	r3, #64	; 0x40
 8026114:	2000      	movs	r0, #0
 8026116:	6031      	str	r1, [r6, #0]
 8026118:	602b      	str	r3, [r5, #0]
 802611a:	b016      	add	sp, #88	; 0x58
 802611c:	bd70      	pop	{r4, r5, r6, pc}
 802611e:	466a      	mov	r2, sp
 8026120:	f000 f878 	bl	8026214 <_fstat_r>
 8026124:	2800      	cmp	r0, #0
 8026126:	dbec      	blt.n	8026102 <__swhatbuf_r+0x12>
 8026128:	9901      	ldr	r1, [sp, #4]
 802612a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802612e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8026132:	4259      	negs	r1, r3
 8026134:	4159      	adcs	r1, r3
 8026136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802613a:	e7eb      	b.n	8026114 <__swhatbuf_r+0x24>

0802613c <__smakebuf_r>:
 802613c:	898b      	ldrh	r3, [r1, #12]
 802613e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026140:	079d      	lsls	r5, r3, #30
 8026142:	4606      	mov	r6, r0
 8026144:	460c      	mov	r4, r1
 8026146:	d507      	bpl.n	8026158 <__smakebuf_r+0x1c>
 8026148:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802614c:	6023      	str	r3, [r4, #0]
 802614e:	6123      	str	r3, [r4, #16]
 8026150:	2301      	movs	r3, #1
 8026152:	6163      	str	r3, [r4, #20]
 8026154:	b002      	add	sp, #8
 8026156:	bd70      	pop	{r4, r5, r6, pc}
 8026158:	ab01      	add	r3, sp, #4
 802615a:	466a      	mov	r2, sp
 802615c:	f7ff ffc8 	bl	80260f0 <__swhatbuf_r>
 8026160:	9900      	ldr	r1, [sp, #0]
 8026162:	4605      	mov	r5, r0
 8026164:	4630      	mov	r0, r6
 8026166:	f7fd f933 	bl	80233d0 <_malloc_r>
 802616a:	b948      	cbnz	r0, 8026180 <__smakebuf_r+0x44>
 802616c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026170:	059a      	lsls	r2, r3, #22
 8026172:	d4ef      	bmi.n	8026154 <__smakebuf_r+0x18>
 8026174:	f023 0303 	bic.w	r3, r3, #3
 8026178:	f043 0302 	orr.w	r3, r3, #2
 802617c:	81a3      	strh	r3, [r4, #12]
 802617e:	e7e3      	b.n	8026148 <__smakebuf_r+0xc>
 8026180:	89a3      	ldrh	r3, [r4, #12]
 8026182:	6020      	str	r0, [r4, #0]
 8026184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026188:	81a3      	strh	r3, [r4, #12]
 802618a:	9b00      	ldr	r3, [sp, #0]
 802618c:	6163      	str	r3, [r4, #20]
 802618e:	9b01      	ldr	r3, [sp, #4]
 8026190:	6120      	str	r0, [r4, #16]
 8026192:	b15b      	cbz	r3, 80261ac <__smakebuf_r+0x70>
 8026194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026198:	4630      	mov	r0, r6
 802619a:	f000 f84d 	bl	8026238 <_isatty_r>
 802619e:	b128      	cbz	r0, 80261ac <__smakebuf_r+0x70>
 80261a0:	89a3      	ldrh	r3, [r4, #12]
 80261a2:	f023 0303 	bic.w	r3, r3, #3
 80261a6:	f043 0301 	orr.w	r3, r3, #1
 80261aa:	81a3      	strh	r3, [r4, #12]
 80261ac:	89a3      	ldrh	r3, [r4, #12]
 80261ae:	431d      	orrs	r5, r3
 80261b0:	81a5      	strh	r5, [r4, #12]
 80261b2:	e7cf      	b.n	8026154 <__smakebuf_r+0x18>

080261b4 <_raise_r>:
 80261b4:	291f      	cmp	r1, #31
 80261b6:	b538      	push	{r3, r4, r5, lr}
 80261b8:	4604      	mov	r4, r0
 80261ba:	460d      	mov	r5, r1
 80261bc:	d904      	bls.n	80261c8 <_raise_r+0x14>
 80261be:	2316      	movs	r3, #22
 80261c0:	6003      	str	r3, [r0, #0]
 80261c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80261c6:	bd38      	pop	{r3, r4, r5, pc}
 80261c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80261ca:	b112      	cbz	r2, 80261d2 <_raise_r+0x1e>
 80261cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80261d0:	b94b      	cbnz	r3, 80261e6 <_raise_r+0x32>
 80261d2:	4620      	mov	r0, r4
 80261d4:	f000 f852 	bl	802627c <_getpid_r>
 80261d8:	462a      	mov	r2, r5
 80261da:	4601      	mov	r1, r0
 80261dc:	4620      	mov	r0, r4
 80261de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80261e2:	f000 b839 	b.w	8026258 <_kill_r>
 80261e6:	2b01      	cmp	r3, #1
 80261e8:	d00a      	beq.n	8026200 <_raise_r+0x4c>
 80261ea:	1c59      	adds	r1, r3, #1
 80261ec:	d103      	bne.n	80261f6 <_raise_r+0x42>
 80261ee:	2316      	movs	r3, #22
 80261f0:	6003      	str	r3, [r0, #0]
 80261f2:	2001      	movs	r0, #1
 80261f4:	e7e7      	b.n	80261c6 <_raise_r+0x12>
 80261f6:	2400      	movs	r4, #0
 80261f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80261fc:	4628      	mov	r0, r5
 80261fe:	4798      	blx	r3
 8026200:	2000      	movs	r0, #0
 8026202:	e7e0      	b.n	80261c6 <_raise_r+0x12>

08026204 <raise>:
 8026204:	4b02      	ldr	r3, [pc, #8]	; (8026210 <raise+0xc>)
 8026206:	4601      	mov	r1, r0
 8026208:	6818      	ldr	r0, [r3, #0]
 802620a:	f7ff bfd3 	b.w	80261b4 <_raise_r>
 802620e:	bf00      	nop
 8026210:	20000098 	.word	0x20000098

08026214 <_fstat_r>:
 8026214:	b538      	push	{r3, r4, r5, lr}
 8026216:	4d07      	ldr	r5, [pc, #28]	; (8026234 <_fstat_r+0x20>)
 8026218:	2300      	movs	r3, #0
 802621a:	4604      	mov	r4, r0
 802621c:	4608      	mov	r0, r1
 802621e:	4611      	mov	r1, r2
 8026220:	602b      	str	r3, [r5, #0]
 8026222:	f7dd f966 	bl	80034f2 <_fstat>
 8026226:	1c43      	adds	r3, r0, #1
 8026228:	d102      	bne.n	8026230 <_fstat_r+0x1c>
 802622a:	682b      	ldr	r3, [r5, #0]
 802622c:	b103      	cbz	r3, 8026230 <_fstat_r+0x1c>
 802622e:	6023      	str	r3, [r4, #0]
 8026230:	bd38      	pop	{r3, r4, r5, pc}
 8026232:	bf00      	nop
 8026234:	2001374c 	.word	0x2001374c

08026238 <_isatty_r>:
 8026238:	b538      	push	{r3, r4, r5, lr}
 802623a:	4d06      	ldr	r5, [pc, #24]	; (8026254 <_isatty_r+0x1c>)
 802623c:	2300      	movs	r3, #0
 802623e:	4604      	mov	r4, r0
 8026240:	4608      	mov	r0, r1
 8026242:	602b      	str	r3, [r5, #0]
 8026244:	f7dd f965 	bl	8003512 <_isatty>
 8026248:	1c43      	adds	r3, r0, #1
 802624a:	d102      	bne.n	8026252 <_isatty_r+0x1a>
 802624c:	682b      	ldr	r3, [r5, #0]
 802624e:	b103      	cbz	r3, 8026252 <_isatty_r+0x1a>
 8026250:	6023      	str	r3, [r4, #0]
 8026252:	bd38      	pop	{r3, r4, r5, pc}
 8026254:	2001374c 	.word	0x2001374c

08026258 <_kill_r>:
 8026258:	b538      	push	{r3, r4, r5, lr}
 802625a:	4d07      	ldr	r5, [pc, #28]	; (8026278 <_kill_r+0x20>)
 802625c:	2300      	movs	r3, #0
 802625e:	4604      	mov	r4, r0
 8026260:	4608      	mov	r0, r1
 8026262:	4611      	mov	r1, r2
 8026264:	602b      	str	r3, [r5, #0]
 8026266:	f7dd f8e3 	bl	8003430 <_kill>
 802626a:	1c43      	adds	r3, r0, #1
 802626c:	d102      	bne.n	8026274 <_kill_r+0x1c>
 802626e:	682b      	ldr	r3, [r5, #0]
 8026270:	b103      	cbz	r3, 8026274 <_kill_r+0x1c>
 8026272:	6023      	str	r3, [r4, #0]
 8026274:	bd38      	pop	{r3, r4, r5, pc}
 8026276:	bf00      	nop
 8026278:	2001374c 	.word	0x2001374c

0802627c <_getpid_r>:
 802627c:	f7dd b8d0 	b.w	8003420 <_getpid>

08026280 <_calloc_r>:
 8026280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026282:	fba1 2402 	umull	r2, r4, r1, r2
 8026286:	b94c      	cbnz	r4, 802629c <_calloc_r+0x1c>
 8026288:	4611      	mov	r1, r2
 802628a:	9201      	str	r2, [sp, #4]
 802628c:	f7fd f8a0 	bl	80233d0 <_malloc_r>
 8026290:	9a01      	ldr	r2, [sp, #4]
 8026292:	4605      	mov	r5, r0
 8026294:	b930      	cbnz	r0, 80262a4 <_calloc_r+0x24>
 8026296:	4628      	mov	r0, r5
 8026298:	b003      	add	sp, #12
 802629a:	bd30      	pop	{r4, r5, pc}
 802629c:	220c      	movs	r2, #12
 802629e:	6002      	str	r2, [r0, #0]
 80262a0:	2500      	movs	r5, #0
 80262a2:	e7f8      	b.n	8026296 <_calloc_r+0x16>
 80262a4:	4621      	mov	r1, r4
 80262a6:	f7fe f85b 	bl	8024360 <memset>
 80262aa:	e7f4      	b.n	8026296 <_calloc_r+0x16>

080262ac <__ascii_mbtowc>:
 80262ac:	b082      	sub	sp, #8
 80262ae:	b901      	cbnz	r1, 80262b2 <__ascii_mbtowc+0x6>
 80262b0:	a901      	add	r1, sp, #4
 80262b2:	b142      	cbz	r2, 80262c6 <__ascii_mbtowc+0x1a>
 80262b4:	b14b      	cbz	r3, 80262ca <__ascii_mbtowc+0x1e>
 80262b6:	7813      	ldrb	r3, [r2, #0]
 80262b8:	600b      	str	r3, [r1, #0]
 80262ba:	7812      	ldrb	r2, [r2, #0]
 80262bc:	1e10      	subs	r0, r2, #0
 80262be:	bf18      	it	ne
 80262c0:	2001      	movne	r0, #1
 80262c2:	b002      	add	sp, #8
 80262c4:	4770      	bx	lr
 80262c6:	4610      	mov	r0, r2
 80262c8:	e7fb      	b.n	80262c2 <__ascii_mbtowc+0x16>
 80262ca:	f06f 0001 	mvn.w	r0, #1
 80262ce:	e7f8      	b.n	80262c2 <__ascii_mbtowc+0x16>

080262d0 <_realloc_r>:
 80262d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80262d4:	4680      	mov	r8, r0
 80262d6:	4614      	mov	r4, r2
 80262d8:	460e      	mov	r6, r1
 80262da:	b921      	cbnz	r1, 80262e6 <_realloc_r+0x16>
 80262dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80262e0:	4611      	mov	r1, r2
 80262e2:	f7fd b875 	b.w	80233d0 <_malloc_r>
 80262e6:	b92a      	cbnz	r2, 80262f4 <_realloc_r+0x24>
 80262e8:	f7fe fff0 	bl	80252cc <_free_r>
 80262ec:	4625      	mov	r5, r4
 80262ee:	4628      	mov	r0, r5
 80262f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80262f4:	f000 f828 	bl	8026348 <_malloc_usable_size_r>
 80262f8:	4284      	cmp	r4, r0
 80262fa:	4607      	mov	r7, r0
 80262fc:	d802      	bhi.n	8026304 <_realloc_r+0x34>
 80262fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8026302:	d812      	bhi.n	802632a <_realloc_r+0x5a>
 8026304:	4621      	mov	r1, r4
 8026306:	4640      	mov	r0, r8
 8026308:	f7fd f862 	bl	80233d0 <_malloc_r>
 802630c:	4605      	mov	r5, r0
 802630e:	2800      	cmp	r0, #0
 8026310:	d0ed      	beq.n	80262ee <_realloc_r+0x1e>
 8026312:	42bc      	cmp	r4, r7
 8026314:	4622      	mov	r2, r4
 8026316:	4631      	mov	r1, r6
 8026318:	bf28      	it	cs
 802631a:	463a      	movcs	r2, r7
 802631c:	f7fe f945 	bl	80245aa <memcpy>
 8026320:	4631      	mov	r1, r6
 8026322:	4640      	mov	r0, r8
 8026324:	f7fe ffd2 	bl	80252cc <_free_r>
 8026328:	e7e1      	b.n	80262ee <_realloc_r+0x1e>
 802632a:	4635      	mov	r5, r6
 802632c:	e7df      	b.n	80262ee <_realloc_r+0x1e>

0802632e <__ascii_wctomb>:
 802632e:	b149      	cbz	r1, 8026344 <__ascii_wctomb+0x16>
 8026330:	2aff      	cmp	r2, #255	; 0xff
 8026332:	bf85      	ittet	hi
 8026334:	238a      	movhi	r3, #138	; 0x8a
 8026336:	6003      	strhi	r3, [r0, #0]
 8026338:	700a      	strbls	r2, [r1, #0]
 802633a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 802633e:	bf98      	it	ls
 8026340:	2001      	movls	r0, #1
 8026342:	4770      	bx	lr
 8026344:	4608      	mov	r0, r1
 8026346:	4770      	bx	lr

08026348 <_malloc_usable_size_r>:
 8026348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802634c:	1f18      	subs	r0, r3, #4
 802634e:	2b00      	cmp	r3, #0
 8026350:	bfbc      	itt	lt
 8026352:	580b      	ldrlt	r3, [r1, r0]
 8026354:	18c0      	addlt	r0, r0, r3
 8026356:	4770      	bx	lr

08026358 <_init>:
 8026358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802635a:	bf00      	nop
 802635c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802635e:	bc08      	pop	{r3}
 8026360:	469e      	mov	lr, r3
 8026362:	4770      	bx	lr

08026364 <_fini>:
 8026364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026366:	bf00      	nop
 8026368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802636a:	bc08      	pop	{r3}
 802636c:	469e      	mov	lr, r3
 802636e:	4770      	bx	lr
