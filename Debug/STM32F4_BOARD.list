
STM32F4_BOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022864  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000050fc  080229f4  080229f4  000329f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027af0  08027af0  00040098  2**0
                  CONTENTS
  4 .ARM          00000008  08027af0  08027af0  00037af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027af8  08027af8  00040098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027af8  08027af8  00037af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08027afc  08027afc  00037afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08027b00  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040098  2**0
                  CONTENTS
 10 .bss          00012c54  20000098  20000098  00040098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012cec  20012cec  00040098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040098  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000400c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004690e  00000000  00000000  0004010b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a7e9  00000000  00000000  00086a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000033b0  00000000  00000000  00091208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002a1e  00000000  00000000  000945b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00038bc8  00000000  00000000  00096fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004c80c  00000000  00000000  000cfb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fce20  00000000  00000000  0011c3aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000e350  00000000  00000000  002191cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0022751c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080229dc 	.word	0x080229dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	080229dc 	.word	0x080229dc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b984 	b.w	80005c0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f81a 	bl	80002f8 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__popcountsi2>:
 80002d0:	0843      	lsrs	r3, r0, #1
 80002d2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	0883      	lsrs	r3, r0, #2
 80002da:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002de:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80002e2:	4418      	add	r0, r3
 80002e4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002e8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80002ec:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002f0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002f4:	0e00      	lsrs	r0, r0, #24
 80002f6:	4770      	bx	lr

080002f8 <__udivmoddi4>:
 80002f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002fc:	9e08      	ldr	r6, [sp, #32]
 80002fe:	460d      	mov	r5, r1
 8000300:	4604      	mov	r4, r0
 8000302:	460f      	mov	r7, r1
 8000304:	2b00      	cmp	r3, #0
 8000306:	d14a      	bne.n	800039e <__udivmoddi4+0xa6>
 8000308:	428a      	cmp	r2, r1
 800030a:	4694      	mov	ip, r2
 800030c:	d965      	bls.n	80003da <__udivmoddi4+0xe2>
 800030e:	fab2 f382 	clz	r3, r2
 8000312:	b143      	cbz	r3, 8000326 <__udivmoddi4+0x2e>
 8000314:	fa02 fc03 	lsl.w	ip, r2, r3
 8000318:	f1c3 0220 	rsb	r2, r3, #32
 800031c:	409f      	lsls	r7, r3
 800031e:	fa20 f202 	lsr.w	r2, r0, r2
 8000322:	4317      	orrs	r7, r2
 8000324:	409c      	lsls	r4, r3
 8000326:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800032a:	fa1f f58c 	uxth.w	r5, ip
 800032e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000332:	0c22      	lsrs	r2, r4, #16
 8000334:	fb0e 7711 	mls	r7, lr, r1, r7
 8000338:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800033c:	fb01 f005 	mul.w	r0, r1, r5
 8000340:	4290      	cmp	r0, r2
 8000342:	d90a      	bls.n	800035a <__udivmoddi4+0x62>
 8000344:	eb1c 0202 	adds.w	r2, ip, r2
 8000348:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800034c:	f080 811c 	bcs.w	8000588 <__udivmoddi4+0x290>
 8000350:	4290      	cmp	r0, r2
 8000352:	f240 8119 	bls.w	8000588 <__udivmoddi4+0x290>
 8000356:	3902      	subs	r1, #2
 8000358:	4462      	add	r2, ip
 800035a:	1a12      	subs	r2, r2, r0
 800035c:	b2a4      	uxth	r4, r4
 800035e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000362:	fb0e 2210 	mls	r2, lr, r0, r2
 8000366:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036a:	fb00 f505 	mul.w	r5, r0, r5
 800036e:	42a5      	cmp	r5, r4
 8000370:	d90a      	bls.n	8000388 <__udivmoddi4+0x90>
 8000372:	eb1c 0404 	adds.w	r4, ip, r4
 8000376:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800037a:	f080 8107 	bcs.w	800058c <__udivmoddi4+0x294>
 800037e:	42a5      	cmp	r5, r4
 8000380:	f240 8104 	bls.w	800058c <__udivmoddi4+0x294>
 8000384:	4464      	add	r4, ip
 8000386:	3802      	subs	r0, #2
 8000388:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800038c:	1b64      	subs	r4, r4, r5
 800038e:	2100      	movs	r1, #0
 8000390:	b11e      	cbz	r6, 800039a <__udivmoddi4+0xa2>
 8000392:	40dc      	lsrs	r4, r3
 8000394:	2300      	movs	r3, #0
 8000396:	e9c6 4300 	strd	r4, r3, [r6]
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	428b      	cmp	r3, r1
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0xbc>
 80003a2:	2e00      	cmp	r6, #0
 80003a4:	f000 80ed 	beq.w	8000582 <__udivmoddi4+0x28a>
 80003a8:	2100      	movs	r1, #0
 80003aa:	e9c6 0500 	strd	r0, r5, [r6]
 80003ae:	4608      	mov	r0, r1
 80003b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b4:	fab3 f183 	clz	r1, r3
 80003b8:	2900      	cmp	r1, #0
 80003ba:	d149      	bne.n	8000450 <__udivmoddi4+0x158>
 80003bc:	42ab      	cmp	r3, r5
 80003be:	d302      	bcc.n	80003c6 <__udivmoddi4+0xce>
 80003c0:	4282      	cmp	r2, r0
 80003c2:	f200 80f8 	bhi.w	80005b6 <__udivmoddi4+0x2be>
 80003c6:	1a84      	subs	r4, r0, r2
 80003c8:	eb65 0203 	sbc.w	r2, r5, r3
 80003cc:	2001      	movs	r0, #1
 80003ce:	4617      	mov	r7, r2
 80003d0:	2e00      	cmp	r6, #0
 80003d2:	d0e2      	beq.n	800039a <__udivmoddi4+0xa2>
 80003d4:	e9c6 4700 	strd	r4, r7, [r6]
 80003d8:	e7df      	b.n	800039a <__udivmoddi4+0xa2>
 80003da:	b902      	cbnz	r2, 80003de <__udivmoddi4+0xe6>
 80003dc:	deff      	udf	#255	; 0xff
 80003de:	fab2 f382 	clz	r3, r2
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	f040 8090 	bne.w	8000508 <__udivmoddi4+0x210>
 80003e8:	1a8a      	subs	r2, r1, r2
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2101      	movs	r1, #1
 80003f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f8:	fb07 2015 	mls	r0, r7, r5, r2
 80003fc:	0c22      	lsrs	r2, r4, #16
 80003fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000402:	fb0e f005 	mul.w	r0, lr, r5
 8000406:	4290      	cmp	r0, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x124>
 800040a:	eb1c 0202 	adds.w	r2, ip, r2
 800040e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x122>
 8000414:	4290      	cmp	r0, r2
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2b8>
 800041a:	4645      	mov	r5, r8
 800041c:	1a12      	subs	r2, r2, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb2 f0f7 	udiv	r0, r2, r7
 8000424:	fb07 2210 	mls	r2, r7, r0, r2
 8000428:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x14e>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x14c>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2c2>
 8000444:	4610      	mov	r0, r2
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800044e:	e79f      	b.n	8000390 <__udivmoddi4+0x98>
 8000450:	f1c1 0720 	rsb	r7, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa05 f401 	lsl.w	r4, r5, r1
 8000462:	fa20 f307 	lsr.w	r3, r0, r7
 8000466:	40fd      	lsrs	r5, r7
 8000468:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046c:	4323      	orrs	r3, r4
 800046e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000472:	fa1f fe8c 	uxth.w	lr, ip
 8000476:	fb09 5518 	mls	r5, r9, r8, r5
 800047a:	0c1c      	lsrs	r4, r3, #16
 800047c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000480:	fb08 f50e 	mul.w	r5, r8, lr
 8000484:	42a5      	cmp	r5, r4
 8000486:	fa02 f201 	lsl.w	r2, r2, r1
 800048a:	fa00 f001 	lsl.w	r0, r0, r1
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b0>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2b4>
 800049c:	42a5      	cmp	r5, r4
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2b4>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4464      	add	r4, ip
 80004a8:	1b64      	subs	r4, r4, r5
 80004aa:	b29d      	uxth	r5, r3
 80004ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b0:	fb09 4413 	mls	r4, r9, r3, r4
 80004b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004bc:	45a6      	cmp	lr, r4
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1da>
 80004c0:	eb1c 0404 	adds.w	r4, ip, r4
 80004c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2ac>
 80004ca:	45a6      	cmp	lr, r4
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2ac>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	4464      	add	r4, ip
 80004d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004d6:	fba3 9502 	umull	r9, r5, r3, r2
 80004da:	eba4 040e 	sub.w	r4, r4, lr
 80004de:	42ac      	cmp	r4, r5
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46ae      	mov	lr, r5
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x29c>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x298>
 80004e8:	b156      	cbz	r6, 8000500 <__udivmoddi4+0x208>
 80004ea:	ebb0 0208 	subs.w	r2, r0, r8
 80004ee:	eb64 040e 	sbc.w	r4, r4, lr
 80004f2:	fa04 f707 	lsl.w	r7, r4, r7
 80004f6:	40ca      	lsrs	r2, r1
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	4317      	orrs	r7, r2
 80004fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000500:	4618      	mov	r0, r3
 8000502:	2100      	movs	r1, #0
 8000504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000508:	f1c3 0120 	rsb	r1, r3, #32
 800050c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000510:	fa20 f201 	lsr.w	r2, r0, r1
 8000514:	fa25 f101 	lsr.w	r1, r5, r1
 8000518:	409d      	lsls	r5, r3
 800051a:	432a      	orrs	r2, r5
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb1 f0f7 	udiv	r0, r1, r7
 8000528:	fb07 1510 	mls	r5, r7, r0, r1
 800052c:	0c11      	lsrs	r1, r2, #16
 800052e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000532:	fb00 f50e 	mul.w	r5, r0, lr
 8000536:	428d      	cmp	r5, r1
 8000538:	fa04 f403 	lsl.w	r4, r4, r3
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x258>
 800053e:	eb1c 0101 	adds.w	r1, ip, r1
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b0>
 8000548:	428d      	cmp	r5, r1
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b0>
 800054c:	3802      	subs	r0, #2
 800054e:	4461      	add	r1, ip
 8000550:	1b49      	subs	r1, r1, r5
 8000552:	b292      	uxth	r2, r2
 8000554:	fbb1 f5f7 	udiv	r5, r1, r7
 8000558:	fb07 1115 	mls	r1, r7, r5, r1
 800055c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000560:	fb05 f10e 	mul.w	r1, r5, lr
 8000564:	4291      	cmp	r1, r2
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x282>
 8000568:	eb1c 0202 	adds.w	r2, ip, r2
 800056c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2a8>
 8000572:	4291      	cmp	r1, r2
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2a8>
 8000576:	3d02      	subs	r5, #2
 8000578:	4462      	add	r2, ip
 800057a:	1a52      	subs	r2, r2, r1
 800057c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0xfc>
 8000582:	4631      	mov	r1, r6
 8000584:	4630      	mov	r0, r6
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xa2>
 8000588:	4639      	mov	r1, r7
 800058a:	e6e6      	b.n	800035a <__udivmoddi4+0x62>
 800058c:	4610      	mov	r0, r2
 800058e:	e6fb      	b.n	8000388 <__udivmoddi4+0x90>
 8000590:	4548      	cmp	r0, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f0>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb65 0e0c 	sbc.w	lr, r5, ip
 800059c:	3b01      	subs	r3, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f0>
 80005a0:	4645      	mov	r5, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x282>
 80005a4:	462b      	mov	r3, r5
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1da>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x258>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b0>
 80005b0:	3d02      	subs	r5, #2
 80005b2:	4462      	add	r2, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x124>
 80005b6:	4608      	mov	r0, r1
 80005b8:	e70a      	b.n	80003d0 <__udivmoddi4+0xd8>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x14e>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <AdapterDisplaySSD1306Init>:

void WriteMenuToSSD1306(const MenuData_t *menu_data);
void WriteLinetoSSD1306(const char *text, int line_number);

void AdapterDisplaySSD1306Init()
{
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	ssd1306_Init();
 80005c8:	f020 f848 	bl	802065c <ssd1306_Init>
	ssd1306_Fill(Black);
 80005cc:	2000      	movs	r0, #0
 80005ce:	f020 f8ad 	bl	802072c <ssd1306_Fill>

	// Inicializa as informações do menu
	// Menu 1: IP, MASK, GATEWAY
	strcpy(menuDisplay.items[PAGE_0][LINE_0],"IPAD:0.0.0.0");
 80005d2:	4a1b      	ldr	r2, [pc, #108]	; (8000640 <AdapterDisplaySSD1306Init+0x7c>)
 80005d4:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <AdapterDisplaySSD1306Init+0x80>)
 80005d6:	4614      	mov	r4, r2
 80005d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80005da:	6020      	str	r0, [r4, #0]
 80005dc:	6061      	str	r1, [r4, #4]
 80005de:	60a2      	str	r2, [r4, #8]
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	7323      	strb	r3, [r4, #12]
	strcpy(menuDisplay.items[PAGE_0][LINE_1],"MASK:0.0.0.0");
 80005e4:	4a18      	ldr	r2, [pc, #96]	; (8000648 <AdapterDisplaySSD1306Init+0x84>)
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <AdapterDisplaySSD1306Init+0x88>)
 80005e8:	4614      	mov	r4, r2
 80005ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80005ec:	6020      	str	r0, [r4, #0]
 80005ee:	6061      	str	r1, [r4, #4]
 80005f0:	60a2      	str	r2, [r4, #8]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	7323      	strb	r3, [r4, #12]
	strcpy(menuDisplay.items[PAGE_0][LINE_2],"GWAY:0.0.0.0");
 80005f6:	4a16      	ldr	r2, [pc, #88]	; (8000650 <AdapterDisplaySSD1306Init+0x8c>)
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <AdapterDisplaySSD1306Init+0x90>)
 80005fa:	4614      	mov	r4, r2
 80005fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80005fe:	6020      	str	r0, [r4, #0]
 8000600:	6061      	str	r1, [r4, #4]
 8000602:	60a2      	str	r2, [r4, #8]
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	7323      	strb	r3, [r4, #12]


	// Menu 2: CFG, ROT
	strcpy(menuDisplay.items[PAGE_1][LINE_0], "CFG:DC Port:0");
 8000608:	4a13      	ldr	r2, [pc, #76]	; (8000658 <AdapterDisplaySSD1306Init+0x94>)
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <AdapterDisplaySSD1306Init+0x98>)
 800060c:	4614      	mov	r4, r2
 800060e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000610:	c407      	stmia	r4!, {r0, r1, r2}
 8000612:	8023      	strh	r3, [r4, #0]
    strcpy(menuDisplay.items[PAGE_1][LINE_1], "ROT:DC SUP:DC FAB:DC");
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <AdapterDisplaySSD1306Init+0x9c>)
 8000616:	4a13      	ldr	r2, [pc, #76]	; (8000664 <AdapterDisplaySSD1306Init+0xa0>)
 8000618:	f103 0555 	add.w	r5, r3, #85	; 0x55
 800061c:	4614      	mov	r4, r2
 800061e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000620:	6028      	str	r0, [r5, #0]
 8000622:	6069      	str	r1, [r5, #4]
 8000624:	60aa      	str	r2, [r5, #8]
 8000626:	60eb      	str	r3, [r5, #12]
 8000628:	6820      	ldr	r0, [r4, #0]
 800062a:	6128      	str	r0, [r5, #16]
 800062c:	7923      	ldrb	r3, [r4, #4]
 800062e:	752b      	strb	r3, [r5, #20]

	// Escreve as informações do menu no display
	WriteMenuToSSD1306(&menuDisplay);
 8000630:	480b      	ldr	r0, [pc, #44]	; (8000660 <AdapterDisplaySSD1306Init+0x9c>)
 8000632:	f000 f819 	bl	8000668 <WriteMenuToSSD1306>

	// Inicializa a tarefa de atualização do display
	AdapterDisplayInitUpdateTask();
 8000636:	f000 f967 	bl	8000908 <AdapterDisplayInitUpdateTask>
}
 800063a:	bf00      	nop
 800063c:	bdb0      	pop	{r4, r5, r7, pc}
 800063e:	bf00      	nop
 8000640:	200000bd 	.word	0x200000bd
 8000644:	080229f4 	.word	0x080229f4
 8000648:	200000d2 	.word	0x200000d2
 800064c:	08022a04 	.word	0x08022a04
 8000650:	200000e7 	.word	0x200000e7
 8000654:	08022a14 	.word	0x08022a14
 8000658:	200000fc 	.word	0x200000fc
 800065c:	08022a24 	.word	0x08022a24
 8000660:	200000bc 	.word	0x200000bc
 8000664:	08022a34 	.word	0x08022a34

08000668 <WriteMenuToSSD1306>:

void WriteMenuToSSD1306(const MenuData_t *menu_data)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	// Limpa o display antes de escrever as novas informações
	// clear_display();

	// Escreve cada linha do menu no display
	int start_index = current_page * MENU_ITEMS_PER_PAGE;
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <WriteMenuToSSD1306+0x68>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	4613      	mov	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	4413      	add	r3, r2
 800067a:	613b      	str	r3, [r7, #16]
	int end_index = start_index + MENU_ITEMS_PER_PAGE;
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	3303      	adds	r3, #3
 8000680:	60fb      	str	r3, [r7, #12]

	for (int i = start_index; i < end_index; i++)
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	617b      	str	r3, [r7, #20]
 8000686:	e019      	b.n	80006bc <WriteMenuToSSD1306+0x54>
	{
		WriteLinetoSSD1306(menu_data->items[current_page][i - start_index], i - start_index);
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <WriteMenuToSSD1306+0x68>)
 800068a:	6819      	ldr	r1, [r3, #0]
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	1ad2      	subs	r2, r2, r3
 8000692:	4613      	mov	r3, r2
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	4413      	add	r3, r2
 8000698:	00da      	lsls	r2, r3, #3
 800069a:	1ad2      	subs	r2, r2, r3
 800069c:	460b      	mov	r3, r1
 800069e:	019b      	lsls	r3, r3, #6
 80006a0:	1a5b      	subs	r3, r3, r1
 80006a2:	4413      	add	r3, r2
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	4413      	add	r3, r2
 80006a8:	1c58      	adds	r0, r3, #1
 80006aa:	697a      	ldr	r2, [r7, #20]
 80006ac:	693b      	ldr	r3, [r7, #16]
 80006ae:	1ad3      	subs	r3, r2, r3
 80006b0:	4619      	mov	r1, r3
 80006b2:	f000 f847 	bl	8000744 <WriteLinetoSSD1306>
	for (int i = start_index; i < end_index; i++)
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	3301      	adds	r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	697a      	ldr	r2, [r7, #20]
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbe1      	blt.n	8000688 <WriteMenuToSSD1306+0x20>
	}
	// Atualiza o display
	//update_display();
}
 80006c4:	bf00      	nop
 80006c6:	bf00      	nop
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200000b4 	.word	0x200000b4

080006d4 <NextPage>:


void NextPage() {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
    current_page = (current_page + 1) % NUM_MENU_PAGES;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <NextPage+0x30>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	3301      	adds	r3, #1
 80006de:	2b00      	cmp	r3, #0
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	bfb8      	it	lt
 80006e6:	425b      	neglt	r3, r3
 80006e8:	4a06      	ldr	r2, [pc, #24]	; (8000704 <NextPage+0x30>)
 80006ea:	6013      	str	r3, [r2, #0]
    ssd1306_Fill(Black);
 80006ec:	2000      	movs	r0, #0
 80006ee:	f020 f81d 	bl	802072c <ssd1306_Fill>
    osDelay(50);
 80006f2:	2032      	movs	r0, #50	; 0x32
 80006f4:	f006 fd34 	bl	8007160 <osDelay>
	WriteMenuToSSD1306(&menuDisplay);
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <NextPage+0x34>)
 80006fa:	f7ff ffb5 	bl	8000668 <WriteMenuToSSD1306>
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200000b4 	.word	0x200000b4
 8000708:	200000bc 	.word	0x200000bc

0800070c <PreviousPage>:

void PreviousPage() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
    current_page = (current_page - 1 + NUM_MENU_PAGES) % NUM_MENU_PAGES;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <PreviousPage+0x30>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	3301      	adds	r3, #1
 8000716:	2b00      	cmp	r3, #0
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	bfb8      	it	lt
 800071e:	425b      	neglt	r3, r3
 8000720:	4a06      	ldr	r2, [pc, #24]	; (800073c <PreviousPage+0x30>)
 8000722:	6013      	str	r3, [r2, #0]
    ssd1306_Fill(Black);
 8000724:	2000      	movs	r0, #0
 8000726:	f020 f801 	bl	802072c <ssd1306_Fill>
    osDelay(50);
 800072a:	2032      	movs	r0, #50	; 0x32
 800072c:	f006 fd18 	bl	8007160 <osDelay>
	WriteMenuToSSD1306(&menuDisplay);
 8000730:	4803      	ldr	r0, [pc, #12]	; (8000740 <PreviousPage+0x34>)
 8000732:	f7ff ff99 	bl	8000668 <WriteMenuToSSD1306>
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200000b4 	.word	0x200000b4
 8000740:	200000bc 	.word	0x200000bc

08000744 <WriteLinetoSSD1306>:


// Função para escrever uma linha do menu no display
void WriteLinetoSSD1306(const char *text, int line_number)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
	// Define a posição vertical da linha baseada no número da linha
	int vertical_position = 2 + line_number * 10; // Ajuste conforme necessário
 800074e:	683a      	ldr	r2, [r7, #0]
 8000750:	4613      	mov	r3, r2
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	4413      	add	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	3302      	adds	r3, #2
 800075a:	60fb      	str	r3, [r7, #12]
	// Define as coordenadas para escrever a linha no display
	ssd1306_SetCursor(1, vertical_position);
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	4619      	mov	r1, r3
 8000762:	2001      	movs	r0, #1
 8000764:	f020 f924 	bl	80209b0 <ssd1306_SetCursor>
	ssd1306_WriteString(text, Font_6x8, White);
 8000768:	4a05      	ldr	r2, [pc, #20]	; (8000780 <WriteLinetoSSD1306+0x3c>)
 800076a:	2301      	movs	r3, #1
 800076c:	ca06      	ldmia	r2, {r1, r2}
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f020 f8f8 	bl	8020964 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000774:	f01f fff2 	bl	802075c <ssd1306_UpdateScreen>
}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000034 	.word	0x20000034

08000784 <UpdateSSD1306Task>:

void UpdateSSD1306Task(void const *argument)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b0a2      	sub	sp, #136	; 0x88
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

	MenuData_t receivedMenu = {0};
 800078c:	f107 0308 	add.w	r3, r7, #8
 8000790:	227f      	movs	r2, #127	; 0x7f
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f021 f9d5 	bl	8021b44 <memset>

	while (1)
	{
		if (xQueueReceive(menuQueueHandle, &receivedMenu, portMAX_DELAY) == pdPASS)
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <UpdateSSD1306Task+0x58>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f107 0108 	add.w	r1, r7, #8
 80007a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007a6:	4618      	mov	r0, r3
 80007a8:	f007 fbba 	bl	8007f20 <xQueueReceive>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d10f      	bne.n	80007d2 <UpdateSSD1306Task+0x4e>
		{
			RefreshDisplay(&receivedMenu, &menuDisplay);
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	490a      	ldr	r1, [pc, #40]	; (80007e0 <UpdateSSD1306Task+0x5c>)
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 f813 	bl	80007e4 <RefreshDisplay>

			WriteMenuToSSD1306(&menuDisplay);
 80007be:	4808      	ldr	r0, [pc, #32]	; (80007e0 <UpdateSSD1306Task+0x5c>)
 80007c0:	f7ff ff52 	bl	8000668 <WriteMenuToSSD1306>

			 memset(&receivedMenu, 0, sizeof(MenuData_t));
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	227f      	movs	r2, #127	; 0x7f
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f021 f9b9 	bl	8021b44 <memset>
		}
		osDelay(10);
 80007d2:	200a      	movs	r0, #10
 80007d4:	f006 fcc4 	bl	8007160 <osDelay>
		if (xQueueReceive(menuQueueHandle, &receivedMenu, portMAX_DELAY) == pdPASS)
 80007d8:	e7df      	b.n	800079a <UpdateSSD1306Task+0x16>
 80007da:	bf00      	nop
 80007dc:	200002a8 	.word	0x200002a8
 80007e0:	200000bc 	.word	0x200000bc

080007e4 <RefreshDisplay>:
}




void RefreshDisplay(MenuData_t *receivedMenu, MenuData_t *menuDisplay) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
    // Verificar se receivedMenu e menuDisplay são válidos
    if (receivedMenu == NULL || menuDisplay == NULL) {
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d06d      	beq.n	80008d0 <RefreshDisplay+0xec>
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d06a      	beq.n	80008d0 <RefreshDisplay+0xec>
        return; // Retorna sem fazer nada se algum deles for nulo
    }

    // Iterar sobre todas as páginas e itens do menu
    for (int i = 0; i < NUM_MENU_PAGES; ++i) {
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	e063      	b.n	80008c8 <RefreshDisplay+0xe4>

    	for (int j = 0; j < MENU_ITEMS_PER_PAGE; ++j) {
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	e05a      	b.n	80008bc <RefreshDisplay+0xd8>
            // Verificar se o índice está dentro dos limites do array
            if (i < NUM_MENU_PAGES && j < MENU_ITEMS_PER_PAGE) {
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	2b01      	cmp	r3, #1
 800080a:	dc54      	bgt.n	80008b6 <RefreshDisplay+0xd2>
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	2b02      	cmp	r3, #2
 8000810:	dc51      	bgt.n	80008b6 <RefreshDisplay+0xd2>
                // Verificar se o item atual difere do item recebido
                if (strcmp(menuDisplay->items[i][j], receivedMenu->items[i][j]) != 0) {
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	4613      	mov	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	00da      	lsls	r2, r3, #3
 800081c:	1ad2      	subs	r2, r2, r3
 800081e:	68f9      	ldr	r1, [r7, #12]
 8000820:	460b      	mov	r3, r1
 8000822:	019b      	lsls	r3, r3, #6
 8000824:	1a5b      	subs	r3, r3, r1
 8000826:	4413      	add	r3, r2
 8000828:	683a      	ldr	r2, [r7, #0]
 800082a:	4413      	add	r3, r2
 800082c:	1c58      	adds	r0, r3, #1
 800082e:	68ba      	ldr	r2, [r7, #8]
 8000830:	4613      	mov	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	4413      	add	r3, r2
 8000836:	00da      	lsls	r2, r3, #3
 8000838:	1ad2      	subs	r2, r2, r3
 800083a:	68f9      	ldr	r1, [r7, #12]
 800083c:	460b      	mov	r3, r1
 800083e:	019b      	lsls	r3, r3, #6
 8000840:	1a5b      	subs	r3, r3, r1
 8000842:	4413      	add	r3, r2
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	4413      	add	r3, r2
 8000848:	3301      	adds	r3, #1
 800084a:	4619      	mov	r1, r3
 800084c:	f7ff fcc0 	bl	80001d0 <strcmp>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d02f      	beq.n	80008b6 <RefreshDisplay+0xd2>
                    // Se houver diferença, copiar o novo item para o menuDisplay
                	if(strcmp(receivedMenu->items[i][j], "") != 0)
 8000856:	68ba      	ldr	r2, [r7, #8]
 8000858:	4613      	mov	r3, r2
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	4413      	add	r3, r2
 800085e:	00da      	lsls	r2, r3, #3
 8000860:	1ad2      	subs	r2, r2, r3
 8000862:	68f9      	ldr	r1, [r7, #12]
 8000864:	460b      	mov	r3, r1
 8000866:	019b      	lsls	r3, r3, #6
 8000868:	1a5b      	subs	r3, r3, r1
 800086a:	4413      	add	r3, r2
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	4413      	add	r3, r2
 8000870:	3301      	adds	r3, #1
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d01e      	beq.n	80008b6 <RefreshDisplay+0xd2>
                	{
                		strcpy(menuDisplay->items[i][j], receivedMenu->items[i][j]);
 8000878:	68ba      	ldr	r2, [r7, #8]
 800087a:	4613      	mov	r3, r2
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	4413      	add	r3, r2
 8000880:	00da      	lsls	r2, r3, #3
 8000882:	1ad2      	subs	r2, r2, r3
 8000884:	68f9      	ldr	r1, [r7, #12]
 8000886:	460b      	mov	r3, r1
 8000888:	019b      	lsls	r3, r3, #6
 800088a:	1a5b      	subs	r3, r3, r1
 800088c:	4413      	add	r3, r2
 800088e:	683a      	ldr	r2, [r7, #0]
 8000890:	4413      	add	r3, r2
 8000892:	1c58      	adds	r0, r3, #1
 8000894:	68ba      	ldr	r2, [r7, #8]
 8000896:	4613      	mov	r3, r2
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	4413      	add	r3, r2
 800089c:	00da      	lsls	r2, r3, #3
 800089e:	1ad2      	subs	r2, r2, r3
 80008a0:	68f9      	ldr	r1, [r7, #12]
 80008a2:	460b      	mov	r3, r1
 80008a4:	019b      	lsls	r3, r3, #6
 80008a6:	1a5b      	subs	r3, r3, r1
 80008a8:	4413      	add	r3, r2
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	3301      	adds	r3, #1
 80008b0:	4619      	mov	r1, r3
 80008b2:	f021 fa50 	bl	8021d56 <strcpy>
    	for (int j = 0; j < MENU_ITEMS_PER_PAGE; ++j) {
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	3301      	adds	r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	2b02      	cmp	r3, #2
 80008c0:	dda1      	ble.n	8000806 <RefreshDisplay+0x22>
    for (int i = 0; i < NUM_MENU_PAGES; ++i) {
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	3301      	adds	r3, #1
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	dd98      	ble.n	8000800 <RefreshDisplay+0x1c>
 80008ce:	e000      	b.n	80008d2 <RefreshDisplay+0xee>
        return; // Retorna sem fazer nada se algum deles for nulo
 80008d0:	bf00      	nop

                }
            }
        }
    }
}
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <SendDataToMenuQueueUpdate>:

void SendDataToMenuQueueUpdate(const MenuData_t *menu_data)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	// Tenta enviar os dados para a fila, aguardando até que haja espaço na fila
	if (xQueueSend(menuQueueHandle, menu_data, portMAX_DELAY) != pdPASS)
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <SendDataToMenuQueueUpdate+0x2c>)
 80008e2:	6818      	ldr	r0, [r3, #0]
 80008e4:	2300      	movs	r3, #0
 80008e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	f007 f8f2 	bl	8007ad4 <xQueueGenericSend>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d002      	beq.n	80008fc <SendDataToMenuQueueUpdate+0x24>
	{
		vTaskDelay(pdMS_TO_TICKS(50));
 80008f6:	2032      	movs	r0, #50	; 0x32
 80008f8:	f008 f938 	bl	8008b6c <vTaskDelay>
	}
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200002a8 	.word	0x200002a8

08000908 <AdapterDisplayInitUpdateTask>:

void AdapterDisplayInitUpdateTask()
{
 8000908:	b5b0      	push	{r4, r5, r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
	/* definition and creation of tcpServerTask */
	osThreadDef(updateDisplayTask, UpdateSSD1306Task, osPriorityBelowNormal, 0, UPDATE_DISPLAY_TASK_STACK_SIZE);
 800090e:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <AdapterDisplayInitUpdateTask+0x30>)
 8000910:	1d3c      	adds	r4, r7, #4
 8000912:	461d      	mov	r5, r3
 8000914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000918:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800091c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	updateDisplayTaskHandle = osThreadCreate(osThread(updateDisplayTask), NULL);
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f006 fbcf 	bl	80070c8 <osThreadCreate>
 800092a:	4603      	mov	r3, r0
 800092c:	4a03      	ldr	r2, [pc, #12]	; (800093c <AdapterDisplayInitUpdateTask+0x34>)
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	3720      	adds	r7, #32
 8000934:	46bd      	mov	sp, r7
 8000936:	bdb0      	pop	{r4, r5, r7, pc}
 8000938:	08022a60 	.word	0x08022a60
 800093c:	200000b8 	.word	0x200000b8

08000940 <FileSystemInit>:
 *         - Criação de diretórios;
 *         - Leitura do arquivo de configurações;
 * @retval Nonecfg
 */
int FileSystemInit()
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

	  LOG2("Iniciando sistema de arquivos ... ");
 8000946:	4833      	ldr	r0, [pc, #204]	; (8000a14 <FileSystemInit+0xd4>)
 8000948:	f020 ff4c 	bl	80217e4 <puts>

	  int status = lfs_storage_init(&cfg);
 800094c:	4832      	ldr	r0, [pc, #200]	; (8000a18 <FileSystemInit+0xd8>)
 800094e:	f000 fcfd 	bl	800134c <lfs_storage_init>
 8000952:	6078      	str	r0, [r7, #4]

	  if (!status)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d105      	bne.n	8000966 <FileSystemInit+0x26>
	  {
		  LOG2( "erro: %i", status);
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	482f      	ldr	r0, [pc, #188]	; (8000a1c <FileSystemInit+0xdc>)
 800095e:	f020 fedb 	bl	8021718 <iprintf>
	    return status;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	e052      	b.n	8000a0c <FileSystemInit+0xcc>
	  }

	  LOG2("OK");
 8000966:	482e      	ldr	r0, [pc, #184]	; (8000a20 <FileSystemInit+0xe0>)
 8000968:	f020 ff3c 	bl	80217e4 <puts>

  lfs_get_default_config(&cfg);
 800096c:	482a      	ldr	r0, [pc, #168]	; (8000a18 <FileSystemInit+0xd8>)
 800096e:	f000 fcd7 	bl	8001320 <lfs_get_default_config>

  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	e016      	b.n	80009a6 <FileSystemInit+0x66>
  {
    openFile[i].number = 0;
 8000978:	4a2a      	ldr	r2, [pc, #168]	; (8000a24 <FileSystemInit+0xe4>)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	2158      	movs	r1, #88	; 0x58
 800097e:	fb01 f303 	mul.w	r3, r1, r3
 8000982:	4413      	add	r3, r2
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
    memset(&openFile[i].file, 0, sizeof(openFile[i].file));
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	2258      	movs	r2, #88	; 0x58
 800098c:	fb02 f303 	mul.w	r3, r2, r3
 8000990:	4a24      	ldr	r2, [pc, #144]	; (8000a24 <FileSystemInit+0xe4>)
 8000992:	4413      	add	r3, r2
 8000994:	3304      	adds	r3, #4
 8000996:	2254      	movs	r2, #84	; 0x54
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f021 f8d2 	bl	8021b44 <memset>
  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	3301      	adds	r3, #1
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	2b03      	cmp	r3, #3
 80009aa:	dde5      	ble.n	8000978 <FileSystemInit+0x38>
  }


  LOG2("Montando sistema de arquivos ... ");
 80009ac:	481e      	ldr	r0, [pc, #120]	; (8000a28 <FileSystemInit+0xe8>)
 80009ae:	f020 ff19 	bl	80217e4 <puts>

  status = lfs_mount(&lfs, &cfg);
 80009b2:	4919      	ldr	r1, [pc, #100]	; (8000a18 <FileSystemInit+0xd8>)
 80009b4:	481d      	ldr	r0, [pc, #116]	; (8000a2c <FileSystemInit+0xec>)
 80009b6:	f00f fdae 	bl	8010516 <lfs_mount>
 80009ba:	6078      	str	r0, [r7, #4]
  if (status)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d016      	beq.n	80009f0 <FileSystemInit+0xb0>
  {
	  LOG2("erro: %i", status);
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	4815      	ldr	r0, [pc, #84]	; (8000a1c <FileSystemInit+0xdc>)
 80009c6:	f020 fea7 	bl	8021718 <iprintf>
    // Se sistema de arquivos corrompido
    if (status == LFS_ERR_CORRUPT)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80009d0:	d10e      	bne.n	80009f0 <FileSystemInit+0xb0>
    {
      // Formata o sistema de arquivos
    	LOG2("Formatando sistema de arquivos ... ");
 80009d2:	4817      	ldr	r0, [pc, #92]	; (8000a30 <FileSystemInit+0xf0>)
 80009d4:	f020 ff06 	bl	80217e4 <puts>
      status = lfs_format(&lfs, &cfg);
 80009d8:	490f      	ldr	r1, [pc, #60]	; (8000a18 <FileSystemInit+0xd8>)
 80009da:	4814      	ldr	r0, [pc, #80]	; (8000a2c <FileSystemInit+0xec>)
 80009dc:	f00f fd7e 	bl	80104dc <lfs_format>
 80009e0:	6078      	str	r0, [r7, #4]
      if (status)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d003      	beq.n	80009f0 <FileSystemInit+0xb0>
      {
    	  LOG2("erro: %d", status);
 80009e8:	6879      	ldr	r1, [r7, #4]
 80009ea:	4812      	ldr	r0, [pc, #72]	; (8000a34 <FileSystemInit+0xf4>)
 80009ec:	f020 fe94 	bl	8021718 <iprintf>
      }
    }
  }

  if (status == LFS_ERR_OK)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d109      	bne.n	8000a0a <FileSystemInit+0xca>
  {
	  LOG2("OK");
 80009f6:	480a      	ldr	r0, [pc, #40]	; (8000a20 <FileSystemInit+0xe0>)
 80009f8:	f020 fef4 	bl	80217e4 <puts>
    lfs_mounted = 1;
 80009fc:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <FileSystemInit+0xf8>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	601a      	str	r2, [r3, #0]

    // Cria diretório de configurações
    lfs_mkdir(&lfs, FILESYSTEM_FOLDER_MAP);
 8000a02:	490e      	ldr	r1, [pc, #56]	; (8000a3c <FileSystemInit+0xfc>)
 8000a04:	4809      	ldr	r0, [pc, #36]	; (8000a2c <FileSystemInit+0xec>)
 8000a06:	f00f fe1d 	bl	8010644 <lfs_mkdir>

  }

  return status;
 8000a0a:	687b      	ldr	r3, [r7, #4]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	08022a7c 	.word	0x08022a7c
 8000a18:	2000eb40 	.word	0x2000eb40
 8000a1c:	08022aa0 	.word	0x08022aa0
 8000a20:	08022aac 	.word	0x08022aac
 8000a24:	2000013c 	.word	0x2000013c
 8000a28:	08022ab0 	.word	0x08022ab0
 8000a2c:	2000eac8 	.word	0x2000eac8
 8000a30:	08022ad4 	.word	0x08022ad4
 8000a34:	08022afc 	.word	0x08022afc
 8000a38:	2000eac4 	.word	0x2000eac4
 8000a3c:	08022b08 	.word	0x08022b08

08000a40 <__sflags>:
 * Return the (stdio) flags for a given mode.
 * Based on https://android.googlesource.com/platform/bionic/+/ics-mr0/libc/stdio/flags.c
 * Return 0 on error.
 */
static int __sflags(const char *mode)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b087      	sub	sp, #28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  int ret, m, o;
  switch (*mode++)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	1c5a      	adds	r2, r3, #1
 8000a4c:	607a      	str	r2, [r7, #4]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b77      	cmp	r3, #119	; 0x77
 8000a52:	d00a      	beq.n	8000a6a <__sflags+0x2a>
 8000a54:	2b77      	cmp	r3, #119	; 0x77
 8000a56:	dc14      	bgt.n	8000a82 <__sflags+0x42>
 8000a58:	2b61      	cmp	r3, #97	; 0x61
 8000a5a:	d00c      	beq.n	8000a76 <__sflags+0x36>
 8000a5c:	2b72      	cmp	r3, #114	; 0x72
 8000a5e:	d110      	bne.n	8000a82 <__sflags+0x42>
  {
    case 'r': /* open for reading */
      m = LFS_O_RDONLY;
 8000a60:	2301      	movs	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
      o = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	613b      	str	r3, [r7, #16]
      break;
 8000a68:	e010      	b.n	8000a8c <__sflags+0x4c>
    case 'w': /* open for writing */
      m = LFS_O_WRONLY;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	617b      	str	r3, [r7, #20]
      o = LFS_O_CREAT | LFS_O_TRUNC;
 8000a6e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000a72:	613b      	str	r3, [r7, #16]
      break;
 8000a74:	e00a      	b.n	8000a8c <__sflags+0x4c>
    case 'a': /* open for appending */
      m = LFS_O_WRONLY;
 8000a76:	2302      	movs	r3, #2
 8000a78:	617b      	str	r3, [r7, #20]
      o = LFS_O_CREAT | LFS_O_APPEND;
 8000a7a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000a7e:	613b      	str	r3, [r7, #16]
      break;
 8000a80:	e004      	b.n	8000a8c <__sflags+0x4c>
    default: /* illegal mode */
      errno = EINVAL;
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <__sflags+0x80>)
 8000a84:	2216      	movs	r2, #22
 8000a86:	601a      	str	r2, [r3, #0]
      return (0);
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e013      	b.n	8000ab4 <__sflags+0x74>
  }
  /* [rwa]\+ or [rwa]b\+ means read and write */
  if (*mode == '+' || (*mode == 'b' && mode[1] == '+'))
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b2b      	cmp	r3, #43	; 0x2b
 8000a92:	d008      	beq.n	8000aa6 <__sflags+0x66>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b62      	cmp	r3, #98	; 0x62
 8000a9a:	d106      	bne.n	8000aaa <__sflags+0x6a>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b2b      	cmp	r3, #43	; 0x2b
 8000aa4:	d101      	bne.n	8000aaa <__sflags+0x6a>
  {
    m = LFS_O_RDWR;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	617b      	str	r3, [r7, #20]
  }
  ret = m | o;
 8000aaa:	697a      	ldr	r2, [r7, #20]
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
  return (ret);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	371c      	adds	r7, #28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	20012ce4 	.word	0x20012ce4

08000ac4 <file_open>:
 * @param  path  Ponteiro para a string contendo o path do arquivo
 * @param  mode  C string contendo o modo de acesso do arquivo
 * @retval file  Ponteiro para o struct de controle do arquivo
 */
FILE_POINTER file_open(const char *path, const char *mode)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
  int flags;
  int count = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]

  if (openFilesCount >= MAX_OPEN_FILES)
 8000ad2:	4b3b      	ldr	r3, [pc, #236]	; (8000bc0 <file_open+0xfc>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	dd01      	ble.n	8000ade <file_open+0x1a>
    return NULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	e06c      	b.n	8000bb8 <file_open+0xf4>

  if ((flags = __sflags(mode)) == 0)
 8000ade:	6838      	ldr	r0, [r7, #0]
 8000ae0:	f7ff ffae 	bl	8000a40 <__sflags>
 8000ae4:	60f8      	str	r0, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d101      	bne.n	8000af0 <file_open+0x2c>
    return (NULL);
 8000aec:	2300      	movs	r3, #0
 8000aee:	e063      	b.n	8000bb8 <file_open+0xf4>

  // Remove line feed and carriage return from path
  char *pchar = (char*)path;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	613b      	str	r3, [r7, #16]
  while (*pchar != 0)
 8000af4:	e00d      	b.n	8000b12 <file_open+0x4e>
  {
    if ((*pchar == '\r') || (*pchar == '\n'))
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b0d      	cmp	r3, #13
 8000afc:	d003      	beq.n	8000b06 <file_open+0x42>
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b0a      	cmp	r3, #10
 8000b04:	d102      	bne.n	8000b0c <file_open+0x48>
      *pchar = 0;
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
    pchar++;
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	613b      	str	r3, [r7, #16]
  while (*pchar != 0)
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d1ed      	bne.n	8000af6 <file_open+0x32>
  }

  // Create a entry for the file in openFile structure
  for (count = 0; count < MAX_OPEN_FILES; ++count)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	e018      	b.n	8000b52 <file_open+0x8e>
  {
    if (openFile[count].number == 0)
 8000b20:	4a28      	ldr	r2, [pc, #160]	; (8000bc4 <file_open+0x100>)
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	2158      	movs	r1, #88	; 0x58
 8000b26:	fb01 f303 	mul.w	r3, r1, r3
 8000b2a:	4413      	add	r3, r2
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d10c      	bne.n	8000b4c <file_open+0x88>
    {
      openFile[count].number = openFilesCount++;
 8000b32:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <file_open+0xfc>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	1c5a      	adds	r2, r3, #1
 8000b38:	4921      	ldr	r1, [pc, #132]	; (8000bc0 <file_open+0xfc>)
 8000b3a:	600a      	str	r2, [r1, #0]
 8000b3c:	4921      	ldr	r1, [pc, #132]	; (8000bc4 <file_open+0x100>)
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	2058      	movs	r0, #88	; 0x58
 8000b42:	fb00 f202 	mul.w	r2, r0, r2
 8000b46:	440a      	add	r2, r1
 8000b48:	6013      	str	r3, [r2, #0]
      break;
 8000b4a:	e005      	b.n	8000b58 <file_open+0x94>
  for (count = 0; count < MAX_OPEN_FILES; ++count)
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	dde3      	ble.n	8000b20 <file_open+0x5c>
    }
  }

  int status = lfs_file_open(&lfs, &(openFile[count].file), path, flags);
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	2258      	movs	r2, #88	; 0x58
 8000b5c:	fb02 f303 	mul.w	r3, r2, r3
 8000b60:	4a18      	ldr	r2, [pc, #96]	; (8000bc4 <file_open+0x100>)
 8000b62:	4413      	add	r3, r2
 8000b64:	1d19      	adds	r1, r3, #4
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	4817      	ldr	r0, [pc, #92]	; (8000bc8 <file_open+0x104>)
 8000b6c:	f00f fcf0 	bl	8010550 <lfs_file_open>
 8000b70:	60b8      	str	r0, [r7, #8]

  if (status != LFS_ERR_OK)
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d013      	beq.n	8000ba0 <file_open+0xdc>
  {
    openFile[count].number = 0;
 8000b78:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <file_open+0x100>)
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	2158      	movs	r1, #88	; 0x58
 8000b7e:	fb01 f303 	mul.w	r3, r1, r3
 8000b82:	4413      	add	r3, r2
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
    openFilesCount--;
 8000b88:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <file_open+0xfc>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	4a0c      	ldr	r2, [pc, #48]	; (8000bc0 <file_open+0xfc>)
 8000b90:	6013      	str	r3, [r2, #0]
    LOG2("Error lfs_file_open - file %s - ret = %i", path, status);
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	6879      	ldr	r1, [r7, #4]
 8000b96:	480d      	ldr	r0, [pc, #52]	; (8000bcc <file_open+0x108>)
 8000b98:	f020 fdbe 	bl	8021718 <iprintf>
    return NULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	e00b      	b.n	8000bb8 <file_open+0xf4>
  }

  LOG2("lfs_file_open - file %s - ret = %i", path, status);
 8000ba0:	68ba      	ldr	r2, [r7, #8]
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	480a      	ldr	r0, [pc, #40]	; (8000bd0 <file_open+0x10c>)
 8000ba6:	f020 fdb7 	bl	8021718 <iprintf>
  return &openFile[count].file;
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	2258      	movs	r2, #88	; 0x58
 8000bae:	fb02 f303 	mul.w	r3, r2, r3
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <file_open+0x100>)
 8000bb4:	4413      	add	r3, r2
 8000bb6:	3304      	adds	r3, #4
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	2000029c 	.word	0x2000029c
 8000bc4:	2000013c 	.word	0x2000013c
 8000bc8:	2000eac8 	.word	0x2000eac8
 8000bcc:	08022c48 	.word	0x08022c48
 8000bd0:	08022c74 	.word	0x08022c74

08000bd4 <file_close>:
 * @brief  Função de fechamento do arquivo
 * @param  file Ponteiro para o struct de controle do arquivo
 * @retval int  Status da operação
 */
int file_close(FILE_POINTER file)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  //***FS_Flush(lfs, file);
  int status = lfs_file_close(&lfs, file);
 8000bdc:	6879      	ldr	r1, [r7, #4]
 8000bde:	4821      	ldr	r0, [pc, #132]	; (8000c64 <file_close+0x90>)
 8000be0:	f00f fcf6 	bl	80105d0 <lfs_file_close>
 8000be4:	60b8      	str	r0, [r7, #8]

  // Delete the entry assigned to file in openFile structure
  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	e021      	b.n	8000c30 <file_close+0x5c>
  {
    if (&(openFile[i].file) == file)
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2258      	movs	r2, #88	; 0x58
 8000bf0:	fb02 f303 	mul.w	r3, r2, r3
 8000bf4:	4a1c      	ldr	r2, [pc, #112]	; (8000c68 <file_close+0x94>)
 8000bf6:	4413      	add	r3, r2
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d114      	bne.n	8000c2a <file_close+0x56>
    {
      openFile[i].number = 0;
 8000c00:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <file_close+0x94>)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2158      	movs	r1, #88	; 0x58
 8000c06:	fb01 f303 	mul.w	r3, r1, r3
 8000c0a:	4413      	add	r3, r2
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
      memset(&openFile[i].file, 0, sizeof(openFile[i].file));
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2258      	movs	r2, #88	; 0x58
 8000c14:	fb02 f303 	mul.w	r3, r2, r3
 8000c18:	4a13      	ldr	r2, [pc, #76]	; (8000c68 <file_close+0x94>)
 8000c1a:	4413      	add	r3, r2
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	2254      	movs	r2, #84	; 0x54
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f020 ff8e 	bl	8021b44 <memset>
      break;
 8000c28:	e005      	b.n	8000c36 <file_close+0x62>
  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	ddda      	ble.n	8000bec <file_close+0x18>
    }
  }

  if (status != LFS_ERR_OK)
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d005      	beq.n	8000c48 <file_close+0x74>
  {
	  LOG2("Erro lfs_file_close - ret = %i", status);
 8000c3c:	68b9      	ldr	r1, [r7, #8]
 8000c3e:	480b      	ldr	r0, [pc, #44]	; (8000c6c <file_close+0x98>)
 8000c40:	f020 fd6a 	bl	8021718 <iprintf>
    return status;
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	e009      	b.n	8000c5c <file_close+0x88>
  }

  openFilesCount--;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <file_close+0x9c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <file_close+0x9c>)
 8000c50:	6013      	str	r3, [r2, #0]
  LOG2("lfs_file_close - ret = %i",
 8000c52:	68b9      	ldr	r1, [r7, #8]
 8000c54:	4807      	ldr	r0, [pc, #28]	; (8000c74 <file_close+0xa0>)
 8000c56:	f020 fd5f 	bl	8021718 <iprintf>
            status);
  return status;
 8000c5a:	68bb      	ldr	r3, [r7, #8]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	2000eac8 	.word	0x2000eac8
 8000c68:	2000013c 	.word	0x2000013c
 8000c6c:	08022c9c 	.word	0x08022c9c
 8000c70:	2000029c 	.word	0x2000029c
 8000c74:	08022cc0 	.word	0x08022cc0

08000c78 <open_modbus_file>:
#include "cfg_files.h"

#define MODBUS_MAP_FILE_PATH "modbus.map"


FILE *open_modbus_file(const char *mode) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

    FILE *file = file_open((char*) MODBUS_MAP_FILE_PATH, "ab+");
 8000c80:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <open_modbus_file+0x2c>)
 8000c82:	4809      	ldr	r0, [pc, #36]	; (8000ca8 <open_modbus_file+0x30>)
 8000c84:	f7ff ff1e 	bl	8000ac4 <file_open>
 8000c88:	60f8      	str	r0, [r7, #12]
    if (!file) {
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d103      	bne.n	8000c98 <open_modbus_file+0x20>
        printf("Erro ao abrir o arquivo %s.\n", MODBUS_MAP_FILE_PATH);
 8000c90:	4905      	ldr	r1, [pc, #20]	; (8000ca8 <open_modbus_file+0x30>)
 8000c92:	4806      	ldr	r0, [pc, #24]	; (8000cac <open_modbus_file+0x34>)
 8000c94:	f020 fd40 	bl	8021718 <iprintf>
    }
    return file;
 8000c98:	68fb      	ldr	r3, [r7, #12]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	08022e4c 	.word	0x08022e4c
 8000ca8:	08022e50 	.word	0x08022e50
 8000cac:	08022e5c 	.word	0x08022e5c

08000cb0 <close_modbus_file>:

void close_modbus_file(FILE *file) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
    if (file) {
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <close_modbus_file+0x14>

    	file_close(file);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ff88 	bl	8000bd4 <file_close>
    }
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <load_mb_from_file>:

    return CfgFiles_success;
}


cfg_file_status_t load_mb_from_file(MB *mb) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
    // Abra o arquivo para leitura binária
    FILE_POINTER file = open_modbus_file("rb");
 8000cd4:	4814      	ldr	r0, [pc, #80]	; (8000d28 <load_mb_from_file+0x5c>)
 8000cd6:	f7ff ffcf 	bl	8000c78 <open_modbus_file>
 8000cda:	60f8      	str	r0, [r7, #12]
    if (!file) {
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d102      	bne.n	8000ce8 <load_mb_from_file+0x1c>
        return CfgFiles_error_unknownError;
 8000ce2:	f06f 0304 	mvn.w	r3, #4
 8000ce6:	e01a      	b.n	8000d1e <load_mb_from_file+0x52>
    }

    // Leia os dados do arquivo para a estrutura MB
    size_t bytes_read = fread(mb, sizeof(MB), 1, file);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2201      	movs	r2, #1
 8000cec:	f240 417a 	movw	r1, #1146	; 0x47a
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f020 fce5 	bl	80216c0 <fread>
 8000cf6:	60b8      	str	r0, [r7, #8]
    if (bytes_read != 1) {
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d008      	beq.n	8000d10 <load_mb_from_file+0x44>
        printf("Erro ao ler do arquivo.\n");
 8000cfe:	480b      	ldr	r0, [pc, #44]	; (8000d2c <load_mb_from_file+0x60>)
 8000d00:	f020 fd70 	bl	80217e4 <puts>
        close_modbus_file(file);
 8000d04:	68f8      	ldr	r0, [r7, #12]
 8000d06:	f7ff ffd3 	bl	8000cb0 <close_modbus_file>
        return CfgFiles_error_unknownError;
 8000d0a:	f06f 0304 	mvn.w	r3, #4
 8000d0e:	e006      	b.n	8000d1e <load_mb_from_file+0x52>
    }

    // Feche o arquivo
    close_modbus_file(file);
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	f7ff ffcd 	bl	8000cb0 <close_modbus_file>

    printf("Dados carregados com sucesso do arquivo modbus.map.\n");
 8000d16:	4806      	ldr	r0, [pc, #24]	; (8000d30 <load_mb_from_file+0x64>)
 8000d18:	f020 fd64 	bl	80217e4 <puts>

    return CfgFiles_success;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	08022ed0 	.word	0x08022ed0
 8000d2c:	08022ed4 	.word	0x08022ed4
 8000d30:	08022eec 	.word	0x08022eec

08000d34 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <vApplicationGetIdleTaskMemory+0x30>)
 8000d4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2280      	movs	r2, #128	; 0x80
 8000d50:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	200002ac 	.word	0x200002ac
 8000d64:	2000034c 	.word	0x2000034c

08000d68 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <vApplicationGetTimerTaskMemory+0x2c>)
 8000d78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <vApplicationGetTimerTaskMemory+0x30>)
 8000d7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d86:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	2000054c 	.word	0x2000054c
 8000d98:	200005ec 	.word	0x200005ec

08000d9c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d9c:	b5b0      	push	{r4, r5, r7, lr}
 8000d9e:	b092      	sub	sp, #72	; 0x48
 8000da0:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of menuQueue */
  osMessageQDef(menuQueue, 6, MenuData_t);
 8000da2:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <MX_FREERTOS_Init+0x74>)
 8000da4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000da8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000daa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  menuQueueHandle = osMessageCreate(osMessageQ(menuQueue), NULL);
 8000dae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f006 fb4c 	bl	8007452 <osMessageCreate>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4a15      	ldr	r2, [pc, #84]	; (8000e14 <MX_FREERTOS_Init+0x78>)
 8000dbe:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ethernetStatusT */
  osThreadDef(ethernetStatusT, EthernetStatusTask, osPriorityNormal, 0, 1024);
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_FREERTOS_Init+0x7c>)
 8000dc2:	f107 041c 	add.w	r4, r7, #28
 8000dc6:	461d      	mov	r5, r3
 8000dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dcc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ethernetStatusTHandle = osThreadCreate(osThread(ethernetStatusT), NULL);
 8000dd4:	f107 031c 	add.w	r3, r7, #28
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f006 f974 	bl	80070c8 <osThreadCreate>
 8000de0:	4603      	mov	r3, r0
 8000de2:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <MX_FREERTOS_Init+0x80>)
 8000de4:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonsTask */
  osThreadDef(buttonsTask, ButtonsTask, osPriorityBelowNormal, 0, 1024);
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <MX_FREERTOS_Init+0x84>)
 8000de8:	463c      	mov	r4, r7
 8000dea:	461d      	mov	r5, r3
 8000dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000df4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonsTaskHandle = osThreadCreate(osThread(buttonsTask), NULL);
 8000df8:	463b      	mov	r3, r7
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f006 f963 	bl	80070c8 <osThreadCreate>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <MX_FREERTOS_Init+0x88>)
 8000e06:	6013      	str	r3, [r2, #0]
  /* add threads, ... */


  /* USER CODE END RTOS_THREADS */

}
 8000e08:	bf00      	nop
 8000e0a:	3748      	adds	r7, #72	; 0x48
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e10:	08023018 	.word	0x08023018
 8000e14:	200002a8 	.word	0x200002a8
 8000e18:	08023038 	.word	0x08023038
 8000e1c:	200002a0 	.word	0x200002a0
 8000e20:	08023060 	.word	0x08023060
 8000e24:	200002a4 	.word	0x200002a4

08000e28 <EthernetStatusTask>:
  * @param  argument: Not used
  * @retval None
 */
/* USER CODE END Header_EthernetStatusTask */
void EthernetStatusTask(void const *argument)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b0b4      	sub	sp, #208	; 0xd0
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	/* init code for LWIP */
	MX_LWIP_Init();
 8000e30:	f005 fbf6 	bl	8006620 <MX_LWIP_Init>
	/* USER CODE BEGIN EthernetStatusTask */
	MenuData_t menu_data = {0};
 8000e34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e38:	227f      	movs	r2, #127	; 0x7f
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f020 fe81 	bl	8021b44 <memset>
	char ipad[21] = {0};
 8000e42:	2300      	movs	r3, #0
 8000e44:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	741a      	strb	r2, [r3, #16]
	char mask[21] = {0};
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
 8000e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	741a      	strb	r2, [r3, #16]
	char gway[21] = {0};
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	741a      	strb	r2, [r3, #16]

	/* Infinite loop */
	for (;;)
	{
		if (netif_is_up(&gnetif))
 8000e7e:	4b38      	ldr	r3, [pc, #224]	; (8000f60 <EthernetStatusTask+0x138>)
 8000e80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d064      	beq.n	8000f58 <EthernetStatusTask+0x130>
		{
			sprintf(ipad, "IPAD:%s", ip4addr_ntoa(netif_ip4_addr(&gnetif)));
 8000e8e:	4835      	ldr	r0, [pc, #212]	; (8000f64 <EthernetStatusTask+0x13c>)
 8000e90:	f01d ff3c 	bl	801ed0c <ip4addr_ntoa>
 8000e94:	4602      	mov	r2, r0
 8000e96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e9a:	4933      	ldr	r1, [pc, #204]	; (8000f68 <EthernetStatusTask+0x140>)
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f020 fd2f 	bl	8021900 <siprintf>
			sprintf(mask, "MASK:%s", ip4addr_ntoa(netif_ip4_netmask(&gnetif)));
 8000ea2:	4832      	ldr	r0, [pc, #200]	; (8000f6c <EthernetStatusTask+0x144>)
 8000ea4:	f01d ff32 	bl	801ed0c <ip4addr_ntoa>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	f107 0320 	add.w	r3, r7, #32
 8000eae:	4930      	ldr	r1, [pc, #192]	; (8000f70 <EthernetStatusTask+0x148>)
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f020 fd25 	bl	8021900 <siprintf>
			sprintf(gway, "GWAY:%s", ip4addr_ntoa(netif_ip4_gw(&gnetif)));
 8000eb6:	482f      	ldr	r0, [pc, #188]	; (8000f74 <EthernetStatusTask+0x14c>)
 8000eb8:	f01d ff28 	bl	801ed0c <ip4addr_ntoa>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	492d      	ldr	r1, [pc, #180]	; (8000f78 <EthernetStatusTask+0x150>)
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f020 fd1b 	bl	8021900 <siprintf>

			if (strcmp(menu_data.items[PAGE_0][LINE_0], ipad) != 0 ||
 8000eca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000ece:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff f97a 	bl	80001d0 <strcmp>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d117      	bne.n	8000f12 <EthernetStatusTask+0xea>
				strcmp(menu_data.items[PAGE_0][LINE_1], mask) != 0 ||
 8000ee2:	f107 0220 	add.w	r2, r7, #32
 8000ee6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000eea:	3316      	adds	r3, #22
 8000eec:	4611      	mov	r1, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff f96e 	bl	80001d0 <strcmp>
 8000ef4:	4603      	mov	r3, r0
			if (strcmp(menu_data.items[PAGE_0][LINE_0], ipad) != 0 ||
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10b      	bne.n	8000f12 <EthernetStatusTask+0xea>
				strcmp(menu_data.items[PAGE_0][LINE_2], gway) != 0)
 8000efa:	f107 0208 	add.w	r2, r7, #8
 8000efe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f02:	332b      	adds	r3, #43	; 0x2b
 8000f04:	4611      	mov	r1, r2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff f962 	bl	80001d0 <strcmp>
 8000f0c:	4603      	mov	r3, r0
				strcmp(menu_data.items[PAGE_0][LINE_1], mask) != 0 ||
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d022      	beq.n	8000f58 <EthernetStatusTask+0x130>
			{
				strcpy(menu_data.items[PAGE_0][LINE_0], ipad);
 8000f12:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000f16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f020 ff19 	bl	8021d56 <strcpy>
				strcpy(menu_data.items[PAGE_0][LINE_1], mask);
 8000f24:	f107 0220 	add.w	r2, r7, #32
 8000f28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f2c:	3316      	adds	r3, #22
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f020 ff10 	bl	8021d56 <strcpy>
				strcpy(menu_data.items[PAGE_0][LINE_2], gway);
 8000f36:	f107 0208 	add.w	r2, r7, #8
 8000f3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f3e:	332b      	adds	r3, #43	; 0x2b
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f020 ff07 	bl	8021d56 <strcpy>
				SendDataToMenuQueueUpdate(&menu_data);
 8000f48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fcc3 	bl	80008d8 <SendDataToMenuQueueUpdate>
				osDelay(100);
 8000f52:	2064      	movs	r0, #100	; 0x64
 8000f54:	f006 f904 	bl	8007160 <osDelay>
			}

		}
		/* USER CODE END EthernetStatusTask */
		osDelay(1);
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f006 f901 	bl	8007160 <osDelay>
		if (netif_is_up(&gnetif))
 8000f5e:	e78e      	b.n	8000e7e <EthernetStatusTask+0x56>
 8000f60:	20000b8c 	.word	0x20000b8c
 8000f64:	20000b90 	.word	0x20000b90
 8000f68:	0802307c 	.word	0x0802307c
 8000f6c:	20000b94 	.word	0x20000b94
 8000f70:	08023084 	.word	0x08023084
 8000f74:	20000b98 	.word	0x20000b98
 8000f78:	0802308c 	.word	0x0802308c

08000f7c <ButtonsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ButtonsTask */
void ButtonsTask(void const *argument)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN ButtonsTask */
	/* Infinite loop */
	for (;;)
	{

		if (HAL_GPIO_ReadPin(BT_SW1_GPIO_Port, BT_SW1_Pin) == RESET)
 8000f84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f88:	4812      	ldr	r0, [pc, #72]	; (8000fd4 <ButtonsTask+0x58>)
 8000f8a:	f002 fe89 	bl	8003ca0 <HAL_GPIO_ReadPin>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d109      	bne.n	8000fa8 <ButtonsTask+0x2c>
		{

			NextPage();
 8000f94:	f7ff fb9e 	bl	80006d4 <NextPage>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000f98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <ButtonsTask+0x58>)
 8000f9e:	f002 feb0 	bl	8003d02 <HAL_GPIO_TogglePin>

			osDelay(250);
 8000fa2:	20fa      	movs	r0, #250	; 0xfa
 8000fa4:	f006 f8dc 	bl	8007160 <osDelay>
		}

		if (HAL_GPIO_ReadPin(BT_SW2_GPIO_Port, BT_SW2_Pin) == RESET)
 8000fa8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fac:	4809      	ldr	r0, [pc, #36]	; (8000fd4 <ButtonsTask+0x58>)
 8000fae:	f002 fe77 	bl	8003ca0 <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d109      	bne.n	8000fcc <ButtonsTask+0x50>
		{

			PreviousPage();
 8000fb8:	f7ff fba8 	bl	800070c <PreviousPage>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000fbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fc0:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <ButtonsTask+0x58>)
 8000fc2:	f002 fe9e 	bl	8003d02 <HAL_GPIO_TogglePin>

			osDelay(250);
 8000fc6:	20fa      	movs	r0, #250	; 0xfa
 8000fc8:	f006 f8ca 	bl	8007160 <osDelay>
		}

		osDelay(10);
 8000fcc:	200a      	movs	r0, #10
 8000fce:	f006 f8c7 	bl	8007160 <osDelay>
		if (HAL_GPIO_ReadPin(BT_SW1_GPIO_Port, BT_SW1_Pin) == RESET)
 8000fd2:	e7d7      	b.n	8000f84 <ButtonsTask+0x8>
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	4b3e      	ldr	r3, [pc, #248]	; (80010ec <MX_GPIO_Init+0x114>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a3d      	ldr	r2, [pc, #244]	; (80010ec <MX_GPIO_Init+0x114>)
 8000ff8:	f043 0310 	orr.w	r3, r3, #16
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b3b      	ldr	r3, [pc, #236]	; (80010ec <MX_GPIO_Init+0x114>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0310 	and.w	r3, r3, #16
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b37      	ldr	r3, [pc, #220]	; (80010ec <MX_GPIO_Init+0x114>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a36      	ldr	r2, [pc, #216]	; (80010ec <MX_GPIO_Init+0x114>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b34      	ldr	r3, [pc, #208]	; (80010ec <MX_GPIO_Init+0x114>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	4b30      	ldr	r3, [pc, #192]	; (80010ec <MX_GPIO_Init+0x114>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a2f      	ldr	r2, [pc, #188]	; (80010ec <MX_GPIO_Init+0x114>)
 8001030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <MX_GPIO_Init+0x114>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	4b29      	ldr	r3, [pc, #164]	; (80010ec <MX_GPIO_Init+0x114>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a28      	ldr	r2, [pc, #160]	; (80010ec <MX_GPIO_Init+0x114>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b26      	ldr	r3, [pc, #152]	; (80010ec <MX_GPIO_Init+0x114>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	4b22      	ldr	r3, [pc, #136]	; (80010ec <MX_GPIO_Init+0x114>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a21      	ldr	r2, [pc, #132]	; (80010ec <MX_GPIO_Init+0x114>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <MX_GPIO_Init+0x114>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI2_FLASH_CS_Pin|SPI2_NRF_CS_Pin|LED1_Pin|LED2_Pin
 800107a:	2200      	movs	r2, #0
 800107c:	f24e 1108 	movw	r1, #57608	; 0xe108
 8001080:	481b      	ldr	r0, [pc, #108]	; (80010f0 <MX_GPIO_Init+0x118>)
 8001082:	f002 fe25 	bl	8003cd0 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_DC_Pin|SPI1_RESET_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	2119      	movs	r1, #25
 800108a:	481a      	ldr	r0, [pc, #104]	; (80010f4 <MX_GPIO_Init+0x11c>)
 800108c:	f002 fe20 	bl	8003cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SPI2_FLASH_CS_Pin|SPI2_NRF_CS_Pin|LED1_Pin|LED2_Pin
 8001090:	f24e 1308 	movw	r3, #57608	; 0xe108
 8001094:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	2301      	movs	r3, #1
 8001098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	4811      	ldr	r0, [pc, #68]	; (80010f0 <MX_GPIO_Init+0x118>)
 80010aa:	f002 fc5d 	bl	8003968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin|SPI1_RESET_Pin|SPI1_CS_Pin;
 80010ae:	2319      	movs	r3, #25
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	480b      	ldr	r0, [pc, #44]	; (80010f4 <MX_GPIO_Init+0x11c>)
 80010c6:	f002 fc4f 	bl	8003968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = BT_SW1_Pin|BT_SW2_Pin|BT_SW3_Pin;
 80010ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	4804      	ldr	r0, [pc, #16]	; (80010f0 <MX_GPIO_Init+0x118>)
 80010e0:	f002 fc42 	bl	8003968 <HAL_GPIO_Init>

}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40020000 	.word	0x40020000

080010f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <MX_I2C1_Init+0x50>)
 80010fe:	4a13      	ldr	r2, [pc, #76]	; (800114c <MX_I2C1_Init+0x54>)
 8001100:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_I2C1_Init+0x50>)
 8001104:	4a12      	ldr	r2, [pc, #72]	; (8001150 <MX_I2C1_Init+0x58>)
 8001106:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_I2C1_Init+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_I2C1_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_I2C1_Init+0x50>)
 8001116:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800111a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <MX_I2C1_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_I2C1_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <MX_I2C1_Init+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_I2C1_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <MX_I2C1_Init+0x50>)
 8001136:	f002 fdff 	bl	8003d38 <HAL_I2C_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001140:	f000 fa92 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200009ec 	.word	0x200009ec
 800114c:	40005400 	.word	0x40005400
 8001150:	00061a80 	.word	0x00061a80

08001154 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a19      	ldr	r2, [pc, #100]	; (80011d8 <HAL_I2C_MspInit+0x84>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d12c      	bne.n	80011d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <HAL_I2C_MspInit+0x88>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a17      	ldr	r2, [pc, #92]	; (80011dc <HAL_I2C_MspInit+0x88>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <HAL_I2C_MspInit+0x88>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001192:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001198:	2312      	movs	r3, #18
 800119a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011a4:	2304      	movs	r3, #4
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	480c      	ldr	r0, [pc, #48]	; (80011e0 <HAL_I2C_MspInit+0x8c>)
 80011b0:	f002 fbda 	bl	8003968 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <HAL_I2C_MspInit+0x88>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	4a07      	ldr	r2, [pc, #28]	; (80011dc <HAL_I2C_MspInit+0x88>)
 80011be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011c2:	6413      	str	r3, [r2, #64]	; 0x40
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_I2C_MspInit+0x88>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011d0:	bf00      	nop
 80011d2:	3728      	adds	r7, #40	; 0x28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40005400 	.word	0x40005400
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020400 	.word	0x40020400

080011e4 <lfs_w25qflash_config_init>:



void lfs_w25qflash_config_init ()

{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

littlefs_config.read = lfs_w25qflash_read;
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <lfs_w25qflash_config_init+0x6c>)
 80011ea:	4a1a      	ldr	r2, [pc, #104]	; (8001254 <lfs_w25qflash_config_init+0x70>)
 80011ec:	605a      	str	r2, [r3, #4]
littlefs_config.prog = lfs_w25qflash_prog;
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <lfs_w25qflash_config_init+0x6c>)
 80011f0:	4a19      	ldr	r2, [pc, #100]	; (8001258 <lfs_w25qflash_config_init+0x74>)
 80011f2:	609a      	str	r2, [r3, #8]
littlefs_config.erase = lfs_w25qflash_erase;
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <lfs_w25qflash_config_init+0x6c>)
 80011f6:	4a19      	ldr	r2, [pc, #100]	; (800125c <lfs_w25qflash_config_init+0x78>)
 80011f8:	60da      	str	r2, [r3, #12]
littlefs_config.sync = lfs_w25qflash_sync;
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <lfs_w25qflash_config_init+0x6c>)
 80011fc:	4a18      	ldr	r2, [pc, #96]	; (8001260 <lfs_w25qflash_config_init+0x7c>)
 80011fe:	611a      	str	r2, [r3, #16]
#ifdef LFS_THREADSAFE
littlefs_config.lock = lfs_lock;
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <lfs_w25qflash_config_init+0x6c>)
 8001202:	4a18      	ldr	r2, [pc, #96]	; (8001264 <lfs_w25qflash_config_init+0x80>)
 8001204:	615a      	str	r2, [r3, #20]
littlefs_config.unlock = lfs_unlock;
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <lfs_w25qflash_config_init+0x6c>)
 8001208:	4a17      	ldr	r2, [pc, #92]	; (8001268 <lfs_w25qflash_config_init+0x84>)
 800120a:	619a      	str	r2, [r3, #24]
#endif

 littlefs_config.read_size = w25qxx.PageSize;
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <lfs_w25qflash_config_init+0x88>)
 800120e:	895b      	ldrh	r3, [r3, #10]
 8001210:	461a      	mov	r2, r3
 8001212:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <lfs_w25qflash_config_init+0x6c>)
 8001214:	61da      	str	r2, [r3, #28]
 littlefs_config.prog_size = w25qxx.PageSize;
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <lfs_w25qflash_config_init+0x88>)
 8001218:	895b      	ldrh	r3, [r3, #10]
 800121a:	461a      	mov	r2, r3
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <lfs_w25qflash_config_init+0x6c>)
 800121e:	621a      	str	r2, [r3, #32]
 littlefs_config.block_size = w25qxx.SectorSize;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <lfs_w25qflash_config_init+0x88>)
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <lfs_w25qflash_config_init+0x6c>)
 8001226:	6253      	str	r3, [r2, #36]	; 0x24
 littlefs_config.block_count = w25qxx.SectorCount;
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <lfs_w25qflash_config_init+0x88>)
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	4a08      	ldr	r2, [pc, #32]	; (8001250 <lfs_w25qflash_config_init+0x6c>)
 800122e:	6293      	str	r3, [r2, #40]	; 0x28
 littlefs_config.block_cycles = 100;
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <lfs_w25qflash_config_init+0x6c>)
 8001232:	2264      	movs	r2, #100	; 0x64
 8001234:	62da      	str	r2, [r3, #44]	; 0x2c
 littlefs_config.cache_size = LITTLEFS_CACHE_SIZE;
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <lfs_w25qflash_config_init+0x6c>)
 8001238:	f44f 7280 	mov.w	r2, #256	; 0x100
 800123c:	631a      	str	r2, [r3, #48]	; 0x30
 littlefs_config.lookahead_size = LITTLEFS_LOOKAHEAD_SIZE;
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <lfs_w25qflash_config_init+0x6c>)
 8001240:	2210      	movs	r2, #16
 8001242:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000a40 	.word	0x20000a40
 8001254:	08001271 	.word	0x08001271
 8001258:	080012b1 	.word	0x080012b1
 800125c:	080012f1 	.word	0x080012f1
 8001260:	0800130b 	.word	0x0800130b
 8001264:	08001455 	.word	0x08001455
 8001268:	08001495 	.word	0x08001495
 800126c:	20012b78 	.word	0x20012b78

08001270 <lfs_w25qflash_read>:


/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de leitura
 */
int lfs_w25qflash_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	603b      	str	r3, [r7, #0]

	if (W25qxx_ReadSector((uint8_t*) buffer, block, off, size)) {
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	68b9      	ldr	r1, [r7, #8]
 8001284:	6838      	ldr	r0, [r7, #0]
 8001286:	f01f ff8d 	bl	80211a4 <W25qxx_ReadSector>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d007      	beq.n	80012a0 <lfs_w25qflash_read+0x30>

		LOG2("Leitura da flash no  - bloco %lu - off %lu - %lu bytes lidos\r\n", block, off, size);
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <lfs_w25qflash_read+0x3c>)
 8001298:	f020 fa3e 	bl	8021718 <iprintf>

		return LFS_ERR_OK;
 800129c:	2300      	movs	r3, #0
 800129e:	e001      	b.n	80012a4 <lfs_w25qflash_read+0x34>

	} else {

	  return LFS_ERR_CORRUPT;
 80012a0:	f06f 0353 	mvn.w	r3, #83	; 0x53
	}
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	08023094 	.word	0x08023094

080012b0 <lfs_w25qflash_prog>:

/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de escrita
 */

int lfs_w25qflash_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	603b      	str	r3, [r7, #0]

	if (W25qxx_WriteSector((uint8_t*) buffer, block, off, size)) {
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	68b9      	ldr	r1, [r7, #8]
 80012c4:	6838      	ldr	r0, [r7, #0]
 80012c6:	f01f fe8b 	bl	8020fe0 <W25qxx_WriteSector>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <lfs_w25qflash_prog+0x30>

		LOG2("Escrita da flash no - bloco %lu - off %lu  - %lu bytes escritos\r\n", block, off, size);
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	68b9      	ldr	r1, [r7, #8]
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <lfs_w25qflash_prog+0x3c>)
 80012d8:	f020 fa1e 	bl	8021718 <iprintf>

		return LFS_ERR_OK;
 80012dc:	2300      	movs	r3, #0
 80012de:	e001      	b.n	80012e4 <lfs_w25qflash_prog+0x34>

	} else {

		return LFS_ERR_CORRUPT;
 80012e0:	f06f 0353 	mvn.w	r3, #83	; 0x53
	}
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	080230d4 	.word	0x080230d4

080012f0 <lfs_w25qflash_erase>:

/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de apagamento (erase)
 */
int lfs_w25qflash_erase(const struct lfs_config *c, lfs_block_t block) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]

  	 W25qxx_EraseSector(block);
 80012fa:	6838      	ldr	r0, [r7, #0]
 80012fc:	f01f fd7c 	bl	8020df8 <W25qxx_EraseSector>
	return LFS_ERR_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <lfs_w25qflash_sync>:
/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de sincronismo
 * 		  (para a Flash NAND esta função não é necessária, apenas retorna OK)
 */

int lfs_w25qflash_sync(const struct lfs_config *c) {
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]

	return LFS_ERR_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <lfs_get_default_config>:


int lfs_get_default_config(struct lfs_config *lfsc)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

	lfs_w25qflash_config_init();
 8001328:	f7ff ff5c 	bl	80011e4 <lfs_w25qflash_config_init>

    *lfsc = littlefs_config; /* copy pre-initialized lfs config structure */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a06      	ldr	r2, [pc, #24]	; (8001348 <lfs_get_default_config+0x28>)
 8001330:	4618      	mov	r0, r3
 8001332:	4611      	mov	r1, r2
 8001334:	2354      	movs	r3, #84	; 0x54
 8001336:	461a      	mov	r2, r3
 8001338:	f020 fd15 	bl	8021d66 <memcpy>
    return 0;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000a40 	.word	0x20000a40

0800134c <lfs_storage_init>:

int lfs_storage_init(const struct lfs_config *lfsc)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
    uint16_t status;

    /* initialize mflash */
    status = W25qxx_Init();
 8001354:	f01f fc7e 	bl	8020c54 <W25qxx_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	81fb      	strh	r3, [r7, #14]

    return status;
 800135c:	89fb      	ldrh	r3, [r7, #14]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <osKernelGetState>:
//*** cmsis_os2.c
#define IS_IRQ_MODE()             (__get_IPSR() != 0U)
#define IS_IRQ()                  IS_IRQ_MODE()

//*** cmsis_os2.c
osKernelState_t osKernelGetState (void) {
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800136c:	f008 f898 	bl	80094a0 <xTaskGetSchedulerState>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d004      	beq.n	8001380 <osKernelGetState+0x1a>
 8001376:	2b02      	cmp	r3, #2
 8001378:	d105      	bne.n	8001386 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning_enum;
 800137a:	2302      	movs	r3, #2
 800137c:	607b      	str	r3, [r7, #4]
      break;
 800137e:	e005      	b.n	800138c <osKernelGetState+0x26>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8001380:	2303      	movs	r3, #3
 8001382:	607b      	str	r3, [r7, #4]
      break;
 8001384:	e002      	b.n	800138c <osKernelGetState+0x26>
    case taskSCHEDULER_NOT_STARTED:
    default:
      //if (KernelState == osKernelReady) {
      //  state = osKernelReady;
      //} else {
        state = osKernelInactive;
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
      //}
      break;
 800138a:	bf00      	nop
  }

  return (state);
 800138c:	687b      	ldr	r3, [r7, #4]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <osKernelLock>:

//*** cmsis_os2.c
int32_t osKernelLock (void) {
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800139c:	f3ef 8305 	mrs	r3, IPSR
 80013a0:	603b      	str	r3, [r7, #0]
  return(result);
 80013a2:	683b      	ldr	r3, [r7, #0]
  int32_t lock;

  if (IS_IRQ()) {
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d002      	beq.n	80013ae <osKernelLock+0x18>
    lock = (int32_t)osErrorISR;
 80013a8:	2382      	movs	r3, #130	; 0x82
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	e013      	b.n	80013d6 <osKernelLock+0x40>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 80013ae:	f008 f877 	bl	80094a0 <xTaskGetSchedulerState>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <osKernelLock+0x28>
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d003      	beq.n	80013c4 <osKernelLock+0x2e>
 80013bc:	e007      	b.n	80013ce <osKernelLock+0x38>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 80013be:	2301      	movs	r3, #1
 80013c0:	607b      	str	r3, [r7, #4]
        break;
 80013c2:	e008      	b.n	80013d6 <osKernelLock+0x40>

      case taskSCHEDULER_RUNNING:
        vTaskSuspendAll();
 80013c4:	f007 fc76 	bl	8008cb4 <vTaskSuspendAll>
        lock = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
        break;
 80013cc:	e003      	b.n	80013d6 <osKernelLock+0x40>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013d2:	607b      	str	r3, [r7, #4]
        break;
 80013d4:	bf00      	nop
    }
  }

  return (lock);
 80013d6:	687b      	ldr	r3, [r7, #4]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <osKernelRestoreLock>:

  return (lock);
}

//*** cmsis_os2.c
int32_t osKernelRestoreLock (int32_t lock) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80013e8:	f3ef 8305 	mrs	r3, IPSR
 80013ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80013ee:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ()) {
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d002      	beq.n	80013fa <osKernelRestoreLock+0x1a>
    lock = (int32_t)osErrorISR;
 80013f4:	2382      	movs	r3, #130	; 0x82
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	e026      	b.n	8001448 <osKernelRestoreLock+0x68>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 80013fa:	f008 f851 	bl	80094a0 <xTaskGetSchedulerState>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <osKernelRestoreLock+0x28>
 8001404:	2b02      	cmp	r3, #2
 8001406:	d11a      	bne.n	800143e <osKernelRestoreLock+0x5e>
      case taskSCHEDULER_SUSPENDED:
      case taskSCHEDULER_RUNNING:
        if (lock == 1) {
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d102      	bne.n	8001414 <osKernelRestoreLock+0x34>
          vTaskSuspendAll();
 800140e:	f007 fc51 	bl	8008cb4 <vTaskSuspendAll>
                lock = (int32_t)osError;
              }
            }
          }
        }
        break;
 8001412:	e018      	b.n	8001446 <osKernelRestoreLock+0x66>
          if (lock != 0) {
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <osKernelRestoreLock+0x42>
            lock = (int32_t)osError;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800141e:	607b      	str	r3, [r7, #4]
        break;
 8001420:	e011      	b.n	8001446 <osKernelRestoreLock+0x66>
            if (xTaskResumeAll() != pdTRUE) {
 8001422:	f007 fc55 	bl	8008cd0 <xTaskResumeAll>
 8001426:	4603      	mov	r3, r0
 8001428:	2b01      	cmp	r3, #1
 800142a:	d00c      	beq.n	8001446 <osKernelRestoreLock+0x66>
              if (xTaskGetSchedulerState() != taskSCHEDULER_RUNNING) {
 800142c:	f008 f838 	bl	80094a0 <xTaskGetSchedulerState>
 8001430:	4603      	mov	r3, r0
 8001432:	2b02      	cmp	r3, #2
 8001434:	d007      	beq.n	8001446 <osKernelRestoreLock+0x66>
                lock = (int32_t)osError;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800143a:	607b      	str	r3, [r7, #4]
        break;
 800143c:	e003      	b.n	8001446 <osKernelRestoreLock+0x66>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 800143e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001442:	607b      	str	r3, [r7, #4]
        break;
 8001444:	e000      	b.n	8001448 <osKernelRestoreLock+0x68>
        break;
 8001446:	bf00      	nop
    }
  }

  return (lock);
 8001448:	687b      	ldr	r3, [r7, #4]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <lfs_lock>:

/**
 * @brief Função de interface THREADSAFE do LittleFS com o RTOS para função de LOCK
 */
int lfs_lock(const struct lfs_config *c)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	if(osKernelGetState() == osKernelInactive)
 800145c:	f7ff ff83 	bl	8001366 <osKernelGetState>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <lfs_lock+0x16>
	{
		// RTOS ainda não inicializou
		return  LFS_ERR_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	e00e      	b.n	8001488 <lfs_lock+0x34>
	}

	rtos_lockState = osKernelLock();
 800146a:	f7ff ff94 	bl	8001396 <osKernelLock>
 800146e:	4603      	mov	r3, r0
 8001470:	4a07      	ldr	r2, [pc, #28]	; (8001490 <lfs_lock+0x3c>)
 8001472:	6013      	str	r3, [r2, #0]
	int ret = LFS_ERR_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]

	if (rtos_lockState < 0)
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <lfs_lock+0x3c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	da02      	bge.n	8001486 <lfs_lock+0x32>
	{
		ret = LFS_ERR_IO;
 8001480:	f06f 0304 	mvn.w	r3, #4
 8001484:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 8001486:	68fb      	ldr	r3, [r7, #12]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000a94 	.word	0x20000a94

08001494 <lfs_unlock>:
/**
 * @brief Função de interface THREADSAFE do LittleFS com o RTOS para função de UNLOCK
 */
int lfs_unlock(const struct lfs_config *c)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	if(osKernelGetState() == osKernelInactive)
 800149c:	f7ff ff63 	bl	8001366 <osKernelGetState>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <lfs_unlock+0x16>
	{
		// RTOS ainda não inicializou
		return  LFS_ERR_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e00e      	b.n	80014c8 <lfs_unlock+0x34>
	}

	//int state = osKernelUnlock();
	int newLockState = osKernelRestoreLock(rtos_lockState);
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <lfs_unlock+0x3c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff96 	bl	80013e0 <osKernelRestoreLock>
 80014b4:	60b8      	str	r0, [r7, #8]
	int ret = LFS_ERR_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]

	if (newLockState < 0)
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	da02      	bge.n	80014c6 <lfs_unlock+0x32>
	{
		ret = LFS_ERR_IO;
 80014c0:	f06f 0304 	mvn.w	r3, #4
 80014c4:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000a94 	.word	0x20000a94

080014d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d8:	f000 fea2 	bl	8002220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014dc:	f000 f848 	bl	8001570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 80014e0:	f7ff fd7a 	bl	8000fd8 <MX_GPIO_Init>
	MX_SPI2_Init();
 80014e4:	f000 fa54 	bl	8001990 <MX_SPI2_Init>
	MX_USART1_UART_Init();
 80014e8:	f000 fc9e 	bl	8001e28 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 80014ec:	f7ff fe04 	bl	80010f8 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014f6:	481d      	ldr	r0, [pc, #116]	; (800156c <main+0x98>)
 80014f8:	f002 fbea 	bl	8003cd0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80014fc:	2032      	movs	r0, #50	; 0x32
 80014fe:	f000 fed1 	bl	80022a4 <HAL_Delay>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001508:	4818      	ldr	r0, [pc, #96]	; (800156c <main+0x98>)
 800150a:	f002 fbe1 	bl	8003cd0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800150e:	2032      	movs	r0, #50	; 0x32
 8001510:	f000 fec8 	bl	80022a4 <HAL_Delay>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800151a:	4814      	ldr	r0, [pc, #80]	; (800156c <main+0x98>)
 800151c:	f002 fbd8 	bl	8003cd0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001520:	2032      	movs	r0, #50	; 0x32
 8001522:	f000 febf 	bl	80022a4 <HAL_Delay>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8001526:	2201      	movs	r2, #1
 8001528:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800152c:	480f      	ldr	r0, [pc, #60]	; (800156c <main+0x98>)
 800152e:	f002 fbcf 	bl	8003cd0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001532:	2032      	movs	r0, #50	; 0x32
 8001534:	f000 feb6 	bl	80022a4 <HAL_Delay>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8001538:	2201      	movs	r2, #1
 800153a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800153e:	480b      	ldr	r0, [pc, #44]	; (800156c <main+0x98>)
 8001540:	f002 fbc6 	bl	8003cd0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001544:	2032      	movs	r0, #50	; 0x32
 8001546:	f000 fead 	bl	80022a4 <HAL_Delay>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 800154a:	2201      	movs	r2, #1
 800154c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001550:	4806      	ldr	r0, [pc, #24]	; (800156c <main+0x98>)
 8001552:	f002 fbbd 	bl	8003cd0 <HAL_GPIO_WritePin>


	FileSystemInit();
 8001556:	f7ff f9f3 	bl	8000940 <FileSystemInit>
	ModbusServerInit();
 800155a:	f000 f9fb 	bl	8001954 <ModbusServerInit>
	AdapterDisplaySSD1306Init();
 800155e:	f7ff f831 	bl	80005c4 <AdapterDisplaySSD1306Init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001562:	f7ff fc1b 	bl	8000d9c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001566:	f005 fd98 	bl	800709a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800156a:	e7fe      	b.n	800156a <main+0x96>
 800156c:	40021000 	.word	0x40021000

08001570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b094      	sub	sp, #80	; 0x50
 8001574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001576:	f107 0320 	add.w	r3, r7, #32
 800157a:	2230      	movs	r2, #48	; 0x30
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f020 fae0 	bl	8021b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	4b28      	ldr	r3, [pc, #160]	; (800163c <SystemClock_Config+0xcc>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	4a27      	ldr	r2, [pc, #156]	; (800163c <SystemClock_Config+0xcc>)
 800159e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a2:	6413      	str	r3, [r2, #64]	; 0x40
 80015a4:	4b25      	ldr	r3, [pc, #148]	; (800163c <SystemClock_Config+0xcc>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b0:	2300      	movs	r3, #0
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	4b22      	ldr	r3, [pc, #136]	; (8001640 <SystemClock_Config+0xd0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a21      	ldr	r2, [pc, #132]	; (8001640 <SystemClock_Config+0xd0>)
 80015ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <SystemClock_Config+0xd0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015cc:	2301      	movs	r3, #1
 80015ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d6:	2302      	movs	r3, #2
 80015d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80015e0:	2319      	movs	r3, #25
 80015e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ea:	2302      	movs	r3, #2
 80015ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015ee:	2304      	movs	r3, #4
 80015f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f2:	f107 0320 	add.w	r3, r7, #32
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 f84c 	bl	8004694 <HAL_RCC_OscConfig>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001602:	f000 f831 	bl	8001668 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001606:	230f      	movs	r3, #15
 8001608:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800160a:	2302      	movs	r3, #2
 800160c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001612:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001616:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	2105      	movs	r1, #5
 8001624:	4618      	mov	r0, r3
 8001626:	f003 faad 	bl	8004b84 <HAL_RCC_ClockConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001630:	f000 f81a 	bl	8001668 <Error_Handler>
  }
}
 8001634:	bf00      	nop
 8001636:	3750      	adds	r7, #80	; 0x50
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40023800 	.word	0x40023800
 8001640:	40007000 	.word	0x40007000

08001644 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d101      	bne.n	800165a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001656:	f000 fe05 	bl	8002264 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40002000 	.word	0x40002000

08001668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800166c:	b672      	cpsid	i
}
 800166e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001670:	e7fe      	b.n	8001670 <Error_Handler+0x8>
	...

08001674 <ModbusStatusInfo>:




static void ModbusStatusInfo(bool open)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b0a2      	sub	sp, #136	; 0x88
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
	MenuData_t menu = {0};
 800167e:	f107 0308 	add.w	r3, r7, #8
 8001682:	227f      	movs	r2, #127	; 0x7f
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f020 fa5c 	bl	8021b44 <memset>
	if (open)
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d009      	beq.n	80016a6 <ModbusStatusInfo+0x32>
	{

		sprintf(menu.items[PAGE_1][LINE_0], "CFG:CN Port:%d",MODBUS_SERVER_TCP_PORT);
 8001692:	f107 0308 	add.w	r3, r7, #8
 8001696:	3340      	adds	r3, #64	; 0x40
 8001698:	f245 52f0 	movw	r2, #22000	; 0x55f0
 800169c:	490b      	ldr	r1, [pc, #44]	; (80016cc <ModbusStatusInfo+0x58>)
 800169e:	4618      	mov	r0, r3
 80016a0:	f020 f92e 	bl	8021900 <siprintf>
 80016a4:	e008      	b.n	80016b8 <ModbusStatusInfo+0x44>
	}
	else
	{
		sprintf(menu.items[PAGE_1][LINE_0], "CFG:DC Port:%d",MODBUS_SERVER_TCP_PORT);
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	3340      	adds	r3, #64	; 0x40
 80016ac:	f245 52f0 	movw	r2, #22000	; 0x55f0
 80016b0:	4907      	ldr	r1, [pc, #28]	; (80016d0 <ModbusStatusInfo+0x5c>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f020 f924 	bl	8021900 <siprintf>
	}

	SendDataToMenuQueueUpdate(&menu);
 80016b8:	f107 0308 	add.w	r3, r7, #8
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff f90b 	bl	80008d8 <SendDataToMenuQueueUpdate>
}
 80016c2:	bf00      	nop
 80016c4:	3788      	adds	r7, #136	; 0x88
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	08023118 	.word	0x08023118
 80016d0:	08023128 	.word	0x08023128

080016d4 <ModbusHandleConnection>:


static uint8_t ModbusHandleConnection(struct netconn *connfd)

{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 80016da:	af02      	add	r7, sp, #8
 80016dc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80016e0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80016e4:	6018      	str	r0, [r3, #0]
	unsigned char recvBuffer[MODBUS_SERVER_BUF_SIZE];
	const int RECEIVE_TIMEOUT_MS = 1; // 1 segundo
 80016e6:	2301      	movs	r3, #1
 80016e8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	netconn_set_recvtimeout(connfd, RECEIVE_TIMEOUT_MS);
 80016ec:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80016f0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80016f4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	61da      	str	r2, [r3, #28]
	do
	{
		// Receber dados do cliente com um tempo limite
		struct netbuf *inbuf;

		err_t err = netconn_recv(connfd, &inbuf);
 80016fc:	f107 0208 	add.w	r2, r7, #8
 8001700:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001704:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001708:	4611      	mov	r1, r2
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	f00f fb5c 	bl	8010dc8 <netconn_recv>
 8001710:	4603      	mov	r3, r0
 8001712:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213

		if (err == ERR_OK)
 8001716:	f997 3213 	ldrsb.w	r3, [r7, #531]	; 0x213
 800171a:	2b00      	cmp	r3, #0
 800171c:	d141      	bne.n	80017a2 <ModbusHandleConnection+0xce>
		{
			if (netconn_err(connfd) == ERR_OK)
 800171e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001722:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	f00f fcd7 	bl	80110da <netconn_err>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d13e      	bne.n	80017b0 <ModbusHandleConnection+0xdc>
			{
				/* Process received data */
				netbuf_copy(inbuf, recvBuffer, sizeof(recvBuffer));
 8001732:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001736:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6818      	ldr	r0, [r3, #0]
 800173e:	f107 010c 	add.w	r1, r7, #12
 8001742:	2300      	movs	r3, #0
 8001744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001748:	f013 f8a8 	bl	801489c <pbuf_copy_partial>
				uint16_t buffer_len = netbuf_len(inbuf);
 800174c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001750:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	891b      	ldrh	r3, [r3, #8]
 800175a:	f8a7 3210 	strh.w	r3, [r7, #528]	; 0x210
				uint16_t response_len = InterpreterMODBUS(recvBuffer, buffer_len);
 800175e:	f8b7 2210 	ldrh.w	r2, [r7, #528]	; 0x210
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f01e fddd 	bl	8020328 <InterpreterMODBUS>
 800176e:	4603      	mov	r3, r0
 8001770:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
				netconn_write(connfd, recvBuffer, response_len, NETCONN_COPY);
 8001774:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8001778:	f107 010c 	add.w	r1, r7, #12
 800177c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001780:	f5a3 7005 	sub.w	r0, r3, #532	; 0x214
 8001784:	2300      	movs	r3, #0
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2301      	movs	r3, #1
 800178a:	6800      	ldr	r0, [r0, #0]
 800178c:	f00f fb96 	bl	8010ebc <netconn_write_partly>
				netbuf_delete(inbuf);
 8001790:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001794:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f011 f8a2 	bl	80128e4 <netbuf_delete>
				continue;
 80017a0:	e00b      	b.n	80017ba <ModbusHandleConnection+0xe6>
			}
		}
		else if(err == ERR_TIMEOUT)
 80017a2:	f997 3213 	ldrsb.w	r3, [r7, #531]	; 0x213
 80017a6:	f113 0f03 	cmn.w	r3, #3
 80017aa:	d005      	beq.n	80017b8 <ModbusHandleConnection+0xe4>

		osDelay(1);

	} while (1);

	return 1;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e005      	b.n	80017bc <ModbusHandleConnection+0xe8>
		osDelay(1);
 80017b0:	2001      	movs	r0, #1
 80017b2:	f005 fcd5 	bl	8007160 <osDelay>
 80017b6:	e7a1      	b.n	80016fc <ModbusHandleConnection+0x28>
			continue;
 80017b8:	bf00      	nop
	{
 80017ba:	e79f      	b.n	80016fc <ModbusHandleConnection+0x28>
}
 80017bc:	4618      	mov	r0, r3
 80017be:	f507 7706 	add.w	r7, r7, #536	; 0x218
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <Modbus_activateTcpKeepAlive>:


void Modbus_activateTcpKeepAlive(struct netconn *connfd, int idleTime, int interval, int count) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	603b      	str	r3, [r7, #0]

    if (connfd == NULL || connfd->type != NETCONN_TCP || connfd->pcb.tcp == NULL) {
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d030      	beq.n	800183e <Modbus_activateTcpKeepAlive+0x76>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b10      	cmp	r3, #16
 80017e2:	d12c      	bne.n	800183e <Modbus_activateTcpKeepAlive+0x76>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d028      	beq.n	800183e <Modbus_activateTcpKeepAlive+0x76>
        return;
    }
    struct tcp_pcb *pcb = connfd->pcb.tcp;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	617b      	str	r3, [r7, #20]

    LOCK_TCPIP_CORE();
 80017f2:	4815      	ldr	r0, [pc, #84]	; (8001848 <Modbus_activateTcpKeepAlive+0x80>)
 80017f4:	f01e fbb0 	bl	801ff58 <sys_mutex_lock>
    ip_set_option(connfd->pcb.ip, SO_KEEPALIVE);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	7a5a      	ldrb	r2, [r3, #9]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f042 0208 	orr.w	r2, r2, #8
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	725a      	strb	r2, [r3, #9]
    pcb->keep_idle = idleTime * 1000;    // Tempo de ociosidade em milissegundos
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001810:	fb02 f303 	mul.w	r3, r2, r3
 8001814:	461a      	mov	r2, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->keep_intvl = interval * 1000;   // Intervalo entre as tentativas em milissegundos
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001822:	fb02 f303 	mul.w	r3, r2, r3
 8001826:	461a      	mov	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    pcb->keep_cnt = count;               // Número de tentativas
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    UNLOCK_TCPIP_CORE();
 8001836:	4804      	ldr	r0, [pc, #16]	; (8001848 <Modbus_activateTcpKeepAlive+0x80>)
 8001838:	f01e fb9d 	bl	801ff76 <sys_mutex_unlock>
 800183c:	e000      	b.n	8001840 <Modbus_activateTcpKeepAlive+0x78>
        return;
 800183e:	bf00      	nop
}
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	2000eba0 	.word	0x2000eba0

0800184c <ModbusTcpSeverTask>:

void ModbusTcpSeverTask(void const *argument)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN TcpSeverTask */
	struct netconn *conn, *newconn;
	uint8_t i = MODBUS_CLOSED;
 8001854:	2300      	movs	r3, #0
 8001856:	75fb      	strb	r3, [r7, #23]


	/* Create a new TCP connection handle. */
	conn = netconn_new(NETCONN_TCP);
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	2010      	movs	r0, #16
 800185e:	f00e ff71 	bl	8010744 <netconn_new_with_proto_and_callback>
 8001862:	6138      	str	r0, [r7, #16]

	/* Check if the connection handle was created successfully */
	if (conn == NULL)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d103      	bne.n	8001872 <ModbusTcpSeverTask+0x26>
	{
		/* Handle error */
		printf("Failed to create TCP connection handle\r\n");
 800186a:	4834      	ldr	r0, [pc, #208]	; (800193c <ModbusTcpSeverTask+0xf0>)
 800186c:	f01f ffba 	bl	80217e4 <puts>
		return;
 8001870:	e060      	b.n	8001934 <ModbusTcpSeverTask+0xe8>
	}

	/* Bind the connection to the specified port. */
	if (netconn_bind(conn, IP_ADDR_ANY, MODBUS_SERVER_TCP_PORT) != ERR_OK)
 8001872:	f245 52f0 	movw	r2, #22000	; 0x55f0
 8001876:	4932      	ldr	r1, [pc, #200]	; (8001940 <ModbusTcpSeverTask+0xf4>)
 8001878:	6938      	ldr	r0, [r7, #16]
 800187a:	f00f f81d 	bl	80108b8 <netconn_bind>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d008      	beq.n	8001896 <ModbusTcpSeverTask+0x4a>
	{
		/* Handle error */
		printf("Failed to bind to port %d\r\n", MODBUS_SERVER_TCP_PORT);
 8001884:	f245 51f0 	movw	r1, #22000	; 0x55f0
 8001888:	482e      	ldr	r0, [pc, #184]	; (8001944 <ModbusTcpSeverTask+0xf8>)
 800188a:	f01f ff45 	bl	8021718 <iprintf>
		netconn_delete(conn);
 800188e:	6938      	ldr	r0, [r7, #16]
 8001890:	f00e fff6 	bl	8010880 <netconn_delete>
		return;
 8001894:	e04e      	b.n	8001934 <ModbusTcpSeverTask+0xe8>
	}

	/* Put the connection into LISTEN state. */
	if (netconn_listen(conn) != ERR_OK)
 8001896:	21ff      	movs	r1, #255	; 0xff
 8001898:	6938      	ldr	r0, [r7, #16]
 800189a:	f00f f845 	bl	8010928 <netconn_listen_with_backlog>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d006      	beq.n	80018b2 <ModbusTcpSeverTask+0x66>
	{
		/* Handle error */
		printf("Failed to put the connection into LISTEN state \r\n");
 80018a4:	4828      	ldr	r0, [pc, #160]	; (8001948 <ModbusTcpSeverTask+0xfc>)
 80018a6:	f01f ff9d 	bl	80217e4 <puts>
		netconn_delete(conn);
 80018aa:	6938      	ldr	r0, [r7, #16]
 80018ac:	f00e ffe8 	bl	8010880 <netconn_delete>
		return;
 80018b0:	e040      	b.n	8001934 <ModbusTcpSeverTask+0xe8>
	}

	printf("TCP server listening on port %d \r\n", MODBUS_SERVER_TCP_PORT);
 80018b2:	f245 51f0 	movw	r1, #22000	; 0x55f0
 80018b6:	4825      	ldr	r0, [pc, #148]	; (800194c <ModbusTcpSeverTask+0x100>)
 80018b8:	f01f ff2e 	bl	8021718 <iprintf>

	 ModbusStatusInfo(MODBUS_CLOSED);
 80018bc:	2000      	movs	r0, #0
 80018be:	f7ff fed9 	bl	8001674 <ModbusStatusInfo>


	/* Infinite loop */
	for (;;)
	{
		if (i == MODBUS_CLOSED)
 80018c2:	7dfb      	ldrb	r3, [r7, #23]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d117      	bne.n	80018f8 <ModbusTcpSeverTask+0xac>
		{
			if (netconn_accept(conn, &newconn) == ERR_OK)
 80018c8:	f107 030c 	add.w	r3, r7, #12
 80018cc:	4619      	mov	r1, r3
 80018ce:	6938      	ldr	r0, [r7, #16]
 80018d0:	f00f f856 	bl	8010980 <netconn_accept>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d128      	bne.n	800192c <ModbusTcpSeverTask+0xe0>
			{
				if (newconn != NULL)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d025      	beq.n	800192c <ModbusTcpSeverTask+0xe0>
				{
					i = MODBUS_OPEN;
 80018e0:	2301      	movs	r3, #1
 80018e2:	75fb      	strb	r3, [r7, #23]

					 ModbusStatusInfo(MODBUS_OPEN);
 80018e4:	2001      	movs	r0, #1
 80018e6:	f7ff fec5 	bl	8001674 <ModbusStatusInfo>
					/* Set keepalive options if enabled */
					if (MODBUS_SERVER_KEEP_ALIVE)
					{
						Modbus_activateTcpKeepAlive(newconn, keepidle,keepintvl, keepcnt);
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	2305      	movs	r3, #5
 80018ee:	2205      	movs	r2, #5
 80018f0:	2105      	movs	r1, #5
 80018f2:	f7ff ff69 	bl	80017c8 <Modbus_activateTcpKeepAlive>
 80018f6:	e019      	b.n	800192c <ModbusTcpSeverTask+0xe0>
				}
			}
		}
		else
		{
			if (newconn != NULL && ModbusHandleConnection(newconn))
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d016      	beq.n	800192c <ModbusTcpSeverTask+0xe0>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fee7 	bl	80016d4 <ModbusHandleConnection>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00f      	beq.n	800192c <ModbusTcpSeverTask+0xe0>
			{
				i = MODBUS_CLOSED;
 800190c:	2300      	movs	r3, #0
 800190e:	75fb      	strb	r3, [r7, #23]
				netconn_close(newconn);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4618      	mov	r0, r3
 8001914:	f00f fbd4 	bl	80110c0 <netconn_close>
				netconn_delete(newconn);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4618      	mov	r0, r3
 800191c:	f00e ffb0 	bl	8010880 <netconn_delete>
				ModbusStatusInfo(MODBUS_CLOSED);
 8001920:	2000      	movs	r0, #0
 8001922:	f7ff fea7 	bl	8001674 <ModbusStatusInfo>
				printf("Connection closed \r\n");
 8001926:	480a      	ldr	r0, [pc, #40]	; (8001950 <ModbusTcpSeverTask+0x104>)
 8001928:	f01f ff5c 	bl	80217e4 <puts>
			}
		}

		/* Delay for a short period */
		osDelay(100);
 800192c:	2064      	movs	r0, #100	; 0x64
 800192e:	f005 fc17 	bl	8007160 <osDelay>
		if (i == MODBUS_CLOSED)
 8001932:	e7c6      	b.n	80018c2 <ModbusTcpSeverTask+0x76>
	}
}
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	08023138 	.word	0x08023138
 8001940:	08027400 	.word	0x08027400
 8001944:	08023160 	.word	0x08023160
 8001948:	0802317c 	.word	0x0802317c
 800194c:	080231b0 	.word	0x080231b0
 8001950:	080231d4 	.word	0x080231d4

08001954 <ModbusServerInit>:



void ModbusServerInit()
{
 8001954:	b5b0      	push	{r4, r5, r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
	/* definition and creation of tcpServerTask */
	LoadMapFromFile();
 800195a:	f01e fe3b 	bl	80205d4 <LoadMapFromFile>
	osThreadDef(tcpServerTask, ModbusTcpSeverTask, osPriorityBelowNormal, 0, MODBUS_SERVER_TASK_STACK_SIZE);
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <ModbusServerInit+0x34>)
 8001960:	1d3c      	adds	r4, r7, #4
 8001962:	461d      	mov	r5, r3
 8001964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001968:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800196c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	modbusTcpServerTaskHandle = osThreadCreate(osThread(tcpServerTask), NULL);
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f005 fba7 	bl	80070c8 <osThreadCreate>
 800197a:	4603      	mov	r3, r0
 800197c:	4a03      	ldr	r2, [pc, #12]	; (800198c <ModbusServerInit+0x38>)
 800197e:	6013      	str	r3, [r2, #0]
}
 8001980:	bf00      	nop
 8001982:	3720      	adds	r7, #32
 8001984:	46bd      	mov	sp, r7
 8001986:	bdb0      	pop	{r4, r5, r7, pc}
 8001988:	080231f8 	.word	0x080231f8
 800198c:	20000a98 	.word	0x20000a98

08001990 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001994:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <MX_SPI2_Init+0x64>)
 8001996:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <MX_SPI2_Init+0x68>)
 8001998:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <MX_SPI2_Init+0x64>)
 800199c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019a2:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <MX_SPI2_Init+0x64>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <MX_SPI2_Init+0x64>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <MX_SPI2_Init+0x64>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <MX_SPI2_Init+0x64>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <MX_SPI2_Init+0x64>)
 80019bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <MX_SPI2_Init+0x64>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <MX_SPI2_Init+0x64>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <MX_SPI2_Init+0x64>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <MX_SPI2_Init+0x64>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <MX_SPI2_Init+0x64>)
 80019dc:	220a      	movs	r2, #10
 80019de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <MX_SPI2_Init+0x64>)
 80019e2:	f003 fae1 	bl	8004fa8 <HAL_SPI_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80019ec:	f7ff fe3c 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000a9c 	.word	0x20000a9c
 80019f8:	40003800 	.word	0x40003800

080019fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	; 0x28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a28      	ldr	r2, [pc, #160]	; (8001abc <HAL_SPI_MspInit+0xc0>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d14a      	bne.n	8001ab4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	4b27      	ldr	r3, [pc, #156]	; (8001ac0 <HAL_SPI_MspInit+0xc4>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	4a26      	ldr	r2, [pc, #152]	; (8001ac0 <HAL_SPI_MspInit+0xc4>)
 8001a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2e:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <HAL_SPI_MspInit+0xc4>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <HAL_SPI_MspInit+0xc4>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a1f      	ldr	r2, [pc, #124]	; (8001ac0 <HAL_SPI_MspInit+0xc4>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <HAL_SPI_MspInit+0xc4>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <HAL_SPI_MspInit+0xc4>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a18      	ldr	r2, [pc, #96]	; (8001ac0 <HAL_SPI_MspInit+0xc4>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <HAL_SPI_MspInit+0xc4>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a72:	230c      	movs	r3, #12
 8001a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a82:	2305      	movs	r3, #5
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <HAL_SPI_MspInit+0xc8>)
 8001a8e:	f001 ff6b 	bl	8003968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aa4:	2305      	movs	r3, #5
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	4619      	mov	r1, r3
 8001aae:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <HAL_SPI_MspInit+0xcc>)
 8001ab0:	f001 ff5a 	bl	8003968 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	3728      	adds	r7, #40	; 0x28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40003800 	.word	0x40003800
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40020800 	.word	0x40020800
 8001ac8:	40020400 	.word	0x40020400

08001acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_MspInit+0x54>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	4a11      	ldr	r2, [pc, #68]	; (8001b20 <HAL_MspInit+0x54>)
 8001adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <HAL_MspInit+0x54>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_MspInit+0x54>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <HAL_MspInit+0x54>)
 8001af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afc:	6413      	str	r3, [r2, #64]	; 0x40
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_MspInit+0x54>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	210f      	movs	r1, #15
 8001b0e:	f06f 0001 	mvn.w	r0, #1
 8001b12:	f000 fca3 	bl	800245c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800

08001b24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08e      	sub	sp, #56	; 0x38
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	4b33      	ldr	r3, [pc, #204]	; (8001c08 <HAL_InitTick+0xe4>)
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	4a32      	ldr	r2, [pc, #200]	; (8001c08 <HAL_InitTick+0xe4>)
 8001b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b42:	6413      	str	r3, [r2, #64]	; 0x40
 8001b44:	4b30      	ldr	r3, [pc, #192]	; (8001c08 <HAL_InitTick+0xe4>)
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b50:	f107 0210 	add.w	r2, r7, #16
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 f9f2 	bl	8004f44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d103      	bne.n	8001b72 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b6a:	f003 f9c3 	bl	8004ef4 <HAL_RCC_GetPCLK1Freq>
 8001b6e:	6378      	str	r0, [r7, #52]	; 0x34
 8001b70:	e004      	b.n	8001b7c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b72:	f003 f9bf 	bl	8004ef4 <HAL_RCC_GetPCLK1Freq>
 8001b76:	4603      	mov	r3, r0
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b7e:	4a23      	ldr	r2, [pc, #140]	; (8001c0c <HAL_InitTick+0xe8>)
 8001b80:	fba2 2303 	umull	r2, r3, r2, r3
 8001b84:	0c9b      	lsrs	r3, r3, #18
 8001b86:	3b01      	subs	r3, #1
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001b8a:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <HAL_InitTick+0xec>)
 8001b8c:	4a21      	ldr	r2, [pc, #132]	; (8001c14 <HAL_InitTick+0xf0>)
 8001b8e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001b90:	4b1f      	ldr	r3, [pc, #124]	; (8001c10 <HAL_InitTick+0xec>)
 8001b92:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b96:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001b98:	4a1d      	ldr	r2, [pc, #116]	; (8001c10 <HAL_InitTick+0xec>)
 8001b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <HAL_InitTick+0xec>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <HAL_InitTick+0xec>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <HAL_InitTick+0xec>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001bb0:	4817      	ldr	r0, [pc, #92]	; (8001c10 <HAL_InitTick+0xec>)
 8001bb2:	f003 ffcf 	bl	8005b54 <HAL_TIM_Base_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001bbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d11b      	bne.n	8001bfc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001bc4:	4812      	ldr	r0, [pc, #72]	; (8001c10 <HAL_InitTick+0xec>)
 8001bc6:	f004 f81f 	bl	8005c08 <HAL_TIM_Base_Start_IT>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001bd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d111      	bne.n	8001bfc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001bd8:	202d      	movs	r0, #45	; 0x2d
 8001bda:	f000 fc5b 	bl	8002494 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b0f      	cmp	r3, #15
 8001be2:	d808      	bhi.n	8001bf6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001be4:	2200      	movs	r2, #0
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	202d      	movs	r0, #45	; 0x2d
 8001bea:	f000 fc37 	bl	800245c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bee:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <HAL_InitTick+0xf4>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	e002      	b.n	8001bfc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001bfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3738      	adds	r7, #56	; 0x38
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	431bde83 	.word	0x431bde83
 8001c10:	20000af4 	.word	0x20000af4
 8001c14:	40002000 	.word	0x40002000
 8001c18:	20000004 	.word	0x20000004

08001c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c20:	e7fe      	b.n	8001c20 <NMI_Handler+0x4>

08001c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c26:	e7fe      	b.n	8001c26 <HardFault_Handler+0x4>

08001c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <MemManage_Handler+0x4>

08001c2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c32:	e7fe      	b.n	8001c32 <BusFault_Handler+0x4>

08001c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c38:	e7fe      	b.n	8001c38 <UsageFault_Handler+0x4>

08001c3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001c4e:	f004 f84b 	bl	8005ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000af4 	.word	0x20000af4

08001c5c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <ETH_IRQHandler+0x10>)
 8001c62:	f000 ffab 	bl	8002bbc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200056a4 	.word	0x200056a4

08001c70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return 1;
 8001c74:	2301      	movs	r3, #1
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <_kill>:

int _kill(int pid, int sig)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <_kill+0x20>)
 8001c8c:	2216      	movs	r2, #22
 8001c8e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	20012ce4 	.word	0x20012ce4

08001ca4 <_exit>:

void _exit (int status)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ffe5 	bl	8001c80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cb6:	e7fe      	b.n	8001cb6 <_exit+0x12>

08001cb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	e00a      	b.n	8001ce0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cca:	f3af 8000 	nop.w
 8001cce:	4601      	mov	r1, r0
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	60ba      	str	r2, [r7, #8]
 8001cd6:	b2ca      	uxtb	r2, r1
 8001cd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	dbf0      	blt.n	8001cca <_read+0x12>
  }

  return len;
 8001ce8:	687b      	ldr	r3, [r7, #4]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	e009      	b.n	8001d18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	60ba      	str	r2, [r7, #8]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	3301      	adds	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	dbf1      	blt.n	8001d04 <_write+0x12>
  }
  return len;
 8001d20:	687b      	ldr	r3, [r7, #4]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <_close>:

int _close(int file)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d52:	605a      	str	r2, [r3, #4]
  return 0;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <_isatty>:

int _isatty(int file)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d6a:	2301      	movs	r3, #1
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d9c:	4a14      	ldr	r2, [pc, #80]	; (8001df0 <_sbrk+0x5c>)
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <_sbrk+0x60>)
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d102      	bne.n	8001db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <_sbrk+0x64>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <_sbrk+0x68>)
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d205      	bcs.n	8001dd0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001dc4:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <_sbrk+0x6c>)
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dce:	e009      	b.n	8001de4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <_sbrk+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <_sbrk+0x64>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	4a06      	ldr	r2, [pc, #24]	; (8001df8 <_sbrk+0x64>)
 8001de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de2:	68fb      	ldr	r3, [r7, #12]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	371c      	adds	r7, #28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	20020000 	.word	0x20020000
 8001df4:	00000400 	.word	0x00000400
 8001df8:	20000b3c 	.word	0x20000b3c
 8001dfc:	20012cf0 	.word	0x20012cf0
 8001e00:	20012ce4 	.word	0x20012ce4

08001e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <SystemInit+0x20>)
 8001e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0e:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <SystemInit+0x20>)
 8001e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <MX_USART1_UART_Init+0x4c>)
 8001e2e:	4a12      	ldr	r2, [pc, #72]	; (8001e78 <MX_USART1_UART_Init+0x50>)
 8001e30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <MX_USART1_UART_Init+0x4c>)
 8001e34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <MX_USART1_UART_Init+0x4c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <MX_USART1_UART_Init+0x4c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e46:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <MX_USART1_UART_Init+0x4c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <MX_USART1_UART_Init+0x4c>)
 8001e4e:	220c      	movs	r2, #12
 8001e50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e52:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <MX_USART1_UART_Init+0x4c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <MX_USART1_UART_Init+0x4c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e5e:	4805      	ldr	r0, [pc, #20]	; (8001e74 <MX_USART1_UART_Init+0x4c>)
 8001e60:	f004 f91a 	bl	8006098 <HAL_UART_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e6a:	f7ff fbfd 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000b40 	.word	0x20000b40
 8001e78:	40011000 	.word	0x40011000

08001e7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a19      	ldr	r2, [pc, #100]	; (8001f00 <HAL_UART_MspInit+0x84>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d12c      	bne.n	8001ef8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <HAL_UART_MspInit+0x88>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <HAL_UART_MspInit+0x88>)
 8001ea8:	f043 0310 	orr.w	r3, r3, #16
 8001eac:	6453      	str	r3, [r2, #68]	; 0x44
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HAL_UART_MspInit+0x88>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <HAL_UART_MspInit+0x88>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a10      	ldr	r2, [pc, #64]	; (8001f04 <HAL_UART_MspInit+0x88>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <HAL_UART_MspInit+0x88>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ed6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ee8:	2307      	movs	r3, #7
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4805      	ldr	r0, [pc, #20]	; (8001f08 <HAL_UART_MspInit+0x8c>)
 8001ef4:	f001 fd38 	bl	8003968 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ef8:	bf00      	nop
 8001efa:	3728      	adds	r7, #40	; 0x28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40011000 	.word	0x40011000
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020000 	.word	0x40020000

08001f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f10:	f7ff ff78 	bl	8001e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f14:	480c      	ldr	r0, [pc, #48]	; (8001f48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f16:	490d      	ldr	r1, [pc, #52]	; (8001f4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f18:	4a0d      	ldr	r2, [pc, #52]	; (8001f50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f1c:	e002      	b.n	8001f24 <LoopCopyDataInit>

08001f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f22:	3304      	adds	r3, #4

08001f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f28:	d3f9      	bcc.n	8001f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f2c:	4c0a      	ldr	r4, [pc, #40]	; (8001f58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f30:	e001      	b.n	8001f36 <LoopFillZerobss>

08001f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f34:	3204      	adds	r2, #4

08001f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f38:	d3fb      	bcc.n	8001f32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f3a:	f01f fee5 	bl	8021d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f3e:	f7ff fac9 	bl	80014d4 <main>
  bx  lr    
 8001f42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f4c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001f50:	08027b00 	.word	0x08027b00
  ldr r2, =_sbss
 8001f54:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001f58:	20012cec 	.word	0x20012cec

08001f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f5c:	e7fe      	b.n	8001f5c <ADC_IRQHandler>

08001f5e <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00b      	beq.n	8001f86 <DP83848_RegisterBusIO+0x28>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <DP83848_RegisterBusIO+0x28>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <DP83848_RegisterBusIO+0x28>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d102      	bne.n	8001f8c <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f8a:	e014      	b.n	8001fb6 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	691a      	ldr	r2, [r3, #16]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d17c      	bne.n	80020dc <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	e01c      	b.n	8002036 <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	f107 0208 	add.w	r2, r7, #8
 8002004:	2119      	movs	r1, #25
 8002006:	6978      	ldr	r0, [r7, #20]
 8002008:	4798      	blx	r3
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	da03      	bge.n	8002018 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8002010:	f06f 0304 	mvn.w	r3, #4
 8002014:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8002016:	e00b      	b.n	8002030 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	429a      	cmp	r2, r3
 8002022:	d105      	bne.n	8002030 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
         break;
 800202e:	e005      	b.n	800203c <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	3301      	adds	r3, #1
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b1f      	cmp	r3, #31
 800203a:	d9df      	bls.n	8001ffc <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b1f      	cmp	r3, #31
 8002042:	d902      	bls.n	800204a <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8002044:	f06f 0302 	mvn.w	r3, #2
 8002048:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d145      	bne.n	80020dc <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6810      	ldr	r0, [r2, #0]
 8002058:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800205c:	2100      	movs	r1, #0
 800205e:	4798      	blx	r3
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	db37      	blt.n	80020d6 <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6810      	ldr	r0, [r2, #0]
 800206e:	f107 0208 	add.w	r2, r7, #8
 8002072:	2100      	movs	r1, #0
 8002074:	4798      	blx	r3
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	db28      	blt.n	80020ce <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	4798      	blx	r3
 8002082:	4603      	mov	r3, r0
 8002084:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8002086:	e01c      	b.n	80020c2 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	4798      	blx	r3
 800208e:	4603      	mov	r3, r0
 8002090:	461a      	mov	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800209a:	d80e      	bhi.n	80020ba <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6810      	ldr	r0, [r2, #0]
 80020a4:	f107 0208 	add.w	r2, r7, #8
 80020a8:	2100      	movs	r1, #0
 80020aa:	4798      	blx	r3
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	da07      	bge.n	80020c2 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 80020b2:	f06f 0304 	mvn.w	r3, #4
 80020b6:	613b      	str	r3, [r7, #16]
                 break;
 80020b8:	e010      	b.n	80020dc <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 80020ba:	f06f 0301 	mvn.w	r3, #1
 80020be:	613b      	str	r3, [r7, #16]
               break;
 80020c0:	e00c      	b.n	80020dc <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1dd      	bne.n	8002088 <DP83848_Init+0xc6>
 80020cc:	e006      	b.n	80020dc <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 80020ce:	f06f 0304 	mvn.w	r3, #4
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	e002      	b.n	80020dc <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 80020d6:	f06f 0303 	mvn.w	r3, #3
 80020da:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d112      	bne.n	8002108 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	4798      	blx	r3
 80020e8:	4603      	mov	r3, r0
 80020ea:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 80020ec:	bf00      	nop
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	4798      	blx	r3
 80020f4:	4603      	mov	r3, r0
 80020f6:	461a      	mov	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002100:	d9f5      	bls.n	80020ee <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	605a      	str	r2, [r3, #4]
   }

   return status;
 8002108:	693b      	ldr	r3, [r7, #16]
 }
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b084      	sub	sp, #16
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6810      	ldr	r0, [r2, #0]
 8002126:	f107 020c 	add.w	r2, r7, #12
 800212a:	2101      	movs	r1, #1
 800212c:	4798      	blx	r3
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	da02      	bge.n	800213a <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8002134:	f06f 0304 	mvn.w	r3, #4
 8002138:	e06e      	b.n	8002218 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6810      	ldr	r0, [r2, #0]
 8002142:	f107 020c 	add.w	r2, r7, #12
 8002146:	2101      	movs	r1, #1
 8002148:	4798      	blx	r3
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	da02      	bge.n	8002156 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8002150:	f06f 0304 	mvn.w	r3, #4
 8002154:	e060      	b.n	8002218 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8002160:	2301      	movs	r3, #1
 8002162:	e059      	b.n	8002218 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6810      	ldr	r0, [r2, #0]
 800216c:	f107 020c 	add.w	r2, r7, #12
 8002170:	2100      	movs	r1, #0
 8002172:	4798      	blx	r3
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	da02      	bge.n	8002180 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 800217a:	f06f 0304 	mvn.w	r3, #4
 800217e:	e04b      	b.n	8002218 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d11b      	bne.n	80021c2 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d006      	beq.n	80021a2 <DP83848_GetLinkState+0x90>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 800219e:	2302      	movs	r3, #2
 80021a0:	e03a      	b.n	8002218 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e033      	b.n	8002218 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80021ba:	2304      	movs	r3, #4
 80021bc:	e02c      	b.n	8002218 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80021be:	2305      	movs	r3, #5
 80021c0:	e02a      	b.n	8002218 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6810      	ldr	r0, [r2, #0]
 80021ca:	f107 020c 	add.w	r2, r7, #12
 80021ce:	2110      	movs	r1, #16
 80021d0:	4798      	blx	r3
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	da02      	bge.n	80021de <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 80021d8:	f06f 0304 	mvn.w	r3, #4
 80021dc:	e01c      	b.n	8002218 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 80021e8:	2306      	movs	r3, #6
 80021ea:	e015      	b.n	8002218 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 0306 	and.w	r3, r3, #6
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d101      	bne.n	80021fa <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80021f6:	2302      	movs	r3, #2
 80021f8:	e00e      	b.n	8002218 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f003 0306 	and.w	r3, r3, #6
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8002204:	2303      	movs	r3, #3
 8002206:	e007      	b.n	8002218 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0306 	and.w	r3, r3, #6
 800220e:	2b06      	cmp	r3, #6
 8002210:	d101      	bne.n	8002216 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8002212:	2304      	movs	r3, #4
 8002214:	e000      	b.n	8002218 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8002216:	2305      	movs	r3, #5
    }
  }
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002224:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <HAL_Init+0x40>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0d      	ldr	r2, [pc, #52]	; (8002260 <HAL_Init+0x40>)
 800222a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800222e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_Init+0x40>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <HAL_Init+0x40>)
 8002236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800223a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <HAL_Init+0x40>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a07      	ldr	r2, [pc, #28]	; (8002260 <HAL_Init+0x40>)
 8002242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002246:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002248:	2003      	movs	r0, #3
 800224a:	f000 f8fc 	bl	8002446 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800224e:	200f      	movs	r0, #15
 8002250:	f7ff fc68 	bl	8001b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002254:	f7ff fc3a 	bl	8001acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40023c00 	.word	0x40023c00

08002264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_IncTick+0x20>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_IncTick+0x24>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4413      	add	r3, r2
 8002274:	4a04      	ldr	r2, [pc, #16]	; (8002288 <HAL_IncTick+0x24>)
 8002276:	6013      	str	r3, [r2, #0]
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000008 	.word	0x20000008
 8002288:	20000b88 	.word	0x20000b88

0800228c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return uwTick;
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <HAL_GetTick+0x14>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000b88 	.word	0x20000b88

080022a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022ac:	f7ff ffee 	bl	800228c <HAL_GetTick>
 80022b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022bc:	d005      	beq.n	80022ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022be:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <HAL_Delay+0x44>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4413      	add	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022ca:	bf00      	nop
 80022cc:	f7ff ffde 	bl	800228c <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d8f7      	bhi.n	80022cc <HAL_Delay+0x28>
  {
  }
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000008 	.word	0x20000008

080022ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <__NVIC_SetPriorityGrouping+0x44>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002308:	4013      	ands	r3, r2
 800230a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800231c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800231e:	4a04      	ldr	r2, [pc, #16]	; (8002330 <__NVIC_SetPriorityGrouping+0x44>)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	60d3      	str	r3, [r2, #12]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002338:	4b04      	ldr	r3, [pc, #16]	; (800234c <__NVIC_GetPriorityGrouping+0x18>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	0a1b      	lsrs	r3, r3, #8
 800233e:	f003 0307 	and.w	r3, r3, #7
}
 8002342:	4618      	mov	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	2b00      	cmp	r3, #0
 8002360:	db0b      	blt.n	800237a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	f003 021f 	and.w	r2, r3, #31
 8002368:	4907      	ldr	r1, [pc, #28]	; (8002388 <__NVIC_EnableIRQ+0x38>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	2001      	movs	r0, #1
 8002372:	fa00 f202 	lsl.w	r2, r0, r2
 8002376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000e100 	.word	0xe000e100

0800238c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	6039      	str	r1, [r7, #0]
 8002396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	2b00      	cmp	r3, #0
 800239e:	db0a      	blt.n	80023b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	490c      	ldr	r1, [pc, #48]	; (80023d8 <__NVIC_SetPriority+0x4c>)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	0112      	lsls	r2, r2, #4
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	440b      	add	r3, r1
 80023b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b4:	e00a      	b.n	80023cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4908      	ldr	r1, [pc, #32]	; (80023dc <__NVIC_SetPriority+0x50>)
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	3b04      	subs	r3, #4
 80023c4:	0112      	lsls	r2, r2, #4
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	440b      	add	r3, r1
 80023ca:	761a      	strb	r2, [r3, #24]
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000e100 	.word	0xe000e100
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	; 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f1c3 0307 	rsb	r3, r3, #7
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	bf28      	it	cs
 80023fe:	2304      	movcs	r3, #4
 8002400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3304      	adds	r3, #4
 8002406:	2b06      	cmp	r3, #6
 8002408:	d902      	bls.n	8002410 <NVIC_EncodePriority+0x30>
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3b03      	subs	r3, #3
 800240e:	e000      	b.n	8002412 <NVIC_EncodePriority+0x32>
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43da      	mvns	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	401a      	ands	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002428:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	fa01 f303 	lsl.w	r3, r1, r3
 8002432:	43d9      	mvns	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	4313      	orrs	r3, r2
         );
}
 800243a:	4618      	mov	r0, r3
 800243c:	3724      	adds	r7, #36	; 0x24
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ff4c 	bl	80022ec <__NVIC_SetPriorityGrouping>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800246e:	f7ff ff61 	bl	8002334 <__NVIC_GetPriorityGrouping>
 8002472:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	6978      	ldr	r0, [r7, #20]
 800247a:	f7ff ffb1 	bl	80023e0 <NVIC_EncodePriority>
 800247e:	4602      	mov	r2, r0
 8002480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002484:	4611      	mov	r1, r2
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff ff80 	bl	800238c <__NVIC_SetPriority>
}
 800248c:	bf00      	nop
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff ff54 	bl	8002350 <__NVIC_EnableIRQ>
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e06c      	b.n	800259c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d106      	bne.n	80024da <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2223      	movs	r2, #35	; 0x23
 80024d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f004 fbb1 	bl	8006c3c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	4b31      	ldr	r3, [pc, #196]	; (80025a4 <HAL_ETH_Init+0xf4>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	4a30      	ldr	r2, [pc, #192]	; (80025a4 <HAL_ETH_Init+0xf4>)
 80024e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ea:	4b2e      	ldr	r3, [pc, #184]	; (80025a4 <HAL_ETH_Init+0xf4>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80024f6:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <HAL_ETH_Init+0xf8>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	4a2b      	ldr	r2, [pc, #172]	; (80025a8 <HAL_ETH_Init+0xf8>)
 80024fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002500:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002502:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <HAL_ETH_Init+0xf8>)
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	4927      	ldr	r1, [pc, #156]	; (80025a8 <HAL_ETH_Init+0xf8>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002510:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <HAL_ETH_Init+0xf8>)
 8002512:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6812      	ldr	r2, [r2, #0]
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800252a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800252c:	f7ff feae 	bl	800228c <HAL_GetTick>
 8002530:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002532:	e011      	b.n	8002558 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002534:	f7ff feaa 	bl	800228c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002542:	d909      	bls.n	8002558 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2204      	movs	r2, #4
 8002548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	22e0      	movs	r2, #224	; 0xe0
 8002550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e021      	b.n	800259c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1e4      	bne.n	8002534 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 ff56 	bl	800341c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 fffd 	bl	8003570 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f001 f853 	bl	8003622 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	461a      	mov	r2, r3
 8002582:	2100      	movs	r1, #0
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 ffbb 	bl	8003500 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2210      	movs	r2, #16
 8002596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40013800 	.word	0x40013800

080025ac <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ba:	2b10      	cmp	r3, #16
 80025bc:	d17f      	bne.n	80026be <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2223      	movs	r2, #35	; 0x23
 80025c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80025da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025f0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8002604:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2204      	movs	r2, #4
 800260c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f9f8 	bl	8002a04 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0208 	orr.w	r2, r2, #8
 8002622:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800262c:	2001      	movs	r0, #1
 800262e:	f7ff fe39 	bl	80022a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f042 0204 	orr.w	r2, r2, #4
 8002648:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002652:	2001      	movs	r0, #1
 8002654:	f7ff fe26 	bl	80022a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 fd7c 	bl	800315e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002678:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800267c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	f043 0302 	orr.w	r3, r3, #2
 8002690:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002694:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 80026a8:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 80026ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026b0:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2223      	movs	r2, #35	; 0x23
 80026b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e000      	b.n	80026c0 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
  }
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026d6:	2b23      	cmp	r3, #35	; 0x23
 80026d8:	d170      	bne.n	80027bc <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2223      	movs	r2, #35	; 0x23
 80026de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 80026f4:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 80026f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026fc:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002710:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002714:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	f023 0302 	bic.w	r3, r3, #2
 8002728:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800272c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0204 	bic.w	r2, r2, #4
 800273c:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002746:	2001      	movs	r0, #1
 8002748:	f7ff fdac 	bl	80022a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fd02 	bl	800315e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0208 	bic.w	r2, r2, #8
 8002768:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002772:	2001      	movs	r0, #1
 8002774:	f7ff fd96 	bl	80022a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	e00e      	b.n	80027a4 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	3212      	adds	r2, #18
 800278c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002790:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	3301      	adds	r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	2b03      	cmp	r3, #3
 80027a8:	d9ed      	bls.n	8002786 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2210      	movs	r2, #16
 80027b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	e000      	b.n	80027be <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
  }
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027dc:	f043 0201 	orr.w	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e045      	b.n	8002876 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027f0:	2b23      	cmp	r3, #35	; 0x23
 80027f2:	d13f      	bne.n	8002874 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80027fc:	2201      	movs	r2, #1
 80027fe:	6839      	ldr	r1, [r7, #0]
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 ff7b 	bl	80036fc <ETH_Prepare_Tx_Descriptors>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d009      	beq.n	8002820 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002812:	f043 0202 	orr.w	r2, r3, #2
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e02a      	b.n	8002876 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8002820:	f3bf 8f4f 	dsb	sy
}
 8002824:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	629a      	str	r2, [r3, #40]	; 0x28
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	2b03      	cmp	r3, #3
 8002836:	d904      	bls.n	8002842 <HAL_ETH_Transmit_IT+0x7c>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	1f1a      	subs	r2, r3, #4
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00d      	beq.n	8002870 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800285c:	461a      	mov	r2, r3
 800285e:	2304      	movs	r3, #4
 8002860:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800286a:	461a      	mov	r2, r3
 800286c:	2300      	movs	r3, #0
 800286e:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	e000      	b.n	8002876 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
  }
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b088      	sub	sp, #32
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d109      	bne.n	80028aa <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289c:	f043 0201 	orr.w	r2, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e0a8      	b.n	80029fc <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028b0:	2b23      	cmp	r3, #35	; 0x23
 80028b2:	d001      	beq.n	80028b8 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0a1      	b.n	80029fc <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028bc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	3212      	adds	r2, #18
 80028c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ce:	f1c3 0304 	rsb	r3, r3, #4
 80028d2:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80028d4:	e06a      	b.n	80029ac <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d007      	beq.n	80028f2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	69da      	ldr	r2, [r3, #28]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d103      	bne.n	8002906 <HAL_ETH_ReadData+0x88>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d040      	beq.n	8002988 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800290e:	2b00      	cmp	r3, #0
 8002910:	d005      	beq.n	800291e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00c      	beq.n	800294a <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	0c1b      	lsrs	r3, r3, #16
 8002936:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800293a:	3b04      	subs	r3, #4
 800293c:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002946:	2301      	movs	r3, #1
 8002948:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002962:	461a      	mov	r2, r3
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	b29b      	uxth	r3, r3
 8002968:	f004 fb22 	bl	8006fb0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	441a      	add	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	2200      	movs	r2, #0
 8002986:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	3301      	adds	r3, #1
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	2b03      	cmp	r3, #3
 8002992:	d902      	bls.n	800299a <HAL_ETH_ReadData+0x11c>
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	3b04      	subs	r3, #4
 8002998:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69fa      	ldr	r2, [r7, #28]
 800299e:	3212      	adds	r2, #18
 80029a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a4:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	3301      	adds	r3, #1
 80029aa:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	db06      	blt.n	80029c2 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d202      	bcs.n	80029c2 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d089      	beq.n	80028d6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	441a      	add	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f814 	bl	8002a04 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69fa      	ldr	r2, [r7, #28]
 80029e0:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d108      	bne.n	80029fa <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	e000      	b.n	80029fc <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3720      	adds	r7, #32
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002a10:	2301      	movs	r3, #1
 8002a12:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a18:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69fa      	ldr	r2, [r7, #28]
 8002a1e:	3212      	adds	r2, #18
 8002a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a24:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a2a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002a2c:	e03d      	b.n	8002aaa <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d112      	bne.n	8002a5c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002a36:	f107 0308 	add.w	r3, r7, #8
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f004 fa88 	bl	8006f50 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	74fb      	strb	r3, [r7, #19]
 8002a4a:	e007      	b.n	8002a5c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	461a      	mov	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002a5c:	7cfb      	ldrb	r3, [r7, #19]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d023      	beq.n	8002aaa <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d103      	bne.n	8002a72 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	4a24      	ldr	r2, [pc, #144]	; (8002b00 <ETH_UpdateDescriptor+0xfc>)
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	e003      	b.n	8002a7a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002a78:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	61fb      	str	r3, [r7, #28]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d902      	bls.n	8002a98 <ETH_UpdateDescriptor+0x94>
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	3b04      	subs	r3, #4
 8002a96:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	3212      	adds	r2, #18
 8002a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa2:	617b      	str	r3, [r7, #20]
      desccount--;
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <ETH_UpdateDescriptor+0xb2>
 8002ab0:	7cfb      	ldrb	r3, [r7, #19]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1bb      	bne.n	8002a2e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d01a      	beq.n	8002af6 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002aca:	f3bf 8f5f 	dmb	sy
}
 8002ace:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6919      	ldr	r1, [r3, #16]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	18ca      	adds	r2, r1, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ae8:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69fa      	ldr	r2, [r7, #28]
 8002aee:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002af6:	bf00      	nop
 8002af8:	3720      	adds	r7, #32
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	80004600 	.word	0x80004600

08002b04 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3318      	adds	r3, #24
 8002b10:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b16:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002b22:	e03f      	b.n	8002ba4 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	3304      	adds	r3, #4
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	3301      	adds	r3, #1
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002b4c:	7bbb      	ldrb	r3, [r7, #14]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d028      	beq.n	8002ba4 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68d9      	ldr	r1, [r3, #12]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	440b      	add	r3, r1
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	db1b      	blt.n	8002ba0 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f004 fa5b 	bl	8007030 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	3304      	adds	r3, #4
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	2200      	movs	r2, #0
 8002b86:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b9e:	e001      	b.n	8002ba4 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <HAL_ETH_ReleaseTxPacket+0xac>
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1b9      	bne.n	8002b24 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd2:	2b40      	cmp	r3, #64	; 0x40
 8002bd4:	d112      	bne.n	8002bfc <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be4:	2b40      	cmp	r3, #64	; 0x40
 8002be6:	d109      	bne.n	8002bfc <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4b50      	ldr	r3, [pc, #320]	; (8002d34 <HAL_ETH_IRQHandler+0x178>)
 8002bf4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f003 fd68 	bl	80066cc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d113      	bne.n	8002c36 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d10a      	bne.n	8002c36 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c28:	461a      	mov	r2, r3
 8002c2a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002c2e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f003 fd5b 	bl	80066ec <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c48:	d14c      	bne.n	8002ce4 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c5c:	d142      	bne.n	8002ce4 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c64:	f043 0208 	orr.w	r2, r3, #8
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c80:	d11a      	bne.n	8002cb8 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	4b2a      	ldr	r3, [pc, #168]	; (8002d38 <HAL_ETH_IRQHandler+0x17c>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002ca8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cac:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	22e0      	movs	r2, #224	; 0xe0
 8002cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002cb6:	e012      	b.n	8002cde <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	f248 6380 	movw	r3, #34432	; 0x8680
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f248 6380 	movw	r3, #34432	; 0x8680
 8002cdc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f003 fd14 	bl	800670c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d10e      	bne.n	8002d10 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f81c 	bl	8002d40 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002d10:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <HAL_ETH_IRQHandler+0x180>)
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d006      	beq.n	8002d2a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002d1c:	4b07      	ldr	r3, [pc, #28]	; (8002d3c <HAL_ETH_IRQHandler+0x180>)
 8002d1e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d22:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f815 	bl	8002d54 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	00010040 	.word	0x00010040
 8002d38:	007e2000 	.word	0x007e2000
 8002d3c:	40013c00 	.word	0x40013c00

08002d40 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f003 031c 	and.w	r3, r3, #28
 8002d84:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	02db      	lsls	r3, r3, #11
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	019b      	lsls	r3, r3, #6
 8002d96:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f023 0302 	bic.w	r3, r3, #2
 8002da6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002db8:	f7ff fa68 	bl	800228c <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002dbe:	e00d      	b.n	8002ddc <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002dc0:	f7ff fa64 	bl	800228c <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dce:	d301      	bcc.n	8002dd4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e010      	b.n	8002df6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1ec      	bne.n	8002dc0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b086      	sub	sp, #24
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
 8002e0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f003 031c 	and.w	r3, r3, #28
 8002e1a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	02db      	lsls	r3, r3, #11
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	019b      	lsls	r3, r3, #6
 8002e2c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f043 0302 	orr.w	r3, r3, #2
 8002e3c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e58:	f7ff fa18 	bl	800228c <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e5e:	e00d      	b.n	8002e7c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002e60:	f7ff fa14 	bl	800228c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6e:	d301      	bcc.n	8002e74 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e009      	b.n	8002e88 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1ec      	bne.n	8002e60 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0d9      	b.n	8003058 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	bf14      	ite	ne
 8002eb2:	2301      	movne	r3, #1
 8002eb4:	2300      	moveq	r3, #0
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bf14      	ite	ne
 8002ef8:	2301      	movne	r3, #1
 8002efa:	2300      	moveq	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	bf0c      	ite	eq
 8002f12:	2301      	moveq	r3, #1
 8002f14:	2300      	movne	r3, #0
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	bf14      	ite	ne
 8002f2c:	2301      	movne	r3, #1
 8002f2e:	2300      	moveq	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	461a      	mov	r2, r3
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bf0c      	ite	eq
 8002f62:	2301      	moveq	r3, #1
 8002f64:	2300      	movne	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2301      	moveq	r3, #1
 8002f7e:	2300      	movne	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	bf14      	ite	ne
 8002f96:	2301      	movne	r3, #1
 8002f98:	2300      	moveq	r3, #0
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bf14      	ite	ne
 8002fbe:	2301      	movne	r3, #1
 8002fc0:	2300      	moveq	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf14      	ite	ne
 8002fd8:	2301      	movne	r3, #1
 8002fda:	2300      	moveq	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	461a      	mov	r2, r3
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	0c1b      	lsrs	r3, r3, #16
 8003018:	b29a      	uxth	r2, r3
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf14      	ite	ne
 800302c:	2301      	movne	r3, #1
 800302e:	2300      	moveq	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	461a      	mov	r2, r3
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003044:	2b00      	cmp	r3, #0
 8003046:	bf14      	ite	ne
 8003048:	2301      	movne	r3, #1
 800304a:	2300      	moveq	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e00b      	b.n	8003090 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800307e:	2b10      	cmp	r3, #16
 8003080:	d105      	bne.n	800308e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003082:	6839      	ldr	r1, [r7, #0]
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f88f 	bl	80031a8 <ETH_SetMACConfig>

    return HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	e000      	b.n	8003090 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
  }
}
 8003090:	4618      	mov	r0, r3
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 031c 	bic.w	r3, r3, #28
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80030b0:	f001 ff14 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 80030b4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	4a1d      	ldr	r2, [pc, #116]	; (8003130 <HAL_ETH_SetMDIOClockRange+0x98>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d908      	bls.n	80030d0 <HAL_ETH_SetMDIOClockRange+0x38>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	4a1c      	ldr	r2, [pc, #112]	; (8003134 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d804      	bhi.n	80030d0 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f043 0308 	orr.w	r3, r3, #8
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	e027      	b.n	8003120 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4a18      	ldr	r2, [pc, #96]	; (8003134 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d908      	bls.n	80030ea <HAL_ETH_SetMDIOClockRange+0x52>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4a17      	ldr	r2, [pc, #92]	; (8003138 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d204      	bcs.n	80030ea <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f043 030c 	orr.w	r3, r3, #12
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	e01a      	b.n	8003120 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	4a12      	ldr	r2, [pc, #72]	; (8003138 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d303      	bcc.n	80030fa <HAL_ETH_SetMDIOClockRange+0x62>
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	4a11      	ldr	r2, [pc, #68]	; (800313c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d911      	bls.n	800311e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	4a0f      	ldr	r2, [pc, #60]	; (800313c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d908      	bls.n	8003114 <HAL_ETH_SetMDIOClockRange+0x7c>
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	4a0e      	ldr	r2, [pc, #56]	; (8003140 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d804      	bhi.n	8003114 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f043 0304 	orr.w	r3, r3, #4
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	e005      	b.n	8003120 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f043 0310 	orr.w	r3, r3, #16
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	e000      	b.n	8003120 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800311e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	611a      	str	r2, [r3, #16]
}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	01312cff 	.word	0x01312cff
 8003134:	02160ebf 	.word	0x02160ebf
 8003138:	03938700 	.word	0x03938700
 800313c:	05f5e0ff 	.word	0x05f5e0ff
 8003140:	08f0d17f 	.word	0x08f0d17f

08003144 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8003152:	4618      	mov	r0, r3
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800317c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003180:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800318e:	2001      	movs	r0, #1
 8003190:	f7ff f888 	bl	80022a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800319e:	6193      	str	r3, [r2, #24]
}
 80031a0:	bf00      	nop
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4b51      	ldr	r3, [pc, #324]	; (8003304 <ETH_SetMACConfig+0x15c>)
 80031be:	4013      	ands	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	7c1b      	ldrb	r3, [r3, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d102      	bne.n	80031d0 <ETH_SetMACConfig+0x28>
 80031ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80031ce:	e000      	b.n	80031d2 <ETH_SetMACConfig+0x2a>
 80031d0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	7c5b      	ldrb	r3, [r3, #17]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d102      	bne.n	80031e0 <ETH_SetMACConfig+0x38>
 80031da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031de:	e000      	b.n	80031e2 <ETH_SetMACConfig+0x3a>
 80031e0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80031e2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80031e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	7fdb      	ldrb	r3, [r3, #31]
 80031ee:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80031f0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80031f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	7f92      	ldrb	r2, [r2, #30]
 80031fc:	2a00      	cmp	r2, #0
 80031fe:	d102      	bne.n	8003206 <ETH_SetMACConfig+0x5e>
 8003200:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003204:	e000      	b.n	8003208 <ETH_SetMACConfig+0x60>
 8003206:	2200      	movs	r2, #0
                        macconf->Speed |
 8003208:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	7f1b      	ldrb	r3, [r3, #28]
 800320e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003210:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003216:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	791b      	ldrb	r3, [r3, #4]
 800321c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800321e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003226:	2a00      	cmp	r2, #0
 8003228:	d102      	bne.n	8003230 <ETH_SetMACConfig+0x88>
 800322a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800322e:	e000      	b.n	8003232 <ETH_SetMACConfig+0x8a>
 8003230:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003232:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	7bdb      	ldrb	r3, [r3, #15]
 8003238:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800323a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003240:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003248:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800324a:	4313      	orrs	r3, r2
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003262:	2001      	movs	r0, #1
 8003264:	f7ff f81e 	bl	80022a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800327e:	4013      	ands	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003286:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800328e:	2a00      	cmp	r2, #0
 8003290:	d101      	bne.n	8003296 <ETH_SetMACConfig+0xee>
 8003292:	2280      	movs	r2, #128	; 0x80
 8003294:	e000      	b.n	8003298 <ETH_SetMACConfig+0xf0>
 8003296:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003298:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800329e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80032a6:	2a01      	cmp	r2, #1
 80032a8:	d101      	bne.n	80032ae <ETH_SetMACConfig+0x106>
 80032aa:	2208      	movs	r2, #8
 80032ac:	e000      	b.n	80032b0 <ETH_SetMACConfig+0x108>
 80032ae:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80032b0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80032b8:	2a01      	cmp	r2, #1
 80032ba:	d101      	bne.n	80032c0 <ETH_SetMACConfig+0x118>
 80032bc:	2204      	movs	r2, #4
 80032be:	e000      	b.n	80032c2 <ETH_SetMACConfig+0x11a>
 80032c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80032c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80032ca:	2a01      	cmp	r2, #1
 80032cc:	d101      	bne.n	80032d2 <ETH_SetMACConfig+0x12a>
 80032ce:	2202      	movs	r2, #2
 80032d0:	e000      	b.n	80032d4 <ETH_SetMACConfig+0x12c>
 80032d2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80032d4:	4313      	orrs	r3, r2
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032ec:	2001      	movs	r0, #1
 80032ee:	f7fe ffd9 	bl	80022a4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	619a      	str	r2, [r3, #24]
}
 80032fa:	bf00      	nop
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	ff20810f 	.word	0xff20810f

08003308 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4b3d      	ldr	r3, [pc, #244]	; (8003418 <ETH_SetDMAConfig+0x110>)
 8003322:	4013      	ands	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	7b1b      	ldrb	r3, [r3, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d102      	bne.n	8003334 <ETH_SetDMAConfig+0x2c>
 800332e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003332:	e000      	b.n	8003336 <ETH_SetDMAConfig+0x2e>
 8003334:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	7b5b      	ldrb	r3, [r3, #13]
 800333a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800333c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	7f52      	ldrb	r2, [r2, #29]
 8003342:	2a00      	cmp	r2, #0
 8003344:	d102      	bne.n	800334c <ETH_SetDMAConfig+0x44>
 8003346:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800334a:	e000      	b.n	800334e <ETH_SetDMAConfig+0x46>
 800334c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800334e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	7b9b      	ldrb	r3, [r3, #14]
 8003354:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003356:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800335c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	7f1b      	ldrb	r3, [r3, #28]
 8003362:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003364:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	7f9b      	ldrb	r3, [r3, #30]
 800336a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800336c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003372:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800337a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800337c:	4313      	orrs	r3, r2
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800338c:	461a      	mov	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800339e:	2001      	movs	r0, #1
 80033a0:	f7fe ff80 	bl	80022a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ac:	461a      	mov	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	791b      	ldrb	r3, [r3, #4]
 80033b6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80033bc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80033c2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80033c8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033d0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80033d2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80033da:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80033e0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6812      	ldr	r2, [r2, #0]
 80033e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033ee:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80033fc:	2001      	movs	r0, #1
 80033fe:	f7fe ff51 	bl	80022a4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800340a:	461a      	mov	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6013      	str	r3, [r2, #0]
}
 8003410:	bf00      	nop
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	f8de3f23 	.word	0xf8de3f23

0800341c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b0a6      	sub	sp, #152	; 0x98
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003424:	2301      	movs	r3, #1
 8003426:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800342a:	2301      	movs	r3, #1
 800342c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003430:	2300      	movs	r3, #0
 8003432:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003434:	2300      	movs	r3, #0
 8003436:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800343a:	2301      	movs	r3, #1
 800343c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003440:	2300      	movs	r3, #0
 8003442:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003446:	2301      	movs	r3, #1
 8003448:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800344c:	2300      	movs	r3, #0
 800344e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003452:	2300      	movs	r3, #0
 8003454:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003458:	2300      	movs	r3, #0
 800345a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800345c:	2300      	movs	r3, #0
 800345e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003462:	2300      	movs	r3, #0
 8003464:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003466:	2300      	movs	r3, #0
 8003468:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800346c:	2300      	movs	r3, #0
 800346e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003472:	2300      	movs	r3, #0
 8003474:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003478:	2300      	movs	r3, #0
 800347a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800347e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003482:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003484:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003488:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800348a:	2300      	movs	r3, #0
 800348c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003490:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003494:	4619      	mov	r1, r3
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7ff fe86 	bl	80031a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800349c:	2301      	movs	r3, #1
 800349e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80034a0:	2301      	movs	r3, #1
 80034a2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80034a4:	2301      	movs	r3, #1
 80034a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80034aa:	2301      	movs	r3, #1
 80034ac:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80034b2:	2300      	movs	r3, #0
 80034b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80034b8:	2300      	movs	r3, #0
 80034ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80034be:	2300      	movs	r3, #0
 80034c0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80034c8:	2301      	movs	r3, #1
 80034ca:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80034cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034d0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80034d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034d6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80034d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034dc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80034de:	2301      	movs	r3, #1
 80034e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80034ec:	f107 0308 	add.w	r3, r7, #8
 80034f0:	4619      	mov	r1, r3
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff ff08 	bl	8003308 <ETH_SetDMAConfig>
}
 80034f8:	bf00      	nop
 80034fa:	3798      	adds	r7, #152	; 0x98
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3305      	adds	r3, #5
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	021b      	lsls	r3, r3, #8
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	3204      	adds	r2, #4
 8003518:	7812      	ldrb	r2, [r2, #0]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	4b11      	ldr	r3, [pc, #68]	; (8003568 <ETH_MACAddressConfig+0x68>)
 8003522:	4413      	add	r3, r2
 8003524:	461a      	mov	r2, r3
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3303      	adds	r3, #3
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	061a      	lsls	r2, r3, #24
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3302      	adds	r3, #2
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	041b      	lsls	r3, r3, #16
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3301      	adds	r3, #1
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	4313      	orrs	r3, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	7812      	ldrb	r2, [r2, #0]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <ETH_MACAddressConfig+0x6c>)
 8003552:	4413      	add	r3, r2
 8003554:	461a      	mov	r2, r3
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	6013      	str	r3, [r2, #0]
}
 800355a:	bf00      	nop
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40028040 	.word	0x40028040
 800356c:	40028044 	.word	0x40028044

08003570 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	e03e      	b.n	80035fc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68d9      	ldr	r1, [r3, #12]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	440b      	add	r3, r1
 800358e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2200      	movs	r2, #0
 800359a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2200      	movs	r2, #0
 80035a0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2200      	movs	r2, #0
 80035a6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	3206      	adds	r2, #6
 80035b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d80c      	bhi.n	80035e0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68d9      	ldr	r1, [r3, #12]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	440b      	add	r3, r1
 80035d8:	461a      	mov	r2, r3
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	60da      	str	r2, [r3, #12]
 80035de:	e004      	b.n	80035ea <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	461a      	mov	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	3301      	adds	r3, #1
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d9bd      	bls.n	800357e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003614:	611a      	str	r2, [r3, #16]
}
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003622:	b480      	push	{r7}
 8003624:	b085      	sub	sp, #20
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	e046      	b.n	80036be <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6919      	ldr	r1, [r3, #16]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	440b      	add	r3, r1
 8003640:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2200      	movs	r2, #0
 800364c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2200      	movs	r2, #0
 8003652:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2200      	movs	r2, #0
 8003658:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2200      	movs	r2, #0
 800365e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2200      	movs	r2, #0
 8003664:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800366c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8003674:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003682:	68b9      	ldr	r1, [r7, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	3212      	adds	r2, #18
 800368a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2b02      	cmp	r3, #2
 8003692:	d80c      	bhi.n	80036ae <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6919      	ldr	r1, [r3, #16]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	440b      	add	r3, r1
 80036a6:	461a      	mov	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	60da      	str	r2, [r3, #12]
 80036ac:	e004      	b.n	80036b8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	461a      	mov	r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3301      	adds	r3, #1
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d9b5      	bls.n	8003630 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ee:	60da      	str	r2, [r3, #12]
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b08d      	sub	sp, #52	; 0x34
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	3318      	adds	r3, #24
 800370c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800371a:	2300      	movs	r3, #0
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003726:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800373a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800373e:	d007      	beq.n	8003750 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003744:	3304      	adds	r3, #4
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003750:	2302      	movs	r3, #2
 8003752:	e103      	b.n	800395c <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	3301      	adds	r3, #1
 8003758:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800376c:	f023 031f 	bic.w	r3, r3, #31
 8003770:	69fa      	ldr	r2, [r7, #28]
 8003772:	6852      	ldr	r2, [r2, #4]
 8003774:	431a      	orrs	r2, r3
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	431a      	orrs	r2, r3
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	431a      	orrs	r2, r3
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80037da:	f3bf 8f5f 	dmb	sy
}
 80037de:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80037ec:	e084      	b.n	80038f8 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d006      	beq.n	800380e <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	e005      	b.n	800381a <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381c:	3301      	adds	r3, #1
 800381e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003822:	2b03      	cmp	r3, #3
 8003824:	d902      	bls.n	800382c <ETH_Prepare_Tx_Descriptors+0x130>
 8003826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003828:	3b04      	subs	r3, #4
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003834:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800384a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800384e:	d007      	beq.n	8003860 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003854:	3304      	adds	r3, #4
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d029      	beq.n	80038b4 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800386c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800386e:	2300      	movs	r3, #0
 8003870:	62bb      	str	r3, [r7, #40]	; 0x28
 8003872:	e019      	b.n	80038a8 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8003874:	f3bf 8f5f 	dmb	sy
}
 8003878:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003888:	3301      	adds	r3, #1
 800388a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388e:	2b03      	cmp	r3, #3
 8003890:	d902      	bls.n	8003898 <ETH_Prepare_Tx_Descriptors+0x19c>
 8003892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003894:	3b04      	subs	r3, #4
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800389c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	3301      	adds	r3, #1
 80038a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d3e1      	bcc.n	8003874 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80038b0:	2302      	movs	r3, #2
 80038b2:	e053      	b.n	800395c <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	3301      	adds	r3, #1
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80038d2:	f023 031f 	bic.w	r3, r3, #31
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	6852      	ldr	r2, [r2, #4]
 80038da:	431a      	orrs	r2, r3
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	3301      	adds	r3, #1
 80038e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80038e6:	f3bf 8f5f 	dmb	sy
}
 80038ea:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f47f af76 	bne.w	80037ee <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d006      	beq.n	8003916 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	e005      	b.n	8003922 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003932:	6979      	ldr	r1, [r7, #20]
 8003934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003936:	3304      	adds	r3, #4
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003942:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003944:	b672      	cpsid	i
}
 8003946:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	4413      	add	r3, r2
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003956:	b662      	cpsie	i
}
 8003958:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3734      	adds	r7, #52	; 0x34
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003968:	b480      	push	{r7}
 800396a:	b089      	sub	sp, #36	; 0x24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003976:	2300      	movs	r3, #0
 8003978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800397a:	2300      	movs	r3, #0
 800397c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800397e:	2300      	movs	r3, #0
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	e16b      	b.n	8003c5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003984:	2201      	movs	r2, #1
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4013      	ands	r3, r2
 8003996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	429a      	cmp	r2, r3
 800399e:	f040 815a 	bne.w	8003c56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d005      	beq.n	80039ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d130      	bne.n	8003a1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	2203      	movs	r2, #3
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43db      	mvns	r3, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4013      	ands	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039f0:	2201      	movs	r2, #1
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4013      	ands	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	f003 0201 	and.w	r2, r3, #1
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d017      	beq.n	8003a58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	2203      	movs	r2, #3
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f003 0303 	and.w	r3, r3, #3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d123      	bne.n	8003aac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	08da      	lsrs	r2, r3, #3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3208      	adds	r2, #8
 8003a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	220f      	movs	r2, #15
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	691a      	ldr	r2, [r3, #16]
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	08da      	lsrs	r2, r3, #3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3208      	adds	r2, #8
 8003aa6:	69b9      	ldr	r1, [r7, #24]
 8003aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	2203      	movs	r2, #3
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f003 0203 	and.w	r2, r3, #3
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80b4 	beq.w	8003c56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	4b60      	ldr	r3, [pc, #384]	; (8003c74 <HAL_GPIO_Init+0x30c>)
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	4a5f      	ldr	r2, [pc, #380]	; (8003c74 <HAL_GPIO_Init+0x30c>)
 8003af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003afc:	6453      	str	r3, [r2, #68]	; 0x44
 8003afe:	4b5d      	ldr	r3, [pc, #372]	; (8003c74 <HAL_GPIO_Init+0x30c>)
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b0a:	4a5b      	ldr	r2, [pc, #364]	; (8003c78 <HAL_GPIO_Init+0x310>)
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	089b      	lsrs	r3, r3, #2
 8003b10:	3302      	adds	r3, #2
 8003b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	220f      	movs	r2, #15
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43db      	mvns	r3, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a52      	ldr	r2, [pc, #328]	; (8003c7c <HAL_GPIO_Init+0x314>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d02b      	beq.n	8003b8e <HAL_GPIO_Init+0x226>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a51      	ldr	r2, [pc, #324]	; (8003c80 <HAL_GPIO_Init+0x318>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d025      	beq.n	8003b8a <HAL_GPIO_Init+0x222>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a50      	ldr	r2, [pc, #320]	; (8003c84 <HAL_GPIO_Init+0x31c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d01f      	beq.n	8003b86 <HAL_GPIO_Init+0x21e>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a4f      	ldr	r2, [pc, #316]	; (8003c88 <HAL_GPIO_Init+0x320>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d019      	beq.n	8003b82 <HAL_GPIO_Init+0x21a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a4e      	ldr	r2, [pc, #312]	; (8003c8c <HAL_GPIO_Init+0x324>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d013      	beq.n	8003b7e <HAL_GPIO_Init+0x216>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a4d      	ldr	r2, [pc, #308]	; (8003c90 <HAL_GPIO_Init+0x328>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00d      	beq.n	8003b7a <HAL_GPIO_Init+0x212>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a4c      	ldr	r2, [pc, #304]	; (8003c94 <HAL_GPIO_Init+0x32c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d007      	beq.n	8003b76 <HAL_GPIO_Init+0x20e>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a4b      	ldr	r2, [pc, #300]	; (8003c98 <HAL_GPIO_Init+0x330>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d101      	bne.n	8003b72 <HAL_GPIO_Init+0x20a>
 8003b6e:	2307      	movs	r3, #7
 8003b70:	e00e      	b.n	8003b90 <HAL_GPIO_Init+0x228>
 8003b72:	2308      	movs	r3, #8
 8003b74:	e00c      	b.n	8003b90 <HAL_GPIO_Init+0x228>
 8003b76:	2306      	movs	r3, #6
 8003b78:	e00a      	b.n	8003b90 <HAL_GPIO_Init+0x228>
 8003b7a:	2305      	movs	r3, #5
 8003b7c:	e008      	b.n	8003b90 <HAL_GPIO_Init+0x228>
 8003b7e:	2304      	movs	r3, #4
 8003b80:	e006      	b.n	8003b90 <HAL_GPIO_Init+0x228>
 8003b82:	2303      	movs	r3, #3
 8003b84:	e004      	b.n	8003b90 <HAL_GPIO_Init+0x228>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e002      	b.n	8003b90 <HAL_GPIO_Init+0x228>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <HAL_GPIO_Init+0x228>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	69fa      	ldr	r2, [r7, #28]
 8003b92:	f002 0203 	and.w	r2, r2, #3
 8003b96:	0092      	lsls	r2, r2, #2
 8003b98:	4093      	lsls	r3, r2
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ba0:	4935      	ldr	r1, [pc, #212]	; (8003c78 <HAL_GPIO_Init+0x310>)
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	089b      	lsrs	r3, r3, #2
 8003ba6:	3302      	adds	r3, #2
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bae:	4b3b      	ldr	r3, [pc, #236]	; (8003c9c <HAL_GPIO_Init+0x334>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bd2:	4a32      	ldr	r2, [pc, #200]	; (8003c9c <HAL_GPIO_Init+0x334>)
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bd8:	4b30      	ldr	r3, [pc, #192]	; (8003c9c <HAL_GPIO_Init+0x334>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	43db      	mvns	r3, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bfc:	4a27      	ldr	r2, [pc, #156]	; (8003c9c <HAL_GPIO_Init+0x334>)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c02:	4b26      	ldr	r3, [pc, #152]	; (8003c9c <HAL_GPIO_Init+0x334>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c26:	4a1d      	ldr	r2, [pc, #116]	; (8003c9c <HAL_GPIO_Init+0x334>)
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <HAL_GPIO_Init+0x334>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	43db      	mvns	r3, r3
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c50:	4a12      	ldr	r2, [pc, #72]	; (8003c9c <HAL_GPIO_Init+0x334>)
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	61fb      	str	r3, [r7, #28]
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	2b0f      	cmp	r3, #15
 8003c60:	f67f ae90 	bls.w	8003984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop
 8003c68:	3724      	adds	r7, #36	; 0x24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40023800 	.word	0x40023800
 8003c78:	40013800 	.word	0x40013800
 8003c7c:	40020000 	.word	0x40020000
 8003c80:	40020400 	.word	0x40020400
 8003c84:	40020800 	.word	0x40020800
 8003c88:	40020c00 	.word	0x40020c00
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40021400 	.word	0x40021400
 8003c94:	40021800 	.word	0x40021800
 8003c98:	40021c00 	.word	0x40021c00
 8003c9c:	40013c00 	.word	0x40013c00

08003ca0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	887b      	ldrh	r3, [r7, #2]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
 8003cbc:	e001      	b.n	8003cc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	807b      	strh	r3, [r7, #2]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ce0:	787b      	ldrb	r3, [r7, #1]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ce6:	887a      	ldrh	r2, [r7, #2]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cec:	e003      	b.n	8003cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cee:	887b      	ldrh	r3, [r7, #2]
 8003cf0:	041a      	lsls	r2, r3, #16
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	619a      	str	r2, [r3, #24]
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b085      	sub	sp, #20
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d14:	887a      	ldrh	r2, [r7, #2]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	041a      	lsls	r2, r3, #16
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	43d9      	mvns	r1, r3
 8003d20:	887b      	ldrh	r3, [r7, #2]
 8003d22:	400b      	ands	r3, r1
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	619a      	str	r2, [r3, #24]
}
 8003d2a:	bf00      	nop
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
	...

08003d38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e12b      	b.n	8003fa2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d106      	bne.n	8003d64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fd f9f8 	bl	8001154 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2224      	movs	r2, #36	; 0x24
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0201 	bic.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d9c:	f001 f8aa 	bl	8004ef4 <HAL_RCC_GetPCLK1Freq>
 8003da0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	4a81      	ldr	r2, [pc, #516]	; (8003fac <HAL_I2C_Init+0x274>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d807      	bhi.n	8003dbc <HAL_I2C_Init+0x84>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4a80      	ldr	r2, [pc, #512]	; (8003fb0 <HAL_I2C_Init+0x278>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	bf94      	ite	ls
 8003db4:	2301      	movls	r3, #1
 8003db6:	2300      	movhi	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	e006      	b.n	8003dca <HAL_I2C_Init+0x92>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4a7d      	ldr	r2, [pc, #500]	; (8003fb4 <HAL_I2C_Init+0x27c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	bf94      	ite	ls
 8003dc4:	2301      	movls	r3, #1
 8003dc6:	2300      	movhi	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e0e7      	b.n	8003fa2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4a78      	ldr	r2, [pc, #480]	; (8003fb8 <HAL_I2C_Init+0x280>)
 8003dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dda:	0c9b      	lsrs	r3, r3, #18
 8003ddc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	4a6a      	ldr	r2, [pc, #424]	; (8003fac <HAL_I2C_Init+0x274>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d802      	bhi.n	8003e0c <HAL_I2C_Init+0xd4>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	e009      	b.n	8003e20 <HAL_I2C_Init+0xe8>
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e12:	fb02 f303 	mul.w	r3, r2, r3
 8003e16:	4a69      	ldr	r2, [pc, #420]	; (8003fbc <HAL_I2C_Init+0x284>)
 8003e18:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1c:	099b      	lsrs	r3, r3, #6
 8003e1e:	3301      	adds	r3, #1
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	430b      	orrs	r3, r1
 8003e26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	495c      	ldr	r1, [pc, #368]	; (8003fac <HAL_I2C_Init+0x274>)
 8003e3c:	428b      	cmp	r3, r1
 8003e3e:	d819      	bhi.n	8003e74 <HAL_I2C_Init+0x13c>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	1e59      	subs	r1, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e4e:	1c59      	adds	r1, r3, #1
 8003e50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e54:	400b      	ands	r3, r1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HAL_I2C_Init+0x138>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	1e59      	subs	r1, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e68:	3301      	adds	r3, #1
 8003e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e6e:	e051      	b.n	8003f14 <HAL_I2C_Init+0x1dc>
 8003e70:	2304      	movs	r3, #4
 8003e72:	e04f      	b.n	8003f14 <HAL_I2C_Init+0x1dc>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d111      	bne.n	8003ea0 <HAL_I2C_Init+0x168>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	1e58      	subs	r0, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6859      	ldr	r1, [r3, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	440b      	add	r3, r1
 8003e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e8e:	3301      	adds	r3, #1
 8003e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	bf0c      	ite	eq
 8003e98:	2301      	moveq	r3, #1
 8003e9a:	2300      	movne	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	e012      	b.n	8003ec6 <HAL_I2C_Init+0x18e>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	1e58      	subs	r0, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6859      	ldr	r1, [r3, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	0099      	lsls	r1, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	bf0c      	ite	eq
 8003ec0:	2301      	moveq	r3, #1
 8003ec2:	2300      	movne	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <HAL_I2C_Init+0x196>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e022      	b.n	8003f14 <HAL_I2C_Init+0x1dc>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10e      	bne.n	8003ef4 <HAL_I2C_Init+0x1bc>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1e58      	subs	r0, r3, #1
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6859      	ldr	r1, [r3, #4]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	440b      	add	r3, r1
 8003ee4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ee8:	3301      	adds	r3, #1
 8003eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ef2:	e00f      	b.n	8003f14 <HAL_I2C_Init+0x1dc>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	1e58      	subs	r0, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6859      	ldr	r1, [r3, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	0099      	lsls	r1, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	6809      	ldr	r1, [r1, #0]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69da      	ldr	r2, [r3, #28]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6911      	ldr	r1, [r2, #16]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68d2      	ldr	r2, [r2, #12]
 8003f4e:	4311      	orrs	r1, r2
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	430b      	orrs	r3, r1
 8003f56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695a      	ldr	r2, [r3, #20]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0201 	orr.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	000186a0 	.word	0x000186a0
 8003fb0:	001e847f 	.word	0x001e847f
 8003fb4:	003d08ff 	.word	0x003d08ff
 8003fb8:	431bde83 	.word	0x431bde83
 8003fbc:	10624dd3 	.word	0x10624dd3

08003fc0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	4608      	mov	r0, r1
 8003fca:	4611      	mov	r1, r2
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4603      	mov	r3, r0
 8003fd0:	817b      	strh	r3, [r7, #10]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	813b      	strh	r3, [r7, #8]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fda:	f7fe f957 	bl	800228c <HAL_GetTick>
 8003fde:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	f040 80d9 	bne.w	80041a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	2319      	movs	r3, #25
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	496d      	ldr	r1, [pc, #436]	; (80041ac <HAL_I2C_Mem_Write+0x1ec>)
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 f971 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004004:	2302      	movs	r3, #2
 8004006:	e0cc      	b.n	80041a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_I2C_Mem_Write+0x56>
 8004012:	2302      	movs	r3, #2
 8004014:	e0c5      	b.n	80041a2 <HAL_I2C_Mem_Write+0x1e2>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b01      	cmp	r3, #1
 800402a:	d007      	beq.n	800403c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0201 	orr.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800404a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2221      	movs	r2, #33	; 0x21
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2240      	movs	r2, #64	; 0x40
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a3a      	ldr	r2, [r7, #32]
 8004066:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800406c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4a4d      	ldr	r2, [pc, #308]	; (80041b0 <HAL_I2C_Mem_Write+0x1f0>)
 800407c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800407e:	88f8      	ldrh	r0, [r7, #6]
 8004080:	893a      	ldrh	r2, [r7, #8]
 8004082:	8979      	ldrh	r1, [r7, #10]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	9301      	str	r3, [sp, #4]
 8004088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	4603      	mov	r3, r0
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 f890 	bl	80041b4 <I2C_RequestMemoryWrite>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d052      	beq.n	8004140 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e081      	b.n	80041a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 fa36 	bl	8004514 <I2C_WaitOnTXEFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00d      	beq.n	80040ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d107      	bne.n	80040c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e06b      	b.n	80041a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	781a      	ldrb	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b04      	cmp	r3, #4
 8004106:	d11b      	bne.n	8004140 <HAL_I2C_Mem_Write+0x180>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410c:	2b00      	cmp	r3, #0
 800410e:	d017      	beq.n	8004140 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	781a      	ldrb	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1aa      	bne.n	800409e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 fa29 	bl	80045a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00d      	beq.n	8004174 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415c:	2b04      	cmp	r3, #4
 800415e:	d107      	bne.n	8004170 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e016      	b.n	80041a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004182:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	e000      	b.n	80041a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80041a0:	2302      	movs	r3, #2
  }
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	00100002 	.word	0x00100002
 80041b0:	ffff0000 	.word	0xffff0000

080041b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af02      	add	r7, sp, #8
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	4608      	mov	r0, r1
 80041be:	4611      	mov	r1, r2
 80041c0:	461a      	mov	r2, r3
 80041c2:	4603      	mov	r3, r0
 80041c4:	817b      	strh	r3, [r7, #10]
 80041c6:	460b      	mov	r3, r1
 80041c8:	813b      	strh	r3, [r7, #8]
 80041ca:	4613      	mov	r3, r2
 80041cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f878 	bl	80042e0 <I2C_WaitOnFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00d      	beq.n	8004212 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004204:	d103      	bne.n	800420e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800420c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e05f      	b.n	80042d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004212:	897b      	ldrh	r3, [r7, #10]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	461a      	mov	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004220:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	6a3a      	ldr	r2, [r7, #32]
 8004226:	492d      	ldr	r1, [pc, #180]	; (80042dc <I2C_RequestMemoryWrite+0x128>)
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 f8d3 	bl	80043d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e04c      	b.n	80042d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004238:	2300      	movs	r3, #0
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800424e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004250:	6a39      	ldr	r1, [r7, #32]
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 f95e 	bl	8004514 <I2C_WaitOnTXEFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00d      	beq.n	800427a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	2b04      	cmp	r3, #4
 8004264:	d107      	bne.n	8004276 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004274:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e02b      	b.n	80042d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d105      	bne.n	800428c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004280:	893b      	ldrh	r3, [r7, #8]
 8004282:	b2da      	uxtb	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	611a      	str	r2, [r3, #16]
 800428a:	e021      	b.n	80042d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800428c:	893b      	ldrh	r3, [r7, #8]
 800428e:	0a1b      	lsrs	r3, r3, #8
 8004290:	b29b      	uxth	r3, r3
 8004292:	b2da      	uxtb	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800429a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800429c:	6a39      	ldr	r1, [r7, #32]
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f938 	bl	8004514 <I2C_WaitOnTXEFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00d      	beq.n	80042c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d107      	bne.n	80042c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e005      	b.n	80042d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042c6:	893b      	ldrh	r3, [r7, #8]
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	00010002 	.word	0x00010002

080042e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	4613      	mov	r3, r2
 80042ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f0:	e048      	b.n	8004384 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042f8:	d044      	beq.n	8004384 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fa:	f7fd ffc7 	bl	800228c <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d302      	bcc.n	8004310 <I2C_WaitOnFlagUntilTimeout+0x30>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d139      	bne.n	8004384 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	0c1b      	lsrs	r3, r3, #16
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b01      	cmp	r3, #1
 8004318:	d10d      	bne.n	8004336 <I2C_WaitOnFlagUntilTimeout+0x56>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	43da      	mvns	r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	4013      	ands	r3, r2
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	bf0c      	ite	eq
 800432c:	2301      	moveq	r3, #1
 800432e:	2300      	movne	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	461a      	mov	r2, r3
 8004334:	e00c      	b.n	8004350 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	43da      	mvns	r2, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	4013      	ands	r3, r2
 8004342:	b29b      	uxth	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	bf0c      	ite	eq
 8004348:	2301      	moveq	r3, #1
 800434a:	2300      	movne	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	79fb      	ldrb	r3, [r7, #7]
 8004352:	429a      	cmp	r2, r3
 8004354:	d116      	bne.n	8004384 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	f043 0220 	orr.w	r2, r3, #32
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e023      	b.n	80043cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	0c1b      	lsrs	r3, r3, #16
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b01      	cmp	r3, #1
 800438c:	d10d      	bne.n	80043aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	43da      	mvns	r2, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	4013      	ands	r3, r2
 800439a:	b29b      	uxth	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	bf0c      	ite	eq
 80043a0:	2301      	moveq	r3, #1
 80043a2:	2300      	movne	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	461a      	mov	r2, r3
 80043a8:	e00c      	b.n	80043c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	43da      	mvns	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	4013      	ands	r3, r2
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	bf0c      	ite	eq
 80043bc:	2301      	moveq	r3, #1
 80043be:	2300      	movne	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	461a      	mov	r2, r3
 80043c4:	79fb      	ldrb	r3, [r7, #7]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d093      	beq.n	80042f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043e2:	e071      	b.n	80044c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f2:	d123      	bne.n	800443c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004402:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800440c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	f043 0204 	orr.w	r2, r3, #4
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e067      	b.n	800450c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004442:	d041      	beq.n	80044c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004444:	f7fd ff22 	bl	800228c <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	429a      	cmp	r2, r3
 8004452:	d302      	bcc.n	800445a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d136      	bne.n	80044c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	0c1b      	lsrs	r3, r3, #16
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b01      	cmp	r3, #1
 8004462:	d10c      	bne.n	800447e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	43da      	mvns	r2, r3
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	4013      	ands	r3, r2
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	bf14      	ite	ne
 8004476:	2301      	movne	r3, #1
 8004478:	2300      	moveq	r3, #0
 800447a:	b2db      	uxtb	r3, r3
 800447c:	e00b      	b.n	8004496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	43da      	mvns	r2, r3
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	4013      	ands	r3, r2
 800448a:	b29b      	uxth	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	bf14      	ite	ne
 8004490:	2301      	movne	r3, #1
 8004492:	2300      	moveq	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d016      	beq.n	80044c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	f043 0220 	orr.w	r2, r3, #32
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e021      	b.n	800450c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	0c1b      	lsrs	r3, r3, #16
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d10c      	bne.n	80044ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	43da      	mvns	r2, r3
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	4013      	ands	r3, r2
 80044de:	b29b      	uxth	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bf14      	ite	ne
 80044e4:	2301      	movne	r3, #1
 80044e6:	2300      	moveq	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	e00b      	b.n	8004504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	43da      	mvns	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4013      	ands	r3, r2
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	bf14      	ite	ne
 80044fe:	2301      	movne	r3, #1
 8004500:	2300      	moveq	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	f47f af6d 	bne.w	80043e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004520:	e034      	b.n	800458c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f886 	bl	8004634 <I2C_IsAcknowledgeFailed>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e034      	b.n	800459c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004538:	d028      	beq.n	800458c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453a:	f7fd fea7 	bl	800228c <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	429a      	cmp	r2, r3
 8004548:	d302      	bcc.n	8004550 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d11d      	bne.n	800458c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455a:	2b80      	cmp	r3, #128	; 0x80
 800455c:	d016      	beq.n	800458c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2220      	movs	r2, #32
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	f043 0220 	orr.w	r2, r3, #32
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e007      	b.n	800459c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004596:	2b80      	cmp	r3, #128	; 0x80
 8004598:	d1c3      	bne.n	8004522 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045b0:	e034      	b.n	800461c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 f83e 	bl	8004634 <I2C_IsAcknowledgeFailed>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e034      	b.n	800462c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045c8:	d028      	beq.n	800461c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ca:	f7fd fe5f 	bl	800228c <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d302      	bcc.n	80045e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d11d      	bne.n	800461c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f003 0304 	and.w	r3, r3, #4
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d016      	beq.n	800461c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	f043 0220 	orr.w	r2, r3, #32
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e007      	b.n	800462c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b04      	cmp	r3, #4
 8004628:	d1c3      	bne.n	80045b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464a:	d11b      	bne.n	8004684 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004654:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	f043 0204 	orr.w	r2, r3, #4
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e000      	b.n	8004686 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
	...

08004694 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e267      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d075      	beq.n	800479e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046b2:	4b88      	ldr	r3, [pc, #544]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 030c 	and.w	r3, r3, #12
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d00c      	beq.n	80046d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046be:	4b85      	ldr	r3, [pc, #532]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	d112      	bne.n	80046f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ca:	4b82      	ldr	r3, [pc, #520]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d6:	d10b      	bne.n	80046f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d8:	4b7e      	ldr	r3, [pc, #504]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d05b      	beq.n	800479c <HAL_RCC_OscConfig+0x108>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d157      	bne.n	800479c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e242      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f8:	d106      	bne.n	8004708 <HAL_RCC_OscConfig+0x74>
 80046fa:	4b76      	ldr	r3, [pc, #472]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a75      	ldr	r2, [pc, #468]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	e01d      	b.n	8004744 <HAL_RCC_OscConfig+0xb0>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004710:	d10c      	bne.n	800472c <HAL_RCC_OscConfig+0x98>
 8004712:	4b70      	ldr	r3, [pc, #448]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a6f      	ldr	r2, [pc, #444]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	4b6d      	ldr	r3, [pc, #436]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a6c      	ldr	r2, [pc, #432]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	e00b      	b.n	8004744 <HAL_RCC_OscConfig+0xb0>
 800472c:	4b69      	ldr	r3, [pc, #420]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a68      	ldr	r2, [pc, #416]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	4b66      	ldr	r3, [pc, #408]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a65      	ldr	r2, [pc, #404]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 800473e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d013      	beq.n	8004774 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474c:	f7fd fd9e 	bl	800228c <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004754:	f7fd fd9a 	bl	800228c <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	; 0x64
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e207      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004766:	4b5b      	ldr	r3, [pc, #364]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0xc0>
 8004772:	e014      	b.n	800479e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004774:	f7fd fd8a 	bl	800228c <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800477c:	f7fd fd86 	bl	800228c <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b64      	cmp	r3, #100	; 0x64
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e1f3      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478e:	4b51      	ldr	r3, [pc, #324]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f0      	bne.n	800477c <HAL_RCC_OscConfig+0xe8>
 800479a:	e000      	b.n	800479e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800479c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d063      	beq.n	8004872 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047aa:	4b4a      	ldr	r3, [pc, #296]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 030c 	and.w	r3, r3, #12
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00b      	beq.n	80047ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047b6:	4b47      	ldr	r3, [pc, #284]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d11c      	bne.n	80047fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047c2:	4b44      	ldr	r3, [pc, #272]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d116      	bne.n	80047fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ce:	4b41      	ldr	r3, [pc, #260]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <HAL_RCC_OscConfig+0x152>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d001      	beq.n	80047e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e1c7      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e6:	4b3b      	ldr	r3, [pc, #236]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	4937      	ldr	r1, [pc, #220]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047fa:	e03a      	b.n	8004872 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d020      	beq.n	8004846 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004804:	4b34      	ldr	r3, [pc, #208]	; (80048d8 <HAL_RCC_OscConfig+0x244>)
 8004806:	2201      	movs	r2, #1
 8004808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480a:	f7fd fd3f 	bl	800228c <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004812:	f7fd fd3b 	bl	800228c <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e1a8      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004824:	4b2b      	ldr	r3, [pc, #172]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0f0      	beq.n	8004812 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004830:	4b28      	ldr	r3, [pc, #160]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	4925      	ldr	r1, [pc, #148]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004840:	4313      	orrs	r3, r2
 8004842:	600b      	str	r3, [r1, #0]
 8004844:	e015      	b.n	8004872 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004846:	4b24      	ldr	r3, [pc, #144]	; (80048d8 <HAL_RCC_OscConfig+0x244>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484c:	f7fd fd1e 	bl	800228c <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004854:	f7fd fd1a 	bl	800228c <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e187      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004866:	4b1b      	ldr	r3, [pc, #108]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d036      	beq.n	80048ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d016      	beq.n	80048b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004886:	4b15      	ldr	r3, [pc, #84]	; (80048dc <HAL_RCC_OscConfig+0x248>)
 8004888:	2201      	movs	r2, #1
 800488a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488c:	f7fd fcfe 	bl	800228c <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004894:	f7fd fcfa 	bl	800228c <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e167      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048a6:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <HAL_RCC_OscConfig+0x240>)
 80048a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0x200>
 80048b2:	e01b      	b.n	80048ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048b4:	4b09      	ldr	r3, [pc, #36]	; (80048dc <HAL_RCC_OscConfig+0x248>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ba:	f7fd fce7 	bl	800228c <HAL_GetTick>
 80048be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048c0:	e00e      	b.n	80048e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048c2:	f7fd fce3 	bl	800228c <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d907      	bls.n	80048e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e150      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
 80048d4:	40023800 	.word	0x40023800
 80048d8:	42470000 	.word	0x42470000
 80048dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e0:	4b88      	ldr	r3, [pc, #544]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 80048e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1ea      	bne.n	80048c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 8097 	beq.w	8004a28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048fa:	2300      	movs	r3, #0
 80048fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048fe:	4b81      	ldr	r3, [pc, #516]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10f      	bne.n	800492a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800490a:	2300      	movs	r3, #0
 800490c:	60bb      	str	r3, [r7, #8]
 800490e:	4b7d      	ldr	r3, [pc, #500]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	4a7c      	ldr	r2, [pc, #496]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004918:	6413      	str	r3, [r2, #64]	; 0x40
 800491a:	4b7a      	ldr	r3, [pc, #488]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004922:	60bb      	str	r3, [r7, #8]
 8004924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004926:	2301      	movs	r3, #1
 8004928:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800492a:	4b77      	ldr	r3, [pc, #476]	; (8004b08 <HAL_RCC_OscConfig+0x474>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004932:	2b00      	cmp	r3, #0
 8004934:	d118      	bne.n	8004968 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004936:	4b74      	ldr	r3, [pc, #464]	; (8004b08 <HAL_RCC_OscConfig+0x474>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a73      	ldr	r2, [pc, #460]	; (8004b08 <HAL_RCC_OscConfig+0x474>)
 800493c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004942:	f7fd fca3 	bl	800228c <HAL_GetTick>
 8004946:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004948:	e008      	b.n	800495c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800494a:	f7fd fc9f 	bl	800228c <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e10c      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800495c:	4b6a      	ldr	r3, [pc, #424]	; (8004b08 <HAL_RCC_OscConfig+0x474>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0f0      	beq.n	800494a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d106      	bne.n	800497e <HAL_RCC_OscConfig+0x2ea>
 8004970:	4b64      	ldr	r3, [pc, #400]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004974:	4a63      	ldr	r2, [pc, #396]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	6713      	str	r3, [r2, #112]	; 0x70
 800497c:	e01c      	b.n	80049b8 <HAL_RCC_OscConfig+0x324>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	2b05      	cmp	r3, #5
 8004984:	d10c      	bne.n	80049a0 <HAL_RCC_OscConfig+0x30c>
 8004986:	4b5f      	ldr	r3, [pc, #380]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498a:	4a5e      	ldr	r2, [pc, #376]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 800498c:	f043 0304 	orr.w	r3, r3, #4
 8004990:	6713      	str	r3, [r2, #112]	; 0x70
 8004992:	4b5c      	ldr	r3, [pc, #368]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004996:	4a5b      	ldr	r2, [pc, #364]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	6713      	str	r3, [r2, #112]	; 0x70
 800499e:	e00b      	b.n	80049b8 <HAL_RCC_OscConfig+0x324>
 80049a0:	4b58      	ldr	r3, [pc, #352]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 80049a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a4:	4a57      	ldr	r2, [pc, #348]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	6713      	str	r3, [r2, #112]	; 0x70
 80049ac:	4b55      	ldr	r3, [pc, #340]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 80049ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b0:	4a54      	ldr	r2, [pc, #336]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 80049b2:	f023 0304 	bic.w	r3, r3, #4
 80049b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d015      	beq.n	80049ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c0:	f7fd fc64 	bl	800228c <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c6:	e00a      	b.n	80049de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049c8:	f7fd fc60 	bl	800228c <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e0cb      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049de:	4b49      	ldr	r3, [pc, #292]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 80049e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0ee      	beq.n	80049c8 <HAL_RCC_OscConfig+0x334>
 80049ea:	e014      	b.n	8004a16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ec:	f7fd fc4e 	bl	800228c <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049f2:	e00a      	b.n	8004a0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049f4:	f7fd fc4a 	bl	800228c <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e0b5      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a0a:	4b3e      	ldr	r3, [pc, #248]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1ee      	bne.n	80049f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d105      	bne.n	8004a28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a1c:	4b39      	ldr	r3, [pc, #228]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	4a38      	ldr	r2, [pc, #224]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80a1 	beq.w	8004b74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a32:	4b34      	ldr	r3, [pc, #208]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 030c 	and.w	r3, r3, #12
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d05c      	beq.n	8004af8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d141      	bne.n	8004aca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a46:	4b31      	ldr	r3, [pc, #196]	; (8004b0c <HAL_RCC_OscConfig+0x478>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4c:	f7fd fc1e 	bl	800228c <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a54:	f7fd fc1a 	bl	800228c <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e087      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a66:	4b27      	ldr	r3, [pc, #156]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f0      	bne.n	8004a54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69da      	ldr	r2, [r3, #28]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	019b      	lsls	r3, r3, #6
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a88:	085b      	lsrs	r3, r3, #1
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	041b      	lsls	r3, r3, #16
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	061b      	lsls	r3, r3, #24
 8004a96:	491b      	ldr	r1, [pc, #108]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a9c:	4b1b      	ldr	r3, [pc, #108]	; (8004b0c <HAL_RCC_OscConfig+0x478>)
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa2:	f7fd fbf3 	bl	800228c <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aaa:	f7fd fbef 	bl	800228c <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e05c      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004abc:	4b11      	ldr	r3, [pc, #68]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0f0      	beq.n	8004aaa <HAL_RCC_OscConfig+0x416>
 8004ac8:	e054      	b.n	8004b74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aca:	4b10      	ldr	r3, [pc, #64]	; (8004b0c <HAL_RCC_OscConfig+0x478>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad0:	f7fd fbdc 	bl	800228c <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad8:	f7fd fbd8 	bl	800228c <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e045      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aea:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <HAL_RCC_OscConfig+0x470>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x444>
 8004af6:	e03d      	b.n	8004b74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d107      	bne.n	8004b10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e038      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
 8004b04:	40023800 	.word	0x40023800
 8004b08:	40007000 	.word	0x40007000
 8004b0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b10:	4b1b      	ldr	r3, [pc, #108]	; (8004b80 <HAL_RCC_OscConfig+0x4ec>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d028      	beq.n	8004b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d121      	bne.n	8004b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d11a      	bne.n	8004b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b40:	4013      	ands	r3, r2
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d111      	bne.n	8004b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b56:	085b      	lsrs	r3, r3, #1
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d107      	bne.n	8004b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d001      	beq.n	8004b74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e000      	b.n	8004b76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3718      	adds	r7, #24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40023800 	.word	0x40023800

08004b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e0cc      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b98:	4b68      	ldr	r3, [pc, #416]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d90c      	bls.n	8004bc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba6:	4b65      	ldr	r3, [pc, #404]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bae:	4b63      	ldr	r3, [pc, #396]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d001      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e0b8      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d020      	beq.n	8004c0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d005      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bd8:	4b59      	ldr	r3, [pc, #356]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	4a58      	ldr	r2, [pc, #352]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004be2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0308 	and.w	r3, r3, #8
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bf0:	4b53      	ldr	r3, [pc, #332]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	4a52      	ldr	r2, [pc, #328]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bfc:	4b50      	ldr	r3, [pc, #320]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	494d      	ldr	r1, [pc, #308]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d044      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d107      	bne.n	8004c32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c22:	4b47      	ldr	r3, [pc, #284]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d119      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e07f      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d003      	beq.n	8004c42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c3e:	2b03      	cmp	r3, #3
 8004c40:	d107      	bne.n	8004c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c42:	4b3f      	ldr	r3, [pc, #252]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d109      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e06f      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c52:	4b3b      	ldr	r3, [pc, #236]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e067      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c62:	4b37      	ldr	r3, [pc, #220]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f023 0203 	bic.w	r2, r3, #3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	4934      	ldr	r1, [pc, #208]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c74:	f7fd fb0a 	bl	800228c <HAL_GetTick>
 8004c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7a:	e00a      	b.n	8004c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c7c:	f7fd fb06 	bl	800228c <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e04f      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c92:	4b2b      	ldr	r3, [pc, #172]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 020c 	and.w	r2, r3, #12
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d1eb      	bne.n	8004c7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ca4:	4b25      	ldr	r3, [pc, #148]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d20c      	bcs.n	8004ccc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb2:	4b22      	ldr	r3, [pc, #136]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cba:	4b20      	ldr	r3, [pc, #128]	; (8004d3c <HAL_RCC_ClockConfig+0x1b8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d001      	beq.n	8004ccc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e032      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd8:	4b19      	ldr	r3, [pc, #100]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	4916      	ldr	r1, [pc, #88]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d009      	beq.n	8004d0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cf6:	4b12      	ldr	r3, [pc, #72]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	490e      	ldr	r1, [pc, #56]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d0a:	f000 f821 	bl	8004d50 <HAL_RCC_GetSysClockFreq>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	091b      	lsrs	r3, r3, #4
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	490a      	ldr	r1, [pc, #40]	; (8004d44 <HAL_RCC_ClockConfig+0x1c0>)
 8004d1c:	5ccb      	ldrb	r3, [r1, r3]
 8004d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d22:	4a09      	ldr	r2, [pc, #36]	; (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d26:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <HAL_RCC_ClockConfig+0x1c8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fc fefa 	bl	8001b24 <HAL_InitTick>

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	40023c00 	.word	0x40023c00
 8004d40:	40023800 	.word	0x40023800
 8004d44:	080271a0 	.word	0x080271a0
 8004d48:	20000000 	.word	0x20000000
 8004d4c:	20000004 	.word	0x20000004

08004d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d54:	b090      	sub	sp, #64	; 0x40
 8004d56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d60:	2300      	movs	r3, #0
 8004d62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d68:	4b59      	ldr	r3, [pc, #356]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 030c 	and.w	r3, r3, #12
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d00d      	beq.n	8004d90 <HAL_RCC_GetSysClockFreq+0x40>
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	f200 80a1 	bhi.w	8004ebc <HAL_RCC_GetSysClockFreq+0x16c>
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <HAL_RCC_GetSysClockFreq+0x34>
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d003      	beq.n	8004d8a <HAL_RCC_GetSysClockFreq+0x3a>
 8004d82:	e09b      	b.n	8004ebc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d84:	4b53      	ldr	r3, [pc, #332]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d86:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004d88:	e09b      	b.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d8a:	4b53      	ldr	r3, [pc, #332]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d8e:	e098      	b.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d90:	4b4f      	ldr	r3, [pc, #316]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d98:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d9a:	4b4d      	ldr	r3, [pc, #308]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d028      	beq.n	8004df8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004da6:	4b4a      	ldr	r3, [pc, #296]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	099b      	lsrs	r3, r3, #6
 8004dac:	2200      	movs	r2, #0
 8004dae:	623b      	str	r3, [r7, #32]
 8004db0:	627a      	str	r2, [r7, #36]	; 0x24
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004db8:	2100      	movs	r1, #0
 8004dba:	4b47      	ldr	r3, [pc, #284]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004dbc:	fb03 f201 	mul.w	r2, r3, r1
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	fb00 f303 	mul.w	r3, r0, r3
 8004dc6:	4413      	add	r3, r2
 8004dc8:	4a43      	ldr	r2, [pc, #268]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004dca:	fba0 1202 	umull	r1, r2, r0, r2
 8004dce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dd0:	460a      	mov	r2, r1
 8004dd2:	62ba      	str	r2, [r7, #40]	; 0x28
 8004dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dd6:	4413      	add	r3, r2
 8004dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ddc:	2200      	movs	r2, #0
 8004dde:	61bb      	str	r3, [r7, #24]
 8004de0:	61fa      	str	r2, [r7, #28]
 8004de2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004de6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004dea:	f7fb fa59 	bl	80002a0 <__aeabi_uldivmod>
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	4613      	mov	r3, r2
 8004df4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004df6:	e053      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004df8:	4b35      	ldr	r3, [pc, #212]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	099b      	lsrs	r3, r3, #6
 8004dfe:	2200      	movs	r2, #0
 8004e00:	613b      	str	r3, [r7, #16]
 8004e02:	617a      	str	r2, [r7, #20]
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004e0a:	f04f 0b00 	mov.w	fp, #0
 8004e0e:	4652      	mov	r2, sl
 8004e10:	465b      	mov	r3, fp
 8004e12:	f04f 0000 	mov.w	r0, #0
 8004e16:	f04f 0100 	mov.w	r1, #0
 8004e1a:	0159      	lsls	r1, r3, #5
 8004e1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e20:	0150      	lsls	r0, r2, #5
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	ebb2 080a 	subs.w	r8, r2, sl
 8004e2a:	eb63 090b 	sbc.w	r9, r3, fp
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	f04f 0300 	mov.w	r3, #0
 8004e36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e42:	ebb2 0408 	subs.w	r4, r2, r8
 8004e46:	eb63 0509 	sbc.w	r5, r3, r9
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	f04f 0300 	mov.w	r3, #0
 8004e52:	00eb      	lsls	r3, r5, #3
 8004e54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e58:	00e2      	lsls	r2, r4, #3
 8004e5a:	4614      	mov	r4, r2
 8004e5c:	461d      	mov	r5, r3
 8004e5e:	eb14 030a 	adds.w	r3, r4, sl
 8004e62:	603b      	str	r3, [r7, #0]
 8004e64:	eb45 030b 	adc.w	r3, r5, fp
 8004e68:	607b      	str	r3, [r7, #4]
 8004e6a:	f04f 0200 	mov.w	r2, #0
 8004e6e:	f04f 0300 	mov.w	r3, #0
 8004e72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e76:	4629      	mov	r1, r5
 8004e78:	028b      	lsls	r3, r1, #10
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e80:	4621      	mov	r1, r4
 8004e82:	028a      	lsls	r2, r1, #10
 8004e84:	4610      	mov	r0, r2
 8004e86:	4619      	mov	r1, r3
 8004e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	60bb      	str	r3, [r7, #8]
 8004e8e:	60fa      	str	r2, [r7, #12]
 8004e90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e94:	f7fb fa04 	bl	80002a0 <__aeabi_uldivmod>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	0c1b      	lsrs	r3, r3, #16
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	3301      	adds	r3, #1
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004eb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004eba:	e002      	b.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ebc:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ebe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3740      	adds	r7, #64	; 0x40
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ece:	bf00      	nop
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	00f42400 	.word	0x00f42400
 8004ed8:	017d7840 	.word	0x017d7840

08004edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ee0:	4b03      	ldr	r3, [pc, #12]	; (8004ef0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	20000000 	.word	0x20000000

08004ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ef8:	f7ff fff0 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 8004efc:	4602      	mov	r2, r0
 8004efe:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	0a9b      	lsrs	r3, r3, #10
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	4903      	ldr	r1, [pc, #12]	; (8004f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f0a:	5ccb      	ldrb	r3, [r1, r3]
 8004f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40023800 	.word	0x40023800
 8004f18:	080271b0 	.word	0x080271b0

08004f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f20:	f7ff ffdc 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 8004f24:	4602      	mov	r2, r0
 8004f26:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	0b5b      	lsrs	r3, r3, #13
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	4903      	ldr	r1, [pc, #12]	; (8004f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f32:	5ccb      	ldrb	r3, [r1, r3]
 8004f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	080271b0 	.word	0x080271b0

08004f44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	220f      	movs	r2, #15
 8004f52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f54:	4b12      	ldr	r3, [pc, #72]	; (8004fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 0203 	and.w	r2, r3, #3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f60:	4b0f      	ldr	r3, [pc, #60]	; (8004fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f6c:	4b0c      	ldr	r3, [pc, #48]	; (8004fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f78:	4b09      	ldr	r3, [pc, #36]	; (8004fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	08db      	lsrs	r3, r3, #3
 8004f7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f86:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <HAL_RCC_GetClockConfig+0x60>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0207 	and.w	r2, r3, #7
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	601a      	str	r2, [r3, #0]
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	40023c00 	.word	0x40023c00

08004fa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e07b      	b.n	80050b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d108      	bne.n	8004fd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fca:	d009      	beq.n	8004fe0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	61da      	str	r2, [r3, #28]
 8004fd2:	e005      	b.n	8004fe0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fc fcfe 	bl	80019fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005016:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005050:	431a      	orrs	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005064:	ea42 0103 	orr.w	r1, r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	0c1b      	lsrs	r3, r3, #16
 800507e:	f003 0104 	and.w	r1, r3, #4
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	f003 0210 	and.w	r2, r3, #16
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69da      	ldr	r2, [r3, #28]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b088      	sub	sp, #32
 80050be:	af00      	add	r7, sp, #0
 80050c0:	60f8      	str	r0, [r7, #12]
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	603b      	str	r3, [r7, #0]
 80050c6:	4613      	mov	r3, r2
 80050c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <HAL_SPI_Transmit+0x22>
 80050d8:	2302      	movs	r3, #2
 80050da:	e12d      	b.n	8005338 <HAL_SPI_Transmit+0x27e>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050e4:	f7fd f8d2 	bl	800228c <HAL_GetTick>
 80050e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80050ea:	88fb      	ldrh	r3, [r7, #6]
 80050ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d002      	beq.n	8005100 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80050fa:	2302      	movs	r3, #2
 80050fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050fe:	e116      	b.n	800532e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <HAL_SPI_Transmit+0x52>
 8005106:	88fb      	ldrh	r3, [r7, #6]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d102      	bne.n	8005112 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005110:	e10d      	b.n	800532e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2203      	movs	r2, #3
 8005116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	88fa      	ldrh	r2, [r7, #6]
 800512a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	88fa      	ldrh	r2, [r7, #6]
 8005130:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005158:	d10f      	bne.n	800517a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005168:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005178:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005184:	2b40      	cmp	r3, #64	; 0x40
 8005186:	d007      	beq.n	8005198 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005196:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051a0:	d14f      	bne.n	8005242 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <HAL_SPI_Transmit+0xf6>
 80051aa:	8afb      	ldrh	r3, [r7, #22]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d142      	bne.n	8005236 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b4:	881a      	ldrh	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c0:	1c9a      	adds	r2, r3, #2
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80051d4:	e02f      	b.n	8005236 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d112      	bne.n	800520a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e8:	881a      	ldrh	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f4:	1c9a      	adds	r2, r3, #2
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	86da      	strh	r2, [r3, #54]	; 0x36
 8005208:	e015      	b.n	8005236 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800520a:	f7fd f83f 	bl	800228c <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d803      	bhi.n	8005222 <HAL_SPI_Transmit+0x168>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005220:	d102      	bne.n	8005228 <HAL_SPI_Transmit+0x16e>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d106      	bne.n	8005236 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005234:	e07b      	b.n	800532e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800523a:	b29b      	uxth	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1ca      	bne.n	80051d6 <HAL_SPI_Transmit+0x11c>
 8005240:	e050      	b.n	80052e4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <HAL_SPI_Transmit+0x196>
 800524a:	8afb      	ldrh	r3, [r7, #22]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d144      	bne.n	80052da <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	330c      	adds	r3, #12
 800525a:	7812      	ldrb	r2, [r2, #0]
 800525c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005276:	e030      	b.n	80052da <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b02      	cmp	r3, #2
 8005284:	d113      	bne.n	80052ae <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	330c      	adds	r3, #12
 8005290:	7812      	ldrb	r2, [r2, #0]
 8005292:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	3b01      	subs	r3, #1
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80052ac:	e015      	b.n	80052da <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052ae:	f7fc ffed 	bl	800228c <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d803      	bhi.n	80052c6 <HAL_SPI_Transmit+0x20c>
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052c4:	d102      	bne.n	80052cc <HAL_SPI_Transmit+0x212>
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d106      	bne.n	80052da <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80052d8:	e029      	b.n	800532e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1c9      	bne.n	8005278 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	6839      	ldr	r1, [r7, #0]
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 fbdf 	bl	8005aac <SPI_EndRxTxTransaction>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2220      	movs	r2, #32
 80052f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10a      	bne.n	8005318 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005302:	2300      	movs	r3, #0
 8005304:	613b      	str	r3, [r7, #16]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	77fb      	strb	r3, [r7, #31]
 8005324:	e003      	b.n	800532e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005336:	7ffb      	ldrb	r3, [r7, #31]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3720      	adds	r7, #32
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b088      	sub	sp, #32
 8005344:	af02      	add	r7, sp, #8
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	4613      	mov	r3, r2
 800534e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005350:	2300      	movs	r3, #0
 8005352:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b01      	cmp	r3, #1
 800535e:	d002      	beq.n	8005366 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005360:	2302      	movs	r3, #2
 8005362:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005364:	e0fb      	b.n	800555e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800536e:	d112      	bne.n	8005396 <HAL_SPI_Receive+0x56>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10e      	bne.n	8005396 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2204      	movs	r2, #4
 800537c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005380:	88fa      	ldrh	r2, [r7, #6]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	4613      	mov	r3, r2
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	68b9      	ldr	r1, [r7, #8]
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 f8ef 	bl	8005570 <HAL_SPI_TransmitReceive>
 8005392:	4603      	mov	r3, r0
 8005394:	e0e8      	b.n	8005568 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_SPI_Receive+0x64>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e0e1      	b.n	8005568 <HAL_SPI_Receive+0x228>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053ac:	f7fc ff6e 	bl	800228c <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <HAL_SPI_Receive+0x7e>
 80053b8:	88fb      	ldrh	r3, [r7, #6]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d102      	bne.n	80053c4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80053c2:	e0cc      	b.n	800555e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2204      	movs	r2, #4
 80053c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	88fa      	ldrh	r2, [r7, #6]
 80053dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	88fa      	ldrh	r2, [r7, #6]
 80053e2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800540a:	d10f      	bne.n	800542c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800541a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800542a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005436:	2b40      	cmp	r3, #64	; 0x40
 8005438:	d007      	beq.n	800544a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005448:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d16a      	bne.n	8005528 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005452:	e032      	b.n	80054ba <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b01      	cmp	r3, #1
 8005460:	d115      	bne.n	800548e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f103 020c 	add.w	r2, r3, #12
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546e:	7812      	ldrb	r2, [r2, #0]
 8005470:	b2d2      	uxtb	r2, r2
 8005472:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005478:	1c5a      	adds	r2, r3, #1
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005482:	b29b      	uxth	r3, r3
 8005484:	3b01      	subs	r3, #1
 8005486:	b29a      	uxth	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800548c:	e015      	b.n	80054ba <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800548e:	f7fc fefd 	bl	800228c <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d803      	bhi.n	80054a6 <HAL_SPI_Receive+0x166>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054a4:	d102      	bne.n	80054ac <HAL_SPI_Receive+0x16c>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d106      	bne.n	80054ba <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80054b8:	e051      	b.n	800555e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1c7      	bne.n	8005454 <HAL_SPI_Receive+0x114>
 80054c4:	e035      	b.n	8005532 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d113      	bne.n	80054fc <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054de:	b292      	uxth	r2, r2
 80054e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e6:	1c9a      	adds	r2, r3, #2
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054fa:	e015      	b.n	8005528 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054fc:	f7fc fec6 	bl	800228c <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	429a      	cmp	r2, r3
 800550a:	d803      	bhi.n	8005514 <HAL_SPI_Receive+0x1d4>
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005512:	d102      	bne.n	800551a <HAL_SPI_Receive+0x1da>
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d106      	bne.n	8005528 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005526:	e01a      	b.n	800555e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800552c:	b29b      	uxth	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1c9      	bne.n	80054c6 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	6839      	ldr	r1, [r7, #0]
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 fa52 	bl	80059e0 <SPI_EndRxTransaction>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2220      	movs	r2, #32
 8005546:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	75fb      	strb	r3, [r7, #23]
 8005554:	e003      	b.n	800555e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005566:	7dfb      	ldrb	r3, [r7, #23]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08c      	sub	sp, #48	; 0x30
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800557e:	2301      	movs	r3, #1
 8005580:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800558e:	2b01      	cmp	r3, #1
 8005590:	d101      	bne.n	8005596 <HAL_SPI_TransmitReceive+0x26>
 8005592:	2302      	movs	r3, #2
 8005594:	e198      	b.n	80058c8 <HAL_SPI_TransmitReceive+0x358>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800559e:	f7fc fe75 	bl	800228c <HAL_GetTick>
 80055a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80055b4:	887b      	ldrh	r3, [r7, #2]
 80055b6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80055b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d00f      	beq.n	80055e0 <HAL_SPI_TransmitReceive+0x70>
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055c6:	d107      	bne.n	80055d8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d103      	bne.n	80055d8 <HAL_SPI_TransmitReceive+0x68>
 80055d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d003      	beq.n	80055e0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80055d8:	2302      	movs	r3, #2
 80055da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80055de:	e16d      	b.n	80058bc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d005      	beq.n	80055f2 <HAL_SPI_TransmitReceive+0x82>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <HAL_SPI_TransmitReceive+0x82>
 80055ec:	887b      	ldrh	r3, [r7, #2]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d103      	bne.n	80055fa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80055f8:	e160      	b.n	80058bc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b04      	cmp	r3, #4
 8005604:	d003      	beq.n	800560e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2205      	movs	r2, #5
 800560a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	887a      	ldrh	r2, [r7, #2]
 800561e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	887a      	ldrh	r2, [r7, #2]
 8005624:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	887a      	ldrh	r2, [r7, #2]
 8005630:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	887a      	ldrh	r2, [r7, #2]
 8005636:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564e:	2b40      	cmp	r3, #64	; 0x40
 8005650:	d007      	beq.n	8005662 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005660:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800566a:	d17c      	bne.n	8005766 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d002      	beq.n	800567a <HAL_SPI_TransmitReceive+0x10a>
 8005674:	8b7b      	ldrh	r3, [r7, #26]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d16a      	bne.n	8005750 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	881a      	ldrh	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568a:	1c9a      	adds	r2, r3, #2
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005694:	b29b      	uxth	r3, r3
 8005696:	3b01      	subs	r3, #1
 8005698:	b29a      	uxth	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800569e:	e057      	b.n	8005750 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d11b      	bne.n	80056e6 <HAL_SPI_TransmitReceive+0x176>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d016      	beq.n	80056e6 <HAL_SPI_TransmitReceive+0x176>
 80056b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d113      	bne.n	80056e6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c2:	881a      	ldrh	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ce:	1c9a      	adds	r2, r3, #2
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d119      	bne.n	8005728 <HAL_SPI_TransmitReceive+0x1b8>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d014      	beq.n	8005728 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	b292      	uxth	r2, r2
 800570a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	1c9a      	adds	r2, r3, #2
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b01      	subs	r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005724:	2301      	movs	r3, #1
 8005726:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005728:	f7fc fdb0 	bl	800228c <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005734:	429a      	cmp	r2, r3
 8005736:	d80b      	bhi.n	8005750 <HAL_SPI_TransmitReceive+0x1e0>
 8005738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800573e:	d007      	beq.n	8005750 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800574e:	e0b5      	b.n	80058bc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1a2      	bne.n	80056a0 <HAL_SPI_TransmitReceive+0x130>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800575e:	b29b      	uxth	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d19d      	bne.n	80056a0 <HAL_SPI_TransmitReceive+0x130>
 8005764:	e080      	b.n	8005868 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <HAL_SPI_TransmitReceive+0x204>
 800576e:	8b7b      	ldrh	r3, [r7, #26]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d16f      	bne.n	8005854 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	330c      	adds	r3, #12
 800577e:	7812      	ldrb	r2, [r2, #0]
 8005780:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800579a:	e05b      	b.n	8005854 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d11c      	bne.n	80057e4 <HAL_SPI_TransmitReceive+0x274>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d017      	beq.n	80057e4 <HAL_SPI_TransmitReceive+0x274>
 80057b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d114      	bne.n	80057e4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	330c      	adds	r3, #12
 80057c4:	7812      	ldrb	r2, [r2, #0]
 80057c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d119      	bne.n	8005826 <HAL_SPI_TransmitReceive+0x2b6>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d014      	beq.n	8005826 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005822:	2301      	movs	r3, #1
 8005824:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005826:	f7fc fd31 	bl	800228c <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005832:	429a      	cmp	r2, r3
 8005834:	d803      	bhi.n	800583e <HAL_SPI_TransmitReceive+0x2ce>
 8005836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800583c:	d102      	bne.n	8005844 <HAL_SPI_TransmitReceive+0x2d4>
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	2b00      	cmp	r3, #0
 8005842:	d107      	bne.n	8005854 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005852:	e033      	b.n	80058bc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005858:	b29b      	uxth	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d19e      	bne.n	800579c <HAL_SPI_TransmitReceive+0x22c>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005862:	b29b      	uxth	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d199      	bne.n	800579c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800586a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 f91d 	bl	8005aac <SPI_EndRxTxTransaction>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d006      	beq.n	8005886 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2220      	movs	r2, #32
 8005882:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005884:	e01a      	b.n	80058bc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10a      	bne.n	80058a4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	617b      	str	r3, [r7, #20]
 80058a2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d003      	beq.n	80058b4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058b2:	e003      	b.n	80058bc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3730      	adds	r7, #48	; 0x30
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	4613      	mov	r3, r2
 80058de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058e0:	f7fc fcd4 	bl	800228c <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e8:	1a9b      	subs	r3, r3, r2
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	4413      	add	r3, r2
 80058ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058f0:	f7fc fccc 	bl	800228c <HAL_GetTick>
 80058f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058f6:	4b39      	ldr	r3, [pc, #228]	; (80059dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	015b      	lsls	r3, r3, #5
 80058fc:	0d1b      	lsrs	r3, r3, #20
 80058fe:	69fa      	ldr	r2, [r7, #28]
 8005900:	fb02 f303 	mul.w	r3, r2, r3
 8005904:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005906:	e054      	b.n	80059b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800590e:	d050      	beq.n	80059b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005910:	f7fc fcbc 	bl	800228c <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	69fa      	ldr	r2, [r7, #28]
 800591c:	429a      	cmp	r2, r3
 800591e:	d902      	bls.n	8005926 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d13d      	bne.n	80059a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005934:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800593e:	d111      	bne.n	8005964 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005948:	d004      	beq.n	8005954 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005952:	d107      	bne.n	8005964 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005962:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800596c:	d10f      	bne.n	800598e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800598c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e017      	b.n	80059d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4013      	ands	r3, r2
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	429a      	cmp	r2, r3
 80059c0:	bf0c      	ite	eq
 80059c2:	2301      	moveq	r3, #1
 80059c4:	2300      	movne	r3, #0
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	461a      	mov	r2, r3
 80059ca:	79fb      	ldrb	r3, [r7, #7]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d19b      	bne.n	8005908 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3720      	adds	r7, #32
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	20000000 	.word	0x20000000

080059e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af02      	add	r7, sp, #8
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059f4:	d111      	bne.n	8005a1a <SPI_EndRxTransaction+0x3a>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059fe:	d004      	beq.n	8005a0a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a08:	d107      	bne.n	8005a1a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a18:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a22:	d12a      	bne.n	8005a7a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a2c:	d012      	beq.n	8005a54 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2200      	movs	r2, #0
 8005a36:	2180      	movs	r1, #128	; 0x80
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f7ff ff49 	bl	80058d0 <SPI_WaitFlagStateUntilTimeout>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d02d      	beq.n	8005aa0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a48:	f043 0220 	orr.w	r2, r3, #32
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e026      	b.n	8005aa2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f7ff ff36 	bl	80058d0 <SPI_WaitFlagStateUntilTimeout>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d01a      	beq.n	8005aa0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6e:	f043 0220 	orr.w	r2, r3, #32
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e013      	b.n	8005aa2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2200      	movs	r2, #0
 8005a82:	2101      	movs	r1, #1
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f7ff ff23 	bl	80058d0 <SPI_WaitFlagStateUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d007      	beq.n	8005aa0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a94:	f043 0220 	orr.w	r2, r3, #32
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e000      	b.n	8005aa2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
	...

08005aac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b088      	sub	sp, #32
 8005ab0:	af02      	add	r7, sp, #8
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	2102      	movs	r1, #2
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f7ff ff04 	bl	80058d0 <SPI_WaitFlagStateUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d007      	beq.n	8005ade <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad2:	f043 0220 	orr.w	r2, r3, #32
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e032      	b.n	8005b44 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ade:	4b1b      	ldr	r3, [pc, #108]	; (8005b4c <SPI_EndRxTxTransaction+0xa0>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a1b      	ldr	r2, [pc, #108]	; (8005b50 <SPI_EndRxTxTransaction+0xa4>)
 8005ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae8:	0d5b      	lsrs	r3, r3, #21
 8005aea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005aee:	fb02 f303 	mul.w	r3, r2, r3
 8005af2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005afc:	d112      	bne.n	8005b24 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2200      	movs	r2, #0
 8005b06:	2180      	movs	r1, #128	; 0x80
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f7ff fee1 	bl	80058d0 <SPI_WaitFlagStateUntilTimeout>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d016      	beq.n	8005b42 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b18:	f043 0220 	orr.w	r2, r3, #32
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e00f      	b.n	8005b44 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3a:	2b80      	cmp	r3, #128	; 0x80
 8005b3c:	d0f2      	beq.n	8005b24 <SPI_EndRxTxTransaction+0x78>
 8005b3e:	e000      	b.n	8005b42 <SPI_EndRxTxTransaction+0x96>
        break;
 8005b40:	bf00      	nop
  }

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	20000000 	.word	0x20000000
 8005b50:	165e9f81 	.word	0x165e9f81

08005b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e041      	b.n	8005bea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d106      	bne.n	8005b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f839 	bl	8005bf2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3304      	adds	r3, #4
 8005b90:	4619      	mov	r1, r3
 8005b92:	4610      	mov	r0, r2
 8005b94:	f000 f9c0 	bl	8005f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
	...

08005c08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d001      	beq.n	8005c20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e04e      	b.n	8005cbe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0201 	orr.w	r2, r2, #1
 8005c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a23      	ldr	r2, [pc, #140]	; (8005ccc <HAL_TIM_Base_Start_IT+0xc4>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d022      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x80>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4a:	d01d      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x80>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a1f      	ldr	r2, [pc, #124]	; (8005cd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d018      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x80>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a1e      	ldr	r2, [pc, #120]	; (8005cd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d013      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x80>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a1c      	ldr	r2, [pc, #112]	; (8005cd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00e      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x80>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a1b      	ldr	r2, [pc, #108]	; (8005cdc <HAL_TIM_Base_Start_IT+0xd4>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d009      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x80>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a19      	ldr	r2, [pc, #100]	; (8005ce0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d004      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x80>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a18      	ldr	r2, [pc, #96]	; (8005ce4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d111      	bne.n	8005cac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 0307 	and.w	r3, r3, #7
 8005c92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b06      	cmp	r3, #6
 8005c98:	d010      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 0201 	orr.w	r2, r2, #1
 8005ca8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005caa:	e007      	b.n	8005cbc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0201 	orr.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	40010000 	.word	0x40010000
 8005cd0:	40000400 	.word	0x40000400
 8005cd4:	40000800 	.word	0x40000800
 8005cd8:	40000c00 	.word	0x40000c00
 8005cdc:	40010400 	.word	0x40010400
 8005ce0:	40014000 	.word	0x40014000
 8005ce4:	40001800 	.word	0x40001800

08005ce8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d020      	beq.n	8005d4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d01b      	beq.n	8005d4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f06f 0202 	mvn.w	r2, #2
 8005d1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f8d2 	bl	8005edc <HAL_TIM_IC_CaptureCallback>
 8005d38:	e005      	b.n	8005d46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f8c4 	bl	8005ec8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f8d5 	bl	8005ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d020      	beq.n	8005d98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d01b      	beq.n	8005d98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f06f 0204 	mvn.w	r2, #4
 8005d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f8ac 	bl	8005edc <HAL_TIM_IC_CaptureCallback>
 8005d84:	e005      	b.n	8005d92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f89e 	bl	8005ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f8af 	bl	8005ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f003 0308 	and.w	r3, r3, #8
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d020      	beq.n	8005de4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f003 0308 	and.w	r3, r3, #8
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d01b      	beq.n	8005de4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f06f 0208 	mvn.w	r2, #8
 8005db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2204      	movs	r2, #4
 8005dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f886 	bl	8005edc <HAL_TIM_IC_CaptureCallback>
 8005dd0:	e005      	b.n	8005dde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f878 	bl	8005ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f889 	bl	8005ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f003 0310 	and.w	r3, r3, #16
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d020      	beq.n	8005e30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f003 0310 	and.w	r3, r3, #16
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d01b      	beq.n	8005e30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f06f 0210 	mvn.w	r2, #16
 8005e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2208      	movs	r2, #8
 8005e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f860 	bl	8005edc <HAL_TIM_IC_CaptureCallback>
 8005e1c:	e005      	b.n	8005e2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f852 	bl	8005ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f863 	bl	8005ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00c      	beq.n	8005e54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d007      	beq.n	8005e54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f06f 0201 	mvn.w	r2, #1
 8005e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7fb fbf8 	bl	8001644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00c      	beq.n	8005e78 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d007      	beq.n	8005e78 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f906 	bl	8006084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00c      	beq.n	8005e9c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d007      	beq.n	8005e9c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f834 	bl	8005f04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	f003 0320 	and.w	r3, r3, #32
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00c      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d007      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f06f 0220 	mvn.w	r2, #32
 8005eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f8d8 	bl	8006070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ec0:	bf00      	nop
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a46      	ldr	r2, [pc, #280]	; (8006044 <TIM_Base_SetConfig+0x12c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d013      	beq.n	8005f58 <TIM_Base_SetConfig+0x40>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f36:	d00f      	beq.n	8005f58 <TIM_Base_SetConfig+0x40>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a43      	ldr	r2, [pc, #268]	; (8006048 <TIM_Base_SetConfig+0x130>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d00b      	beq.n	8005f58 <TIM_Base_SetConfig+0x40>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a42      	ldr	r2, [pc, #264]	; (800604c <TIM_Base_SetConfig+0x134>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d007      	beq.n	8005f58 <TIM_Base_SetConfig+0x40>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a41      	ldr	r2, [pc, #260]	; (8006050 <TIM_Base_SetConfig+0x138>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d003      	beq.n	8005f58 <TIM_Base_SetConfig+0x40>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a40      	ldr	r2, [pc, #256]	; (8006054 <TIM_Base_SetConfig+0x13c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d108      	bne.n	8005f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a35      	ldr	r2, [pc, #212]	; (8006044 <TIM_Base_SetConfig+0x12c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d02b      	beq.n	8005fca <TIM_Base_SetConfig+0xb2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f78:	d027      	beq.n	8005fca <TIM_Base_SetConfig+0xb2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a32      	ldr	r2, [pc, #200]	; (8006048 <TIM_Base_SetConfig+0x130>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d023      	beq.n	8005fca <TIM_Base_SetConfig+0xb2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a31      	ldr	r2, [pc, #196]	; (800604c <TIM_Base_SetConfig+0x134>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d01f      	beq.n	8005fca <TIM_Base_SetConfig+0xb2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a30      	ldr	r2, [pc, #192]	; (8006050 <TIM_Base_SetConfig+0x138>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d01b      	beq.n	8005fca <TIM_Base_SetConfig+0xb2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a2f      	ldr	r2, [pc, #188]	; (8006054 <TIM_Base_SetConfig+0x13c>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d017      	beq.n	8005fca <TIM_Base_SetConfig+0xb2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a2e      	ldr	r2, [pc, #184]	; (8006058 <TIM_Base_SetConfig+0x140>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d013      	beq.n	8005fca <TIM_Base_SetConfig+0xb2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a2d      	ldr	r2, [pc, #180]	; (800605c <TIM_Base_SetConfig+0x144>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00f      	beq.n	8005fca <TIM_Base_SetConfig+0xb2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a2c      	ldr	r2, [pc, #176]	; (8006060 <TIM_Base_SetConfig+0x148>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00b      	beq.n	8005fca <TIM_Base_SetConfig+0xb2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a2b      	ldr	r2, [pc, #172]	; (8006064 <TIM_Base_SetConfig+0x14c>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d007      	beq.n	8005fca <TIM_Base_SetConfig+0xb2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a2a      	ldr	r2, [pc, #168]	; (8006068 <TIM_Base_SetConfig+0x150>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d003      	beq.n	8005fca <TIM_Base_SetConfig+0xb2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a29      	ldr	r2, [pc, #164]	; (800606c <TIM_Base_SetConfig+0x154>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d108      	bne.n	8005fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a10      	ldr	r2, [pc, #64]	; (8006044 <TIM_Base_SetConfig+0x12c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d003      	beq.n	8006010 <TIM_Base_SetConfig+0xf8>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a12      	ldr	r2, [pc, #72]	; (8006054 <TIM_Base_SetConfig+0x13c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d103      	bne.n	8006018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	691a      	ldr	r2, [r3, #16]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b01      	cmp	r3, #1
 8006028:	d105      	bne.n	8006036 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	f023 0201 	bic.w	r2, r3, #1
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	611a      	str	r2, [r3, #16]
  }
}
 8006036:	bf00      	nop
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	40010000 	.word	0x40010000
 8006048:	40000400 	.word	0x40000400
 800604c:	40000800 	.word	0x40000800
 8006050:	40000c00 	.word	0x40000c00
 8006054:	40010400 	.word	0x40010400
 8006058:	40014000 	.word	0x40014000
 800605c:	40014400 	.word	0x40014400
 8006060:	40014800 	.word	0x40014800
 8006064:	40001800 	.word	0x40001800
 8006068:	40001c00 	.word	0x40001c00
 800606c:	40002000 	.word	0x40002000

08006070 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e042      	b.n	8006130 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d106      	bne.n	80060c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7fb fedc 	bl	8001e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2224      	movs	r2, #36	; 0x24
 80060c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f82b 	bl	8006138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	691a      	ldr	r2, [r3, #16]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	695a      	ldr	r2, [r3, #20]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006100:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006110:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2220      	movs	r2, #32
 800611c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2220      	movs	r2, #32
 8006124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800613c:	b0c0      	sub	sp, #256	; 0x100
 800613e:	af00      	add	r7, sp, #0
 8006140:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006154:	68d9      	ldr	r1, [r3, #12]
 8006156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	ea40 0301 	orr.w	r3, r0, r1
 8006160:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	431a      	orrs	r2, r3
 8006170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	431a      	orrs	r2, r3
 8006178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	4313      	orrs	r3, r2
 8006180:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006190:	f021 010c 	bic.w	r1, r1, #12
 8006194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800619e:	430b      	orrs	r3, r1
 80061a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80061ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b2:	6999      	ldr	r1, [r3, #24]
 80061b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	ea40 0301 	orr.w	r3, r0, r1
 80061be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	4b8f      	ldr	r3, [pc, #572]	; (8006404 <UART_SetConfig+0x2cc>)
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d005      	beq.n	80061d8 <UART_SetConfig+0xa0>
 80061cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	4b8d      	ldr	r3, [pc, #564]	; (8006408 <UART_SetConfig+0x2d0>)
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d104      	bne.n	80061e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061d8:	f7fe fea0 	bl	8004f1c <HAL_RCC_GetPCLK2Freq>
 80061dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80061e0:	e003      	b.n	80061ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061e2:	f7fe fe87 	bl	8004ef4 <HAL_RCC_GetPCLK1Freq>
 80061e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f4:	f040 810c 	bne.w	8006410 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061fc:	2200      	movs	r2, #0
 80061fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006202:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006206:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800620a:	4622      	mov	r2, r4
 800620c:	462b      	mov	r3, r5
 800620e:	1891      	adds	r1, r2, r2
 8006210:	65b9      	str	r1, [r7, #88]	; 0x58
 8006212:	415b      	adcs	r3, r3
 8006214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006216:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800621a:	4621      	mov	r1, r4
 800621c:	eb12 0801 	adds.w	r8, r2, r1
 8006220:	4629      	mov	r1, r5
 8006222:	eb43 0901 	adc.w	r9, r3, r1
 8006226:	f04f 0200 	mov.w	r2, #0
 800622a:	f04f 0300 	mov.w	r3, #0
 800622e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800623a:	4690      	mov	r8, r2
 800623c:	4699      	mov	r9, r3
 800623e:	4623      	mov	r3, r4
 8006240:	eb18 0303 	adds.w	r3, r8, r3
 8006244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006248:	462b      	mov	r3, r5
 800624a:	eb49 0303 	adc.w	r3, r9, r3
 800624e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800625e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006262:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006266:	460b      	mov	r3, r1
 8006268:	18db      	adds	r3, r3, r3
 800626a:	653b      	str	r3, [r7, #80]	; 0x50
 800626c:	4613      	mov	r3, r2
 800626e:	eb42 0303 	adc.w	r3, r2, r3
 8006272:	657b      	str	r3, [r7, #84]	; 0x54
 8006274:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006278:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800627c:	f7fa f810 	bl	80002a0 <__aeabi_uldivmod>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	4b61      	ldr	r3, [pc, #388]	; (800640c <UART_SetConfig+0x2d4>)
 8006286:	fba3 2302 	umull	r2, r3, r3, r2
 800628a:	095b      	lsrs	r3, r3, #5
 800628c:	011c      	lsls	r4, r3, #4
 800628e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006292:	2200      	movs	r2, #0
 8006294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006298:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800629c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80062a0:	4642      	mov	r2, r8
 80062a2:	464b      	mov	r3, r9
 80062a4:	1891      	adds	r1, r2, r2
 80062a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80062a8:	415b      	adcs	r3, r3
 80062aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80062b0:	4641      	mov	r1, r8
 80062b2:	eb12 0a01 	adds.w	sl, r2, r1
 80062b6:	4649      	mov	r1, r9
 80062b8:	eb43 0b01 	adc.w	fp, r3, r1
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	f04f 0300 	mov.w	r3, #0
 80062c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062d0:	4692      	mov	sl, r2
 80062d2:	469b      	mov	fp, r3
 80062d4:	4643      	mov	r3, r8
 80062d6:	eb1a 0303 	adds.w	r3, sl, r3
 80062da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062de:	464b      	mov	r3, r9
 80062e0:	eb4b 0303 	adc.w	r3, fp, r3
 80062e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80062f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80062fc:	460b      	mov	r3, r1
 80062fe:	18db      	adds	r3, r3, r3
 8006300:	643b      	str	r3, [r7, #64]	; 0x40
 8006302:	4613      	mov	r3, r2
 8006304:	eb42 0303 	adc.w	r3, r2, r3
 8006308:	647b      	str	r3, [r7, #68]	; 0x44
 800630a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800630e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006312:	f7f9 ffc5 	bl	80002a0 <__aeabi_uldivmod>
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	4611      	mov	r1, r2
 800631c:	4b3b      	ldr	r3, [pc, #236]	; (800640c <UART_SetConfig+0x2d4>)
 800631e:	fba3 2301 	umull	r2, r3, r3, r1
 8006322:	095b      	lsrs	r3, r3, #5
 8006324:	2264      	movs	r2, #100	; 0x64
 8006326:	fb02 f303 	mul.w	r3, r2, r3
 800632a:	1acb      	subs	r3, r1, r3
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006332:	4b36      	ldr	r3, [pc, #216]	; (800640c <UART_SetConfig+0x2d4>)
 8006334:	fba3 2302 	umull	r2, r3, r3, r2
 8006338:	095b      	lsrs	r3, r3, #5
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006340:	441c      	add	r4, r3
 8006342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006346:	2200      	movs	r2, #0
 8006348:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800634c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006350:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006354:	4642      	mov	r2, r8
 8006356:	464b      	mov	r3, r9
 8006358:	1891      	adds	r1, r2, r2
 800635a:	63b9      	str	r1, [r7, #56]	; 0x38
 800635c:	415b      	adcs	r3, r3
 800635e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006360:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006364:	4641      	mov	r1, r8
 8006366:	1851      	adds	r1, r2, r1
 8006368:	6339      	str	r1, [r7, #48]	; 0x30
 800636a:	4649      	mov	r1, r9
 800636c:	414b      	adcs	r3, r1
 800636e:	637b      	str	r3, [r7, #52]	; 0x34
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	f04f 0300 	mov.w	r3, #0
 8006378:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800637c:	4659      	mov	r1, fp
 800637e:	00cb      	lsls	r3, r1, #3
 8006380:	4651      	mov	r1, sl
 8006382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006386:	4651      	mov	r1, sl
 8006388:	00ca      	lsls	r2, r1, #3
 800638a:	4610      	mov	r0, r2
 800638c:	4619      	mov	r1, r3
 800638e:	4603      	mov	r3, r0
 8006390:	4642      	mov	r2, r8
 8006392:	189b      	adds	r3, r3, r2
 8006394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006398:	464b      	mov	r3, r9
 800639a:	460a      	mov	r2, r1
 800639c:	eb42 0303 	adc.w	r3, r2, r3
 80063a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80063b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80063b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80063b8:	460b      	mov	r3, r1
 80063ba:	18db      	adds	r3, r3, r3
 80063bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80063be:	4613      	mov	r3, r2
 80063c0:	eb42 0303 	adc.w	r3, r2, r3
 80063c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80063ce:	f7f9 ff67 	bl	80002a0 <__aeabi_uldivmod>
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	4b0d      	ldr	r3, [pc, #52]	; (800640c <UART_SetConfig+0x2d4>)
 80063d8:	fba3 1302 	umull	r1, r3, r3, r2
 80063dc:	095b      	lsrs	r3, r3, #5
 80063de:	2164      	movs	r1, #100	; 0x64
 80063e0:	fb01 f303 	mul.w	r3, r1, r3
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	3332      	adds	r3, #50	; 0x32
 80063ea:	4a08      	ldr	r2, [pc, #32]	; (800640c <UART_SetConfig+0x2d4>)
 80063ec:	fba2 2303 	umull	r2, r3, r2, r3
 80063f0:	095b      	lsrs	r3, r3, #5
 80063f2:	f003 0207 	and.w	r2, r3, #7
 80063f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4422      	add	r2, r4
 80063fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006400:	e106      	b.n	8006610 <UART_SetConfig+0x4d8>
 8006402:	bf00      	nop
 8006404:	40011000 	.word	0x40011000
 8006408:	40011400 	.word	0x40011400
 800640c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006414:	2200      	movs	r2, #0
 8006416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800641a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800641e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006422:	4642      	mov	r2, r8
 8006424:	464b      	mov	r3, r9
 8006426:	1891      	adds	r1, r2, r2
 8006428:	6239      	str	r1, [r7, #32]
 800642a:	415b      	adcs	r3, r3
 800642c:	627b      	str	r3, [r7, #36]	; 0x24
 800642e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006432:	4641      	mov	r1, r8
 8006434:	1854      	adds	r4, r2, r1
 8006436:	4649      	mov	r1, r9
 8006438:	eb43 0501 	adc.w	r5, r3, r1
 800643c:	f04f 0200 	mov.w	r2, #0
 8006440:	f04f 0300 	mov.w	r3, #0
 8006444:	00eb      	lsls	r3, r5, #3
 8006446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800644a:	00e2      	lsls	r2, r4, #3
 800644c:	4614      	mov	r4, r2
 800644e:	461d      	mov	r5, r3
 8006450:	4643      	mov	r3, r8
 8006452:	18e3      	adds	r3, r4, r3
 8006454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006458:	464b      	mov	r3, r9
 800645a:	eb45 0303 	adc.w	r3, r5, r3
 800645e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800646e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006472:	f04f 0200 	mov.w	r2, #0
 8006476:	f04f 0300 	mov.w	r3, #0
 800647a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800647e:	4629      	mov	r1, r5
 8006480:	008b      	lsls	r3, r1, #2
 8006482:	4621      	mov	r1, r4
 8006484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006488:	4621      	mov	r1, r4
 800648a:	008a      	lsls	r2, r1, #2
 800648c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006490:	f7f9 ff06 	bl	80002a0 <__aeabi_uldivmod>
 8006494:	4602      	mov	r2, r0
 8006496:	460b      	mov	r3, r1
 8006498:	4b60      	ldr	r3, [pc, #384]	; (800661c <UART_SetConfig+0x4e4>)
 800649a:	fba3 2302 	umull	r2, r3, r3, r2
 800649e:	095b      	lsrs	r3, r3, #5
 80064a0:	011c      	lsls	r4, r3, #4
 80064a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80064b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80064b4:	4642      	mov	r2, r8
 80064b6:	464b      	mov	r3, r9
 80064b8:	1891      	adds	r1, r2, r2
 80064ba:	61b9      	str	r1, [r7, #24]
 80064bc:	415b      	adcs	r3, r3
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064c4:	4641      	mov	r1, r8
 80064c6:	1851      	adds	r1, r2, r1
 80064c8:	6139      	str	r1, [r7, #16]
 80064ca:	4649      	mov	r1, r9
 80064cc:	414b      	adcs	r3, r1
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	f04f 0200 	mov.w	r2, #0
 80064d4:	f04f 0300 	mov.w	r3, #0
 80064d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064dc:	4659      	mov	r1, fp
 80064de:	00cb      	lsls	r3, r1, #3
 80064e0:	4651      	mov	r1, sl
 80064e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064e6:	4651      	mov	r1, sl
 80064e8:	00ca      	lsls	r2, r1, #3
 80064ea:	4610      	mov	r0, r2
 80064ec:	4619      	mov	r1, r3
 80064ee:	4603      	mov	r3, r0
 80064f0:	4642      	mov	r2, r8
 80064f2:	189b      	adds	r3, r3, r2
 80064f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064f8:	464b      	mov	r3, r9
 80064fa:	460a      	mov	r2, r1
 80064fc:	eb42 0303 	adc.w	r3, r2, r3
 8006500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	67bb      	str	r3, [r7, #120]	; 0x78
 800650e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006510:	f04f 0200 	mov.w	r2, #0
 8006514:	f04f 0300 	mov.w	r3, #0
 8006518:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800651c:	4649      	mov	r1, r9
 800651e:	008b      	lsls	r3, r1, #2
 8006520:	4641      	mov	r1, r8
 8006522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006526:	4641      	mov	r1, r8
 8006528:	008a      	lsls	r2, r1, #2
 800652a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800652e:	f7f9 feb7 	bl	80002a0 <__aeabi_uldivmod>
 8006532:	4602      	mov	r2, r0
 8006534:	460b      	mov	r3, r1
 8006536:	4611      	mov	r1, r2
 8006538:	4b38      	ldr	r3, [pc, #224]	; (800661c <UART_SetConfig+0x4e4>)
 800653a:	fba3 2301 	umull	r2, r3, r3, r1
 800653e:	095b      	lsrs	r3, r3, #5
 8006540:	2264      	movs	r2, #100	; 0x64
 8006542:	fb02 f303 	mul.w	r3, r2, r3
 8006546:	1acb      	subs	r3, r1, r3
 8006548:	011b      	lsls	r3, r3, #4
 800654a:	3332      	adds	r3, #50	; 0x32
 800654c:	4a33      	ldr	r2, [pc, #204]	; (800661c <UART_SetConfig+0x4e4>)
 800654e:	fba2 2303 	umull	r2, r3, r2, r3
 8006552:	095b      	lsrs	r3, r3, #5
 8006554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006558:	441c      	add	r4, r3
 800655a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800655e:	2200      	movs	r2, #0
 8006560:	673b      	str	r3, [r7, #112]	; 0x70
 8006562:	677a      	str	r2, [r7, #116]	; 0x74
 8006564:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006568:	4642      	mov	r2, r8
 800656a:	464b      	mov	r3, r9
 800656c:	1891      	adds	r1, r2, r2
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	415b      	adcs	r3, r3
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006578:	4641      	mov	r1, r8
 800657a:	1851      	adds	r1, r2, r1
 800657c:	6039      	str	r1, [r7, #0]
 800657e:	4649      	mov	r1, r9
 8006580:	414b      	adcs	r3, r1
 8006582:	607b      	str	r3, [r7, #4]
 8006584:	f04f 0200 	mov.w	r2, #0
 8006588:	f04f 0300 	mov.w	r3, #0
 800658c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006590:	4659      	mov	r1, fp
 8006592:	00cb      	lsls	r3, r1, #3
 8006594:	4651      	mov	r1, sl
 8006596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800659a:	4651      	mov	r1, sl
 800659c:	00ca      	lsls	r2, r1, #3
 800659e:	4610      	mov	r0, r2
 80065a0:	4619      	mov	r1, r3
 80065a2:	4603      	mov	r3, r0
 80065a4:	4642      	mov	r2, r8
 80065a6:	189b      	adds	r3, r3, r2
 80065a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80065aa:	464b      	mov	r3, r9
 80065ac:	460a      	mov	r2, r1
 80065ae:	eb42 0303 	adc.w	r3, r2, r3
 80065b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	663b      	str	r3, [r7, #96]	; 0x60
 80065be:	667a      	str	r2, [r7, #100]	; 0x64
 80065c0:	f04f 0200 	mov.w	r2, #0
 80065c4:	f04f 0300 	mov.w	r3, #0
 80065c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80065cc:	4649      	mov	r1, r9
 80065ce:	008b      	lsls	r3, r1, #2
 80065d0:	4641      	mov	r1, r8
 80065d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065d6:	4641      	mov	r1, r8
 80065d8:	008a      	lsls	r2, r1, #2
 80065da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80065de:	f7f9 fe5f 	bl	80002a0 <__aeabi_uldivmod>
 80065e2:	4602      	mov	r2, r0
 80065e4:	460b      	mov	r3, r1
 80065e6:	4b0d      	ldr	r3, [pc, #52]	; (800661c <UART_SetConfig+0x4e4>)
 80065e8:	fba3 1302 	umull	r1, r3, r3, r2
 80065ec:	095b      	lsrs	r3, r3, #5
 80065ee:	2164      	movs	r1, #100	; 0x64
 80065f0:	fb01 f303 	mul.w	r3, r1, r3
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	3332      	adds	r3, #50	; 0x32
 80065fa:	4a08      	ldr	r2, [pc, #32]	; (800661c <UART_SetConfig+0x4e4>)
 80065fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006600:	095b      	lsrs	r3, r3, #5
 8006602:	f003 020f 	and.w	r2, r3, #15
 8006606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4422      	add	r2, r4
 800660e:	609a      	str	r2, [r3, #8]
}
 8006610:	bf00      	nop
 8006612:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006616:	46bd      	mov	sp, r7
 8006618:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800661c:	51eb851f 	.word	0x51eb851f

08006620 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006620:	b5b0      	push	{r4, r5, r7, lr}
 8006622:	b08c      	sub	sp, #48	; 0x30
 8006624:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006626:	2100      	movs	r1, #0
 8006628:	2000      	movs	r0, #0
 800662a:	f00c fae9 	bl	8012c00 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800662e:	4b1a      	ldr	r3, [pc, #104]	; (8006698 <MX_LWIP_Init+0x78>)
 8006630:	2200      	movs	r2, #0
 8006632:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8006634:	4b19      	ldr	r3, [pc, #100]	; (800669c <MX_LWIP_Init+0x7c>)
 8006636:	2200      	movs	r2, #0
 8006638:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800663a:	4b19      	ldr	r3, [pc, #100]	; (80066a0 <MX_LWIP_Init+0x80>)
 800663c:	2200      	movs	r2, #0
 800663e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006640:	4b18      	ldr	r3, [pc, #96]	; (80066a4 <MX_LWIP_Init+0x84>)
 8006642:	9302      	str	r3, [sp, #8]
 8006644:	4b18      	ldr	r3, [pc, #96]	; (80066a8 <MX_LWIP_Init+0x88>)
 8006646:	9301      	str	r3, [sp, #4]
 8006648:	2300      	movs	r3, #0
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	4b14      	ldr	r3, [pc, #80]	; (80066a0 <MX_LWIP_Init+0x80>)
 800664e:	4a13      	ldr	r2, [pc, #76]	; (800669c <MX_LWIP_Init+0x7c>)
 8006650:	4911      	ldr	r1, [pc, #68]	; (8006698 <MX_LWIP_Init+0x78>)
 8006652:	4816      	ldr	r0, [pc, #88]	; (80066ac <MX_LWIP_Init+0x8c>)
 8006654:	f00d f89e 	bl	8013794 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006658:	4814      	ldr	r0, [pc, #80]	; (80066ac <MX_LWIP_Init+0x8c>)
 800665a:	f00d fa55 	bl	8013b08 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800665e:	4813      	ldr	r0, [pc, #76]	; (80066ac <MX_LWIP_Init+0x8c>)
 8006660:	f00d fa62 	bl	8013b28 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006664:	4912      	ldr	r1, [pc, #72]	; (80066b0 <MX_LWIP_Init+0x90>)
 8006666:	4811      	ldr	r0, [pc, #68]	; (80066ac <MX_LWIP_Init+0x8c>)
 8006668:	f00d fb64 	bl	8013d34 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, 2048);
 800666c:	4b11      	ldr	r3, [pc, #68]	; (80066b4 <MX_LWIP_Init+0x94>)
 800666e:	1d3c      	adds	r4, r7, #4
 8006670:	461d      	mov	r5, r3
 8006672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006676:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800667a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800667e:	1d3b      	adds	r3, r7, #4
 8006680:	490a      	ldr	r1, [pc, #40]	; (80066ac <MX_LWIP_Init+0x8c>)
 8006682:	4618      	mov	r0, r3
 8006684:	f000 fd20 	bl	80070c8 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8006688:	4808      	ldr	r0, [pc, #32]	; (80066ac <MX_LWIP_Init+0x8c>)
 800668a:	f015 fc55 	bl	801bf38 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800668e:	bf00      	nop
 8006690:	3720      	adds	r7, #32
 8006692:	46bd      	mov	sp, r7
 8006694:	bdb0      	pop	{r4, r5, r7, pc}
 8006696:	bf00      	nop
 8006698:	20000bc4 	.word	0x20000bc4
 800669c:	20000bc8 	.word	0x20000bc8
 80066a0:	20000bcc 	.word	0x20000bcc
 80066a4:	08012b11 	.word	0x08012b11
 80066a8:	08006b91 	.word	0x08006b91
 80066ac:	20000b8c 	.word	0x20000b8c
 80066b0:	080066b9 	.word	0x080066b9
 80066b4:	0802321c 	.word	0x0802321c

080066b8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80066d4:	4b04      	ldr	r3, [pc, #16]	; (80066e8 <HAL_ETH_RxCpltCallback+0x1c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 fe71 	bl	80073c0 <osSemaphoreRelease>
}
 80066de:	bf00      	nop
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	2000569c 	.word	0x2000569c

080066ec <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80066f4:	4b04      	ldr	r3, [pc, #16]	; (8006708 <HAL_ETH_TxCpltCallback+0x1c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 fe61 	bl	80073c0 <osSemaphoreRelease>
}
 80066fe:	bf00      	nop
 8006700:	3708      	adds	r7, #8
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	200056a0 	.word	0x200056a0

0800670c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7fc fd15 	bl	8003144 <HAL_ETH_GetDMAError>
 800671a:	4603      	mov	r3, r0
 800671c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006720:	2b80      	cmp	r3, #128	; 0x80
 8006722:	d104      	bne.n	800672e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8006724:	4b04      	ldr	r3, [pc, #16]	; (8006738 <HAL_ETH_ErrorCallback+0x2c>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4618      	mov	r0, r3
 800672a:	f000 fe49 	bl	80073c0 <osSemaphoreRelease>
  }
}
 800672e:	bf00      	nop
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	2000569c 	.word	0x2000569c

0800673c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800673c:	b5b0      	push	{r4, r5, r7, lr}
 800673e:	b0ac      	sub	sp, #176	; 0xb0
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t duplex, speed = 0;
 800674a:	2300      	movs	r3, #0
 800674c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  int32_t PHYLinkState = 0;
 8006750:	2300      	movs	r3, #0
 8006752:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 8006756:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800675a:	2264      	movs	r2, #100	; 0x64
 800675c:	2100      	movs	r1, #0
 800675e:	4618      	mov	r0, r3
 8006760:	f01b f9f0 	bl	8021b44 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006764:	4b90      	ldr	r3, [pc, #576]	; (80069a8 <low_level_init+0x26c>)
 8006766:	4a91      	ldr	r2, [pc, #580]	; (80069ac <low_level_init+0x270>)
 8006768:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0xAE;
 800676a:	23ae      	movs	r3, #174	; 0xae
 800676c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[1] = 0x04;
 8006770:	2304      	movs	r3, #4
 8006772:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  MACAddr[2] = 0x65;
 8006776:	2365      	movs	r3, #101	; 0x65
 8006778:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  MACAddr[3] = 0x11;
 800677c:	2311      	movs	r3, #17
 800677e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MACAddr[4] = 0xC2;
 8006782:	23c2      	movs	r3, #194	; 0xc2
 8006784:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  MACAddr[5] = 0xD9;
 8006788:	23d9      	movs	r3, #217	; 0xd9
 800678a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  heth.Init.MACAddr = &MACAddr[0];
 800678e:	4a86      	ldr	r2, [pc, #536]	; (80069a8 <low_level_init+0x26c>)
 8006790:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006794:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006796:	4b84      	ldr	r3, [pc, #528]	; (80069a8 <low_level_init+0x26c>)
 8006798:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800679c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800679e:	4b82      	ldr	r3, [pc, #520]	; (80069a8 <low_level_init+0x26c>)
 80067a0:	4a83      	ldr	r2, [pc, #524]	; (80069b0 <low_level_init+0x274>)
 80067a2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80067a4:	4b80      	ldr	r3, [pc, #512]	; (80069a8 <low_level_init+0x26c>)
 80067a6:	4a83      	ldr	r2, [pc, #524]	; (80069b4 <low_level_init+0x278>)
 80067a8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80067aa:	4b7f      	ldr	r3, [pc, #508]	; (80069a8 <low_level_init+0x26c>)
 80067ac:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80067b0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80067b2:	487d      	ldr	r0, [pc, #500]	; (80069a8 <low_level_init+0x26c>)
 80067b4:	f7fb fe7c 	bl	80024b0 <HAL_ETH_Init>
 80067b8:	4603      	mov	r3, r0
 80067ba:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80067be:	2238      	movs	r2, #56	; 0x38
 80067c0:	2100      	movs	r1, #0
 80067c2:	487d      	ldr	r0, [pc, #500]	; (80069b8 <low_level_init+0x27c>)
 80067c4:	f01b f9be 	bl	8021b44 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80067c8:	4b7b      	ldr	r3, [pc, #492]	; (80069b8 <low_level_init+0x27c>)
 80067ca:	2221      	movs	r2, #33	; 0x21
 80067cc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80067ce:	4b7a      	ldr	r3, [pc, #488]	; (80069b8 <low_level_init+0x27c>)
 80067d0:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80067d4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80067d6:	4b78      	ldr	r3, [pc, #480]	; (80069b8 <low_level_init+0x27c>)
 80067d8:	2200      	movs	r2, #0
 80067da:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80067dc:	4877      	ldr	r0, [pc, #476]	; (80069bc <low_level_init+0x280>)
 80067de:	f00c fe93 	bl	8013508 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2206      	movs	r2, #6
 80067e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80067ea:	4b6f      	ldr	r3, [pc, #444]	; (80069a8 <low_level_init+0x26c>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	781a      	ldrb	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80067f6:	4b6c      	ldr	r3, [pc, #432]	; (80069a8 <low_level_init+0x26c>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	785a      	ldrb	r2, [r3, #1]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006802:	4b69      	ldr	r3, [pc, #420]	; (80069a8 <low_level_init+0x26c>)
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	789a      	ldrb	r2, [r3, #2]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800680e:	4b66      	ldr	r3, [pc, #408]	; (80069a8 <low_level_init+0x26c>)
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	78da      	ldrb	r2, [r3, #3]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800681a:	4b63      	ldr	r3, [pc, #396]	; (80069a8 <low_level_init+0x26c>)
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	791a      	ldrb	r2, [r3, #4]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006826:	4b60      	ldr	r3, [pc, #384]	; (80069a8 <low_level_init+0x26c>)
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	795a      	ldrb	r2, [r3, #5]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006838:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006840:	f043 030a 	orr.w	r3, r3, #10
 8006844:	b2da      	uxtb	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 800684c:	2300      	movs	r3, #0
 800684e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006850:	2300      	movs	r3, #0
 8006852:	633b      	str	r3, [r7, #48]	; 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8006854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006858:	2101      	movs	r1, #1
 800685a:	4618      	mov	r0, r3
 800685c:	f000 fd30 	bl	80072c0 <osSemaphoreCreate>
 8006860:	4603      	mov	r3, r0
 8006862:	4a57      	ldr	r2, [pc, #348]	; (80069c0 <low_level_init+0x284>)
 8006864:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8006866:	2300      	movs	r3, #0
 8006868:	627b      	str	r3, [r7, #36]	; 0x24
 800686a:	2300      	movs	r3, #0
 800686c:	62bb      	str	r3, [r7, #40]	; 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800686e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006872:	2101      	movs	r1, #1
 8006874:	4618      	mov	r0, r3
 8006876:	f000 fd23 	bl	80072c0 <osSemaphoreCreate>
 800687a:	4603      	mov	r3, r0
 800687c:	4a51      	ldr	r2, [pc, #324]	; (80069c4 <low_level_init+0x288>)
 800687e:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8006880:	4b4f      	ldr	r3, [pc, #316]	; (80069c0 <low_level_init+0x284>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2100      	movs	r1, #0
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fd4c 	bl	8007324 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800688c:	4b4d      	ldr	r3, [pc, #308]	; (80069c4 <low_level_init+0x288>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2100      	movs	r1, #0
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fd46 	bl	8007324 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006898:	4b4b      	ldr	r3, [pc, #300]	; (80069c8 <low_level_init+0x28c>)
 800689a:	f107 0408 	add.w	r4, r7, #8
 800689e:	461d      	mov	r5, r3
 80068a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80068a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80068ac:	f107 0308 	add.w	r3, r7, #8
 80068b0:	6879      	ldr	r1, [r7, #4]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fc08 	bl	80070c8 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 80068b8:	4944      	ldr	r1, [pc, #272]	; (80069cc <low_level_init+0x290>)
 80068ba:	4845      	ldr	r0, [pc, #276]	; (80069d0 <low_level_init+0x294>)
 80068bc:	f7fb fb4f 	bl	8001f5e <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 80068c0:	4843      	ldr	r0, [pc, #268]	; (80069d0 <low_level_init+0x294>)
 80068c2:	f7fb fb7e 	bl	8001fc2 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 80068c6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d165      	bne.n	800699a <low_level_init+0x25e>
  {
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 80068ce:	4840      	ldr	r0, [pc, #256]	; (80069d0 <low_level_init+0x294>)
 80068d0:	f7fb fc1f 	bl	8002112 <DP83848_GetLinkState>
 80068d4:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

    /* Get link state */
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 80068d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068dc:	2b01      	cmp	r3, #1
 80068de:	dc06      	bgt.n	80068ee <low_level_init+0x1b2>
    {
      netif_set_link_down(netif);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f00d f9f7 	bl	8013cd4 <netif_set_link_down>
      netif_set_down(netif);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f00d f98a 	bl	8013c00 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80068ec:	e057      	b.n	800699e <low_level_init+0x262>
      switch (PHYLinkState)
 80068ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068f2:	3b02      	subs	r3, #2
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	d82b      	bhi.n	8006950 <low_level_init+0x214>
 80068f8:	a201      	add	r2, pc, #4	; (adr r2, 8006900 <low_level_init+0x1c4>)
 80068fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fe:	bf00      	nop
 8006900:	08006911 	.word	0x08006911
 8006904:	08006923 	.word	0x08006923
 8006908:	08006933 	.word	0x08006933
 800690c:	08006943 	.word	0x08006943
        duplex = ETH_FULLDUPLEX_MODE;
 8006910:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006914:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 8006918:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800691c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8006920:	e01f      	b.n	8006962 <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 8006922:	2300      	movs	r3, #0
 8006924:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 8006928:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800692c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8006930:	e017      	b.n	8006962 <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 8006932:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006936:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 800693a:	2300      	movs	r3, #0
 800693c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8006940:	e00f      	b.n	8006962 <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 8006942:	2300      	movs	r3, #0
 8006944:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 8006948:	2300      	movs	r3, #0
 800694a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 800694e:	e008      	b.n	8006962 <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 8006950:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006954:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 8006958:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800695c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8006960:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006962:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006966:	4619      	mov	r1, r3
 8006968:	480f      	ldr	r0, [pc, #60]	; (80069a8 <low_level_init+0x26c>)
 800696a:	f7fc fa91 	bl	8002e90 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800696e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006972:	657b      	str	r3, [r7, #84]	; 0x54
    MACConf.Speed = speed;
 8006974:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006978:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800697a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800697e:	4619      	mov	r1, r3
 8006980:	4809      	ldr	r0, [pc, #36]	; (80069a8 <low_level_init+0x26c>)
 8006982:	f7fc fb6f 	bl	8003064 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8006986:	4808      	ldr	r0, [pc, #32]	; (80069a8 <low_level_init+0x26c>)
 8006988:	f7fb fe10 	bl	80025ac <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f00d f8cb 	bl	8013b28 <netif_set_up>
    netif_set_link_up(netif);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f00d f966 	bl	8013c64 <netif_set_link_up>
}
 8006998:	e001      	b.n	800699e <low_level_init+0x262>
    Error_Handler();
 800699a:	f7fa fe65 	bl	8001668 <Error_Handler>
}
 800699e:	bf00      	nop
 80069a0:	37b0      	adds	r7, #176	; 0xb0
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bdb0      	pop	{r4, r5, r7, pc}
 80069a6:	bf00      	nop
 80069a8:	200056a4 	.word	0x200056a4
 80069ac:	40028000 	.word	0x40028000
 80069b0:	200055fc 	.word	0x200055fc
 80069b4:	2000555c 	.word	0x2000555c
 80069b8:	20005754 	.word	0x20005754
 80069bc:	080271b8 	.word	0x080271b8
 80069c0:	2000569c 	.word	0x2000569c
 80069c4:	200056a0 	.word	0x200056a0
 80069c8:	08023240 	.word	0x08023240
 80069cc:	2000000c 	.word	0x2000000c
 80069d0:	2000578c 	.word	0x2000578c

080069d4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b092      	sub	sp, #72	; 0x48
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80069e2:	2300      	movs	r3, #0
 80069e4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80069ec:	f107 030c 	add.w	r3, r7, #12
 80069f0:	2230      	movs	r2, #48	; 0x30
 80069f2:	2100      	movs	r1, #0
 80069f4:	4618      	mov	r0, r3
 80069f6:	f01b f8a5 	bl	8021b44 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80069fa:	f107 030c 	add.w	r3, r7, #12
 80069fe:	2230      	movs	r2, #48	; 0x30
 8006a00:	2100      	movs	r1, #0
 8006a02:	4618      	mov	r0, r3
 8006a04:	f01b f89e 	bl	8021b44 <memset>

  for(q = p; q != NULL; q = q->next)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8006a0c:	e045      	b.n	8006a9a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a10:	2b03      	cmp	r3, #3
 8006a12:	d902      	bls.n	8006a1a <low_level_output+0x46>
      return ERR_IF;
 8006a14:	f06f 030b 	mvn.w	r3, #11
 8006a18:	e06c      	b.n	8006af4 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8006a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a1c:	6859      	ldr	r1, [r3, #4]
 8006a1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a20:	4613      	mov	r3, r2
 8006a22:	005b      	lsls	r3, r3, #1
 8006a24:	4413      	add	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	3348      	adds	r3, #72	; 0x48
 8006a2a:	443b      	add	r3, r7
 8006a2c:	3b3c      	subs	r3, #60	; 0x3c
 8006a2e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a32:	895b      	ldrh	r3, [r3, #10]
 8006a34:	4619      	mov	r1, r3
 8006a36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a38:	4613      	mov	r3, r2
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	4413      	add	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	3348      	adds	r3, #72	; 0x48
 8006a42:	443b      	add	r3, r7
 8006a44:	3b38      	subs	r3, #56	; 0x38
 8006a46:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d011      	beq.n	8006a72 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a50:	1e5a      	subs	r2, r3, #1
 8006a52:	f107 000c 	add.w	r0, r7, #12
 8006a56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a58:	460b      	mov	r3, r1
 8006a5a:	005b      	lsls	r3, r3, #1
 8006a5c:	440b      	add	r3, r1
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	18c1      	adds	r1, r0, r3
 8006a62:	4613      	mov	r3, r2
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	4413      	add	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	3348      	adds	r3, #72	; 0x48
 8006a6c:	443b      	add	r3, r7
 8006a6e:	3b34      	subs	r3, #52	; 0x34
 8006a70:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d109      	bne.n	8006a8e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006a7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	005b      	lsls	r3, r3, #1
 8006a80:	4413      	add	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	3348      	adds	r3, #72	; 0x48
 8006a86:	443b      	add	r3, r7
 8006a88:	3b34      	subs	r3, #52	; 0x34
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a90:	3301      	adds	r3, #1
 8006a92:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8006a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	643b      	str	r3, [r7, #64]	; 0x40
 8006a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1b6      	bne.n	8006a0e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	891b      	ldrh	r3, [r3, #8]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	4b15      	ldr	r3, [pc, #84]	; (8006afc <low_level_output+0x128>)
 8006aa8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006aaa:	4a14      	ldr	r2, [pc, #80]	; (8006afc <low_level_output+0x128>)
 8006aac:	f107 030c 	add.w	r3, r7, #12
 8006ab0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006ab2:	4a12      	ldr	r2, [pc, #72]	; (8006afc <low_level_output+0x128>)
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8006ab8:	6838      	ldr	r0, [r7, #0]
 8006aba:	f00d fd8f 	bl	80145dc <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8006abe:	490f      	ldr	r1, [pc, #60]	; (8006afc <low_level_output+0x128>)
 8006ac0:	480f      	ldr	r0, [pc, #60]	; (8006b00 <low_level_output+0x12c>)
 8006ac2:	f7fb fe80 	bl	80027c6 <HAL_ETH_Transmit_IT>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10e      	bne.n	8006aea <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8006acc:	bf00      	nop
 8006ace:	4b0d      	ldr	r3, [pc, #52]	; (8006b04 <low_level_output+0x130>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 fc24 	bl	8007324 <osSemaphoreWait>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1f5      	bne.n	8006ace <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8006ae2:	4807      	ldr	r0, [pc, #28]	; (8006b00 <low_level_output+0x12c>)
 8006ae4:	f7fc f80e 	bl	8002b04 <HAL_ETH_ReleaseTxPacket>
 8006ae8:	e002      	b.n	8006af0 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8006aea:	6838      	ldr	r0, [r7, #0]
 8006aec:	f00d fcd0 	bl	8014490 <pbuf_free>
  }

  return errval;
 8006af0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3748      	adds	r7, #72	; 0x48
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	20005754 	.word	0x20005754
 8006b00:	200056a4 	.word	0x200056a4
 8006b04:	200056a0 	.word	0x200056a0

08006b08 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006b10:	2300      	movs	r3, #0
 8006b12:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006b14:	4b07      	ldr	r3, [pc, #28]	; (8006b34 <low_level_input+0x2c>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d105      	bne.n	8006b28 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006b1c:	f107 030c 	add.w	r3, r7, #12
 8006b20:	4619      	mov	r1, r3
 8006b22:	4805      	ldr	r0, [pc, #20]	; (8006b38 <low_level_input+0x30>)
 8006b24:	f7fb feab 	bl	800287e <HAL_ETH_ReadData>
  }

  return p;
 8006b28:	68fb      	ldr	r3, [r7, #12]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	20005558 	.word	0x20005558
 8006b38:	200056a4 	.word	0x200056a4

08006b3c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006b44:	2300      	movs	r3, #0
 8006b46:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006b4c:	4b0f      	ldr	r3, [pc, #60]	; (8006b8c <ethernetif_input+0x50>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 fbe5 	bl	8007324 <osSemaphoreWait>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1f5      	bne.n	8006b4c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8006b60:	68b8      	ldr	r0, [r7, #8]
 8006b62:	f7ff ffd1 	bl	8006b08 <low_level_input>
 8006b66:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	68b9      	ldr	r1, [r7, #8]
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	4798      	blx	r3
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d002      	beq.n	8006b84 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f00d fc86 	bl	8014490 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1ea      	bne.n	8006b60 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006b8a:	e7df      	b.n	8006b4c <ethernetif_input+0x10>
 8006b8c:	2000569c 	.word	0x2000569c

08006b90 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <ethernetif_init+0x1c>
 8006b9e:	4b0e      	ldr	r3, [pc, #56]	; (8006bd8 <ethernetif_init+0x48>)
 8006ba0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006ba4:	490d      	ldr	r1, [pc, #52]	; (8006bdc <ethernetif_init+0x4c>)
 8006ba6:	480e      	ldr	r0, [pc, #56]	; (8006be0 <ethernetif_init+0x50>)
 8006ba8:	f01a fdb6 	bl	8021718 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2273      	movs	r2, #115	; 0x73
 8006bb0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2274      	movs	r2, #116	; 0x74
 8006bb8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a09      	ldr	r2, [pc, #36]	; (8006be4 <ethernetif_init+0x54>)
 8006bc0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a08      	ldr	r2, [pc, #32]	; (8006be8 <ethernetif_init+0x58>)
 8006bc6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7ff fdb7 	bl	800673c <low_level_init>

  return ERR_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	0802325c 	.word	0x0802325c
 8006bdc:	08023278 	.word	0x08023278
 8006be0:	08023288 	.word	0x08023288
 8006be4:	0801de05 	.word	0x0801de05
 8006be8:	080069d5 	.word	0x080069d5

08006bec <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006bf8:	68f9      	ldr	r1, [r7, #12]
 8006bfa:	4809      	ldr	r0, [pc, #36]	; (8006c20 <pbuf_free_custom+0x34>)
 8006bfc:	f00c fd74 	bl	80136e8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006c00:	4b08      	ldr	r3, [pc, #32]	; (8006c24 <pbuf_free_custom+0x38>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d107      	bne.n	8006c18 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006c08:	4b06      	ldr	r3, [pc, #24]	; (8006c24 <pbuf_free_custom+0x38>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8006c0e:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <pbuf_free_custom+0x3c>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 fbd4 	bl	80073c0 <osSemaphoreRelease>
  }
}
 8006c18:	bf00      	nop
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	080271b8 	.word	0x080271b8
 8006c24:	20005558 	.word	0x20005558
 8006c28:	2000569c 	.word	0x2000569c

08006c2c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006c30:	f7fb fb2c 	bl	800228c <HAL_GetTick>
 8006c34:	4603      	mov	r3, r0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	bd80      	pop	{r7, pc}
	...

08006c3c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b08e      	sub	sp, #56	; 0x38
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c48:	2200      	movs	r2, #0
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	605a      	str	r2, [r3, #4]
 8006c4e:	609a      	str	r2, [r3, #8]
 8006c50:	60da      	str	r2, [r3, #12]
 8006c52:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a4a      	ldr	r2, [pc, #296]	; (8006d84 <HAL_ETH_MspInit+0x148>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	f040 808d 	bne.w	8006d7a <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006c60:	2300      	movs	r3, #0
 8006c62:	623b      	str	r3, [r7, #32]
 8006c64:	4b48      	ldr	r3, [pc, #288]	; (8006d88 <HAL_ETH_MspInit+0x14c>)
 8006c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c68:	4a47      	ldr	r2, [pc, #284]	; (8006d88 <HAL_ETH_MspInit+0x14c>)
 8006c6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8006c70:	4b45      	ldr	r3, [pc, #276]	; (8006d88 <HAL_ETH_MspInit+0x14c>)
 8006c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c78:	623b      	str	r3, [r7, #32]
 8006c7a:	6a3b      	ldr	r3, [r7, #32]
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	61fb      	str	r3, [r7, #28]
 8006c80:	4b41      	ldr	r3, [pc, #260]	; (8006d88 <HAL_ETH_MspInit+0x14c>)
 8006c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c84:	4a40      	ldr	r2, [pc, #256]	; (8006d88 <HAL_ETH_MspInit+0x14c>)
 8006c86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8006c8c:	4b3e      	ldr	r3, [pc, #248]	; (8006d88 <HAL_ETH_MspInit+0x14c>)
 8006c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c94:	61fb      	str	r3, [r7, #28]
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	2300      	movs	r3, #0
 8006c9a:	61bb      	str	r3, [r7, #24]
 8006c9c:	4b3a      	ldr	r3, [pc, #232]	; (8006d88 <HAL_ETH_MspInit+0x14c>)
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca0:	4a39      	ldr	r2, [pc, #228]	; (8006d88 <HAL_ETH_MspInit+0x14c>)
 8006ca2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8006ca8:	4b37      	ldr	r3, [pc, #220]	; (8006d88 <HAL_ETH_MspInit+0x14c>)
 8006caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cb0:	61bb      	str	r3, [r7, #24]
 8006cb2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	4b33      	ldr	r3, [pc, #204]	; (8006d88 <HAL_ETH_MspInit+0x14c>)
 8006cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbc:	4a32      	ldr	r2, [pc, #200]	; (8006d88 <HAL_ETH_MspInit+0x14c>)
 8006cbe:	f043 0304 	orr.w	r3, r3, #4
 8006cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8006cc4:	4b30      	ldr	r3, [pc, #192]	; (8006d88 <HAL_ETH_MspInit+0x14c>)
 8006cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc8:	f003 0304 	and.w	r3, r3, #4
 8006ccc:	617b      	str	r3, [r7, #20]
 8006cce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	613b      	str	r3, [r7, #16]
 8006cd4:	4b2c      	ldr	r3, [pc, #176]	; (8006d88 <HAL_ETH_MspInit+0x14c>)
 8006cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd8:	4a2b      	ldr	r2, [pc, #172]	; (8006d88 <HAL_ETH_MspInit+0x14c>)
 8006cda:	f043 0301 	orr.w	r3, r3, #1
 8006cde:	6313      	str	r3, [r2, #48]	; 0x30
 8006ce0:	4b29      	ldr	r3, [pc, #164]	; (8006d88 <HAL_ETH_MspInit+0x14c>)
 8006ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	613b      	str	r3, [r7, #16]
 8006cea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cec:	2300      	movs	r3, #0
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	4b25      	ldr	r3, [pc, #148]	; (8006d88 <HAL_ETH_MspInit+0x14c>)
 8006cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf4:	4a24      	ldr	r2, [pc, #144]	; (8006d88 <HAL_ETH_MspInit+0x14c>)
 8006cf6:	f043 0302 	orr.w	r3, r3, #2
 8006cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8006cfc:	4b22      	ldr	r3, [pc, #136]	; (8006d88 <HAL_ETH_MspInit+0x14c>)
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8006d08:	2332      	movs	r3, #50	; 0x32
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d10:	2300      	movs	r3, #0
 8006d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d14:	2303      	movs	r3, #3
 8006d16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006d18:	230b      	movs	r3, #11
 8006d1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d20:	4619      	mov	r1, r3
 8006d22:	481a      	ldr	r0, [pc, #104]	; (8006d8c <HAL_ETH_MspInit+0x150>)
 8006d24:	f7fc fe20 	bl	8003968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006d28:	2386      	movs	r3, #134	; 0x86
 8006d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d30:	2300      	movs	r3, #0
 8006d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d34:	2303      	movs	r3, #3
 8006d36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006d38:	230b      	movs	r3, #11
 8006d3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d40:	4619      	mov	r1, r3
 8006d42:	4813      	ldr	r0, [pc, #76]	; (8006d90 <HAL_ETH_MspInit+0x154>)
 8006d44:	f7fc fe10 	bl	8003968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8006d48:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006d4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d4e:	2302      	movs	r3, #2
 8006d50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d56:	2303      	movs	r3, #3
 8006d58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006d5a:	230b      	movs	r3, #11
 8006d5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d62:	4619      	mov	r1, r3
 8006d64:	480b      	ldr	r0, [pc, #44]	; (8006d94 <HAL_ETH_MspInit+0x158>)
 8006d66:	f7fc fdff 	bl	8003968 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	2105      	movs	r1, #5
 8006d6e:	203d      	movs	r0, #61	; 0x3d
 8006d70:	f7fb fb74 	bl	800245c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006d74:	203d      	movs	r0, #61	; 0x3d
 8006d76:	f7fb fb8d 	bl	8002494 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006d7a:	bf00      	nop
 8006d7c:	3738      	adds	r7, #56	; 0x38
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	40028000 	.word	0x40028000
 8006d88:	40023800 	.word	0x40023800
 8006d8c:	40020800 	.word	0x40020800
 8006d90:	40020000 	.word	0x40020000
 8006d94:	40020400 	.word	0x40020400

08006d98 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006d9c:	4802      	ldr	r0, [pc, #8]	; (8006da8 <ETH_PHY_IO_Init+0x10>)
 8006d9e:	f7fc f97b 	bl	8003098 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	200056a4 	.word	0x200056a4

08006dac <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006dac:	b480      	push	{r7}
 8006dae:	af00      	add	r7, sp, #0
  return 0;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	68f9      	ldr	r1, [r7, #12]
 8006dce:	4807      	ldr	r0, [pc, #28]	; (8006dec <ETH_PHY_IO_ReadReg+0x30>)
 8006dd0:	f7fb ffca 	bl	8002d68 <HAL_ETH_ReadPHYRegister>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d002      	beq.n	8006de0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006dde:	e000      	b.n	8006de2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	200056a4 	.word	0x200056a4

08006df0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	68f9      	ldr	r1, [r7, #12]
 8006e02:	4807      	ldr	r0, [pc, #28]	; (8006e20 <ETH_PHY_IO_WriteReg+0x30>)
 8006e04:	f7fb fffb 	bl	8002dfe <HAL_ETH_WritePHYRegister>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d002      	beq.n	8006e14 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e12:	e000      	b.n	8006e16 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	200056a4 	.word	0x200056a4

08006e24 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006e28:	f7fb fa30 	bl	800228c <HAL_GetTick>
 8006e2c:	4603      	mov	r3, r0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	bd80      	pop	{r7, pc}
	...

08006e34 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b0a0      	sub	sp, #128	; 0x80
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006e3c:	f107 0308 	add.w	r3, r7, #8
 8006e40:	2264      	movs	r2, #100	; 0x64
 8006e42:	2100      	movs	r1, #0
 8006e44:	4618      	mov	r0, r3
 8006e46:	f01a fe7d 	bl	8021b44 <memset>
  int32_t PHYLinkState = 0;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e52:	2300      	movs	r3, #0
 8006e54:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e56:	2300      	movs	r3, #0
 8006e58:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8006e5e:	483a      	ldr	r0, [pc, #232]	; (8006f48 <ethernet_link_thread+0x114>)
 8006e60:	f7fb f957 	bl	8002112 <DP83848_GetLinkState>
 8006e64:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8006e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006e6c:	089b      	lsrs	r3, r3, #2
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00c      	beq.n	8006e92 <ethernet_link_thread+0x5e>
 8006e78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	dc09      	bgt.n	8006e92 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8006e7e:	4833      	ldr	r0, [pc, #204]	; (8006f4c <ethernet_link_thread+0x118>)
 8006e80:	f7fb fc22 	bl	80026c8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8006e84:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006e86:	f00c febb 	bl	8013c00 <netif_set_down>
    netif_set_link_down(netif);
 8006e8a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006e8c:	f00c ff22 	bl	8013cd4 <netif_set_link_down>
 8006e90:	e055      	b.n	8006f3e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8006e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006e98:	f003 0304 	and.w	r3, r3, #4
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d14e      	bne.n	8006f3e <ethernet_link_thread+0x10a>
 8006ea0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	dd4b      	ble.n	8006f3e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8006ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ea8:	3b02      	subs	r3, #2
 8006eaa:	2b03      	cmp	r3, #3
 8006eac:	d82a      	bhi.n	8006f04 <ethernet_link_thread+0xd0>
 8006eae:	a201      	add	r2, pc, #4	; (adr r2, 8006eb4 <ethernet_link_thread+0x80>)
 8006eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb4:	08006ec5 	.word	0x08006ec5
 8006eb8:	08006ed7 	.word	0x08006ed7
 8006ebc:	08006ee7 	.word	0x08006ee7
 8006ec0:	08006ef7 	.word	0x08006ef7
    {
    case DP83848_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006ec4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ec8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8006eca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ece:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006ed4:	e017      	b.n	8006f06 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8006eda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ede:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006ee4:	e00f      	b.n	8006f06 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006ee6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006eea:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8006eec:	2300      	movs	r3, #0
 8006eee:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006ef4:	e007      	b.n	8006f06 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8006efa:	2300      	movs	r3, #0
 8006efc:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006efe:	2301      	movs	r3, #1
 8006f00:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006f02:	e000      	b.n	8006f06 <ethernet_link_thread+0xd2>
    default:
      break;
 8006f04:	bf00      	nop
    }

    if(linkchanged)
 8006f06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d018      	beq.n	8006f3e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006f0c:	f107 0308 	add.w	r3, r7, #8
 8006f10:	4619      	mov	r1, r3
 8006f12:	480e      	ldr	r0, [pc, #56]	; (8006f4c <ethernet_link_thread+0x118>)
 8006f14:	f7fb ffbc 	bl	8002e90 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f1a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8006f1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f1e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006f20:	f107 0308 	add.w	r3, r7, #8
 8006f24:	4619      	mov	r1, r3
 8006f26:	4809      	ldr	r0, [pc, #36]	; (8006f4c <ethernet_link_thread+0x118>)
 8006f28:	f7fc f89c 	bl	8003064 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006f2c:	4807      	ldr	r0, [pc, #28]	; (8006f4c <ethernet_link_thread+0x118>)
 8006f2e:	f7fb fb3d 	bl	80025ac <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8006f32:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f34:	f00c fdf8 	bl	8013b28 <netif_set_up>
      netif_set_link_up(netif);
 8006f38:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f3a:	f00c fe93 	bl	8013c64 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8006f3e:	2064      	movs	r0, #100	; 0x64
 8006f40:	f000 f90e 	bl	8007160 <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8006f44:	e78b      	b.n	8006e5e <ethernet_link_thread+0x2a>
 8006f46:	bf00      	nop
 8006f48:	2000578c 	.word	0x2000578c
 8006f4c:	200056a4 	.word	0x200056a4

08006f50 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af02      	add	r7, sp, #8
 8006f56:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006f58:	4812      	ldr	r0, [pc, #72]	; (8006fa4 <HAL_ETH_RxAllocateCallback+0x54>)
 8006f5a:	f00c fb51 	bl	8013600 <memp_malloc_pool>
 8006f5e:	60f8      	str	r0, [r7, #12]
  if (p)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d014      	beq.n	8006f90 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f103 0220 	add.w	r2, r3, #32
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4a0d      	ldr	r2, [pc, #52]	; (8006fa8 <HAL_ETH_RxAllocateCallback+0x58>)
 8006f74:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006f7e:	9201      	str	r2, [sp, #4]
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2241      	movs	r2, #65	; 0x41
 8006f86:	2100      	movs	r1, #0
 8006f88:	2000      	movs	r0, #0
 8006f8a:	f00d f8c7 	bl	801411c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006f8e:	e005      	b.n	8006f9c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006f90:	4b06      	ldr	r3, [pc, #24]	; (8006fac <HAL_ETH_RxAllocateCallback+0x5c>)
 8006f92:	2201      	movs	r2, #1
 8006f94:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	601a      	str	r2, [r3, #0]
}
 8006f9c:	bf00      	nop
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	080271b8 	.word	0x080271b8
 8006fa8:	08006bed 	.word	0x08006bed
 8006fac:	20005558 	.word	0x20005558

08006fb0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b089      	sub	sp, #36	; 0x24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
 8006fbc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	3b20      	subs	r3, #32
 8006fce:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	887a      	ldrh	r2, [r7, #2]
 8006fe0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d103      	bne.n	8006ff2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	69fa      	ldr	r2, [r7, #28]
 8006fee:	601a      	str	r2, [r3, #0]
 8006ff0:	e003      	b.n	8006ffa <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	69fa      	ldr	r2, [r7, #28]
 8006ff8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	69fa      	ldr	r2, [r7, #28]
 8006ffe:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	61fb      	str	r3, [r7, #28]
 8007006:	e009      	b.n	800701c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	891a      	ldrh	r2, [r3, #8]
 800700c:	887b      	ldrh	r3, [r7, #2]
 800700e:	4413      	add	r3, r2
 8007010:	b29a      	uxth	r2, r3
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	61fb      	str	r3, [r7, #28]
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1f2      	bne.n	8007008 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007022:	bf00      	nop
 8007024:	bf00      	nop
 8007026:	3724      	adds	r7, #36	; 0x24
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f00d fa29 	bl	8014490 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800703e:	bf00      	nop
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007046:	b480      	push	{r7}
 8007048:	b085      	sub	sp, #20
 800704a:	af00      	add	r7, sp, #0
 800704c:	4603      	mov	r3, r0
 800704e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007050:	2300      	movs	r3, #0
 8007052:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007054:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007058:	2b84      	cmp	r3, #132	; 0x84
 800705a:	d005      	beq.n	8007068 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800705c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4413      	add	r3, r2
 8007064:	3303      	adds	r3, #3
 8007066:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007068:	68fb      	ldr	r3, [r7, #12]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007076:	b480      	push	{r7}
 8007078:	b083      	sub	sp, #12
 800707a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800707c:	f3ef 8305 	mrs	r3, IPSR
 8007080:	607b      	str	r3, [r7, #4]
  return(result);
 8007082:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007084:	2b00      	cmp	r3, #0
 8007086:	bf14      	ite	ne
 8007088:	2301      	movne	r3, #1
 800708a:	2300      	moveq	r3, #0
 800708c:	b2db      	uxtb	r3, r3
}
 800708e:	4618      	mov	r0, r3
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800709e:	f001 fd99 	bl	8008bd4 <vTaskStartScheduler>
  
  return osOK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80070ac:	f7ff ffe3 	bl	8007076 <inHandlerMode>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80070b6:	f001 feb7 	bl	8008e28 <xTaskGetTickCountFromISR>
 80070ba:	4603      	mov	r3, r0
 80070bc:	e002      	b.n	80070c4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80070be:	f001 fea3 	bl	8008e08 <xTaskGetTickCount>
 80070c2:	4603      	mov	r3, r0
  }
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80070c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ca:	b089      	sub	sp, #36	; 0x24
 80070cc:	af04      	add	r7, sp, #16
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d020      	beq.n	800711c <osThreadCreate+0x54>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d01c      	beq.n	800711c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685c      	ldr	r4, [r3, #4]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	691e      	ldr	r6, [r3, #16]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7ff ffa6 	bl	8007046 <makeFreeRtosPriority>
 80070fa:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007104:	9202      	str	r2, [sp, #8]
 8007106:	9301      	str	r3, [sp, #4]
 8007108:	9100      	str	r1, [sp, #0]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	4632      	mov	r2, r6
 800710e:	4629      	mov	r1, r5
 8007110:	4620      	mov	r0, r4
 8007112:	f001 fb81 	bl	8008818 <xTaskCreateStatic>
 8007116:	4603      	mov	r3, r0
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	e01c      	b.n	8007156 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685c      	ldr	r4, [r3, #4]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007128:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007130:	4618      	mov	r0, r3
 8007132:	f7ff ff88 	bl	8007046 <makeFreeRtosPriority>
 8007136:	4602      	mov	r2, r0
 8007138:	f107 030c 	add.w	r3, r7, #12
 800713c:	9301      	str	r3, [sp, #4]
 800713e:	9200      	str	r2, [sp, #0]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	4632      	mov	r2, r6
 8007144:	4629      	mov	r1, r5
 8007146:	4620      	mov	r0, r4
 8007148:	f001 fbc3 	bl	80088d2 <xTaskCreate>
 800714c:	4603      	mov	r3, r0
 800714e:	2b01      	cmp	r3, #1
 8007150:	d001      	beq.n	8007156 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007152:	2300      	movs	r3, #0
 8007154:	e000      	b.n	8007158 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007156:	68fb      	ldr	r3, [r7, #12]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007160 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <osDelay+0x16>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	e000      	b.n	8007178 <osDelay+0x18>
 8007176:	2301      	movs	r3, #1
 8007178:	4618      	mov	r0, r3
 800717a:	f001 fcf7 	bl	8008b6c <vTaskDelay>
  
  return osOK;
 800717e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d007      	beq.n	80071a8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	4619      	mov	r1, r3
 800719e:	2001      	movs	r0, #1
 80071a0:	f000 fc7d 	bl	8007a9e <xQueueCreateMutexStatic>
 80071a4:	4603      	mov	r3, r0
 80071a6:	e003      	b.n	80071b0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80071a8:	2001      	movs	r0, #1
 80071aa:	f000 fc60 	bl	8007a6e <xQueueCreateMutex>
 80071ae:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80071c2:	2300      	movs	r3, #0
 80071c4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d101      	bne.n	80071d0 <osMutexWait+0x18>
    return osErrorParameter;
 80071cc:	2380      	movs	r3, #128	; 0x80
 80071ce:	e03a      	b.n	8007246 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071da:	d103      	bne.n	80071e4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80071dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071e0:	60fb      	str	r3, [r7, #12]
 80071e2:	e009      	b.n	80071f8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d006      	beq.n	80071f8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <osMutexWait+0x40>
      ticks = 1;
 80071f4:	2301      	movs	r3, #1
 80071f6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80071f8:	f7ff ff3d 	bl	8007076 <inHandlerMode>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d017      	beq.n	8007232 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007202:	f107 0308 	add.w	r3, r7, #8
 8007206:	461a      	mov	r2, r3
 8007208:	2100      	movs	r1, #0
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f001 f874 	bl	80082f8 <xQueueReceiveFromISR>
 8007210:	4603      	mov	r3, r0
 8007212:	2b01      	cmp	r3, #1
 8007214:	d001      	beq.n	800721a <osMutexWait+0x62>
      return osErrorOS;
 8007216:	23ff      	movs	r3, #255	; 0xff
 8007218:	e015      	b.n	8007246 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d011      	beq.n	8007244 <osMutexWait+0x8c>
 8007220:	4b0b      	ldr	r3, [pc, #44]	; (8007250 <osMutexWait+0x98>)
 8007222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	e008      	b.n	8007244 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007232:	68f9      	ldr	r1, [r7, #12]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 ff53 	bl	80080e0 <xQueueSemaphoreTake>
 800723a:	4603      	mov	r3, r0
 800723c:	2b01      	cmp	r3, #1
 800723e:	d001      	beq.n	8007244 <osMutexWait+0x8c>
    return osErrorOS;
 8007240:	23ff      	movs	r3, #255	; 0xff
 8007242:	e000      	b.n	8007246 <osMutexWait+0x8e>
  }
  
  return osOK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	e000ed04 	.word	0xe000ed04

08007254 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007260:	2300      	movs	r3, #0
 8007262:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007264:	f7ff ff07 	bl	8007076 <inHandlerMode>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d016      	beq.n	800729c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800726e:	f107 0308 	add.w	r3, r7, #8
 8007272:	4619      	mov	r1, r3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fdc6 	bl	8007e06 <xQueueGiveFromISR>
 800727a:	4603      	mov	r3, r0
 800727c:	2b01      	cmp	r3, #1
 800727e:	d001      	beq.n	8007284 <osMutexRelease+0x30>
      return osErrorOS;
 8007280:	23ff      	movs	r3, #255	; 0xff
 8007282:	e017      	b.n	80072b4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d013      	beq.n	80072b2 <osMutexRelease+0x5e>
 800728a:	4b0c      	ldr	r3, [pc, #48]	; (80072bc <osMutexRelease+0x68>)
 800728c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007290:	601a      	str	r2, [r3, #0]
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	e00a      	b.n	80072b2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800729c:	2300      	movs	r3, #0
 800729e:	2200      	movs	r2, #0
 80072a0:	2100      	movs	r1, #0
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fc16 	bl	8007ad4 <xQueueGenericSend>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d001      	beq.n	80072b2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80072ae:	23ff      	movs	r3, #255	; 0xff
 80072b0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80072b2:	68fb      	ldr	r3, [r7, #12]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	e000ed04 	.word	0xe000ed04

080072c0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af02      	add	r7, sp, #8
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00f      	beq.n	80072f2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d10a      	bne.n	80072ee <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	2203      	movs	r2, #3
 80072de:	9200      	str	r2, [sp, #0]
 80072e0:	2200      	movs	r2, #0
 80072e2:	2100      	movs	r1, #0
 80072e4:	2001      	movs	r0, #1
 80072e6:	f000 fad7 	bl	8007898 <xQueueGenericCreateStatic>
 80072ea:	4603      	mov	r3, r0
 80072ec:	e016      	b.n	800731c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	e014      	b.n	800731c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d110      	bne.n	800731a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80072f8:	2203      	movs	r2, #3
 80072fa:	2100      	movs	r1, #0
 80072fc:	2001      	movs	r0, #1
 80072fe:	f000 fb43 	bl	8007988 <xQueueGenericCreate>
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d005      	beq.n	8007316 <osSemaphoreCreate+0x56>
 800730a:	2300      	movs	r3, #0
 800730c:	2200      	movs	r2, #0
 800730e:	2100      	movs	r1, #0
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 fbdf 	bl	8007ad4 <xQueueGenericSend>
      return sema;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	e000      	b.n	800731c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800731a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800732e:	2300      	movs	r3, #0
 8007330:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d101      	bne.n	800733c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007338:	2380      	movs	r3, #128	; 0x80
 800733a:	e03a      	b.n	80073b2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800733c:	2300      	movs	r3, #0
 800733e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007346:	d103      	bne.n	8007350 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	e009      	b.n	8007364 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d006      	beq.n	8007364 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d101      	bne.n	8007364 <osSemaphoreWait+0x40>
      ticks = 1;
 8007360:	2301      	movs	r3, #1
 8007362:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007364:	f7ff fe87 	bl	8007076 <inHandlerMode>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d017      	beq.n	800739e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800736e:	f107 0308 	add.w	r3, r7, #8
 8007372:	461a      	mov	r2, r3
 8007374:	2100      	movs	r1, #0
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 ffbe 	bl	80082f8 <xQueueReceiveFromISR>
 800737c:	4603      	mov	r3, r0
 800737e:	2b01      	cmp	r3, #1
 8007380:	d001      	beq.n	8007386 <osSemaphoreWait+0x62>
      return osErrorOS;
 8007382:	23ff      	movs	r3, #255	; 0xff
 8007384:	e015      	b.n	80073b2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d011      	beq.n	80073b0 <osSemaphoreWait+0x8c>
 800738c:	4b0b      	ldr	r3, [pc, #44]	; (80073bc <osSemaphoreWait+0x98>)
 800738e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007392:	601a      	str	r2, [r3, #0]
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	e008      	b.n	80073b0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800739e:	68f9      	ldr	r1, [r7, #12]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fe9d 	bl	80080e0 <xQueueSemaphoreTake>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d001      	beq.n	80073b0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80073ac:	23ff      	movs	r3, #255	; 0xff
 80073ae:	e000      	b.n	80073b2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	e000ed04 	.word	0xe000ed04

080073c0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80073cc:	2300      	movs	r3, #0
 80073ce:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80073d0:	f7ff fe51 	bl	8007076 <inHandlerMode>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d016      	beq.n	8007408 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80073da:	f107 0308 	add.w	r3, r7, #8
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fd10 	bl	8007e06 <xQueueGiveFromISR>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d001      	beq.n	80073f0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80073ec:	23ff      	movs	r3, #255	; 0xff
 80073ee:	e017      	b.n	8007420 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d013      	beq.n	800741e <osSemaphoreRelease+0x5e>
 80073f6:	4b0c      	ldr	r3, [pc, #48]	; (8007428 <osSemaphoreRelease+0x68>)
 80073f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073fc:	601a      	str	r2, [r3, #0]
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	e00a      	b.n	800741e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007408:	2300      	movs	r3, #0
 800740a:	2200      	movs	r2, #0
 800740c:	2100      	movs	r1, #0
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fb60 	bl	8007ad4 <xQueueGenericSend>
 8007414:	4603      	mov	r3, r0
 8007416:	2b01      	cmp	r3, #1
 8007418:	d001      	beq.n	800741e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800741a:	23ff      	movs	r3, #255	; 0xff
 800741c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800741e:	68fb      	ldr	r3, [r7, #12]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	e000ed04 	.word	0xe000ed04

0800742c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007434:	f7ff fe1f 	bl	8007076 <inHandlerMode>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800743e:	2382      	movs	r3, #130	; 0x82
 8007440:	e003      	b.n	800744a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f001 f814 	bl	8008470 <vQueueDelete>

  return osOK; 
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007452:	b590      	push	{r4, r7, lr}
 8007454:	b085      	sub	sp, #20
 8007456:	af02      	add	r7, sp, #8
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d011      	beq.n	8007488 <osMessageCreate+0x36>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00d      	beq.n	8007488 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6818      	ldr	r0, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6859      	ldr	r1, [r3, #4]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689a      	ldr	r2, [r3, #8]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	2400      	movs	r4, #0
 800747e:	9400      	str	r4, [sp, #0]
 8007480:	f000 fa0a 	bl	8007898 <xQueueGenericCreateStatic>
 8007484:	4603      	mov	r3, r0
 8007486:	e008      	b.n	800749a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6818      	ldr	r0, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	4619      	mov	r1, r3
 8007494:	f000 fa78 	bl	8007988 <xQueueGenericCreate>
 8007498:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800749a:	4618      	mov	r0, r3
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd90      	pop	{r4, r7, pc}
	...

080074a4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b086      	sub	sp, #24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80074b0:	2300      	movs	r3, #0
 80074b2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <osMessagePut+0x1e>
    ticks = 1;
 80074be:	2301      	movs	r3, #1
 80074c0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80074c2:	f7ff fdd8 	bl	8007076 <inHandlerMode>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d018      	beq.n	80074fe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80074cc:	f107 0210 	add.w	r2, r7, #16
 80074d0:	f107 0108 	add.w	r1, r7, #8
 80074d4:	2300      	movs	r3, #0
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f000 fbfa 	bl	8007cd0 <xQueueGenericSendFromISR>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d001      	beq.n	80074e6 <osMessagePut+0x42>
      return osErrorOS;
 80074e2:	23ff      	movs	r3, #255	; 0xff
 80074e4:	e018      	b.n	8007518 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d014      	beq.n	8007516 <osMessagePut+0x72>
 80074ec:	4b0c      	ldr	r3, [pc, #48]	; (8007520 <osMessagePut+0x7c>)
 80074ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	e00b      	b.n	8007516 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80074fe:	f107 0108 	add.w	r1, r7, #8
 8007502:	2300      	movs	r3, #0
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 fae4 	bl	8007ad4 <xQueueGenericSend>
 800750c:	4603      	mov	r3, r0
 800750e:	2b01      	cmp	r3, #1
 8007510:	d001      	beq.n	8007516 <osMessagePut+0x72>
      return osErrorOS;
 8007512:	23ff      	movs	r3, #255	; 0xff
 8007514:	e000      	b.n	8007518 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3718      	adds	r7, #24
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	e000ed04 	.word	0xe000ed04

08007524 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007524:	b590      	push	{r4, r7, lr}
 8007526:	b08b      	sub	sp, #44	; 0x2c
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10a      	bne.n	8007554 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800753e:	2380      	movs	r3, #128	; 0x80
 8007540:	617b      	str	r3, [r7, #20]
    return event;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	461c      	mov	r4, r3
 8007546:	f107 0314 	add.w	r3, r7, #20
 800754a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800754e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007552:	e054      	b.n	80075fe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007554:	2300      	movs	r3, #0
 8007556:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007558:	2300      	movs	r3, #0
 800755a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007562:	d103      	bne.n	800756c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007568:	627b      	str	r3, [r7, #36]	; 0x24
 800756a:	e009      	b.n	8007580 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d006      	beq.n	8007580 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <osMessageGet+0x5c>
      ticks = 1;
 800757c:	2301      	movs	r3, #1
 800757e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007580:	f7ff fd79 	bl	8007076 <inHandlerMode>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d01c      	beq.n	80075c4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800758a:	f107 0220 	add.w	r2, r7, #32
 800758e:	f107 0314 	add.w	r3, r7, #20
 8007592:	3304      	adds	r3, #4
 8007594:	4619      	mov	r1, r3
 8007596:	68b8      	ldr	r0, [r7, #8]
 8007598:	f000 feae 	bl	80082f8 <xQueueReceiveFromISR>
 800759c:	4603      	mov	r3, r0
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d102      	bne.n	80075a8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80075a2:	2310      	movs	r3, #16
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	e001      	b.n	80075ac <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d01d      	beq.n	80075ee <osMessageGet+0xca>
 80075b2:	4b15      	ldr	r3, [pc, #84]	; (8007608 <osMessageGet+0xe4>)
 80075b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	e014      	b.n	80075ee <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80075c4:	f107 0314 	add.w	r3, r7, #20
 80075c8:	3304      	adds	r3, #4
 80075ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075cc:	4619      	mov	r1, r3
 80075ce:	68b8      	ldr	r0, [r7, #8]
 80075d0:	f000 fca6 	bl	8007f20 <xQueueReceive>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d102      	bne.n	80075e0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80075da:	2310      	movs	r3, #16
 80075dc:	617b      	str	r3, [r7, #20]
 80075de:	e006      	b.n	80075ee <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d101      	bne.n	80075ea <osMessageGet+0xc6>
 80075e6:	2300      	movs	r3, #0
 80075e8:	e000      	b.n	80075ec <osMessageGet+0xc8>
 80075ea:	2340      	movs	r3, #64	; 0x40
 80075ec:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	461c      	mov	r4, r3
 80075f2:	f107 0314 	add.w	r3, r7, #20
 80075f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80075fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	372c      	adds	r7, #44	; 0x2c
 8007602:	46bd      	mov	sp, r7
 8007604:	bd90      	pop	{r4, r7, pc}
 8007606:	bf00      	nop
 8007608:	e000ed04 	.word	0xe000ed04

0800760c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007614:	f7ff fd2f 	bl	8007076 <inHandlerMode>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d004      	beq.n	8007628 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 ff08 	bl	8008434 <uxQueueMessagesWaitingFromISR>
 8007624:	4603      	mov	r3, r0
 8007626:	e003      	b.n	8007630 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fee5 	bl	80083f8 <uxQueueMessagesWaiting>
 800762e:	4603      	mov	r3, r0
  }
}
 8007630:	4618      	mov	r0, r3
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007640:	f7ff fd19 	bl	8007076 <inHandlerMode>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d001      	beq.n	800764e <osMessageDelete+0x16>
    return osErrorISR;
 800764a:	2382      	movs	r3, #130	; 0x82
 800764c:	e003      	b.n	8007656 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 ff0e 	bl	8008470 <vQueueDelete>

  return osOK; 
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f103 0208 	add.w	r2, r3, #8
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007676:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f103 0208 	add.w	r2, r3, #8
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f103 0208 	add.w	r2, r3, #8
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007692:	bf00      	nop
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	689a      	ldr	r2, [r3, #8]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	1c5a      	adds	r2, r3, #1
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	601a      	str	r2, [r3, #0]
}
 80076f4:	bf00      	nop
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007716:	d103      	bne.n	8007720 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	60fb      	str	r3, [r7, #12]
 800771e:	e00c      	b.n	800773a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	3308      	adds	r3, #8
 8007724:	60fb      	str	r3, [r7, #12]
 8007726:	e002      	b.n	800772e <vListInsert+0x2e>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	60fb      	str	r3, [r7, #12]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	429a      	cmp	r2, r3
 8007738:	d2f6      	bcs.n	8007728 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	1c5a      	adds	r2, r3, #1
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	601a      	str	r2, [r3, #0]
}
 8007766:	bf00      	nop
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007772:	b480      	push	{r7}
 8007774:	b085      	sub	sp, #20
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	6892      	ldr	r2, [r2, #8]
 8007788:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	6852      	ldr	r2, [r2, #4]
 8007792:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	429a      	cmp	r2, r3
 800779c:	d103      	bne.n	80077a6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	689a      	ldr	r2, [r3, #8]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	1e5a      	subs	r2, r3, #1
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
	...

080077c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10a      	bne.n	80077f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80077dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80077ee:	bf00      	nop
 80077f0:	e7fe      	b.n	80077f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80077f2:	f002 fcd7 	bl	800a1a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077fe:	68f9      	ldr	r1, [r7, #12]
 8007800:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007802:	fb01 f303 	mul.w	r3, r1, r3
 8007806:	441a      	add	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007822:	3b01      	subs	r3, #1
 8007824:	68f9      	ldr	r1, [r7, #12]
 8007826:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007828:	fb01 f303 	mul.w	r3, r1, r3
 800782c:	441a      	add	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	22ff      	movs	r2, #255	; 0xff
 8007836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	22ff      	movs	r2, #255	; 0xff
 800783e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d114      	bne.n	8007872 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d01a      	beq.n	8007886 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	3310      	adds	r3, #16
 8007854:	4618      	mov	r0, r3
 8007856:	f001 fc63 	bl	8009120 <xTaskRemoveFromEventList>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d012      	beq.n	8007886 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007860:	4b0c      	ldr	r3, [pc, #48]	; (8007894 <xQueueGenericReset+0xcc>)
 8007862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	e009      	b.n	8007886 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3310      	adds	r3, #16
 8007876:	4618      	mov	r0, r3
 8007878:	f7ff fef1 	bl	800765e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	3324      	adds	r3, #36	; 0x24
 8007880:	4618      	mov	r0, r3
 8007882:	f7ff feec 	bl	800765e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007886:	f002 fcbd 	bl	800a204 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800788a:	2301      	movs	r3, #1
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	e000ed04 	.word	0xe000ed04

08007898 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08e      	sub	sp, #56	; 0x38
 800789c:	af02      	add	r7, sp, #8
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
 80078a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10a      	bne.n	80078c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80078be:	bf00      	nop
 80078c0:	e7fe      	b.n	80078c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10a      	bne.n	80078de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80078c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80078da:	bf00      	nop
 80078dc:	e7fe      	b.n	80078dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d002      	beq.n	80078ea <xQueueGenericCreateStatic+0x52>
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <xQueueGenericCreateStatic+0x56>
 80078ea:	2301      	movs	r3, #1
 80078ec:	e000      	b.n	80078f0 <xQueueGenericCreateStatic+0x58>
 80078ee:	2300      	movs	r3, #0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10a      	bne.n	800790a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80078f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	623b      	str	r3, [r7, #32]
}
 8007906:	bf00      	nop
 8007908:	e7fe      	b.n	8007908 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d102      	bne.n	8007916 <xQueueGenericCreateStatic+0x7e>
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <xQueueGenericCreateStatic+0x82>
 8007916:	2301      	movs	r3, #1
 8007918:	e000      	b.n	800791c <xQueueGenericCreateStatic+0x84>
 800791a:	2300      	movs	r3, #0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10a      	bne.n	8007936 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	61fb      	str	r3, [r7, #28]
}
 8007932:	bf00      	nop
 8007934:	e7fe      	b.n	8007934 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007936:	2348      	movs	r3, #72	; 0x48
 8007938:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	2b48      	cmp	r3, #72	; 0x48
 800793e:	d00a      	beq.n	8007956 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	61bb      	str	r3, [r7, #24]
}
 8007952:	bf00      	nop
 8007954:	e7fe      	b.n	8007954 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007956:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800795c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00d      	beq.n	800797e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007964:	2201      	movs	r2, #1
 8007966:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800796a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800796e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	4613      	mov	r3, r2
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	68b9      	ldr	r1, [r7, #8]
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 f83f 	bl	80079fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800797e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007980:	4618      	mov	r0, r3
 8007982:	3730      	adds	r7, #48	; 0x30
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007988:	b580      	push	{r7, lr}
 800798a:	b08a      	sub	sp, #40	; 0x28
 800798c:	af02      	add	r7, sp, #8
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	4613      	mov	r3, r2
 8007994:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10a      	bne.n	80079b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800799c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	613b      	str	r3, [r7, #16]
}
 80079ae:	bf00      	nop
 80079b0:	e7fe      	b.n	80079b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	68ba      	ldr	r2, [r7, #8]
 80079b6:	fb02 f303 	mul.w	r3, r2, r3
 80079ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	3348      	adds	r3, #72	; 0x48
 80079c0:	4618      	mov	r0, r3
 80079c2:	f002 fd11 	bl	800a3e8 <pvPortMalloc>
 80079c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d011      	beq.n	80079f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	3348      	adds	r3, #72	; 0x48
 80079d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079e0:	79fa      	ldrb	r2, [r7, #7]
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	4613      	mov	r3, r2
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	68b9      	ldr	r1, [r7, #8]
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f000 f805 	bl	80079fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079f2:	69bb      	ldr	r3, [r7, #24]
	}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3720      	adds	r7, #32
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
 8007a08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d103      	bne.n	8007a18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	69ba      	ldr	r2, [r7, #24]
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	e002      	b.n	8007a1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	69b8      	ldr	r0, [r7, #24]
 8007a2e:	f7ff fecb 	bl	80077c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a32:	bf00      	nop
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b082      	sub	sp, #8
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00e      	beq.n	8007a66 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2100      	movs	r1, #0
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f837 	bl	8007ad4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007a66:	bf00      	nop
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b086      	sub	sp, #24
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	4603      	mov	r3, r0
 8007a76:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	617b      	str	r3, [r7, #20]
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007a80:	79fb      	ldrb	r3, [r7, #7]
 8007a82:	461a      	mov	r2, r3
 8007a84:	6939      	ldr	r1, [r7, #16]
 8007a86:	6978      	ldr	r0, [r7, #20]
 8007a88:	f7ff ff7e 	bl	8007988 <xQueueGenericCreate>
 8007a8c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f7ff ffd3 	bl	8007a3a <prvInitialiseMutex>

		return xNewQueue;
 8007a94:	68fb      	ldr	r3, [r7, #12]
	}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3718      	adds	r7, #24
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b088      	sub	sp, #32
 8007aa2:	af02      	add	r7, sp, #8
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	6039      	str	r1, [r7, #0]
 8007aa8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	617b      	str	r3, [r7, #20]
 8007aae:	2300      	movs	r3, #0
 8007ab0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007ab2:	79fb      	ldrb	r3, [r7, #7]
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	6939      	ldr	r1, [r7, #16]
 8007abc:	6978      	ldr	r0, [r7, #20]
 8007abe:	f7ff feeb 	bl	8007898 <xQueueGenericCreateStatic>
 8007ac2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f7ff ffb8 	bl	8007a3a <prvInitialiseMutex>

		return xNewQueue;
 8007aca:	68fb      	ldr	r3, [r7, #12]
	}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3718      	adds	r7, #24
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b08e      	sub	sp, #56	; 0x38
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10a      	bne.n	8007b06 <xQueueGenericSend+0x32>
	__asm volatile
 8007af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b02:	bf00      	nop
 8007b04:	e7fe      	b.n	8007b04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d103      	bne.n	8007b14 <xQueueGenericSend+0x40>
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <xQueueGenericSend+0x44>
 8007b14:	2301      	movs	r3, #1
 8007b16:	e000      	b.n	8007b1a <xQueueGenericSend+0x46>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10a      	bne.n	8007b34 <xQueueGenericSend+0x60>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b30:	bf00      	nop
 8007b32:	e7fe      	b.n	8007b32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d103      	bne.n	8007b42 <xQueueGenericSend+0x6e>
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d101      	bne.n	8007b46 <xQueueGenericSend+0x72>
 8007b42:	2301      	movs	r3, #1
 8007b44:	e000      	b.n	8007b48 <xQueueGenericSend+0x74>
 8007b46:	2300      	movs	r3, #0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10a      	bne.n	8007b62 <xQueueGenericSend+0x8e>
	__asm volatile
 8007b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b50:	f383 8811 	msr	BASEPRI, r3
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	623b      	str	r3, [r7, #32]
}
 8007b5e:	bf00      	nop
 8007b60:	e7fe      	b.n	8007b60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b62:	f001 fc9d 	bl	80094a0 <xTaskGetSchedulerState>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d102      	bne.n	8007b72 <xQueueGenericSend+0x9e>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <xQueueGenericSend+0xa2>
 8007b72:	2301      	movs	r3, #1
 8007b74:	e000      	b.n	8007b78 <xQueueGenericSend+0xa4>
 8007b76:	2300      	movs	r3, #0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10a      	bne.n	8007b92 <xQueueGenericSend+0xbe>
	__asm volatile
 8007b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	61fb      	str	r3, [r7, #28]
}
 8007b8e:	bf00      	nop
 8007b90:	e7fe      	b.n	8007b90 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b92:	f002 fb07 	bl	800a1a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d302      	bcc.n	8007ba8 <xQueueGenericSend+0xd4>
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d129      	bne.n	8007bfc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ba8:	683a      	ldr	r2, [r7, #0]
 8007baa:	68b9      	ldr	r1, [r7, #8]
 8007bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bae:	f000 fc9a 	bl	80084e6 <prvCopyDataToQueue>
 8007bb2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d010      	beq.n	8007bde <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbe:	3324      	adds	r3, #36	; 0x24
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f001 faad 	bl	8009120 <xTaskRemoveFromEventList>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d013      	beq.n	8007bf4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007bcc:	4b3f      	ldr	r3, [pc, #252]	; (8007ccc <xQueueGenericSend+0x1f8>)
 8007bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	e00a      	b.n	8007bf4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d007      	beq.n	8007bf4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007be4:	4b39      	ldr	r3, [pc, #228]	; (8007ccc <xQueueGenericSend+0x1f8>)
 8007be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bea:	601a      	str	r2, [r3, #0]
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007bf4:	f002 fb06 	bl	800a204 <vPortExitCritical>
				return pdPASS;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e063      	b.n	8007cc4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d103      	bne.n	8007c0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c02:	f002 faff 	bl	800a204 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007c06:	2300      	movs	r3, #0
 8007c08:	e05c      	b.n	8007cc4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d106      	bne.n	8007c1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c10:	f107 0314 	add.w	r3, r7, #20
 8007c14:	4618      	mov	r0, r3
 8007c16:	f001 fae5 	bl	80091e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c1e:	f002 faf1 	bl	800a204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c22:	f001 f847 	bl	8008cb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c26:	f002 fabd 	bl	800a1a4 <vPortEnterCritical>
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c30:	b25b      	sxtb	r3, r3
 8007c32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c36:	d103      	bne.n	8007c40 <xQueueGenericSend+0x16c>
 8007c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c46:	b25b      	sxtb	r3, r3
 8007c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c4c:	d103      	bne.n	8007c56 <xQueueGenericSend+0x182>
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c56:	f002 fad5 	bl	800a204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c5a:	1d3a      	adds	r2, r7, #4
 8007c5c:	f107 0314 	add.w	r3, r7, #20
 8007c60:	4611      	mov	r1, r2
 8007c62:	4618      	mov	r0, r3
 8007c64:	f001 fad4 	bl	8009210 <xTaskCheckForTimeOut>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d124      	bne.n	8007cb8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c70:	f000 fd31 	bl	80086d6 <prvIsQueueFull>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d018      	beq.n	8007cac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7c:	3310      	adds	r3, #16
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	4611      	mov	r1, r2
 8007c82:	4618      	mov	r0, r3
 8007c84:	f001 f9fc 	bl	8009080 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c8a:	f000 fcbc 	bl	8008606 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c8e:	f001 f81f 	bl	8008cd0 <xTaskResumeAll>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f47f af7c 	bne.w	8007b92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007c9a:	4b0c      	ldr	r3, [pc, #48]	; (8007ccc <xQueueGenericSend+0x1f8>)
 8007c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	e772      	b.n	8007b92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cae:	f000 fcaa 	bl	8008606 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cb2:	f001 f80d 	bl	8008cd0 <xTaskResumeAll>
 8007cb6:	e76c      	b.n	8007b92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cba:	f000 fca4 	bl	8008606 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cbe:	f001 f807 	bl	8008cd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007cc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3738      	adds	r7, #56	; 0x38
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	e000ed04 	.word	0xe000ed04

08007cd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b090      	sub	sp, #64	; 0x40
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
 8007cdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10a      	bne.n	8007cfe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007cfa:	bf00      	nop
 8007cfc:	e7fe      	b.n	8007cfc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d103      	bne.n	8007d0c <xQueueGenericSendFromISR+0x3c>
 8007d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <xQueueGenericSendFromISR+0x40>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e000      	b.n	8007d12 <xQueueGenericSendFromISR+0x42>
 8007d10:	2300      	movs	r3, #0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10a      	bne.n	8007d2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1a:	f383 8811 	msr	BASEPRI, r3
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f3bf 8f4f 	dsb	sy
 8007d26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d28:	bf00      	nop
 8007d2a:	e7fe      	b.n	8007d2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d103      	bne.n	8007d3a <xQueueGenericSendFromISR+0x6a>
 8007d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d101      	bne.n	8007d3e <xQueueGenericSendFromISR+0x6e>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e000      	b.n	8007d40 <xQueueGenericSendFromISR+0x70>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10a      	bne.n	8007d5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	623b      	str	r3, [r7, #32]
}
 8007d56:	bf00      	nop
 8007d58:	e7fe      	b.n	8007d58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d5a:	f002 fb05 	bl	800a368 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d5e:	f3ef 8211 	mrs	r2, BASEPRI
 8007d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	61fa      	str	r2, [r7, #28]
 8007d74:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d76:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d78:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d302      	bcc.n	8007d8c <xQueueGenericSendFromISR+0xbc>
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d12f      	bne.n	8007dec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d9c:	683a      	ldr	r2, [r7, #0]
 8007d9e:	68b9      	ldr	r1, [r7, #8]
 8007da0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007da2:	f000 fba0 	bl	80084e6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007da6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dae:	d112      	bne.n	8007dd6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d016      	beq.n	8007de6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dba:	3324      	adds	r3, #36	; 0x24
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f001 f9af 	bl	8009120 <xTaskRemoveFromEventList>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00e      	beq.n	8007de6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00b      	beq.n	8007de6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	e007      	b.n	8007de6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007dd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007dda:	3301      	adds	r3, #1
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	b25a      	sxtb	r2, r3
 8007de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007de6:	2301      	movs	r3, #1
 8007de8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007dea:	e001      	b.n	8007df0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007dec:	2300      	movs	r3, #0
 8007dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007dfa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3740      	adds	r7, #64	; 0x40
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b08e      	sub	sp, #56	; 0x38
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10a      	bne.n	8007e30 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	623b      	str	r3, [r7, #32]
}
 8007e2c:	bf00      	nop
 8007e2e:	e7fe      	b.n	8007e2e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00a      	beq.n	8007e4e <xQueueGiveFromISR+0x48>
	__asm volatile
 8007e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3c:	f383 8811 	msr	BASEPRI, r3
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	61fb      	str	r3, [r7, #28]
}
 8007e4a:	bf00      	nop
 8007e4c:	e7fe      	b.n	8007e4c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d103      	bne.n	8007e5e <xQueueGiveFromISR+0x58>
 8007e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d101      	bne.n	8007e62 <xQueueGiveFromISR+0x5c>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e000      	b.n	8007e64 <xQueueGiveFromISR+0x5e>
 8007e62:	2300      	movs	r3, #0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10a      	bne.n	8007e7e <xQueueGiveFromISR+0x78>
	__asm volatile
 8007e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6c:	f383 8811 	msr	BASEPRI, r3
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	61bb      	str	r3, [r7, #24]
}
 8007e7a:	bf00      	nop
 8007e7c:	e7fe      	b.n	8007e7c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e7e:	f002 fa73 	bl	800a368 <vPortValidateInterruptPriority>
	__asm volatile
 8007e82:	f3ef 8211 	mrs	r2, BASEPRI
 8007e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8a:	f383 8811 	msr	BASEPRI, r3
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	617a      	str	r2, [r7, #20]
 8007e98:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007e9a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d22b      	bcs.n	8007f06 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eba:	1c5a      	adds	r2, r3, #1
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ec0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ec8:	d112      	bne.n	8007ef0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d016      	beq.n	8007f00 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed4:	3324      	adds	r3, #36	; 0x24
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f001 f922 	bl	8009120 <xTaskRemoveFromEventList>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00e      	beq.n	8007f00 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00b      	beq.n	8007f00 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	2201      	movs	r2, #1
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	e007      	b.n	8007f00 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	b25a      	sxtb	r2, r3
 8007efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007f00:	2301      	movs	r3, #1
 8007f02:	637b      	str	r3, [r7, #52]	; 0x34
 8007f04:	e001      	b.n	8007f0a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f06:	2300      	movs	r3, #0
 8007f08:	637b      	str	r3, [r7, #52]	; 0x34
 8007f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f383 8811 	msr	BASEPRI, r3
}
 8007f14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3738      	adds	r7, #56	; 0x38
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b08c      	sub	sp, #48	; 0x30
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10a      	bne.n	8007f50 <xQueueReceive+0x30>
	__asm volatile
 8007f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3e:	f383 8811 	msr	BASEPRI, r3
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	623b      	str	r3, [r7, #32]
}
 8007f4c:	bf00      	nop
 8007f4e:	e7fe      	b.n	8007f4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d103      	bne.n	8007f5e <xQueueReceive+0x3e>
 8007f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <xQueueReceive+0x42>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e000      	b.n	8007f64 <xQueueReceive+0x44>
 8007f62:	2300      	movs	r3, #0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10a      	bne.n	8007f7e <xQueueReceive+0x5e>
	__asm volatile
 8007f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	61fb      	str	r3, [r7, #28]
}
 8007f7a:	bf00      	nop
 8007f7c:	e7fe      	b.n	8007f7c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f7e:	f001 fa8f 	bl	80094a0 <xTaskGetSchedulerState>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d102      	bne.n	8007f8e <xQueueReceive+0x6e>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <xQueueReceive+0x72>
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e000      	b.n	8007f94 <xQueueReceive+0x74>
 8007f92:	2300      	movs	r3, #0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10a      	bne.n	8007fae <xQueueReceive+0x8e>
	__asm volatile
 8007f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	61bb      	str	r3, [r7, #24]
}
 8007faa:	bf00      	nop
 8007fac:	e7fe      	b.n	8007fac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fae:	f002 f8f9 	bl	800a1a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d01f      	beq.n	8007ffe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007fbe:	68b9      	ldr	r1, [r7, #8]
 8007fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fc2:	f000 fafa 	bl	80085ba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc8:	1e5a      	subs	r2, r3, #1
 8007fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fcc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00f      	beq.n	8007ff6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd8:	3310      	adds	r3, #16
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f001 f8a0 	bl	8009120 <xTaskRemoveFromEventList>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d007      	beq.n	8007ff6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007fe6:	4b3d      	ldr	r3, [pc, #244]	; (80080dc <xQueueReceive+0x1bc>)
 8007fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ff6:	f002 f905 	bl	800a204 <vPortExitCritical>
				return pdPASS;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e069      	b.n	80080d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d103      	bne.n	800800c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008004:	f002 f8fe 	bl	800a204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008008:	2300      	movs	r3, #0
 800800a:	e062      	b.n	80080d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800800c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800e:	2b00      	cmp	r3, #0
 8008010:	d106      	bne.n	8008020 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008012:	f107 0310 	add.w	r3, r7, #16
 8008016:	4618      	mov	r0, r3
 8008018:	f001 f8e4 	bl	80091e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800801c:	2301      	movs	r3, #1
 800801e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008020:	f002 f8f0 	bl	800a204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008024:	f000 fe46 	bl	8008cb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008028:	f002 f8bc 	bl	800a1a4 <vPortEnterCritical>
 800802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008032:	b25b      	sxtb	r3, r3
 8008034:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008038:	d103      	bne.n	8008042 <xQueueReceive+0x122>
 800803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803c:	2200      	movs	r2, #0
 800803e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008044:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008048:	b25b      	sxtb	r3, r3
 800804a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800804e:	d103      	bne.n	8008058 <xQueueReceive+0x138>
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008058:	f002 f8d4 	bl	800a204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800805c:	1d3a      	adds	r2, r7, #4
 800805e:	f107 0310 	add.w	r3, r7, #16
 8008062:	4611      	mov	r1, r2
 8008064:	4618      	mov	r0, r3
 8008066:	f001 f8d3 	bl	8009210 <xTaskCheckForTimeOut>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d123      	bne.n	80080b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008072:	f000 fb1a 	bl	80086aa <prvIsQueueEmpty>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d017      	beq.n	80080ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800807c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807e:	3324      	adds	r3, #36	; 0x24
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	4611      	mov	r1, r2
 8008084:	4618      	mov	r0, r3
 8008086:	f000 fffb 	bl	8009080 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800808a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800808c:	f000 fabb 	bl	8008606 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008090:	f000 fe1e 	bl	8008cd0 <xTaskResumeAll>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d189      	bne.n	8007fae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800809a:	4b10      	ldr	r3, [pc, #64]	; (80080dc <xQueueReceive+0x1bc>)
 800809c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080a0:	601a      	str	r2, [r3, #0]
 80080a2:	f3bf 8f4f 	dsb	sy
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	e780      	b.n	8007fae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80080ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ae:	f000 faaa 	bl	8008606 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080b2:	f000 fe0d 	bl	8008cd0 <xTaskResumeAll>
 80080b6:	e77a      	b.n	8007fae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80080b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ba:	f000 faa4 	bl	8008606 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080be:	f000 fe07 	bl	8008cd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080c4:	f000 faf1 	bl	80086aa <prvIsQueueEmpty>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f43f af6f 	beq.w	8007fae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80080d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3730      	adds	r7, #48	; 0x30
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	e000ed04 	.word	0xe000ed04

080080e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b08e      	sub	sp, #56	; 0x38
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80080ea:	2300      	movs	r3, #0
 80080ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80080f2:	2300      	movs	r3, #0
 80080f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80080f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10a      	bne.n	8008112 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80080fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	623b      	str	r3, [r7, #32]
}
 800810e:	bf00      	nop
 8008110:	e7fe      	b.n	8008110 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00a      	beq.n	8008130 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	61fb      	str	r3, [r7, #28]
}
 800812c:	bf00      	nop
 800812e:	e7fe      	b.n	800812e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008130:	f001 f9b6 	bl	80094a0 <xTaskGetSchedulerState>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d102      	bne.n	8008140 <xQueueSemaphoreTake+0x60>
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d101      	bne.n	8008144 <xQueueSemaphoreTake+0x64>
 8008140:	2301      	movs	r3, #1
 8008142:	e000      	b.n	8008146 <xQueueSemaphoreTake+0x66>
 8008144:	2300      	movs	r3, #0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10a      	bne.n	8008160 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800814a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	61bb      	str	r3, [r7, #24]
}
 800815c:	bf00      	nop
 800815e:	e7fe      	b.n	800815e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008160:	f002 f820 	bl	800a1a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008168:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800816a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816c:	2b00      	cmp	r3, #0
 800816e:	d024      	beq.n	80081ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008172:	1e5a      	subs	r2, r3, #1
 8008174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008176:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d104      	bne.n	800818a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008180:	f001 fb36 	bl	80097f0 <pvTaskIncrementMutexHeldCount>
 8008184:	4602      	mov	r2, r0
 8008186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008188:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800818a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00f      	beq.n	80081b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008194:	3310      	adds	r3, #16
 8008196:	4618      	mov	r0, r3
 8008198:	f000 ffc2 	bl	8009120 <xTaskRemoveFromEventList>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d007      	beq.n	80081b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80081a2:	4b54      	ldr	r3, [pc, #336]	; (80082f4 <xQueueSemaphoreTake+0x214>)
 80081a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a8:	601a      	str	r2, [r3, #0]
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80081b2:	f002 f827 	bl	800a204 <vPortExitCritical>
				return pdPASS;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e097      	b.n	80082ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d111      	bne.n	80081e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80081c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00a      	beq.n	80081dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80081c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ca:	f383 8811 	msr	BASEPRI, r3
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	f3bf 8f4f 	dsb	sy
 80081d6:	617b      	str	r3, [r7, #20]
}
 80081d8:	bf00      	nop
 80081da:	e7fe      	b.n	80081da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80081dc:	f002 f812 	bl	800a204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80081e0:	2300      	movs	r3, #0
 80081e2:	e082      	b.n	80082ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d106      	bne.n	80081f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081ea:	f107 030c 	add.w	r3, r7, #12
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 fff8 	bl	80091e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081f4:	2301      	movs	r3, #1
 80081f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081f8:	f002 f804 	bl	800a204 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081fc:	f000 fd5a 	bl	8008cb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008200:	f001 ffd0 	bl	800a1a4 <vPortEnterCritical>
 8008204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008206:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800820a:	b25b      	sxtb	r3, r3
 800820c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008210:	d103      	bne.n	800821a <xQueueSemaphoreTake+0x13a>
 8008212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008214:	2200      	movs	r2, #0
 8008216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800821a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008220:	b25b      	sxtb	r3, r3
 8008222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008226:	d103      	bne.n	8008230 <xQueueSemaphoreTake+0x150>
 8008228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822a:	2200      	movs	r2, #0
 800822c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008230:	f001 ffe8 	bl	800a204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008234:	463a      	mov	r2, r7
 8008236:	f107 030c 	add.w	r3, r7, #12
 800823a:	4611      	mov	r1, r2
 800823c:	4618      	mov	r0, r3
 800823e:	f000 ffe7 	bl	8009210 <xTaskCheckForTimeOut>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d132      	bne.n	80082ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008248:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800824a:	f000 fa2e 	bl	80086aa <prvIsQueueEmpty>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d026      	beq.n	80082a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d109      	bne.n	8008270 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800825c:	f001 ffa2 	bl	800a1a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	4618      	mov	r0, r3
 8008266:	f001 f939 	bl	80094dc <xTaskPriorityInherit>
 800826a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800826c:	f001 ffca 	bl	800a204 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008272:	3324      	adds	r3, #36	; 0x24
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	4611      	mov	r1, r2
 8008278:	4618      	mov	r0, r3
 800827a:	f000 ff01 	bl	8009080 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800827e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008280:	f000 f9c1 	bl	8008606 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008284:	f000 fd24 	bl	8008cd0 <xTaskResumeAll>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	f47f af68 	bne.w	8008160 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008290:	4b18      	ldr	r3, [pc, #96]	; (80082f4 <xQueueSemaphoreTake+0x214>)
 8008292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008296:	601a      	str	r2, [r3, #0]
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	e75e      	b.n	8008160 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80082a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082a4:	f000 f9af 	bl	8008606 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082a8:	f000 fd12 	bl	8008cd0 <xTaskResumeAll>
 80082ac:	e758      	b.n	8008160 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80082ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082b0:	f000 f9a9 	bl	8008606 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082b4:	f000 fd0c 	bl	8008cd0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082ba:	f000 f9f6 	bl	80086aa <prvIsQueueEmpty>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f43f af4d 	beq.w	8008160 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80082c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00d      	beq.n	80082e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80082cc:	f001 ff6a 	bl	800a1a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80082d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082d2:	f000 f8f0 	bl	80084b6 <prvGetDisinheritPriorityAfterTimeout>
 80082d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80082d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082de:	4618      	mov	r0, r3
 80082e0:	f001 f9f8 	bl	80096d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80082e4:	f001 ff8e 	bl	800a204 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80082e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3738      	adds	r7, #56	; 0x38
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	e000ed04 	.word	0xe000ed04

080082f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b08e      	sub	sp, #56	; 0x38
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10a      	bne.n	8008324 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800830e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008312:	f383 8811 	msr	BASEPRI, r3
 8008316:	f3bf 8f6f 	isb	sy
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	623b      	str	r3, [r7, #32]
}
 8008320:	bf00      	nop
 8008322:	e7fe      	b.n	8008322 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d103      	bne.n	8008332 <xQueueReceiveFromISR+0x3a>
 800832a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832e:	2b00      	cmp	r3, #0
 8008330:	d101      	bne.n	8008336 <xQueueReceiveFromISR+0x3e>
 8008332:	2301      	movs	r3, #1
 8008334:	e000      	b.n	8008338 <xQueueReceiveFromISR+0x40>
 8008336:	2300      	movs	r3, #0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10a      	bne.n	8008352 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800833c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008340:	f383 8811 	msr	BASEPRI, r3
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	61fb      	str	r3, [r7, #28]
}
 800834e:	bf00      	nop
 8008350:	e7fe      	b.n	8008350 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008352:	f002 f809 	bl	800a368 <vPortValidateInterruptPriority>
	__asm volatile
 8008356:	f3ef 8211 	mrs	r2, BASEPRI
 800835a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	61ba      	str	r2, [r7, #24]
 800836c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800836e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008370:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008376:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837a:	2b00      	cmp	r3, #0
 800837c:	d02f      	beq.n	80083de <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800837e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008380:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008388:	68b9      	ldr	r1, [r7, #8]
 800838a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800838c:	f000 f915 	bl	80085ba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008392:	1e5a      	subs	r2, r3, #1
 8008394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008396:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008398:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800839c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083a0:	d112      	bne.n	80083c8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d016      	beq.n	80083d8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ac:	3310      	adds	r3, #16
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 feb6 	bl	8009120 <xTaskRemoveFromEventList>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00e      	beq.n	80083d8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00b      	beq.n	80083d8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	601a      	str	r2, [r3, #0]
 80083c6:	e007      	b.n	80083d8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80083c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083cc:	3301      	adds	r3, #1
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	b25a      	sxtb	r2, r3
 80083d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80083d8:	2301      	movs	r3, #1
 80083da:	637b      	str	r3, [r7, #52]	; 0x34
 80083dc:	e001      	b.n	80083e2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80083de:	2300      	movs	r3, #0
 80083e0:	637b      	str	r3, [r7, #52]	; 0x34
 80083e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	f383 8811 	msr	BASEPRI, r3
}
 80083ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80083ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3738      	adds	r7, #56	; 0x38
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10a      	bne.n	800841c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8008406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	60bb      	str	r3, [r7, #8]
}
 8008418:	bf00      	nop
 800841a:	e7fe      	b.n	800841a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800841c:	f001 fec2 	bl	800a1a4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008424:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008426:	f001 feed 	bl	800a204 <vPortExitCritical>

	return uxReturn;
 800842a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800842c:	4618      	mov	r0, r3
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008434:	b480      	push	{r7}
 8008436:	b087      	sub	sp, #28
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10a      	bne.n	800845c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8008446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	60fb      	str	r3, [r7, #12]
}
 8008458:	bf00      	nop
 800845a:	e7fe      	b.n	800845a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008460:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8008462:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008464:	4618      	mov	r0, r3
 8008466:	371c      	adds	r7, #28
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10a      	bne.n	8008498 <vQueueDelete+0x28>
	__asm volatile
 8008482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008486:	f383 8811 	msr	BASEPRI, r3
 800848a:	f3bf 8f6f 	isb	sy
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	60bb      	str	r3, [r7, #8]
}
 8008494:	bf00      	nop
 8008496:	e7fe      	b.n	8008496 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f000 f95f 	bl	800875c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d102      	bne.n	80084ae <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f002 f869 	bl	800a580 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80084ae:	bf00      	nop
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80084b6:	b480      	push	{r7}
 80084b8:	b085      	sub	sp, #20
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d006      	beq.n	80084d4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f1c3 0307 	rsb	r3, r3, #7
 80084d0:	60fb      	str	r3, [r7, #12]
 80084d2:	e001      	b.n	80084d8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80084d4:	2300      	movs	r3, #0
 80084d6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80084d8:	68fb      	ldr	r3, [r7, #12]
	}
 80084da:	4618      	mov	r0, r3
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b086      	sub	sp, #24
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	60f8      	str	r0, [r7, #12]
 80084ee:	60b9      	str	r1, [r7, #8]
 80084f0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80084f2:	2300      	movs	r3, #0
 80084f4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10d      	bne.n	8008520 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d14d      	bne.n	80085a8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	4618      	mov	r0, r3
 8008512:	f001 f859 	bl	80095c8 <xTaskPriorityDisinherit>
 8008516:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	609a      	str	r2, [r3, #8]
 800851e:	e043      	b.n	80085a8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d119      	bne.n	800855a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6858      	ldr	r0, [r3, #4]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852e:	461a      	mov	r2, r3
 8008530:	68b9      	ldr	r1, [r7, #8]
 8008532:	f019 fc18 	bl	8021d66 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	685a      	ldr	r2, [r3, #4]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853e:	441a      	add	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	429a      	cmp	r2, r3
 800854e:	d32b      	bcc.n	80085a8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	605a      	str	r2, [r3, #4]
 8008558:	e026      	b.n	80085a8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	68d8      	ldr	r0, [r3, #12]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008562:	461a      	mov	r2, r3
 8008564:	68b9      	ldr	r1, [r7, #8]
 8008566:	f019 fbfe 	bl	8021d66 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	68da      	ldr	r2, [r3, #12]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008572:	425b      	negs	r3, r3
 8008574:	441a      	add	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	68da      	ldr	r2, [r3, #12]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	429a      	cmp	r2, r3
 8008584:	d207      	bcs.n	8008596 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	689a      	ldr	r2, [r3, #8]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858e:	425b      	negs	r3, r3
 8008590:	441a      	add	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b02      	cmp	r3, #2
 800859a:	d105      	bne.n	80085a8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	3b01      	subs	r3, #1
 80085a6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	1c5a      	adds	r2, r3, #1
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80085b0:	697b      	ldr	r3, [r7, #20]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3718      	adds	r7, #24
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b082      	sub	sp, #8
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d018      	beq.n	80085fe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68da      	ldr	r2, [r3, #12]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d4:	441a      	add	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68da      	ldr	r2, [r3, #12]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d303      	bcc.n	80085ee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	68d9      	ldr	r1, [r3, #12]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f6:	461a      	mov	r2, r3
 80085f8:	6838      	ldr	r0, [r7, #0]
 80085fa:	f019 fbb4 	bl	8021d66 <memcpy>
	}
}
 80085fe:	bf00      	nop
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b084      	sub	sp, #16
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800860e:	f001 fdc9 	bl	800a1a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008618:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800861a:	e011      	b.n	8008640 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008620:	2b00      	cmp	r3, #0
 8008622:	d012      	beq.n	800864a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	3324      	adds	r3, #36	; 0x24
 8008628:	4618      	mov	r0, r3
 800862a:	f000 fd79 	bl	8009120 <xTaskRemoveFromEventList>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d001      	beq.n	8008638 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008634:	f000 fe4e 	bl	80092d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008638:	7bfb      	ldrb	r3, [r7, #15]
 800863a:	3b01      	subs	r3, #1
 800863c:	b2db      	uxtb	r3, r3
 800863e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008644:	2b00      	cmp	r3, #0
 8008646:	dce9      	bgt.n	800861c <prvUnlockQueue+0x16>
 8008648:	e000      	b.n	800864c <prvUnlockQueue+0x46>
					break;
 800864a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	22ff      	movs	r2, #255	; 0xff
 8008650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008654:	f001 fdd6 	bl	800a204 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008658:	f001 fda4 	bl	800a1a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008662:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008664:	e011      	b.n	800868a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d012      	beq.n	8008694 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	3310      	adds	r3, #16
 8008672:	4618      	mov	r0, r3
 8008674:	f000 fd54 	bl	8009120 <xTaskRemoveFromEventList>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800867e:	f000 fe29 	bl	80092d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008682:	7bbb      	ldrb	r3, [r7, #14]
 8008684:	3b01      	subs	r3, #1
 8008686:	b2db      	uxtb	r3, r3
 8008688:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800868a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800868e:	2b00      	cmp	r3, #0
 8008690:	dce9      	bgt.n	8008666 <prvUnlockQueue+0x60>
 8008692:	e000      	b.n	8008696 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008694:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	22ff      	movs	r2, #255	; 0xff
 800869a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800869e:	f001 fdb1 	bl	800a204 <vPortExitCritical>
}
 80086a2:	bf00      	nop
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b084      	sub	sp, #16
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086b2:	f001 fd77 	bl	800a1a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d102      	bne.n	80086c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80086be:	2301      	movs	r3, #1
 80086c0:	60fb      	str	r3, [r7, #12]
 80086c2:	e001      	b.n	80086c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80086c4:	2300      	movs	r3, #0
 80086c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086c8:	f001 fd9c 	bl	800a204 <vPortExitCritical>

	return xReturn;
 80086cc:	68fb      	ldr	r3, [r7, #12]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086de:	f001 fd61 	bl	800a1a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d102      	bne.n	80086f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80086ee:	2301      	movs	r3, #1
 80086f0:	60fb      	str	r3, [r7, #12]
 80086f2:	e001      	b.n	80086f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80086f4:	2300      	movs	r3, #0
 80086f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086f8:	f001 fd84 	bl	800a204 <vPortExitCritical>

	return xReturn;
 80086fc:	68fb      	ldr	r3, [r7, #12]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
	...

08008708 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008712:	2300      	movs	r3, #0
 8008714:	60fb      	str	r3, [r7, #12]
 8008716:	e014      	b.n	8008742 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008718:	4a0f      	ldr	r2, [pc, #60]	; (8008758 <vQueueAddToRegistry+0x50>)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10b      	bne.n	800873c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008724:	490c      	ldr	r1, [pc, #48]	; (8008758 <vQueueAddToRegistry+0x50>)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800872e:	4a0a      	ldr	r2, [pc, #40]	; (8008758 <vQueueAddToRegistry+0x50>)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	00db      	lsls	r3, r3, #3
 8008734:	4413      	add	r3, r2
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800873a:	e006      	b.n	800874a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	3301      	adds	r3, #1
 8008740:	60fb      	str	r3, [r7, #12]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2b07      	cmp	r3, #7
 8008746:	d9e7      	bls.n	8008718 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008748:	bf00      	nop
 800874a:	bf00      	nop
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop
 8008758:	200057ac 	.word	0x200057ac

0800875c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008764:	2300      	movs	r3, #0
 8008766:	60fb      	str	r3, [r7, #12]
 8008768:	e016      	b.n	8008798 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800876a:	4a10      	ldr	r2, [pc, #64]	; (80087ac <vQueueUnregisterQueue+0x50>)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	00db      	lsls	r3, r3, #3
 8008770:	4413      	add	r3, r2
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	429a      	cmp	r2, r3
 8008778:	d10b      	bne.n	8008792 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800877a:	4a0c      	ldr	r2, [pc, #48]	; (80087ac <vQueueUnregisterQueue+0x50>)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2100      	movs	r1, #0
 8008780:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008784:	4a09      	ldr	r2, [pc, #36]	; (80087ac <vQueueUnregisterQueue+0x50>)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	00db      	lsls	r3, r3, #3
 800878a:	4413      	add	r3, r2
 800878c:	2200      	movs	r2, #0
 800878e:	605a      	str	r2, [r3, #4]
				break;
 8008790:	e006      	b.n	80087a0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3301      	adds	r3, #1
 8008796:	60fb      	str	r3, [r7, #12]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2b07      	cmp	r3, #7
 800879c:	d9e5      	bls.n	800876a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800879e:	bf00      	nop
 80087a0:	bf00      	nop
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	200057ac 	.word	0x200057ac

080087b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80087c0:	f001 fcf0 	bl	800a1a4 <vPortEnterCritical>
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087ca:	b25b      	sxtb	r3, r3
 80087cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087d0:	d103      	bne.n	80087da <vQueueWaitForMessageRestricted+0x2a>
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087e0:	b25b      	sxtb	r3, r3
 80087e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087e6:	d103      	bne.n	80087f0 <vQueueWaitForMessageRestricted+0x40>
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087f0:	f001 fd08 	bl	800a204 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d106      	bne.n	800880a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	3324      	adds	r3, #36	; 0x24
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	68b9      	ldr	r1, [r7, #8]
 8008804:	4618      	mov	r0, r3
 8008806:	f000 fc5f 	bl	80090c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800880a:	6978      	ldr	r0, [r7, #20]
 800880c:	f7ff fefb 	bl	8008606 <prvUnlockQueue>
	}
 8008810:	bf00      	nop
 8008812:	3718      	adds	r7, #24
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008818:	b580      	push	{r7, lr}
 800881a:	b08e      	sub	sp, #56	; 0x38
 800881c:	af04      	add	r7, sp, #16
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
 8008824:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10a      	bne.n	8008842 <xTaskCreateStatic+0x2a>
	__asm volatile
 800882c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008830:	f383 8811 	msr	BASEPRI, r3
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	623b      	str	r3, [r7, #32]
}
 800883e:	bf00      	nop
 8008840:	e7fe      	b.n	8008840 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10a      	bne.n	800885e <xTaskCreateStatic+0x46>
	__asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	61fb      	str	r3, [r7, #28]
}
 800885a:	bf00      	nop
 800885c:	e7fe      	b.n	800885c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800885e:	23a0      	movs	r3, #160	; 0xa0
 8008860:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	2ba0      	cmp	r3, #160	; 0xa0
 8008866:	d00a      	beq.n	800887e <xTaskCreateStatic+0x66>
	__asm volatile
 8008868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886c:	f383 8811 	msr	BASEPRI, r3
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	61bb      	str	r3, [r7, #24]
}
 800887a:	bf00      	nop
 800887c:	e7fe      	b.n	800887c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800887e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008882:	2b00      	cmp	r3, #0
 8008884:	d01e      	beq.n	80088c4 <xTaskCreateStatic+0xac>
 8008886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008888:	2b00      	cmp	r3, #0
 800888a:	d01b      	beq.n	80088c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800888c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008894:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008898:	2202      	movs	r2, #2
 800889a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800889e:	2300      	movs	r3, #0
 80088a0:	9303      	str	r3, [sp, #12]
 80088a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a4:	9302      	str	r3, [sp, #8]
 80088a6:	f107 0314 	add.w	r3, r7, #20
 80088aa:	9301      	str	r3, [sp, #4]
 80088ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	68b9      	ldr	r1, [r7, #8]
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f000 f850 	bl	800895c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088be:	f000 f8eb 	bl	8008a98 <prvAddNewTaskToReadyList>
 80088c2:	e001      	b.n	80088c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80088c4:	2300      	movs	r3, #0
 80088c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80088c8:	697b      	ldr	r3, [r7, #20]
	}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3728      	adds	r7, #40	; 0x28
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b08c      	sub	sp, #48	; 0x30
 80088d6:	af04      	add	r7, sp, #16
 80088d8:	60f8      	str	r0, [r7, #12]
 80088da:	60b9      	str	r1, [r7, #8]
 80088dc:	603b      	str	r3, [r7, #0]
 80088de:	4613      	mov	r3, r2
 80088e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80088e2:	88fb      	ldrh	r3, [r7, #6]
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4618      	mov	r0, r3
 80088e8:	f001 fd7e 	bl	800a3e8 <pvPortMalloc>
 80088ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00e      	beq.n	8008912 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80088f4:	20a0      	movs	r0, #160	; 0xa0
 80088f6:	f001 fd77 	bl	800a3e8 <pvPortMalloc>
 80088fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d003      	beq.n	800890a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	631a      	str	r2, [r3, #48]	; 0x30
 8008908:	e005      	b.n	8008916 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800890a:	6978      	ldr	r0, [r7, #20]
 800890c:	f001 fe38 	bl	800a580 <vPortFree>
 8008910:	e001      	b.n	8008916 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008912:	2300      	movs	r3, #0
 8008914:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d017      	beq.n	800894c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008924:	88fa      	ldrh	r2, [r7, #6]
 8008926:	2300      	movs	r3, #0
 8008928:	9303      	str	r3, [sp, #12]
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	9302      	str	r3, [sp, #8]
 800892e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008930:	9301      	str	r3, [sp, #4]
 8008932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	68b9      	ldr	r1, [r7, #8]
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f000 f80e 	bl	800895c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008940:	69f8      	ldr	r0, [r7, #28]
 8008942:	f000 f8a9 	bl	8008a98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008946:	2301      	movs	r3, #1
 8008948:	61bb      	str	r3, [r7, #24]
 800894a:	e002      	b.n	8008952 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800894c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008950:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008952:	69bb      	ldr	r3, [r7, #24]
	}
 8008954:	4618      	mov	r0, r3
 8008956:	3720      	adds	r7, #32
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b088      	sub	sp, #32
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
 8008968:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800896a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008974:	3b01      	subs	r3, #1
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4413      	add	r3, r2
 800897a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	f023 0307 	bic.w	r3, r3, #7
 8008982:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	f003 0307 	and.w	r3, r3, #7
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00a      	beq.n	80089a4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800898e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	617b      	str	r3, [r7, #20]
}
 80089a0:	bf00      	nop
 80089a2:	e7fe      	b.n	80089a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d01f      	beq.n	80089ea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089aa:	2300      	movs	r3, #0
 80089ac:	61fb      	str	r3, [r7, #28]
 80089ae:	e012      	b.n	80089d6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	4413      	add	r3, r2
 80089b6:	7819      	ldrb	r1, [r3, #0]
 80089b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	4413      	add	r3, r2
 80089be:	3334      	adds	r3, #52	; 0x34
 80089c0:	460a      	mov	r2, r1
 80089c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	4413      	add	r3, r2
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d006      	beq.n	80089de <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	3301      	adds	r3, #1
 80089d4:	61fb      	str	r3, [r7, #28]
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	2b0f      	cmp	r3, #15
 80089da:	d9e9      	bls.n	80089b0 <prvInitialiseNewTask+0x54>
 80089dc:	e000      	b.n	80089e0 <prvInitialiseNewTask+0x84>
			{
				break;
 80089de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80089e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089e8:	e003      	b.n	80089f2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80089ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80089f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f4:	2b06      	cmp	r3, #6
 80089f6:	d901      	bls.n	80089fc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80089f8:	2306      	movs	r3, #6
 80089fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80089fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a06:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a10:	3304      	adds	r3, #4
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fe fe43 	bl	800769e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1a:	3318      	adds	r3, #24
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7fe fe3e 	bl	800769e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2a:	f1c3 0207 	rsb	r2, r3, #7
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4a:	334c      	adds	r3, #76	; 0x4c
 8008a4c:	224c      	movs	r2, #76	; 0x4c
 8008a4e:	2100      	movs	r1, #0
 8008a50:	4618      	mov	r0, r3
 8008a52:	f019 f877 	bl	8021b44 <memset>
 8008a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a58:	4a0c      	ldr	r2, [pc, #48]	; (8008a8c <prvInitialiseNewTask+0x130>)
 8008a5a:	651a      	str	r2, [r3, #80]	; 0x50
 8008a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5e:	4a0c      	ldr	r2, [pc, #48]	; (8008a90 <prvInitialiseNewTask+0x134>)
 8008a60:	655a      	str	r2, [r3, #84]	; 0x54
 8008a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a64:	4a0b      	ldr	r2, [pc, #44]	; (8008a94 <prvInitialiseNewTask+0x138>)
 8008a66:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a68:	683a      	ldr	r2, [r7, #0]
 8008a6a:	68f9      	ldr	r1, [r7, #12]
 8008a6c:	69b8      	ldr	r0, [r7, #24]
 8008a6e:	f001 fa6b 	bl	8009f48 <pxPortInitialiseStack>
 8008a72:	4602      	mov	r2, r0
 8008a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a76:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d002      	beq.n	8008a84 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a84:	bf00      	nop
 8008a86:	3720      	adds	r7, #32
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	20012ba8 	.word	0x20012ba8
 8008a90:	20012c10 	.word	0x20012c10
 8008a94:	20012c78 	.word	0x20012c78

08008a98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008aa0:	f001 fb80 	bl	800a1a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008aa4:	4b2a      	ldr	r3, [pc, #168]	; (8008b50 <prvAddNewTaskToReadyList+0xb8>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	4a29      	ldr	r2, [pc, #164]	; (8008b50 <prvAddNewTaskToReadyList+0xb8>)
 8008aac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008aae:	4b29      	ldr	r3, [pc, #164]	; (8008b54 <prvAddNewTaskToReadyList+0xbc>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d109      	bne.n	8008aca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ab6:	4a27      	ldr	r2, [pc, #156]	; (8008b54 <prvAddNewTaskToReadyList+0xbc>)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008abc:	4b24      	ldr	r3, [pc, #144]	; (8008b50 <prvAddNewTaskToReadyList+0xb8>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d110      	bne.n	8008ae6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ac4:	f000 fc2a 	bl	800931c <prvInitialiseTaskLists>
 8008ac8:	e00d      	b.n	8008ae6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008aca:	4b23      	ldr	r3, [pc, #140]	; (8008b58 <prvAddNewTaskToReadyList+0xc0>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d109      	bne.n	8008ae6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ad2:	4b20      	ldr	r3, [pc, #128]	; (8008b54 <prvAddNewTaskToReadyList+0xbc>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d802      	bhi.n	8008ae6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ae0:	4a1c      	ldr	r2, [pc, #112]	; (8008b54 <prvAddNewTaskToReadyList+0xbc>)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ae6:	4b1d      	ldr	r3, [pc, #116]	; (8008b5c <prvAddNewTaskToReadyList+0xc4>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3301      	adds	r3, #1
 8008aec:	4a1b      	ldr	r2, [pc, #108]	; (8008b5c <prvAddNewTaskToReadyList+0xc4>)
 8008aee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af4:	2201      	movs	r2, #1
 8008af6:	409a      	lsls	r2, r3
 8008af8:	4b19      	ldr	r3, [pc, #100]	; (8008b60 <prvAddNewTaskToReadyList+0xc8>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	4a18      	ldr	r2, [pc, #96]	; (8008b60 <prvAddNewTaskToReadyList+0xc8>)
 8008b00:	6013      	str	r3, [r2, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b06:	4613      	mov	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4a15      	ldr	r2, [pc, #84]	; (8008b64 <prvAddNewTaskToReadyList+0xcc>)
 8008b10:	441a      	add	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	3304      	adds	r3, #4
 8008b16:	4619      	mov	r1, r3
 8008b18:	4610      	mov	r0, r2
 8008b1a:	f7fe fdcd 	bl	80076b8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b1e:	f001 fb71 	bl	800a204 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b22:	4b0d      	ldr	r3, [pc, #52]	; (8008b58 <prvAddNewTaskToReadyList+0xc0>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00e      	beq.n	8008b48 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b2a:	4b0a      	ldr	r3, [pc, #40]	; (8008b54 <prvAddNewTaskToReadyList+0xbc>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d207      	bcs.n	8008b48 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b38:	4b0b      	ldr	r3, [pc, #44]	; (8008b68 <prvAddNewTaskToReadyList+0xd0>)
 8008b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b3e:	601a      	str	r2, [r3, #0]
 8008b40:	f3bf 8f4f 	dsb	sy
 8008b44:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b48:	bf00      	nop
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	200058ec 	.word	0x200058ec
 8008b54:	200057ec 	.word	0x200057ec
 8008b58:	200058f8 	.word	0x200058f8
 8008b5c:	20005908 	.word	0x20005908
 8008b60:	200058f4 	.word	0x200058f4
 8008b64:	200057f0 	.word	0x200057f0
 8008b68:	e000ed04 	.word	0xe000ed04

08008b6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b74:	2300      	movs	r3, #0
 8008b76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d017      	beq.n	8008bae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b7e:	4b13      	ldr	r3, [pc, #76]	; (8008bcc <vTaskDelay+0x60>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00a      	beq.n	8008b9c <vTaskDelay+0x30>
	__asm volatile
 8008b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	60bb      	str	r3, [r7, #8]
}
 8008b98:	bf00      	nop
 8008b9a:	e7fe      	b.n	8008b9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b9c:	f000 f88a 	bl	8008cb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fe38 	bl	8009818 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ba8:	f000 f892 	bl	8008cd0 <xTaskResumeAll>
 8008bac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d107      	bne.n	8008bc4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008bb4:	4b06      	ldr	r3, [pc, #24]	; (8008bd0 <vTaskDelay+0x64>)
 8008bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bba:	601a      	str	r2, [r3, #0]
 8008bbc:	f3bf 8f4f 	dsb	sy
 8008bc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008bc4:	bf00      	nop
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	20005914 	.word	0x20005914
 8008bd0:	e000ed04 	.word	0xe000ed04

08008bd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b08a      	sub	sp, #40	; 0x28
 8008bd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008bde:	2300      	movs	r3, #0
 8008be0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008be2:	463a      	mov	r2, r7
 8008be4:	1d39      	adds	r1, r7, #4
 8008be6:	f107 0308 	add.w	r3, r7, #8
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7f8 f8a2 	bl	8000d34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008bf0:	6839      	ldr	r1, [r7, #0]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	9202      	str	r2, [sp, #8]
 8008bf8:	9301      	str	r3, [sp, #4]
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	9300      	str	r3, [sp, #0]
 8008bfe:	2300      	movs	r3, #0
 8008c00:	460a      	mov	r2, r1
 8008c02:	4924      	ldr	r1, [pc, #144]	; (8008c94 <vTaskStartScheduler+0xc0>)
 8008c04:	4824      	ldr	r0, [pc, #144]	; (8008c98 <vTaskStartScheduler+0xc4>)
 8008c06:	f7ff fe07 	bl	8008818 <xTaskCreateStatic>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	4a23      	ldr	r2, [pc, #140]	; (8008c9c <vTaskStartScheduler+0xc8>)
 8008c0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c10:	4b22      	ldr	r3, [pc, #136]	; (8008c9c <vTaskStartScheduler+0xc8>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d002      	beq.n	8008c1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	617b      	str	r3, [r7, #20]
 8008c1c:	e001      	b.n	8008c22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d102      	bne.n	8008c2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008c28:	f000 fe5c 	bl	80098e4 <xTimerCreateTimerTask>
 8008c2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d11b      	bne.n	8008c6c <vTaskStartScheduler+0x98>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	613b      	str	r3, [r7, #16]
}
 8008c46:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c48:	4b15      	ldr	r3, [pc, #84]	; (8008ca0 <vTaskStartScheduler+0xcc>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	334c      	adds	r3, #76	; 0x4c
 8008c4e:	4a15      	ldr	r2, [pc, #84]	; (8008ca4 <vTaskStartScheduler+0xd0>)
 8008c50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008c52:	4b15      	ldr	r3, [pc, #84]	; (8008ca8 <vTaskStartScheduler+0xd4>)
 8008c54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c5a:	4b14      	ldr	r3, [pc, #80]	; (8008cac <vTaskStartScheduler+0xd8>)
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c60:	4b13      	ldr	r3, [pc, #76]	; (8008cb0 <vTaskStartScheduler+0xdc>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c66:	f001 f9fb 	bl	800a060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c6a:	e00e      	b.n	8008c8a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c72:	d10a      	bne.n	8008c8a <vTaskStartScheduler+0xb6>
	__asm volatile
 8008c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	60fb      	str	r3, [r7, #12]
}
 8008c86:	bf00      	nop
 8008c88:	e7fe      	b.n	8008c88 <vTaskStartScheduler+0xb4>
}
 8008c8a:	bf00      	nop
 8008c8c:	3718      	adds	r7, #24
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	080232b0 	.word	0x080232b0
 8008c98:	080092ed 	.word	0x080092ed
 8008c9c:	20005910 	.word	0x20005910
 8008ca0:	200057ec 	.word	0x200057ec
 8008ca4:	20000094 	.word	0x20000094
 8008ca8:	2000590c 	.word	0x2000590c
 8008cac:	200058f8 	.word	0x200058f8
 8008cb0:	200058f0 	.word	0x200058f0

08008cb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008cb8:	4b04      	ldr	r3, [pc, #16]	; (8008ccc <vTaskSuspendAll+0x18>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	4a03      	ldr	r2, [pc, #12]	; (8008ccc <vTaskSuspendAll+0x18>)
 8008cc0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008cc2:	bf00      	nop
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	20005914 	.word	0x20005914

08008cd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008cde:	4b41      	ldr	r3, [pc, #260]	; (8008de4 <xTaskResumeAll+0x114>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d10a      	bne.n	8008cfc <xTaskResumeAll+0x2c>
	__asm volatile
 8008ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cea:	f383 8811 	msr	BASEPRI, r3
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	f3bf 8f4f 	dsb	sy
 8008cf6:	603b      	str	r3, [r7, #0]
}
 8008cf8:	bf00      	nop
 8008cfa:	e7fe      	b.n	8008cfa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008cfc:	f001 fa52 	bl	800a1a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d00:	4b38      	ldr	r3, [pc, #224]	; (8008de4 <xTaskResumeAll+0x114>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	3b01      	subs	r3, #1
 8008d06:	4a37      	ldr	r2, [pc, #220]	; (8008de4 <xTaskResumeAll+0x114>)
 8008d08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d0a:	4b36      	ldr	r3, [pc, #216]	; (8008de4 <xTaskResumeAll+0x114>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d161      	bne.n	8008dd6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d12:	4b35      	ldr	r3, [pc, #212]	; (8008de8 <xTaskResumeAll+0x118>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d05d      	beq.n	8008dd6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d1a:	e02e      	b.n	8008d7a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d1c:	4b33      	ldr	r3, [pc, #204]	; (8008dec <xTaskResumeAll+0x11c>)
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	3318      	adds	r3, #24
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7fe fd22 	bl	8007772 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	3304      	adds	r3, #4
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7fe fd1d 	bl	8007772 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	409a      	lsls	r2, r3
 8008d40:	4b2b      	ldr	r3, [pc, #172]	; (8008df0 <xTaskResumeAll+0x120>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	4a2a      	ldr	r2, [pc, #168]	; (8008df0 <xTaskResumeAll+0x120>)
 8008d48:	6013      	str	r3, [r2, #0]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d4e:	4613      	mov	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4a27      	ldr	r2, [pc, #156]	; (8008df4 <xTaskResumeAll+0x124>)
 8008d58:	441a      	add	r2, r3
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	4619      	mov	r1, r3
 8008d60:	4610      	mov	r0, r2
 8008d62:	f7fe fca9 	bl	80076b8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d6a:	4b23      	ldr	r3, [pc, #140]	; (8008df8 <xTaskResumeAll+0x128>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d302      	bcc.n	8008d7a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008d74:	4b21      	ldr	r3, [pc, #132]	; (8008dfc <xTaskResumeAll+0x12c>)
 8008d76:	2201      	movs	r2, #1
 8008d78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d7a:	4b1c      	ldr	r3, [pc, #112]	; (8008dec <xTaskResumeAll+0x11c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1cc      	bne.n	8008d1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d001      	beq.n	8008d8c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d88:	f000 fb6a 	bl	8009460 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d8c:	4b1c      	ldr	r3, [pc, #112]	; (8008e00 <xTaskResumeAll+0x130>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d010      	beq.n	8008dba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d98:	f000 f858 	bl	8008e4c <xTaskIncrementTick>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d002      	beq.n	8008da8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008da2:	4b16      	ldr	r3, [pc, #88]	; (8008dfc <xTaskResumeAll+0x12c>)
 8008da4:	2201      	movs	r2, #1
 8008da6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	3b01      	subs	r3, #1
 8008dac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1f1      	bne.n	8008d98 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008db4:	4b12      	ldr	r3, [pc, #72]	; (8008e00 <xTaskResumeAll+0x130>)
 8008db6:	2200      	movs	r2, #0
 8008db8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008dba:	4b10      	ldr	r3, [pc, #64]	; (8008dfc <xTaskResumeAll+0x12c>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d009      	beq.n	8008dd6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008dc6:	4b0f      	ldr	r3, [pc, #60]	; (8008e04 <xTaskResumeAll+0x134>)
 8008dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dcc:	601a      	str	r2, [r3, #0]
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008dd6:	f001 fa15 	bl	800a204 <vPortExitCritical>

	return xAlreadyYielded;
 8008dda:	68bb      	ldr	r3, [r7, #8]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	20005914 	.word	0x20005914
 8008de8:	200058ec 	.word	0x200058ec
 8008dec:	200058ac 	.word	0x200058ac
 8008df0:	200058f4 	.word	0x200058f4
 8008df4:	200057f0 	.word	0x200057f0
 8008df8:	200057ec 	.word	0x200057ec
 8008dfc:	20005900 	.word	0x20005900
 8008e00:	200058fc 	.word	0x200058fc
 8008e04:	e000ed04 	.word	0xe000ed04

08008e08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008e0e:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <xTaskGetTickCount+0x1c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008e14:	687b      	ldr	r3, [r7, #4]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	200058f0 	.word	0x200058f0

08008e28 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e2e:	f001 fa9b 	bl	800a368 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008e32:	2300      	movs	r3, #0
 8008e34:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008e36:	4b04      	ldr	r3, [pc, #16]	; (8008e48 <xTaskGetTickCountFromISR+0x20>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e3c:	683b      	ldr	r3, [r7, #0]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	200058f0 	.word	0x200058f0

08008e4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b086      	sub	sp, #24
 8008e50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008e52:	2300      	movs	r3, #0
 8008e54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e56:	4b4e      	ldr	r3, [pc, #312]	; (8008f90 <xTaskIncrementTick+0x144>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f040 808e 	bne.w	8008f7c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e60:	4b4c      	ldr	r3, [pc, #304]	; (8008f94 <xTaskIncrementTick+0x148>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3301      	adds	r3, #1
 8008e66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e68:	4a4a      	ldr	r2, [pc, #296]	; (8008f94 <xTaskIncrementTick+0x148>)
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d120      	bne.n	8008eb6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e74:	4b48      	ldr	r3, [pc, #288]	; (8008f98 <xTaskIncrementTick+0x14c>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00a      	beq.n	8008e94 <xTaskIncrementTick+0x48>
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	603b      	str	r3, [r7, #0]
}
 8008e90:	bf00      	nop
 8008e92:	e7fe      	b.n	8008e92 <xTaskIncrementTick+0x46>
 8008e94:	4b40      	ldr	r3, [pc, #256]	; (8008f98 <xTaskIncrementTick+0x14c>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	60fb      	str	r3, [r7, #12]
 8008e9a:	4b40      	ldr	r3, [pc, #256]	; (8008f9c <xTaskIncrementTick+0x150>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a3e      	ldr	r2, [pc, #248]	; (8008f98 <xTaskIncrementTick+0x14c>)
 8008ea0:	6013      	str	r3, [r2, #0]
 8008ea2:	4a3e      	ldr	r2, [pc, #248]	; (8008f9c <xTaskIncrementTick+0x150>)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6013      	str	r3, [r2, #0]
 8008ea8:	4b3d      	ldr	r3, [pc, #244]	; (8008fa0 <xTaskIncrementTick+0x154>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3301      	adds	r3, #1
 8008eae:	4a3c      	ldr	r2, [pc, #240]	; (8008fa0 <xTaskIncrementTick+0x154>)
 8008eb0:	6013      	str	r3, [r2, #0]
 8008eb2:	f000 fad5 	bl	8009460 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008eb6:	4b3b      	ldr	r3, [pc, #236]	; (8008fa4 <xTaskIncrementTick+0x158>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d348      	bcc.n	8008f52 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ec0:	4b35      	ldr	r3, [pc, #212]	; (8008f98 <xTaskIncrementTick+0x14c>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d104      	bne.n	8008ed4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eca:	4b36      	ldr	r3, [pc, #216]	; (8008fa4 <xTaskIncrementTick+0x158>)
 8008ecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ed0:	601a      	str	r2, [r3, #0]
					break;
 8008ed2:	e03e      	b.n	8008f52 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ed4:	4b30      	ldr	r3, [pc, #192]	; (8008f98 <xTaskIncrementTick+0x14c>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d203      	bcs.n	8008ef4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008eec:	4a2d      	ldr	r2, [pc, #180]	; (8008fa4 <xTaskIncrementTick+0x158>)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ef2:	e02e      	b.n	8008f52 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	3304      	adds	r3, #4
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7fe fc3a 	bl	8007772 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d004      	beq.n	8008f10 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	3318      	adds	r3, #24
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fe fc31 	bl	8007772 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f14:	2201      	movs	r2, #1
 8008f16:	409a      	lsls	r2, r3
 8008f18:	4b23      	ldr	r3, [pc, #140]	; (8008fa8 <xTaskIncrementTick+0x15c>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	4a22      	ldr	r2, [pc, #136]	; (8008fa8 <xTaskIncrementTick+0x15c>)
 8008f20:	6013      	str	r3, [r2, #0]
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f26:	4613      	mov	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4a1f      	ldr	r2, [pc, #124]	; (8008fac <xTaskIncrementTick+0x160>)
 8008f30:	441a      	add	r2, r3
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	3304      	adds	r3, #4
 8008f36:	4619      	mov	r1, r3
 8008f38:	4610      	mov	r0, r2
 8008f3a:	f7fe fbbd 	bl	80076b8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f42:	4b1b      	ldr	r3, [pc, #108]	; (8008fb0 <xTaskIncrementTick+0x164>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d3b9      	bcc.n	8008ec0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f50:	e7b6      	b.n	8008ec0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f52:	4b17      	ldr	r3, [pc, #92]	; (8008fb0 <xTaskIncrementTick+0x164>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f58:	4914      	ldr	r1, [pc, #80]	; (8008fac <xTaskIncrementTick+0x160>)
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4413      	add	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	440b      	add	r3, r1
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d901      	bls.n	8008f6e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008f6e:	4b11      	ldr	r3, [pc, #68]	; (8008fb4 <xTaskIncrementTick+0x168>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d007      	beq.n	8008f86 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008f76:	2301      	movs	r3, #1
 8008f78:	617b      	str	r3, [r7, #20]
 8008f7a:	e004      	b.n	8008f86 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008f7c:	4b0e      	ldr	r3, [pc, #56]	; (8008fb8 <xTaskIncrementTick+0x16c>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	3301      	adds	r3, #1
 8008f82:	4a0d      	ldr	r2, [pc, #52]	; (8008fb8 <xTaskIncrementTick+0x16c>)
 8008f84:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008f86:	697b      	ldr	r3, [r7, #20]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3718      	adds	r7, #24
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	20005914 	.word	0x20005914
 8008f94:	200058f0 	.word	0x200058f0
 8008f98:	200058a4 	.word	0x200058a4
 8008f9c:	200058a8 	.word	0x200058a8
 8008fa0:	20005904 	.word	0x20005904
 8008fa4:	2000590c 	.word	0x2000590c
 8008fa8:	200058f4 	.word	0x200058f4
 8008fac:	200057f0 	.word	0x200057f0
 8008fb0:	200057ec 	.word	0x200057ec
 8008fb4:	20005900 	.word	0x20005900
 8008fb8:	200058fc 	.word	0x200058fc

08008fbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b087      	sub	sp, #28
 8008fc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008fc2:	4b29      	ldr	r3, [pc, #164]	; (8009068 <vTaskSwitchContext+0xac>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d003      	beq.n	8008fd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008fca:	4b28      	ldr	r3, [pc, #160]	; (800906c <vTaskSwitchContext+0xb0>)
 8008fcc:	2201      	movs	r2, #1
 8008fce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008fd0:	e044      	b.n	800905c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008fd2:	4b26      	ldr	r3, [pc, #152]	; (800906c <vTaskSwitchContext+0xb0>)
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fd8:	4b25      	ldr	r3, [pc, #148]	; (8009070 <vTaskSwitchContext+0xb4>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	fab3 f383 	clz	r3, r3
 8008fe4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008fe6:	7afb      	ldrb	r3, [r7, #11]
 8008fe8:	f1c3 031f 	rsb	r3, r3, #31
 8008fec:	617b      	str	r3, [r7, #20]
 8008fee:	4921      	ldr	r1, [pc, #132]	; (8009074 <vTaskSwitchContext+0xb8>)
 8008ff0:	697a      	ldr	r2, [r7, #20]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	4413      	add	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	440b      	add	r3, r1
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10a      	bne.n	8009018 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	607b      	str	r3, [r7, #4]
}
 8009014:	bf00      	nop
 8009016:	e7fe      	b.n	8009016 <vTaskSwitchContext+0x5a>
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	4613      	mov	r3, r2
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	4413      	add	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4a14      	ldr	r2, [pc, #80]	; (8009074 <vTaskSwitchContext+0xb8>)
 8009024:	4413      	add	r3, r2
 8009026:	613b      	str	r3, [r7, #16]
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	685a      	ldr	r2, [r3, #4]
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	605a      	str	r2, [r3, #4]
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	685a      	ldr	r2, [r3, #4]
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	3308      	adds	r3, #8
 800903a:	429a      	cmp	r2, r3
 800903c:	d104      	bne.n	8009048 <vTaskSwitchContext+0x8c>
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	685a      	ldr	r2, [r3, #4]
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	605a      	str	r2, [r3, #4]
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	4a0a      	ldr	r2, [pc, #40]	; (8009078 <vTaskSwitchContext+0xbc>)
 8009050:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009052:	4b09      	ldr	r3, [pc, #36]	; (8009078 <vTaskSwitchContext+0xbc>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	334c      	adds	r3, #76	; 0x4c
 8009058:	4a08      	ldr	r2, [pc, #32]	; (800907c <vTaskSwitchContext+0xc0>)
 800905a:	6013      	str	r3, [r2, #0]
}
 800905c:	bf00      	nop
 800905e:	371c      	adds	r7, #28
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	20005914 	.word	0x20005914
 800906c:	20005900 	.word	0x20005900
 8009070:	200058f4 	.word	0x200058f4
 8009074:	200057f0 	.word	0x200057f0
 8009078:	200057ec 	.word	0x200057ec
 800907c:	20000094 	.word	0x20000094

08009080 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10a      	bne.n	80090a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	60fb      	str	r3, [r7, #12]
}
 80090a2:	bf00      	nop
 80090a4:	e7fe      	b.n	80090a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090a6:	4b07      	ldr	r3, [pc, #28]	; (80090c4 <vTaskPlaceOnEventList+0x44>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	3318      	adds	r3, #24
 80090ac:	4619      	mov	r1, r3
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7fe fb26 	bl	8007700 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80090b4:	2101      	movs	r1, #1
 80090b6:	6838      	ldr	r0, [r7, #0]
 80090b8:	f000 fbae 	bl	8009818 <prvAddCurrentTaskToDelayedList>
}
 80090bc:	bf00      	nop
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	200057ec 	.word	0x200057ec

080090c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b086      	sub	sp, #24
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d10a      	bne.n	80090f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80090da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090de:	f383 8811 	msr	BASEPRI, r3
 80090e2:	f3bf 8f6f 	isb	sy
 80090e6:	f3bf 8f4f 	dsb	sy
 80090ea:	617b      	str	r3, [r7, #20]
}
 80090ec:	bf00      	nop
 80090ee:	e7fe      	b.n	80090ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090f0:	4b0a      	ldr	r3, [pc, #40]	; (800911c <vTaskPlaceOnEventListRestricted+0x54>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3318      	adds	r3, #24
 80090f6:	4619      	mov	r1, r3
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f7fe fadd 	bl	80076b8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d002      	beq.n	800910a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009108:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800910a:	6879      	ldr	r1, [r7, #4]
 800910c:	68b8      	ldr	r0, [r7, #8]
 800910e:	f000 fb83 	bl	8009818 <prvAddCurrentTaskToDelayedList>
	}
 8009112:	bf00      	nop
 8009114:	3718      	adds	r7, #24
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	200057ec 	.word	0x200057ec

08009120 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b086      	sub	sp, #24
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10a      	bne.n	800914c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913a:	f383 8811 	msr	BASEPRI, r3
 800913e:	f3bf 8f6f 	isb	sy
 8009142:	f3bf 8f4f 	dsb	sy
 8009146:	60fb      	str	r3, [r7, #12]
}
 8009148:	bf00      	nop
 800914a:	e7fe      	b.n	800914a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	3318      	adds	r3, #24
 8009150:	4618      	mov	r0, r3
 8009152:	f7fe fb0e 	bl	8007772 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009156:	4b1d      	ldr	r3, [pc, #116]	; (80091cc <xTaskRemoveFromEventList+0xac>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d11c      	bne.n	8009198 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	3304      	adds	r3, #4
 8009162:	4618      	mov	r0, r3
 8009164:	f7fe fb05 	bl	8007772 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916c:	2201      	movs	r2, #1
 800916e:	409a      	lsls	r2, r3
 8009170:	4b17      	ldr	r3, [pc, #92]	; (80091d0 <xTaskRemoveFromEventList+0xb0>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4313      	orrs	r3, r2
 8009176:	4a16      	ldr	r2, [pc, #88]	; (80091d0 <xTaskRemoveFromEventList+0xb0>)
 8009178:	6013      	str	r3, [r2, #0]
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800917e:	4613      	mov	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4a13      	ldr	r2, [pc, #76]	; (80091d4 <xTaskRemoveFromEventList+0xb4>)
 8009188:	441a      	add	r2, r3
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	3304      	adds	r3, #4
 800918e:	4619      	mov	r1, r3
 8009190:	4610      	mov	r0, r2
 8009192:	f7fe fa91 	bl	80076b8 <vListInsertEnd>
 8009196:	e005      	b.n	80091a4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	3318      	adds	r3, #24
 800919c:	4619      	mov	r1, r3
 800919e:	480e      	ldr	r0, [pc, #56]	; (80091d8 <xTaskRemoveFromEventList+0xb8>)
 80091a0:	f7fe fa8a 	bl	80076b8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a8:	4b0c      	ldr	r3, [pc, #48]	; (80091dc <xTaskRemoveFromEventList+0xbc>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d905      	bls.n	80091be <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80091b2:	2301      	movs	r3, #1
 80091b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80091b6:	4b0a      	ldr	r3, [pc, #40]	; (80091e0 <xTaskRemoveFromEventList+0xc0>)
 80091b8:	2201      	movs	r2, #1
 80091ba:	601a      	str	r2, [r3, #0]
 80091bc:	e001      	b.n	80091c2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80091be:	2300      	movs	r3, #0
 80091c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80091c2:	697b      	ldr	r3, [r7, #20]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3718      	adds	r7, #24
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	20005914 	.word	0x20005914
 80091d0:	200058f4 	.word	0x200058f4
 80091d4:	200057f0 	.word	0x200057f0
 80091d8:	200058ac 	.word	0x200058ac
 80091dc:	200057ec 	.word	0x200057ec
 80091e0:	20005900 	.word	0x20005900

080091e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80091ec:	4b06      	ldr	r3, [pc, #24]	; (8009208 <vTaskInternalSetTimeOutState+0x24>)
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80091f4:	4b05      	ldr	r3, [pc, #20]	; (800920c <vTaskInternalSetTimeOutState+0x28>)
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	605a      	str	r2, [r3, #4]
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr
 8009208:	20005904 	.word	0x20005904
 800920c:	200058f0 	.word	0x200058f0

08009210 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b088      	sub	sp, #32
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d10a      	bne.n	8009236 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	613b      	str	r3, [r7, #16]
}
 8009232:	bf00      	nop
 8009234:	e7fe      	b.n	8009234 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d10a      	bne.n	8009252 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800923c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009240:	f383 8811 	msr	BASEPRI, r3
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	f3bf 8f4f 	dsb	sy
 800924c:	60fb      	str	r3, [r7, #12]
}
 800924e:	bf00      	nop
 8009250:	e7fe      	b.n	8009250 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009252:	f000 ffa7 	bl	800a1a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009256:	4b1d      	ldr	r3, [pc, #116]	; (80092cc <xTaskCheckForTimeOut+0xbc>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	69ba      	ldr	r2, [r7, #24]
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800926e:	d102      	bne.n	8009276 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009270:	2300      	movs	r3, #0
 8009272:	61fb      	str	r3, [r7, #28]
 8009274:	e023      	b.n	80092be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	4b15      	ldr	r3, [pc, #84]	; (80092d0 <xTaskCheckForTimeOut+0xc0>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	429a      	cmp	r2, r3
 8009280:	d007      	beq.n	8009292 <xTaskCheckForTimeOut+0x82>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	69ba      	ldr	r2, [r7, #24]
 8009288:	429a      	cmp	r2, r3
 800928a:	d302      	bcc.n	8009292 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800928c:	2301      	movs	r3, #1
 800928e:	61fb      	str	r3, [r7, #28]
 8009290:	e015      	b.n	80092be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	697a      	ldr	r2, [r7, #20]
 8009298:	429a      	cmp	r2, r3
 800929a:	d20b      	bcs.n	80092b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	1ad2      	subs	r2, r2, r3
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7ff ff9b 	bl	80091e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80092ae:	2300      	movs	r3, #0
 80092b0:	61fb      	str	r3, [r7, #28]
 80092b2:	e004      	b.n	80092be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	2200      	movs	r2, #0
 80092b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80092ba:	2301      	movs	r3, #1
 80092bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80092be:	f000 ffa1 	bl	800a204 <vPortExitCritical>

	return xReturn;
 80092c2:	69fb      	ldr	r3, [r7, #28]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3720      	adds	r7, #32
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	200058f0 	.word	0x200058f0
 80092d0:	20005904 	.word	0x20005904

080092d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80092d4:	b480      	push	{r7}
 80092d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80092d8:	4b03      	ldr	r3, [pc, #12]	; (80092e8 <vTaskMissedYield+0x14>)
 80092da:	2201      	movs	r2, #1
 80092dc:	601a      	str	r2, [r3, #0]
}
 80092de:	bf00      	nop
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	20005900 	.word	0x20005900

080092ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80092f4:	f000 f852 	bl	800939c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80092f8:	4b06      	ldr	r3, [pc, #24]	; (8009314 <prvIdleTask+0x28>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d9f9      	bls.n	80092f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009300:	4b05      	ldr	r3, [pc, #20]	; (8009318 <prvIdleTask+0x2c>)
 8009302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009306:	601a      	str	r2, [r3, #0]
 8009308:	f3bf 8f4f 	dsb	sy
 800930c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009310:	e7f0      	b.n	80092f4 <prvIdleTask+0x8>
 8009312:	bf00      	nop
 8009314:	200057f0 	.word	0x200057f0
 8009318:	e000ed04 	.word	0xe000ed04

0800931c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009322:	2300      	movs	r3, #0
 8009324:	607b      	str	r3, [r7, #4]
 8009326:	e00c      	b.n	8009342 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	4613      	mov	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4a12      	ldr	r2, [pc, #72]	; (800937c <prvInitialiseTaskLists+0x60>)
 8009334:	4413      	add	r3, r2
 8009336:	4618      	mov	r0, r3
 8009338:	f7fe f991 	bl	800765e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	3301      	adds	r3, #1
 8009340:	607b      	str	r3, [r7, #4]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2b06      	cmp	r3, #6
 8009346:	d9ef      	bls.n	8009328 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009348:	480d      	ldr	r0, [pc, #52]	; (8009380 <prvInitialiseTaskLists+0x64>)
 800934a:	f7fe f988 	bl	800765e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800934e:	480d      	ldr	r0, [pc, #52]	; (8009384 <prvInitialiseTaskLists+0x68>)
 8009350:	f7fe f985 	bl	800765e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009354:	480c      	ldr	r0, [pc, #48]	; (8009388 <prvInitialiseTaskLists+0x6c>)
 8009356:	f7fe f982 	bl	800765e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800935a:	480c      	ldr	r0, [pc, #48]	; (800938c <prvInitialiseTaskLists+0x70>)
 800935c:	f7fe f97f 	bl	800765e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009360:	480b      	ldr	r0, [pc, #44]	; (8009390 <prvInitialiseTaskLists+0x74>)
 8009362:	f7fe f97c 	bl	800765e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009366:	4b0b      	ldr	r3, [pc, #44]	; (8009394 <prvInitialiseTaskLists+0x78>)
 8009368:	4a05      	ldr	r2, [pc, #20]	; (8009380 <prvInitialiseTaskLists+0x64>)
 800936a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800936c:	4b0a      	ldr	r3, [pc, #40]	; (8009398 <prvInitialiseTaskLists+0x7c>)
 800936e:	4a05      	ldr	r2, [pc, #20]	; (8009384 <prvInitialiseTaskLists+0x68>)
 8009370:	601a      	str	r2, [r3, #0]
}
 8009372:	bf00      	nop
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	200057f0 	.word	0x200057f0
 8009380:	2000587c 	.word	0x2000587c
 8009384:	20005890 	.word	0x20005890
 8009388:	200058ac 	.word	0x200058ac
 800938c:	200058c0 	.word	0x200058c0
 8009390:	200058d8 	.word	0x200058d8
 8009394:	200058a4 	.word	0x200058a4
 8009398:	200058a8 	.word	0x200058a8

0800939c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093a2:	e019      	b.n	80093d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80093a4:	f000 fefe 	bl	800a1a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093a8:	4b10      	ldr	r3, [pc, #64]	; (80093ec <prvCheckTasksWaitingTermination+0x50>)
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	3304      	adds	r3, #4
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7fe f9dc 	bl	8007772 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80093ba:	4b0d      	ldr	r3, [pc, #52]	; (80093f0 <prvCheckTasksWaitingTermination+0x54>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	3b01      	subs	r3, #1
 80093c0:	4a0b      	ldr	r2, [pc, #44]	; (80093f0 <prvCheckTasksWaitingTermination+0x54>)
 80093c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80093c4:	4b0b      	ldr	r3, [pc, #44]	; (80093f4 <prvCheckTasksWaitingTermination+0x58>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3b01      	subs	r3, #1
 80093ca:	4a0a      	ldr	r2, [pc, #40]	; (80093f4 <prvCheckTasksWaitingTermination+0x58>)
 80093cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80093ce:	f000 ff19 	bl	800a204 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f810 	bl	80093f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093d8:	4b06      	ldr	r3, [pc, #24]	; (80093f4 <prvCheckTasksWaitingTermination+0x58>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1e1      	bne.n	80093a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80093e0:	bf00      	nop
 80093e2:	bf00      	nop
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	200058c0 	.word	0x200058c0
 80093f0:	200058ec 	.word	0x200058ec
 80093f4:	200058d4 	.word	0x200058d4

080093f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	334c      	adds	r3, #76	; 0x4c
 8009404:	4618      	mov	r0, r3
 8009406:	f018 fbe3 	bl	8021bd0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009410:	2b00      	cmp	r3, #0
 8009412:	d108      	bne.n	8009426 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009418:	4618      	mov	r0, r3
 800941a:	f001 f8b1 	bl	800a580 <vPortFree>
				vPortFree( pxTCB );
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f001 f8ae 	bl	800a580 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009424:	e018      	b.n	8009458 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800942c:	2b01      	cmp	r3, #1
 800942e:	d103      	bne.n	8009438 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f001 f8a5 	bl	800a580 <vPortFree>
	}
 8009436:	e00f      	b.n	8009458 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800943e:	2b02      	cmp	r3, #2
 8009440:	d00a      	beq.n	8009458 <prvDeleteTCB+0x60>
	__asm volatile
 8009442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009446:	f383 8811 	msr	BASEPRI, r3
 800944a:	f3bf 8f6f 	isb	sy
 800944e:	f3bf 8f4f 	dsb	sy
 8009452:	60fb      	str	r3, [r7, #12]
}
 8009454:	bf00      	nop
 8009456:	e7fe      	b.n	8009456 <prvDeleteTCB+0x5e>
	}
 8009458:	bf00      	nop
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009466:	4b0c      	ldr	r3, [pc, #48]	; (8009498 <prvResetNextTaskUnblockTime+0x38>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d104      	bne.n	800947a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009470:	4b0a      	ldr	r3, [pc, #40]	; (800949c <prvResetNextTaskUnblockTime+0x3c>)
 8009472:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009476:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009478:	e008      	b.n	800948c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800947a:	4b07      	ldr	r3, [pc, #28]	; (8009498 <prvResetNextTaskUnblockTime+0x38>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	4a04      	ldr	r2, [pc, #16]	; (800949c <prvResetNextTaskUnblockTime+0x3c>)
 800948a:	6013      	str	r3, [r2, #0]
}
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	200058a4 	.word	0x200058a4
 800949c:	2000590c 	.word	0x2000590c

080094a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80094a6:	4b0b      	ldr	r3, [pc, #44]	; (80094d4 <xTaskGetSchedulerState+0x34>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d102      	bne.n	80094b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80094ae:	2301      	movs	r3, #1
 80094b0:	607b      	str	r3, [r7, #4]
 80094b2:	e008      	b.n	80094c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094b4:	4b08      	ldr	r3, [pc, #32]	; (80094d8 <xTaskGetSchedulerState+0x38>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d102      	bne.n	80094c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80094bc:	2302      	movs	r3, #2
 80094be:	607b      	str	r3, [r7, #4]
 80094c0:	e001      	b.n	80094c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80094c2:	2300      	movs	r3, #0
 80094c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80094c6:	687b      	ldr	r3, [r7, #4]
	}
 80094c8:	4618      	mov	r0, r3
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr
 80094d4:	200058f8 	.word	0x200058f8
 80094d8:	20005914 	.word	0x20005914

080094dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80094e8:	2300      	movs	r3, #0
 80094ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d05e      	beq.n	80095b0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f6:	4b31      	ldr	r3, [pc, #196]	; (80095bc <xTaskPriorityInherit+0xe0>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d24e      	bcs.n	800959e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	2b00      	cmp	r3, #0
 8009506:	db06      	blt.n	8009516 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009508:	4b2c      	ldr	r3, [pc, #176]	; (80095bc <xTaskPriorityInherit+0xe0>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950e:	f1c3 0207 	rsb	r2, r3, #7
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	6959      	ldr	r1, [r3, #20]
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800951e:	4613      	mov	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	4a26      	ldr	r2, [pc, #152]	; (80095c0 <xTaskPriorityInherit+0xe4>)
 8009528:	4413      	add	r3, r2
 800952a:	4299      	cmp	r1, r3
 800952c:	d12f      	bne.n	800958e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	3304      	adds	r3, #4
 8009532:	4618      	mov	r0, r3
 8009534:	f7fe f91d 	bl	8007772 <uxListRemove>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10a      	bne.n	8009554 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009542:	2201      	movs	r2, #1
 8009544:	fa02 f303 	lsl.w	r3, r2, r3
 8009548:	43da      	mvns	r2, r3
 800954a:	4b1e      	ldr	r3, [pc, #120]	; (80095c4 <xTaskPriorityInherit+0xe8>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4013      	ands	r3, r2
 8009550:	4a1c      	ldr	r2, [pc, #112]	; (80095c4 <xTaskPriorityInherit+0xe8>)
 8009552:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009554:	4b19      	ldr	r3, [pc, #100]	; (80095bc <xTaskPriorityInherit+0xe0>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009562:	2201      	movs	r2, #1
 8009564:	409a      	lsls	r2, r3
 8009566:	4b17      	ldr	r3, [pc, #92]	; (80095c4 <xTaskPriorityInherit+0xe8>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4313      	orrs	r3, r2
 800956c:	4a15      	ldr	r2, [pc, #84]	; (80095c4 <xTaskPriorityInherit+0xe8>)
 800956e:	6013      	str	r3, [r2, #0]
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009574:	4613      	mov	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4a10      	ldr	r2, [pc, #64]	; (80095c0 <xTaskPriorityInherit+0xe4>)
 800957e:	441a      	add	r2, r3
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	3304      	adds	r3, #4
 8009584:	4619      	mov	r1, r3
 8009586:	4610      	mov	r0, r2
 8009588:	f7fe f896 	bl	80076b8 <vListInsertEnd>
 800958c:	e004      	b.n	8009598 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800958e:	4b0b      	ldr	r3, [pc, #44]	; (80095bc <xTaskPriorityInherit+0xe0>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009598:	2301      	movs	r3, #1
 800959a:	60fb      	str	r3, [r7, #12]
 800959c:	e008      	b.n	80095b0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095a2:	4b06      	ldr	r3, [pc, #24]	; (80095bc <xTaskPriorityInherit+0xe0>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d201      	bcs.n	80095b0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80095ac:	2301      	movs	r3, #1
 80095ae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80095b0:	68fb      	ldr	r3, [r7, #12]
	}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	200057ec 	.word	0x200057ec
 80095c0:	200057f0 	.word	0x200057f0
 80095c4:	200058f4 	.word	0x200058f4

080095c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b086      	sub	sp, #24
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80095d4:	2300      	movs	r3, #0
 80095d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d06e      	beq.n	80096bc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80095de:	4b3a      	ldr	r3, [pc, #232]	; (80096c8 <xTaskPriorityDisinherit+0x100>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	693a      	ldr	r2, [r7, #16]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d00a      	beq.n	80095fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80095e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	60fb      	str	r3, [r7, #12]
}
 80095fa:	bf00      	nop
 80095fc:	e7fe      	b.n	80095fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009602:	2b00      	cmp	r3, #0
 8009604:	d10a      	bne.n	800961c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960a:	f383 8811 	msr	BASEPRI, r3
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f3bf 8f4f 	dsb	sy
 8009616:	60bb      	str	r3, [r7, #8]
}
 8009618:	bf00      	nop
 800961a:	e7fe      	b.n	800961a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009620:	1e5a      	subs	r2, r3, #1
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800962e:	429a      	cmp	r2, r3
 8009630:	d044      	beq.n	80096bc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009636:	2b00      	cmp	r3, #0
 8009638:	d140      	bne.n	80096bc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	3304      	adds	r3, #4
 800963e:	4618      	mov	r0, r3
 8009640:	f7fe f897 	bl	8007772 <uxListRemove>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	d115      	bne.n	8009676 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800964e:	491f      	ldr	r1, [pc, #124]	; (80096cc <xTaskPriorityDisinherit+0x104>)
 8009650:	4613      	mov	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	4413      	add	r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	440b      	add	r3, r1
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d10a      	bne.n	8009676 <xTaskPriorityDisinherit+0xae>
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009664:	2201      	movs	r2, #1
 8009666:	fa02 f303 	lsl.w	r3, r2, r3
 800966a:	43da      	mvns	r2, r3
 800966c:	4b18      	ldr	r3, [pc, #96]	; (80096d0 <xTaskPriorityDisinherit+0x108>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4013      	ands	r3, r2
 8009672:	4a17      	ldr	r2, [pc, #92]	; (80096d0 <xTaskPriorityDisinherit+0x108>)
 8009674:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009682:	f1c3 0207 	rsb	r2, r3, #7
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968e:	2201      	movs	r2, #1
 8009690:	409a      	lsls	r2, r3
 8009692:	4b0f      	ldr	r3, [pc, #60]	; (80096d0 <xTaskPriorityDisinherit+0x108>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4313      	orrs	r3, r2
 8009698:	4a0d      	ldr	r2, [pc, #52]	; (80096d0 <xTaskPriorityDisinherit+0x108>)
 800969a:	6013      	str	r3, [r2, #0]
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a0:	4613      	mov	r3, r2
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	4413      	add	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4a08      	ldr	r2, [pc, #32]	; (80096cc <xTaskPriorityDisinherit+0x104>)
 80096aa:	441a      	add	r2, r3
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	3304      	adds	r3, #4
 80096b0:	4619      	mov	r1, r3
 80096b2:	4610      	mov	r0, r2
 80096b4:	f7fe f800 	bl	80076b8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80096b8:	2301      	movs	r3, #1
 80096ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80096bc:	697b      	ldr	r3, [r7, #20]
	}
 80096be:	4618      	mov	r0, r3
 80096c0:	3718      	adds	r7, #24
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	200057ec 	.word	0x200057ec
 80096cc:	200057f0 	.word	0x200057f0
 80096d0:	200058f4 	.word	0x200058f4

080096d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b088      	sub	sp, #32
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80096e2:	2301      	movs	r3, #1
 80096e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d077      	beq.n	80097dc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d10a      	bne.n	800970a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80096f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f8:	f383 8811 	msr	BASEPRI, r3
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	60fb      	str	r3, [r7, #12]
}
 8009706:	bf00      	nop
 8009708:	e7fe      	b.n	8009708 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800970e:	683a      	ldr	r2, [r7, #0]
 8009710:	429a      	cmp	r2, r3
 8009712:	d902      	bls.n	800971a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	61fb      	str	r3, [r7, #28]
 8009718:	e002      	b.n	8009720 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800971e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009724:	69fa      	ldr	r2, [r7, #28]
 8009726:	429a      	cmp	r2, r3
 8009728:	d058      	beq.n	80097dc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800972e:	697a      	ldr	r2, [r7, #20]
 8009730:	429a      	cmp	r2, r3
 8009732:	d153      	bne.n	80097dc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009734:	4b2b      	ldr	r3, [pc, #172]	; (80097e4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	69ba      	ldr	r2, [r7, #24]
 800973a:	429a      	cmp	r2, r3
 800973c:	d10a      	bne.n	8009754 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	60bb      	str	r3, [r7, #8]
}
 8009750:	bf00      	nop
 8009752:	e7fe      	b.n	8009752 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009758:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	69fa      	ldr	r2, [r7, #28]
 800975e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	699b      	ldr	r3, [r3, #24]
 8009764:	2b00      	cmp	r3, #0
 8009766:	db04      	blt.n	8009772 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	f1c3 0207 	rsb	r2, r3, #7
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	6959      	ldr	r1, [r3, #20]
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	4613      	mov	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	4a19      	ldr	r2, [pc, #100]	; (80097e8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009782:	4413      	add	r3, r2
 8009784:	4299      	cmp	r1, r3
 8009786:	d129      	bne.n	80097dc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	3304      	adds	r3, #4
 800978c:	4618      	mov	r0, r3
 800978e:	f7fd fff0 	bl	8007772 <uxListRemove>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10a      	bne.n	80097ae <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979c:	2201      	movs	r2, #1
 800979e:	fa02 f303 	lsl.w	r3, r2, r3
 80097a2:	43da      	mvns	r2, r3
 80097a4:	4b11      	ldr	r3, [pc, #68]	; (80097ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4013      	ands	r3, r2
 80097aa:	4a10      	ldr	r2, [pc, #64]	; (80097ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80097ac:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b2:	2201      	movs	r2, #1
 80097b4:	409a      	lsls	r2, r3
 80097b6:	4b0d      	ldr	r3, [pc, #52]	; (80097ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	4a0b      	ldr	r2, [pc, #44]	; (80097ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80097be:	6013      	str	r3, [r2, #0]
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c4:	4613      	mov	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4413      	add	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4a06      	ldr	r2, [pc, #24]	; (80097e8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80097ce:	441a      	add	r2, r3
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	3304      	adds	r3, #4
 80097d4:	4619      	mov	r1, r3
 80097d6:	4610      	mov	r0, r2
 80097d8:	f7fd ff6e 	bl	80076b8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80097dc:	bf00      	nop
 80097de:	3720      	adds	r7, #32
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	200057ec 	.word	0x200057ec
 80097e8:	200057f0 	.word	0x200057f0
 80097ec:	200058f4 	.word	0x200058f4

080097f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80097f0:	b480      	push	{r7}
 80097f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80097f4:	4b07      	ldr	r3, [pc, #28]	; (8009814 <pvTaskIncrementMutexHeldCount+0x24>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d004      	beq.n	8009806 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80097fc:	4b05      	ldr	r3, [pc, #20]	; (8009814 <pvTaskIncrementMutexHeldCount+0x24>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009802:	3201      	adds	r2, #1
 8009804:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009806:	4b03      	ldr	r3, [pc, #12]	; (8009814 <pvTaskIncrementMutexHeldCount+0x24>)
 8009808:	681b      	ldr	r3, [r3, #0]
	}
 800980a:	4618      	mov	r0, r3
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr
 8009814:	200057ec 	.word	0x200057ec

08009818 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009822:	4b29      	ldr	r3, [pc, #164]	; (80098c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009828:	4b28      	ldr	r3, [pc, #160]	; (80098cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	3304      	adds	r3, #4
 800982e:	4618      	mov	r0, r3
 8009830:	f7fd ff9f 	bl	8007772 <uxListRemove>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d10b      	bne.n	8009852 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800983a:	4b24      	ldr	r3, [pc, #144]	; (80098cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009840:	2201      	movs	r2, #1
 8009842:	fa02 f303 	lsl.w	r3, r2, r3
 8009846:	43da      	mvns	r2, r3
 8009848:	4b21      	ldr	r3, [pc, #132]	; (80098d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4013      	ands	r3, r2
 800984e:	4a20      	ldr	r2, [pc, #128]	; (80098d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009850:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009858:	d10a      	bne.n	8009870 <prvAddCurrentTaskToDelayedList+0x58>
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d007      	beq.n	8009870 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009860:	4b1a      	ldr	r3, [pc, #104]	; (80098cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	3304      	adds	r3, #4
 8009866:	4619      	mov	r1, r3
 8009868:	481a      	ldr	r0, [pc, #104]	; (80098d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800986a:	f7fd ff25 	bl	80076b8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800986e:	e026      	b.n	80098be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4413      	add	r3, r2
 8009876:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009878:	4b14      	ldr	r3, [pc, #80]	; (80098cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68ba      	ldr	r2, [r7, #8]
 800987e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009880:	68ba      	ldr	r2, [r7, #8]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	429a      	cmp	r2, r3
 8009886:	d209      	bcs.n	800989c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009888:	4b13      	ldr	r3, [pc, #76]	; (80098d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	4b0f      	ldr	r3, [pc, #60]	; (80098cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	3304      	adds	r3, #4
 8009892:	4619      	mov	r1, r3
 8009894:	4610      	mov	r0, r2
 8009896:	f7fd ff33 	bl	8007700 <vListInsert>
}
 800989a:	e010      	b.n	80098be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800989c:	4b0f      	ldr	r3, [pc, #60]	; (80098dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	4b0a      	ldr	r3, [pc, #40]	; (80098cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	3304      	adds	r3, #4
 80098a6:	4619      	mov	r1, r3
 80098a8:	4610      	mov	r0, r2
 80098aa:	f7fd ff29 	bl	8007700 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80098ae:	4b0c      	ldr	r3, [pc, #48]	; (80098e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d202      	bcs.n	80098be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80098b8:	4a09      	ldr	r2, [pc, #36]	; (80098e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	6013      	str	r3, [r2, #0]
}
 80098be:	bf00      	nop
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	200058f0 	.word	0x200058f0
 80098cc:	200057ec 	.word	0x200057ec
 80098d0:	200058f4 	.word	0x200058f4
 80098d4:	200058d8 	.word	0x200058d8
 80098d8:	200058a8 	.word	0x200058a8
 80098dc:	200058a4 	.word	0x200058a4
 80098e0:	2000590c 	.word	0x2000590c

080098e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b08a      	sub	sp, #40	; 0x28
 80098e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80098ea:	2300      	movs	r3, #0
 80098ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80098ee:	f000 faeb 	bl	8009ec8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80098f2:	4b1c      	ldr	r3, [pc, #112]	; (8009964 <xTimerCreateTimerTask+0x80>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d021      	beq.n	800993e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80098fa:	2300      	movs	r3, #0
 80098fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80098fe:	2300      	movs	r3, #0
 8009900:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009902:	1d3a      	adds	r2, r7, #4
 8009904:	f107 0108 	add.w	r1, r7, #8
 8009908:	f107 030c 	add.w	r3, r7, #12
 800990c:	4618      	mov	r0, r3
 800990e:	f7f7 fa2b 	bl	8000d68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009912:	6879      	ldr	r1, [r7, #4]
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	9202      	str	r2, [sp, #8]
 800991a:	9301      	str	r3, [sp, #4]
 800991c:	2302      	movs	r3, #2
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	2300      	movs	r3, #0
 8009922:	460a      	mov	r2, r1
 8009924:	4910      	ldr	r1, [pc, #64]	; (8009968 <xTimerCreateTimerTask+0x84>)
 8009926:	4811      	ldr	r0, [pc, #68]	; (800996c <xTimerCreateTimerTask+0x88>)
 8009928:	f7fe ff76 	bl	8008818 <xTaskCreateStatic>
 800992c:	4603      	mov	r3, r0
 800992e:	4a10      	ldr	r2, [pc, #64]	; (8009970 <xTimerCreateTimerTask+0x8c>)
 8009930:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009932:	4b0f      	ldr	r3, [pc, #60]	; (8009970 <xTimerCreateTimerTask+0x8c>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d001      	beq.n	800993e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800993a:	2301      	movs	r3, #1
 800993c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d10a      	bne.n	800995a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	613b      	str	r3, [r7, #16]
}
 8009956:	bf00      	nop
 8009958:	e7fe      	b.n	8009958 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800995a:	697b      	ldr	r3, [r7, #20]
}
 800995c:	4618      	mov	r0, r3
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	20005948 	.word	0x20005948
 8009968:	080232b8 	.word	0x080232b8
 800996c:	08009aa9 	.word	0x08009aa9
 8009970:	2000594c 	.word	0x2000594c

08009974 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b08a      	sub	sp, #40	; 0x28
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
 8009980:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009982:	2300      	movs	r3, #0
 8009984:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10a      	bne.n	80099a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800998c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009990:	f383 8811 	msr	BASEPRI, r3
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	623b      	str	r3, [r7, #32]
}
 800999e:	bf00      	nop
 80099a0:	e7fe      	b.n	80099a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80099a2:	4b1a      	ldr	r3, [pc, #104]	; (8009a0c <xTimerGenericCommand+0x98>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d02a      	beq.n	8009a00 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	2b05      	cmp	r3, #5
 80099ba:	dc18      	bgt.n	80099ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80099bc:	f7ff fd70 	bl	80094a0 <xTaskGetSchedulerState>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	d109      	bne.n	80099da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80099c6:	4b11      	ldr	r3, [pc, #68]	; (8009a0c <xTimerGenericCommand+0x98>)
 80099c8:	6818      	ldr	r0, [r3, #0]
 80099ca:	f107 0114 	add.w	r1, r7, #20
 80099ce:	2300      	movs	r3, #0
 80099d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099d2:	f7fe f87f 	bl	8007ad4 <xQueueGenericSend>
 80099d6:	6278      	str	r0, [r7, #36]	; 0x24
 80099d8:	e012      	b.n	8009a00 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80099da:	4b0c      	ldr	r3, [pc, #48]	; (8009a0c <xTimerGenericCommand+0x98>)
 80099dc:	6818      	ldr	r0, [r3, #0]
 80099de:	f107 0114 	add.w	r1, r7, #20
 80099e2:	2300      	movs	r3, #0
 80099e4:	2200      	movs	r2, #0
 80099e6:	f7fe f875 	bl	8007ad4 <xQueueGenericSend>
 80099ea:	6278      	str	r0, [r7, #36]	; 0x24
 80099ec:	e008      	b.n	8009a00 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80099ee:	4b07      	ldr	r3, [pc, #28]	; (8009a0c <xTimerGenericCommand+0x98>)
 80099f0:	6818      	ldr	r0, [r3, #0]
 80099f2:	f107 0114 	add.w	r1, r7, #20
 80099f6:	2300      	movs	r3, #0
 80099f8:	683a      	ldr	r2, [r7, #0]
 80099fa:	f7fe f969 	bl	8007cd0 <xQueueGenericSendFromISR>
 80099fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3728      	adds	r7, #40	; 0x28
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	20005948 	.word	0x20005948

08009a10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b088      	sub	sp, #32
 8009a14:	af02      	add	r7, sp, #8
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a1a:	4b22      	ldr	r3, [pc, #136]	; (8009aa4 <prvProcessExpiredTimer+0x94>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	3304      	adds	r3, #4
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7fd fea2 	bl	8007772 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a34:	f003 0304 	and.w	r3, r3, #4
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d022      	beq.n	8009a82 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	699a      	ldr	r2, [r3, #24]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	18d1      	adds	r1, r2, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	683a      	ldr	r2, [r7, #0]
 8009a48:	6978      	ldr	r0, [r7, #20]
 8009a4a:	f000 f8d1 	bl	8009bf0 <prvInsertTimerInActiveList>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d01f      	beq.n	8009a94 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a54:	2300      	movs	r3, #0
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	2300      	movs	r3, #0
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	6978      	ldr	r0, [r7, #20]
 8009a60:	f7ff ff88 	bl	8009974 <xTimerGenericCommand>
 8009a64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d113      	bne.n	8009a94 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a70:	f383 8811 	msr	BASEPRI, r3
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	60fb      	str	r3, [r7, #12]
}
 8009a7e:	bf00      	nop
 8009a80:	e7fe      	b.n	8009a80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a88:	f023 0301 	bic.w	r3, r3, #1
 8009a8c:	b2da      	uxtb	r2, r3
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	6a1b      	ldr	r3, [r3, #32]
 8009a98:	6978      	ldr	r0, [r7, #20]
 8009a9a:	4798      	blx	r3
}
 8009a9c:	bf00      	nop
 8009a9e:	3718      	adds	r7, #24
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	20005940 	.word	0x20005940

08009aa8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ab0:	f107 0308 	add.w	r3, r7, #8
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f000 f857 	bl	8009b68 <prvGetNextExpireTime>
 8009aba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	4619      	mov	r1, r3
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f000 f803 	bl	8009acc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009ac6:	f000 f8d5 	bl	8009c74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009aca:	e7f1      	b.n	8009ab0 <prvTimerTask+0x8>

08009acc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009ad6:	f7ff f8ed 	bl	8008cb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ada:	f107 0308 	add.w	r3, r7, #8
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 f866 	bl	8009bb0 <prvSampleTimeNow>
 8009ae4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d130      	bne.n	8009b4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10a      	bne.n	8009b08 <prvProcessTimerOrBlockTask+0x3c>
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d806      	bhi.n	8009b08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009afa:	f7ff f8e9 	bl	8008cd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009afe:	68f9      	ldr	r1, [r7, #12]
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f7ff ff85 	bl	8009a10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009b06:	e024      	b.n	8009b52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d008      	beq.n	8009b20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b0e:	4b13      	ldr	r3, [pc, #76]	; (8009b5c <prvProcessTimerOrBlockTask+0x90>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d101      	bne.n	8009b1c <prvProcessTimerOrBlockTask+0x50>
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e000      	b.n	8009b1e <prvProcessTimerOrBlockTask+0x52>
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009b20:	4b0f      	ldr	r3, [pc, #60]	; (8009b60 <prvProcessTimerOrBlockTask+0x94>)
 8009b22:	6818      	ldr	r0, [r3, #0]
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	1ad3      	subs	r3, r2, r3
 8009b2a:	683a      	ldr	r2, [r7, #0]
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	f7fe fe3f 	bl	80087b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009b32:	f7ff f8cd 	bl	8008cd0 <xTaskResumeAll>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d10a      	bne.n	8009b52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009b3c:	4b09      	ldr	r3, [pc, #36]	; (8009b64 <prvProcessTimerOrBlockTask+0x98>)
 8009b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b42:	601a      	str	r2, [r3, #0]
 8009b44:	f3bf 8f4f 	dsb	sy
 8009b48:	f3bf 8f6f 	isb	sy
}
 8009b4c:	e001      	b.n	8009b52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009b4e:	f7ff f8bf 	bl	8008cd0 <xTaskResumeAll>
}
 8009b52:	bf00      	nop
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	20005944 	.word	0x20005944
 8009b60:	20005948 	.word	0x20005948
 8009b64:	e000ed04 	.word	0xe000ed04

08009b68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009b70:	4b0e      	ldr	r3, [pc, #56]	; (8009bac <prvGetNextExpireTime+0x44>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d101      	bne.n	8009b7e <prvGetNextExpireTime+0x16>
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	e000      	b.n	8009b80 <prvGetNextExpireTime+0x18>
 8009b7e:	2200      	movs	r2, #0
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d105      	bne.n	8009b98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b8c:	4b07      	ldr	r3, [pc, #28]	; (8009bac <prvGetNextExpireTime+0x44>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	60fb      	str	r3, [r7, #12]
 8009b96:	e001      	b.n	8009b9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3714      	adds	r7, #20
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	20005940 	.word	0x20005940

08009bb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009bb8:	f7ff f926 	bl	8008e08 <xTaskGetTickCount>
 8009bbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009bbe:	4b0b      	ldr	r3, [pc, #44]	; (8009bec <prvSampleTimeNow+0x3c>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d205      	bcs.n	8009bd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009bc8:	f000 f91a 	bl	8009e00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	601a      	str	r2, [r3, #0]
 8009bd2:	e002      	b.n	8009bda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009bda:	4a04      	ldr	r2, [pc, #16]	; (8009bec <prvSampleTimeNow+0x3c>)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009be0:	68fb      	ldr	r3, [r7, #12]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3710      	adds	r7, #16
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	20005950 	.word	0x20005950

08009bf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
 8009bfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	68ba      	ldr	r2, [r7, #8]
 8009c06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009c0e:	68ba      	ldr	r2, [r7, #8]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d812      	bhi.n	8009c3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	1ad2      	subs	r2, r2, r3
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d302      	bcc.n	8009c2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009c24:	2301      	movs	r3, #1
 8009c26:	617b      	str	r3, [r7, #20]
 8009c28:	e01b      	b.n	8009c62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009c2a:	4b10      	ldr	r3, [pc, #64]	; (8009c6c <prvInsertTimerInActiveList+0x7c>)
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	3304      	adds	r3, #4
 8009c32:	4619      	mov	r1, r3
 8009c34:	4610      	mov	r0, r2
 8009c36:	f7fd fd63 	bl	8007700 <vListInsert>
 8009c3a:	e012      	b.n	8009c62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d206      	bcs.n	8009c52 <prvInsertTimerInActiveList+0x62>
 8009c44:	68ba      	ldr	r2, [r7, #8]
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d302      	bcc.n	8009c52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	617b      	str	r3, [r7, #20]
 8009c50:	e007      	b.n	8009c62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c52:	4b07      	ldr	r3, [pc, #28]	; (8009c70 <prvInsertTimerInActiveList+0x80>)
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	3304      	adds	r3, #4
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	4610      	mov	r0, r2
 8009c5e:	f7fd fd4f 	bl	8007700 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009c62:	697b      	ldr	r3, [r7, #20]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3718      	adds	r7, #24
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	20005944 	.word	0x20005944
 8009c70:	20005940 	.word	0x20005940

08009c74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b08c      	sub	sp, #48	; 0x30
 8009c78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c7a:	e0ae      	b.n	8009dda <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f2c0 80ab 	blt.w	8009dda <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8a:	695b      	ldr	r3, [r3, #20]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d004      	beq.n	8009c9a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c92:	3304      	adds	r3, #4
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7fd fd6c 	bl	8007772 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c9a:	1d3b      	adds	r3, r7, #4
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7ff ff87 	bl	8009bb0 <prvSampleTimeNow>
 8009ca2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	2b09      	cmp	r3, #9
 8009ca8:	f200 8096 	bhi.w	8009dd8 <prvProcessReceivedCommands+0x164>
 8009cac:	a201      	add	r2, pc, #4	; (adr r2, 8009cb4 <prvProcessReceivedCommands+0x40>)
 8009cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb2:	bf00      	nop
 8009cb4:	08009cdd 	.word	0x08009cdd
 8009cb8:	08009cdd 	.word	0x08009cdd
 8009cbc:	08009cdd 	.word	0x08009cdd
 8009cc0:	08009d51 	.word	0x08009d51
 8009cc4:	08009d65 	.word	0x08009d65
 8009cc8:	08009daf 	.word	0x08009daf
 8009ccc:	08009cdd 	.word	0x08009cdd
 8009cd0:	08009cdd 	.word	0x08009cdd
 8009cd4:	08009d51 	.word	0x08009d51
 8009cd8:	08009d65 	.word	0x08009d65
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009ce2:	f043 0301 	orr.w	r3, r3, #1
 8009ce6:	b2da      	uxtb	r2, r3
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	699b      	ldr	r3, [r3, #24]
 8009cf4:	18d1      	adds	r1, r2, r3
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6a3a      	ldr	r2, [r7, #32]
 8009cfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009cfc:	f7ff ff78 	bl	8009bf0 <prvInsertTimerInActiveList>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d069      	beq.n	8009dda <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d08:	6a1b      	ldr	r3, [r3, #32]
 8009d0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d0c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d14:	f003 0304 	and.w	r3, r3, #4
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d05e      	beq.n	8009dda <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	441a      	add	r2, r3
 8009d24:	2300      	movs	r3, #0
 8009d26:	9300      	str	r3, [sp, #0]
 8009d28:	2300      	movs	r3, #0
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d2e:	f7ff fe21 	bl	8009974 <xTimerGenericCommand>
 8009d32:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d14f      	bne.n	8009dda <prvProcessReceivedCommands+0x166>
	__asm volatile
 8009d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3e:	f383 8811 	msr	BASEPRI, r3
 8009d42:	f3bf 8f6f 	isb	sy
 8009d46:	f3bf 8f4f 	dsb	sy
 8009d4a:	61bb      	str	r3, [r7, #24]
}
 8009d4c:	bf00      	nop
 8009d4e:	e7fe      	b.n	8009d4e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d56:	f023 0301 	bic.w	r3, r3, #1
 8009d5a:	b2da      	uxtb	r2, r3
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8009d62:	e03a      	b.n	8009dda <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d6a:	f043 0301 	orr.w	r3, r3, #1
 8009d6e:	b2da      	uxtb	r2, r3
 8009d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7e:	699b      	ldr	r3, [r3, #24]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10a      	bne.n	8009d9a <prvProcessReceivedCommands+0x126>
	__asm volatile
 8009d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	617b      	str	r3, [r7, #20]
}
 8009d96:	bf00      	nop
 8009d98:	e7fe      	b.n	8009d98 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9c:	699a      	ldr	r2, [r3, #24]
 8009d9e:	6a3b      	ldr	r3, [r7, #32]
 8009da0:	18d1      	adds	r1, r2, r3
 8009da2:	6a3b      	ldr	r3, [r7, #32]
 8009da4:	6a3a      	ldr	r2, [r7, #32]
 8009da6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009da8:	f7ff ff22 	bl	8009bf0 <prvInsertTimerInActiveList>
					break;
 8009dac:	e015      	b.n	8009dda <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009db4:	f003 0302 	and.w	r3, r3, #2
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d103      	bne.n	8009dc4 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8009dbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009dbe:	f000 fbdf 	bl	800a580 <vPortFree>
 8009dc2:	e00a      	b.n	8009dda <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009dca:	f023 0301 	bic.w	r3, r3, #1
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009dd6:	e000      	b.n	8009dda <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 8009dd8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009dda:	4b08      	ldr	r3, [pc, #32]	; (8009dfc <prvProcessReceivedCommands+0x188>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f107 0108 	add.w	r1, r7, #8
 8009de2:	2200      	movs	r2, #0
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fe f89b 	bl	8007f20 <xQueueReceive>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f47f af45 	bne.w	8009c7c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009df2:	bf00      	nop
 8009df4:	bf00      	nop
 8009df6:	3728      	adds	r7, #40	; 0x28
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	20005948 	.word	0x20005948

08009e00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b088      	sub	sp, #32
 8009e04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e06:	e048      	b.n	8009e9a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e08:	4b2d      	ldr	r3, [pc, #180]	; (8009ec0 <prvSwitchTimerLists+0xc0>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e12:	4b2b      	ldr	r3, [pc, #172]	; (8009ec0 <prvSwitchTimerLists+0xc0>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	3304      	adds	r3, #4
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7fd fca6 	bl	8007772 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	6a1b      	ldr	r3, [r3, #32]
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e34:	f003 0304 	and.w	r3, r3, #4
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d02e      	beq.n	8009e9a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	699b      	ldr	r3, [r3, #24]
 8009e40:	693a      	ldr	r2, [r7, #16]
 8009e42:	4413      	add	r3, r2
 8009e44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d90e      	bls.n	8009e6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	68ba      	ldr	r2, [r7, #8]
 8009e52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	68fa      	ldr	r2, [r7, #12]
 8009e58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e5a:	4b19      	ldr	r3, [pc, #100]	; (8009ec0 <prvSwitchTimerLists+0xc0>)
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	3304      	adds	r3, #4
 8009e62:	4619      	mov	r1, r3
 8009e64:	4610      	mov	r0, r2
 8009e66:	f7fd fc4b 	bl	8007700 <vListInsert>
 8009e6a:	e016      	b.n	8009e9a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	9300      	str	r3, [sp, #0]
 8009e70:	2300      	movs	r3, #0
 8009e72:	693a      	ldr	r2, [r7, #16]
 8009e74:	2100      	movs	r1, #0
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f7ff fd7c 	bl	8009974 <xTimerGenericCommand>
 8009e7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d10a      	bne.n	8009e9a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	603b      	str	r3, [r7, #0]
}
 8009e96:	bf00      	nop
 8009e98:	e7fe      	b.n	8009e98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e9a:	4b09      	ldr	r3, [pc, #36]	; (8009ec0 <prvSwitchTimerLists+0xc0>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1b1      	bne.n	8009e08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ea4:	4b06      	ldr	r3, [pc, #24]	; (8009ec0 <prvSwitchTimerLists+0xc0>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009eaa:	4b06      	ldr	r3, [pc, #24]	; (8009ec4 <prvSwitchTimerLists+0xc4>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a04      	ldr	r2, [pc, #16]	; (8009ec0 <prvSwitchTimerLists+0xc0>)
 8009eb0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009eb2:	4a04      	ldr	r2, [pc, #16]	; (8009ec4 <prvSwitchTimerLists+0xc4>)
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	6013      	str	r3, [r2, #0]
}
 8009eb8:	bf00      	nop
 8009eba:	3718      	adds	r7, #24
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	20005940 	.word	0x20005940
 8009ec4:	20005944 	.word	0x20005944

08009ec8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009ece:	f000 f969 	bl	800a1a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009ed2:	4b15      	ldr	r3, [pc, #84]	; (8009f28 <prvCheckForValidListAndQueue+0x60>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d120      	bne.n	8009f1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009eda:	4814      	ldr	r0, [pc, #80]	; (8009f2c <prvCheckForValidListAndQueue+0x64>)
 8009edc:	f7fd fbbf 	bl	800765e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ee0:	4813      	ldr	r0, [pc, #76]	; (8009f30 <prvCheckForValidListAndQueue+0x68>)
 8009ee2:	f7fd fbbc 	bl	800765e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009ee6:	4b13      	ldr	r3, [pc, #76]	; (8009f34 <prvCheckForValidListAndQueue+0x6c>)
 8009ee8:	4a10      	ldr	r2, [pc, #64]	; (8009f2c <prvCheckForValidListAndQueue+0x64>)
 8009eea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009eec:	4b12      	ldr	r3, [pc, #72]	; (8009f38 <prvCheckForValidListAndQueue+0x70>)
 8009eee:	4a10      	ldr	r2, [pc, #64]	; (8009f30 <prvCheckForValidListAndQueue+0x68>)
 8009ef0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	9300      	str	r3, [sp, #0]
 8009ef6:	4b11      	ldr	r3, [pc, #68]	; (8009f3c <prvCheckForValidListAndQueue+0x74>)
 8009ef8:	4a11      	ldr	r2, [pc, #68]	; (8009f40 <prvCheckForValidListAndQueue+0x78>)
 8009efa:	210c      	movs	r1, #12
 8009efc:	200a      	movs	r0, #10
 8009efe:	f7fd fccb 	bl	8007898 <xQueueGenericCreateStatic>
 8009f02:	4603      	mov	r3, r0
 8009f04:	4a08      	ldr	r2, [pc, #32]	; (8009f28 <prvCheckForValidListAndQueue+0x60>)
 8009f06:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009f08:	4b07      	ldr	r3, [pc, #28]	; (8009f28 <prvCheckForValidListAndQueue+0x60>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d005      	beq.n	8009f1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009f10:	4b05      	ldr	r3, [pc, #20]	; (8009f28 <prvCheckForValidListAndQueue+0x60>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	490b      	ldr	r1, [pc, #44]	; (8009f44 <prvCheckForValidListAndQueue+0x7c>)
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7fe fbf6 	bl	8008708 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f1c:	f000 f972 	bl	800a204 <vPortExitCritical>
}
 8009f20:	bf00      	nop
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	20005948 	.word	0x20005948
 8009f2c:	20005918 	.word	0x20005918
 8009f30:	2000592c 	.word	0x2000592c
 8009f34:	20005940 	.word	0x20005940
 8009f38:	20005944 	.word	0x20005944
 8009f3c:	200059cc 	.word	0x200059cc
 8009f40:	20005954 	.word	0x20005954
 8009f44:	080232c0 	.word	0x080232c0

08009f48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	3b04      	subs	r3, #4
 8009f58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	3b04      	subs	r3, #4
 8009f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	f023 0201 	bic.w	r2, r3, #1
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	3b04      	subs	r3, #4
 8009f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f78:	4a0c      	ldr	r2, [pc, #48]	; (8009fac <pxPortInitialiseStack+0x64>)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	3b14      	subs	r3, #20
 8009f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	3b04      	subs	r3, #4
 8009f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f06f 0202 	mvn.w	r2, #2
 8009f96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	3b20      	subs	r3, #32
 8009f9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3714      	adds	r7, #20
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr
 8009fac:	08009fb1 	.word	0x08009fb1

08009fb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009fba:	4b12      	ldr	r3, [pc, #72]	; (800a004 <prvTaskExitError+0x54>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fc2:	d00a      	beq.n	8009fda <prvTaskExitError+0x2a>
	__asm volatile
 8009fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	60fb      	str	r3, [r7, #12]
}
 8009fd6:	bf00      	nop
 8009fd8:	e7fe      	b.n	8009fd8 <prvTaskExitError+0x28>
	__asm volatile
 8009fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fde:	f383 8811 	msr	BASEPRI, r3
 8009fe2:	f3bf 8f6f 	isb	sy
 8009fe6:	f3bf 8f4f 	dsb	sy
 8009fea:	60bb      	str	r3, [r7, #8]
}
 8009fec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009fee:	bf00      	nop
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d0fc      	beq.n	8009ff0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ff6:	bf00      	nop
 8009ff8:	bf00      	nop
 8009ffa:	3714      	adds	r7, #20
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr
 800a004:	20000020 	.word	0x20000020
	...

0800a010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a010:	4b07      	ldr	r3, [pc, #28]	; (800a030 <pxCurrentTCBConst2>)
 800a012:	6819      	ldr	r1, [r3, #0]
 800a014:	6808      	ldr	r0, [r1, #0]
 800a016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a01a:	f380 8809 	msr	PSP, r0
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f04f 0000 	mov.w	r0, #0
 800a026:	f380 8811 	msr	BASEPRI, r0
 800a02a:	4770      	bx	lr
 800a02c:	f3af 8000 	nop.w

0800a030 <pxCurrentTCBConst2>:
 800a030:	200057ec 	.word	0x200057ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a034:	bf00      	nop
 800a036:	bf00      	nop

0800a038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a038:	4808      	ldr	r0, [pc, #32]	; (800a05c <prvPortStartFirstTask+0x24>)
 800a03a:	6800      	ldr	r0, [r0, #0]
 800a03c:	6800      	ldr	r0, [r0, #0]
 800a03e:	f380 8808 	msr	MSP, r0
 800a042:	f04f 0000 	mov.w	r0, #0
 800a046:	f380 8814 	msr	CONTROL, r0
 800a04a:	b662      	cpsie	i
 800a04c:	b661      	cpsie	f
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	df00      	svc	0
 800a058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a05a:	bf00      	nop
 800a05c:	e000ed08 	.word	0xe000ed08

0800a060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b086      	sub	sp, #24
 800a064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a066:	4b46      	ldr	r3, [pc, #280]	; (800a180 <xPortStartScheduler+0x120>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a46      	ldr	r2, [pc, #280]	; (800a184 <xPortStartScheduler+0x124>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d10a      	bne.n	800a086 <xPortStartScheduler+0x26>
	__asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	613b      	str	r3, [r7, #16]
}
 800a082:	bf00      	nop
 800a084:	e7fe      	b.n	800a084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a086:	4b3e      	ldr	r3, [pc, #248]	; (800a180 <xPortStartScheduler+0x120>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a3f      	ldr	r2, [pc, #252]	; (800a188 <xPortStartScheduler+0x128>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d10a      	bne.n	800a0a6 <xPortStartScheduler+0x46>
	__asm volatile
 800a090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a094:	f383 8811 	msr	BASEPRI, r3
 800a098:	f3bf 8f6f 	isb	sy
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	60fb      	str	r3, [r7, #12]
}
 800a0a2:	bf00      	nop
 800a0a4:	e7fe      	b.n	800a0a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a0a6:	4b39      	ldr	r3, [pc, #228]	; (800a18c <xPortStartScheduler+0x12c>)
 800a0a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	22ff      	movs	r2, #255	; 0xff
 800a0b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a0c0:	78fb      	ldrb	r3, [r7, #3]
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a0c8:	b2da      	uxtb	r2, r3
 800a0ca:	4b31      	ldr	r3, [pc, #196]	; (800a190 <xPortStartScheduler+0x130>)
 800a0cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a0ce:	4b31      	ldr	r3, [pc, #196]	; (800a194 <xPortStartScheduler+0x134>)
 800a0d0:	2207      	movs	r2, #7
 800a0d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0d4:	e009      	b.n	800a0ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a0d6:	4b2f      	ldr	r3, [pc, #188]	; (800a194 <xPortStartScheduler+0x134>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	4a2d      	ldr	r2, [pc, #180]	; (800a194 <xPortStartScheduler+0x134>)
 800a0de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a0e0:	78fb      	ldrb	r3, [r7, #3]
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	005b      	lsls	r3, r3, #1
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0ea:	78fb      	ldrb	r3, [r7, #3]
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0f2:	2b80      	cmp	r3, #128	; 0x80
 800a0f4:	d0ef      	beq.n	800a0d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a0f6:	4b27      	ldr	r3, [pc, #156]	; (800a194 <xPortStartScheduler+0x134>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f1c3 0307 	rsb	r3, r3, #7
 800a0fe:	2b04      	cmp	r3, #4
 800a100:	d00a      	beq.n	800a118 <xPortStartScheduler+0xb8>
	__asm volatile
 800a102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	60bb      	str	r3, [r7, #8]
}
 800a114:	bf00      	nop
 800a116:	e7fe      	b.n	800a116 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a118:	4b1e      	ldr	r3, [pc, #120]	; (800a194 <xPortStartScheduler+0x134>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	021b      	lsls	r3, r3, #8
 800a11e:	4a1d      	ldr	r2, [pc, #116]	; (800a194 <xPortStartScheduler+0x134>)
 800a120:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a122:	4b1c      	ldr	r3, [pc, #112]	; (800a194 <xPortStartScheduler+0x134>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a12a:	4a1a      	ldr	r2, [pc, #104]	; (800a194 <xPortStartScheduler+0x134>)
 800a12c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	b2da      	uxtb	r2, r3
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a136:	4b18      	ldr	r3, [pc, #96]	; (800a198 <xPortStartScheduler+0x138>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a17      	ldr	r2, [pc, #92]	; (800a198 <xPortStartScheduler+0x138>)
 800a13c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a140:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a142:	4b15      	ldr	r3, [pc, #84]	; (800a198 <xPortStartScheduler+0x138>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a14      	ldr	r2, [pc, #80]	; (800a198 <xPortStartScheduler+0x138>)
 800a148:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a14c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a14e:	f000 f8dd 	bl	800a30c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a152:	4b12      	ldr	r3, [pc, #72]	; (800a19c <xPortStartScheduler+0x13c>)
 800a154:	2200      	movs	r2, #0
 800a156:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a158:	f000 f8fc 	bl	800a354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a15c:	4b10      	ldr	r3, [pc, #64]	; (800a1a0 <xPortStartScheduler+0x140>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a0f      	ldr	r2, [pc, #60]	; (800a1a0 <xPortStartScheduler+0x140>)
 800a162:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a166:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a168:	f7ff ff66 	bl	800a038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a16c:	f7fe ff26 	bl	8008fbc <vTaskSwitchContext>
	prvTaskExitError();
 800a170:	f7ff ff1e 	bl	8009fb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3718      	adds	r7, #24
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	e000ed00 	.word	0xe000ed00
 800a184:	410fc271 	.word	0x410fc271
 800a188:	410fc270 	.word	0x410fc270
 800a18c:	e000e400 	.word	0xe000e400
 800a190:	20005a14 	.word	0x20005a14
 800a194:	20005a18 	.word	0x20005a18
 800a198:	e000ed20 	.word	0xe000ed20
 800a19c:	20000020 	.word	0x20000020
 800a1a0:	e000ef34 	.word	0xe000ef34

0800a1a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
	__asm volatile
 800a1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ae:	f383 8811 	msr	BASEPRI, r3
 800a1b2:	f3bf 8f6f 	isb	sy
 800a1b6:	f3bf 8f4f 	dsb	sy
 800a1ba:	607b      	str	r3, [r7, #4]
}
 800a1bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a1be:	4b0f      	ldr	r3, [pc, #60]	; (800a1fc <vPortEnterCritical+0x58>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	4a0d      	ldr	r2, [pc, #52]	; (800a1fc <vPortEnterCritical+0x58>)
 800a1c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a1c8:	4b0c      	ldr	r3, [pc, #48]	; (800a1fc <vPortEnterCritical+0x58>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d10f      	bne.n	800a1f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a1d0:	4b0b      	ldr	r3, [pc, #44]	; (800a200 <vPortEnterCritical+0x5c>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00a      	beq.n	800a1f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1de:	f383 8811 	msr	BASEPRI, r3
 800a1e2:	f3bf 8f6f 	isb	sy
 800a1e6:	f3bf 8f4f 	dsb	sy
 800a1ea:	603b      	str	r3, [r7, #0]
}
 800a1ec:	bf00      	nop
 800a1ee:	e7fe      	b.n	800a1ee <vPortEnterCritical+0x4a>
	}
}
 800a1f0:	bf00      	nop
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr
 800a1fc:	20000020 	.word	0x20000020
 800a200:	e000ed04 	.word	0xe000ed04

0800a204 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a20a:	4b12      	ldr	r3, [pc, #72]	; (800a254 <vPortExitCritical+0x50>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d10a      	bne.n	800a228 <vPortExitCritical+0x24>
	__asm volatile
 800a212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a216:	f383 8811 	msr	BASEPRI, r3
 800a21a:	f3bf 8f6f 	isb	sy
 800a21e:	f3bf 8f4f 	dsb	sy
 800a222:	607b      	str	r3, [r7, #4]
}
 800a224:	bf00      	nop
 800a226:	e7fe      	b.n	800a226 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a228:	4b0a      	ldr	r3, [pc, #40]	; (800a254 <vPortExitCritical+0x50>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	3b01      	subs	r3, #1
 800a22e:	4a09      	ldr	r2, [pc, #36]	; (800a254 <vPortExitCritical+0x50>)
 800a230:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a232:	4b08      	ldr	r3, [pc, #32]	; (800a254 <vPortExitCritical+0x50>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d105      	bne.n	800a246 <vPortExitCritical+0x42>
 800a23a:	2300      	movs	r3, #0
 800a23c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	f383 8811 	msr	BASEPRI, r3
}
 800a244:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a246:	bf00      	nop
 800a248:	370c      	adds	r7, #12
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	20000020 	.word	0x20000020
	...

0800a260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a260:	f3ef 8009 	mrs	r0, PSP
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	4b15      	ldr	r3, [pc, #84]	; (800a2c0 <pxCurrentTCBConst>)
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	f01e 0f10 	tst.w	lr, #16
 800a270:	bf08      	it	eq
 800a272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a27a:	6010      	str	r0, [r2, #0]
 800a27c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a280:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a284:	f380 8811 	msr	BASEPRI, r0
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f7fe fe94 	bl	8008fbc <vTaskSwitchContext>
 800a294:	f04f 0000 	mov.w	r0, #0
 800a298:	f380 8811 	msr	BASEPRI, r0
 800a29c:	bc09      	pop	{r0, r3}
 800a29e:	6819      	ldr	r1, [r3, #0]
 800a2a0:	6808      	ldr	r0, [r1, #0]
 800a2a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a6:	f01e 0f10 	tst.w	lr, #16
 800a2aa:	bf08      	it	eq
 800a2ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a2b0:	f380 8809 	msr	PSP, r0
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	f3af 8000 	nop.w

0800a2c0 <pxCurrentTCBConst>:
 800a2c0:	200057ec 	.word	0x200057ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a2c4:	bf00      	nop
 800a2c6:	bf00      	nop

0800a2c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	607b      	str	r3, [r7, #4]
}
 800a2e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a2e2:	f7fe fdb3 	bl	8008e4c <xTaskIncrementTick>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d003      	beq.n	800a2f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2ec:	4b06      	ldr	r3, [pc, #24]	; (800a308 <SysTick_Handler+0x40>)
 800a2ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2f2:	601a      	str	r2, [r3, #0]
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	f383 8811 	msr	BASEPRI, r3
}
 800a2fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a300:	bf00      	nop
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	e000ed04 	.word	0xe000ed04

0800a30c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a30c:	b480      	push	{r7}
 800a30e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a310:	4b0b      	ldr	r3, [pc, #44]	; (800a340 <vPortSetupTimerInterrupt+0x34>)
 800a312:	2200      	movs	r2, #0
 800a314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a316:	4b0b      	ldr	r3, [pc, #44]	; (800a344 <vPortSetupTimerInterrupt+0x38>)
 800a318:	2200      	movs	r2, #0
 800a31a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a31c:	4b0a      	ldr	r3, [pc, #40]	; (800a348 <vPortSetupTimerInterrupt+0x3c>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a0a      	ldr	r2, [pc, #40]	; (800a34c <vPortSetupTimerInterrupt+0x40>)
 800a322:	fba2 2303 	umull	r2, r3, r2, r3
 800a326:	099b      	lsrs	r3, r3, #6
 800a328:	4a09      	ldr	r2, [pc, #36]	; (800a350 <vPortSetupTimerInterrupt+0x44>)
 800a32a:	3b01      	subs	r3, #1
 800a32c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a32e:	4b04      	ldr	r3, [pc, #16]	; (800a340 <vPortSetupTimerInterrupt+0x34>)
 800a330:	2207      	movs	r2, #7
 800a332:	601a      	str	r2, [r3, #0]
}
 800a334:	bf00      	nop
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr
 800a33e:	bf00      	nop
 800a340:	e000e010 	.word	0xe000e010
 800a344:	e000e018 	.word	0xe000e018
 800a348:	20000000 	.word	0x20000000
 800a34c:	10624dd3 	.word	0x10624dd3
 800a350:	e000e014 	.word	0xe000e014

0800a354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a364 <vPortEnableVFP+0x10>
 800a358:	6801      	ldr	r1, [r0, #0]
 800a35a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a35e:	6001      	str	r1, [r0, #0]
 800a360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a362:	bf00      	nop
 800a364:	e000ed88 	.word	0xe000ed88

0800a368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a36e:	f3ef 8305 	mrs	r3, IPSR
 800a372:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2b0f      	cmp	r3, #15
 800a378:	d914      	bls.n	800a3a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a37a:	4a17      	ldr	r2, [pc, #92]	; (800a3d8 <vPortValidateInterruptPriority+0x70>)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	4413      	add	r3, r2
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a384:	4b15      	ldr	r3, [pc, #84]	; (800a3dc <vPortValidateInterruptPriority+0x74>)
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	7afa      	ldrb	r2, [r7, #11]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d20a      	bcs.n	800a3a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a392:	f383 8811 	msr	BASEPRI, r3
 800a396:	f3bf 8f6f 	isb	sy
 800a39a:	f3bf 8f4f 	dsb	sy
 800a39e:	607b      	str	r3, [r7, #4]
}
 800a3a0:	bf00      	nop
 800a3a2:	e7fe      	b.n	800a3a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a3a4:	4b0e      	ldr	r3, [pc, #56]	; (800a3e0 <vPortValidateInterruptPriority+0x78>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a3ac:	4b0d      	ldr	r3, [pc, #52]	; (800a3e4 <vPortValidateInterruptPriority+0x7c>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d90a      	bls.n	800a3ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b8:	f383 8811 	msr	BASEPRI, r3
 800a3bc:	f3bf 8f6f 	isb	sy
 800a3c0:	f3bf 8f4f 	dsb	sy
 800a3c4:	603b      	str	r3, [r7, #0]
}
 800a3c6:	bf00      	nop
 800a3c8:	e7fe      	b.n	800a3c8 <vPortValidateInterruptPriority+0x60>
	}
 800a3ca:	bf00      	nop
 800a3cc:	3714      	adds	r7, #20
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	e000e3f0 	.word	0xe000e3f0
 800a3dc:	20005a14 	.word	0x20005a14
 800a3e0:	e000ed0c 	.word	0xe000ed0c
 800a3e4:	20005a18 	.word	0x20005a18

0800a3e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b08a      	sub	sp, #40	; 0x28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a3f4:	f7fe fc5e 	bl	8008cb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a3f8:	4b5b      	ldr	r3, [pc, #364]	; (800a568 <pvPortMalloc+0x180>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d101      	bne.n	800a404 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a400:	f000 f920 	bl	800a644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a404:	4b59      	ldr	r3, [pc, #356]	; (800a56c <pvPortMalloc+0x184>)
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4013      	ands	r3, r2
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f040 8093 	bne.w	800a538 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d01d      	beq.n	800a454 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a418:	2208      	movs	r2, #8
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4413      	add	r3, r2
 800a41e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f003 0307 	and.w	r3, r3, #7
 800a426:	2b00      	cmp	r3, #0
 800a428:	d014      	beq.n	800a454 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f023 0307 	bic.w	r3, r3, #7
 800a430:	3308      	adds	r3, #8
 800a432:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f003 0307 	and.w	r3, r3, #7
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00a      	beq.n	800a454 <pvPortMalloc+0x6c>
	__asm volatile
 800a43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a442:	f383 8811 	msr	BASEPRI, r3
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	617b      	str	r3, [r7, #20]
}
 800a450:	bf00      	nop
 800a452:	e7fe      	b.n	800a452 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d06e      	beq.n	800a538 <pvPortMalloc+0x150>
 800a45a:	4b45      	ldr	r3, [pc, #276]	; (800a570 <pvPortMalloc+0x188>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	429a      	cmp	r2, r3
 800a462:	d869      	bhi.n	800a538 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a464:	4b43      	ldr	r3, [pc, #268]	; (800a574 <pvPortMalloc+0x18c>)
 800a466:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a468:	4b42      	ldr	r3, [pc, #264]	; (800a574 <pvPortMalloc+0x18c>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a46e:	e004      	b.n	800a47a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a472:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	429a      	cmp	r2, r3
 800a482:	d903      	bls.n	800a48c <pvPortMalloc+0xa4>
 800a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d1f1      	bne.n	800a470 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a48c:	4b36      	ldr	r3, [pc, #216]	; (800a568 <pvPortMalloc+0x180>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a492:	429a      	cmp	r2, r3
 800a494:	d050      	beq.n	800a538 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a496:	6a3b      	ldr	r3, [r7, #32]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2208      	movs	r2, #8
 800a49c:	4413      	add	r3, r2
 800a49e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	6a3b      	ldr	r3, [r7, #32]
 800a4a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4aa:	685a      	ldr	r2, [r3, #4]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	1ad2      	subs	r2, r2, r3
 800a4b0:	2308      	movs	r3, #8
 800a4b2:	005b      	lsls	r3, r3, #1
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d91f      	bls.n	800a4f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a4b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4413      	add	r3, r2
 800a4be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	f003 0307 	and.w	r3, r3, #7
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00a      	beq.n	800a4e0 <pvPortMalloc+0xf8>
	__asm volatile
 800a4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ce:	f383 8811 	msr	BASEPRI, r3
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	613b      	str	r3, [r7, #16]
}
 800a4dc:	bf00      	nop
 800a4de:	e7fe      	b.n	800a4de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e2:	685a      	ldr	r2, [r3, #4]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	1ad2      	subs	r2, r2, r3
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a4f2:	69b8      	ldr	r0, [r7, #24]
 800a4f4:	f000 f908 	bl	800a708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a4f8:	4b1d      	ldr	r3, [pc, #116]	; (800a570 <pvPortMalloc+0x188>)
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	4a1b      	ldr	r2, [pc, #108]	; (800a570 <pvPortMalloc+0x188>)
 800a504:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a506:	4b1a      	ldr	r3, [pc, #104]	; (800a570 <pvPortMalloc+0x188>)
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	4b1b      	ldr	r3, [pc, #108]	; (800a578 <pvPortMalloc+0x190>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d203      	bcs.n	800a51a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a512:	4b17      	ldr	r3, [pc, #92]	; (800a570 <pvPortMalloc+0x188>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a18      	ldr	r2, [pc, #96]	; (800a578 <pvPortMalloc+0x190>)
 800a518:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51c:	685a      	ldr	r2, [r3, #4]
 800a51e:	4b13      	ldr	r3, [pc, #76]	; (800a56c <pvPortMalloc+0x184>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	431a      	orrs	r2, r3
 800a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a526:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52a:	2200      	movs	r2, #0
 800a52c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a52e:	4b13      	ldr	r3, [pc, #76]	; (800a57c <pvPortMalloc+0x194>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	3301      	adds	r3, #1
 800a534:	4a11      	ldr	r2, [pc, #68]	; (800a57c <pvPortMalloc+0x194>)
 800a536:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a538:	f7fe fbca 	bl	8008cd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a53c:	69fb      	ldr	r3, [r7, #28]
 800a53e:	f003 0307 	and.w	r3, r3, #7
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00a      	beq.n	800a55c <pvPortMalloc+0x174>
	__asm volatile
 800a546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54a:	f383 8811 	msr	BASEPRI, r3
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f3bf 8f4f 	dsb	sy
 800a556:	60fb      	str	r3, [r7, #12]
}
 800a558:	bf00      	nop
 800a55a:	e7fe      	b.n	800a55a <pvPortMalloc+0x172>
	return pvReturn;
 800a55c:	69fb      	ldr	r3, [r7, #28]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3728      	adds	r7, #40	; 0x28
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	2000eaac 	.word	0x2000eaac
 800a56c:	2000eac0 	.word	0x2000eac0
 800a570:	2000eab0 	.word	0x2000eab0
 800a574:	2000eaa4 	.word	0x2000eaa4
 800a578:	2000eab4 	.word	0x2000eab4
 800a57c:	2000eab8 	.word	0x2000eab8

0800a580 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b086      	sub	sp, #24
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d04d      	beq.n	800a62e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a592:	2308      	movs	r3, #8
 800a594:	425b      	negs	r3, r3
 800a596:	697a      	ldr	r2, [r7, #20]
 800a598:	4413      	add	r3, r2
 800a59a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	685a      	ldr	r2, [r3, #4]
 800a5a4:	4b24      	ldr	r3, [pc, #144]	; (800a638 <vPortFree+0xb8>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d10a      	bne.n	800a5c4 <vPortFree+0x44>
	__asm volatile
 800a5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	60fb      	str	r3, [r7, #12]
}
 800a5c0:	bf00      	nop
 800a5c2:	e7fe      	b.n	800a5c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00a      	beq.n	800a5e2 <vPortFree+0x62>
	__asm volatile
 800a5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d0:	f383 8811 	msr	BASEPRI, r3
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	60bb      	str	r3, [r7, #8]
}
 800a5de:	bf00      	nop
 800a5e0:	e7fe      	b.n	800a5e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	685a      	ldr	r2, [r3, #4]
 800a5e6:	4b14      	ldr	r3, [pc, #80]	; (800a638 <vPortFree+0xb8>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4013      	ands	r3, r2
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d01e      	beq.n	800a62e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d11a      	bne.n	800a62e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	685a      	ldr	r2, [r3, #4]
 800a5fc:	4b0e      	ldr	r3, [pc, #56]	; (800a638 <vPortFree+0xb8>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	43db      	mvns	r3, r3
 800a602:	401a      	ands	r2, r3
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a608:	f7fe fb54 	bl	8008cb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	685a      	ldr	r2, [r3, #4]
 800a610:	4b0a      	ldr	r3, [pc, #40]	; (800a63c <vPortFree+0xbc>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4413      	add	r3, r2
 800a616:	4a09      	ldr	r2, [pc, #36]	; (800a63c <vPortFree+0xbc>)
 800a618:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a61a:	6938      	ldr	r0, [r7, #16]
 800a61c:	f000 f874 	bl	800a708 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a620:	4b07      	ldr	r3, [pc, #28]	; (800a640 <vPortFree+0xc0>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	3301      	adds	r3, #1
 800a626:	4a06      	ldr	r2, [pc, #24]	; (800a640 <vPortFree+0xc0>)
 800a628:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a62a:	f7fe fb51 	bl	8008cd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a62e:	bf00      	nop
 800a630:	3718      	adds	r7, #24
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	2000eac0 	.word	0x2000eac0
 800a63c:	2000eab0 	.word	0x2000eab0
 800a640:	2000eabc 	.word	0x2000eabc

0800a644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a64a:	f249 0388 	movw	r3, #37000	; 0x9088
 800a64e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a650:	4b27      	ldr	r3, [pc, #156]	; (800a6f0 <prvHeapInit+0xac>)
 800a652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f003 0307 	and.w	r3, r3, #7
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00c      	beq.n	800a678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	3307      	adds	r3, #7
 800a662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f023 0307 	bic.w	r3, r3, #7
 800a66a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a66c:	68ba      	ldr	r2, [r7, #8]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	1ad3      	subs	r3, r2, r3
 800a672:	4a1f      	ldr	r2, [pc, #124]	; (800a6f0 <prvHeapInit+0xac>)
 800a674:	4413      	add	r3, r2
 800a676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a67c:	4a1d      	ldr	r2, [pc, #116]	; (800a6f4 <prvHeapInit+0xb0>)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a682:	4b1c      	ldr	r3, [pc, #112]	; (800a6f4 <prvHeapInit+0xb0>)
 800a684:	2200      	movs	r2, #0
 800a686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	68ba      	ldr	r2, [r7, #8]
 800a68c:	4413      	add	r3, r2
 800a68e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a690:	2208      	movs	r2, #8
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	1a9b      	subs	r3, r3, r2
 800a696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f023 0307 	bic.w	r3, r3, #7
 800a69e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	4a15      	ldr	r2, [pc, #84]	; (800a6f8 <prvHeapInit+0xb4>)
 800a6a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a6a6:	4b14      	ldr	r3, [pc, #80]	; (800a6f8 <prvHeapInit+0xb4>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a6ae:	4b12      	ldr	r3, [pc, #72]	; (800a6f8 <prvHeapInit+0xb4>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	68fa      	ldr	r2, [r7, #12]
 800a6be:	1ad2      	subs	r2, r2, r3
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a6c4:	4b0c      	ldr	r3, [pc, #48]	; (800a6f8 <prvHeapInit+0xb4>)
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	4a0a      	ldr	r2, [pc, #40]	; (800a6fc <prvHeapInit+0xb8>)
 800a6d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	4a09      	ldr	r2, [pc, #36]	; (800a700 <prvHeapInit+0xbc>)
 800a6da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a6dc:	4b09      	ldr	r3, [pc, #36]	; (800a704 <prvHeapInit+0xc0>)
 800a6de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a6e2:	601a      	str	r2, [r3, #0]
}
 800a6e4:	bf00      	nop
 800a6e6:	3714      	adds	r7, #20
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr
 800a6f0:	20005a1c 	.word	0x20005a1c
 800a6f4:	2000eaa4 	.word	0x2000eaa4
 800a6f8:	2000eaac 	.word	0x2000eaac
 800a6fc:	2000eab4 	.word	0x2000eab4
 800a700:	2000eab0 	.word	0x2000eab0
 800a704:	2000eac0 	.word	0x2000eac0

0800a708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a710:	4b28      	ldr	r3, [pc, #160]	; (800a7b4 <prvInsertBlockIntoFreeList+0xac>)
 800a712:	60fb      	str	r3, [r7, #12]
 800a714:	e002      	b.n	800a71c <prvInsertBlockIntoFreeList+0x14>
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	60fb      	str	r3, [r7, #12]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	429a      	cmp	r2, r3
 800a724:	d8f7      	bhi.n	800a716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	68ba      	ldr	r2, [r7, #8]
 800a730:	4413      	add	r3, r2
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	429a      	cmp	r2, r3
 800a736:	d108      	bne.n	800a74a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	441a      	add	r2, r3
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	68ba      	ldr	r2, [r7, #8]
 800a754:	441a      	add	r2, r3
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d118      	bne.n	800a790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	4b15      	ldr	r3, [pc, #84]	; (800a7b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	429a      	cmp	r2, r3
 800a768:	d00d      	beq.n	800a786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	685a      	ldr	r2, [r3, #4]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	441a      	add	r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	601a      	str	r2, [r3, #0]
 800a784:	e008      	b.n	800a798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a786:	4b0c      	ldr	r3, [pc, #48]	; (800a7b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	601a      	str	r2, [r3, #0]
 800a78e:	e003      	b.n	800a798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d002      	beq.n	800a7a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7a6:	bf00      	nop
 800a7a8:	3714      	adds	r7, #20
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	2000eaa4 	.word	0x2000eaa4
 800a7b8:	2000eaac 	.word	0x2000eaac

0800a7bc <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	bf38      	it	cc
 800a7ce:	4613      	movcc	r3, r2
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	bf28      	it	cs
 800a7ee:	4613      	movcs	r3, r2
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a80e:	6839      	ldr	r1, [r7, #0]
 800a810:	fb01 f202 	mul.w	r2, r1, r2
 800a814:	1a9b      	subs	r3, r3, r2
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	1ad3      	subs	r3, r2, r3
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	370c      	adds	r7, #12
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 800a826:	b580      	push	{r7, lr}
 800a828:	b082      	sub	sp, #8
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
 800a82e:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	4413      	add	r3, r2
 800a836:	3b01      	subs	r3, #1
 800a838:	6839      	ldr	r1, [r7, #0]
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7ff ffde 	bl	800a7fc <lfs_aligndown>
 800a840:	4603      	mov	r3, r0
}
 800a842:	4618      	mov	r0, r3
 800a844:	3708      	adds	r7, #8
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800a84a:	b480      	push	{r7}
 800a84c:	b083      	sub	sp, #12
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	3b01      	subs	r3, #1
 800a856:	fab3 f383 	clz	r3, r3
 800a85a:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 800a85e:	4618      	mov	r0, r3
 800a860:	370c      	adds	r7, #12
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800a86a:	b480      	push	{r7}
 800a86c:	b083      	sub	sp, #12
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	fa93 f3a3 	rbit	r3, r3
 800a878:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7f5 fd1d 	bl	80002d0 <__popcountsi2>
 800a896:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3708      	adds	r7, #8
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	1ad3      	subs	r3, r2, r3
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return a;
 800a8c4:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	370c      	adds	r7, #12
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr

0800a8d2 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b082      	sub	sp, #8
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f7ff ffee 	bl	800a8bc <lfs_fromle32>
 800a8e0:	4603      	mov	r3, r0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3708      	adds	r7, #8
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 800a8ea:	b480      	push	{r7}
 800a8ec:	b083      	sub	sp, #12
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	370c      	adds	r7, #12
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr

0800a902 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 800a902:	b580      	push	{r7, lr}
 800a904:	b082      	sub	sp, #8
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7ff ffed 	bl	800a8ea <lfs_frombe32>
 800a910:	4603      	mov	r3, r0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b082      	sub	sp, #8
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f016 fcc0 	bl	80212a8 <malloc>
 800a928:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 800a932:	b580      	push	{r7, lr}
 800a934:	b082      	sub	sp, #8
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f016 fcbc 	bl	80212b8 <free>
#else
    (void)p;
#endif
}
 800a940:	bf00      	nop
 800a942:	3708      	adds	r7, #8
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <lfs_cache_drop>:
int lfs_mounted;
lfs_t lfs;
struct lfs_config cfg;

/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a958:	601a      	str	r2, [r3, #0]
}
 800a95a:	bf00      	nop
 800a95c:	370c      	adds	r7, #12
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr

0800a966 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 800a966:	b580      	push	{r7, lr}
 800a968:	b082      	sub	sp, #8
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
 800a96e:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	68d8      	ldr	r0, [r3, #12]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a97a:	461a      	mov	r2, r3
 800a97c:	21ff      	movs	r1, #255	; 0xff
 800a97e:	f017 f8e1 	bl	8021b44 <memset>
    pcache->block = LFS_BLOCK_NULL;
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a988:	601a      	str	r2, [r3, #0]
}
 800a98a:	bf00      	nop
 800a98c:	3708      	adds	r7, #8
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
	...

0800a994 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 800a994:	b5b0      	push	{r4, r5, r7, lr}
 800a996:	b08a      	sub	sp, #40	; 0x28
 800a998:	af02      	add	r7, sp, #8
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
 800a9a0:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800a9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a4:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d208      	bcs.n	800a9c4 <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 800a9b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9b6:	441a      	add	r2, r3
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if (block >= lfs->cfg->block_count ||
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	f240 811b 	bls.w	800abfa <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 800a9c4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800a9c8:	e11c      	b.n	800ac04 <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800a9ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9cc:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d03f      	beq.n	800aa54 <lfs_bd_read+0xc0>
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d13a      	bne.n	800aa54 <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	685a      	ldr	r2, [r3, #4]
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 800a9e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d232      	bcs.n	800aa54 <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d324      	bcc.n	800aa42 <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	689a      	ldr	r2, [r3, #8]
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	6859      	ldr	r1, [r3, #4]
 800aa00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa02:	1acb      	subs	r3, r1, r3
 800aa04:	4413      	add	r3, r2
 800aa06:	4619      	mov	r1, r3
 800aa08:	69b8      	ldr	r0, [r7, #24]
 800aa0a:	f7ff fee7 	bl	800a7dc <lfs_min>
 800aa0e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	68da      	ldr	r2, [r3, #12]
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aa1a:	1acb      	subs	r3, r1, r3
 800aa1c:	4413      	add	r3, r2
 800aa1e:	69ba      	ldr	r2, [r7, #24]
 800aa20:	4619      	mov	r1, r3
 800aa22:	69f8      	ldr	r0, [r7, #28]
 800aa24:	f017 f99f 	bl	8021d66 <memcpy>

                data += diff;
 800aa28:	69fa      	ldr	r2, [r7, #28]
 800aa2a:	69bb      	ldr	r3, [r7, #24]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	61fb      	str	r3, [r7, #28]
                off += diff;
 800aa30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	4413      	add	r3, r2
 800aa36:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800aa38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	1ad3      	subs	r3, r2, r3
 800aa3e:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800aa40:	e0db      	b.n	800abfa <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	685a      	ldr	r2, [r3, #4]
 800aa46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa48:	1ad3      	subs	r3, r2, r3
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	69b8      	ldr	r0, [r7, #24]
 800aa4e:	f7ff fec5 	bl	800a7dc <lfs_min>
 800aa52:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d13a      	bne.n	800aad4 <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	685a      	ldr	r2, [r3, #4]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	4413      	add	r3, r2
        if (block == rcache->block &&
 800aa68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d232      	bcs.n	800aad4 <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d324      	bcc.n	800aac2 <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	689a      	ldr	r2, [r3, #8]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6859      	ldr	r1, [r3, #4]
 800aa80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa82:	1acb      	subs	r3, r1, r3
 800aa84:	4413      	add	r3, r2
 800aa86:	4619      	mov	r1, r3
 800aa88:	69b8      	ldr	r0, [r7, #24]
 800aa8a:	f7ff fea7 	bl	800a7dc <lfs_min>
 800aa8e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	68da      	ldr	r2, [r3, #12]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aa9a:	1acb      	subs	r3, r1, r3
 800aa9c:	4413      	add	r3, r2
 800aa9e:	69ba      	ldr	r2, [r7, #24]
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	69f8      	ldr	r0, [r7, #28]
 800aaa4:	f017 f95f 	bl	8021d66 <memcpy>

                data += diff;
 800aaa8:	69fa      	ldr	r2, [r7, #28]
 800aaaa:	69bb      	ldr	r3, [r7, #24]
 800aaac:	4413      	add	r3, r2
 800aaae:	61fb      	str	r3, [r7, #28]
                off += diff;
 800aab0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	4413      	add	r3, r2
 800aab6:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800aab8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	1ad3      	subs	r3, r2, r3
 800aabe:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800aac0:	e09b      	b.n	800abfa <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	685a      	ldr	r2, [r3, #4]
 800aac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aac8:	1ad3      	subs	r3, r2, r3
 800aaca:	4619      	mov	r1, r3
 800aacc:	69b8      	ldr	r0, [r7, #24]
 800aace:	f7ff fe85 	bl	800a7dc <lfs_min>
 800aad2:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800aad4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	429a      	cmp	r2, r3
 800aada:	d336      	bcc.n	800ab4a <lfs_bd_read+0x1b6>
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aae0:	69da      	ldr	r2, [r3, #28]
 800aae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae4:	fbb3 f1f2 	udiv	r1, r3, r2
 800aae8:	fb01 f202 	mul.w	r2, r1, r2
 800aaec:	1a9b      	subs	r3, r3, r2
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d12b      	bne.n	800ab4a <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aaf6:	69db      	ldr	r3, [r3, #28]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800aaf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d325      	bcc.n	800ab4a <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab02:	69db      	ldr	r3, [r3, #28]
 800ab04:	4619      	mov	r1, r3
 800ab06:	69b8      	ldr	r0, [r7, #24]
 800ab08:	f7ff fe78 	bl	800a7fc <lfs_aligndown>
 800ab0c:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab12:	685c      	ldr	r4, [r3, #4]
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	9300      	str	r3, [sp, #0]
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab22:	47a0      	blx	r4
 800ab24:	6178      	str	r0, [r7, #20]
            if (err) {
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d001      	beq.n	800ab30 <lfs_bd_read+0x19c>
                return err;
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	e069      	b.n	800ac04 <lfs_bd_read+0x270>
            }

            data += diff;
 800ab30:	69fa      	ldr	r2, [r7, #28]
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	4413      	add	r3, r2
 800ab36:	61fb      	str	r3, [r7, #28]
            off += diff;
 800ab38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 800ab40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ab42:	69bb      	ldr	r3, [r7, #24]
 800ab44:	1ad3      	subs	r3, r2, r3
 800ab46:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 800ab48:	e057      	b.n	800abfa <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d305      	bcc.n	800ab62 <lfs_bd_read+0x1ce>
 800ab56:	4b2d      	ldr	r3, [pc, #180]	; (800ac0c <lfs_bd_read+0x278>)
 800ab58:	4a2d      	ldr	r2, [pc, #180]	; (800ac10 <lfs_bd_read+0x27c>)
 800ab5a:	215e      	movs	r1, #94	; 0x5e
 800ab5c:	482d      	ldr	r0, [pc, #180]	; (800ac14 <lfs_bd_read+0x280>)
 800ab5e:	f016 fb85 	bl	802126c <__assert_func>
        rcache->block = block;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab66:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab6c:	69db      	ldr	r3, [r3, #28]
 800ab6e:	4619      	mov	r1, r3
 800ab70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ab72:	f7ff fe43 	bl	800a7fc <lfs_aligndown>
 800ab76:	4602      	mov	r2, r0
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 800ab7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab86:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 800ab88:	4619      	mov	r1, r3
 800ab8a:	4610      	mov	r0, r2
 800ab8c:	f7ff fe4b 	bl	800a826 <lfs_alignup>
 800ab90:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                lfs_min(
 800ab98:	4619      	mov	r1, r3
 800ab9a:	4610      	mov	r0, r2
 800ab9c:	f7ff fe1e 	bl	800a7dc <lfs_min>
 800aba0:	4602      	mov	r2, r0
                - rcache->off,
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 800aba6:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        rcache->size = lfs_min(
 800abae:	4619      	mov	r1, r3
 800abb0:	4610      	mov	r0, r2
 800abb2:	f7ff fe13 	bl	800a7dc <lfs_min>
 800abb6:	4602      	mov	r2, r0
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abc0:	685c      	ldr	r4, [r3, #4]
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6819      	ldr	r1, [r3, #0]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	689b      	ldr	r3, [r3, #8]
 800abd6:	9300      	str	r3, [sp, #0]
 800abd8:	462b      	mov	r3, r5
 800abda:	47a0      	blx	r4
 800abdc:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	dd05      	ble.n	800abf0 <lfs_bd_read+0x25c>
 800abe4:	4b0c      	ldr	r3, [pc, #48]	; (800ac18 <lfs_bd_read+0x284>)
 800abe6:	4a0a      	ldr	r2, [pc, #40]	; (800ac10 <lfs_bd_read+0x27c>)
 800abe8:	2169      	movs	r1, #105	; 0x69
 800abea:	480a      	ldr	r0, [pc, #40]	; (800ac14 <lfs_bd_read+0x280>)
 800abec:	f016 fb3e 	bl	802126c <__assert_func>
        if (err) {
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d001      	beq.n	800abfa <lfs_bd_read+0x266>
            return err;
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	e004      	b.n	800ac04 <lfs_bd_read+0x270>
    while (size > 0) {
 800abfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f47f aee4 	bne.w	800a9ca <lfs_bd_read+0x36>
        }
    }

    return 0;
 800ac02:	2300      	movs	r3, #0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3720      	adds	r7, #32
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bdb0      	pop	{r4, r5, r7, pc}
 800ac0c:	080232c8 	.word	0x080232c8
 800ac10:	080271c4 	.word	0x080271c4
 800ac14:	080232e8 	.word	0x080232e8
 800ac18:	08023314 	.word	0x08023314

0800ac1c <lfs_bd_cmp>:
};

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b08e      	sub	sp, #56	; 0x38
 800ac20:	af04      	add	r7, sp, #16
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
 800ac28:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800ac2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac2c:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 800ac32:	2300      	movs	r3, #0
 800ac34:	627b      	str	r3, [r7, #36]	; 0x24
 800ac36:	e039      	b.n	800acac <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 800ac38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3c:	1ad3      	subs	r3, r2, r3
 800ac3e:	2108      	movs	r1, #8
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7ff fdcb 	bl	800a7dc <lfs_min>
 800ac46:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 800ac48:	683a      	ldr	r2, [r7, #0]
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4c:	1ad1      	subs	r1, r2, r3
 800ac4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac52:	4413      	add	r3, r2
 800ac54:	69fa      	ldr	r2, [r7, #28]
 800ac56:	9203      	str	r2, [sp, #12]
 800ac58:	f107 0210 	add.w	r2, r7, #16
 800ac5c:	9202      	str	r2, [sp, #8]
 800ac5e:	9301      	str	r3, [sp, #4]
 800ac60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	460b      	mov	r3, r1
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	68b9      	ldr	r1, [r7, #8]
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	f7ff fe92 	bl	800a994 <lfs_bd_read>
 800ac70:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d001      	beq.n	800ac7c <lfs_bd_cmp+0x60>
            return res;
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	e01c      	b.n	800acb6 <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 800ac7c:	6a3a      	ldr	r2, [r7, #32]
 800ac7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac80:	18d1      	adds	r1, r2, r3
 800ac82:	f107 0310 	add.w	r3, r7, #16
 800ac86:	69fa      	ldr	r2, [r7, #28]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f016 ff31 	bl	8021af0 <memcmp>
 800ac8e:	61b8      	str	r0, [r7, #24]
        if (res) {
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d006      	beq.n	800aca4 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	da01      	bge.n	800aca0 <lfs_bd_cmp+0x84>
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e00a      	b.n	800acb6 <lfs_bd_cmp+0x9a>
 800aca0:	2302      	movs	r3, #2
 800aca2:	e008      	b.n	800acb6 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 800aca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	4413      	add	r3, r2
 800acaa:	627b      	str	r3, [r7, #36]	; 0x24
 800acac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d3c1      	bcc.n	800ac38 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3728      	adds	r7, #40	; 0x28
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
	...

0800acc0 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800acc0:	b5b0      	push	{r4, r5, r7, lr}
 800acc2:	b08c      	sub	sp, #48	; 0x30
 800acc4:	af04      	add	r7, sp, #16
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	607a      	str	r2, [r7, #4]
 800accc:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acd6:	d061      	beq.n	800ad9c <lfs_bd_flush+0xdc>
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f113 0f02 	cmn.w	r3, #2
 800ace0:	d05c      	beq.n	800ad9c <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acec:	429a      	cmp	r2, r3
 800acee:	d305      	bcc.n	800acfc <lfs_bd_flush+0x3c>
 800acf0:	4b2d      	ldr	r3, [pc, #180]	; (800ada8 <lfs_bd_flush+0xe8>)
 800acf2:	4a2e      	ldr	r2, [pc, #184]	; (800adac <lfs_bd_flush+0xec>)
 800acf4:	2197      	movs	r1, #151	; 0x97
 800acf6:	482e      	ldr	r0, [pc, #184]	; (800adb0 <lfs_bd_flush+0xf0>)
 800acf8:	f016 fab8 	bl	802126c <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	689a      	ldr	r2, [r3, #8]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad04:	6a1b      	ldr	r3, [r3, #32]
 800ad06:	4619      	mov	r1, r3
 800ad08:	4610      	mov	r0, r2
 800ad0a:	f7ff fd8c 	bl	800a826 <lfs_alignup>
 800ad0e:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad14:	689c      	ldr	r4, [r3, #8]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	6819      	ldr	r1, [r3, #0]
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	9300      	str	r3, [sp, #0]
 800ad2a:	462b      	mov	r3, r5
 800ad2c:	47a0      	blx	r4
 800ad2e:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	dd05      	ble.n	800ad42 <lfs_bd_flush+0x82>
 800ad36:	4b1f      	ldr	r3, [pc, #124]	; (800adb4 <lfs_bd_flush+0xf4>)
 800ad38:	4a1c      	ldr	r2, [pc, #112]	; (800adac <lfs_bd_flush+0xec>)
 800ad3a:	219b      	movs	r1, #155	; 0x9b
 800ad3c:	481c      	ldr	r0, [pc, #112]	; (800adb0 <lfs_bd_flush+0xf0>)
 800ad3e:	f016 fa95 	bl	802126c <__assert_func>
        if (err) {
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d001      	beq.n	800ad4c <lfs_bd_flush+0x8c>
            return err;
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	e028      	b.n	800ad9e <lfs_bd_flush+0xde>
        }

        if (validate) {
 800ad4c:	78fb      	ldrb	r3, [r7, #3]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d020      	beq.n	800ad94 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 800ad52:	6879      	ldr	r1, [r7, #4]
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f7ff fdf7 	bl	800a948 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	68ba      	ldr	r2, [r7, #8]
 800ad60:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 800ad62:	68b9      	ldr	r1, [r7, #8]
 800ad64:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 800ad66:	69f8      	ldr	r0, [r7, #28]
 800ad68:	9003      	str	r0, [sp, #12]
 800ad6a:	9102      	str	r1, [sp, #8]
 800ad6c:	9201      	str	r2, [sp, #4]
 800ad6e:	9300      	str	r3, [sp, #0]
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	2100      	movs	r1, #0
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f7ff ff50 	bl	800ac1c <lfs_bd_cmp>
 800ad7c:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	da01      	bge.n	800ad88 <lfs_bd_flush+0xc8>
                return res;
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	e00a      	b.n	800ad9e <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d002      	beq.n	800ad94 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 800ad8e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800ad92:	e004      	b.n	800ad9e <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 800ad94:	68b9      	ldr	r1, [r7, #8]
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f7ff fde5 	bl	800a966 <lfs_cache_zero>
    }

    return 0;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3720      	adds	r7, #32
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bdb0      	pop	{r4, r5, r7, pc}
 800ada6:	bf00      	nop
 800ada8:	08023320 	.word	0x08023320
 800adac:	080271d0 	.word	0x080271d0
 800adb0:	080232e8 	.word	0x080232e8
 800adb4:	08023314 	.word	0x08023314

0800adb8 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800adb8:	b580      	push	{r7, lr}
 800adba:	b086      	sub	sp, #24
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]
 800adc4:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 800adc6:	6879      	ldr	r1, [r7, #4]
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f7ff fdbd 	bl	800a948 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800adce:	78fb      	ldrb	r3, [r7, #3]
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	68b9      	ldr	r1, [r7, #8]
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f7ff ff73 	bl	800acc0 <lfs_bd_flush>
 800adda:	6178      	str	r0, [r7, #20]
    if (err) {
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d001      	beq.n	800ade6 <lfs_bd_sync+0x2e>
        return err;
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	e011      	b.n	800ae0a <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adea:	691b      	ldr	r3, [r3, #16]
 800adec:	68fa      	ldr	r2, [r7, #12]
 800adee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800adf0:	4610      	mov	r0, r2
 800adf2:	4798      	blx	r3
 800adf4:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	dd05      	ble.n	800ae08 <lfs_bd_sync+0x50>
 800adfc:	4b05      	ldr	r3, [pc, #20]	; (800ae14 <lfs_bd_sync+0x5c>)
 800adfe:	4a06      	ldr	r2, [pc, #24]	; (800ae18 <lfs_bd_sync+0x60>)
 800ae00:	21c1      	movs	r1, #193	; 0xc1
 800ae02:	4806      	ldr	r0, [pc, #24]	; (800ae1c <lfs_bd_sync+0x64>)
 800ae04:	f016 fa32 	bl	802126c <__assert_func>
    return err;
 800ae08:	697b      	ldr	r3, [r7, #20]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3718      	adds	r7, #24
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	08023314 	.word	0x08023314
 800ae18:	080271e0 	.word	0x080271e0
 800ae1c:	080232e8 	.word	0x080232e8

0800ae20 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b088      	sub	sp, #32
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	607a      	str	r2, [r7, #4]
 800ae2c:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae30:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 800ae32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae34:	f113 0f02 	cmn.w	r3, #2
 800ae38:	d00b      	beq.n	800ae52 <lfs_bd_prog+0x32>
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d305      	bcc.n	800ae52 <lfs_bd_prog+0x32>
 800ae46:	4b47      	ldr	r3, [pc, #284]	; (800af64 <lfs_bd_prog+0x144>)
 800ae48:	4a47      	ldr	r2, [pc, #284]	; (800af68 <lfs_bd_prog+0x148>)
 800ae4a:	21cc      	movs	r1, #204	; 0xcc
 800ae4c:	4847      	ldr	r0, [pc, #284]	; (800af6c <lfs_bd_prog+0x14c>)
 800ae4e:	f016 fa0d 	bl	802126c <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800ae52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae56:	441a      	add	r2, r3
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d977      	bls.n	800af52 <lfs_bd_prog+0x132>
 800ae62:	4b43      	ldr	r3, [pc, #268]	; (800af70 <lfs_bd_prog+0x150>)
 800ae64:	4a40      	ldr	r2, [pc, #256]	; (800af68 <lfs_bd_prog+0x148>)
 800ae66:	21cd      	movs	r1, #205	; 0xcd
 800ae68:	4840      	ldr	r0, [pc, #256]	; (800af6c <lfs_bd_prog+0x14c>)
 800ae6a:	f016 f9ff 	bl	802126c <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d151      	bne.n	800af1c <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 800ae7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d34c      	bcc.n	800af1c <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	685a      	ldr	r2, [r3, #4]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae8c:	4413      	add	r3, r2
                off >= pcache->off &&
 800ae8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d243      	bcs.n	800af1c <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	6859      	ldr	r1, [r3, #4]
 800ae9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea0:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 800aea2:	4413      	add	r3, r2
 800aea4:	4619      	mov	r1, r3
 800aea6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aea8:	f7ff fc98 	bl	800a7dc <lfs_min>
 800aeac:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	68da      	ldr	r2, [r3, #12]
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aeb8:	1acb      	subs	r3, r1, r3
 800aeba:	4413      	add	r3, r2
 800aebc:	69ba      	ldr	r2, [r7, #24]
 800aebe:	69f9      	ldr	r1, [r7, #28]
 800aec0:	4618      	mov	r0, r3
 800aec2:	f016 ff50 	bl	8021d66 <memcpy>

            data += diff;
 800aec6:	69fa      	ldr	r2, [r7, #28]
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	4413      	add	r3, r2
 800aecc:	61fb      	str	r3, [r7, #28]
            off += diff;
 800aece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aed0:	69bb      	ldr	r3, [r7, #24]
 800aed2:	4413      	add	r3, r2
 800aed4:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 800aed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	1ad3      	subs	r3, r2, r3
 800aedc:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	6898      	ldr	r0, [r3, #8]
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aee8:	1ad3      	subs	r3, r2, r3
 800aeea:	4619      	mov	r1, r3
 800aeec:	f7ff fc66 	bl	800a7bc <lfs_max>
 800aef0:	4602      	mov	r2, r0
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	689a      	ldr	r2, [r3, #8]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aefe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af00:	429a      	cmp	r2, r3
 800af02:	d126      	bne.n	800af52 <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800af04:	78fb      	ldrb	r3, [r7, #3]
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	68b9      	ldr	r1, [r7, #8]
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	f7ff fed8 	bl	800acc0 <lfs_bd_flush>
 800af10:	6178      	str	r0, [r7, #20]
                if (err) {
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d01c      	beq.n	800af52 <lfs_bd_prog+0x132>
                    return err;
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	e01e      	b.n	800af5a <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af24:	d005      	beq.n	800af32 <lfs_bd_prog+0x112>
 800af26:	4b13      	ldr	r3, [pc, #76]	; (800af74 <lfs_bd_prog+0x154>)
 800af28:	4a0f      	ldr	r2, [pc, #60]	; (800af68 <lfs_bd_prog+0x148>)
 800af2a:	21ea      	movs	r1, #234	; 0xea
 800af2c:	480f      	ldr	r0, [pc, #60]	; (800af6c <lfs_bd_prog+0x14c>)
 800af2e:	f016 f99d 	bl	802126c <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af36:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af3c:	6a1b      	ldr	r3, [r3, #32]
 800af3e:	4619      	mov	r1, r3
 800af40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af42:	f7ff fc5b 	bl	800a7fc <lfs_aligndown>
 800af46:	4602      	mov	r2, r0
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	2200      	movs	r2, #0
 800af50:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 800af52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af54:	2b00      	cmp	r3, #0
 800af56:	d18a      	bne.n	800ae6e <lfs_bd_prog+0x4e>
    }

    return 0;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3720      	adds	r7, #32
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	08023348 	.word	0x08023348
 800af68:	080271ec 	.word	0x080271ec
 800af6c:	080232e8 	.word	0x080232e8
 800af70:	08023384 	.word	0x08023384
 800af74:	080233a8 	.word	0x080233a8

0800af78 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af88:	683a      	ldr	r2, [r7, #0]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d305      	bcc.n	800af9a <lfs_bd_erase+0x22>
 800af8e:	4b0e      	ldr	r3, [pc, #56]	; (800afc8 <lfs_bd_erase+0x50>)
 800af90:	4a0e      	ldr	r2, [pc, #56]	; (800afcc <lfs_bd_erase+0x54>)
 800af92:	21f8      	movs	r1, #248	; 0xf8
 800af94:	480e      	ldr	r0, [pc, #56]	; (800afd0 <lfs_bd_erase+0x58>)
 800af96:	f016 f969 	bl	802126c <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800afa4:	6839      	ldr	r1, [r7, #0]
 800afa6:	4610      	mov	r0, r2
 800afa8:	4798      	blx	r3
 800afaa:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	dd05      	ble.n	800afbe <lfs_bd_erase+0x46>
 800afb2:	4b08      	ldr	r3, [pc, #32]	; (800afd4 <lfs_bd_erase+0x5c>)
 800afb4:	4a05      	ldr	r2, [pc, #20]	; (800afcc <lfs_bd_erase+0x54>)
 800afb6:	21fa      	movs	r1, #250	; 0xfa
 800afb8:	4805      	ldr	r0, [pc, #20]	; (800afd0 <lfs_bd_erase+0x58>)
 800afba:	f016 f957 	bl	802126c <__assert_func>
    return err;
 800afbe:	68fb      	ldr	r3, [r7, #12]
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	080232c8 	.word	0x080232c8
 800afcc:	080271f8 	.word	0x080271f8
 800afd0:	080232e8 	.word	0x080232e8
 800afd4:	08023314 	.word	0x08023314

0800afd8 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	685a      	ldr	r2, [r3, #4]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	3304      	adds	r3, #4
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	601a      	str	r2, [r3, #0]
}
 800aff6:	bf00      	nop
 800aff8:	3714      	adds	r7, #20
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr

0800b002 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 800b002:	b480      	push	{r7}
 800b004:	b083      	sub	sp, #12
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b012:	d005      	beq.n	800b020 <lfs_pair_isnull+0x1e>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	3304      	adds	r3, #4
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b01e:	d101      	bne.n	800b024 <lfs_pair_isnull+0x22>
 800b020:	2301      	movs	r3, #1
 800b022:	e000      	b.n	800b026 <lfs_pair_isnull+0x24>
 800b024:	2300      	movs	r3, #0
 800b026:	f003 0301 	and.w	r3, r3, #1
 800b02a:	b2db      	uxtb	r3, r3
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	370c      	adds	r7, #12
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800b038:	b480      	push	{r7}
 800b03a:	b083      	sub	sp, #12
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d017      	beq.n	800b07e <lfs_pair_cmp+0x46>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	3304      	adds	r3, #4
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	3304      	adds	r3, #4
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d00f      	beq.n	800b07e <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	3304      	adds	r3, #4
 800b066:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800b068:	429a      	cmp	r2, r3
 800b06a:	d008      	beq.n	800b07e <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	3304      	adds	r3, #4
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800b076:	429a      	cmp	r2, r3
 800b078:	d001      	beq.n	800b07e <lfs_pair_cmp+0x46>
 800b07a:	2301      	movs	r3, #1
 800b07c:	e000      	b.n	800b080 <lfs_pair_cmp+0x48>
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	370c      	adds	r7, #12
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <lfs_pair_sync>:

static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d107      	bne.n	800b0b2 <lfs_pair_sync+0x26>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	3304      	adds	r3, #4
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	3304      	adds	r3, #4
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d00d      	beq.n	800b0ce <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	3304      	adds	r3, #4
 800b0ba:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d108      	bne.n	800b0d2 <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	3304      	adds	r3, #4
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d101      	bne.n	800b0d2 <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	e000      	b.n	800b0d4 <lfs_pair_sync+0x48>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	f003 0301 	and.w	r3, r3, #1
 800b0d8:	b2db      	uxtb	r3, r3
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	370c      	adds	r7, #12
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr

0800b0e6 <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 800b0e6:	b590      	push	{r4, r7, lr}
 800b0e8:	b083      	sub	sp, #12
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7ff fbe2 	bl	800a8bc <lfs_fromle32>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	3304      	adds	r3, #4
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	1d1c      	adds	r4, r3, #4
 800b108:	4610      	mov	r0, r2
 800b10a:	f7ff fbd7 	bl	800a8bc <lfs_fromle32>
 800b10e:	4603      	mov	r3, r0
 800b110:	6023      	str	r3, [r4, #0]
}
 800b112:	bf00      	nop
 800b114:	370c      	adds	r7, #12
 800b116:	46bd      	mov	sp, r7
 800b118:	bd90      	pop	{r4, r7, pc}

0800b11a <lfs_pair_tole32>:

static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 800b11a:	b590      	push	{r4, r7, lr}
 800b11c:	b083      	sub	sp, #12
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4618      	mov	r0, r3
 800b128:	f7ff fbd3 	bl	800a8d2 <lfs_tole32>
 800b12c:	4602      	mov	r2, r0
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	3304      	adds	r3, #4
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	1d1c      	adds	r4, r3, #4
 800b13c:	4610      	mov	r0, r2
 800b13e:	f7ff fbc8 	bl	800a8d2 <lfs_tole32>
 800b142:	4603      	mov	r3, r0
 800b144:	6023      	str	r3, [r4, #0]
}
 800b146:	bf00      	nop
 800b148:	370c      	adds	r7, #12
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd90      	pop	{r4, r7, pc}

0800b14e <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 800b14e:	b480      	push	{r7}
 800b150:	b083      	sub	sp, #12
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	43db      	mvns	r3, r3
 800b15a:	0fdb      	lsrs	r3, r3, #31
 800b15c:	b2db      	uxtb	r3, r3
}
 800b15e:	4618      	mov	r0, r3
 800b160:	370c      	adds	r7, #12
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr

0800b16a <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800b16a:	b480      	push	{r7}
 800b16c:	b083      	sub	sp, #12
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	059b      	lsls	r3, r3, #22
 800b176:	159b      	asrs	r3, r3, #22
 800b178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b17c:	bf0c      	ite	eq
 800b17e:	2301      	moveq	r3, #1
 800b180:	2300      	movne	r3, #0
 800b182:	b2db      	uxtb	r3, r3
}
 800b184:	4618      	mov	r0, r3
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	0d1b      	lsrs	r3, r3, #20
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b1a2:	b29b      	uxth	r3, r3
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	0d1b      	lsrs	r3, r3, #20
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b1c2:	b29b      	uxth	r3, r3
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	0d1b      	lsrs	r3, r3, #20
 800b1dc:	b2db      	uxtb	r3, r3
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	370c      	adds	r7, #12
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr

0800b1ea <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b082      	sub	sp, #8
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f7ff ffec 	bl	800b1d0 <lfs_tag_chunk>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	b25b      	sxtb	r3, r3
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3708      	adds	r7, #8
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	0a9b      	lsrs	r3, r3, #10
 800b210:	b29b      	uxth	r3, r3
 800b212:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b216:	b29b      	uxth	r3, r3
}
 800b218:	4618      	mov	r0, r3
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800b232:	4618      	mov	r0, r3
 800b234:	370c      	adds	r7, #12
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr

0800b23e <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800b23e:	b580      	push	{r7, lr}
 800b240:	b082      	sub	sp, #8
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f7ff ff8f 	bl	800b16a <lfs_tag_isdelete>
 800b24c:	4603      	mov	r3, r0
 800b24e:	461a      	mov	r2, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4413      	add	r3, r2
 800b254:	4618      	mov	r0, r3
 800b256:	f7ff ffe5 	bl	800b224 <lfs_tag_size>
 800b25a:	4603      	mov	r3, r0
 800b25c:	3304      	adds	r3, #4
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800b266:	b480      	push	{r7}
 800b268:	b085      	sub	sp, #20
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
 800b26e:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 800b270:	2300      	movs	r3, #0
 800b272:	60fb      	str	r3, [r7, #12]
 800b274:	e012      	b.n	800b29c <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	4413      	add	r3, r2
 800b27e:	6819      	ldr	r1, [r3, #0]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	683a      	ldr	r2, [r7, #0]
 800b286:	4413      	add	r3, r2
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	4403      	add	r3, r0
 800b292:	404a      	eors	r2, r1
 800b294:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	3301      	adds	r3, #1
 800b29a:	60fb      	str	r3, [r7, #12]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2b02      	cmp	r3, #2
 800b2a0:	dde9      	ble.n	800b276 <lfs_gstate_xor+0x10>
    }
}
 800b2a2:	bf00      	nop
 800b2a4:	bf00      	nop
 800b2a6:	3714      	adds	r7, #20
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 800b2b0:	b480      	push	{r7}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	60fb      	str	r3, [r7, #12]
 800b2bc:	e00b      	b.n	800b2d6 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	4413      	add	r3, r2
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d001      	beq.n	800b2d0 <lfs_gstate_iszero+0x20>
            return false;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	e006      	b.n	800b2de <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	60fb      	str	r3, [r7, #12]
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	ddf0      	ble.n	800b2be <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 800b2dc:	2301      	movs	r3, #1
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3714      	adds	r7, #20
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e8:	4770      	bx	lr

0800b2ea <lfs_gstate_hasorphans>:

static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b082      	sub	sp, #8
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7ff ff94 	bl	800b224 <lfs_tag_size>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	bf14      	ite	ne
 800b302:	2301      	movne	r3, #1
 800b304:	2300      	moveq	r3, #0
 800b306:	b2db      	uxtb	r3, r3
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7ff ff81 	bl	800b224 <lfs_tag_size>
 800b322:	4603      	mov	r3, r0
 800b324:	b2db      	uxtb	r3, r3
}
 800b326:	4618      	mov	r0, r3
 800b328:	3708      	adds	r7, #8
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}

0800b32e <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800b32e:	b580      	push	{r7, lr}
 800b330:	b082      	sub	sp, #8
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7ff ff28 	bl	800b190 <lfs_tag_type1>
 800b340:	4603      	mov	r3, r0
 800b342:	2b00      	cmp	r3, #0
 800b344:	bf14      	ite	ne
 800b346:	2301      	movne	r3, #1
 800b348:	2300      	moveq	r3, #0
 800b34a:	b2db      	uxtb	r3, r3
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3708      	adds	r7, #8
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4618      	mov	r0, r3
 800b364:	f7ff ff14 	bl	800b190 <lfs_tag_type1>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00a      	beq.n	800b384 <lfs_gstate_hasmovehere+0x30>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	3304      	adds	r3, #4
 800b372:	6839      	ldr	r1, [r7, #0]
 800b374:	4618      	mov	r0, r3
 800b376:	f7ff fe5f 	bl	800b038 <lfs_pair_cmp>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d101      	bne.n	800b384 <lfs_gstate_hasmovehere+0x30>
 800b380:	2301      	movs	r3, #1
 800b382:	e000      	b.n	800b386 <lfs_gstate_hasmovehere+0x32>
 800b384:	2300      	movs	r3, #0
 800b386:	f003 0301 	and.w	r3, r3, #1
 800b38a:	b2db      	uxtb	r3, r3
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3708      	adds	r7, #8
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7ff fa8b 	bl	800a8bc <lfs_fromle32>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7ff fa83 	bl	800a8bc <lfs_fromle32>
 800b3b6:	4602      	mov	r2, r0
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7ff fa7b 	bl	800a8bc <lfs_fromle32>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	609a      	str	r2, [r3, #8]
}
 800b3cc:	bf00      	nop
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <lfs_gstate_tole32>:

static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7ff fa76 	bl	800a8d2 <lfs_tole32>
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7ff fa6e 	bl	800a8d2 <lfs_tole32>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	4618      	mov	r0, r3
 800b402:	f7ff fa66 	bl	800a8d2 <lfs_tole32>
 800b406:	4602      	mov	r2, r0
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	609a      	str	r2, [r3, #8]
}
 800b40c:	bf00      	nop
 800b40e:	3708      	adds	r7, #8
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <lfs_ctz_fromle32>:

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4618      	mov	r0, r3
 800b422:	f7ff fa4b 	bl	800a8bc <lfs_fromle32>
 800b426:	4602      	mov	r2, r0
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	4618      	mov	r0, r3
 800b432:	f7ff fa43 	bl	800a8bc <lfs_fromle32>
 800b436:	4602      	mov	r2, r0
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	605a      	str	r2, [r3, #4]
}
 800b43c:	bf00      	nop
 800b43e:	3708      	adds	r7, #8
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4618      	mov	r0, r3
 800b452:	f7ff fa3e 	bl	800a8d2 <lfs_tole32>
 800b456:	4602      	mov	r2, r0
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	4618      	mov	r0, r3
 800b462:	f7ff fa36 	bl	800a8d2 <lfs_tole32>
 800b466:	4602      	mov	r2, r0
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	605a      	str	r2, [r3, #4]
}
 800b46c:	bf00      	nop
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4618      	mov	r0, r3
 800b482:	f7ff fa1b 	bl	800a8bc <lfs_fromle32>
 800b486:	4602      	mov	r2, r0
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	4618      	mov	r0, r3
 800b492:	f7ff fa13 	bl	800a8bc <lfs_fromle32>
 800b496:	4602      	mov	r2, r0
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7ff fa0b 	bl	800a8bc <lfs_fromle32>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7ff fa03 	bl	800a8bc <lfs_fromle32>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	691b      	ldr	r3, [r3, #16]
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f7ff f9fb 	bl	800a8bc <lfs_fromle32>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	695b      	ldr	r3, [r3, #20]
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7ff f9f3 	bl	800a8bc <lfs_fromle32>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	615a      	str	r2, [r3, #20]
}
 800b4dc:	bf00      	nop
 800b4de:	3708      	adds	r7, #8
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <lfs_superblock_tole32>:

static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b082      	sub	sp, #8
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7ff f9ee 	bl	800a8d2 <lfs_tole32>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	4618      	mov	r0, r3
 800b502:	f7ff f9e6 	bl	800a8d2 <lfs_tole32>
 800b506:	4602      	mov	r2, r0
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	4618      	mov	r0, r3
 800b512:	f7ff f9de 	bl	800a8d2 <lfs_tole32>
 800b516:	4602      	mov	r2, r0
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	68db      	ldr	r3, [r3, #12]
 800b520:	4618      	mov	r0, r3
 800b522:	f7ff f9d6 	bl	800a8d2 <lfs_tole32>
 800b526:	4602      	mov	r2, r0
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	4618      	mov	r0, r3
 800b532:	f7ff f9ce 	bl	800a8d2 <lfs_tole32>
 800b536:	4602      	mov	r2, r0
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	695b      	ldr	r3, [r3, #20]
 800b540:	4618      	mov	r0, r3
 800b542:	f7ff f9c6 	bl	800a8d2 <lfs_tole32>
 800b546:	4602      	mov	r2, r0
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	615a      	str	r2, [r3, #20]
}
 800b54c:	bf00      	nop
 800b54e:	3708      	adds	r7, #8
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <lfs_mlist_isopen>:

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800b55e:	1d3b      	adds	r3, r7, #4
 800b560:	60fb      	str	r3, [r7, #12]
 800b562:	e009      	b.n	800b578 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	683a      	ldr	r2, [r7, #0]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d101      	bne.n	800b572 <lfs_mlist_isopen+0x1e>
            return true;
 800b56e:	2301      	movs	r3, #1
 800b570:	e007      	b.n	800b582 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	60fb      	str	r3, [r7, #12]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d1f1      	bne.n	800b564 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3714      	adds	r7, #20
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr

0800b58e <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 800b58e:	b480      	push	{r7}
 800b590:	b085      	sub	sp, #20
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
 800b596:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	3328      	adds	r3, #40	; 0x28
 800b59c:	60fb      	str	r3, [r7, #12]
 800b59e:	e00d      	b.n	800b5bc <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	683a      	ldr	r2, [r7, #0]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d105      	bne.n	800b5b6 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	601a      	str	r2, [r3, #0]
            break;
 800b5b4:	e007      	b.n	800b5c6 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	60fb      	str	r3, [r7, #12]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d1ed      	bne.n	800b5a0 <lfs_mlist_remove+0x12>
        }
    }
}
 800b5c4:	bf00      	nop
 800b5c6:	bf00      	nop
 800b5c8:	3714      	adds	r7, #20
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr

0800b5d2 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 800b5d2:	b480      	push	{r7}
 800b5d4:	b083      	sub	sp, #12
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
 800b5da:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	683a      	ldr	r2, [r7, #0]
 800b5e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b5ea:	bf00      	nop
 800b5ec:	370c      	adds	r7, #12
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr

0800b5f6 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 800b5f6:	b480      	push	{r7}
 800b5f8:	b085      	sub	sp, #20
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
 800b5fe:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b608:	683a      	ldr	r2, [r7, #0]
 800b60a:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b612:	4413      	add	r3, r2
 800b614:	68fa      	ldr	r2, [r7, #12]
 800b616:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b618:	6a92      	ldr	r2, [r2, #40]	; 0x28
    lfs_block_t off = ((block - lfs->free.off)
 800b61a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b61e:	fb01 f202 	mul.w	r2, r1, r2
 800b622:	1a9b      	subs	r3, r3, r2
 800b624:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b62a:	68ba      	ldr	r2, [r7, #8]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d212      	bcs.n	800b656 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	095b      	lsrs	r3, r3, #5
 800b638:	009a      	lsls	r2, r3, #2
 800b63a:	440a      	add	r2, r1
 800b63c:	6811      	ldr	r1, [r2, #0]
 800b63e:	68ba      	ldr	r2, [r7, #8]
 800b640:	f002 021f 	and.w	r2, r2, #31
 800b644:	2001      	movs	r0, #1
 800b646:	fa00 f202 	lsl.w	r2, r0, r2
 800b64a:	68f8      	ldr	r0, [r7, #12]
 800b64c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	4403      	add	r3, r0
 800b652:	430a      	orrs	r2, r1
 800b654:	601a      	str	r2, [r3, #0]
    }

    return 0;
 800b656:	2300      	movs	r3, #0
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3714      	adds	r7, #20
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	661a      	str	r2, [r3, #96]	; 0x60
}
 800b676:	bf00      	nop
 800b678:	370c      	adds	r7, #12
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr

0800b682 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 800b682:	b580      	push	{r7, lr}
 800b684:	b082      	sub	sp, #8
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f7ff ffe4 	bl	800b664 <lfs_alloc_ack>
}
 800b69c:	bf00      	nop
 800b69e:	3708      	adds	r7, #8
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b086      	sub	sp, #24
 800b6a8:	af02      	add	r7, sp, #8
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 800b6ae:	e04f      	b.n	800b750 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6b4:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6ba:	1c5a      	adds	r2, r3, #1
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6c4:	1e5a      	subs	r2, r3, #1
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	095b      	lsrs	r3, r3, #5
 800b6d2:	009b      	lsls	r3, r3, #2
 800b6d4:	4413      	add	r3, r2
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	f003 031f 	and.w	r3, r3, #31
 800b6de:	2101      	movs	r1, #1
 800b6e0:	fa01 f303 	lsl.w	r3, r1, r3
 800b6e4:	4013      	ands	r3, r2
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d132      	bne.n	800b750 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b6f6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b6f8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6fc:	fb01 f202 	mul.w	r2, r1, r2
 800b700:	1a9a      	subs	r2, r3, r2
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 800b706:	e009      	b.n	800b71c <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b70c:	1c5a      	adds	r2, r3, #1
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b716:	1e5a      	subs	r2, r3, #1
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b724:	429a      	cmp	r2, r3
 800b726:	d011      	beq.n	800b74c <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b730:	095b      	lsrs	r3, r3, #5
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	4413      	add	r3, r2
 800b736:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b73c:	f003 031f 	and.w	r3, r3, #31
 800b740:	2101      	movs	r1, #1
 800b742:	fa01 f303 	lsl.w	r3, r1, r3
 800b746:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1dd      	bne.n	800b708 <lfs_alloc+0x64>
                }

                return 0;
 800b74c:	2300      	movs	r3, #0
 800b74e:	e050      	b.n	800b7f2 <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b758:	429a      	cmp	r2, r3
 800b75a:	d1a9      	bne.n	800b6b0 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b760:	2b00      	cmp	r3, #0
 800b762:	d10f      	bne.n	800b784 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b76c:	4413      	add	r3, r2
 800b76e:	4a23      	ldr	r2, [pc, #140]	; (800b7fc <lfs_alloc+0x158>)
 800b770:	9200      	str	r2, [sp, #0]
 800b772:	f44f 720d 	mov.w	r2, #564	; 0x234
 800b776:	4922      	ldr	r1, [pc, #136]	; (800b800 <lfs_alloc+0x15c>)
 800b778:	4822      	ldr	r0, [pc, #136]	; (800b804 <lfs_alloc+0x160>)
 800b77a:	f015 ffcd 	bl	8021718 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 800b77e:	f06f 031b 	mvn.w	r3, #27
 800b782:	e036      	b.n	800b7f2 <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b78c:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b792:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b794:	fbb3 f1f2 	udiv	r1, r3, r2
 800b798:	fb01 f202 	mul.w	r2, r1, r2
 800b79c:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7a8:	00da      	lsls	r2, r3, #3
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	4610      	mov	r0, r2
 800b7b2:	f7ff f813 	bl	800a7dc <lfs_min>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	f016 f9b8 	bl	8021b44 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	490b      	ldr	r1, [pc, #44]	; (800b808 <lfs_alloc+0x164>)
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f004 f8e6 	bl	800f9ac <lfs_fs_rawtraverse>
 800b7e0:	60f8      	str	r0, [r7, #12]
        if (err) {
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	f43f af62 	beq.w	800b6ae <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f7ff ff49 	bl	800b682 <lfs_alloc_drop>
            return err;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3710      	adds	r7, #16
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	080233f4 	.word	0x080233f4
 800b800:	080232e8 	.word	0x080232e8
 800b804:	080233cc 	.word	0x080233cc
 800b808:	0800b5f7 	.word	0x0800b5f7

0800b80c <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 800b80c:	b590      	push	{r4, r7, lr}
 800b80e:	b08f      	sub	sp, #60	; 0x3c
 800b810:	af04      	add	r7, sp, #16
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	607a      	str	r2, [r7, #4]
 800b818:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	691b      	ldr	r3, [r3, #16]
 800b824:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 800b826:	2300      	movs	r3, #0
 800b828:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	333c      	adds	r3, #60	; 0x3c
 800b82e:	68ba      	ldr	r2, [r7, #8]
 800b830:	4611      	mov	r1, r2
 800b832:	4618      	mov	r0, r3
 800b834:	f7ff fd8e 	bl	800b354 <lfs_gstate_hasmovehere>
 800b838:	4603      	mov	r3, r0
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	f000 80ba 	beq.w	800b9b4 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f7ff fcdf 	bl	800b204 <lfs_tag_id>
 800b846:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800b848:	2b00      	cmp	r3, #0
 800b84a:	f000 80b3 	beq.w	800b9b4 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b852:	4618      	mov	r0, r3
 800b854:	f7ff fcd6 	bl	800b204 <lfs_tag_id>
 800b858:	4603      	mov	r3, r0
 800b85a:	461c      	mov	r4, r3
 800b85c:	6838      	ldr	r0, [r7, #0]
 800b85e:	f7ff fcd1 	bl	800b204 <lfs_tag_id>
 800b862:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 800b864:	429c      	cmp	r4, r3
 800b866:	f200 80a5 	bhi.w	800b9b4 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 800b86a:	6a3b      	ldr	r3, [r7, #32]
 800b86c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800b870:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800b872:	e09f      	b.n	800b9b4 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	4618      	mov	r0, r3
 800b878:	f7ff fce1 	bl	800b23e <lfs_tag_dsize>
 800b87c:	4602      	mov	r2, r0
 800b87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b880:	1a9b      	subs	r3, r3, r2
 800b882:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 800b888:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 800b88e:	2204      	movs	r2, #4
 800b890:	9203      	str	r2, [sp, #12]
 800b892:	f107 0210 	add.w	r2, r7, #16
 800b896:	9202      	str	r2, [sp, #8]
 800b898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b89a:	9201      	str	r2, [sp, #4]
 800b89c:	9300      	str	r3, [sp, #0]
 800b89e:	2304      	movs	r3, #4
 800b8a0:	460a      	mov	r2, r1
 800b8a2:	2100      	movs	r1, #0
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f7ff f875 	bl	800a994 <lfs_bd_read>
 800b8aa:	61b8      	str	r0, [r7, #24]
        if (err) {
 800b8ac:	69bb      	ldr	r3, [r7, #24]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d001      	beq.n	800b8b6 <lfs_dir_getslice+0xaa>
            return err;
 800b8b2:	69bb      	ldr	r3, [r7, #24]
 800b8b4:	e08a      	b.n	800b9cc <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7ff f816 	bl	800a8ea <lfs_frombe32>
 800b8be:	4602      	mov	r2, r0
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	4053      	eors	r3, r2
 800b8c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b8c8:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f7ff fc9a 	bl	800b204 <lfs_tag_id>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d02b      	beq.n	800b92e <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800b8d6:	69f8      	ldr	r0, [r7, #28]
 800b8d8:	f7ff fc5a 	bl	800b190 <lfs_tag_type1>
 800b8dc:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 800b8de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8e2:	d124      	bne.n	800b92e <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 800b8e4:	69f8      	ldr	r0, [r7, #28]
 800b8e6:	f7ff fc8d 	bl	800b204 <lfs_tag_id>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	461c      	mov	r4, r3
 800b8ee:	6a3b      	ldr	r3, [r7, #32]
 800b8f0:	683a      	ldr	r2, [r7, #0]
 800b8f2:	1ad3      	subs	r3, r2, r3
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7ff fc85 	bl	800b204 <lfs_tag_id>
 800b8fa:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800b8fc:	429c      	cmp	r4, r3
 800b8fe:	d816      	bhi.n	800b92e <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 800b900:	6a3b      	ldr	r3, [r7, #32]
 800b902:	683a      	ldr	r2, [r7, #0]
 800b904:	1ad2      	subs	r2, r2, r3
 800b906:	4b33      	ldr	r3, [pc, #204]	; (800b9d4 <lfs_dir_getslice+0x1c8>)
 800b908:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800b90a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b90e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b912:	69fa      	ldr	r2, [r7, #28]
 800b914:	429a      	cmp	r2, r3
 800b916:	d102      	bne.n	800b91e <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 800b918:	f06f 0301 	mvn.w	r3, #1
 800b91c:	e056      	b.n	800b9cc <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800b91e:	69f8      	ldr	r0, [r7, #28]
 800b920:	f7ff fc63 	bl	800b1ea <lfs_tag_splice>
 800b924:	4603      	mov	r3, r0
 800b926:	029a      	lsls	r2, r3, #10
 800b928:	6a3b      	ldr	r3, [r7, #32]
 800b92a:	4413      	add	r3, r2
 800b92c:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	401a      	ands	r2, r3
 800b934:	6a3b      	ldr	r3, [r7, #32]
 800b936:	6839      	ldr	r1, [r7, #0]
 800b938:	1ac9      	subs	r1, r1, r3
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	400b      	ands	r3, r1
 800b93e:	429a      	cmp	r2, r3
 800b940:	d138      	bne.n	800b9b4 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 800b942:	69f8      	ldr	r0, [r7, #28]
 800b944:	f7ff fc11 	bl	800b16a <lfs_tag_isdelete>
 800b948:	4603      	mov	r3, r0
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d002      	beq.n	800b954 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 800b94e:	f06f 0301 	mvn.w	r3, #1
 800b952:	e03b      	b.n	800b9cc <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 800b954:	69f8      	ldr	r0, [r7, #28]
 800b956:	f7ff fc65 	bl	800b224 <lfs_tag_size>
 800b95a:	4603      	mov	r3, r0
 800b95c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b95e:	4618      	mov	r0, r3
 800b960:	f7fe ff3c 	bl	800a7dc <lfs_min>
 800b964:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 800b966:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b96e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b970:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 800b972:	3204      	adds	r2, #4
 800b974:	6979      	ldr	r1, [r7, #20]
 800b976:	9103      	str	r1, [sp, #12]
 800b978:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b97a:	9102      	str	r1, [sp, #8]
 800b97c:	9201      	str	r2, [sp, #4]
 800b97e:	9300      	str	r3, [sp, #0]
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	4602      	mov	r2, r0
 800b984:	2100      	movs	r1, #0
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f7ff f804 	bl	800a994 <lfs_bd_read>
 800b98c:	61b8      	str	r0, [r7, #24]
            if (err) {
 800b98e:	69bb      	ldr	r3, [r7, #24]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d001      	beq.n	800b998 <lfs_dir_getslice+0x18c>
                return err;
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	e019      	b.n	800b9cc <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 800b998:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	18d0      	adds	r0, r2, r3
 800b99e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	1ad3      	subs	r3, r2, r3
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	f016 f8cc 	bl	8021b44 <memset>

            return tag + gdiff;
 800b9ac:	6a3a      	ldr	r2, [r7, #32]
 800b9ae:	69fb      	ldr	r3, [r7, #28]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	e00b      	b.n	800b9cc <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7ff fc41 	bl	800b23e <lfs_tag_dsize>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	3304      	adds	r3, #4
 800b9c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	f4bf af56 	bcs.w	800b874 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 800b9c8:	f06f 0301 	mvn.w	r3, #1
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	372c      	adds	r7, #44	; 0x2c
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd90      	pop	{r4, r7, pc}
 800b9d4:	000ffc00 	.word	0x000ffc00

0800b9d8 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b088      	sub	sp, #32
 800b9dc:	af04      	add	r7, sp, #16
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	607a      	str	r2, [r7, #4]
 800b9e4:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800b9e6:	6838      	ldr	r0, [r7, #0]
 800b9e8:	f7ff fc1c 	bl	800b224 <lfs_tag_size>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	9302      	str	r3, [sp, #8]
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	9301      	str	r3, [sp, #4]
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	68b9      	ldr	r1, [r7, #8]
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f7ff ff04 	bl	800b80c <lfs_dir_getslice>
 800ba04:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b08c      	sub	sp, #48	; 0x30
 800ba12:	af04      	add	r7, sp, #16
 800ba14:	60f8      	str	r0, [r7, #12]
 800ba16:	60b9      	str	r1, [r7, #8]
 800ba18:	607a      	str	r2, [r7, #4]
 800ba1a:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800ba1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1e:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 800ba20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba24:	441a      	add	r2, r3
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	f240 80c0 	bls.w	800bbb2 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 800ba32:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800ba36:	e0c1      	b.n	800bbbc <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800ba38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba3a:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d03f      	beq.n	800bac2 <lfs_dir_getread+0xb4>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f113 0f02 	cmn.w	r3, #2
 800ba4a:	d13a      	bne.n	800bac2 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	685a      	ldr	r2, [r3, #4]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800ba56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d232      	bcs.n	800bac2 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d324      	bcc.n	800bab0 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	689a      	ldr	r2, [r3, #8]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6859      	ldr	r1, [r3, #4]
 800ba6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba70:	1acb      	subs	r3, r1, r3
 800ba72:	4413      	add	r3, r2
 800ba74:	4619      	mov	r1, r3
 800ba76:	69b8      	ldr	r0, [r7, #24]
 800ba78:	f7fe feb0 	bl	800a7dc <lfs_min>
 800ba7c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	68da      	ldr	r2, [r3, #12]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ba88:	1acb      	subs	r3, r1, r3
 800ba8a:	4413      	add	r3, r2
 800ba8c:	69ba      	ldr	r2, [r7, #24]
 800ba8e:	4619      	mov	r1, r3
 800ba90:	69f8      	ldr	r0, [r7, #28]
 800ba92:	f016 f968 	bl	8021d66 <memcpy>

                data += diff;
 800ba96:	69fa      	ldr	r2, [r7, #28]
 800ba98:	69bb      	ldr	r3, [r7, #24]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	61fb      	str	r3, [r7, #28]
                off += diff;
 800ba9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	4413      	add	r3, r2
 800baa4:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800baa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	1ad3      	subs	r3, r2, r3
 800baac:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800baae:	e080      	b.n	800bbb2 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	685a      	ldr	r2, [r3, #4]
 800bab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bab6:	1ad3      	subs	r3, r2, r3
 800bab8:	4619      	mov	r1, r3
 800baba:	69b8      	ldr	r0, [r7, #24]
 800babc:	f7fe fe8e 	bl	800a7dc <lfs_min>
 800bac0:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f113 0f02 	cmn.w	r3, #2
 800baca:	d13a      	bne.n	800bb42 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	685a      	ldr	r2, [r3, #4]
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	689b      	ldr	r3, [r3, #8]
 800bad4:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 800bad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bad8:	429a      	cmp	r2, r3
 800bada:	d232      	bcs.n	800bb42 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d324      	bcc.n	800bb30 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	689a      	ldr	r2, [r3, #8]
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	6859      	ldr	r1, [r3, #4]
 800baee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baf0:	1acb      	subs	r3, r1, r3
 800baf2:	4413      	add	r3, r2
 800baf4:	4619      	mov	r1, r3
 800baf6:	69b8      	ldr	r0, [r7, #24]
 800baf8:	f7fe fe70 	bl	800a7dc <lfs_min>
 800bafc:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	68da      	ldr	r2, [r3, #12]
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bb08:	1acb      	subs	r3, r1, r3
 800bb0a:	4413      	add	r3, r2
 800bb0c:	69ba      	ldr	r2, [r7, #24]
 800bb0e:	4619      	mov	r1, r3
 800bb10:	69f8      	ldr	r0, [r7, #28]
 800bb12:	f016 f928 	bl	8021d66 <memcpy>

                data += diff;
 800bb16:	69fa      	ldr	r2, [r7, #28]
 800bb18:	69bb      	ldr	r3, [r7, #24]
 800bb1a:	4413      	add	r3, r2
 800bb1c:	61fb      	str	r3, [r7, #28]
                off += diff;
 800bb1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb20:	69bb      	ldr	r3, [r7, #24]
 800bb22:	4413      	add	r3, r2
 800bb24:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800bb26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb28:	69bb      	ldr	r3, [r7, #24]
 800bb2a:	1ad3      	subs	r3, r2, r3
 800bb2c:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800bb2e:	e040      	b.n	800bbb2 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	685a      	ldr	r2, [r3, #4]
 800bb34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb36:	1ad3      	subs	r3, r2, r3
 800bb38:	4619      	mov	r1, r3
 800bb3a:	69b8      	ldr	r0, [r7, #24]
 800bb3c:	f7fe fe4e 	bl	800a7dc <lfs_min>
 800bb40:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	f06f 0201 	mvn.w	r2, #1
 800bb48:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb4e:	69db      	ldr	r3, [r3, #28]
 800bb50:	4619      	mov	r1, r3
 800bb52:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bb54:	f7fe fe52 	bl	800a7fc <lfs_aligndown>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800bb5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb62:	441a      	add	r2, r3
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb68:	69db      	ldr	r3, [r3, #28]
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	4610      	mov	r0, r2
 800bb6e:	f7fe fe5a 	bl	800a826 <lfs_alignup>
 800bb72:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	4610      	mov	r0, r2
 800bb7e:	f7fe fe2d 	bl	800a7dc <lfs_min>
 800bb82:	4602      	mov	r2, r0
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800bb8c:	683a      	ldr	r2, [r7, #0]
 800bb8e:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800bb90:	6839      	ldr	r1, [r7, #0]
 800bb92:	6889      	ldr	r1, [r1, #8]
 800bb94:	9102      	str	r1, [sp, #8]
 800bb96:	9201      	str	r2, [sp, #4]
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb9e:	68b9      	ldr	r1, [r7, #8]
 800bba0:	68f8      	ldr	r0, [r7, #12]
 800bba2:	f7ff fe33 	bl	800b80c <lfs_dir_getslice>
 800bba6:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	da01      	bge.n	800bbb2 <lfs_dir_getread+0x1a4>
            return err;
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	e004      	b.n	800bbbc <lfs_dir_getread+0x1ae>
    while (size > 0) {
 800bbb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	f47f af3f 	bne.w	800ba38 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 800bbba:	2300      	movs	r3, #0
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3720      	adds	r7, #32
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 800bbc4:	b590      	push	{r4, r7, lr}
 800bbc6:	b087      	sub	sp, #28
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	60f8      	str	r0, [r7, #12]
 800bbcc:	60b9      	str	r1, [r7, #8]
 800bbce:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d001      	beq.n	800bbe2 <lfs_dir_traverse_filter+0x1e>
 800bbde:	4b23      	ldr	r3, [pc, #140]	; (800bc6c <lfs_dir_traverse_filter+0xa8>)
 800bbe0:	e000      	b.n	800bbe4 <lfs_dir_traverse_filter+0x20>
 800bbe2:	4b23      	ldr	r3, [pc, #140]	; (800bc70 <lfs_dir_traverse_filter+0xac>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800bbe4:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	405a      	eors	r2, r3
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	4013      	ands	r3, r2
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d014      	beq.n	800bc20 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7ff fab5 	bl	800b16a <lfs_tag_isdelete>
 800bc00:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d10c      	bne.n	800bc20 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	4a18      	ldr	r2, [pc, #96]	; (800bc6c <lfs_dir_traverse_filter+0xa8>)
 800bc0a:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	6819      	ldr	r1, [r3, #0]
 800bc10:	4b18      	ldr	r3, [pc, #96]	; (800bc74 <lfs_dir_traverse_filter+0xb0>)
 800bc12:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800bc14:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800bc18:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d101      	bne.n	800bc24 <lfs_dir_traverse_filter+0x60>
        return true;
 800bc20:	2301      	movs	r3, #1
 800bc22:	e01e      	b.n	800bc62 <lfs_dir_traverse_filter+0x9e>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800bc24:	68b8      	ldr	r0, [r7, #8]
 800bc26:	f7ff fab3 	bl	800b190 <lfs_tag_type1>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc30:	d116      	bne.n	800bc60 <lfs_dir_traverse_filter+0x9c>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 800bc32:	68b8      	ldr	r0, [r7, #8]
 800bc34:	f7ff fae6 	bl	800b204 <lfs_tag_id>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	461c      	mov	r4, r3
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7ff fadf 	bl	800b204 <lfs_tag_id>
 800bc46:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800bc48:	429c      	cmp	r4, r3
 800bc4a:	d809      	bhi.n	800bc60 <lfs_dir_traverse_filter+0x9c>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800bc4c:	68b8      	ldr	r0, [r7, #8]
 800bc4e:	f7ff facc 	bl	800b1ea <lfs_tag_splice>
 800bc52:	4603      	mov	r3, r0
 800bc54:	029a      	lsls	r2, r3, #10
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	441a      	add	r2, r3
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	601a      	str	r2, [r3, #0]
    }

    return false;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	371c      	adds	r7, #28
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd90      	pop	{r4, r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	7ffffc00 	.word	0x7ffffc00
 800bc70:	700ffc00 	.word	0x700ffc00
 800bc74:	000ffc00 	.word	0x000ffc00

0800bc78 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800bc78:	b590      	push	{r4, r7, lr}
 800bc7a:	b09d      	sub	sp, #116	; 0x74
 800bc7c:	af0a      	add	r7, sp, #40	; 0x28
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	607a      	str	r2, [r7, #4]
 800bc84:	603b      	str	r3, [r7, #0]
    // iterate over directory and attrs
    while (true) {
        lfs_tag_t tag;
        const void *buffer;
        struct lfs_diskoff disk;
        if (off+lfs_tag_dsize(ptag) < dir->off) {
 800bc86:	6838      	ldr	r0, [r7, #0]
 800bc88:	f7ff fad9 	bl	800b23e <lfs_tag_dsize>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	441a      	add	r2, r3
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d233      	bcs.n	800bd02 <lfs_dir_traverse+0x8a>
            off += lfs_tag_dsize(ptag);
 800bc9a:	6838      	ldr	r0, [r7, #0]
 800bc9c:	f7ff facf 	bl	800b23e <lfs_tag_dsize>
 800bca0:	4602      	mov	r2, r0
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	4413      	add	r3, r2
 800bca6:	607b      	str	r3, [r7, #4]
            int err = lfs_bd_read(lfs,
 800bca8:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, sizeof(tag),
                    dir->pair[0], off, &tag, sizeof(tag));
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	681b      	ldr	r3, [r3, #0]
            int err = lfs_bd_read(lfs,
 800bcae:	2204      	movs	r2, #4
 800bcb0:	9203      	str	r2, [sp, #12]
 800bcb2:	f107 021c 	add.w	r2, r7, #28
 800bcb6:	9202      	str	r2, [sp, #8]
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	9201      	str	r2, [sp, #4]
 800bcbc:	9300      	str	r3, [sp, #0]
 800bcbe:	2304      	movs	r3, #4
 800bcc0:	460a      	mov	r2, r1
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	68f8      	ldr	r0, [r7, #12]
 800bcc6:	f7fe fe65 	bl	800a994 <lfs_bd_read>
 800bcca:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (err) {
 800bccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d001      	beq.n	800bcd6 <lfs_dir_traverse+0x5e>
                return err;
 800bcd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcd4:	e11e      	b.n	800bf14 <lfs_dir_traverse+0x29c>
            }

            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7fe fe06 	bl	800a8ea <lfs_frombe32>
 800bcde:	4602      	mov	r2, r0
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	4053      	eors	r3, r2
 800bce4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bce8:	61fb      	str	r3, [r7, #28]
            disk.block = dir->pair[0];
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	617b      	str	r3, [r7, #20]
            disk.off = off+sizeof(lfs_tag_t);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	3304      	adds	r3, #4
 800bcf4:	61bb      	str	r3, [r7, #24]
            buffer = &disk;
 800bcf6:	f107 0314 	add.w	r3, r7, #20
 800bcfa:	647b      	str	r3, [r7, #68]	; 0x44
            ptag = tag;
 800bcfc:	69fb      	ldr	r3, [r7, #28]
 800bcfe:	603b      	str	r3, [r7, #0]
 800bd00:	e011      	b.n	800bd26 <lfs_dir_traverse+0xae>
        } else if (attrcount > 0) {
 800bd02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	dd0c      	ble.n	800bd22 <lfs_dir_traverse+0xaa>
            tag = attrs[0].tag;
 800bd08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	61fb      	str	r3, [r7, #28]
            buffer = attrs[0].buffer;
 800bd0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	647b      	str	r3, [r7, #68]	; 0x44
            attrs += 1;
 800bd14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd16:	3308      	adds	r3, #8
 800bd18:	65bb      	str	r3, [r7, #88]	; 0x58
            attrcount -= 1;
 800bd1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd1c:	3b01      	subs	r3, #1
 800bd1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd20:	e001      	b.n	800bd26 <lfs_dir_traverse+0xae>
        } else {
            return 0;
 800bd22:	2300      	movs	r3, #0
 800bd24:	e0f6      	b.n	800bf14 <lfs_dir_traverse+0x29c>
        }

        lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800bd26:	4b7d      	ldr	r3, [pc, #500]	; (800bf1c <lfs_dir_traverse+0x2a4>)
 800bd28:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800bd2a:	69fa      	ldr	r2, [r7, #28]
 800bd2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd2e:	405a      	eors	r2, r3
 800bd30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd34:	400b      	ands	r3, r1
 800bd36:	4013      	ands	r3, r2
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	f040 80e5 	bne.w	800bf08 <lfs_dir_traverse+0x290>
            continue;
        }

        // do we need to filter? inlining the filtering logic here allows
        // for some minor optimizations
        if (lfs_tag_id(tmask) != 0) {
 800bd3e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800bd40:	f7ff fa60 	bl	800b204 <lfs_tag_id>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d038      	beq.n	800bdbc <lfs_dir_traverse+0x144>
            // scan for duplicates and update tag based on creates/deletes
            int filter = lfs_dir_traverse(lfs,
 800bd4a:	f107 031c 	add.w	r3, r7, #28
 800bd4e:	9308      	str	r3, [sp, #32]
 800bd50:	4b73      	ldr	r3, [pc, #460]	; (800bf20 <lfs_dir_traverse+0x2a8>)
 800bd52:	9307      	str	r3, [sp, #28]
 800bd54:	2300      	movs	r3, #0
 800bd56:	9306      	str	r3, [sp, #24]
 800bd58:	2300      	movs	r3, #0
 800bd5a:	9305      	str	r3, [sp, #20]
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	9304      	str	r3, [sp, #16]
 800bd60:	2300      	movs	r3, #0
 800bd62:	9303      	str	r3, [sp, #12]
 800bd64:	2300      	movs	r3, #0
 800bd66:	9302      	str	r3, [sp, #8]
 800bd68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd6a:	9301      	str	r3, [sp, #4]
 800bd6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	68b9      	ldr	r1, [r7, #8]
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	f7ff ff7e 	bl	800bc78 <lfs_dir_traverse>
 800bd7c:	6378      	str	r0, [r7, #52]	; 0x34
                    dir, off, ptag, attrs, attrcount,
                    0, 0, 0, 0, 0,
                    lfs_dir_traverse_filter, &tag);
            if (filter < 0) {
 800bd7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	da01      	bge.n	800bd88 <lfs_dir_traverse+0x110>
                return filter;
 800bd84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd86:	e0c5      	b.n	800bf14 <lfs_dir_traverse+0x29c>
            }

            if (filter) {
 800bd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	f040 80be 	bne.w	800bf0c <lfs_dir_traverse+0x294>
                continue;
            }

            // in filter range?
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800bd90:	69fb      	ldr	r3, [r7, #28]
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7ff fa36 	bl	800b204 <lfs_tag_id>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800bda0:	4293      	cmp	r3, r2
 800bda2:	f200 80b5 	bhi.w	800bf10 <lfs_dir_traverse+0x298>
 800bda6:	69fb      	ldr	r3, [r7, #28]
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7ff fa2b 	bl	800b204 <lfs_tag_id>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	f240 80aa 	bls.w	800bf10 <lfs_dir_traverse+0x298>
                continue;
            }
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7ff f9f6 	bl	800b1b0 <lfs_tag_type3>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	f43f af5d 	beq.w	800bc86 <lfs_dir_traverse+0xe>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7ff f9ee 	bl	800b1b0 <lfs_tag_type3>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	f240 1301 	movw	r3, #257	; 0x101
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d136      	bne.n	800be4e <lfs_dir_traverse+0x1d6>
            uint16_t fromid = lfs_tag_size(tag);
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7ff fa1e 	bl	800b224 <lfs_tag_size>
 800bde8:	4603      	mov	r3, r0
 800bdea:	84fb      	strh	r3, [r7, #38]	; 0x26
            uint16_t toid = lfs_tag_id(tag);
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7ff fa08 	bl	800b204 <lfs_tag_id>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	84bb      	strh	r3, [r7, #36]	; 0x24
            int err = lfs_dir_traverse(lfs,
 800bdf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	b29b      	uxth	r3, r3
                    buffer, 0, 0xffffffff, NULL, 0,
                    LFS_MKTAG(0x600, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0),
                    fromid, fromid+1, toid-fromid+diff,
 800bdfe:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800be00:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800be02:	1a8a      	subs	r2, r1, r2
 800be04:	b291      	uxth	r1, r2
 800be06:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 800be0a:	440a      	add	r2, r1
 800be0c:	b292      	uxth	r2, r2
            int err = lfs_dir_traverse(lfs,
 800be0e:	b212      	sxth	r2, r2
 800be10:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800be12:	9108      	str	r1, [sp, #32]
 800be14:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800be16:	9107      	str	r1, [sp, #28]
 800be18:	9206      	str	r2, [sp, #24]
 800be1a:	9305      	str	r3, [sp, #20]
 800be1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be1e:	9304      	str	r3, [sp, #16]
 800be20:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800be24:	9303      	str	r3, [sp, #12]
 800be26:	4b3f      	ldr	r3, [pc, #252]	; (800bf24 <lfs_dir_traverse+0x2ac>)
 800be28:	9302      	str	r3, [sp, #8]
 800be2a:	2300      	movs	r3, #0
 800be2c:	9301      	str	r3, [sp, #4]
 800be2e:	2300      	movs	r3, #0
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be36:	2200      	movs	r2, #0
 800be38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f7ff ff1c 	bl	800bc78 <lfs_dir_traverse>
 800be40:	6238      	str	r0, [r7, #32]
                    cb, data);
            if (err) {
 800be42:	6a3b      	ldr	r3, [r7, #32]
 800be44:	2b00      	cmp	r3, #0
 800be46:	f43f af1e 	beq.w	800bc86 <lfs_dir_traverse+0xe>
                return err;
 800be4a:	6a3b      	ldr	r3, [r7, #32]
 800be4c:	e062      	b.n	800bf14 <lfs_dir_traverse+0x29c>
            }
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800be4e:	69fb      	ldr	r3, [r7, #28]
 800be50:	4618      	mov	r0, r3
 800be52:	f7ff f9ad 	bl	800b1b0 <lfs_tag_type3>
 800be56:	4603      	mov	r3, r0
 800be58:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800be5c:	d144      	bne.n	800bee8 <lfs_dir_traverse+0x270>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800be5e:	2300      	movs	r3, #0
 800be60:	643b      	str	r3, [r7, #64]	; 0x40
 800be62:	e038      	b.n	800bed6 <lfs_dir_traverse+0x25e>
                const struct lfs_attr *a = buffer;
 800be64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be66:	62fb      	str	r3, [r7, #44]	; 0x2c
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800be68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be6a:	4613      	mov	r3, r2
 800be6c:	005b      	lsls	r3, r3, #1
 800be6e:	4413      	add	r3, r2
 800be70:	009b      	lsls	r3, r3, #2
 800be72:	461a      	mov	r2, r3
 800be74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be76:	4413      	add	r3, r2
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800be7e:	051c      	lsls	r4, r3, #20
 800be80:	69fb      	ldr	r3, [r7, #28]
 800be82:	4618      	mov	r0, r3
 800be84:	f7ff f9be 	bl	800b204 <lfs_tag_id>
 800be88:	4603      	mov	r3, r0
 800be8a:	461a      	mov	r2, r3
 800be8c:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800be90:	4413      	add	r3, r2
 800be92:	029b      	lsls	r3, r3, #10
 800be94:	ea44 0103 	orr.w	r1, r4, r3
 800be98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be9a:	4613      	mov	r3, r2
 800be9c:	005b      	lsls	r3, r3, #1
 800be9e:	4413      	add	r3, r2
 800bea0:	009b      	lsls	r3, r3, #2
 800bea2:	461a      	mov	r2, r3
 800bea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea6:	4413      	add	r3, r2
 800bea8:	689b      	ldr	r3, [r3, #8]
 800beaa:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 800beac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800beae:	4613      	mov	r3, r2
 800beb0:	005b      	lsls	r3, r3, #1
 800beb2:	4413      	add	r3, r2
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	461a      	mov	r2, r3
 800beb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beba:	4413      	add	r3, r2
 800bebc:	685a      	ldr	r2, [r3, #4]
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800bebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bec0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800bec2:	4798      	blx	r3
 800bec4:	62b8      	str	r0, [r7, #40]	; 0x28
                if (err) {
 800bec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d001      	beq.n	800bed0 <lfs_dir_traverse+0x258>
                    return err;
 800becc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bece:	e021      	b.n	800bf14 <lfs_dir_traverse+0x29c>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800bed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bed2:	3301      	adds	r3, #1
 800bed4:	643b      	str	r3, [r7, #64]	; 0x40
 800bed6:	69fb      	ldr	r3, [r7, #28]
 800bed8:	4618      	mov	r0, r3
 800beda:	f7ff f9a3 	bl	800b224 <lfs_tag_size>
 800bede:	4602      	mov	r2, r0
 800bee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d3be      	bcc.n	800be64 <lfs_dir_traverse+0x1ec>
 800bee6:	e6ce      	b.n	800bc86 <lfs_dir_traverse+0xe>
                }
            }
        } else {
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800bee8:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800beec:	029a      	lsls	r2, r3, #10
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	18d1      	adds	r1, r2, r3
 800bef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bef4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bef6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800bef8:	4798      	blx	r3
 800befa:	6338      	str	r0, [r7, #48]	; 0x30
            if (err) {
 800befc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befe:	2b00      	cmp	r3, #0
 800bf00:	f43f aec1 	beq.w	800bc86 <lfs_dir_traverse+0xe>
                return err;
 800bf04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf06:	e005      	b.n	800bf14 <lfs_dir_traverse+0x29c>
            continue;
 800bf08:	bf00      	nop
 800bf0a:	e6bc      	b.n	800bc86 <lfs_dir_traverse+0xe>
                continue;
 800bf0c:	bf00      	nop
 800bf0e:	e6ba      	b.n	800bc86 <lfs_dir_traverse+0xe>
                continue;
 800bf10:	bf00      	nop
    while (true) {
 800bf12:	e6b8      	b.n	800bc86 <lfs_dir_traverse+0xe>
            }
        }
    }
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	374c      	adds	r7, #76	; 0x4c
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd90      	pop	{r4, r7, pc}
 800bf1c:	7ff00000 	.word	0x7ff00000
 800bf20:	0800bbc5 	.word	0x0800bbc5
 800bf24:	600ffc00 	.word	0x600ffc00

0800bf28 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800bf28:	b590      	push	{r4, r7, lr}
 800bf2a:	b09f      	sub	sp, #124	; 0x7c
 800bf2c:	af04      	add	r7, sp, #16
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	60b9      	str	r1, [r7, #8]
 800bf32:	607a      	str	r2, [r7, #4]
 800bf34:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 800bf36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf3a:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681a      	ldr	r2, [r3, #0]
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d207      	bcs.n	800bf5a <lfs_dir_fetchmatch+0x32>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	3304      	adds	r3, #4
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d302      	bcc.n	800bf60 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 800bf5a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800bf5e:	e340      	b.n	800c5e2 <lfs_dir_fetchmatch+0x6ba>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 800bf60:	2300      	movs	r3, #0
 800bf62:	633b      	str	r3, [r7, #48]	; 0x30
 800bf64:	2300      	movs	r3, #0
 800bf66:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf70:	e052      	b.n	800c018 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 800bf72:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800bf74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	687a      	ldr	r2, [r7, #4]
 800bf7a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800bf7c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800bf7e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800bf82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bf84:	0092      	lsls	r2, r2, #2
 800bf86:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 800bf88:	2104      	movs	r1, #4
 800bf8a:	9103      	str	r1, [sp, #12]
 800bf8c:	9202      	str	r2, [sp, #8]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	9201      	str	r2, [sp, #4]
 800bf92:	9300      	str	r3, [sp, #0]
 800bf94:	2304      	movs	r3, #4
 800bf96:	4602      	mov	r2, r0
 800bf98:	2100      	movs	r1, #0
 800bf9a:	68f8      	ldr	r0, [r7, #12]
 800bf9c:	f7fe fcfa 	bl	800a994 <lfs_bd_read>
 800bfa0:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 800bfa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	3368      	adds	r3, #104	; 0x68
 800bfa8:	443b      	add	r3, r7
 800bfaa:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7fe fc84 	bl	800a8bc <lfs_fromle32>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	3368      	adds	r3, #104	; 0x68
 800bfbc:	443b      	add	r3, r7
 800bfbe:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 800bfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d005      	beq.n	800bfd4 <lfs_dir_fetchmatch+0xac>
 800bfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfca:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800bfce:	d001      	beq.n	800bfd4 <lfs_dir_fetchmatch+0xac>
            return err;
 800bfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd2:	e306      	b.n	800c5e2 <lfs_dir_fetchmatch+0x6ba>
        }

        if (err != LFS_ERR_CORRUPT &&
 800bfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800bfda:	d01a      	beq.n	800c012 <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 800bfdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	3368      	adds	r3, #104	; 0x68
 800bfe2:	443b      	add	r3, r7
 800bfe4:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800bfe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfea:	3301      	adds	r3, #1
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f003 0301 	and.w	r3, r3, #1
 800bff2:	bfb8      	it	lt
 800bff4:	425b      	neglt	r3, r3
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	3368      	adds	r3, #104	; 0x68
 800bffa:	443b      	add	r3, r7
 800bffc:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800c000:	4619      	mov	r1, r3
 800c002:	4610      	mov	r0, r2
 800c004:	f7fe fc4c 	bl	800a8a0 <lfs_scmp>
 800c008:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	dd01      	ble.n	800c012 <lfs_dir_fetchmatch+0xea>
            r = i;
 800c00e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c010:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 800c012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c014:	3301      	adds	r3, #1
 800c016:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c018:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	dda9      	ble.n	800bf72 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800c01e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c020:	2b00      	cmp	r3, #0
 800c022:	f003 0301 	and.w	r3, r3, #1
 800c026:	bfb8      	it	lt
 800c028:	425b      	neglt	r3, r3
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	4413      	add	r3, r2
 800c030:	681a      	ldr	r2, [r3, #0]
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800c036:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c038:	3301      	adds	r3, #1
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	f003 0301 	and.w	r3, r3, #1
 800c040:	bfb8      	it	lt
 800c042:	425b      	neglt	r3, r3
 800c044:	009b      	lsls	r3, r3, #2
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	4413      	add	r3, r2
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 800c050:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c052:	2b00      	cmp	r3, #0
 800c054:	f003 0301 	and.w	r3, r3, #1
 800c058:	bfb8      	it	lt
 800c05a:	425b      	neglt	r3, r3
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	3368      	adds	r3, #104	; 0x68
 800c060:	443b      	add	r3, r7
 800c062:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	2200      	movs	r2, #0
 800c06e:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 800c070:	2300      	movs	r3, #0
 800c072:	65bb      	str	r3, [r7, #88]	; 0x58
 800c074:	e2a1      	b.n	800c5ba <lfs_dir_fetchmatch+0x692>
        lfs_off_t off = 0;
 800c076:	2300      	movs	r3, #0
 800c078:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 800c07a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c07e:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 800c080:	2300      	movs	r3, #0
 800c082:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800c086:	4a96      	ldr	r2, [pc, #600]	; (800c2e0 <lfs_dir_fetchmatch+0x3b8>)
 800c088:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c08c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c090:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800c094:	2300      	movs	r3, #0
 800c096:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 800c09a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c09c:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7fe fc15 	bl	800a8d2 <lfs_tole32>
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	3308      	adds	r3, #8
 800c0b2:	2204      	movs	r2, #4
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0ba:	f004 fae7 	bl	801068c <lfs_crc>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	689b      	ldr	r3, [r3, #8]
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7fe fbf8 	bl	800a8bc <lfs_fromle32>
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 800c0d2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c0d4:	f7ff f8b3 	bl	800b23e <lfs_tag_dsize>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0dc:	4413      	add	r3, r2
 800c0de:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 800c0e0:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c0e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
            int err = lfs_bd_read(lfs,
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	2204      	movs	r2, #4
 800c0ee:	9203      	str	r2, [sp, #12]
 800c0f0:	f107 0220 	add.w	r2, r7, #32
 800c0f4:	9202      	str	r2, [sp, #8]
 800c0f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c0f8:	9201      	str	r2, [sp, #4]
 800c0fa:	9300      	str	r3, [sp, #0]
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	460a      	mov	r2, r1
 800c100:	2100      	movs	r1, #0
 800c102:	68f8      	ldr	r0, [r7, #12]
 800c104:	f7fe fc46 	bl	800a994 <lfs_bd_read>
 800c108:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800c10a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d009      	beq.n	800c124 <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 800c110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c112:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c116:	d103      	bne.n	800c120 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	2200      	movs	r2, #0
 800c11c:	759a      	strb	r2, [r3, #22]
                    break;
 800c11e:	e1d4      	b.n	800c4ca <lfs_dir_fetchmatch+0x5a2>
                }
                return err;
 800c120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c122:	e25e      	b.n	800c5e2 <lfs_dir_fetchmatch+0x6ba>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 800c124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c126:	f107 0120 	add.w	r1, r7, #32
 800c12a:	2204      	movs	r2, #4
 800c12c:	4618      	mov	r0, r3
 800c12e:	f004 faad 	bl	801068c <lfs_crc>
 800c132:	4603      	mov	r3, r0
 800c134:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 800c136:	6a3b      	ldr	r3, [r7, #32]
 800c138:	4618      	mov	r0, r3
 800c13a:	f7fe fbd6 	bl	800a8ea <lfs_frombe32>
 800c13e:	4602      	mov	r2, r0
 800c140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c142:	4053      	eors	r3, r2
 800c144:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 800c146:	6a3b      	ldr	r3, [r7, #32]
 800c148:	4618      	mov	r0, r3
 800c14a:	f7ff f800 	bl	800b14e <lfs_tag_isvalid>
 800c14e:	4603      	mov	r3, r0
 800c150:	f083 0301 	eor.w	r3, r3, #1
 800c154:	b2db      	uxtb	r3, r3
 800c156:	2b00      	cmp	r3, #0
 800c158:	d01b      	beq.n	800c192 <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800c15a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c15c:	f7ff f818 	bl	800b190 <lfs_tag_type1>
 800c160:	4603      	mov	r3, r0
 800c162:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800c166:	d10d      	bne.n	800c184 <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c170:	6a12      	ldr	r2, [r2, #32]
 800c172:	fbb3 f1f2 	udiv	r1, r3, r2
 800c176:	fb01 f202 	mul.w	r2, r1, r2
 800c17a:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d101      	bne.n	800c184 <lfs_dir_fetchmatch+0x25c>
 800c180:	2301      	movs	r3, #1
 800c182:	e000      	b.n	800c186 <lfs_dir_fetchmatch+0x25e>
 800c184:	2300      	movs	r3, #0
 800c186:	f003 0301 	and.w	r3, r3, #1
 800c18a:	b2da      	uxtb	r2, r3
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	759a      	strb	r2, [r3, #22]
                break;
 800c190:	e19b      	b.n	800c4ca <lfs_dir_fetchmatch+0x5a2>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800c192:	6a3b      	ldr	r3, [r7, #32]
 800c194:	4618      	mov	r0, r3
 800c196:	f7ff f852 	bl	800b23e <lfs_tag_dsize>
 800c19a:	4602      	mov	r2, r0
 800c19c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c19e:	441a      	add	r2, r3
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d903      	bls.n	800c1b2 <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	759a      	strb	r2, [r3, #22]
                break;
 800c1b0:	e18b      	b.n	800c4ca <lfs_dir_fetchmatch+0x5a2>
            }

            ptag = tag;
 800c1b2:	6a3b      	ldr	r3, [r7, #32]
 800c1b4:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 800c1b6:	6a3b      	ldr	r3, [r7, #32]
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7fe ffe9 	bl	800b190 <lfs_tag_type1>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800c1c4:	d164      	bne.n	800c290 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800c1c6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1cc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
                err = lfs_bd_read(lfs,
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c1d4:	3204      	adds	r2, #4
 800c1d6:	2104      	movs	r1, #4
 800c1d8:	9103      	str	r1, [sp, #12]
 800c1da:	f107 011c 	add.w	r1, r7, #28
 800c1de:	9102      	str	r1, [sp, #8]
 800c1e0:	9201      	str	r2, [sp, #4]
 800c1e2:	9300      	str	r3, [sp, #0]
 800c1e4:	4623      	mov	r3, r4
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	2100      	movs	r1, #0
 800c1ea:	68f8      	ldr	r0, [r7, #12]
 800c1ec:	f7fe fbd2 	bl	800a994 <lfs_bd_read>
 800c1f0:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 800c1f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d009      	beq.n	800c20c <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 800c1f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1fa:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c1fe:	d103      	bne.n	800c208 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	2200      	movs	r2, #0
 800c204:	759a      	strb	r2, [r3, #22]
                        break;
 800c206:	e160      	b.n	800c4ca <lfs_dir_fetchmatch+0x5a2>
                    }
                    return err;
 800c208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 800c20a:	e1ea      	b.n	800c5e2 <lfs_dir_fetchmatch+0x6ba>
                }
                dcrc = lfs_fromle32(dcrc);
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	4618      	mov	r0, r3
 800c210:	f7fe fb54 	bl	800a8bc <lfs_fromle32>
 800c214:	4603      	mov	r3, r0
 800c216:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 800c218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c21a:	69fb      	ldr	r3, [r7, #28]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d003      	beq.n	800c228 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	2200      	movs	r2, #0
 800c224:	759a      	strb	r2, [r3, #22]
                    break;
 800c226:	e150      	b.n	800c4ca <lfs_dir_fetchmatch+0x5a2>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 800c228:	6a3b      	ldr	r3, [r7, #32]
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fe ffd0 	bl	800b1d0 <lfs_tag_chunk>
 800c230:	4603      	mov	r3, r0
 800c232:	07db      	lsls	r3, r3, #31
 800c234:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c236:	4053      	eors	r3, r2
 800c238:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c23e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800c242:	2204      	movs	r2, #4
 800c244:	4618      	mov	r0, r3
 800c246:	f004 fa21 	bl	801068c <lfs_crc>
 800c24a:	4602      	mov	r2, r0
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 800c250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c252:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 800c254:	6a3b      	ldr	r3, [r7, #32]
 800c256:	4618      	mov	r0, r3
 800c258:	f7fe fff1 	bl	800b23e <lfs_tag_dsize>
 800c25c:	4602      	mov	r2, r0
 800c25e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c260:	441a      	add	r2, r3
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c26a:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c272:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 800c274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 800c27a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800c286:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 800c288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c28c:	627b      	str	r3, [r7, #36]	; 0x24
 800c28e:	e720      	b.n	800c0d2 <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800c290:	2304      	movs	r3, #4
 800c292:	647b      	str	r3, [r7, #68]	; 0x44
 800c294:	e032      	b.n	800c2fc <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 800c296:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c29c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
                err = lfs_bd_read(lfs,
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c2a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2a6:	440a      	add	r2, r1
 800c2a8:	2101      	movs	r1, #1
 800c2aa:	9103      	str	r1, [sp, #12]
 800c2ac:	f107 011b 	add.w	r1, r7, #27
 800c2b0:	9102      	str	r1, [sp, #8]
 800c2b2:	9201      	str	r2, [sp, #4]
 800c2b4:	9300      	str	r3, [sp, #0]
 800c2b6:	4623      	mov	r3, r4
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	2100      	movs	r1, #0
 800c2bc:	68f8      	ldr	r0, [r7, #12]
 800c2be:	f7fe fb69 	bl	800a994 <lfs_bd_read>
 800c2c2:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 800c2c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d00c      	beq.n	800c2e4 <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 800c2ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2cc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c2d0:	d103      	bne.n	800c2da <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	759a      	strb	r2, [r3, #22]
 800c2d8:	e018      	b.n	800c30c <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 800c2da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 800c2dc:	e181      	b.n	800c5e2 <lfs_dir_fetchmatch+0x6ba>
 800c2de:	bf00      	nop
 800c2e0:	08023430 	.word	0x08023430
                }

                crc = lfs_crc(crc, &dat, 1);
 800c2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e6:	f107 011b 	add.w	r1, r7, #27
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f004 f9cd 	bl	801068c <lfs_crc>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800c2f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	647b      	str	r3, [r7, #68]	; 0x44
 800c2fc:	6a3b      	ldr	r3, [r7, #32]
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7fe ff9d 	bl	800b23e <lfs_tag_dsize>
 800c304:	4602      	mov	r2, r0
 800c306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c308:	4293      	cmp	r3, r2
 800c30a:	d3c4      	bcc.n	800c296 <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800c30c:	6a3b      	ldr	r3, [r7, #32]
 800c30e:	4618      	mov	r0, r3
 800c310:	f7fe ff3e 	bl	800b190 <lfs_tag_type1>
 800c314:	4603      	mov	r3, r0
 800c316:	2b00      	cmp	r3, #0
 800c318:	d113      	bne.n	800c342 <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 800c31a:	6a3b      	ldr	r3, [r7, #32]
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7fe ff71 	bl	800b204 <lfs_tag_id>
 800c322:	4603      	mov	r3, r0
 800c324:	461a      	mov	r2, r3
 800c326:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c32a:	4293      	cmp	r3, r2
 800c32c:	f200 8081 	bhi.w	800c432 <lfs_dir_fetchmatch+0x50a>
                    tempcount = lfs_tag_id(tag) + 1;
 800c330:	6a3b      	ldr	r3, [r7, #32]
 800c332:	4618      	mov	r0, r3
 800c334:	f7fe ff66 	bl	800b204 <lfs_tag_id>
 800c338:	4603      	mov	r3, r0
 800c33a:	3301      	adds	r3, #1
 800c33c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800c340:	e077      	b.n	800c432 <lfs_dir_fetchmatch+0x50a>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800c342:	6a3b      	ldr	r3, [r7, #32]
 800c344:	4618      	mov	r0, r3
 800c346:	f7fe ff23 	bl	800b190 <lfs_tag_type1>
 800c34a:	4603      	mov	r3, r0
 800c34c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c350:	d134      	bne.n	800c3bc <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 800c352:	6a3b      	ldr	r3, [r7, #32]
 800c354:	4618      	mov	r0, r3
 800c356:	f7fe ff48 	bl	800b1ea <lfs_tag_splice>
 800c35a:	4603      	mov	r3, r0
 800c35c:	b29a      	uxth	r2, r3
 800c35e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c362:	4413      	add	r3, r2
 800c364:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 800c368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c36a:	4ba0      	ldr	r3, [pc, #640]	; (800c5ec <lfs_dir_fetchmatch+0x6c4>)
 800c36c:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800c36e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800c372:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800c376:	6a3a      	ldr	r2, [r7, #32]
 800c378:	4293      	cmp	r3, r2
 800c37a:	d104      	bne.n	800c386 <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 800c37c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c37e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c382:	64bb      	str	r3, [r7, #72]	; 0x48
 800c384:	e055      	b.n	800c432 <lfs_dir_fetchmatch+0x50a>
                } else if (tempbesttag != -1 &&
 800c386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c38c:	d051      	beq.n	800c432 <lfs_dir_fetchmatch+0x50a>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800c38e:	6a3b      	ldr	r3, [r7, #32]
 800c390:	4618      	mov	r0, r3
 800c392:	f7fe ff37 	bl	800b204 <lfs_tag_id>
 800c396:	4603      	mov	r3, r0
 800c398:	461c      	mov	r4, r3
 800c39a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7fe ff31 	bl	800b204 <lfs_tag_id>
 800c3a2:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 800c3a4:	429c      	cmp	r4, r3
 800c3a6:	d844      	bhi.n	800c432 <lfs_dir_fetchmatch+0x50a>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800c3a8:	6a3b      	ldr	r3, [r7, #32]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7fe ff1d 	bl	800b1ea <lfs_tag_splice>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	029a      	lsls	r2, r3, #10
 800c3b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3b6:	4413      	add	r3, r2
 800c3b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3ba:	e03a      	b.n	800c432 <lfs_dir_fetchmatch+0x50a>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 800c3bc:	6a3b      	ldr	r3, [r7, #32]
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7fe fee6 	bl	800b190 <lfs_tag_type1>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c3ca:	d132      	bne.n	800c432 <lfs_dir_fetchmatch+0x50a>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 800c3cc:	6a3b      	ldr	r3, [r7, #32]
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7fe fefe 	bl	800b1d0 <lfs_tag_chunk>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	f003 0301 	and.w	r3, r3, #1
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	bf14      	ite	ne
 800c3de:	2301      	movne	r3, #1
 800c3e0:	2300      	moveq	r3, #0
 800c3e2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 800c3e6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3ec:	6a5c      	ldr	r4, [r3, #36]	; 0x24
                err = lfs_bd_read(lfs,
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c3f4:	3204      	adds	r2, #4
 800c3f6:	2108      	movs	r1, #8
 800c3f8:	9103      	str	r1, [sp, #12]
 800c3fa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c3fe:	9102      	str	r1, [sp, #8]
 800c400:	9201      	str	r2, [sp, #4]
 800c402:	9300      	str	r3, [sp, #0]
 800c404:	4623      	mov	r3, r4
 800c406:	4602      	mov	r2, r0
 800c408:	2100      	movs	r1, #0
 800c40a:	68f8      	ldr	r0, [r7, #12]
 800c40c:	f7fe fac2 	bl	800a994 <lfs_bd_read>
 800c410:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 800c412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c414:	2b00      	cmp	r3, #0
 800c416:	d007      	beq.n	800c428 <lfs_dir_fetchmatch+0x500>
                    if (err == LFS_ERR_CORRUPT) {
 800c418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c41a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c41e:	d103      	bne.n	800c428 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	2200      	movs	r2, #0
 800c424:	759a      	strb	r2, [r3, #22]
                        break;
 800c426:	e050      	b.n	800c4ca <lfs_dir_fetchmatch+0x5a2>
                    }
                }
                lfs_pair_fromle32(temptail);
 800c428:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7fe fe5a 	bl	800b0e6 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 800c432:	6a3a      	ldr	r2, [r7, #32]
 800c434:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c436:	405a      	eors	r2, r3
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	4013      	ands	r3, r2
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f47f ae48 	bne.w	800c0d2 <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 800c442:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 800c448:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 800c44a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c44c:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 800c44e:	617b      	str	r3, [r7, #20]
 800c450:	f107 0210 	add.w	r2, r7, #16
 800c454:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c458:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800c45c:	4798      	blx	r3
 800c45e:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 800c460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c462:	2b00      	cmp	r3, #0
 800c464:	da09      	bge.n	800c47a <lfs_dir_fetchmatch+0x552>
                    if (res == LFS_ERR_CORRUPT) {
 800c466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c468:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c46c:	d103      	bne.n	800c476 <lfs_dir_fetchmatch+0x54e>
                        dir->erased = false;
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	2200      	movs	r2, #0
 800c472:	759a      	strb	r2, [r3, #22]
 800c474:	e029      	b.n	800c4ca <lfs_dir_fetchmatch+0x5a2>
                        break;
                    }
                    return res;
 800c476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 800c478:	e0b3      	b.n	800c5e2 <lfs_dir_fetchmatch+0x6ba>
                }

                if (res == LFS_CMP_EQ) {
 800c47a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d102      	bne.n	800c486 <lfs_dir_fetchmatch+0x55e>
                    // found a match
                    tempbesttag = tag;
 800c480:	6a3b      	ldr	r3, [r7, #32]
 800c482:	64bb      	str	r3, [r7, #72]	; 0x48
 800c484:	e625      	b.n	800c0d2 <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 800c486:	6a3a      	ldr	r2, [r7, #32]
 800c488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c48a:	405a      	eors	r2, r3
 800c48c:	4b58      	ldr	r3, [pc, #352]	; (800c5f0 <lfs_dir_fetchmatch+0x6c8>)
 800c48e:	4013      	ands	r3, r2
 800c490:	2b00      	cmp	r3, #0
 800c492:	d103      	bne.n	800c49c <lfs_dir_fetchmatch+0x574>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 800c494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c498:	64bb      	str	r3, [r7, #72]	; 0x48
 800c49a:	e61a      	b.n	800c0d2 <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 800c49c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c49e:	2b02      	cmp	r3, #2
 800c4a0:	f47f ae17 	bne.w	800c0d2 <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800c4a4:	6a3b      	ldr	r3, [r7, #32]
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7fe feac 	bl	800b204 <lfs_tag_id>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	461c      	mov	r4, r3
 800c4b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7fe fea6 	bl	800b204 <lfs_tag_id>
 800c4b8:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 800c4ba:	429c      	cmp	r4, r3
 800c4bc:	f63f ae09 	bhi.w	800c0d2 <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 800c4c0:	6a3b      	ldr	r3, [r7, #32]
 800c4c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c4c6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4c8:	e603      	b.n	800c0d2 <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d100      	bne.n	800c4d4 <lfs_dir_fetchmatch+0x5ac>
 800c4d2:	e05d      	b.n	800c590 <lfs_dir_fetchmatch+0x668>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	333c      	adds	r3, #60	; 0x3c
 800c4d8:	68ba      	ldr	r2, [r7, #8]
 800c4da:	4611      	mov	r1, r2
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7fe ff39 	bl	800b354 <lfs_gstate_hasmovehere>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d028      	beq.n	800c53a <lfs_dir_fetchmatch+0x612>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f7fe fe89 	bl	800b204 <lfs_tag_id>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	461c      	mov	r4, r3
 800c4f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7fe fe83 	bl	800b204 <lfs_tag_id>
 800c4fe:	4603      	mov	r3, r0
 800c500:	429c      	cmp	r4, r3
 800c502:	d104      	bne.n	800c50e <lfs_dir_fetchmatch+0x5e6>
                    besttag |= 0x80000000;
 800c504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c506:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c50a:	667b      	str	r3, [r7, #100]	; 0x64
 800c50c:	e015      	b.n	800c53a <lfs_dir_fetchmatch+0x612>
                } else if (besttag != -1 &&
 800c50e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c514:	d011      	beq.n	800c53a <lfs_dir_fetchmatch+0x612>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7fe fe72 	bl	800b204 <lfs_tag_id>
 800c520:	4603      	mov	r3, r0
 800c522:	461c      	mov	r4, r3
 800c524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c526:	4618      	mov	r0, r3
 800c528:	f7fe fe6c 	bl	800b204 <lfs_tag_id>
 800c52c:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 800c52e:	429c      	cmp	r4, r3
 800c530:	d203      	bcs.n	800c53a <lfs_dir_fetchmatch+0x612>
                    besttag -= LFS_MKTAG(0, 1, 0);
 800c532:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c534:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800c538:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 800c53a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00f      	beq.n	800c560 <lfs_dir_fetchmatch+0x638>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 800c540:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c542:	4618      	mov	r0, r3
 800c544:	f7fe fe5e 	bl	800b204 <lfs_tag_id>
 800c548:	4603      	mov	r3, r0
 800c54a:	461a      	mov	r2, r3
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	8a9b      	ldrh	r3, [r3, #20]
 800c550:	4619      	mov	r1, r3
 800c552:	4610      	mov	r0, r2
 800c554:	f7fe f942 	bl	800a7dc <lfs_min>
 800c558:	4603      	mov	r3, r0
 800c55a:	b29a      	uxth	r2, r3
 800c55c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c55e:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 800c560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c562:	4618      	mov	r0, r3
 800c564:	f7fe fdf3 	bl	800b14e <lfs_tag_isvalid>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d001      	beq.n	800c572 <lfs_dir_fetchmatch+0x64a>
                return besttag;
 800c56e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c570:	e037      	b.n	800c5e2 <lfs_dir_fetchmatch+0x6ba>
            } else if (lfs_tag_id(besttag) < dir->count) {
 800c572:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c574:	4618      	mov	r0, r3
 800c576:	f7fe fe45 	bl	800b204 <lfs_tag_id>
 800c57a:	4603      	mov	r3, r0
 800c57c:	461a      	mov	r2, r3
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	8a9b      	ldrh	r3, [r3, #20]
 800c582:	429a      	cmp	r2, r3
 800c584:	d202      	bcs.n	800c58c <lfs_dir_fetchmatch+0x664>
                return LFS_ERR_NOENT;
 800c586:	f06f 0301 	mvn.w	r3, #1
 800c58a:	e02a      	b.n	800c5e2 <lfs_dir_fetchmatch+0x6ba>
            } else {
                return 0;
 800c58c:	2300      	movs	r3, #0
 800c58e:	e028      	b.n	800c5e2 <lfs_dir_fetchmatch+0x6ba>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	4618      	mov	r0, r3
 800c594:	f7fe fd20 	bl	800afd8 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 800c598:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c59a:	3301      	adds	r3, #1
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	f003 0301 	and.w	r3, r3, #1
 800c5a2:	bfb8      	it	lt
 800c5a4:	425b      	neglt	r3, r3
 800c5a6:	009b      	lsls	r3, r3, #2
 800c5a8:	3368      	adds	r3, #104	; 0x68
 800c5aa:	443b      	add	r3, r7
 800c5ac:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 800c5b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	65bb      	str	r3, [r7, #88]	; 0x58
 800c5ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	f77f ad5a 	ble.w	800c076 <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	681a      	ldr	r2, [r3, #0]
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	490a      	ldr	r1, [pc, #40]	; (800c5f4 <lfs_dir_fetchmatch+0x6cc>)
 800c5cc:	9101      	str	r1, [sp, #4]
 800c5ce:	9300      	str	r3, [sp, #0]
 800c5d0:	4613      	mov	r3, r2
 800c5d2:	f240 4232 	movw	r2, #1074	; 0x432
 800c5d6:	4908      	ldr	r1, [pc, #32]	; (800c5f8 <lfs_dir_fetchmatch+0x6d0>)
 800c5d8:	4808      	ldr	r0, [pc, #32]	; (800c5fc <lfs_dir_fetchmatch+0x6d4>)
 800c5da:	f015 f89d 	bl	8021718 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 800c5de:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	376c      	adds	r7, #108	; 0x6c
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd90      	pop	{r4, r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	000ffc00 	.word	0x000ffc00
 800c5f0:	7ffffc00 	.word	0x7ffffc00
 800c5f4:	080233f4 	.word	0x080233f4
 800c5f8:	080232e8 	.word	0x080232e8
 800c5fc:	080233f8 	.word	0x080233f8

0800c600 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 800c600:	b580      	push	{r7, lr}
 800c602:	b088      	sub	sp, #32
 800c604:	af04      	add	r7, sp, #16
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 800c60c:	2300      	movs	r3, #0
 800c60e:	9303      	str	r3, [sp, #12]
 800c610:	2300      	movs	r3, #0
 800c612:	9302      	str	r3, [sp, #8]
 800c614:	2300      	movs	r3, #0
 800c616:	9301      	str	r3, [sp, #4]
 800c618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c61c:	9300      	str	r3, [sp, #0]
 800c61e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	68b9      	ldr	r1, [r7, #8]
 800c626:	68f8      	ldr	r0, [r7, #12]
 800c628:	f7ff fc7e 	bl	800bf28 <lfs_dir_fetchmatch>
 800c62c:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3710      	adds	r7, #16
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
	...

0800c638 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 800c638:	b580      	push	{r7, lr}
 800c63a:	b08a      	sub	sp, #40	; 0x28
 800c63c:	af02      	add	r7, sp, #8
 800c63e:	60f8      	str	r0, [r7, #12]
 800c640:	60b9      	str	r1, [r7, #8]
 800c642:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 800c644:	f107 0310 	add.w	r3, r7, #16
 800c648:	9300      	str	r3, [sp, #0]
 800c64a:	4b12      	ldr	r3, [pc, #72]	; (800c694 <lfs_dir_getgstate+0x5c>)
 800c64c:	4a12      	ldr	r2, [pc, #72]	; (800c698 <lfs_dir_getgstate+0x60>)
 800c64e:	68b9      	ldr	r1, [r7, #8]
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	f7ff f9c1 	bl	800b9d8 <lfs_dir_get>
 800c656:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 800c658:	69fb      	ldr	r3, [r7, #28]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	da05      	bge.n	800c66a <lfs_dir_getgstate+0x32>
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	f113 0f02 	cmn.w	r3, #2
 800c664:	d001      	beq.n	800c66a <lfs_dir_getgstate+0x32>
        return res;
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	e00f      	b.n	800c68a <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	f113 0f02 	cmn.w	r3, #2
 800c670:	d00a      	beq.n	800c688 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 800c672:	f107 0310 	add.w	r3, r7, #16
 800c676:	4618      	mov	r0, r3
 800c678:	f7fe fe8c 	bl	800b394 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 800c67c:	f107 0310 	add.w	r3, r7, #16
 800c680:	4619      	mov	r1, r3
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f7fe fdef 	bl	800b266 <lfs_gstate_xor>
    }

    return 0;
 800c688:	2300      	movs	r3, #0
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3720      	adds	r7, #32
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
 800c692:	bf00      	nop
 800c694:	7ff0000c 	.word	0x7ff0000c
 800c698:	7ff00000 	.word	0x7ff00000

0800c69c <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800c69c:	b590      	push	{r4, r7, lr}
 800c69e:	b08f      	sub	sp, #60	; 0x3c
 800c6a0:	af04      	add	r7, sp, #16
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 800c6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800c6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b8:	689c      	ldr	r4, [r3, #8]
 800c6ba:	68b8      	ldr	r0, [r7, #8]
 800c6bc:	f7fe fdb2 	bl	800b224 <lfs_tag_size>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	f7fe f889 	bl	800a7dc <lfs_min>
 800c6ca:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 800c6cc:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	69fa      	ldr	r2, [r7, #28]
 800c6d4:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 800c6d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c6d8:	6849      	ldr	r1, [r1, #4]
 800c6da:	69b8      	ldr	r0, [r7, #24]
 800c6dc:	9003      	str	r0, [sp, #12]
 800c6de:	9102      	str	r1, [sp, #8]
 800c6e0:	9201      	str	r2, [sp, #4]
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	69bb      	ldr	r3, [r7, #24]
 800c6e6:	4622      	mov	r2, r4
 800c6e8:	2100      	movs	r1, #0
 800c6ea:	6a38      	ldr	r0, [r7, #32]
 800c6ec:	f7fe fa96 	bl	800ac1c <lfs_bd_cmp>
 800c6f0:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d001      	beq.n	800c6fc <lfs_dir_find_match+0x60>
        return res;
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	e014      	b.n	800c726 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 800c6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fe:	689c      	ldr	r4, [r3, #8]
 800c700:	68b8      	ldr	r0, [r7, #8]
 800c702:	f7fe fd8f 	bl	800b224 <lfs_tag_size>
 800c706:	4603      	mov	r3, r0
 800c708:	429c      	cmp	r4, r3
 800c70a:	d00b      	beq.n	800c724 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800c70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c70e:	689c      	ldr	r4, [r3, #8]
 800c710:	68b8      	ldr	r0, [r7, #8]
 800c712:	f7fe fd87 	bl	800b224 <lfs_tag_size>
 800c716:	4603      	mov	r3, r0
 800c718:	429c      	cmp	r4, r3
 800c71a:	d201      	bcs.n	800c720 <lfs_dir_find_match+0x84>
 800c71c:	2301      	movs	r3, #1
 800c71e:	e002      	b.n	800c726 <lfs_dir_find_match+0x8a>
 800c720:	2302      	movs	r3, #2
 800c722:	e000      	b.n	800c726 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 800c724:	2300      	movs	r3, #0
}
 800c726:	4618      	mov	r0, r3
 800c728:	372c      	adds	r7, #44	; 0x2c
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd90      	pop	{r4, r7, pc}
	...

0800c730 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 800c730:	b590      	push	{r4, r7, lr}
 800c732:	b093      	sub	sp, #76	; 0x4c
 800c734:	af04      	add	r7, sp, #16
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	607a      	str	r2, [r7, #4]
 800c73c:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d003      	beq.n	800c752 <lfs_dir_find+0x22>
        *id = 0x3ff;
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800c750:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800c752:	4b6e      	ldr	r3, [pc, #440]	; (800c90c <lfs_dir_find+0x1dc>)
 800c754:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	6a1a      	ldr	r2, [r3, #32]
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 800c766:	496a      	ldr	r1, [pc, #424]	; (800c910 <lfs_dir_find+0x1e0>)
 800c768:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c76a:	f015 fa11 	bl	8021b90 <strspn>
 800c76e:	4602      	mov	r2, r0
 800c770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c772:	4413      	add	r3, r2
 800c774:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 800c776:	4966      	ldr	r1, [pc, #408]	; (800c910 <lfs_dir_find+0x1e0>)
 800c778:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c77a:	f015 f9f8 	bl	8021b6e <strcspn>
 800c77e:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800c780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c782:	2b01      	cmp	r3, #1
 800c784:	d105      	bne.n	800c792 <lfs_dir_find+0x62>
 800c786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c788:	781a      	ldrb	r2, [r3, #0]
 800c78a:	4b62      	ldr	r3, [pc, #392]	; (800c914 <lfs_dir_find+0x1e4>)
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d00a      	beq.n	800c7a8 <lfs_dir_find+0x78>
 800c792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c794:	2b02      	cmp	r3, #2
 800c796:	d10c      	bne.n	800c7b2 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 800c798:	2202      	movs	r2, #2
 800c79a:	495f      	ldr	r1, [pc, #380]	; (800c918 <lfs_dir_find+0x1e8>)
 800c79c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c79e:	f015 f9a7 	bl	8021af0 <memcmp>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d104      	bne.n	800c7b2 <lfs_dir_find+0x82>
            name += namelen;
 800c7a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ac:	4413      	add	r3, r2
 800c7ae:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 800c7b0:	e7d9      	b.n	800c766 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 800c7b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b6:	4413      	add	r3, r2
 800c7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 800c7be:	4954      	ldr	r1, [pc, #336]	; (800c910 <lfs_dir_find+0x1e0>)
 800c7c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7c2:	f015 f9e5 	bl	8021b90 <strspn>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ca:	4413      	add	r3, r2
 800c7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 800c7ce:	4950      	ldr	r1, [pc, #320]	; (800c910 <lfs_dir_find+0x1e0>)
 800c7d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7d2:	f015 f9cc 	bl	8021b6e <strcspn>
 800c7d6:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 800c7d8:	6a3b      	ldr	r3, [r7, #32]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d01d      	beq.n	800c81a <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800c7de:	6a3b      	ldr	r3, [r7, #32]
 800c7e0:	2b02      	cmp	r3, #2
 800c7e2:	d112      	bne.n	800c80a <lfs_dir_find+0xda>
 800c7e4:	2202      	movs	r2, #2
 800c7e6:	494c      	ldr	r1, [pc, #304]	; (800c918 <lfs_dir_find+0x1e8>)
 800c7e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7ea:	f015 f981 	bl	8021af0 <memcmp>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d10a      	bne.n	800c80a <lfs_dir_find+0xda>
                depth -= 1;
 800c7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f6:	3b01      	subs	r3, #1
 800c7f8:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 800c7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d107      	bne.n	800c810 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 800c800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c802:	6a3b      	ldr	r3, [r7, #32]
 800c804:	4413      	add	r3, r2
 800c806:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 800c808:	e7ad      	b.n	800c766 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 800c80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80c:	3301      	adds	r3, #1
 800c80e:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 800c810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c812:	6a3b      	ldr	r3, [r7, #32]
 800c814:	4413      	add	r3, r2
 800c816:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 800c818:	e7d1      	b.n	800c7be <lfs_dir_find+0x8e>
                break;
 800c81a:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 800c81c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d101      	bne.n	800c828 <lfs_dir_find+0xf8>
            return tag;
 800c824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c826:	e06c      	b.n	800c902 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c82c:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800c82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c830:	4618      	mov	r0, r3
 800c832:	f7fe fcbd 	bl	800b1b0 <lfs_tag_type3>
 800c836:	4603      	mov	r3, r0
 800c838:	2b02      	cmp	r3, #2
 800c83a:	d002      	beq.n	800c842 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 800c83c:	f06f 0313 	mvn.w	r3, #19
 800c840:	e05f      	b.n	800c902 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 800c842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c844:	4618      	mov	r0, r3
 800c846:	f7fe fcdd 	bl	800b204 <lfs_tag_id>
 800c84a:	4603      	mov	r3, r0
 800c84c:	461a      	mov	r2, r3
 800c84e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800c852:	429a      	cmp	r2, r3
 800c854:	d01c      	beq.n	800c890 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800c856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c858:	4618      	mov	r0, r3
 800c85a:	f7fe fcd3 	bl	800b204 <lfs_tag_id>
 800c85e:	4603      	mov	r3, r0
 800c860:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800c862:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c866:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800c86a:	68ba      	ldr	r2, [r7, #8]
 800c86c:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800c86e:	9200      	str	r2, [sp, #0]
 800c870:	4a2a      	ldr	r2, [pc, #168]	; (800c91c <lfs_dir_find+0x1ec>)
 800c872:	68b9      	ldr	r1, [r7, #8]
 800c874:	68f8      	ldr	r0, [r7, #12]
 800c876:	f7ff f8af 	bl	800b9d8 <lfs_dir_get>
 800c87a:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800c87c:	69fb      	ldr	r3, [r7, #28]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	da01      	bge.n	800c886 <lfs_dir_find+0x156>
                return res;
 800c882:	69fb      	ldr	r3, [r7, #28]
 800c884:	e03d      	b.n	800c902 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	3318      	adds	r3, #24
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7fe fc2b 	bl	800b0e6 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 800c896:	212f      	movs	r1, #47	; 0x2f
 800c898:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c89a:	f015 f95b 	bl	8021b54 <strchr>
 800c89e:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d101      	bne.n	800c8a8 <lfs_dir_find+0x178>
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	e000      	b.n	800c8aa <lfs_dir_find+0x17a>
 800c8a8:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800c8aa:	68fa      	ldr	r2, [r7, #12]
 800c8ac:	613a      	str	r2, [r7, #16]
 800c8ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8b0:	617a      	str	r2, [r7, #20]
 800c8b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8b4:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800c8b6:	f107 0210 	add.w	r2, r7, #16
 800c8ba:	9203      	str	r2, [sp, #12]
 800c8bc:	4a18      	ldr	r2, [pc, #96]	; (800c920 <lfs_dir_find+0x1f0>)
 800c8be:	9202      	str	r2, [sp, #8]
 800c8c0:	9301      	str	r3, [sp, #4]
 800c8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c4:	9300      	str	r3, [sp, #0]
 800c8c6:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800c8ca:	4622      	mov	r2, r4
 800c8cc:	68b9      	ldr	r1, [r7, #8]
 800c8ce:	68f8      	ldr	r0, [r7, #12]
 800c8d0:	f7ff fb2a 	bl	800bf28 <lfs_dir_fetchmatch>
 800c8d4:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800c8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	da01      	bge.n	800c8e0 <lfs_dir_find+0x1b0>
                return tag;
 800c8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8de:	e010      	b.n	800c902 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 800c8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d004      	beq.n	800c8f0 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800c8e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ea:	4413      	add	r3, r2
 800c8ec:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 800c8ee:	e73a      	b.n	800c766 <lfs_dir_find+0x36>
            if (!dir->split) {
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	7ddb      	ldrb	r3, [r3, #23]
 800c8f4:	f083 0301 	eor.w	r3, r3, #1
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d0c8      	beq.n	800c890 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 800c8fe:	f06f 0301 	mvn.w	r3, #1
    }
}
 800c902:	4618      	mov	r0, r3
 800c904:	373c      	adds	r7, #60	; 0x3c
 800c906:	46bd      	mov	sp, r7
 800c908:	bd90      	pop	{r4, r7, pc}
 800c90a:	bf00      	nop
 800c90c:	002ffc00 	.word	0x002ffc00
 800c910:	08023438 	.word	0x08023438
 800c914:	0802343c 	.word	0x0802343c
 800c918:	08023440 	.word	0x08023440
 800c91c:	700ffc00 	.word	0x700ffc00
 800c920:	0800c69d 	.word	0x0800c69d

0800c924 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 800c924:	b590      	push	{r4, r7, lr}
 800c926:	b08b      	sub	sp, #44	; 0x2c
 800c928:	af04      	add	r7, sp, #16
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	607a      	str	r2, [r7, #4]
 800c930:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	f103 0010 	add.w	r0, r3, #16
 800c938:	68fc      	ldr	r4, [r7, #12]
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	68ba      	ldr	r2, [r7, #8]
 800c940:	6852      	ldr	r2, [r2, #4]
 800c942:	6839      	ldr	r1, [r7, #0]
 800c944:	9103      	str	r1, [sp, #12]
 800c946:	6879      	ldr	r1, [r7, #4]
 800c948:	9102      	str	r1, [sp, #8]
 800c94a:	9201      	str	r2, [sp, #4]
 800c94c:	9300      	str	r3, [sp, #0]
 800c94e:	2300      	movs	r3, #0
 800c950:	4622      	mov	r2, r4
 800c952:	4601      	mov	r1, r0
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	f7fe fa63 	bl	800ae20 <lfs_bd_prog>
 800c95a:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d001      	beq.n	800c966 <lfs_dir_commitprog+0x42>
        return err;
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	e010      	b.n	800c988 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	683a      	ldr	r2, [r7, #0]
 800c96c:	6879      	ldr	r1, [r7, #4]
 800c96e:	4618      	mov	r0, r3
 800c970:	f003 fe8c 	bl	801068c <lfs_crc>
 800c974:	4602      	mov	r2, r0
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	685a      	ldr	r2, [r3, #4]
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	441a      	add	r2, r3
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	605a      	str	r2, [r3, #4]
    return 0;
 800c986:	2300      	movs	r3, #0
}
 800c988:	4618      	mov	r0, r3
 800c98a:	371c      	adds	r7, #28
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd90      	pop	{r4, r7, pc}

0800c990 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 800c990:	b590      	push	{r4, r7, lr}
 800c992:	b08f      	sub	sp, #60	; 0x3c
 800c994:	af04      	add	r7, sp, #16
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	607a      	str	r2, [r7, #4]
 800c99c:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f7fe fc4d 	bl	800b23e <lfs_tag_dsize>
 800c9a4:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	685a      	ldr	r2, [r3, #4]
 800c9aa:	6a3b      	ldr	r3, [r7, #32]
 800c9ac:	441a      	add	r2, r3
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	695b      	ldr	r3, [r3, #20]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d902      	bls.n	800c9bc <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800c9b6:	f06f 031b 	mvn.w	r3, #27
 800c9ba:	e065      	b.n	800ca88 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	689b      	ldr	r3, [r3, #8]
 800c9c6:	4053      	eors	r3, r2
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7fd ff9a 	bl	800a902 <lfs_tobe32>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800c9d2:	f107 0214 	add.w	r2, r7, #20
 800c9d6:	2304      	movs	r3, #4
 800c9d8:	68b9      	ldr	r1, [r7, #8]
 800c9da:	68f8      	ldr	r0, [r7, #12]
 800c9dc:	f7ff ffa2 	bl	800c924 <lfs_dir_commitprog>
 800c9e0:	61f8      	str	r0, [r7, #28]
    if (err) {
 800c9e2:	69fb      	ldr	r3, [r7, #28]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d001      	beq.n	800c9ec <lfs_dir_commitattr+0x5c>
        return err;
 800c9e8:	69fb      	ldr	r3, [r7, #28]
 800c9ea:	e04d      	b.n	800ca88 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	db0c      	blt.n	800ca0c <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800c9f2:	6a3b      	ldr	r3, [r7, #32]
 800c9f4:	3b04      	subs	r3, #4
 800c9f6:	683a      	ldr	r2, [r7, #0]
 800c9f8:	68b9      	ldr	r1, [r7, #8]
 800c9fa:	68f8      	ldr	r0, [r7, #12]
 800c9fc:	f7ff ff92 	bl	800c924 <lfs_dir_commitprog>
 800ca00:	61f8      	str	r0, [r7, #28]
        if (err) {
 800ca02:	69fb      	ldr	r3, [r7, #28]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d039      	beq.n	800ca7c <lfs_dir_commitattr+0xec>
            return err;
 800ca08:	69fb      	ldr	r3, [r7, #28]
 800ca0a:	e03d      	b.n	800ca88 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800ca10:	2300      	movs	r3, #0
 800ca12:	627b      	str	r3, [r7, #36]	; 0x24
 800ca14:	e02d      	b.n	800ca72 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800ca16:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800ca18:	6a3a      	ldr	r2, [r7, #32]
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1c:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800ca1e:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 800ca20:	69bb      	ldr	r3, [r7, #24]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	69ba      	ldr	r2, [r7, #24]
 800ca26:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 800ca28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca2a:	440a      	add	r2, r1
 800ca2c:	2101      	movs	r1, #1
 800ca2e:	9103      	str	r1, [sp, #12]
 800ca30:	f107 0113 	add.w	r1, r7, #19
 800ca34:	9102      	str	r1, [sp, #8]
 800ca36:	9201      	str	r2, [sp, #4]
 800ca38:	9300      	str	r3, [sp, #0]
 800ca3a:	4623      	mov	r3, r4
 800ca3c:	4602      	mov	r2, r0
 800ca3e:	2100      	movs	r1, #0
 800ca40:	68f8      	ldr	r0, [r7, #12]
 800ca42:	f7fd ffa7 	bl	800a994 <lfs_bd_read>
 800ca46:	61f8      	str	r0, [r7, #28]
            if (err) {
 800ca48:	69fb      	ldr	r3, [r7, #28]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d001      	beq.n	800ca52 <lfs_dir_commitattr+0xc2>
                return err;
 800ca4e:	69fb      	ldr	r3, [r7, #28]
 800ca50:	e01a      	b.n	800ca88 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800ca52:	f107 0213 	add.w	r2, r7, #19
 800ca56:	2301      	movs	r3, #1
 800ca58:	68b9      	ldr	r1, [r7, #8]
 800ca5a:	68f8      	ldr	r0, [r7, #12]
 800ca5c:	f7ff ff62 	bl	800c924 <lfs_dir_commitprog>
 800ca60:	61f8      	str	r0, [r7, #28]
            if (err) {
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d001      	beq.n	800ca6c <lfs_dir_commitattr+0xdc>
                return err;
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	e00d      	b.n	800ca88 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800ca6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6e:	3301      	adds	r3, #1
 800ca70:	627b      	str	r3, [r7, #36]	; 0x24
 800ca72:	6a3b      	ldr	r3, [r7, #32]
 800ca74:	3b04      	subs	r3, #4
 800ca76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d3cc      	bcc.n	800ca16 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	609a      	str	r2, [r3, #8]
    return 0;
 800ca86:	2300      	movs	r3, #0
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	372c      	adds	r7, #44	; 0x2c
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd90      	pop	{r4, r7, pc}

0800ca90 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800ca90:	b590      	push	{r4, r7, lr}
 800ca92:	b097      	sub	sp, #92	; 0x5c
 800ca94:	af04      	add	r7, sp, #16
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800caa6:	6a1b      	ldr	r3, [r3, #32]
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800caa8:	4619      	mov	r1, r3
 800caaa:	4610      	mov	r0, r2
 800caac:	f7fd febb 	bl	800a826 <lfs_alignup>
 800cab0:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 800cab2:	2300      	movs	r3, #0
 800cab4:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 800cab6:	2300      	movs	r3, #0
 800cab8:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800caba:	e0a6      	b.n	800cc0a <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	3304      	adds	r3, #4
 800cac2:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 800cac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cac6:	6a3b      	ldr	r3, [r7, #32]
 800cac8:	1ad3      	subs	r3, r2, r3
 800caca:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800cace:	4618      	mov	r0, r3
 800cad0:	f7fd fe84 	bl	800a7dc <lfs_min>
 800cad4:	4602      	mov	r2, r0
 800cad6:	6a3b      	ldr	r3, [r7, #32]
 800cad8:	4413      	add	r3, r2
 800cada:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 800cadc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d206      	bcs.n	800caf2 <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 800cae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae6:	3b08      	subs	r3, #8
 800cae8:	4619      	mov	r1, r3
 800caea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800caec:	f7fd fe76 	bl	800a7dc <lfs_min>
 800caf0:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 800caf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800caf6:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 800caf8:	6879      	ldr	r1, [r7, #4]
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	2204      	movs	r2, #4
 800cb00:	9203      	str	r2, [sp, #12]
 800cb02:	f107 0214 	add.w	r2, r7, #20
 800cb06:	9202      	str	r2, [sp, #8]
 800cb08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cb0a:	9201      	str	r2, [sp, #4]
 800cb0c:	9300      	str	r3, [sp, #0]
 800cb0e:	2304      	movs	r3, #4
 800cb10:	460a      	mov	r2, r1
 800cb12:	2100      	movs	r1, #0
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f7fd ff3d 	bl	800a994 <lfs_bd_read>
 800cb1a:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 800cb1c:	69fb      	ldr	r3, [r7, #28]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d005      	beq.n	800cb2e <lfs_dir_commitcrc+0x9e>
 800cb22:	69fb      	ldr	r3, [r7, #28]
 800cb24:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800cb28:	d001      	beq.n	800cb2e <lfs_dir_commitcrc+0x9e>
            return err;
 800cb2a:	69fb      	ldr	r3, [r7, #28]
 800cb2c:	e0e8      	b.n	800cd00 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	4618      	mov	r0, r3
 800cb32:	f7fd feda 	bl	800a8ea <lfs_frombe32>
 800cb36:	4603      	mov	r3, r0
 800cb38:	43db      	mvns	r3, r3
 800cb3a:	0fdb      	lsrs	r3, r3, #31
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	bf14      	ite	ne
 800cb40:	2301      	movne	r3, #1
 800cb42:	2300      	moveq	r3, #0
 800cb44:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 800cb46:	7efb      	ldrb	r3, [r7, #27]
 800cb48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb4c:	051a      	lsls	r2, r3, #20
 800cb4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cb50:	6a3b      	ldr	r3, [r7, #32]
 800cb52:	1acb      	subs	r3, r1, r3
 800cb54:	4313      	orrs	r3, r2
 800cb56:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 800cb5a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800cb5e:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	689a      	ldr	r2, [r3, #8]
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	4053      	eors	r3, r2
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7fd feca 	bl	800a902 <lfs_tobe32>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	68db      	ldr	r3, [r3, #12]
 800cb76:	f107 010c 	add.w	r1, r7, #12
 800cb7a:	2204      	movs	r2, #4
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f003 fd85 	bl	801068c <lfs_crc>
 800cb82:	4602      	mov	r2, r0
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	68db      	ldr	r3, [r3, #12]
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7fd fea0 	bl	800a8d2 <lfs_tole32>
 800cb92:	4603      	mov	r3, r0
 800cb94:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f103 0010 	add.w	r0, r3, #16
 800cb9c:	687c      	ldr	r4, [r7, #4]
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	683a      	ldr	r2, [r7, #0]
 800cba4:	6852      	ldr	r2, [r2, #4]
 800cba6:	2108      	movs	r1, #8
 800cba8:	9103      	str	r1, [sp, #12]
 800cbaa:	f107 010c 	add.w	r1, r7, #12
 800cbae:	9102      	str	r1, [sp, #8]
 800cbb0:	9201      	str	r2, [sp, #4]
 800cbb2:	9300      	str	r3, [sp, #0]
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	4622      	mov	r2, r4
 800cbb8:	4601      	mov	r1, r0
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f7fe f930 	bl	800ae20 <lfs_bd_prog>
 800cbc0:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 800cbc2:	69fb      	ldr	r3, [r7, #28]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d001      	beq.n	800cbcc <lfs_dir_commitcrc+0x13c>
            return err;
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	e099      	b.n	800cd00 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 800cbcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d106      	bne.n	800cbe0 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	685b      	ldr	r3, [r3, #4]
 800cbd6:	3304      	adds	r3, #4
 800cbd8:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	68db      	ldr	r3, [r3, #12]
 800cbde:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7fe fb1e 	bl	800b224 <lfs_tag_size>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	1d1a      	adds	r2, r3, #4
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	441a      	add	r2, r3
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 800cbf6:	7efb      	ldrb	r3, [r7, #27]
 800cbf8:	07da      	lsls	r2, r3, #31
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	405a      	eors	r2, r3
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc08:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc10:	429a      	cmp	r2, r3
 800cc12:	f63f af53 	bhi.w	800cabc <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f103 0110 	add.w	r1, r3, #16
 800cc1c:	687a      	ldr	r2, [r7, #4]
 800cc1e:	2300      	movs	r3, #0
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f7fe f8c9 	bl	800adb8 <lfs_bd_sync>
 800cc26:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 800cc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d001      	beq.n	800cc32 <lfs_dir_commitcrc+0x1a2>
        return err;
 800cc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc30:	e066      	b.n	800cd00 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	691b      	ldr	r3, [r3, #16]
 800cc36:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 800cc38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc3a:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800cc3c:	e05b      	b.n	800ccf6 <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 800cc3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc42:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800cc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc46:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc48:	e030      	b.n	800ccac <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 800cc4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d106      	bne.n	800cc60 <lfs_dir_commitcrc+0x1d0>
 800cc52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d002      	beq.n	800cc60 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 800cc5a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800cc5e:	e04f      	b.n	800cd00 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800cc60:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 800cc62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc66:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800cc68:	1d18      	adds	r0, r3, #4
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	2201      	movs	r2, #1
 800cc70:	9203      	str	r2, [sp, #12]
 800cc72:	f107 020b 	add.w	r2, r7, #11
 800cc76:	9202      	str	r2, [sp, #8]
 800cc78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc7a:	9201      	str	r2, [sp, #4]
 800cc7c:	9300      	str	r3, [sp, #0]
 800cc7e:	4603      	mov	r3, r0
 800cc80:	460a      	mov	r2, r1
 800cc82:	2100      	movs	r1, #0
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f7fd fe85 	bl	800a994 <lfs_bd_read>
 800cc8a:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 800cc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d001      	beq.n	800cc96 <lfs_dir_commitcrc+0x206>
                return err;
 800cc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc94:	e034      	b.n	800cd00 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 800cc96:	f107 030b 	add.w	r3, r7, #11
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cca0:	f003 fcf4 	bl	801068c <lfs_crc>
 800cca4:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800cca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca8:	3301      	adds	r3, #1
 800ccaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccae:	3304      	adds	r3, #4
 800ccb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d3c9      	bcc.n	800cc4a <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 800ccb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d002      	beq.n	800ccc2 <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 800ccbc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800ccc0:	e01e      	b.n	800cd00 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 800ccc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccc6:	1ad3      	subs	r3, r2, r3
 800ccc8:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7fd fd85 	bl	800a7dc <lfs_min>
 800ccd2:	4602      	mov	r2, r0
 800ccd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccd6:	4413      	add	r3, r2
 800ccd8:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 800ccda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d206      	bcs.n	800ccf0 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 800cce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce4:	3b08      	subs	r3, #8
 800cce6:	4619      	mov	r1, r3
 800cce8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ccea:	f7fd fd77 	bl	800a7dc <lfs_min>
 800ccee:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 800ccf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf2:	3304      	adds	r3, #4
 800ccf4:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800ccf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d39f      	bcc.n	800cc3e <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 800ccfe:	2300      	movs	r3, #0
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	374c      	adds	r7, #76	; 0x4c
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd90      	pop	{r4, r7, pc}

0800cd08 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b08a      	sub	sp, #40	; 0x28
 800cd0c:	af04      	add	r7, sp, #16
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 800cd12:	2300      	movs	r3, #0
 800cd14:	617b      	str	r3, [r7, #20]
 800cd16:	e016      	b.n	800cd46 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	f003 0301 	and.w	r3, r3, #1
 800cd22:	bfb8      	it	lt
 800cd24:	425b      	neglt	r3, r3
 800cd26:	009b      	lsls	r3, r3, #2
 800cd28:	683a      	ldr	r2, [r7, #0]
 800cd2a:	4413      	add	r3, r2
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f7fe fcb8 	bl	800b6a4 <lfs_alloc>
 800cd34:	60f8      	str	r0, [r7, #12]
        if (err) {
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d001      	beq.n	800cd40 <lfs_dir_alloc+0x38>
            return err;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	e058      	b.n	800cdf2 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	3301      	adds	r3, #1
 800cd44:	617b      	str	r3, [r7, #20]
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	dde5      	ble.n	800cd18 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducability in case initial block is unreadable
    dir->rev = 0;
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800cd52:	6879      	ldr	r1, [r7, #4]
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 800cd58:	683a      	ldr	r2, [r7, #0]
 800cd5a:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 800cd5c:	2004      	movs	r0, #4
 800cd5e:	9003      	str	r0, [sp, #12]
 800cd60:	9202      	str	r2, [sp, #8]
 800cd62:	2200      	movs	r2, #0
 800cd64:	9201      	str	r2, [sp, #4]
 800cd66:	9300      	str	r3, [sp, #0]
 800cd68:	2304      	movs	r3, #4
 800cd6a:	460a      	mov	r2, r1
 800cd6c:	2100      	movs	r1, #0
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f7fd fe10 	bl	800a994 <lfs_bd_read>
 800cd74:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	689b      	ldr	r3, [r3, #8]
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7fd fd9e 	bl	800a8bc <lfs_fromle32>
 800cd80:	4602      	mov	r2, r0
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d005      	beq.n	800cd98 <lfs_dir_alloc+0x90>
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800cd92:	d001      	beq.n	800cd98 <lfs_dir_alloc+0x90>
        return err;
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	e02c      	b.n	800cdf2 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cd9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	dd0e      	ble.n	800cdc0 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	689a      	ldr	r2, [r3, #8]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cdaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdac:	3301      	adds	r3, #1
 800cdae:	f043 0301 	orr.w	r3, r3, #1
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	4610      	mov	r0, r2
 800cdb6:	f7fd fd36 	bl	800a826 <lfs_alignup>
 800cdba:	4602      	mov	r2, r0
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	2204      	movs	r2, #4
 800cdc4:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cdcc:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cdda:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cde2:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	2200      	movs	r2, #0
 800cde8:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	2200      	movs	r2, #0
 800cdee:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 800cdf0:	2300      	movs	r3, #0
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3718      	adds	r7, #24
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
	...

0800cdfc <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b08a      	sub	sp, #40	; 0x28
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	3348      	adds	r3, #72	; 0x48
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	6879      	ldr	r1, [r7, #4]
 800ce10:	68f8      	ldr	r0, [r7, #12]
 800ce12:	f7ff fc11 	bl	800c638 <lfs_dir_getgstate>
 800ce16:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 800ce18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d001      	beq.n	800ce22 <lfs_dir_drop+0x26>
        return err;
 800ce1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce20:	e022      	b.n	800ce68 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	3318      	adds	r3, #24
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7fe f977 	bl	800b11a <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	7ddb      	ldrb	r3, [r3, #23]
 800ce30:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800ce34:	051a      	lsls	r2, r3, #20
 800ce36:	4b0e      	ldr	r3, [pc, #56]	; (800ce70 <lfs_dir_drop+0x74>)
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	61fb      	str	r3, [r7, #28]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	3318      	adds	r3, #24
 800ce40:	623b      	str	r3, [r7, #32]
 800ce42:	f107 021c 	add.w	r2, r7, #28
 800ce46:	2301      	movs	r3, #1
 800ce48:	68b9      	ldr	r1, [r7, #8]
 800ce4a:	68f8      	ldr	r0, [r7, #12]
 800ce4c:	f000 fbac 	bl	800d5a8 <lfs_dir_commit>
 800ce50:	6278      	str	r0, [r7, #36]	; 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	3318      	adds	r3, #24
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7fe f945 	bl	800b0e6 <lfs_pair_fromle32>
    if (err) {
 800ce5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d001      	beq.n	800ce66 <lfs_dir_drop+0x6a>
        return err;
 800ce62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce64:	e000      	b.n	800ce68 <lfs_dir_drop+0x6c>
    }

    return 0;
 800ce66:	2300      	movs	r3, #0
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3728      	adds	r7, #40	; 0x28
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}
 800ce70:	000ffc08 	.word	0x000ffc08

0800ce74 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b092      	sub	sp, #72	; 0x48
 800ce78:	af04      	add	r7, sp, #16
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
 800ce80:	603b      	str	r3, [r7, #0]
    // create tail directory
    lfs_alloc_ack(lfs);
 800ce82:	68f8      	ldr	r0, [r7, #12]
 800ce84:	f7fe fbee 	bl	800b664 <lfs_alloc_ack>
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 800ce88:	f107 0314 	add.w	r3, r7, #20
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	68f8      	ldr	r0, [r7, #12]
 800ce90:	f7ff ff3a 	bl	800cd08 <lfs_dir_alloc>
 800ce94:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800ce96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d001      	beq.n	800cea0 <lfs_dir_split+0x2c>
        return err;
 800ce9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce9e:	e03c      	b.n	800cf1a <lfs_dir_split+0xa6>
    }

    tail.split = dir->split;
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	7ddb      	ldrb	r3, [r3, #23]
 800cea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    tail.tail[0] = dir->tail[0];
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	699b      	ldr	r3, [r3, #24]
 800ceac:	62fb      	str	r3, [r7, #44]	; 0x2c
    tail.tail[1] = dir->tail[1];
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	69db      	ldr	r3, [r3, #28]
 800ceb2:	633b      	str	r3, [r7, #48]	; 0x30

    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 800ceb4:	f107 0114 	add.w	r1, r7, #20
 800ceb8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cebc:	9302      	str	r3, [sp, #8]
 800cebe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cec2:	9301      	str	r3, [sp, #4]
 800cec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cec6:	9300      	str	r3, [sp, #0]
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	687a      	ldr	r2, [r7, #4]
 800cecc:	68f8      	ldr	r0, [r7, #12]
 800cece:	f000 f853 	bl	800cf78 <lfs_dir_compact>
 800ced2:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800ced4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d001      	beq.n	800cede <lfs_dir_split+0x6a>
        return err;
 800ceda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cedc:	e01d      	b.n	800cf1a <lfs_dir_split+0xa6>
    }

    dir->tail[0] = tail.pair[0];
 800cede:	697a      	ldr	r2, [r7, #20]
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 800cee4:	69ba      	ldr	r2, [r7, #24]
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	61da      	str	r2, [r3, #28]
    dir->split = true;
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	2201      	movs	r2, #1
 800ceee:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800cef0:	68ba      	ldr	r2, [r7, #8]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	3320      	adds	r3, #32
 800cef6:	4619      	mov	r1, r3
 800cef8:	4610      	mov	r0, r2
 800cefa:	f7fe f89d 	bl	800b038 <lfs_pair_cmp>
 800cefe:	4603      	mov	r3, r0
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d109      	bne.n	800cf18 <lfs_dir_split+0xa4>
 800cf04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d105      	bne.n	800cf18 <lfs_dir_split+0xa4>
        lfs->root[0] = tail.pair[0];
 800cf0c:	697a      	ldr	r2, [r7, #20]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800cf12:	69ba      	ldr	r2, [r7, #24]
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 800cf18:	2300      	movs	r3, #0
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3738      	adds	r7, #56	; 0x38
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}

0800cf22 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800cf22:	b580      	push	{r7, lr}
 800cf24:	b086      	sub	sp, #24
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	60f8      	str	r0, [r7, #12]
 800cf2a:	60b9      	str	r1, [r7, #8]
 800cf2c:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800cf32:	68b8      	ldr	r0, [r7, #8]
 800cf34:	f7fe f983 	bl	800b23e <lfs_tag_dsize>
 800cf38:	4602      	mov	r2, r0
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	441a      	add	r2, r3
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	601a      	str	r2, [r3, #0]
    return 0;
 800cf44:	2300      	movs	r3, #0
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3718      	adds	r7, #24
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}

0800cf4e <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b086      	sub	sp, #24
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	60f8      	str	r0, [r7, #12]
 800cf56:	60b9      	str	r1, [r7, #8]
 800cf58:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	6818      	ldr	r0, [r3, #0]
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	6859      	ldr	r1, [r3, #4]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	68ba      	ldr	r2, [r7, #8]
 800cf6a:	f7ff fd11 	bl	800c990 <lfs_dir_commitattr>
 800cf6e:	4603      	mov	r3, r0
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3718      	adds	r7, #24
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800cf78:	b590      	push	{r4, r7, lr}
 800cf7a:	b0ad      	sub	sp, #180	; 0xb4
 800cf7c:	af0a      	add	r7, sp, #40	; 0x28
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	607a      	str	r2, [r7, #4]
 800cf84:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	663b      	str	r3, [r7, #96]	; 0x60
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	685b      	ldr	r3, [r3, #4]
 800cf90:	667b      	str	r3, [r7, #100]	; 0x64
    bool relocated = false;
 800cf92:	2300      	movs	r3, #0
 800cf94:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    bool tired = false;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    // should we split?
    while (end - begin > 1) {
 800cf9e:	e08f      	b.n	800d0c0 <lfs_dir_compact+0x148>
        // find size
        lfs_size_t size = 0;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	65fb      	str	r3, [r7, #92]	; 0x5c
        int err = lfs_dir_traverse(lfs,
 800cfa4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800cfa8:	425b      	negs	r3, r3
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	b21b      	sxth	r3, r3
 800cfae:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800cfb2:	9208      	str	r2, [sp, #32]
 800cfb4:	4aa4      	ldr	r2, [pc, #656]	; (800d248 <lfs_dir_compact+0x2d0>)
 800cfb6:	9207      	str	r2, [sp, #28]
 800cfb8:	9306      	str	r3, [sp, #24]
 800cfba:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800cfbe:	9305      	str	r3, [sp, #20]
 800cfc0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800cfc4:	9304      	str	r3, [sp, #16]
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	9303      	str	r3, [sp, #12]
 800cfca:	4ba0      	ldr	r3, [pc, #640]	; (800d24c <lfs_dir_compact+0x2d4>)
 800cfcc:	9302      	str	r3, [sp, #8]
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	9301      	str	r3, [sp, #4]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	9300      	str	r3, [sp, #0]
 800cfd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800cfe0:	68f8      	ldr	r0, [r7, #12]
 800cfe2:	f7fe fe49 	bl	800bc78 <lfs_dir_traverse>
 800cfe6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                source, 0, 0xffffffff, attrs, attrcount,
                LFS_MKTAG(0x400, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                begin, end, -begin,
                lfs_dir_commit_size, &size);
        if (err) {
 800cfea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d002      	beq.n	800cff8 <lfs_dir_compact+0x80>
            return err;
 800cff2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cff6:	e2cc      	b.n	800d592 <lfs_dir_compact+0x61a>
        }

        // space is complicated, we need room for tail, crc, gstate,
        // cleanup delete, and we cap at half a block to give room
        // for metadata updates.
        if (end - begin < 0xff &&
 800cff8:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800cffc:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800d000:	1ad3      	subs	r3, r2, r3
 800d002:	2bfe      	cmp	r3, #254	; 0xfe
 800d004:	dc22      	bgt.n	800d04c <lfs_dir_compact+0xd4>
                size <= lfs_min(lfs->cfg->block_size - 36,
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d00c:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                    lfs_alignup((lfs->cfg->metadata_max ?
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                size <= lfs_min(lfs->cfg->block_size - 36,
 800d016:	2b00      	cmp	r3, #0
 800d018:	d004      	beq.n	800d024 <lfs_dir_compact+0xac>
                            lfs->cfg->metadata_max : lfs->cfg->block_size)/2,
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d01e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                size <= lfs_min(lfs->cfg->block_size - 36,
 800d020:	085b      	lsrs	r3, r3, #1
 800d022:	e003      	b.n	800d02c <lfs_dir_compact+0xb4>
                            lfs->cfg->metadata_max : lfs->cfg->block_size)/2,
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                size <= lfs_min(lfs->cfg->block_size - 36,
 800d02a:	085b      	lsrs	r3, r3, #1
                        lfs->cfg->prog_size))) {
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d030:	6a12      	ldr	r2, [r2, #32]
                size <= lfs_min(lfs->cfg->block_size - 36,
 800d032:	4611      	mov	r1, r2
 800d034:	4618      	mov	r0, r3
 800d036:	f7fd fbf6 	bl	800a826 <lfs_alignup>
 800d03a:	4603      	mov	r3, r0
 800d03c:	4619      	mov	r1, r3
 800d03e:	4620      	mov	r0, r4
 800d040:	f7fd fbcc 	bl	800a7dc <lfs_min>
 800d044:	4602      	mov	r2, r0
 800d046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
        if (end - begin < 0xff &&
 800d048:	429a      	cmp	r2, r3
 800d04a:	d242      	bcs.n	800d0d2 <lfs_dir_compact+0x15a>
        }

        // can't fit, need to split, we should really be finding the
        // largest size that fits with a small binary search, but right now
        // it's not worth the code size
        uint16_t split = (end - begin) / 2;
 800d04c:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800d050:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800d054:	1ad3      	subs	r3, r2, r3
 800d056:	0fda      	lsrs	r2, r3, #31
 800d058:	4413      	add	r3, r2
 800d05a:	105b      	asrs	r3, r3, #1
 800d05c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800d060:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800d064:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800d068:	4413      	add	r3, r2
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800d070:	9202      	str	r2, [sp, #8]
 800d072:	9301      	str	r3, [sp, #4]
 800d074:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d078:	9300      	str	r3, [sp, #0]
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	68b9      	ldr	r1, [r7, #8]
 800d080:	68f8      	ldr	r0, [r7, #12]
 800d082:	f7ff fef7 	bl	800ce74 <lfs_dir_split>
 800d086:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                source, begin+split, end);
        if (err) {
 800d08a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d00f      	beq.n	800d0b2 <lfs_dir_compact+0x13a>
            // if we fail to split, we may be able to overcompact, unless
            // we're too big for even the full block, in which case our
            // only option is to error
            if (err == LFS_ERR_NOSPC && size <= lfs->cfg->block_size - 36) {
 800d092:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d096:	f113 0f1c 	cmn.w	r3, #28
 800d09a:	d107      	bne.n	800d0ac <lfs_dir_compact+0x134>
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0a2:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800d0a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d214      	bcs.n	800d0d6 <lfs_dir_compact+0x15e>
                break;
            }
            return err;
 800d0ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d0b0:	e26f      	b.n	800d592 <lfs_dir_compact+0x61a>
        }

        end = begin + split;
 800d0b2:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800d0b6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800d0ba:	4413      	add	r3, r2
 800d0bc:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
    while (end - begin > 1) {
 800d0c0:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800d0c4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800d0c8:	1ad3      	subs	r3, r2, r3
 800d0ca:	2b01      	cmp	r3, #1
 800d0cc:	f73f af68 	bgt.w	800cfa0 <lfs_dir_compact+0x28>
 800d0d0:	e002      	b.n	800d0d8 <lfs_dir_compact+0x160>
            break;
 800d0d2:	bf00      	nop
 800d0d4:	e000      	b.n	800d0d8 <lfs_dir_compact+0x160>
                break;
 800d0d6:	bf00      	nop
    }

    // increment revision count
    dir->rev += 1;
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	1c5a      	adds	r2, r3, #1
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	609a      	str	r2, [r3, #8]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    if (lfs->cfg->block_cycles > 0 &&
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	dd5b      	ble.n	800d1a4 <lfs_dir_compact+0x22c>
            (dir->rev % ((lfs->cfg->block_cycles+1)|1) == 0)) {
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	689b      	ldr	r3, [r3, #8]
 800d0f0:	68fa      	ldr	r2, [r7, #12]
 800d0f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d0f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d0f6:	3201      	adds	r2, #1
 800d0f8:	f042 0201 	orr.w	r2, r2, #1
 800d0fc:	fbb3 f1f2 	udiv	r1, r3, r2
 800d100:	fb01 f202 	mul.w	r2, r1, r2
 800d104:	1a9b      	subs	r3, r3, r2
    if (lfs->cfg->block_cycles > 0 &&
 800d106:	2b00      	cmp	r3, #0
 800d108:	d14c      	bne.n	800d1a4 <lfs_dir_compact+0x22c>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	2200      	movs	r2, #0
 800d10e:	657a      	str	r2, [r7, #84]	; 0x54
 800d110:	2201      	movs	r2, #1
 800d112:	65ba      	str	r2, [r7, #88]	; 0x58
 800d114:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800d118:	4611      	mov	r1, r2
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7fd ff8c 	bl	800b038 <lfs_pair_cmp>
 800d120:	4603      	mov	r3, r0
 800d122:	2b00      	cmp	r3, #0
 800d124:	d13a      	bne.n	800d19c <lfs_dir_compact+0x224>
            // oh no! we're writing too much to the superblock,
            // should we expand?
            lfs_ssize_t res = lfs_fs_rawsize(lfs);
 800d126:	68f8      	ldr	r0, [r7, #12]
 800d128:	f003 f9be 	bl	80104a8 <lfs_fs_rawsize>
 800d12c:	67b8      	str	r0, [r7, #120]	; 0x78
            if (res < 0) {
 800d12e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d130:	2b00      	cmp	r3, #0
 800d132:	da01      	bge.n	800d138 <lfs_dir_compact+0x1c0>
                return res;
 800d134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d136:	e22c      	b.n	800d592 <lfs_dir_compact+0x61a>
            }

            // do we have extra space? littlefs can't reclaim this space
            // by itself, so expand cautiously
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d13e:	085a      	lsrs	r2, r3, #1
 800d140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d142:	429a      	cmp	r2, r3
 800d144:	d92e      	bls.n	800d1a4 <lfs_dir_compact+0x22c>
                LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	689b      	ldr	r3, [r3, #8]
 800d14a:	4a41      	ldr	r2, [pc, #260]	; (800d250 <lfs_dir_compact+0x2d8>)
 800d14c:	9200      	str	r2, [sp, #0]
 800d14e:	f240 626c 	movw	r2, #1644	; 0x66c
 800d152:	4940      	ldr	r1, [pc, #256]	; (800d254 <lfs_dir_compact+0x2dc>)
 800d154:	4840      	ldr	r0, [pc, #256]	; (800d258 <lfs_dir_compact+0x2e0>)
 800d156:	f014 fadf 	bl	8021718 <iprintf>
                int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800d15a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800d15e:	9302      	str	r3, [sp, #8]
 800d160:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800d164:	9301      	str	r3, [sp, #4]
 800d166:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d16a:	9300      	str	r3, [sp, #0]
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	68b9      	ldr	r1, [r7, #8]
 800d172:	68f8      	ldr	r0, [r7, #12]
 800d174:	f7ff fe7e 	bl	800ce74 <lfs_dir_split>
 800d178:	6778      	str	r0, [r7, #116]	; 0x74
                        source, begin, end);
                if (err && err != LFS_ERR_NOSPC) {
 800d17a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d005      	beq.n	800d18c <lfs_dir_compact+0x214>
 800d180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d182:	f113 0f1c 	cmn.w	r3, #28
 800d186:	d001      	beq.n	800d18c <lfs_dir_compact+0x214>
                    return err;
 800d188:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d18a:	e202      	b.n	800d592 <lfs_dir_compact+0x61a>
                }

                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                if (!err) {
 800d18c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d108      	bne.n	800d1a4 <lfs_dir_compact+0x22c>
                    end = begin;
 800d192:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800d196:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 800d19a:	e003      	b.n	800d1a4 <lfs_dir_compact+0x22c>
            // this, relocations increase the overall complexity of
            // lfs_migration, which is already a delicate operation.
#endif
        } else {
            // we're writing too much, time to relocate
            tired = true;
 800d19c:	2301      	movs	r3, #1
 800d19e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800d1a2:	e16b      	b.n	800d47c <lfs_dir_compact+0x504>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 800d1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	643b      	str	r3, [r7, #64]	; 0x40
 800d1ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d1b2:	647b      	str	r3, [r7, #68]	; 0x44
 800d1b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d1b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d004      	beq.n	800d1d2 <lfs_dir_compact+0x25a>
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1ce:	3b08      	subs	r3, #8
 800d1d0:	e003      	b.n	800d1da <lfs_dir_compact+0x262>
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1d8:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800d1da:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	68f8      	ldr	r0, [r7, #12]
 800d1e4:	f7fd fec8 	bl	800af78 <lfs_bd_erase>
 800d1e8:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 800d1ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d006      	beq.n	800d1fe <lfs_dir_compact+0x286>
                if (err == LFS_ERR_CORRUPT) {
 800d1f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d1f2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800d1f6:	f000 8136 	beq.w	800d466 <lfs_dir_compact+0x4ee>
                    goto relocate;
                }
                return err;
 800d1fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d1fc:	e1c9      	b.n	800d592 <lfs_dir_compact+0x61a>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	689b      	ldr	r3, [r3, #8]
 800d202:	4618      	mov	r0, r3
 800d204:	f7fd fb65 	bl	800a8d2 <lfs_tole32>
 800d208:	4602      	mov	r2, r0
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800d214:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800d218:	2304      	movs	r3, #4
 800d21a:	68f8      	ldr	r0, [r7, #12]
 800d21c:	f7ff fb82 	bl	800c924 <lfs_dir_commitprog>
 800d220:	6738      	str	r0, [r7, #112]	; 0x70
            dir->rev = lfs_fromle32(dir->rev);
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	689b      	ldr	r3, [r3, #8]
 800d226:	4618      	mov	r0, r3
 800d228:	f7fd fb48 	bl	800a8bc <lfs_fromle32>
 800d22c:	4602      	mov	r2, r0
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	609a      	str	r2, [r3, #8]
            if (err) {
 800d232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d234:	2b00      	cmp	r3, #0
 800d236:	d011      	beq.n	800d25c <lfs_dir_compact+0x2e4>
                if (err == LFS_ERR_CORRUPT) {
 800d238:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d23a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800d23e:	f000 8114 	beq.w	800d46a <lfs_dir_compact+0x4f2>
                    goto relocate;
                }
                return err;
 800d242:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d244:	e1a5      	b.n	800d592 <lfs_dir_compact+0x61a>
 800d246:	bf00      	nop
 800d248:	0800cf23 	.word	0x0800cf23
 800d24c:	400ffc00 	.word	0x400ffc00
 800d250:	080233f4 	.word	0x080233f4
 800d254:	080232e8 	.word	0x080232e8
 800d258:	08023444 	.word	0x08023444
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 800d25c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800d260:	425b      	negs	r3, r3
 800d262:	b29b      	uxth	r3, r3
 800d264:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800d266:	68fa      	ldr	r2, [r7, #12]
 800d268:	637a      	str	r2, [r7, #52]	; 0x34
 800d26a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800d26e:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 800d270:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800d274:	9208      	str	r2, [sp, #32]
 800d276:	4aaa      	ldr	r2, [pc, #680]	; (800d520 <lfs_dir_compact+0x5a8>)
 800d278:	9207      	str	r2, [sp, #28]
 800d27a:	9306      	str	r3, [sp, #24]
 800d27c:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800d280:	9305      	str	r3, [sp, #20]
 800d282:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800d286:	9304      	str	r3, [sp, #16]
 800d288:	2300      	movs	r3, #0
 800d28a:	9303      	str	r3, [sp, #12]
 800d28c:	4ba5      	ldr	r3, [pc, #660]	; (800d524 <lfs_dir_compact+0x5ac>)
 800d28e:	9302      	str	r3, [sp, #8]
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	9301      	str	r3, [sp, #4]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	9300      	str	r3, [sp, #0]
 800d298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d29c:	2200      	movs	r2, #0
 800d29e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800d2a2:	68f8      	ldr	r0, [r7, #12]
 800d2a4:	f7fe fce8 	bl	800bc78 <lfs_dir_traverse>
 800d2a8:	6738      	str	r0, [r7, #112]	; 0x70
                        lfs, &commit});
            if (err) {
 800d2aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d006      	beq.n	800d2be <lfs_dir_compact+0x346>
                if (err == LFS_ERR_CORRUPT) {
 800d2b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d2b2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800d2b6:	f000 80da 	beq.w	800d46e <lfs_dir_compact+0x4f6>
                    goto relocate;
                }
                return err;
 800d2ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d2bc:	e169      	b.n	800d592 <lfs_dir_compact+0x61a>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	3318      	adds	r3, #24
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f7fd fe9d 	bl	800b002 <lfs_pair_isnull>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	f083 0301 	eor.w	r3, r3, #1
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d022      	beq.n	800d31a <lfs_dir_compact+0x3a2>
                lfs_pair_tole32(dir->tail);
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	3318      	adds	r3, #24
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f7fd ff1e 	bl	800b11a <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	7ddb      	ldrb	r3, [r3, #23]
 800d2e2:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800d2e6:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800d2e8:	4a8f      	ldr	r2, [pc, #572]	; (800d528 <lfs_dir_compact+0x5b0>)
 800d2ea:	431a      	orrs	r2, r3
                        dir->tail);
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 800d2f0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800d2f4:	68f8      	ldr	r0, [r7, #12]
 800d2f6:	f7ff fb4b 	bl	800c990 <lfs_dir_commitattr>
 800d2fa:	6738      	str	r0, [r7, #112]	; 0x70
                lfs_pair_fromle32(dir->tail);
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	3318      	adds	r3, #24
 800d300:	4618      	mov	r0, r3
 800d302:	f7fd fef0 	bl	800b0e6 <lfs_pair_fromle32>
                if (err) {
 800d306:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d006      	beq.n	800d31a <lfs_dir_compact+0x3a2>
                    if (err == LFS_ERR_CORRUPT) {
 800d30c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d30e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800d312:	f000 80ae 	beq.w	800d472 <lfs_dir_compact+0x4fa>
                        goto relocate;
                    }
                    return err;
 800d316:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d318:	e13b      	b.n	800d592 <lfs_dir_compact+0x61a>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 800d31a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d31e:	2200      	movs	r2, #0
 800d320:	601a      	str	r2, [r3, #0]
 800d322:	605a      	str	r2, [r3, #4]
 800d324:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800d326:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800d32a:	f083 0301 	eor.w	r3, r3, #1
 800d32e:	b2db      	uxtb	r3, r3
 800d330:	2b00      	cmp	r3, #0
 800d332:	d011      	beq.n	800d358 <lfs_dir_compact+0x3e0>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800d33a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d33e:	4611      	mov	r1, r2
 800d340:	4618      	mov	r0, r3
 800d342:	f7fd ff90 	bl	800b266 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d34c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d350:	4611      	mov	r1, r2
 800d352:	4618      	mov	r0, r3
 800d354:	f7fd ff87 	bl	800b266 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800d35e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d362:	4611      	mov	r1, r2
 800d364:	4618      	mov	r0, r3
 800d366:	f7fd ff7e 	bl	800b266 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800d36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d370:	f023 0303 	bic.w	r3, r3, #3
 800d374:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 800d376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d37a:	461a      	mov	r2, r3
 800d37c:	68b9      	ldr	r1, [r7, #8]
 800d37e:	68f8      	ldr	r0, [r7, #12]
 800d380:	f7ff f95a 	bl	800c638 <lfs_dir_getgstate>
 800d384:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 800d386:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d001      	beq.n	800d390 <lfs_dir_compact+0x418>
                return err;
 800d38c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d38e:	e100      	b.n	800d592 <lfs_dir_compact+0x61a>
            }

            if (!lfs_gstate_iszero(&delta)) {
 800d390:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d394:	4618      	mov	r0, r3
 800d396:	f7fd ff8b 	bl	800b2b0 <lfs_gstate_iszero>
 800d39a:	4603      	mov	r3, r0
 800d39c:	f083 0301 	eor.w	r3, r3, #1
 800d3a0:	b2db      	uxtb	r3, r3
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d016      	beq.n	800d3d4 <lfs_dir_compact+0x45c>
                lfs_gstate_tole32(&delta);
 800d3a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7fe f812 	bl	800b3d4 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 800d3b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d3b4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800d3b8:	4a5c      	ldr	r2, [pc, #368]	; (800d52c <lfs_dir_compact+0x5b4>)
 800d3ba:	68f8      	ldr	r0, [r7, #12]
 800d3bc:	f7ff fae8 	bl	800c990 <lfs_dir_commitattr>
 800d3c0:	6738      	str	r0, [r7, #112]	; 0x70
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 800d3c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d005      	beq.n	800d3d4 <lfs_dir_compact+0x45c>
                    if (err == LFS_ERR_CORRUPT) {
 800d3c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3ca:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800d3ce:	d052      	beq.n	800d476 <lfs_dir_compact+0x4fe>
                        goto relocate;
                    }
                    return err;
 800d3d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3d2:	e0de      	b.n	800d592 <lfs_dir_compact+0x61a>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 800d3d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d3d8:	4619      	mov	r1, r3
 800d3da:	68f8      	ldr	r0, [r7, #12]
 800d3dc:	f7ff fb58 	bl	800ca90 <lfs_dir_commitcrc>
 800d3e0:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 800d3e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d005      	beq.n	800d3f4 <lfs_dir_compact+0x47c>
                if (err == LFS_ERR_CORRUPT) {
 800d3e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3ea:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800d3ee:	d044      	beq.n	800d47a <lfs_dir_compact+0x502>
                    goto relocate;
                }
                return err;
 800d3f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3f2:	e0ce      	b.n	800d592 <lfs_dir_compact+0x61a>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800d3f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3f6:	68fa      	ldr	r2, [r7, #12]
 800d3f8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d3fa:	6a12      	ldr	r2, [r2, #32]
 800d3fc:	fbb3 f1f2 	udiv	r1, r3, r2
 800d400:	fb01 f202 	mul.w	r2, r1, r2
 800d404:	1a9b      	subs	r3, r3, r2
 800d406:	2b00      	cmp	r3, #0
 800d408:	d006      	beq.n	800d418 <lfs_dir_compact+0x4a0>
 800d40a:	4b49      	ldr	r3, [pc, #292]	; (800d530 <lfs_dir_compact+0x5b8>)
 800d40c:	4a49      	ldr	r2, [pc, #292]	; (800d534 <lfs_dir_compact+0x5bc>)
 800d40e:	f44f 61de 	mov.w	r1, #1776	; 0x6f0
 800d412:	4849      	ldr	r0, [pc, #292]	; (800d538 <lfs_dir_compact+0x5c0>)
 800d414:	f013 ff2a 	bl	802126c <__assert_func>
            lfs_pair_swap(dir->pair);
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7fd fddc 	bl	800afd8 <lfs_pair_swap>
            dir->count = end - begin;
 800d420:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800d424:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800d428:	1ad3      	subs	r3, r2, r3
 800d42a:	b29a      	uxth	r2, r3
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 800d430:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 800d436:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	3348      	adds	r3, #72	; 0x48
 800d440:	2200      	movs	r2, #0
 800d442:	601a      	str	r2, [r3, #0]
 800d444:	605a      	str	r2, [r3, #4]
 800d446:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800d448:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800d44c:	f083 0301 	eor.w	r3, r3, #1
 800d450:	b2db      	uxtb	r3, r3
 800d452:	2b00      	cmp	r3, #0
 800d454:	d078      	beq.n	800d548 <lfs_dir_compact+0x5d0>
                lfs->gdisk = lfs->gstate;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	68fa      	ldr	r2, [r7, #12]
 800d45a:	333c      	adds	r3, #60	; 0x3c
 800d45c:	3230      	adds	r2, #48	; 0x30
 800d45e:	ca07      	ldmia	r2, {r0, r1, r2}
 800d460:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 800d464:	e070      	b.n	800d548 <lfs_dir_compact+0x5d0>
                    goto relocate;
 800d466:	bf00      	nop
 800d468:	e008      	b.n	800d47c <lfs_dir_compact+0x504>
                    goto relocate;
 800d46a:	bf00      	nop
 800d46c:	e006      	b.n	800d47c <lfs_dir_compact+0x504>
                    goto relocate;
 800d46e:	bf00      	nop
 800d470:	e004      	b.n	800d47c <lfs_dir_compact+0x504>
                        goto relocate;
 800d472:	bf00      	nop
 800d474:	e002      	b.n	800d47c <lfs_dir_compact+0x504>
                        goto relocate;
 800d476:	bf00      	nop
 800d478:	e000      	b.n	800d47c <lfs_dir_compact+0x504>
                    goto relocate;
 800d47a:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 800d47c:	2301      	movs	r3, #1
 800d47e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        lfs_cache_drop(lfs, &lfs->pcache);
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	3310      	adds	r3, #16
 800d486:	4619      	mov	r1, r3
 800d488:	68f8      	ldr	r0, [r7, #12]
 800d48a:	f7fd fa5d 	bl	800a948 <lfs_cache_drop>
        if (!tired) {
 800d48e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800d492:	f083 0301 	eor.w	r3, r3, #1
 800d496:	b2db      	uxtb	r3, r3
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d009      	beq.n	800d4b0 <lfs_dir_compact+0x538>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	4a26      	ldr	r2, [pc, #152]	; (800d53c <lfs_dir_compact+0x5c4>)
 800d4a2:	9200      	str	r2, [sp, #0]
 800d4a4:	f240 7202 	movw	r2, #1794	; 0x702
 800d4a8:	4923      	ldr	r1, [pc, #140]	; (800d538 <lfs_dir_compact+0x5c0>)
 800d4aa:	4825      	ldr	r0, [pc, #148]	; (800d540 <lfs_dir_compact+0x5c8>)
 800d4ac:	f014 f934 	bl	8021718 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	617a      	str	r2, [r7, #20]
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	61ba      	str	r2, [r7, #24]
 800d4ba:	f107 0214 	add.w	r2, r7, #20
 800d4be:	4611      	mov	r1, r2
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f7fd fdb9 	bl	800b038 <lfs_pair_cmp>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d10c      	bne.n	800d4e6 <lfs_dir_compact+0x56e>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	685b      	ldr	r3, [r3, #4]
 800d4d0:	4a1a      	ldr	r2, [pc, #104]	; (800d53c <lfs_dir_compact+0x5c4>)
 800d4d2:	9200      	str	r2, [sp, #0]
 800d4d4:	f240 7207 	movw	r2, #1799	; 0x707
 800d4d8:	4917      	ldr	r1, [pc, #92]	; (800d538 <lfs_dir_compact+0x5c0>)
 800d4da:	481a      	ldr	r0, [pc, #104]	; (800d544 <lfs_dir_compact+0x5cc>)
 800d4dc:	f014 f91c 	bl	8021718 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 800d4e0:	f06f 031b 	mvn.w	r3, #27
 800d4e4:	e055      	b.n	800d592 <lfs_dir_compact+0x61a>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	3304      	adds	r3, #4
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	68f8      	ldr	r0, [r7, #12]
 800d4ee:	f7fe f8d9 	bl	800b6a4 <lfs_alloc>
 800d4f2:	66b8      	str	r0, [r7, #104]	; 0x68
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800d4f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d00c      	beq.n	800d514 <lfs_dir_compact+0x59c>
 800d4fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d4fc:	f113 0f1c 	cmn.w	r3, #28
 800d500:	d106      	bne.n	800d510 <lfs_dir_compact+0x598>
 800d502:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800d506:	f083 0301 	eor.w	r3, r3, #1
 800d50a:	b2db      	uxtb	r3, r3
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d001      	beq.n	800d514 <lfs_dir_compact+0x59c>
            return err;
 800d510:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d512:	e03e      	b.n	800d592 <lfs_dir_compact+0x61a>
        }

        tired = false;
 800d514:	2300      	movs	r3, #0
 800d516:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
        continue;
 800d51a:	bf00      	nop
    while (true) {
 800d51c:	e642      	b.n	800d1a4 <lfs_dir_compact+0x22c>
 800d51e:	bf00      	nop
 800d520:	0800cf4f 	.word	0x0800cf4f
 800d524:	400ffc00 	.word	0x400ffc00
 800d528:	000ffc08 	.word	0x000ffc08
 800d52c:	7ffffc0c 	.word	0x7ffffc0c
 800d530:	08023474 	.word	0x08023474
 800d534:	08027208 	.word	0x08027208
 800d538:	080232e8 	.word	0x080232e8
 800d53c:	080233f4 	.word	0x080233f4
 800d540:	0802349c 	.word	0x0802349c
 800d544:	080234c0 	.word	0x080234c0
        break;
 800d548:	bf00      	nop
    }

    if (relocated) {
 800d54a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d01e      	beq.n	800d590 <lfs_dir_compact+0x618>
        // update references if we relocated
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 800d552:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800d554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d556:	68ba      	ldr	r2, [r7, #8]
 800d558:	6812      	ldr	r2, [r2, #0]
 800d55a:	68b9      	ldr	r1, [r7, #8]
 800d55c:	6849      	ldr	r1, [r1, #4]
 800d55e:	4c0f      	ldr	r4, [pc, #60]	; (800d59c <lfs_dir_compact+0x624>)
 800d560:	9403      	str	r4, [sp, #12]
 800d562:	9102      	str	r1, [sp, #8]
 800d564:	9201      	str	r2, [sp, #4]
 800d566:	9300      	str	r3, [sp, #0]
 800d568:	4603      	mov	r3, r0
 800d56a:	f44f 62e3 	mov.w	r2, #1816	; 0x718
 800d56e:	490c      	ldr	r1, [pc, #48]	; (800d5a0 <lfs_dir_compact+0x628>)
 800d570:	480c      	ldr	r0, [pc, #48]	; (800d5a4 <lfs_dir_compact+0x62c>)
 800d572:	f014 f8d1 	bl	8021718 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                oldpair[0], oldpair[1], dir->pair[0], dir->pair[1]);
        int err = lfs_fs_relocate(lfs, oldpair, dir->pair);
 800d576:	68ba      	ldr	r2, [r7, #8]
 800d578:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d57c:	4619      	mov	r1, r3
 800d57e:	68f8      	ldr	r0, [r7, #12]
 800d580:	f002 fc1a 	bl	800fdb8 <lfs_fs_relocate>
 800d584:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err) {
 800d586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d001      	beq.n	800d590 <lfs_dir_compact+0x618>
            return err;
 800d58c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d58e:	e000      	b.n	800d592 <lfs_dir_compact+0x61a>
        }
    }

    return 0;
 800d590:	2300      	movs	r3, #0
}
 800d592:	4618      	mov	r0, r3
 800d594:	378c      	adds	r7, #140	; 0x8c
 800d596:	46bd      	mov	sp, r7
 800d598:	bd90      	pop	{r4, r7, pc}
 800d59a:	bf00      	nop
 800d59c:	080233f4 	.word	0x080233f4
 800d5a0:	080232e8 	.word	0x080232e8
 800d5a4:	080234f8 	.word	0x080234f8

0800d5a8 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800d5a8:	b5b0      	push	{r4, r5, r7, lr}
 800d5aa:	b0b8      	sub	sp, #224	; 0xe0
 800d5ac:	af0a      	add	r7, sp, #40	; 0x28
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	60b9      	str	r1, [r7, #8]
 800d5b2:	607a      	str	r2, [r7, #4]
 800d5b4:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d5be:	e045      	b.n	800d64c <lfs_dir_commit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800d5c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d5c4:	3308      	adds	r3, #8
 800d5c6:	68ba      	ldr	r2, [r7, #8]
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d03a      	beq.n	800d642 <lfs_dir_commit+0x9a>
 800d5cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d5d0:	3308      	adds	r3, #8
 800d5d2:	68ba      	ldr	r2, [r7, #8]
 800d5d4:	4611      	mov	r1, r2
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7fd fd2e 	bl	800b038 <lfs_pair_cmp>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d12f      	bne.n	800d642 <lfs_dir_commit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800d5e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d5e6:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d12a      	bne.n	800d642 <lfs_dir_commit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800d5ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d023      	beq.n	800d642 <lfs_dir_commit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 800d5fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d5fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800d606:	429a      	cmp	r2, r3
 800d608:	d91b      	bls.n	800d642 <lfs_dir_commit+0x9a>
            int err = lfs_file_outline(lfs, f);
 800d60a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800d60e:	68f8      	ldr	r0, [r7, #12]
 800d610:	f001 f9be 	bl	800e990 <lfs_file_outline>
 800d614:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (err) {
 800d618:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d002      	beq.n	800d626 <lfs_dir_commit+0x7e>
                return err;
 800d620:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d624:	e36e      	b.n	800dd04 <lfs_dir_commit+0x75c>
            }

            err = lfs_file_flush(lfs, f);
 800d626:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800d62a:	68f8      	ldr	r0, [r7, #12]
 800d62c:	f001 f9d2 	bl	800e9d4 <lfs_file_flush>
 800d630:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (err) {
 800d634:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d002      	beq.n	800d642 <lfs_dir_commit+0x9a>
                return err;
 800d63c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d640:	e360      	b.n	800dd04 <lfs_dir_commit+0x75c>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800d642:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d64c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d650:	2b00      	cmp	r3, #0
 800d652:	d1b5      	bne.n	800d5c0 <lfs_dir_commit+0x18>
            }
        }
    }

    // calculate changes to the directory
    lfs_mdir_t olddir = *dir;
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800d65a:	461d      	mov	r5, r3
 800d65c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d65e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d660:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d664:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bool hasdelete = false;
 800d668:	2300      	movs	r3, #0
 800d66a:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
    for (int i = 0; i < attrcount; i++) {
 800d66e:	2300      	movs	r3, #0
 800d670:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d674:	e075      	b.n	800d762 <lfs_dir_commit+0x1ba>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800d676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d67a:	00db      	lsls	r3, r3, #3
 800d67c:	687a      	ldr	r2, [r7, #4]
 800d67e:	4413      	add	r3, r2
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	4618      	mov	r0, r3
 800d684:	f7fd fd94 	bl	800b1b0 <lfs_tag_type3>
 800d688:	4603      	mov	r3, r0
 800d68a:	461a      	mov	r2, r3
 800d68c:	f240 4301 	movw	r3, #1025	; 0x401
 800d690:	429a      	cmp	r2, r3
 800d692:	d106      	bne.n	800d6a2 <lfs_dir_commit+0xfa>
            dir->count += 1;
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	8a9b      	ldrh	r3, [r3, #20]
 800d698:	3301      	adds	r3, #1
 800d69a:	b29a      	uxth	r2, r3
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	829a      	strh	r2, [r3, #20]
 800d6a0:	e05a      	b.n	800d758 <lfs_dir_commit+0x1b0>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 800d6a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d6a6:	00db      	lsls	r3, r3, #3
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	4413      	add	r3, r2
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fd fd7e 	bl	800b1b0 <lfs_tag_type3>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	461a      	mov	r2, r3
 800d6b8:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d114      	bne.n	800d6ea <lfs_dir_commit+0x142>
            LFS_ASSERT(dir->count > 0);
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	8a9b      	ldrh	r3, [r3, #20]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d106      	bne.n	800d6d6 <lfs_dir_commit+0x12e>
 800d6c8:	4bac      	ldr	r3, [pc, #688]	; (800d97c <lfs_dir_commit+0x3d4>)
 800d6ca:	4aad      	ldr	r2, [pc, #692]	; (800d980 <lfs_dir_commit+0x3d8>)
 800d6cc:	f240 7141 	movw	r1, #1857	; 0x741
 800d6d0:	48ac      	ldr	r0, [pc, #688]	; (800d984 <lfs_dir_commit+0x3dc>)
 800d6d2:	f013 fdcb 	bl	802126c <__assert_func>
            dir->count -= 1;
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	8a9b      	ldrh	r3, [r3, #20]
 800d6da:	3b01      	subs	r3, #1
 800d6dc:	b29a      	uxth	r2, r3
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800d6e8:	e036      	b.n	800d758 <lfs_dir_commit+0x1b0>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 800d6ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d6ee:	00db      	lsls	r3, r3, #3
 800d6f0:	687a      	ldr	r2, [r7, #4]
 800d6f2:	4413      	add	r3, r2
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7fd fd4a 	bl	800b190 <lfs_tag_type1>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d702:	d129      	bne.n	800d758 <lfs_dir_commit+0x1b0>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 800d704:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d708:	00db      	lsls	r3, r3, #3
 800d70a:	687a      	ldr	r2, [r7, #4]
 800d70c:	4413      	add	r3, r2
 800d70e:	685b      	ldr	r3, [r3, #4]
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 800d716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d71a:	00db      	lsls	r3, r3, #3
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	4413      	add	r3, r2
 800d720:	685b      	ldr	r3, [r3, #4]
 800d722:	685a      	ldr	r2, [r3, #4]
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 800d728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d72c:	00db      	lsls	r3, r3, #3
 800d72e:	687a      	ldr	r2, [r7, #4]
 800d730:	4413      	add	r3, r2
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	4618      	mov	r0, r3
 800d736:	f7fd fd4b 	bl	800b1d0 <lfs_tag_chunk>
 800d73a:	4603      	mov	r3, r0
 800d73c:	f003 0301 	and.w	r3, r3, #1
 800d740:	2b00      	cmp	r3, #0
 800d742:	bf14      	ite	ne
 800d744:	2301      	movne	r3, #1
 800d746:	2300      	moveq	r3, #0
 800d748:	b2da      	uxtb	r2, r3
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	3318      	adds	r3, #24
 800d752:	4618      	mov	r0, r3
 800d754:	f7fd fcc7 	bl	800b0e6 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 800d758:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d75c:	3301      	adds	r3, #1
 800d75e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d762:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	429a      	cmp	r2, r3
 800d76a:	db84      	blt.n	800d676 <lfs_dir_commit+0xce>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 800d76c:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800d770:	2b00      	cmp	r3, #0
 800d772:	d045      	beq.n	800d800 <lfs_dir_commit+0x258>
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	8a9b      	ldrh	r3, [r3, #20]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d141      	bne.n	800d800 <lfs_dir_commit+0x258>
        lfs_mdir_t pdir;
        int err = lfs_fs_pred(lfs, dir->pair, &pdir);
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	f107 0214 	add.w	r2, r7, #20
 800d782:	4619      	mov	r1, r3
 800d784:	68f8      	ldr	r0, [r7, #12]
 800d786:	f002 fa37 	bl	800fbf8 <lfs_fs_pred>
 800d78a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (err && err != LFS_ERR_NOENT) {
 800d78e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d792:	2b00      	cmp	r3, #0
 800d794:	d011      	beq.n	800d7ba <lfs_dir_commit+0x212>
 800d796:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d79a:	f113 0f02 	cmn.w	r3, #2
 800d79e:	d00c      	beq.n	800d7ba <lfs_dir_commit+0x212>
            *dir = olddir;
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	461d      	mov	r5, r3
 800d7a4:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800d7a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d7aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d7ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d7b0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800d7b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d7b8:	e2a4      	b.n	800dd04 <lfs_dir_commit+0x75c>
        }

        if (err != LFS_ERR_NOENT && pdir.split) {
 800d7ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d7be:	f113 0f02 	cmn.w	r3, #2
 800d7c2:	d01d      	beq.n	800d800 <lfs_dir_commit+0x258>
 800d7c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d019      	beq.n	800d800 <lfs_dir_commit+0x258>
            err = lfs_dir_drop(lfs, &pdir, dir);
 800d7cc:	f107 0314 	add.w	r3, r7, #20
 800d7d0:	68ba      	ldr	r2, [r7, #8]
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	68f8      	ldr	r0, [r7, #12]
 800d7d6:	f7ff fb11 	bl	800cdfc <lfs_dir_drop>
 800d7da:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            if (err) {
 800d7de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d00c      	beq.n	800d800 <lfs_dir_commit+0x258>
                *dir = olddir;
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	461d      	mov	r5, r3
 800d7ea:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800d7ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d7f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d7f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d7f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 800d7fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d7fe:	e281      	b.n	800dd04 <lfs_dir_commit+0x75c>
            }
        }
    }

    if (dir->erased || dir->count >= 0xff) {
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	7d9b      	ldrb	r3, [r3, #22]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d104      	bne.n	800d812 <lfs_dir_commit+0x26a>
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	8a9b      	ldrh	r3, [r3, #20]
 800d80c:	2bfe      	cmp	r3, #254	; 0xfe
 800d80e:	f240 8130 	bls.w	800da72 <lfs_dir_commit+0x4ca>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 800d816:	657b      	str	r3, [r7, #84]	; 0x54
            .off = dir->off,
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800d81c:	65bb      	str	r3, [r7, #88]	; 0x58
            .ptag = dir->etag,
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 800d822:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d828:	663b      	str	r3, [r7, #96]	; 0x60
            .crc = 0xffffffff,

            .begin = dir->off,
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800d82e:	667b      	str	r3, [r7, #100]	; 0x64
            .end = (lfs->cfg->metadata_max ?
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800d836:	2b00      	cmp	r3, #0
 800d838:	d004      	beq.n	800d844 <lfs_dir_commit+0x29c>
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d83e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d840:	3b08      	subs	r3, #8
 800d842:	e003      	b.n	800d84c <lfs_dir_commit+0x2a4>
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d84a:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 800d84c:	66bb      	str	r3, [r7, #104]	; 0x68
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	3318      	adds	r3, #24
 800d852:	4618      	mov	r0, r3
 800d854:	f7fd fc61 	bl	800b11a <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	68da      	ldr	r2, [r3, #12]
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d864:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d868:	653b      	str	r3, [r7, #80]	; 0x50
        int err = lfs_dir_traverse(lfs,
 800d86a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d86e:	9308      	str	r3, [sp, #32]
 800d870:	4b45      	ldr	r3, [pc, #276]	; (800d988 <lfs_dir_commit+0x3e0>)
 800d872:	9307      	str	r3, [sp, #28]
 800d874:	2300      	movs	r3, #0
 800d876:	9306      	str	r3, [sp, #24]
 800d878:	2300      	movs	r3, #0
 800d87a:	9305      	str	r3, [sp, #20]
 800d87c:	2300      	movs	r3, #0
 800d87e:	9304      	str	r3, [sp, #16]
 800d880:	2300      	movs	r3, #0
 800d882:	9303      	str	r3, [sp, #12]
 800d884:	2300      	movs	r3, #0
 800d886:	9302      	str	r3, [sp, #8]
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	9301      	str	r3, [sp, #4]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	9300      	str	r3, [sp, #0]
 800d890:	460b      	mov	r3, r1
 800d892:	68b9      	ldr	r1, [r7, #8]
 800d894:	68f8      	ldr	r0, [r7, #12]
 800d896:	f7fe f9ef 	bl	800bc78 <lfs_dir_traverse>
 800d89a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	3318      	adds	r3, #24
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7fd fc1f 	bl	800b0e6 <lfs_pair_fromle32>
        if (err) {
 800d8a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d018      	beq.n	800d8e2 <lfs_dir_commit+0x33a>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800d8b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d8b4:	f113 0f1c 	cmn.w	r3, #28
 800d8b8:	f000 80dd 	beq.w	800da76 <lfs_dir_commit+0x4ce>
 800d8bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d8c0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800d8c4:	f000 80d7 	beq.w	800da76 <lfs_dir_commit+0x4ce>
                goto compact;
            }
            *dir = olddir;
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	461d      	mov	r5, r3
 800d8cc:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800d8d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d8d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d8d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d8d8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800d8dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d8e0:	e210      	b.n	800dd04 <lfs_dir_commit+0x75c>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 800d8e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	601a      	str	r2, [r3, #0]
 800d8ea:	605a      	str	r2, [r3, #4]
 800d8ec:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d8f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d8f8:	4611      	mov	r1, r2
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f7fd fcb3 	bl	800b266 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800d906:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d90a:	4611      	mov	r1, r2
 800d90c:	4618      	mov	r0, r3
 800d90e:	f7fd fcaa 	bl	800b266 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800d918:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d91c:	4611      	mov	r1, r2
 800d91e:	4618      	mov	r0, r3
 800d920:	f7fd fca1 	bl	800b266 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800d924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d926:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d92a:	f023 0303 	bic.w	r3, r3, #3
 800d92e:	643b      	str	r3, [r7, #64]	; 0x40
        if (!lfs_gstate_iszero(&delta)) {
 800d930:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d934:	4618      	mov	r0, r3
 800d936:	f7fd fcbb 	bl	800b2b0 <lfs_gstate_iszero>
 800d93a:	4603      	mov	r3, r0
 800d93c:	f083 0301 	eor.w	r3, r3, #1
 800d940:	b2db      	uxtb	r3, r3
 800d942:	2b00      	cmp	r3, #0
 800d944:	d04c      	beq.n	800d9e0 <lfs_dir_commit+0x438>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 800d946:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d94a:	461a      	mov	r2, r3
 800d94c:	68b9      	ldr	r1, [r7, #8]
 800d94e:	68f8      	ldr	r0, [r7, #12]
 800d950:	f7fe fe72 	bl	800c638 <lfs_dir_getgstate>
 800d954:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
            if (err) {
 800d958:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d015      	beq.n	800d98c <lfs_dir_commit+0x3e4>
                *dir = olddir;
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	461d      	mov	r5, r3
 800d964:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800d968:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d96a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d96c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d970:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 800d974:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d978:	e1c4      	b.n	800dd04 <lfs_dir_commit+0x75c>
 800d97a:	bf00      	nop
 800d97c:	08023534 	.word	0x08023534
 800d980:	08027218 	.word	0x08027218
 800d984:	080232e8 	.word	0x080232e8
 800d988:	0800cf4f 	.word	0x0800cf4f
            }

            lfs_gstate_tole32(&delta);
 800d98c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d990:	4618      	mov	r0, r3
 800d992:	f7fd fd1f 	bl	800b3d4 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 800d996:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d99a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800d99e:	4aba      	ldr	r2, [pc, #744]	; (800dc88 <lfs_dir_commit+0x6e0>)
 800d9a0:	68f8      	ldr	r0, [r7, #12]
 800d9a2:	f7fe fff5 	bl	800c990 <lfs_dir_commitattr>
 800d9a6:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 800d9aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d016      	beq.n	800d9e0 <lfs_dir_commit+0x438>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800d9b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d9b6:	f113 0f1c 	cmn.w	r3, #28
 800d9ba:	d05e      	beq.n	800da7a <lfs_dir_commit+0x4d2>
 800d9bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d9c0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800d9c4:	d059      	beq.n	800da7a <lfs_dir_commit+0x4d2>
                    goto compact;
                }
                *dir = olddir;
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	461d      	mov	r5, r3
 800d9ca:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800d9ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d9d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d9d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d9d6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 800d9da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d9de:	e191      	b.n	800dd04 <lfs_dir_commit+0x75c>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 800d9e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	68f8      	ldr	r0, [r7, #12]
 800d9e8:	f7ff f852 	bl	800ca90 <lfs_dir_commitcrc>
 800d9ec:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        if (err) {
 800d9f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d016      	beq.n	800da26 <lfs_dir_commit+0x47e>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800d9f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d9fc:	f113 0f1c 	cmn.w	r3, #28
 800da00:	d03d      	beq.n	800da7e <lfs_dir_commit+0x4d6>
 800da02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da06:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800da0a:	d038      	beq.n	800da7e <lfs_dir_commit+0x4d6>
                goto compact;
            }
            *dir = olddir;
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	461d      	mov	r5, r3
 800da10:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800da14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800da16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800da18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800da1c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800da20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da24:	e16e      	b.n	800dd04 <lfs_dir_commit+0x75c>
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800da26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da28:	68fa      	ldr	r2, [r7, #12]
 800da2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800da2c:	6a12      	ldr	r2, [r2, #32]
 800da2e:	fbb3 f1f2 	udiv	r1, r3, r2
 800da32:	fb01 f202 	mul.w	r2, r1, r2
 800da36:	1a9b      	subs	r3, r3, r2
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d006      	beq.n	800da4a <lfs_dir_commit+0x4a2>
 800da3c:	4b93      	ldr	r3, [pc, #588]	; (800dc8c <lfs_dir_commit+0x6e4>)
 800da3e:	4a94      	ldr	r2, [pc, #592]	; (800dc90 <lfs_dir_commit+0x6e8>)
 800da40:	f44f 61f4 	mov.w	r1, #1952	; 0x7a0
 800da44:	4893      	ldr	r0, [pc, #588]	; (800dc94 <lfs_dir_commit+0x6ec>)
 800da46:	f013 fc11 	bl	802126c <__assert_func>
        dir->off = commit.off;
 800da4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 800da50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	68fa      	ldr	r2, [r7, #12]
 800da5a:	333c      	adds	r3, #60	; 0x3c
 800da5c:	3230      	adds	r2, #48	; 0x30
 800da5e:	ca07      	ldmia	r2, {r0, r1, r2}
 800da60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	3348      	adds	r3, #72	; 0x48
 800da68:	2200      	movs	r2, #0
 800da6a:	601a      	str	r2, [r3, #0]
 800da6c:	605a      	str	r2, [r3, #4]
 800da6e:	609a      	str	r2, [r3, #8]
    if (dir->erased || dir->count >= 0xff) {
 800da70:	e02c      	b.n	800dacc <lfs_dir_commit+0x524>
    } else {
compact:
 800da72:	bf00      	nop
 800da74:	e004      	b.n	800da80 <lfs_dir_commit+0x4d8>
                goto compact;
 800da76:	bf00      	nop
 800da78:	e002      	b.n	800da80 <lfs_dir_commit+0x4d8>
                    goto compact;
 800da7a:	bf00      	nop
 800da7c:	e000      	b.n	800da80 <lfs_dir_commit+0x4d8>
                goto compact;
 800da7e:	bf00      	nop
        // fall back to compaction
        lfs_cache_drop(lfs, &lfs->pcache);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	3310      	adds	r3, #16
 800da84:	4619      	mov	r1, r3
 800da86:	68f8      	ldr	r0, [r7, #12]
 800da88:	f7fc ff5e 	bl	800a948 <lfs_cache_drop>

        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	8a9b      	ldrh	r3, [r3, #20]
 800da90:	9302      	str	r3, [sp, #8]
 800da92:	2300      	movs	r3, #0
 800da94:	9301      	str	r3, [sp, #4]
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	9300      	str	r3, [sp, #0]
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	687a      	ldr	r2, [r7, #4]
 800da9e:	68b9      	ldr	r1, [r7, #8]
 800daa0:	68f8      	ldr	r0, [r7, #12]
 800daa2:	f7ff fa69 	bl	800cf78 <lfs_dir_compact>
 800daa6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                dir, 0, dir->count);
        if (err) {
 800daaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d00c      	beq.n	800dacc <lfs_dir_commit+0x524>
            *dir = olddir;
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	461d      	mov	r5, r3
 800dab6:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800daba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dabc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dabe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800dac2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800dac6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800daca:	e11b      	b.n	800dd04 <lfs_dir_commit+0x75c>
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dad0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800dad4:	e0c1      	b.n	800dc5a <lfs_dir_commit+0x6b2>
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
 800dad6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dada:	3308      	adds	r3, #8
 800dadc:	68ba      	ldr	r2, [r7, #8]
 800dade:	429a      	cmp	r2, r3
 800dae0:	f000 80b6 	beq.w	800dc50 <lfs_dir_commit+0x6a8>
 800dae4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dae8:	3308      	adds	r3, #8
 800daea:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800daee:	4611      	mov	r1, r2
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7fd faa1 	bl	800b038 <lfs_pair_cmp>
 800daf6:	4603      	mov	r3, r0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	f040 80a9 	bne.w	800dc50 <lfs_dir_commit+0x6a8>
            d->m = *dir;
 800dafe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800db02:	68ba      	ldr	r2, [r7, #8]
 800db04:	f103 0408 	add.w	r4, r3, #8
 800db08:	4615      	mov	r5, r2
 800db0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800db12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (int i = 0; i < attrcount; i++) {
 800db16:	2300      	movs	r3, #0
 800db18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800db1c:	e092      	b.n	800dc44 <lfs_dir_commit+0x69c>
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800db1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800db22:	00db      	lsls	r3, r3, #3
 800db24:	687a      	ldr	r2, [r7, #4]
 800db26:	4413      	add	r3, r2
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7fd fb40 	bl	800b1b0 <lfs_tag_type3>
 800db30:	4603      	mov	r3, r0
 800db32:	461a      	mov	r2, r3
 800db34:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800db38:	429a      	cmp	r2, r3
 800db3a:	d119      	bne.n	800db70 <lfs_dir_commit+0x5c8>
                        d->id == lfs_tag_id(attrs[i].tag)) {
 800db3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800db40:	889c      	ldrh	r4, [r3, #4]
 800db42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800db46:	00db      	lsls	r3, r3, #3
 800db48:	687a      	ldr	r2, [r7, #4]
 800db4a:	4413      	add	r3, r2
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4618      	mov	r0, r3
 800db50:	f7fd fb58 	bl	800b204 <lfs_tag_id>
 800db54:	4603      	mov	r3, r0
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800db56:	429c      	cmp	r4, r3
 800db58:	d10a      	bne.n	800db70 <lfs_dir_commit+0x5c8>
                    d->m.pair[0] = LFS_BLOCK_NULL;
 800db5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800db5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db62:	609a      	str	r2, [r3, #8]
                    d->m.pair[1] = LFS_BLOCK_NULL;
 800db64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800db68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db6c:	60da      	str	r2, [r3, #12]
 800db6e:	e064      	b.n	800dc3a <lfs_dir_commit+0x692>
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800db70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800db74:	00db      	lsls	r3, r3, #3
 800db76:	687a      	ldr	r2, [r7, #4]
 800db78:	4413      	add	r3, r2
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7fd fb17 	bl	800b1b0 <lfs_tag_type3>
 800db82:	4603      	mov	r3, r0
 800db84:	461a      	mov	r2, r3
 800db86:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d123      	bne.n	800dbd6 <lfs_dir_commit+0x62e>
                        d->id > lfs_tag_id(attrs[i].tag)) {
 800db8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800db92:	889c      	ldrh	r4, [r3, #4]
 800db94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800db98:	00db      	lsls	r3, r3, #3
 800db9a:	687a      	ldr	r2, [r7, #4]
 800db9c:	4413      	add	r3, r2
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4618      	mov	r0, r3
 800dba2:	f7fd fb2f 	bl	800b204 <lfs_tag_id>
 800dba6:	4603      	mov	r3, r0
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800dba8:	429c      	cmp	r4, r3
 800dbaa:	d914      	bls.n	800dbd6 <lfs_dir_commit+0x62e>
                    d->id -= 1;
 800dbac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dbb0:	889b      	ldrh	r3, [r3, #4]
 800dbb2:	3b01      	subs	r3, #1
 800dbb4:	b29a      	uxth	r2, r3
 800dbb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dbba:	809a      	strh	r2, [r3, #4]
                    if (d->type == LFS_TYPE_DIR) {
 800dbbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dbc0:	799b      	ldrb	r3, [r3, #6]
 800dbc2:	2b02      	cmp	r3, #2
 800dbc4:	d139      	bne.n	800dc3a <lfs_dir_commit+0x692>
                        ((lfs_dir_t*)d)->pos -= 1;
 800dbc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dbca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbcc:	1e5a      	subs	r2, r3, #1
 800dbce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dbd2:	629a      	str	r2, [r3, #40]	; 0x28
                    if (d->type == LFS_TYPE_DIR) {
 800dbd4:	e031      	b.n	800dc3a <lfs_dir_commit+0x692>
                    }
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800dbd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dbda:	00db      	lsls	r3, r3, #3
 800dbdc:	687a      	ldr	r2, [r7, #4]
 800dbde:	4413      	add	r3, r2
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7fd fae4 	bl	800b1b0 <lfs_tag_type3>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	461a      	mov	r2, r3
 800dbec:	f240 4301 	movw	r3, #1025	; 0x401
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d122      	bne.n	800dc3a <lfs_dir_commit+0x692>
                        d->id >= lfs_tag_id(attrs[i].tag)) {
 800dbf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dbf8:	889c      	ldrh	r4, [r3, #4]
 800dbfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dbfe:	00db      	lsls	r3, r3, #3
 800dc00:	687a      	ldr	r2, [r7, #4]
 800dc02:	4413      	add	r3, r2
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7fd fafc 	bl	800b204 <lfs_tag_id>
 800dc0c:	4603      	mov	r3, r0
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800dc0e:	429c      	cmp	r4, r3
 800dc10:	d313      	bcc.n	800dc3a <lfs_dir_commit+0x692>
                    d->id += 1;
 800dc12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dc16:	889b      	ldrh	r3, [r3, #4]
 800dc18:	3301      	adds	r3, #1
 800dc1a:	b29a      	uxth	r2, r3
 800dc1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dc20:	809a      	strh	r2, [r3, #4]
                    if (d->type == LFS_TYPE_DIR) {
 800dc22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dc26:	799b      	ldrb	r3, [r3, #6]
 800dc28:	2b02      	cmp	r3, #2
 800dc2a:	d106      	bne.n	800dc3a <lfs_dir_commit+0x692>
                        ((lfs_dir_t*)d)->pos += 1;
 800dc2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dc30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc32:	1c5a      	adds	r2, r3, #1
 800dc34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dc38:	629a      	str	r2, [r3, #40]	; 0x28
            for (int i = 0; i < attrcount; i++) {
 800dc3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dc3e:	3301      	adds	r3, #1
 800dc40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800dc44:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	f6ff af67 	blt.w	800db1e <lfs_dir_commit+0x576>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800dc50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800dc5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	f47f af39 	bne.w	800dad6 <lfs_dir_commit+0x52e>
                }
            }
        }
    }

    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800dc6c:	e045      	b.n	800dcfa <lfs_dir_commit+0x752>
        if (lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
 800dc6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dc72:	3308      	adds	r3, #8
 800dc74:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800dc78:	4611      	mov	r1, r2
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7fd f9dc 	bl	800b038 <lfs_pair_cmp>
 800dc80:	4603      	mov	r3, r0
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d134      	bne.n	800dcf0 <lfs_dir_commit+0x748>
            while (d->id >= d->m.count && d->m.split) {
 800dc86:	e026      	b.n	800dcd6 <lfs_dir_commit+0x72e>
 800dc88:	7ffffc0c 	.word	0x7ffffc0c
 800dc8c:	08023474 	.word	0x08023474
 800dc90:	08027218 	.word	0x08027218
 800dc94:	080232e8 	.word	0x080232e8
                // we split and id is on tail now
                d->id -= d->m.count;
 800dc98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dc9c:	889a      	ldrh	r2, [r3, #4]
 800dc9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dca2:	8b9b      	ldrh	r3, [r3, #28]
 800dca4:	1ad3      	subs	r3, r2, r3
 800dca6:	b29a      	uxth	r2, r3
 800dca8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dcac:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800dcae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dcb2:	f103 0108 	add.w	r1, r3, #8
 800dcb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dcba:	3320      	adds	r3, #32
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	68f8      	ldr	r0, [r7, #12]
 800dcc0:	f7fe fc9e 	bl	800c600 <lfs_dir_fetch>
 800dcc4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                if (err) {
 800dcc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d002      	beq.n	800dcd6 <lfs_dir_commit+0x72e>
                    return err;
 800dcd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dcd4:	e016      	b.n	800dd04 <lfs_dir_commit+0x75c>
            while (d->id >= d->m.count && d->m.split) {
 800dcd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dcda:	889a      	ldrh	r2, [r3, #4]
 800dcdc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dce0:	8b9b      	ldrh	r3, [r3, #28]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d304      	bcc.n	800dcf0 <lfs_dir_commit+0x748>
 800dce6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dcea:	7fdb      	ldrb	r3, [r3, #31]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d1d3      	bne.n	800dc98 <lfs_dir_commit+0x6f0>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800dcf0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800dcfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d1b5      	bne.n	800dc6e <lfs_dir_commit+0x6c6>
                }
            }
        }
    }

    return 0;
 800dd02:	2300      	movs	r3, #0
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	37b8      	adds	r7, #184	; 0xb8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bdb0      	pop	{r4, r5, r7, pc}

0800dd0c <lfs_rawmkdir>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_rawmkdir(lfs_t *lfs, const char *path) {
 800dd0c:	b5b0      	push	{r4, r5, r7, lr}
 800dd0e:	b0b8      	sub	sp, #224	; 0xe0
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f002 fb98 	bl	801044c <lfs_fs_forceconsistency>
 800dd1c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 800dd20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d002      	beq.n	800dd2e <lfs_rawmkdir+0x22>
        return err;
 800dd28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd2c:	e128      	b.n	800df80 <lfs_rawmkdir+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 800dd36:	f107 00ae 	add.w	r0, r7, #174	; 0xae
 800dd3a:	463a      	mov	r2, r7
 800dd3c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800dd40:	f103 0108 	add.w	r1, r3, #8
 800dd44:	4603      	mov	r3, r0
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f7fe fcf2 	bl	800c730 <lfs_dir_find>
 800dd4c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 800dd50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd54:	f113 0f02 	cmn.w	r3, #2
 800dd58:	d105      	bne.n	800dd66 <lfs_rawmkdir+0x5a>
 800dd5a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800dd5e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d109      	bne.n	800dd7a <lfs_rawmkdir+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 800dd66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	da02      	bge.n	800dd74 <lfs_rawmkdir+0x68>
 800dd6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd72:	e105      	b.n	800df80 <lfs_rawmkdir+0x274>
 800dd74:	f06f 0310 	mvn.w	r3, #16
 800dd78:	e102      	b.n	800df80 <lfs_rawmkdir+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f7f2 fa31 	bl	80001e4 <strlen>
 800dd82:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if (nlen > lfs->name_max) {
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd8a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d902      	bls.n	800dd98 <lfs_rawmkdir+0x8c>
        return LFS_ERR_NAMETOOLONG;
 800dd92:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800dd96:	e0f3      	b.n	800df80 <lfs_rawmkdir+0x274>
    }

    // build up new directory
    lfs_alloc_ack(lfs);
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f7fd fc63 	bl	800b664 <lfs_alloc_ack>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 800dd9e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dda2:	4619      	mov	r1, r3
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f7fe ffaf 	bl	800cd08 <lfs_dir_alloc>
 800ddaa:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 800ddae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d002      	beq.n	800ddbc <lfs_rawmkdir+0xb0>
        return err;
 800ddb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddba:	e0e1      	b.n	800df80 <lfs_rawmkdir+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 800ddbc:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800ddc0:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 800ddc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ddc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ddc8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ddcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 800ddd0:	e012      	b.n	800ddf8 <lfs_rawmkdir+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 800ddd2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ddd6:	f103 0218 	add.w	r2, r3, #24
 800ddda:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ddde:	4619      	mov	r1, r3
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f7fe fc0d 	bl	800c600 <lfs_dir_fetch>
 800dde6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 800ddea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d002      	beq.n	800ddf8 <lfs_rawmkdir+0xec>
            return err;
 800ddf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddf6:	e0c3      	b.n	800df80 <lfs_rawmkdir+0x274>
    while (pred.split) {
 800ddf8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d1e8      	bne.n	800ddd2 <lfs_rawmkdir+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 800de00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800de04:	3318      	adds	r3, #24
 800de06:	4618      	mov	r0, r3
 800de08:	f7fd f987 	bl	800b11a <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 800de0c:	4b5e      	ldr	r3, [pc, #376]	; (800df88 <lfs_rawmkdir+0x27c>)
 800de0e:	667b      	str	r3, [r7, #100]	; 0x64
 800de10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800de14:	3318      	adds	r3, #24
 800de16:	66bb      	str	r3, [r7, #104]	; 0x68
 800de18:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800de1c:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800de20:	2301      	movs	r3, #1
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f7ff fbc0 	bl	800d5a8 <lfs_dir_commit>
 800de28:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 800de2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800de30:	3318      	adds	r3, #24
 800de32:	4618      	mov	r0, r3
 800de34:	f7fd f957 	bl	800b0e6 <lfs_pair_fromle32>
    if (err) {
 800de38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d002      	beq.n	800de46 <lfs_rawmkdir+0x13a>
        return err;
 800de40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de44:	e09c      	b.n	800df80 <lfs_rawmkdir+0x274>
    }

    // current block end of list?
    if (cwd.m.split) {
 800de46:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d04c      	beq.n	800dee8 <lfs_rawmkdir+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 800de4e:	2101      	movs	r1, #1
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f002 f919 	bl	8010088 <lfs_fs_preporphans>
 800de56:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 800de5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d002      	beq.n	800de68 <lfs_rawmkdir+0x15c>
            return err;
 800de62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de66:	e08b      	b.n	800df80 <lfs_rawmkdir+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 800de68:	2300      	movs	r3, #0
 800de6a:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
        cwd.id = 0;
 800de6e:	2300      	movs	r3, #0
 800de70:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lfs->mlist = &cwd;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800de7a:	629a      	str	r2, [r3, #40]	; 0x28

        lfs_pair_tole32(dir.pair);
 800de7c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800de80:	4618      	mov	r0, r3
 800de82:	f7fd f94a 	bl	800b11a <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 800de86:	4b40      	ldr	r3, [pc, #256]	; (800df88 <lfs_rawmkdir+0x27c>)
 800de88:	617b      	str	r3, [r7, #20]
 800de8a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800de8e:	61bb      	str	r3, [r7, #24]
 800de90:	f107 0214 	add.w	r2, r7, #20
 800de94:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800de98:	2301      	movs	r3, #1
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f7ff fb84 	bl	800d5a8 <lfs_dir_commit>
 800dea0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 800dea4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dea8:	4618      	mov	r0, r3
 800deaa:	f7fd f91c 	bl	800b0e6 <lfs_pair_fromle32>
        if (err) {
 800deae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d006      	beq.n	800dec4 <lfs_rawmkdir+0x1b8>
            lfs->mlist = cwd.next;
 800deb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 800debe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dec2:	e05d      	b.n	800df80 <lfs_rawmkdir+0x274>
        }

        lfs->mlist = cwd.next;
 800dec4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	629a      	str	r2, [r3, #40]	; 0x28
        err = lfs_fs_preporphans(lfs, -1);
 800decc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f002 f8d9 	bl	8010088 <lfs_fs_preporphans>
 800ded6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 800deda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d002      	beq.n	800dee8 <lfs_rawmkdir+0x1dc>
            return err;
 800dee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dee6:	e04b      	b.n	800df80 <lfs_rawmkdir+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 800dee8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800deec:	4618      	mov	r0, r3
 800deee:	f7fd f914 	bl	800b11a <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 800def2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800def6:	029b      	lsls	r3, r3, #10
 800def8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800defc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df00:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df02:	2300      	movs	r3, #0
 800df04:	643b      	str	r3, [r7, #64]	; 0x40
 800df06:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800df0a:	029a      	lsls	r2, r3, #10
 800df0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800df10:	4313      	orrs	r3, r2
 800df12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800df16:	647b      	str	r3, [r7, #68]	; 0x44
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	64bb      	str	r3, [r7, #72]	; 0x48
 800df1c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800df20:	029b      	lsls	r3, r3, #10
 800df22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800df26:	f043 0308 	orr.w	r3, r3, #8
 800df2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800df2c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800df30:	653b      	str	r3, [r7, #80]	; 0x50
 800df32:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800df36:	f083 0301 	eor.w	r3, r3, #1
 800df3a:	b2db      	uxtb	r3, r3
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d001      	beq.n	800df44 <lfs_rawmkdir+0x238>
 800df40:	4b11      	ldr	r3, [pc, #68]	; (800df88 <lfs_rawmkdir+0x27c>)
 800df42:	e000      	b.n	800df46 <lfs_rawmkdir+0x23a>
 800df44:	2300      	movs	r3, #0
 800df46:	657b      	str	r3, [r7, #84]	; 0x54
 800df48:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800df4c:	65bb      	str	r3, [r7, #88]	; 0x58
 800df4e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800df52:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800df56:	f103 0108 	add.w	r1, r3, #8
 800df5a:	2304      	movs	r3, #4
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f7ff fb23 	bl	800d5a8 <lfs_dir_commit>
 800df62:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 800df66:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7fd f8bb 	bl	800b0e6 <lfs_pair_fromle32>
    if (err) {
 800df70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df74:	2b00      	cmp	r3, #0
 800df76:	d002      	beq.n	800df7e <lfs_rawmkdir+0x272>
        return err;
 800df78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df7c:	e000      	b.n	800df80 <lfs_rawmkdir+0x274>
    }

    return 0;
 800df7e:	2300      	movs	r3, #0
}
 800df80:	4618      	mov	r0, r3
 800df82:	37e0      	adds	r7, #224	; 0xe0
 800df84:	46bd      	mov	sp, r7
 800df86:	bdb0      	pop	{r4, r5, r7, pc}
 800df88:	600ffc08 	.word	0x600ffc08

0800df8c <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 800df8c:	b590      	push	{r4, r7, lr}
 800df8e:	b087      	sub	sp, #28
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfa2:	3b08      	subs	r3, #8
 800dfa4:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 800dfa6:	697a      	ldr	r2, [r7, #20]
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfae:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d101      	bne.n	800dfba <lfs_ctz_index+0x2e>
        return 0;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	e01c      	b.n	800dff4 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	3b01      	subs	r3, #1
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7fc fc62 	bl	800a888 <lfs_popc>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	3302      	adds	r3, #2
 800dfc8:	009b      	lsls	r3, r3, #2
 800dfca:	697a      	ldr	r2, [r7, #20]
 800dfcc:	1ad2      	subs	r2, r2, r3
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfd4:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	68fa      	ldr	r2, [r7, #12]
 800dfda:	fb02 f303 	mul.w	r3, r2, r3
 800dfde:	697a      	ldr	r2, [r7, #20]
 800dfe0:	1ad4      	subs	r4, r2, r3
 800dfe2:	68f8      	ldr	r0, [r7, #12]
 800dfe4:	f7fc fc50 	bl	800a888 <lfs_popc>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	009b      	lsls	r3, r3, #2
 800dfec:	1ae2      	subs	r2, r4, r3
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	601a      	str	r2, [r3, #0]
    return i;
 800dff2:	68fb      	ldr	r3, [r7, #12]
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	371c      	adds	r7, #28
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd90      	pop	{r4, r7, pc}

0800dffc <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 800dffc:	b590      	push	{r4, r7, lr}
 800dffe:	b08f      	sub	sp, #60	; 0x3c
 800e000:	af04      	add	r7, sp, #16
 800e002:	60f8      	str	r0, [r7, #12]
 800e004:	60b9      	str	r1, [r7, #8]
 800e006:	607a      	str	r2, [r7, #4]
 800e008:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800e00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d108      	bne.n	800e022 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 800e010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e012:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e016:	601a      	str	r2, [r3, #0]
        *off = 0;
 800e018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e01a:	2200      	movs	r2, #0
 800e01c:	601a      	str	r2, [r3, #0]
        return 0;
 800e01e:	2300      	movs	r3, #0
 800e020:	e053      	b.n	800e0ca <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800e022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e024:	3b01      	subs	r3, #1
 800e026:	617b      	str	r3, [r7, #20]
 800e028:	f107 0314 	add.w	r3, r7, #20
 800e02c:	4619      	mov	r1, r3
 800e02e:	68f8      	ldr	r0, [r7, #12]
 800e030:	f7ff ffac 	bl	800df8c <lfs_ctz_index>
 800e034:	4603      	mov	r3, r0
 800e036:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 800e038:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e03c:	4619      	mov	r1, r3
 800e03e:	68f8      	ldr	r0, [r7, #12]
 800e040:	f7ff ffa4 	bl	800df8c <lfs_ctz_index>
 800e044:	4603      	mov	r3, r0
 800e046:	623b      	str	r3, [r7, #32]

    while (current > target) {
 800e048:	e034      	b.n	800e0b4 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 800e04a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e04c:	6a3b      	ldr	r3, [r7, #32]
 800e04e:	1ad3      	subs	r3, r2, r3
 800e050:	3301      	adds	r3, #1
 800e052:	4618      	mov	r0, r3
 800e054:	f7fc fbf9 	bl	800a84a <lfs_npw2>
 800e058:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 800e05a:	1e5c      	subs	r4, r3, #1
 800e05c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e05e:	f7fc fc04 	bl	800a86a <lfs_ctz>
 800e062:	4603      	mov	r3, r0
 800e064:	4619      	mov	r1, r3
 800e066:	4620      	mov	r0, r4
 800e068:	f7fc fbb8 	bl	800a7dc <lfs_min>
 800e06c:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	69fa      	ldr	r2, [r7, #28]
 800e072:	0092      	lsls	r2, r2, #2
 800e074:	2104      	movs	r1, #4
 800e076:	9103      	str	r1, [sp, #12]
 800e078:	4639      	mov	r1, r7
 800e07a:	9102      	str	r1, [sp, #8]
 800e07c:	9201      	str	r2, [sp, #4]
 800e07e:	9300      	str	r3, [sp, #0]
 800e080:	2304      	movs	r3, #4
 800e082:	687a      	ldr	r2, [r7, #4]
 800e084:	68b9      	ldr	r1, [r7, #8]
 800e086:	68f8      	ldr	r0, [r7, #12]
 800e088:	f7fc fc84 	bl	800a994 <lfs_bd_read>
 800e08c:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	4618      	mov	r0, r3
 800e092:	f7fc fc13 	bl	800a8bc <lfs_fromle32>
 800e096:	4603      	mov	r3, r0
 800e098:	603b      	str	r3, [r7, #0]
        if (err) {
 800e09a:	69bb      	ldr	r3, [r7, #24]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d001      	beq.n	800e0a4 <lfs_ctz_find+0xa8>
            return err;
 800e0a0:	69bb      	ldr	r3, [r7, #24]
 800e0a2:	e012      	b.n	800e0ca <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	69fb      	ldr	r3, [r7, #28]
 800e0a8:	fa02 f303 	lsl.w	r3, r2, r3
 800e0ac:	461a      	mov	r2, r3
 800e0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b0:	1a9b      	subs	r3, r3, r2
 800e0b2:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 800e0b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0b6:	6a3b      	ldr	r3, [r7, #32]
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d8c6      	bhi.n	800e04a <lfs_ctz_find+0x4e>
    }

    *block = head;
 800e0bc:	683a      	ldr	r2, [r7, #0]
 800e0be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0c0:	601a      	str	r2, [r3, #0]
    *off = pos;
 800e0c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e0c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0c6:	601a      	str	r2, [r3, #0]
    return 0;
 800e0c8:	2300      	movs	r3, #0
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	372c      	adds	r7, #44	; 0x2c
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd90      	pop	{r4, r7, pc}
	...

0800e0d4 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b092      	sub	sp, #72	; 0x48
 800e0d8:	af04      	add	r7, sp, #16
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	607a      	str	r2, [r7, #4]
 800e0e0:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800e0e2:	f107 0320 	add.w	r3, r7, #32
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	68f8      	ldr	r0, [r7, #12]
 800e0ea:	f7fd fadb 	bl	800b6a4 <lfs_alloc>
 800e0ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 800e0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d001      	beq.n	800e0fa <lfs_ctz_extend+0x26>
            return err;
 800e0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f8:	e0e9      	b.n	800e2ce <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 800e0fa:	6a3b      	ldr	r3, [r7, #32]
 800e0fc:	4619      	mov	r1, r3
 800e0fe:	68f8      	ldr	r0, [r7, #12]
 800e100:	f7fc ff3a 	bl	800af78 <lfs_bd_erase>
 800e104:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 800e106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d006      	beq.n	800e11a <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 800e10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e10e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800e112:	f000 80cb 	beq.w	800e2ac <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 800e116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e118:	e0d9      	b.n	800e2ce <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 800e11a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d107      	bne.n	800e130 <lfs_ctz_extend+0x5c>
                *block = nblock;
 800e120:	6a3a      	ldr	r2, [r7, #32]
 800e122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e124:	601a      	str	r2, [r3, #0]
                *off = 0;
 800e126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e128:	2200      	movs	r2, #0
 800e12a:	601a      	str	r2, [r3, #0]
                return 0;
 800e12c:	2300      	movs	r3, #0
 800e12e:	e0ce      	b.n	800e2ce <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 800e130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e132:	3b01      	subs	r3, #1
 800e134:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 800e136:	f107 031c 	add.w	r3, r7, #28
 800e13a:	4619      	mov	r1, r3
 800e13c:	68f8      	ldr	r0, [r7, #12]
 800e13e:	f7ff ff25 	bl	800df8c <lfs_ctz_index>
 800e142:	4603      	mov	r3, r0
 800e144:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 800e146:	69fb      	ldr	r3, [r7, #28]
 800e148:	3301      	adds	r3, #1
 800e14a:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e150:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e152:	69fb      	ldr	r3, [r7, #28]
 800e154:	429a      	cmp	r2, r3
 800e156:	d044      	beq.n	800e1e2 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 800e158:	2300      	movs	r3, #0
 800e15a:	637b      	str	r3, [r7, #52]	; 0x34
 800e15c:	e035      	b.n	800e1ca <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 800e15e:	69fa      	ldr	r2, [r7, #28]
 800e160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e162:	1ad2      	subs	r2, r2, r3
 800e164:	2301      	movs	r3, #1
 800e166:	9303      	str	r3, [sp, #12]
 800e168:	f107 0317 	add.w	r3, r7, #23
 800e16c:	9302      	str	r3, [sp, #8]
 800e16e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e170:	9301      	str	r3, [sp, #4]
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	9300      	str	r3, [sp, #0]
 800e176:	4613      	mov	r3, r2
 800e178:	687a      	ldr	r2, [r7, #4]
 800e17a:	2100      	movs	r1, #0
 800e17c:	68f8      	ldr	r0, [r7, #12]
 800e17e:	f7fc fc09 	bl	800a994 <lfs_bd_read>
 800e182:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 800e184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e186:	2b00      	cmp	r3, #0
 800e188:	d001      	beq.n	800e18e <lfs_ctz_extend+0xba>
                        return err;
 800e18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18c:	e09f      	b.n	800e2ce <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 800e18e:	6a3b      	ldr	r3, [r7, #32]
 800e190:	2201      	movs	r2, #1
 800e192:	9203      	str	r2, [sp, #12]
 800e194:	f107 0217 	add.w	r2, r7, #23
 800e198:	9202      	str	r2, [sp, #8]
 800e19a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e19c:	9201      	str	r2, [sp, #4]
 800e19e:	9300      	str	r3, [sp, #0]
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	68b9      	ldr	r1, [r7, #8]
 800e1a6:	68f8      	ldr	r0, [r7, #12]
 800e1a8:	f7fc fe3a 	bl	800ae20 <lfs_bd_prog>
 800e1ac:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 800e1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d007      	beq.n	800e1c4 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 800e1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800e1ba:	d101      	bne.n	800e1c0 <lfs_ctz_extend+0xec>
                            goto relocate;
 800e1bc:	bf00      	nop
                    goto relocate;
 800e1be:	e075      	b.n	800e2ac <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 800e1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 800e1c2:	e084      	b.n	800e2ce <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 800e1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1c6:	3301      	adds	r3, #1
 800e1c8:	637b      	str	r3, [r7, #52]	; 0x34
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d3c5      	bcc.n	800e15e <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 800e1d2:	6a3a      	ldr	r2, [r7, #32]
 800e1d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1d6:	601a      	str	r2, [r3, #0]
                *off = noff;
 800e1d8:	69fa      	ldr	r2, [r7, #28]
 800e1da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1dc:	601a      	str	r2, [r3, #0]
                return 0;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	e075      	b.n	800e2ce <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 800e1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e4:	3301      	adds	r3, #1
 800e1e6:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 800e1e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1ea:	f7fc fb3e 	bl	800a86a <lfs_ctz>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	3301      	adds	r3, #1
 800e1f2:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	633b      	str	r3, [r7, #48]	; 0x30
 800e1fc:	e049      	b.n	800e292 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 800e1fe:	69bb      	ldr	r3, [r7, #24]
 800e200:	4618      	mov	r0, r3
 800e202:	f7fc fb66 	bl	800a8d2 <lfs_tole32>
 800e206:	4603      	mov	r3, r0
 800e208:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 800e20a:	6a3b      	ldr	r3, [r7, #32]
 800e20c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e20e:	0092      	lsls	r2, r2, #2
 800e210:	2104      	movs	r1, #4
 800e212:	9103      	str	r1, [sp, #12]
 800e214:	f107 0118 	add.w	r1, r7, #24
 800e218:	9102      	str	r1, [sp, #8]
 800e21a:	9201      	str	r2, [sp, #4]
 800e21c:	9300      	str	r3, [sp, #0]
 800e21e:	2301      	movs	r3, #1
 800e220:	687a      	ldr	r2, [r7, #4]
 800e222:	68b9      	ldr	r1, [r7, #8]
 800e224:	68f8      	ldr	r0, [r7, #12]
 800e226:	f7fc fdfb 	bl	800ae20 <lfs_bd_prog>
 800e22a:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 800e22c:	69bb      	ldr	r3, [r7, #24]
 800e22e:	4618      	mov	r0, r3
 800e230:	f7fc fb44 	bl	800a8bc <lfs_fromle32>
 800e234:	4603      	mov	r3, r0
 800e236:	61bb      	str	r3, [r7, #24]
                if (err) {
 800e238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d005      	beq.n	800e24a <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 800e23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e240:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800e244:	d034      	beq.n	800e2b0 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 800e246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e248:	e041      	b.n	800e2ce <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 800e24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24c:	3b01      	subs	r3, #1
 800e24e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e250:	429a      	cmp	r2, r3
 800e252:	d01b      	beq.n	800e28c <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 800e254:	69bb      	ldr	r3, [r7, #24]
 800e256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e258:	0092      	lsls	r2, r2, #2
 800e25a:	2104      	movs	r1, #4
 800e25c:	9103      	str	r1, [sp, #12]
 800e25e:	f107 0118 	add.w	r1, r7, #24
 800e262:	9102      	str	r1, [sp, #8]
 800e264:	9201      	str	r2, [sp, #4]
 800e266:	9300      	str	r3, [sp, #0]
 800e268:	2304      	movs	r3, #4
 800e26a:	687a      	ldr	r2, [r7, #4]
 800e26c:	2100      	movs	r1, #0
 800e26e:	68f8      	ldr	r0, [r7, #12]
 800e270:	f7fc fb90 	bl	800a994 <lfs_bd_read>
 800e274:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 800e276:	69bb      	ldr	r3, [r7, #24]
 800e278:	4618      	mov	r0, r3
 800e27a:	f7fc fb1f 	bl	800a8bc <lfs_fromle32>
 800e27e:	4603      	mov	r3, r0
 800e280:	61bb      	str	r3, [r7, #24]
                    if (err) {
 800e282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e284:	2b00      	cmp	r3, #0
 800e286:	d001      	beq.n	800e28c <lfs_ctz_extend+0x1b8>
                        return err;
 800e288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e28a:	e020      	b.n	800e2ce <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 800e28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e28e:	3301      	adds	r3, #1
 800e290:	633b      	str	r3, [r7, #48]	; 0x30
 800e292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e296:	429a      	cmp	r2, r3
 800e298:	d3b1      	bcc.n	800e1fe <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 800e29a:	6a3a      	ldr	r2, [r7, #32]
 800e29c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e29e:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 800e2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a2:	009a      	lsls	r2, r3, #2
 800e2a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2a6:	601a      	str	r2, [r3, #0]
            return 0;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	e010      	b.n	800e2ce <lfs_ctz_extend+0x1fa>
                    goto relocate;
 800e2ac:	bf00      	nop
 800e2ae:	e000      	b.n	800e2b2 <lfs_ctz_extend+0x1de>
                        goto relocate;
 800e2b0:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800e2b2:	6a3b      	ldr	r3, [r7, #32]
 800e2b4:	4a08      	ldr	r2, [pc, #32]	; (800e2d8 <lfs_ctz_extend+0x204>)
 800e2b6:	9200      	str	r2, [sp, #0]
 800e2b8:	f640 126a 	movw	r2, #2410	; 0x96a
 800e2bc:	4907      	ldr	r1, [pc, #28]	; (800e2dc <lfs_ctz_extend+0x208>)
 800e2be:	4808      	ldr	r0, [pc, #32]	; (800e2e0 <lfs_ctz_extend+0x20c>)
 800e2c0:	f013 fa2a 	bl	8021718 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 800e2c4:	68b9      	ldr	r1, [r7, #8]
 800e2c6:	68f8      	ldr	r0, [r7, #12]
 800e2c8:	f7fc fb3e 	bl	800a948 <lfs_cache_drop>
    while (true) {
 800e2cc:	e709      	b.n	800e0e2 <lfs_ctz_extend+0xe>
    }
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3738      	adds	r7, #56	; 0x38
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}
 800e2d6:	bf00      	nop
 800e2d8:	080233f4 	.word	0x080233f4
 800e2dc:	080232e8 	.word	0x080232e8
 800e2e0:	0802349c 	.word	0x0802349c

0800e2e4 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b090      	sub	sp, #64	; 0x40
 800e2e8:	af04      	add	r7, sp, #16
 800e2ea:	60f8      	str	r0, [r7, #12]
 800e2ec:	60b9      	str	r1, [r7, #8]
 800e2ee:	607a      	str	r2, [r7, #4]
 800e2f0:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800e2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d101      	bne.n	800e2fc <lfs_ctz_traverse+0x18>
        return 0;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	e06b      	b.n	800e3d4 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800e2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fe:	3b01      	subs	r3, #1
 800e300:	61fb      	str	r3, [r7, #28]
 800e302:	f107 031c 	add.w	r3, r7, #28
 800e306:	4619      	mov	r1, r3
 800e308:	68f8      	ldr	r0, [r7, #12]
 800e30a:	f7ff fe3f 	bl	800df8c <lfs_ctz_index>
 800e30e:	4603      	mov	r3, r0
 800e310:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 800e312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e314:	6839      	ldr	r1, [r7, #0]
 800e316:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800e318:	4798      	blx	r3
 800e31a:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800e31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d001      	beq.n	800e326 <lfs_ctz_traverse+0x42>
            return err;
 800e322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e324:	e056      	b.n	800e3d4 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 800e326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d101      	bne.n	800e330 <lfs_ctz_traverse+0x4c>
            return 0;
 800e32c:	2300      	movs	r3, #0
 800e32e:	e051      	b.n	800e3d4 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 800e330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e332:	f003 0301 	and.w	r3, r3, #1
 800e336:	f1c3 0302 	rsb	r3, r3, #2
 800e33a:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 800e33c:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 800e33e:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 800e340:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 800e342:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 800e344:	9303      	str	r3, [sp, #12]
 800e346:	f107 0314 	add.w	r3, r7, #20
 800e34a:	9302      	str	r3, [sp, #8]
 800e34c:	2300      	movs	r3, #0
 800e34e:	9301      	str	r3, [sp, #4]
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	9300      	str	r3, [sp, #0]
 800e354:	4613      	mov	r3, r2
 800e356:	687a      	ldr	r2, [r7, #4]
 800e358:	68b9      	ldr	r1, [r7, #8]
 800e35a:	68f8      	ldr	r0, [r7, #12]
 800e35c:	f7fc fb1a 	bl	800a994 <lfs_bd_read>
 800e360:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 800e362:	697b      	ldr	r3, [r7, #20]
 800e364:	4618      	mov	r0, r3
 800e366:	f7fc faa9 	bl	800a8bc <lfs_fromle32>
 800e36a:	4603      	mov	r3, r0
 800e36c:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 800e36e:	69bb      	ldr	r3, [r7, #24]
 800e370:	4618      	mov	r0, r3
 800e372:	f7fc faa3 	bl	800a8bc <lfs_fromle32>
 800e376:	4603      	mov	r3, r0
 800e378:	61bb      	str	r3, [r7, #24]
        if (err) {
 800e37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d001      	beq.n	800e384 <lfs_ctz_traverse+0xa0>
            return err;
 800e380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e382:	e027      	b.n	800e3d4 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 800e384:	2300      	movs	r3, #0
 800e386:	62bb      	str	r3, [r7, #40]	; 0x28
 800e388:	e012      	b.n	800e3b0 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 800e38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	3330      	adds	r3, #48	; 0x30
 800e390:	443b      	add	r3, r7
 800e392:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800e396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e398:	4611      	mov	r1, r2
 800e39a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800e39c:	4798      	blx	r3
 800e39e:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 800e3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d001      	beq.n	800e3aa <lfs_ctz_traverse+0xc6>
                return err;
 800e3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a8:	e014      	b.n	800e3d4 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 800e3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3b0:	6a3b      	ldr	r3, [r7, #32]
 800e3b2:	3b01      	subs	r3, #1
 800e3b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	dbe7      	blt.n	800e38a <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 800e3ba:	6a3b      	ldr	r3, [r7, #32]
 800e3bc:	3b01      	subs	r3, #1
 800e3be:	009b      	lsls	r3, r3, #2
 800e3c0:	3330      	adds	r3, #48	; 0x30
 800e3c2:	443b      	add	r3, r7
 800e3c4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800e3c8:	603b      	str	r3, [r7, #0]
        index -= count;
 800e3ca:	6a3b      	ldr	r3, [r7, #32]
 800e3cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3ce:	1ad3      	subs	r3, r2, r3
 800e3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 800e3d2:	e79e      	b.n	800e312 <lfs_ctz_traverse+0x2e>
    }
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3730      	adds	r7, #48	; 0x30
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 800e3dc:	b5b0      	push	{r4, r5, r7, lr}
 800e3de:	b09a      	sub	sp, #104	; 0x68
 800e3e0:	af02      	add	r7, sp, #8
 800e3e2:	60f8      	str	r0, [r7, #12]
 800e3e4:	60b9      	str	r1, [r7, #8]
 800e3e6:	607a      	str	r2, [r7, #4]
 800e3e8:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	f003 0302 	and.w	r3, r3, #2
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d008      	beq.n	800e406 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 800e3f4:	68f8      	ldr	r0, [r7, #12]
 800e3f6:	f002 f829 	bl	801044c <lfs_fs_forceconsistency>
 800e3fa:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 800e3fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d001      	beq.n	800e406 <lfs_file_rawopencfg+0x2a>
            return err;
 800e402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e404:	e1a9      	b.n	800e75a <lfs_file_rawopencfg+0x37e>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e40a:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 800e40c:	683a      	ldr	r2, [r7, #0]
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	2200      	movs	r2, #0
 800e416:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	2200      	movs	r2, #0
 800e41c:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	2200      	movs	r2, #0
 800e422:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	f103 0108 	add.w	r1, r3, #8
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	3304      	adds	r3, #4
 800e42e:	1d3a      	adds	r2, r7, #4
 800e430:	68f8      	ldr	r0, [r7, #12]
 800e432:	f7fe f97d 	bl	800c730 <lfs_dir_find>
 800e436:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 800e438:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	da0c      	bge.n	800e458 <lfs_file_rawopencfg+0x7c>
 800e43e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e440:	f113 0f02 	cmn.w	r3, #2
 800e444:	d105      	bne.n	800e452 <lfs_file_rawopencfg+0x76>
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	889b      	ldrh	r3, [r3, #4]
 800e44a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e44e:	4293      	cmp	r3, r2
 800e450:	d102      	bne.n	800e458 <lfs_file_rawopencfg+0x7c>
        err = tag;
 800e452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e454:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800e456:	e175      	b.n	800e744 <lfs_file_rawopencfg+0x368>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	2201      	movs	r2, #1
 800e45c:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 800e45e:	68b9      	ldr	r1, [r7, #8]
 800e460:	68f8      	ldr	r0, [r7, #12]
 800e462:	f7fd f8b6 	bl	800b5d2 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 800e466:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e468:	f113 0f02 	cmn.w	r3, #2
 800e46c:	d148      	bne.n	800e500 <lfs_file_rawopencfg+0x124>
        if (!(flags & LFS_O_CREAT)) {
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e474:	2b00      	cmp	r3, #0
 800e476:	d103      	bne.n	800e480 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 800e478:	f06f 0301 	mvn.w	r3, #1
 800e47c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800e47e:	e161      	b.n	800e744 <lfs_file_rawopencfg+0x368>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	4618      	mov	r0, r3
 800e484:	f7f1 feae 	bl	80001e4 <strlen>
 800e488:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e48e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e490:	429a      	cmp	r2, r3
 800e492:	d903      	bls.n	800e49c <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 800e494:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800e498:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800e49a:	e153      	b.n	800e744 <lfs_file_rawopencfg+0x368>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	f103 0108 	add.w	r1, r3, #8
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	889b      	ldrh	r3, [r3, #4]
 800e4a6:	029b      	lsls	r3, r3, #10
 800e4a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e4ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	633b      	str	r3, [r7, #48]	; 0x30
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	889b      	ldrh	r3, [r3, #4]
 800e4ba:	029a      	lsls	r2, r3, #10
 800e4bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4be:	4313      	orrs	r3, r2
 800e4c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e4c4:	637b      	str	r3, [r7, #52]	; 0x34
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	889b      	ldrh	r3, [r3, #4]
 800e4ce:	029b      	lsls	r3, r3, #10
 800e4d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e4d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e4da:	2300      	movs	r3, #0
 800e4dc:	643b      	str	r3, [r7, #64]	; 0x40
 800e4de:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e4e2:	2303      	movs	r3, #3
 800e4e4:	68f8      	ldr	r0, [r7, #12]
 800e4e6:	f7ff f85f 	bl	800d5a8 <lfs_dir_commit>
 800e4ea:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_CREATE, file->id, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));
        if (err) {
 800e4ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d003      	beq.n	800e4fa <lfs_file_rawopencfg+0x11e>
            err = LFS_ERR_NAMETOOLONG;
 800e4f2:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800e4f6:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800e4f8:	e124      	b.n	800e744 <lfs_file_rawopencfg+0x368>
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 800e4fa:	4b9a      	ldr	r3, [pc, #616]	; (800e764 <lfs_file_rawopencfg+0x388>)
 800e4fc:	65bb      	str	r3, [r7, #88]	; 0x58
 800e4fe:	e044      	b.n	800e58a <lfs_file_rawopencfg+0x1ae>
    } else if (flags & LFS_O_EXCL) {
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e506:	2b00      	cmp	r3, #0
 800e508:	d003      	beq.n	800e512 <lfs_file_rawopencfg+0x136>
        err = LFS_ERR_EXIST;
 800e50a:	f06f 0310 	mvn.w	r3, #16
 800e50e:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800e510:	e118      	b.n	800e744 <lfs_file_rawopencfg+0x368>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 800e512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e514:	4618      	mov	r0, r3
 800e516:	f7fc fe4b 	bl	800b1b0 <lfs_tag_type3>
 800e51a:	4603      	mov	r3, r0
 800e51c:	2b01      	cmp	r3, #1
 800e51e:	d003      	beq.n	800e528 <lfs_file_rawopencfg+0x14c>
        err = LFS_ERR_ISDIR;
 800e520:	f06f 0314 	mvn.w	r3, #20
 800e524:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800e526:	e10d      	b.n	800e744 <lfs_file_rawopencfg+0x368>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d00e      	beq.n	800e550 <lfs_file_rawopencfg+0x174>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	889b      	ldrh	r3, [r3, #4]
 800e536:	029b      	lsls	r3, r3, #10
 800e538:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e53c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e540:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e546:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	631a      	str	r2, [r3, #48]	; 0x30
 800e54e:	e01c      	b.n	800e58a <lfs_file_rawopencfg+0x1ae>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	889b      	ldrh	r3, [r3, #4]
 800e55a:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800e55c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e560:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800e564:	68ba      	ldr	r2, [r7, #8]
 800e566:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800e568:	9200      	str	r2, [sp, #0]
 800e56a:	4a7f      	ldr	r2, [pc, #508]	; (800e768 <lfs_file_rawopencfg+0x38c>)
 800e56c:	68f8      	ldr	r0, [r7, #12]
 800e56e:	f7fd fa33 	bl	800b9d8 <lfs_dir_get>
 800e572:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 800e574:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e576:	2b00      	cmp	r3, #0
 800e578:	da02      	bge.n	800e580 <lfs_file_rawopencfg+0x1a4>
            err = tag;
 800e57a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e57c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800e57e:	e0e1      	b.n	800e744 <lfs_file_rawopencfg+0x368>
        }
        lfs_ctz_fromle32(&file->ctz);
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	3328      	adds	r3, #40	; 0x28
 800e584:	4618      	mov	r0, r3
 800e586:	f7fc ff45 	bl	800b414 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800e58a:	2300      	movs	r3, #0
 800e58c:	657b      	str	r3, [r7, #84]	; 0x54
 800e58e:	e063      	b.n	800e658 <lfs_file_rawopencfg+0x27c>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e594:	f003 0301 	and.w	r3, r3, #1
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d03c      	beq.n	800e616 <lfs_file_rawopencfg+0x23a>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5a6:	6859      	ldr	r1, [r3, #4]
 800e5a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e5aa:	4613      	mov	r3, r2
 800e5ac:	005b      	lsls	r3, r3, #1
 800e5ae:	4413      	add	r3, r2
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	440b      	add	r3, r1
 800e5b4:	781b      	ldrb	r3, [r3, #0]
 800e5b6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800e5ba:	051a      	lsls	r2, r3, #20
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	889b      	ldrh	r3, [r3, #4]
 800e5c0:	029b      	lsls	r3, r3, #10
 800e5c2:	ea42 0103 	orr.w	r1, r2, r3
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5ca:	6858      	ldr	r0, [r3, #4]
 800e5cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e5ce:	4613      	mov	r3, r2
 800e5d0:	005b      	lsls	r3, r3, #1
 800e5d2:	4413      	add	r3, r2
 800e5d4:	009b      	lsls	r3, r3, #2
 800e5d6:	4403      	add	r3, r0
 800e5d8:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800e5da:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5e2:	6859      	ldr	r1, [r3, #4]
 800e5e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e5e6:	4613      	mov	r3, r2
 800e5e8:	005b      	lsls	r3, r3, #1
 800e5ea:	4413      	add	r3, r2
 800e5ec:	009b      	lsls	r3, r3, #2
 800e5ee:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800e5f0:	685b      	ldr	r3, [r3, #4]
 800e5f2:	9300      	str	r3, [sp, #0]
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	4a5d      	ldr	r2, [pc, #372]	; (800e76c <lfs_file_rawopencfg+0x390>)
 800e5f8:	4621      	mov	r1, r4
 800e5fa:	68f8      	ldr	r0, [r7, #12]
 800e5fc:	f7fd f9ec 	bl	800b9d8 <lfs_dir_get>
 800e600:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 800e602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e604:	2b00      	cmp	r3, #0
 800e606:	da06      	bge.n	800e616 <lfs_file_rawopencfg+0x23a>
 800e608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e60a:	f113 0f02 	cmn.w	r3, #2
 800e60e:	d002      	beq.n	800e616 <lfs_file_rawopencfg+0x23a>
                err = res;
 800e610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e612:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800e614:	e096      	b.n	800e744 <lfs_file_rawopencfg+0x368>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e61a:	f003 0302 	and.w	r3, r3, #2
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d017      	beq.n	800e652 <lfs_file_rawopencfg+0x276>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e626:	6859      	ldr	r1, [r3, #4]
 800e628:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e62a:	4613      	mov	r3, r2
 800e62c:	005b      	lsls	r3, r3, #1
 800e62e:	4413      	add	r3, r2
 800e630:	009b      	lsls	r3, r3, #2
 800e632:	440b      	add	r3, r1
 800e634:	689a      	ldr	r2, [r3, #8]
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d903      	bls.n	800e646 <lfs_file_rawopencfg+0x26a>
                err = LFS_ERR_NOSPC;
 800e63e:	f06f 031b 	mvn.w	r3, #27
 800e642:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800e644:	e07e      	b.n	800e744 <lfs_file_rawopencfg+0x368>
            }

            file->flags |= LFS_F_DIRTY;
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e64a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800e652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e654:	3301      	adds	r3, #1
 800e656:	657b      	str	r3, [r7, #84]	; 0x54
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e65c:	689b      	ldr	r3, [r3, #8]
 800e65e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e660:	429a      	cmp	r2, r3
 800e662:	d395      	bcc.n	800e590 <lfs_file_rawopencfg+0x1b4>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d005      	beq.n	800e67a <lfs_file_rawopencfg+0x29e>
        file->cache.buffer = file->cfg->buffer;
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e672:	681a      	ldr	r2, [r3, #0]
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	64da      	str	r2, [r3, #76]	; 0x4c
 800e678:	e010      	b.n	800e69c <lfs_file_rawopencfg+0x2c0>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e67e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e680:	4618      	mov	r0, r3
 800e682:	f7fc f94a 	bl	800a91a <lfs_malloc>
 800e686:	4602      	mov	r2, r0
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e690:	2b00      	cmp	r3, #0
 800e692:	d103      	bne.n	800e69c <lfs_file_rawopencfg+0x2c0>
            err = LFS_ERR_NOMEM;
 800e694:	f06f 030b 	mvn.w	r3, #11
 800e698:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800e69a:	e053      	b.n	800e744 <lfs_file_rawopencfg+0x368>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	3340      	adds	r3, #64	; 0x40
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	68f8      	ldr	r0, [r7, #12]
 800e6a4:	f7fc f95f 	bl	800a966 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800e6a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7fc fd80 	bl	800b1b0 <lfs_tag_type3>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	f240 2301 	movw	r3, #513	; 0x201
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d141      	bne.n	800e740 <lfs_file_rawopencfg+0x364>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	f06f 0201 	mvn.w	r2, #1
 800e6c2:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 800e6c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7fc fdac 	bl	800b224 <lfs_tag_size>
 800e6cc:	4602      	mov	r2, r0
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e6f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d020      	beq.n	800e740 <lfs_file_rawopencfg+0x364>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	889b      	ldrh	r3, [r3, #4]
 800e708:	029c      	lsls	r4, r3, #10
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e70e:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800e712:	4618      	mov	r0, r3
 800e714:	f7fc f862 	bl	800a7dc <lfs_min>
 800e718:	4603      	mov	r3, r0
 800e71a:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800e71c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800e724:	9300      	str	r3, [sp, #0]
 800e726:	4613      	mov	r3, r2
 800e728:	4a0f      	ldr	r2, [pc, #60]	; (800e768 <lfs_file_rawopencfg+0x38c>)
 800e72a:	4629      	mov	r1, r5
 800e72c:	68f8      	ldr	r0, [r7, #12]
 800e72e:	f7fd f953 	bl	800b9d8 <lfs_dir_get>
 800e732:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 800e734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e736:	2b00      	cmp	r3, #0
 800e738:	da02      	bge.n	800e740 <lfs_file_rawopencfg+0x364>
                err = res;
 800e73a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e73c:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800e73e:	e001      	b.n	800e744 <lfs_file_rawopencfg+0x368>
            }
        }
    }

    return 0;
 800e740:	2300      	movs	r3, #0
 800e742:	e00a      	b.n	800e75a <lfs_file_rawopencfg+0x37e>

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e748:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 800e750:	68b9      	ldr	r1, [r7, #8]
 800e752:	68f8      	ldr	r0, [r7, #12]
 800e754:	f000 f824 	bl	800e7a0 <lfs_file_rawclose>
    return err;
 800e758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800e75a:	4618      	mov	r0, r3
 800e75c:	3760      	adds	r7, #96	; 0x60
 800e75e:	46bd      	mov	sp, r7
 800e760:	bdb0      	pop	{r4, r5, r7, pc}
 800e762:	bf00      	nop
 800e764:	20100000 	.word	0x20100000
 800e768:	700ffc00 	.word	0x700ffc00
 800e76c:	7ffffc00 	.word	0x7ffffc00

0800e770 <lfs_file_rawopen>:

static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 800e770:	b580      	push	{r7, lr}
 800e772:	b088      	sub	sp, #32
 800e774:	af02      	add	r7, sp, #8
 800e776:	60f8      	str	r0, [r7, #12]
 800e778:	60b9      	str	r1, [r7, #8]
 800e77a:	607a      	str	r2, [r7, #4]
 800e77c:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 800e77e:	4b07      	ldr	r3, [pc, #28]	; (800e79c <lfs_file_rawopen+0x2c>)
 800e780:	9300      	str	r3, [sp, #0]
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	687a      	ldr	r2, [r7, #4]
 800e786:	68b9      	ldr	r1, [r7, #8]
 800e788:	68f8      	ldr	r0, [r7, #12]
 800e78a:	f7ff fe27 	bl	800e3dc <lfs_file_rawopencfg>
 800e78e:	6178      	str	r0, [r7, #20]
    return err;
 800e790:	697b      	ldr	r3, [r7, #20]
}
 800e792:	4618      	mov	r0, r3
 800e794:	3718      	adds	r7, #24
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
 800e79a:	bf00      	nop
 800e79c:	08027228 	.word	0x08027228

0800e7a0 <lfs_file_rawclose>:

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 800e7aa:	6839      	ldr	r1, [r7, #0]
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f000 f9e5 	bl	800eb7c <lfs_file_rawsync>
 800e7b2:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 800e7b4:	6839      	ldr	r1, [r7, #0]
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f7fc fee9 	bl	800b58e <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d104      	bne.n	800e7d0 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f7fc f8b1 	bl	800a932 <lfs_free>
    }

    return err;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3710      	adds	r7, #16
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}
	...

0800e7dc <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 800e7dc:	b590      	push	{r4, r7, lr}
 800e7de:	b08d      	sub	sp, #52	; 0x34
 800e7e0:	af06      	add	r7, sp, #24
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800e7e6:	f107 030c 	add.w	r3, r7, #12
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f7fc ff59 	bl	800b6a4 <lfs_alloc>
 800e7f2:	6138      	str	r0, [r7, #16]
        if (err) {
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d001      	beq.n	800e7fe <lfs_file_relocate+0x22>
            return err;
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	e0bb      	b.n	800e976 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	4619      	mov	r1, r3
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f7fc fbb8 	bl	800af78 <lfs_bd_erase>
 800e808:	6138      	str	r0, [r7, #16]
        if (err) {
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d006      	beq.n	800e81e <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800e816:	f000 809b 	beq.w	800e950 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	e0ab      	b.n	800e976 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 800e81e:	2300      	movs	r3, #0
 800e820:	617b      	str	r3, [r7, #20]
 800e822:	e069      	b.n	800e8f8 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e828:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d027      	beq.n	800e880 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	f103 0008 	add.w	r0, r3, #8
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	889b      	ldrh	r3, [r3, #4]
 800e848:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 800e84a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e84e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e852:	2101      	movs	r1, #1
 800e854:	9105      	str	r1, [sp, #20]
 800e856:	f107 010b 	add.w	r1, r7, #11
 800e85a:	9104      	str	r1, [sp, #16]
 800e85c:	6979      	ldr	r1, [r7, #20]
 800e85e:	9103      	str	r1, [sp, #12]
 800e860:	9302      	str	r3, [sp, #8]
 800e862:	4b47      	ldr	r3, [pc, #284]	; (800e980 <lfs_file_relocate+0x1a4>)
 800e864:	9301      	str	r3, [sp, #4]
 800e866:	9200      	str	r2, [sp, #0]
 800e868:	4623      	mov	r3, r4
 800e86a:	2200      	movs	r2, #0
 800e86c:	4601      	mov	r1, r0
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f7fd f8cd 	bl	800ba0e <lfs_dir_getread>
 800e874:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d01e      	beq.n	800e8ba <lfs_file_relocate+0xde>
                    return err;
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	e07a      	b.n	800e976 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 800e886:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	1ad4      	subs	r4, r2, r3
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e894:	2201      	movs	r2, #1
 800e896:	9203      	str	r2, [sp, #12]
 800e898:	f107 020b 	add.w	r2, r7, #11
 800e89c:	9202      	str	r2, [sp, #8]
 800e89e:	697a      	ldr	r2, [r7, #20]
 800e8a0:	9201      	str	r2, [sp, #4]
 800e8a2:	9300      	str	r3, [sp, #0]
 800e8a4:	4623      	mov	r3, r4
 800e8a6:	4602      	mov	r2, r0
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f7fc f873 	bl	800a994 <lfs_bd_read>
 800e8ae:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 800e8b0:	693b      	ldr	r3, [r7, #16]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d001      	beq.n	800e8ba <lfs_file_relocate+0xde>
                    return err;
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	e05d      	b.n	800e976 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f103 0110 	add.w	r1, r3, #16
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2201      	movs	r2, #1
 800e8c6:	9203      	str	r2, [sp, #12]
 800e8c8:	f107 020b 	add.w	r2, r7, #11
 800e8cc:	9202      	str	r2, [sp, #8]
 800e8ce:	697a      	ldr	r2, [r7, #20]
 800e8d0:	9201      	str	r2, [sp, #4]
 800e8d2:	9300      	str	r3, [sp, #0]
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f7fc faa1 	bl	800ae20 <lfs_bd_prog>
 800e8de:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d005      	beq.n	800e8f2 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800e8ec:	d032      	beq.n	800e954 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	e041      	b.n	800e976 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	617b      	str	r3, [r7, #20]
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8fc:	697a      	ldr	r2, [r7, #20]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d390      	bcc.n	800e824 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	69d9      	ldr	r1, [r3, #28]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e90e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e910:	461a      	mov	r2, r3
 800e912:	f013 fa28 	bl	8021d66 <memcpy>
        file->cache.block = lfs->pcache.block;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	691a      	ldr	r2, [r3, #16]
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	695a      	ldr	r2, [r3, #20]
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	699a      	ldr	r2, [r3, #24]
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	3310      	adds	r3, #16
 800e932:	4619      	mov	r1, r3
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f7fc f816 	bl	800a966 <lfs_cache_zero>

        file->block = nblock;
 800e93a:	68fa      	ldr	r2, [r7, #12]
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e944:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 800e94c:	2300      	movs	r3, #0
 800e94e:	e012      	b.n	800e976 <lfs_file_relocate+0x19a>
                goto relocate;
 800e950:	bf00      	nop
 800e952:	e000      	b.n	800e956 <lfs_file_relocate+0x17a>
                    goto relocate;
 800e954:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	4a0a      	ldr	r2, [pc, #40]	; (800e984 <lfs_file_relocate+0x1a8>)
 800e95a:	9200      	str	r2, [sp, #0]
 800e95c:	f640 229b 	movw	r2, #2715	; 0xa9b
 800e960:	4909      	ldr	r1, [pc, #36]	; (800e988 <lfs_file_relocate+0x1ac>)
 800e962:	480a      	ldr	r0, [pc, #40]	; (800e98c <lfs_file_relocate+0x1b0>)
 800e964:	f012 fed8 	bl	8021718 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	3310      	adds	r3, #16
 800e96c:	4619      	mov	r1, r3
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f7fb ffea 	bl	800a948 <lfs_cache_drop>
    while (true) {
 800e974:	e737      	b.n	800e7e6 <lfs_file_relocate+0xa>
    }
}
 800e976:	4618      	mov	r0, r3
 800e978:	371c      	adds	r7, #28
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd90      	pop	{r4, r7, pc}
 800e97e:	bf00      	nop
 800e980:	fff7fc00 	.word	0xfff7fc00
 800e984:	080233f4 	.word	0x080233f4
 800e988:	080232e8 	.word	0x080232e8
 800e98c:	0802349c 	.word	0x0802349c

0800e990 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 800e990:	b580      	push	{r7, lr}
 800e992:	b084      	sub	sp, #16
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f7fc fe5e 	bl	800b664 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 800e9a8:	6839      	ldr	r1, [r7, #0]
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f7ff ff16 	bl	800e7dc <lfs_file_relocate>
 800e9b0:	60f8      	str	r0, [r7, #12]
    if (err) {
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d001      	beq.n	800e9bc <lfs_file_outline+0x2c>
        return err;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	e006      	b.n	800e9ca <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 800e9c8:	2300      	movs	r3, #0
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3710      	adds	r7, #16
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
	...

0800e9d4 <lfs_file_flush>:
#endif

#ifndef LFS_READONLY
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 800e9d4:	b590      	push	{r4, r7, lr}
 800e9d6:	b09f      	sub	sp, #124	; 0x7c
 800e9d8:	af02      	add	r7, sp, #8
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d011      	beq.n	800ea0e <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d105      	bne.n	800ea02 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	3340      	adds	r3, #64	; 0x40
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f7fb ffa3 	bl	800a948 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea06:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    if (file->flags & LFS_F_WRITING) {
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	f000 80a4 	beq.w	800eb64 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea20:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d176      	bne.n	800eb1c <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 800ea2e:	f107 030c 	add.w	r3, r7, #12
 800ea32:	2254      	movs	r2, #84	; 0x54
 800ea34:	2100      	movs	r1, #0
 800ea36:	4618      	mov	r0, r3
 800ea38:	f013 f884 	bl	8021b44 <memset>
                .ctz.head = file->ctz.head,
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 800ea40:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 800ea46:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea48:	2301      	movs	r3, #1
 800ea4a:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 800ea50:	643b      	str	r3, [r7, #64]	; 0x40
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800ea58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ea5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	4619      	mov	r1, r3
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f7fb ff70 	bl	800a948 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 800ea68:	e02b      	b.n	800eac2 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_rawread(lfs, &orig, &data, 1);
 800ea6a:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800ea6e:	f107 010c 	add.w	r1, r7, #12
 800ea72:	2301      	movs	r3, #1
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f000 f90d 	bl	800ec94 <lfs_file_rawread>
 800ea7a:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800ea7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	da01      	bge.n	800ea86 <lfs_file_flush+0xb2>
                    return res;
 800ea82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea84:	e06f      	b.n	800eb66 <lfs_file_flush+0x192>
                }

                res = lfs_file_rawwrite(lfs, file, &data, 1);
 800ea86:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	6839      	ldr	r1, [r7, #0]
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f000 f9f4 	bl	800ee7c <lfs_file_rawwrite>
 800ea94:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800ea96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	da01      	bge.n	800eaa0 <lfs_file_flush+0xcc>
                    return res;
 800ea9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea9e:	e062      	b.n	800eb66 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eaa8:	d00b      	beq.n	800eac2 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 800eaaa:	f107 030c 	add.w	r3, r7, #12
 800eaae:	3340      	adds	r3, #64	; 0x40
 800eab0:	4619      	mov	r1, r3
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f7fb ff48 	bl	800a948 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	4619      	mov	r1, r3
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f7fb ff43 	bl	800a948 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d3cd      	bcc.n	800ea6a <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800ead4:	687a      	ldr	r2, [r7, #4]
 800ead6:	2301      	movs	r3, #1
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f7fc f8f1 	bl	800acc0 <lfs_bd_flush>
 800eade:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 800eae0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d026      	beq.n	800eb34 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 800eae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eae8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800eaec:	d001      	beq.n	800eaf2 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 800eaee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eaf0:	e039      	b.n	800eb66 <lfs_file_flush+0x192>
                        goto relocate;
 800eaf2:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaf8:	4a1d      	ldr	r2, [pc, #116]	; (800eb70 <lfs_file_flush+0x19c>)
 800eafa:	9200      	str	r2, [sp, #0]
 800eafc:	f640 22ea 	movw	r2, #2794	; 0xaea
 800eb00:	491c      	ldr	r1, [pc, #112]	; (800eb74 <lfs_file_flush+0x1a0>)
 800eb02:	481d      	ldr	r0, [pc, #116]	; (800eb78 <lfs_file_flush+0x1a4>)
 800eb04:	f012 fe08 	bl	8021718 <iprintf>
                err = lfs_file_relocate(lfs, file);
 800eb08:	6839      	ldr	r1, [r7, #0]
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f7ff fe66 	bl	800e7dc <lfs_file_relocate>
 800eb10:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 800eb12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d0da      	beq.n	800eace <lfs_file_flush+0xfa>
                    return err;
 800eb18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eb1a:	e024      	b.n	800eb66 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb24:	4619      	mov	r1, r3
 800eb26:	4610      	mov	r0, r2
 800eb28:	f7fb fe48 	bl	800a7bc <lfs_max>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	635a      	str	r2, [r3, #52]	; 0x34
 800eb32:	e000      	b.n	800eb36 <lfs_file_flush+0x162>
                break;
 800eb34:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800eb62:	635a      	str	r2, [r3, #52]	; 0x34
    }

    return 0;
 800eb64:	2300      	movs	r3, #0
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3774      	adds	r7, #116	; 0x74
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd90      	pop	{r4, r7, pc}
 800eb6e:	bf00      	nop
 800eb70:	080233f4 	.word	0x080233f4
 800eb74:	080232e8 	.word	0x080232e8
 800eb78:	0802349c 	.word	0x0802349c

0800eb7c <lfs_file_rawsync>:
#endif

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b090      	sub	sp, #64	; 0x40
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d001      	beq.n	800eb96 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 800eb92:	2300      	movs	r3, #0
 800eb94:	e07a      	b.n	800ec8c <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 800eb96:	6839      	ldr	r1, [r7, #0]
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f7ff ff1b 	bl	800e9d4 <lfs_file_flush>
 800eb9e:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 800eba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d007      	beq.n	800ebb6 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebaa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 800ebb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb4:	e06a      	b.n	800ec8c <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d063      	beq.n	800ec8a <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	3308      	adds	r3, #8
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7fc fa1b 	bl	800b002 <lfs_pair_isnull>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	f083 0301 	eor.w	r3, r3, #1
 800ebd2:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d058      	beq.n	800ec8a <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d009      	beq.n	800ebf8 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 800ebe4:	f240 2301 	movw	r3, #513	; 0x201
 800ebe8:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ebee:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebf4:	637b      	str	r3, [r7, #52]	; 0x34
 800ebf6:	e014      	b.n	800ec22 <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 800ebf8:	f240 2302 	movw	r3, #514	; 0x202
 800ebfc:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 800ebfe:	683a      	ldr	r2, [r7, #0]
 800ec00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ec04:	3228      	adds	r2, #40	; 0x28
 800ec06:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec0a:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 800ec0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7fc fc16 	bl	800b444 <lfs_ctz_tole32>
            buffer = &ctz;
 800ec18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ec1c:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 800ec1e:	2308      	movs	r3, #8
 800ec20:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	f103 0108 	add.w	r1, r3, #8
 800ec28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ec2a:	051a      	lsls	r2, r3, #20
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	889b      	ldrh	r3, [r3, #4]
 800ec30:	029b      	lsls	r3, r3, #10
 800ec32:	431a      	orrs	r2, r3
 800ec34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec36:	4313      	orrs	r3, r2
 800ec38:	61bb      	str	r3, [r7, #24]
 800ec3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec3c:	61fb      	str	r3, [r7, #28]
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	889b      	ldrh	r3, [r3, #4]
 800ec42:	029a      	lsls	r2, r3, #10
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec48:	689b      	ldr	r3, [r3, #8]
 800ec4a:	4313      	orrs	r3, r2
 800ec4c:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 800ec50:	623b      	str	r3, [r7, #32]
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	627b      	str	r3, [r7, #36]	; 0x24
 800ec5a:	f107 0218 	add.w	r2, r7, #24
 800ec5e:	2302      	movs	r3, #2
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f7fe fca1 	bl	800d5a8 <lfs_dir_commit>
 800ec66:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 800ec68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d007      	beq.n	800ec7e <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec72:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800ec7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec7c:	e006      	b.n	800ec8c <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 800ec8a:	2300      	movs	r3, #0
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3740      	adds	r7, #64	; 0x40
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <lfs_file_rawread>:
#endif

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800ec94:	b5b0      	push	{r4, r5, r7, lr}
 800ec96:	b092      	sub	sp, #72	; 0x48
 800ec98:	af06      	add	r7, sp, #24
 800ec9a:	60f8      	str	r0, [r7, #12]
 800ec9c:	60b9      	str	r1, [r7, #8]
 800ec9e:	607a      	str	r2, [r7, #4]
 800eca0:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eca6:	f003 0301 	and.w	r3, r3, #1
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d106      	bne.n	800ecbc <lfs_file_rawread+0x28>
 800ecae:	4b6f      	ldr	r3, [pc, #444]	; (800ee6c <lfs_file_rawread+0x1d8>)
 800ecb0:	4a6f      	ldr	r2, [pc, #444]	; (800ee70 <lfs_file_rawread+0x1dc>)
 800ecb2:	f640 3138 	movw	r1, #2872	; 0xb38
 800ecb6:	486f      	ldr	r0, [pc, #444]	; (800ee74 <lfs_file_rawread+0x1e0>)
 800ecb8:	f012 fad8 	bl	802126c <__assert_func>

    uint8_t *data = buffer;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d009      	beq.n	800ece4 <lfs_file_rawread+0x50>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 800ecd0:	68b9      	ldr	r1, [r7, #8]
 800ecd2:	68f8      	ldr	r0, [r7, #12]
 800ecd4:	f7ff fe7e 	bl	800e9d4 <lfs_file_flush>
 800ecd8:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800ecda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d001      	beq.n	800ece4 <lfs_file_rawread+0x50>
            return err;
 800ece0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece2:	e0bf      	b.n	800ee64 <lfs_file_rawread+0x1d0>
        }
    }
#endif

    if (file->pos >= file->ctz.size) {
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecec:	429a      	cmp	r2, r3
 800ecee:	d301      	bcc.n	800ecf4 <lfs_file_rawread+0x60>
        // eof if past end
        return 0;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	e0b7      	b.n	800ee64 <lfs_file_rawread+0x1d0>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecfc:	1ad3      	subs	r3, r2, r3
 800ecfe:	4619      	mov	r1, r3
 800ed00:	6838      	ldr	r0, [r7, #0]
 800ed02:	f7fb fd6b 	bl	800a7dc <lfs_min>
 800ed06:	6038      	str	r0, [r7, #0]
    nsize = size;
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	62bb      	str	r3, [r7, #40]	; 0x28

    while (nsize > 0) {
 800ed0c:	e0a5      	b.n	800ee5a <lfs_file_rawread+0x1c6>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d006      	beq.n	800ed28 <lfs_file_rawread+0x94>
                file->off == lfs->cfg->block_size) {
 800ed1a:	68bb      	ldr	r3, [r7, #8]
 800ed1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ed22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if (!(file->flags & LFS_F_READING) ||
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d130      	bne.n	800ed8a <lfs_file_rawread+0xf6>
            if (!(file->flags & LFS_F_INLINE)) {
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d11c      	bne.n	800ed6e <lfs_file_rawread+0xda>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed42:	68ba      	ldr	r2, [r7, #8]
 800ed44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ed46:	68b9      	ldr	r1, [r7, #8]
 800ed48:	3138      	adds	r1, #56	; 0x38
 800ed4a:	68b8      	ldr	r0, [r7, #8]
 800ed4c:	303c      	adds	r0, #60	; 0x3c
 800ed4e:	9003      	str	r0, [sp, #12]
 800ed50:	9102      	str	r1, [sp, #8]
 800ed52:	9201      	str	r2, [sp, #4]
 800ed54:	9300      	str	r3, [sp, #0]
 800ed56:	462b      	mov	r3, r5
 800ed58:	4622      	mov	r2, r4
 800ed5a:	2100      	movs	r1, #0
 800ed5c:	68f8      	ldr	r0, [r7, #12]
 800ed5e:	f7ff f94d 	bl	800dffc <lfs_ctz_find>
 800ed62:	6238      	str	r0, [r7, #32]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 800ed64:	6a3b      	ldr	r3, [r7, #32]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d009      	beq.n	800ed7e <lfs_file_rawread+0xea>
                    return err;
 800ed6a:	6a3b      	ldr	r3, [r7, #32]
 800ed6c:	e07a      	b.n	800ee64 <lfs_file_rawread+0x1d0>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	f06f 0201 	mvn.w	r2, #1
 800ed74:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ed8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed94:	1ad3      	subs	r3, r2, r3
 800ed96:	4619      	mov	r1, r3
 800ed98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed9a:	f7fb fd1f 	bl	800a7dc <lfs_min>
 800ed9e:	61f8      	str	r0, [r7, #28]
        if (file->flags & LFS_F_INLINE) {
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eda4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d026      	beq.n	800edfa <lfs_file_rawread+0x166>
            int err = lfs_dir_getread(lfs, &file->m,
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	f103 0408 	add.w	r4, r3, #8
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800edbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	889b      	ldrh	r3, [r3, #4]
 800edc2:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 800edc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800edc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800edcc:	68b9      	ldr	r1, [r7, #8]
 800edce:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800edd0:	69f8      	ldr	r0, [r7, #28]
 800edd2:	9005      	str	r0, [sp, #20]
 800edd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edd6:	9004      	str	r0, [sp, #16]
 800edd8:	9103      	str	r1, [sp, #12]
 800edda:	9302      	str	r3, [sp, #8]
 800eddc:	4b26      	ldr	r3, [pc, #152]	; (800ee78 <lfs_file_rawread+0x1e4>)
 800edde:	9301      	str	r3, [sp, #4]
 800ede0:	9200      	str	r2, [sp, #0]
 800ede2:	462b      	mov	r3, r5
 800ede4:	2200      	movs	r2, #0
 800ede6:	4621      	mov	r1, r4
 800ede8:	68f8      	ldr	r0, [r7, #12]
 800edea:	f7fc fe10 	bl	800ba0e <lfs_dir_getread>
 800edee:	6178      	str	r0, [r7, #20]
                    file->off, data, diff);
            if (err) {
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d01d      	beq.n	800ee32 <lfs_file_rawread+0x19e>
                return err;
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	e034      	b.n	800ee64 <lfs_file_rawread+0x1d0>
            }
        } else {
            int err = lfs_bd_read(lfs,
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee04:	6a5c      	ldr	r4, [r3, #36]	; 0x24
            int err = lfs_bd_read(lfs,
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee0a:	68ba      	ldr	r2, [r7, #8]
 800ee0c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ee0e:	69f9      	ldr	r1, [r7, #28]
 800ee10:	9103      	str	r1, [sp, #12]
 800ee12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee14:	9102      	str	r1, [sp, #8]
 800ee16:	9201      	str	r2, [sp, #4]
 800ee18:	9300      	str	r3, [sp, #0]
 800ee1a:	4623      	mov	r3, r4
 800ee1c:	4602      	mov	r2, r0
 800ee1e:	2100      	movs	r1, #0
 800ee20:	68f8      	ldr	r0, [r7, #12]
 800ee22:	f7fb fdb7 	bl	800a994 <lfs_bd_read>
 800ee26:	61b8      	str	r0, [r7, #24]
                    file->block, file->off, data, diff);
            if (err) {
 800ee28:	69bb      	ldr	r3, [r7, #24]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d001      	beq.n	800ee32 <lfs_file_rawread+0x19e>
                return err;
 800ee2e:	69bb      	ldr	r3, [r7, #24]
 800ee30:	e018      	b.n	800ee64 <lfs_file_rawread+0x1d0>
            }
        }

        file->pos += diff;
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee36:	69fb      	ldr	r3, [r7, #28]
 800ee38:	441a      	add	r2, r3
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ee42:	69fb      	ldr	r3, [r7, #28]
 800ee44:	441a      	add	r2, r3
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 800ee4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee4c:	69fb      	ldr	r3, [r7, #28]
 800ee4e:	4413      	add	r3, r2
 800ee50:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 800ee52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee54:	69fb      	ldr	r3, [r7, #28]
 800ee56:	1ad3      	subs	r3, r2, r3
 800ee58:	62bb      	str	r3, [r7, #40]	; 0x28
    while (nsize > 0) {
 800ee5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	f47f af56 	bne.w	800ed0e <lfs_file_rawread+0x7a>
    }

    return size;
 800ee62:	683b      	ldr	r3, [r7, #0]
}
 800ee64:	4618      	mov	r0, r3
 800ee66:	3730      	adds	r7, #48	; 0x30
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bdb0      	pop	{r4, r5, r7, pc}
 800ee6c:	08023544 	.word	0x08023544
 800ee70:	08027234 	.word	0x08027234
 800ee74:	080232e8 	.word	0x080232e8
 800ee78:	fff7fc00 	.word	0xfff7fc00

0800ee7c <lfs_file_rawwrite>:

#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800ee7c:	b5b0      	push	{r4, r5, r7, lr}
 800ee7e:	b094      	sub	sp, #80	; 0x50
 800ee80:	af04      	add	r7, sp, #16
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	60b9      	str	r1, [r7, #8]
 800ee86:	607a      	str	r2, [r7, #4]
 800ee88:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee8e:	f003 0302 	and.w	r3, r3, #2
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d106      	bne.n	800eea4 <lfs_file_rawwrite+0x28>
 800ee96:	4b85      	ldr	r3, [pc, #532]	; (800f0ac <lfs_file_rawwrite+0x230>)
 800ee98:	4a85      	ldr	r2, [pc, #532]	; (800f0b0 <lfs_file_rawwrite+0x234>)
 800ee9a:	f640 3182 	movw	r1, #2946	; 0xb82
 800ee9e:	4885      	ldr	r0, [pc, #532]	; (800f0b4 <lfs_file_rawwrite+0x238>)
 800eea0:	f012 f9e4 	bl	802126c <__assert_func>

    const uint8_t *data = buffer;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	63fb      	str	r3, [r7, #60]	; 0x3c
    lfs_size_t nsize = size;
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	63bb      	str	r3, [r7, #56]	; 0x38

    if (file->flags & LFS_F_READING) {
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eeb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d009      	beq.n	800eecc <lfs_file_rawwrite+0x50>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 800eeb8:	68b9      	ldr	r1, [r7, #8]
 800eeba:	68f8      	ldr	r0, [r7, #12]
 800eebc:	f7ff fd8a 	bl	800e9d4 <lfs_file_flush>
 800eec0:	6378      	str	r0, [r7, #52]	; 0x34
        if (err) {
 800eec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d001      	beq.n	800eecc <lfs_file_rawwrite+0x50>
            return err;
 800eec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeca:	e166      	b.n	800f19a <lfs_file_rawwrite+0x31e>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d009      	beq.n	800eeec <lfs_file_rawwrite+0x70>
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d203      	bcs.n	800eeec <lfs_file_rawwrite+0x70>
        file->pos = file->ctz.size;
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	441a      	add	r2, r3
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d902      	bls.n	800ef02 <lfs_file_rawwrite+0x86>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 800eefc:	f06f 031a 	mvn.w	r3, #26
 800ef00:	e14b      	b.n	800f19a <lfs_file_rawwrite+0x31e>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d121      	bne.n	800ef52 <lfs_file_rawwrite+0xd6>
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef12:	68bb      	ldr	r3, [r7, #8]
 800ef14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef16:	429a      	cmp	r2, r3
 800ef18:	d91b      	bls.n	800ef52 <lfs_file_rawwrite+0xd6>
        // fill with zeros
        lfs_off_t pos = file->pos;
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef1e:	633b      	str	r3, [r7, #48]	; 0x30
        file->pos = file->ctz.size;
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 800ef28:	e00e      	b.n	800ef48 <lfs_file_rawwrite+0xcc>
            lfs_ssize_t res = lfs_file_rawwrite(lfs, file, &(uint8_t){0}, 1);
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	75fb      	strb	r3, [r7, #23]
 800ef2e:	f107 0217 	add.w	r2, r7, #23
 800ef32:	2301      	movs	r3, #1
 800ef34:	68b9      	ldr	r1, [r7, #8]
 800ef36:	68f8      	ldr	r0, [r7, #12]
 800ef38:	f7ff ffa0 	bl	800ee7c <lfs_file_rawwrite>
 800ef3c:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (res < 0) {
 800ef3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	da01      	bge.n	800ef48 <lfs_file_rawwrite+0xcc>
                return res;
 800ef44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef46:	e128      	b.n	800f19a <lfs_file_rawwrite+0x31e>
        while (file->pos < pos) {
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d8eb      	bhi.n	800ef2a <lfs_file_rawwrite+0xae>
            }
        }
    }

    if ((file->flags & LFS_F_INLINE) &&
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	f000 8112 	beq.w	800f184 <lfs_file_rawwrite+0x308>
            lfs_max(file->pos+nsize, file->ctz.size) >
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef66:	441a      	add	r2, r3
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	4610      	mov	r0, r2
 800ef70:	f7fb fc24 	bl	800a7bc <lfs_max>
 800ef74:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                (lfs->cfg->metadata_max ?
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
            lfs_min(0x3fe, lfs_min(
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d004      	beq.n	800ef90 <lfs_file_rawwrite+0x114>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
            lfs_min(0x3fe, lfs_min(
 800ef8c:	08db      	lsrs	r3, r3, #3
 800ef8e:	e003      	b.n	800ef98 <lfs_file_rawwrite+0x11c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            lfs_min(0x3fe, lfs_min(
 800ef96:	08db      	lsrs	r3, r3, #3
 800ef98:	4619      	mov	r1, r3
 800ef9a:	4610      	mov	r0, r2
 800ef9c:	f7fb fc1e 	bl	800a7dc <lfs_min>
 800efa0:	4603      	mov	r3, r0
 800efa2:	4619      	mov	r1, r3
 800efa4:	f240 30fe 	movw	r0, #1022	; 0x3fe
 800efa8:	f7fb fc18 	bl	800a7dc <lfs_min>
 800efac:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 800efae:	429c      	cmp	r4, r3
 800efb0:	f240 80e8 	bls.w	800f184 <lfs_file_rawwrite+0x308>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 800efb4:	68b9      	ldr	r1, [r7, #8]
 800efb6:	68f8      	ldr	r0, [r7, #12]
 800efb8:	f7ff fcea 	bl	800e990 <lfs_file_outline>
 800efbc:	62b8      	str	r0, [r7, #40]	; 0x28
        if (err) {
 800efbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	f000 80df 	beq.w	800f184 <lfs_file_rawwrite+0x308>
            file->flags |= LFS_F_ERRED;
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800efd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd4:	e0e1      	b.n	800f19a <lfs_file_rawwrite+0x31e>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 800efd6:	68bb      	ldr	r3, [r7, #8]
 800efd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d006      	beq.n	800eff0 <lfs_file_rawwrite+0x174>
                file->off == lfs->cfg->block_size) {
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800efea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 800efec:	429a      	cmp	r2, r3
 800efee:	d171      	bne.n	800f0d4 <lfs_file_rawwrite+0x258>
            if (!(file->flags & LFS_F_INLINE)) {
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d15d      	bne.n	800f0b8 <lfs_file_rawwrite+0x23c>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f004:	2b00      	cmp	r3, #0
 800f006:	d12d      	bne.n	800f064 <lfs_file_rawwrite+0x1e8>
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d029      	beq.n	800f064 <lfs_file_rawwrite+0x1e8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800f010:	68bb      	ldr	r3, [r7, #8]
 800f012:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 800f01e:	68ba      	ldr	r2, [r7, #8]
 800f020:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800f022:	3a01      	subs	r2, #1
 800f024:	68b9      	ldr	r1, [r7, #8]
 800f026:	3138      	adds	r1, #56	; 0x38
 800f028:	68b8      	ldr	r0, [r7, #8]
 800f02a:	303c      	adds	r0, #60	; 0x3c
 800f02c:	9003      	str	r0, [sp, #12]
 800f02e:	9102      	str	r1, [sp, #8]
 800f030:	9201      	str	r2, [sp, #4]
 800f032:	9300      	str	r3, [sp, #0]
 800f034:	462b      	mov	r3, r5
 800f036:	4622      	mov	r2, r4
 800f038:	2100      	movs	r1, #0
 800f03a:	68f8      	ldr	r0, [r7, #12]
 800f03c:	f7fe ffde 	bl	800dffc <lfs_ctz_find>
 800f040:	6278      	str	r0, [r7, #36]	; 0x24
                    if (err) {
 800f042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f044:	2b00      	cmp	r3, #0
 800f046:	d007      	beq.n	800f058 <lfs_file_rawwrite+0x1dc>
                        file->flags |= LFS_F_ERRED;
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f04c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 800f054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f056:	e0a0      	b.n	800f19a <lfs_file_rawwrite+0x31e>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	3340      	adds	r3, #64	; 0x40
 800f05c:	4619      	mov	r1, r3
 800f05e:	68f8      	ldr	r0, [r7, #12]
 800f060:	f7fb fc81 	bl	800a966 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 800f064:	68f8      	ldr	r0, [r7, #12]
 800f066:	f7fc fafd 	bl	800b664 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800f070:	68fc      	ldr	r4, [r7, #12]
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f07a:	68ba      	ldr	r2, [r7, #8]
 800f07c:	3238      	adds	r2, #56	; 0x38
 800f07e:	68b9      	ldr	r1, [r7, #8]
 800f080:	313c      	adds	r1, #60	; 0x3c
 800f082:	9102      	str	r1, [sp, #8]
 800f084:	9201      	str	r2, [sp, #4]
 800f086:	9300      	str	r3, [sp, #0]
 800f088:	462b      	mov	r3, r5
 800f08a:	4622      	mov	r2, r4
 800f08c:	4601      	mov	r1, r0
 800f08e:	68f8      	ldr	r0, [r7, #12]
 800f090:	f7ff f820 	bl	800e0d4 <lfs_ctz_extend>
 800f094:	6238      	str	r0, [r7, #32]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 800f096:	6a3b      	ldr	r3, [r7, #32]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d015      	beq.n	800f0c8 <lfs_file_rawwrite+0x24c>
                    file->flags |= LFS_F_ERRED;
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0a0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 800f0a8:	6a3b      	ldr	r3, [r7, #32]
 800f0aa:	e076      	b.n	800f19a <lfs_file_rawwrite+0x31e>
 800f0ac:	08023574 	.word	0x08023574
 800f0b0:	08027248 	.word	0x08027248
 800f0b4:	080232e8 	.word	0x080232e8
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	f06f 0201 	mvn.w	r2, #1
 800f0be:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0cc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f0d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0de:	1ad3      	subs	r3, r2, r3
 800f0e0:	4619      	mov	r1, r3
 800f0e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f0e4:	f7fb fb7a 	bl	800a7dc <lfs_min>
 800f0e8:	61f8      	str	r0, [r7, #28]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800f0f0:	68fc      	ldr	r4, [r7, #12]
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0f6:	68ba      	ldr	r2, [r7, #8]
 800f0f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800f0fa:	69f9      	ldr	r1, [r7, #28]
 800f0fc:	9103      	str	r1, [sp, #12]
 800f0fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f100:	9102      	str	r1, [sp, #8]
 800f102:	9201      	str	r2, [sp, #4]
 800f104:	9300      	str	r3, [sp, #0]
 800f106:	2301      	movs	r3, #1
 800f108:	4622      	mov	r2, r4
 800f10a:	4601      	mov	r1, r0
 800f10c:	68f8      	ldr	r0, [r7, #12]
 800f10e:	f7fb fe87 	bl	800ae20 <lfs_bd_prog>
 800f112:	61b8      	str	r0, [r7, #24]
                    file->block, file->off, data, diff);
            if (err) {
 800f114:	69bb      	ldr	r3, [r7, #24]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d01c      	beq.n	800f154 <lfs_file_rawwrite+0x2d8>
                if (err == LFS_ERR_CORRUPT) {
 800f11a:	69bb      	ldr	r3, [r7, #24]
 800f11c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800f120:	d007      	beq.n	800f132 <lfs_file_rawwrite+0x2b6>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f126:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 800f12e:	69bb      	ldr	r3, [r7, #24]
 800f130:	e033      	b.n	800f19a <lfs_file_rawwrite+0x31e>
                    goto relocate;
 800f132:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 800f134:	68b9      	ldr	r1, [r7, #8]
 800f136:	68f8      	ldr	r0, [r7, #12]
 800f138:	f7ff fb50 	bl	800e7dc <lfs_file_relocate>
 800f13c:	61b8      	str	r0, [r7, #24]
            if (err) {
 800f13e:	69bb      	ldr	r3, [r7, #24]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d0d2      	beq.n	800f0ea <lfs_file_rawwrite+0x26e>
                file->flags |= LFS_F_ERRED;
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f148:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 800f150:	69bb      	ldr	r3, [r7, #24]
 800f152:	e022      	b.n	800f19a <lfs_file_rawwrite+0x31e>
            break;
 800f154:	bf00      	nop
            }
        }

        file->pos += diff;
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f15a:	69fb      	ldr	r3, [r7, #28]
 800f15c:	441a      	add	r2, r3
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f166:	69fb      	ldr	r3, [r7, #28]
 800f168:	441a      	add	r2, r3
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 800f16e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f170:	69fb      	ldr	r3, [r7, #28]
 800f172:	4413      	add	r3, r2
 800f174:	63fb      	str	r3, [r7, #60]	; 0x3c
        nsize -= diff;
 800f176:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f178:	69fb      	ldr	r3, [r7, #28]
 800f17a:	1ad3      	subs	r3, r2, r3
 800f17c:	63bb      	str	r3, [r7, #56]	; 0x38

        lfs_alloc_ack(lfs);
 800f17e:	68f8      	ldr	r0, [r7, #12]
 800f180:	f7fc fa70 	bl	800b664 <lfs_alloc_ack>
    while (nsize > 0) {
 800f184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f186:	2b00      	cmp	r3, #0
 800f188:	f47f af25 	bne.w	800efd6 <lfs_file_rawwrite+0x15a>
    }

    file->flags &= ~LFS_F_ERRED;
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f190:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	631a      	str	r2, [r3, #48]	; 0x30
    return size;
 800f198:	683b      	ldr	r3, [r7, #0]
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3740      	adds	r7, #64	; 0x40
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bdb0      	pop	{r4, r5, r7, pc}
 800f1a2:	bf00      	nop

0800f1a4 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b08c      	sub	sp, #48	; 0x30
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	683a      	ldr	r2, [r7, #0]
 800f1b2:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f1bc:	69db      	ldr	r3, [r3, #28]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d106      	bne.n	800f1d0 <lfs_init+0x2c>
 800f1c2:	4b92      	ldr	r3, [pc, #584]	; (800f40c <lfs_init+0x268>)
 800f1c4:	4a92      	ldr	r2, [pc, #584]	; (800f410 <lfs_init+0x26c>)
 800f1c6:	f640 51a4 	movw	r1, #3492	; 0xda4
 800f1ca:	4892      	ldr	r0, [pc, #584]	; (800f414 <lfs_init+0x270>)
 800f1cc:	f012 f84e 	bl	802126c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f1d4:	6a1b      	ldr	r3, [r3, #32]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d106      	bne.n	800f1e8 <lfs_init+0x44>
 800f1da:	4b8f      	ldr	r3, [pc, #572]	; (800f418 <lfs_init+0x274>)
 800f1dc:	4a8c      	ldr	r2, [pc, #560]	; (800f410 <lfs_init+0x26c>)
 800f1de:	f640 51a5 	movw	r1, #3493	; 0xda5
 800f1e2:	488c      	ldr	r0, [pc, #560]	; (800f414 <lfs_init+0x270>)
 800f1e4:	f012 f842 	bl	802126c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d106      	bne.n	800f200 <lfs_init+0x5c>
 800f1f2:	4b8a      	ldr	r3, [pc, #552]	; (800f41c <lfs_init+0x278>)
 800f1f4:	4a86      	ldr	r2, [pc, #536]	; (800f410 <lfs_init+0x26c>)
 800f1f6:	f640 51a6 	movw	r1, #3494	; 0xda6
 800f1fa:	4886      	ldr	r0, [pc, #536]	; (800f414 <lfs_init+0x270>)
 800f1fc:	f012 f836 	bl	802126c <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f206:	687a      	ldr	r2, [r7, #4]
 800f208:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800f20a:	69d2      	ldr	r2, [r2, #28]
 800f20c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f210:	fb01 f202 	mul.w	r2, r1, r2
 800f214:	1a9b      	subs	r3, r3, r2
 800f216:	2b00      	cmp	r3, #0
 800f218:	d006      	beq.n	800f228 <lfs_init+0x84>
 800f21a:	4b81      	ldr	r3, [pc, #516]	; (800f420 <lfs_init+0x27c>)
 800f21c:	4a7c      	ldr	r2, [pc, #496]	; (800f410 <lfs_init+0x26c>)
 800f21e:	f640 51aa 	movw	r1, #3498	; 0xdaa
 800f222:	487c      	ldr	r0, [pc, #496]	; (800f414 <lfs_init+0x270>)
 800f224:	f012 f822 	bl	802126c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f22c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f22e:	687a      	ldr	r2, [r7, #4]
 800f230:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800f232:	6a12      	ldr	r2, [r2, #32]
 800f234:	fbb3 f1f2 	udiv	r1, r3, r2
 800f238:	fb01 f202 	mul.w	r2, r1, r2
 800f23c:	1a9b      	subs	r3, r3, r2
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d006      	beq.n	800f250 <lfs_init+0xac>
 800f242:	4b78      	ldr	r3, [pc, #480]	; (800f424 <lfs_init+0x280>)
 800f244:	4a72      	ldr	r2, [pc, #456]	; (800f410 <lfs_init+0x26c>)
 800f246:	f640 51ab 	movw	r1, #3499	; 0xdab
 800f24a:	4872      	ldr	r0, [pc, #456]	; (800f414 <lfs_init+0x270>)
 800f24c:	f012 f80e 	bl	802126c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f256:	687a      	ldr	r2, [r7, #4]
 800f258:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800f25a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f25c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f260:	fb01 f202 	mul.w	r2, r1, r2
 800f264:	1a9b      	subs	r3, r3, r2
 800f266:	2b00      	cmp	r3, #0
 800f268:	d006      	beq.n	800f278 <lfs_init+0xd4>
 800f26a:	4b6f      	ldr	r3, [pc, #444]	; (800f428 <lfs_init+0x284>)
 800f26c:	4a68      	ldr	r2, [pc, #416]	; (800f410 <lfs_init+0x26c>)
 800f26e:	f640 51ac 	movw	r1, #3500	; 0xdac
 800f272:	4868      	ldr	r0, [pc, #416]	; (800f414 <lfs_init+0x270>)
 800f274:	f011 fffa 	bl	802126c <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f27e:	3b08      	subs	r3, #8
 800f280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f284:	fbb2 f3f3 	udiv	r3, r2, r3
 800f288:	4618      	mov	r0, r3
 800f28a:	f7fb fade 	bl	800a84a <lfs_npw2>
 800f28e:	4603      	mov	r3, r0
 800f290:	009a      	lsls	r2, r3, #2
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f298:	429a      	cmp	r2, r3
 800f29a:	d906      	bls.n	800f2aa <lfs_init+0x106>
 800f29c:	4b63      	ldr	r3, [pc, #396]	; (800f42c <lfs_init+0x288>)
 800f29e:	4a5c      	ldr	r2, [pc, #368]	; (800f410 <lfs_init+0x26c>)
 800f2a0:	f640 51af 	movw	r1, #3503	; 0xdaf
 800f2a4:	485b      	ldr	r0, [pc, #364]	; (800f414 <lfs_init+0x270>)
 800f2a6:	f011 ffe1 	bl	802126c <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d106      	bne.n	800f2c2 <lfs_init+0x11e>
 800f2b4:	4b5e      	ldr	r3, [pc, #376]	; (800f430 <lfs_init+0x28c>)
 800f2b6:	4a56      	ldr	r2, [pc, #344]	; (800f410 <lfs_init+0x26c>)
 800f2b8:	f640 51b8 	movw	r1, #3512	; 0xdb8
 800f2bc:	4855      	ldr	r0, [pc, #340]	; (800f414 <lfs_init+0x270>)
 800f2be:	f011 ffd5 	bl	802126c <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d005      	beq.n	800f2d8 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f2d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	60da      	str	r2, [r3, #12]
 800f2d6:	e010      	b.n	800f2fa <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f7fb fb1b 	bl	800a91a <lfs_malloc>
 800f2e4:	4602      	mov	r2, r0
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	68db      	ldr	r3, [r3, #12]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d103      	bne.n	800f2fa <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 800f2f2:	f06f 030b 	mvn.w	r3, #11
 800f2f6:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800f2f8:	e0fd      	b.n	800f4f6 <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f2fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f300:	2b00      	cmp	r3, #0
 800f302:	d005      	beq.n	800f310 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f308:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	61da      	str	r2, [r3, #28]
 800f30e:	e010      	b.n	800f332 <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f316:	4618      	mov	r0, r3
 800f318:	f7fb faff 	bl	800a91a <lfs_malloc>
 800f31c:	4602      	mov	r2, r0
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	69db      	ldr	r3, [r3, #28]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d103      	bne.n	800f332 <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 800f32a:	f06f 030b 	mvn.w	r3, #11
 800f32e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800f330:	e0e1      	b.n	800f4f6 <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	4619      	mov	r1, r3
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f7fb fb15 	bl	800a966 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	3310      	adds	r3, #16
 800f340:	4619      	mov	r1, r3
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f7fb fb0f 	bl	800a966 <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f34c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d106      	bne.n	800f360 <lfs_init+0x1bc>
 800f352:	4b38      	ldr	r3, [pc, #224]	; (800f434 <lfs_init+0x290>)
 800f354:	4a2e      	ldr	r2, [pc, #184]	; (800f410 <lfs_init+0x26c>)
 800f356:	f640 51d6 	movw	r1, #3542	; 0xdd6
 800f35a:	482e      	ldr	r0, [pc, #184]	; (800f414 <lfs_init+0x270>)
 800f35c:	f011 ff86 	bl	802126c <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f366:	f003 0307 	and.w	r3, r3, #7
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d106      	bne.n	800f37c <lfs_init+0x1d8>
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f374:	f003 0303 	and.w	r3, r3, #3
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d006      	beq.n	800f38a <lfs_init+0x1e6>
 800f37c:	4b2e      	ldr	r3, [pc, #184]	; (800f438 <lfs_init+0x294>)
 800f37e:	4a24      	ldr	r2, [pc, #144]	; (800f410 <lfs_init+0x26c>)
 800f380:	f640 51d7 	movw	r1, #3543	; 0xdd7
 800f384:	4823      	ldr	r0, [pc, #140]	; (800f414 <lfs_init+0x270>)
 800f386:	f011 ff71 	bl	802126c <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f38e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f390:	2b00      	cmp	r3, #0
 800f392:	d005      	beq.n	800f3a0 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	665a      	str	r2, [r3, #100]	; 0x64
 800f39e:	e010      	b.n	800f3c2 <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7fb fab7 	bl	800a91a <lfs_malloc>
 800f3ac:	4602      	mov	r2, r0
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d103      	bne.n	800f3c2 <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 800f3ba:	f06f 030b 	mvn.w	r3, #11
 800f3be:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800f3c0:	e099      	b.n	800f4f6 <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f3c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3c8:	2bff      	cmp	r3, #255	; 0xff
 800f3ca:	d906      	bls.n	800f3da <lfs_init+0x236>
 800f3cc:	4b1b      	ldr	r3, [pc, #108]	; (800f43c <lfs_init+0x298>)
 800f3ce:	4a10      	ldr	r2, [pc, #64]	; (800f410 <lfs_init+0x26c>)
 800f3d0:	f640 51e4 	movw	r1, #3556	; 0xde4
 800f3d4:	480f      	ldr	r0, [pc, #60]	; (800f414 <lfs_init+0x270>)
 800f3d6:	f011 ff49 	bl	802126c <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f3de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d102      	bne.n	800f3f2 <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	22ff      	movs	r2, #255	; 0xff
 800f3f0:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f3f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	da23      	bge.n	800f444 <lfs_init+0x2a0>
 800f3fc:	4b10      	ldr	r3, [pc, #64]	; (800f440 <lfs_init+0x29c>)
 800f3fe:	4a04      	ldr	r2, [pc, #16]	; (800f410 <lfs_init+0x26c>)
 800f400:	f640 51ea 	movw	r1, #3562	; 0xdea
 800f404:	4803      	ldr	r0, [pc, #12]	; (800f414 <lfs_init+0x270>)
 800f406:	f011 ff31 	bl	802126c <__assert_func>
 800f40a:	bf00      	nop
 800f40c:	080235a4 	.word	0x080235a4
 800f410:	0802725c 	.word	0x0802725c
 800f414:	080232e8 	.word	0x080232e8
 800f418:	080235c0 	.word	0x080235c0
 800f41c:	080235dc 	.word	0x080235dc
 800f420:	080235f8 	.word	0x080235f8
 800f424:	08023628 	.word	0x08023628
 800f428:	08023658 	.word	0x08023658
 800f42c:	0802368c 	.word	0x0802368c
 800f430:	080236d8 	.word	0x080236d8
 800f434:	080236f4 	.word	0x080236f4
 800f438:	08023714 	.word	0x08023714
 800f43c:	08023768 	.word	0x08023768
 800f440:	08023784 	.word	0x08023784
    lfs->file_max = lfs->cfg->file_max;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f448:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f452:	2b00      	cmp	r3, #0
 800f454:	d103      	bne.n	800f45e <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800f45c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f464:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800f468:	4293      	cmp	r3, r2
 800f46a:	d906      	bls.n	800f47a <lfs_init+0x2d6>
 800f46c:	4b26      	ldr	r3, [pc, #152]	; (800f508 <lfs_init+0x364>)
 800f46e:	4a27      	ldr	r2, [pc, #156]	; (800f50c <lfs_init+0x368>)
 800f470:	f44f 615f 	mov.w	r1, #3568	; 0xdf0
 800f474:	4826      	ldr	r0, [pc, #152]	; (800f510 <lfs_init+0x36c>)
 800f476:	f011 fef9 	bl	802126c <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f47e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d103      	bne.n	800f494 <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800f492:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d906      	bls.n	800f4b2 <lfs_init+0x30e>
 800f4a4:	4b1b      	ldr	r3, [pc, #108]	; (800f514 <lfs_init+0x370>)
 800f4a6:	4a19      	ldr	r2, [pc, #100]	; (800f50c <lfs_init+0x368>)
 800f4a8:	f640 51f6 	movw	r1, #3574	; 0xdf6
 800f4ac:	4818      	ldr	r0, [pc, #96]	; (800f510 <lfs_init+0x36c>)
 800f4ae:	f011 fedd 	bl	802126c <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f4b8:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f4c0:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	333c      	adds	r3, #60	; 0x3c
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	601a      	str	r2, [r3, #0]
 800f4d6:	605a      	str	r2, [r3, #4]
 800f4d8:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	3330      	adds	r3, #48	; 0x30
 800f4de:	2200      	movs	r2, #0
 800f4e0:	601a      	str	r2, [r3, #0]
 800f4e2:	605a      	str	r2, [r3, #4]
 800f4e4:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	3348      	adds	r3, #72	; 0x48
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	601a      	str	r2, [r3, #0]
 800f4ee:	605a      	str	r2, [r3, #4]
 800f4f0:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	e003      	b.n	800f4fe <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f000 f80e 	bl	800f518 <lfs_deinit>
    return err;
 800f4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3730      	adds	r7, #48	; 0x30
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
 800f506:	bf00      	nop
 800f508:	080237a8 	.word	0x080237a8
 800f50c:	0802725c 	.word	0x0802725c
 800f510:	080232e8 	.word	0x080232e8
 800f514:	080237c4 	.word	0x080237c4

0800f518 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 800f518:	b580      	push	{r7, lr}
 800f51a:	b082      	sub	sp, #8
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f526:	2b00      	cmp	r3, #0
 800f528:	d104      	bne.n	800f534 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	68db      	ldr	r3, [r3, #12]
 800f52e:	4618      	mov	r0, r3
 800f530:	f7fb f9ff 	bl	800a932 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d104      	bne.n	800f548 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	69db      	ldr	r3, [r3, #28]
 800f542:	4618      	mov	r0, r3
 800f544:	f7fb f9f5 	bl	800a932 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d104      	bne.n	800f55c <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f556:	4618      	mov	r0, r3
 800f558:	f7fb f9eb 	bl	800a932 <lfs_free>
    }

    return 0;
 800f55c:	2300      	movs	r3, #0
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3708      	adds	r7, #8
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}
	...

0800f568 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 800f568:	b580      	push	{r7, lr}
 800f56a:	b0a0      	sub	sp, #128	; 0x80
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	6039      	str	r1, [r7, #0]
    int err = 0;
 800f572:	2300      	movs	r3, #0
 800f574:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 800f576:	6839      	ldr	r1, [r7, #0]
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f7ff fe13 	bl	800f1a4 <lfs_init>
 800f57e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800f580:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f582:	2b00      	cmp	r3, #0
 800f584:	d001      	beq.n	800f58a <lfs_rawformat+0x22>
            return err;
 800f586:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f588:	e082      	b.n	800f690 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f594:	461a      	mov	r2, r3
 800f596:	2100      	movs	r1, #0
 800f598:	f012 fad4 	bl	8021b44 <memset>
        lfs->free.off = 0;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f5a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5a8:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	4610      	mov	r0, r2
 800f5b4:	f7fb f912 	bl	800a7dc <lfs_min>
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f7fc f84d 	bl	800b664 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 800f5ca:	f107 030c 	add.w	r3, r7, #12
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f7fd fb99 	bl	800cd08 <lfs_dir_alloc>
 800f5d6:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800f5d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d14f      	bne.n	800f67e <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 800f5de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f5e2:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        lfs_superblock_t superblock = {
 800f5ea:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        lfs_superblock_t superblock = {
 800f5f2:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 800f5f8:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 800f5fe:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 800f604:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 800f606:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f60a:	4618      	mov	r0, r3
 800f60c:	f7fb ff6a 	bl	800b4e4 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 800f610:	4b21      	ldr	r3, [pc, #132]	; (800f698 <lfs_rawformat+0x130>)
 800f612:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f614:	2300      	movs	r3, #0
 800f616:	653b      	str	r3, [r7, #80]	; 0x50
 800f618:	4b20      	ldr	r3, [pc, #128]	; (800f69c <lfs_rawformat+0x134>)
 800f61a:	657b      	str	r3, [r7, #84]	; 0x54
 800f61c:	4b20      	ldr	r3, [pc, #128]	; (800f6a0 <lfs_rawformat+0x138>)
 800f61e:	65bb      	str	r3, [r7, #88]	; 0x58
 800f620:	4b20      	ldr	r3, [pc, #128]	; (800f6a4 <lfs_rawformat+0x13c>)
 800f622:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f624:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f628:	663b      	str	r3, [r7, #96]	; 0x60
 800f62a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800f62e:	f107 010c 	add.w	r1, r7, #12
 800f632:	2303      	movs	r3, #3
 800f634:	6878      	ldr	r0, [r7, #4]
 800f636:	f7fd ffb7 	bl	800d5a8 <lfs_dir_commit>
 800f63a:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 800f63c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d11f      	bne.n	800f682 <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 800f642:	2300      	movs	r3, #0
 800f644:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 800f648:	f107 010c 	add.w	r1, r7, #12
 800f64c:	2300      	movs	r3, #0
 800f64e:	2200      	movs	r2, #0
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f7fd ffa9 	bl	800d5a8 <lfs_dir_commit>
 800f656:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800f658:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d113      	bne.n	800f686 <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 800f65e:	2300      	movs	r3, #0
 800f660:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f662:	2301      	movs	r3, #1
 800f664:	633b      	str	r3, [r7, #48]	; 0x30
 800f666:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f66a:	f107 030c 	add.w	r3, r7, #12
 800f66e:	4619      	mov	r1, r3
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f7fc ffc5 	bl	800c600 <lfs_dir_fetch>
 800f676:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800f678:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	e004      	b.n	800f688 <lfs_rawformat+0x120>
            goto cleanup;
 800f67e:	bf00      	nop
 800f680:	e002      	b.n	800f688 <lfs_rawformat+0x120>
            goto cleanup;
 800f682:	bf00      	nop
 800f684:	e000      	b.n	800f688 <lfs_rawformat+0x120>
            goto cleanup;
 800f686:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f7ff ff45 	bl	800f518 <lfs_deinit>
    return err;
 800f68e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 800f690:	4618      	mov	r0, r3
 800f692:	3780      	adds	r7, #128	; 0x80
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}
 800f698:	40100000 	.word	0x40100000
 800f69c:	0ff00008 	.word	0x0ff00008
 800f6a0:	080237f4 	.word	0x080237f4
 800f6a4:	20100018 	.word	0x20100018

0800f6a8 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b09c      	sub	sp, #112	; 0x70
 800f6ac:	af04      	add	r7, sp, #16
 800f6ae:	6078      	str	r0, [r7, #4]
 800f6b0:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 800f6b2:	6839      	ldr	r1, [r7, #0]
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f7ff fd75 	bl	800f1a4 <lfs_init>
 800f6ba:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 800f6bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d001      	beq.n	800f6c6 <lfs_rawmount+0x1e>
        return err;
 800f6c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6c4:	e149      	b.n	800f95a <lfs_rawmount+0x2b2>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 800f6c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f6ca:	2220      	movs	r2, #32
 800f6cc:	2100      	movs	r1, #0
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f012 fa38 	bl	8021b44 <memset>
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 800f6dc:	e0dc      	b.n	800f898 <lfs_rawmount+0x1f0>
        if (cycle >= lfs->cfg->block_count/2) {
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f6e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6e4:	085b      	lsrs	r3, r3, #1
 800f6e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	d303      	bcc.n	800f6f4 <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 800f6ec:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800f6f0:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800f6f2:	e12e      	b.n	800f952 <lfs_rawmount+0x2aa>
        }
        cycle += 1;
 800f6f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6f6:	3301      	adds	r3, #1
 800f6f8:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	627b      	str	r3, [r7, #36]	; 0x24
 800f6fe:	4b99      	ldr	r3, [pc, #612]	; (800f964 <lfs_rawmount+0x2bc>)
 800f700:	62bb      	str	r3, [r7, #40]	; 0x28
 800f702:	2308      	movs	r3, #8
 800f704:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800f706:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f70a:	f103 0218 	add.w	r2, r3, #24
 800f70e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800f712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f716:	9303      	str	r3, [sp, #12]
 800f718:	4b93      	ldr	r3, [pc, #588]	; (800f968 <lfs_rawmount+0x2c0>)
 800f71a:	9302      	str	r3, [sp, #8]
 800f71c:	2300      	movs	r3, #0
 800f71e:	9301      	str	r3, [sp, #4]
 800f720:	4b92      	ldr	r3, [pc, #584]	; (800f96c <lfs_rawmount+0x2c4>)
 800f722:	9300      	str	r3, [sp, #0]
 800f724:	4b92      	ldr	r3, [pc, #584]	; (800f970 <lfs_rawmount+0x2c8>)
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f7fc fbfe 	bl	800bf28 <lfs_dir_fetchmatch>
 800f72c:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 800f72e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f730:	2b00      	cmp	r3, #0
 800f732:	da02      	bge.n	800f73a <lfs_rawmount+0x92>
            err = tag;
 800f734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f736:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800f738:	e10b      	b.n	800f952 <lfs_rawmount+0x2aa>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 800f73a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	f000 809e 	beq.w	800f87e <lfs_rawmount+0x1d6>
 800f742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f744:	4618      	mov	r0, r3
 800f746:	f7fb fd10 	bl	800b16a <lfs_tag_isdelete>
 800f74a:	4603      	mov	r3, r0
 800f74c:	f083 0301 	eor.w	r3, r3, #1
 800f750:	b2db      	uxtb	r3, r3
 800f752:	2b00      	cmp	r3, #0
 800f754:	f000 8093 	beq.w	800f87e <lfs_rawmount+0x1d6>
            // update root
            lfs->root[0] = dir.pair[0];
 800f758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 800f75e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 800f764:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800f768:	f107 030c 	add.w	r3, r7, #12
 800f76c:	9300      	str	r3, [sp, #0]
 800f76e:	4b81      	ldr	r3, [pc, #516]	; (800f974 <lfs_rawmount+0x2cc>)
 800f770:	4a7f      	ldr	r2, [pc, #508]	; (800f970 <lfs_rawmount+0x2c8>)
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f7fc f930 	bl	800b9d8 <lfs_dir_get>
 800f778:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 800f77a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	da02      	bge.n	800f786 <lfs_rawmount+0xde>
                err = tag;
 800f780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f782:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800f784:	e0e5      	b.n	800f952 <lfs_rawmount+0x2aa>
            }
            lfs_superblock_fromle32(&superblock);
 800f786:	f107 030c 	add.w	r3, r7, #12
 800f78a:	4618      	mov	r0, r3
 800f78c:	f7fb fe72 	bl	800b474 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	0c1b      	lsrs	r3, r3, #16
 800f794:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 800f79e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800f7a2:	2b02      	cmp	r3, #2
 800f7a4:	d103      	bne.n	800f7ae <lfs_rawmount+0x106>
 800f7a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d011      	beq.n	800f7d2 <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 800f7ae:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800f7b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800f7b6:	4970      	ldr	r1, [pc, #448]	; (800f978 <lfs_rawmount+0x2d0>)
 800f7b8:	9101      	str	r1, [sp, #4]
 800f7ba:	9300      	str	r3, [sp, #0]
 800f7bc:	4613      	mov	r3, r2
 800f7be:	f640 6291 	movw	r2, #3729	; 0xe91
 800f7c2:	496e      	ldr	r1, [pc, #440]	; (800f97c <lfs_rawmount+0x2d4>)
 800f7c4:	486e      	ldr	r0, [pc, #440]	; (800f980 <lfs_rawmount+0x2d8>)
 800f7c6:	f011 ffa7 	bl	8021718 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 800f7ca:	f06f 0315 	mvn.w	r3, #21
 800f7ce:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800f7d0:	e054      	b.n	800f87c <lfs_rawmount+0x1d4>
            }

            // check superblock configuration
            if (superblock.name_max) {
 800f7d2:	69bb      	ldr	r3, [r7, #24]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d018      	beq.n	800f80a <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 800f7d8:	69ba      	ldr	r2, [r7, #24]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d910      	bls.n	800f804 <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 800f7e2:	69ba      	ldr	r2, [r7, #24]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7e8:	4963      	ldr	r1, [pc, #396]	; (800f978 <lfs_rawmount+0x2d0>)
 800f7ea:	9101      	str	r1, [sp, #4]
 800f7ec:	9300      	str	r3, [sp, #0]
 800f7ee:	4613      	mov	r3, r2
 800f7f0:	f640 629a 	movw	r2, #3738	; 0xe9a
 800f7f4:	4961      	ldr	r1, [pc, #388]	; (800f97c <lfs_rawmount+0x2d4>)
 800f7f6:	4863      	ldr	r0, [pc, #396]	; (800f984 <lfs_rawmount+0x2dc>)
 800f7f8:	f011 ff8e 	bl	8021718 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 800f7fc:	f06f 0315 	mvn.w	r3, #21
 800f800:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800f802:	e03b      	b.n	800f87c <lfs_rawmount+0x1d4>
                }

                lfs->name_max = superblock.name_max;
 800f804:	69ba      	ldr	r2, [r7, #24]
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 800f80a:	69fb      	ldr	r3, [r7, #28]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d018      	beq.n	800f842 <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 800f810:	69fa      	ldr	r2, [r7, #28]
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f816:	429a      	cmp	r2, r3
 800f818:	d910      	bls.n	800f83c <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 800f81a:	69fa      	ldr	r2, [r7, #28]
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f820:	4955      	ldr	r1, [pc, #340]	; (800f978 <lfs_rawmount+0x2d0>)
 800f822:	9101      	str	r1, [sp, #4]
 800f824:	9300      	str	r3, [sp, #0]
 800f826:	4613      	mov	r3, r2
 800f828:	f640 62a5 	movw	r2, #3749	; 0xea5
 800f82c:	4953      	ldr	r1, [pc, #332]	; (800f97c <lfs_rawmount+0x2d4>)
 800f82e:	4856      	ldr	r0, [pc, #344]	; (800f988 <lfs_rawmount+0x2e0>)
 800f830:	f011 ff72 	bl	8021718 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 800f834:	f06f 0315 	mvn.w	r3, #21
 800f838:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800f83a:	e01f      	b.n	800f87c <lfs_rawmount+0x1d4>
                }

                lfs->file_max = superblock.file_max;
 800f83c:	69fa      	ldr	r2, [r7, #28]
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 800f842:	6a3b      	ldr	r3, [r7, #32]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d01a      	beq.n	800f87e <lfs_rawmount+0x1d6>
                if (superblock.attr_max > lfs->attr_max) {
 800f848:	6a3a      	ldr	r2, [r7, #32]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f84e:	429a      	cmp	r2, r3
 800f850:	d910      	bls.n	800f874 <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 800f852:	6a3a      	ldr	r2, [r7, #32]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f858:	4947      	ldr	r1, [pc, #284]	; (800f978 <lfs_rawmount+0x2d0>)
 800f85a:	9101      	str	r1, [sp, #4]
 800f85c:	9300      	str	r3, [sp, #0]
 800f85e:	4613      	mov	r3, r2
 800f860:	f44f 626b 	mov.w	r2, #3760	; 0xeb0
 800f864:	4945      	ldr	r1, [pc, #276]	; (800f97c <lfs_rawmount+0x2d4>)
 800f866:	4849      	ldr	r0, [pc, #292]	; (800f98c <lfs_rawmount+0x2e4>)
 800f868:	f011 ff56 	bl	8021718 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 800f86c:	f06f 0315 	mvn.w	r3, #21
 800f870:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800f872:	e003      	b.n	800f87c <lfs_rawmount+0x1d4>
                }

                lfs->attr_max = superblock.attr_max;
 800f874:	6a3a      	ldr	r2, [r7, #32]
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	675a      	str	r2, [r3, #116]	; 0x74
 800f87a:	e000      	b.n	800f87e <lfs_rawmount+0x1d6>
            goto cleanup;
 800f87c:	e069      	b.n	800f952 <lfs_rawmount+0x2aa>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f884:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f888:	4619      	mov	r1, r3
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f7fc fed4 	bl	800c638 <lfs_dir_getgstate>
 800f890:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 800f892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f894:	2b00      	cmp	r3, #0
 800f896:	d15b      	bne.n	800f950 <lfs_rawmount+0x2a8>
    while (!lfs_pair_isnull(dir.tail)) {
 800f898:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f89c:	3318      	adds	r3, #24
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7fb fbaf 	bl	800b002 <lfs_pair_isnull>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	f083 0301 	eor.w	r3, r3, #1
 800f8aa:	b2db      	uxtb	r3, r3
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	f47f af16 	bne.w	800f6de <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	3320      	adds	r3, #32
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7fb fba3 	bl	800b002 <lfs_pair_isnull>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d003      	beq.n	800f8ca <lfs_rawmount+0x222>
        err = LFS_ERR_INVAL;
 800f8c2:	f06f 0315 	mvn.w	r3, #21
 800f8c6:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800f8c8:	e043      	b.n	800f952 <lfs_rawmount+0x2aa>
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	3330      	adds	r3, #48	; 0x30
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7fb fcee 	bl	800b2b0 <lfs_gstate_iszero>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	f083 0301 	eor.w	r3, r3, #1
 800f8da:	b2db      	uxtb	r3, r3
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d010      	beq.n	800f902 <lfs_rawmount+0x25a>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8e8:	687a      	ldr	r2, [r7, #4]
 800f8ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f8ec:	4822      	ldr	r0, [pc, #136]	; (800f978 <lfs_rawmount+0x2d0>)
 800f8ee:	9002      	str	r0, [sp, #8]
 800f8f0:	9201      	str	r2, [sp, #4]
 800f8f2:	9300      	str	r3, [sp, #0]
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	f640 62c9 	movw	r2, #3785	; 0xec9
 800f8fa:	4920      	ldr	r1, [pc, #128]	; (800f97c <lfs_rawmount+0x2d4>)
 800f8fc:	4824      	ldr	r0, [pc, #144]	; (800f990 <lfs_rawmount+0x2e8>)
 800f8fe:	f011 ff0b 	bl	8021718 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f906:	4618      	mov	r0, r3
 800f908:	f7fb fc21 	bl	800b14e <lfs_tag_isvalid>
 800f90c:	4603      	mov	r3, r0
 800f90e:	f083 0301 	eor.w	r3, r3, #1
 800f912:	b2db      	uxtb	r3, r3
 800f914:	461a      	mov	r2, r3
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f91a:	441a      	add	r2, r3
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	687a      	ldr	r2, [r7, #4]
 800f924:	333c      	adds	r3, #60	; 0x3c
 800f926:	3230      	adds	r2, #48	; 0x30
 800f928:	ca07      	ldmia	r2, {r0, r1, r2}
 800f92a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f932:	687a      	ldr	r2, [r7, #4]
 800f934:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800f936:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800f938:	fbb3 f1f2 	udiv	r1, r3, r2
 800f93c:	fb01 f202 	mul.w	r2, r1, r2
 800f940:	1a9a      	subs	r2, r3, r2
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f7fb fe9b 	bl	800b682 <lfs_alloc_drop>

    return 0;
 800f94c:	2300      	movs	r3, #0
 800f94e:	e004      	b.n	800f95a <lfs_rawmount+0x2b2>
            goto cleanup;
 800f950:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f000 f81e 	bl	800f994 <lfs_rawunmount>
    return err;
 800f958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	3760      	adds	r7, #96	; 0x60
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}
 800f962:	bf00      	nop
 800f964:	080237f4 	.word	0x080237f4
 800f968:	0800c69d 	.word	0x0800c69d
 800f96c:	0ff00008 	.word	0x0ff00008
 800f970:	7ffffc00 	.word	0x7ffffc00
 800f974:	20100018 	.word	0x20100018
 800f978:	080233f4 	.word	0x080233f4
 800f97c:	080232e8 	.word	0x080232e8
 800f980:	08023800 	.word	0x08023800
 800f984:	0802382c 	.word	0x0802382c
 800f988:	08023860 	.word	0x08023860
 800f98c:	08023894 	.word	0x08023894
 800f990:	080238c8 	.word	0x080238c8

0800f994 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f7ff fdbb 	bl	800f518 <lfs_deinit>
 800f9a2:	4603      	mov	r3, r0
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3708      	adds	r7, #8
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}

0800f9ac <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 800f9ac:	b590      	push	{r4, r7, lr}
 800f9ae:	b09d      	sub	sp, #116	; 0x74
 800f9b0:	af04      	add	r7, sp, #16
 800f9b2:	60f8      	str	r0, [r7, #12]
 800f9b4:	60b9      	str	r1, [r7, #8]
 800f9b6:	607a      	str	r2, [r7, #4]
 800f9b8:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 800f9ba:	f107 0318 	add.w	r3, r7, #24
 800f9be:	2220      	movs	r2, #32
 800f9c0:	2100      	movs	r1, #0
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f012 f8be 	bl	8021b44 <memset>
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 800f9d0:	e0a7      	b.n	800fb22 <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9d8:	085b      	lsrs	r3, r3, #1
 800f9da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	d302      	bcc.n	800f9e6 <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 800f9e0:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800f9e4:	e102      	b.n	800fbec <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 800f9e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9e8:	3301      	adds	r3, #1
 800f9ea:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	65bb      	str	r3, [r7, #88]	; 0x58
 800f9f0:	e013      	b.n	800fa1a <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 800f9f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f9f4:	3306      	adds	r3, #6
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	3360      	adds	r3, #96	; 0x60
 800f9fa:	443b      	add	r3, r7
 800f9fc:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	4611      	mov	r1, r2
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	4798      	blx	r3
 800fa08:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 800fa0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d001      	beq.n	800fa14 <lfs_fs_rawtraverse+0x68>
                return err;
 800fa10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa12:	e0eb      	b.n	800fbec <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 800fa14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa16:	3301      	adds	r3, #1
 800fa18:	65bb      	str	r3, [r7, #88]	; 0x58
 800fa1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa1c:	2b01      	cmp	r3, #1
 800fa1e:	dde8      	ble.n	800f9f2 <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800fa20:	f107 0318 	add.w	r3, r7, #24
 800fa24:	f103 0218 	add.w	r2, r3, #24
 800fa28:	f107 0318 	add.w	r3, r7, #24
 800fa2c:	4619      	mov	r1, r3
 800fa2e:	68f8      	ldr	r0, [r7, #12]
 800fa30:	f7fc fde6 	bl	800c600 <lfs_dir_fetch>
 800fa34:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 800fa36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d001      	beq.n	800fa40 <lfs_fs_rawtraverse+0x94>
            return err;
 800fa3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa3e:	e0d5      	b.n	800fbec <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 800fa40:	2300      	movs	r3, #0
 800fa42:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800fa46:	e067      	b.n	800fb18 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800fa48:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800fa4c:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800fa4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fa52:	f043 0308 	orr.w	r3, r3, #8
 800fa56:	f107 0118 	add.w	r1, r7, #24
 800fa5a:	f107 0210 	add.w	r2, r7, #16
 800fa5e:	9200      	str	r2, [sp, #0]
 800fa60:	4a64      	ldr	r2, [pc, #400]	; (800fbf4 <lfs_fs_rawtraverse+0x248>)
 800fa62:	68f8      	ldr	r0, [r7, #12]
 800fa64:	f7fb ffb8 	bl	800b9d8 <lfs_dir_get>
 800fa68:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 800fa6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	da05      	bge.n	800fa7c <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 800fa70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa72:	f113 0f02 	cmn.w	r3, #2
 800fa76:	d049      	beq.n	800fb0c <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 800fa78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa7a:	e0b7      	b.n	800fbec <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 800fa7c:	f107 0310 	add.w	r3, r7, #16
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7fb fcc7 	bl	800b414 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800fa86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f7fb fb91 	bl	800b1b0 <lfs_tag_type3>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	461a      	mov	r2, r3
 800fa92:	f240 2302 	movw	r3, #514	; 0x202
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d113      	bne.n	800fac2 <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 800fa9a:	68f9      	ldr	r1, [r7, #12]
 800fa9c:	6938      	ldr	r0, [r7, #16]
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	687a      	ldr	r2, [r7, #4]
 800faa2:	9202      	str	r2, [sp, #8]
 800faa4:	68ba      	ldr	r2, [r7, #8]
 800faa6:	9201      	str	r2, [sp, #4]
 800faa8:	9300      	str	r3, [sp, #0]
 800faaa:	4603      	mov	r3, r0
 800faac:	460a      	mov	r2, r1
 800faae:	2100      	movs	r1, #0
 800fab0:	68f8      	ldr	r0, [r7, #12]
 800fab2:	f7fe fc17 	bl	800e2e4 <lfs_ctz_traverse>
 800fab6:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 800fab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d027      	beq.n	800fb0e <lfs_fs_rawtraverse+0x162>
                    return err;
 800fabe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fac0:	e094      	b.n	800fbec <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 800fac2:	78fb      	ldrb	r3, [r7, #3]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d022      	beq.n	800fb0e <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 800fac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faca:	4618      	mov	r0, r3
 800facc:	f7fb fb70 	bl	800b1b0 <lfs_tag_type3>
 800fad0:	4603      	mov	r3, r0
            } else if (includeorphans &&
 800fad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fad6:	d11a      	bne.n	800fb0e <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 800fad8:	2300      	movs	r3, #0
 800fada:	653b      	str	r3, [r7, #80]	; 0x50
 800fadc:	e012      	b.n	800fb04 <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 800fade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fae0:	009b      	lsls	r3, r3, #2
 800fae2:	f107 0210 	add.w	r2, r7, #16
 800fae6:	4413      	add	r3, r2
 800fae8:	681a      	ldr	r2, [r3, #0]
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	4611      	mov	r1, r2
 800faee:	6878      	ldr	r0, [r7, #4]
 800faf0:	4798      	blx	r3
 800faf2:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 800faf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d001      	beq.n	800fafe <lfs_fs_rawtraverse+0x152>
                        return err;
 800fafa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fafc:	e076      	b.n	800fbec <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 800fafe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb00:	3301      	adds	r3, #1
 800fb02:	653b      	str	r3, [r7, #80]	; 0x50
 800fb04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb06:	2b01      	cmp	r3, #1
 800fb08:	dde9      	ble.n	800fade <lfs_fs_rawtraverse+0x132>
 800fb0a:	e000      	b.n	800fb0e <lfs_fs_rawtraverse+0x162>
                    continue;
 800fb0c:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 800fb0e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800fb12:	3301      	adds	r3, #1
 800fb14:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800fb18:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fb1a:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	d392      	bcc.n	800fa48 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 800fb22:	f107 0318 	add.w	r3, r7, #24
 800fb26:	3318      	adds	r3, #24
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f7fb fa6a 	bl	800b002 <lfs_pair_isnull>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	f083 0301 	eor.w	r3, r3, #1
 800fb34:	b2db      	uxtb	r3, r3
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	f47f af4b 	bne.w	800f9d2 <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb40:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb42:	e04f      	b.n	800fbe4 <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 800fb44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb46:	799b      	ldrb	r3, [r3, #6]
 800fb48:	2b01      	cmp	r3, #1
 800fb4a:	d147      	bne.n	800fbdc <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 800fb4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d01d      	beq.n	800fb94 <lfs_fs_rawtraverse+0x1e8>
 800fb58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d117      	bne.n	800fb94 <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800fb64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb66:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800fb6a:	68f8      	ldr	r0, [r7, #12]
 800fb6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb6e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800fb70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb74:	687a      	ldr	r2, [r7, #4]
 800fb76:	9202      	str	r2, [sp, #8]
 800fb78:	68ba      	ldr	r2, [r7, #8]
 800fb7a:	9201      	str	r2, [sp, #4]
 800fb7c:	9300      	str	r3, [sp, #0]
 800fb7e:	4623      	mov	r3, r4
 800fb80:	4602      	mov	r2, r0
 800fb82:	68f8      	ldr	r0, [r7, #12]
 800fb84:	f7fe fbae 	bl	800e2e4 <lfs_ctz_traverse>
 800fb88:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 800fb8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d001      	beq.n	800fb94 <lfs_fs_rawtraverse+0x1e8>
                return err;
 800fb90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb92:	e02b      	b.n	800fbec <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 800fb94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d01e      	beq.n	800fbde <lfs_fs_rawtraverse+0x232>
 800fba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d118      	bne.n	800fbde <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800fbac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbae:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800fbb2:	68f8      	ldr	r0, [r7, #12]
 800fbb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbb6:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800fbb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbbc:	687a      	ldr	r2, [r7, #4]
 800fbbe:	9202      	str	r2, [sp, #8]
 800fbc0:	68ba      	ldr	r2, [r7, #8]
 800fbc2:	9201      	str	r2, [sp, #4]
 800fbc4:	9300      	str	r3, [sp, #0]
 800fbc6:	4623      	mov	r3, r4
 800fbc8:	4602      	mov	r2, r0
 800fbca:	68f8      	ldr	r0, [r7, #12]
 800fbcc:	f7fe fb8a 	bl	800e2e4 <lfs_ctz_traverse>
 800fbd0:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 800fbd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d002      	beq.n	800fbde <lfs_fs_rawtraverse+0x232>
                return err;
 800fbd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbda:	e007      	b.n	800fbec <lfs_fs_rawtraverse+0x240>
            continue;
 800fbdc:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800fbde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fbe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d1ac      	bne.n	800fb44 <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 800fbea:	2300      	movs	r3, #0
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	3764      	adds	r7, #100	; 0x64
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd90      	pop	{r4, r7, pc}
 800fbf4:	700ffc00 	.word	0x700ffc00

0800fbf8 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b086      	sub	sp, #24
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	60f8      	str	r0, [r7, #12]
 800fc00:	60b9      	str	r1, [r7, #8]
 800fc02:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2200      	movs	r2, #0
 800fc08:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2201      	movs	r2, #1
 800fc0e:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 800fc10:	2300      	movs	r3, #0
 800fc12:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 800fc14:	e024      	b.n	800fc60 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fc1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc1c:	085b      	lsrs	r3, r3, #1
 800fc1e:	697a      	ldr	r2, [r7, #20]
 800fc20:	429a      	cmp	r2, r3
 800fc22:	d302      	bcc.n	800fc2a <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 800fc24:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800fc28:	e027      	b.n	800fc7a <lfs_fs_pred+0x82>
        }
        cycle += 1;
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	3318      	adds	r3, #24
 800fc34:	68b9      	ldr	r1, [r7, #8]
 800fc36:	4618      	mov	r0, r3
 800fc38:	f7fb f9fe 	bl	800b038 <lfs_pair_cmp>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d101      	bne.n	800fc46 <lfs_fs_pred+0x4e>
            return 0;
 800fc42:	2300      	movs	r3, #0
 800fc44:	e019      	b.n	800fc7a <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	3318      	adds	r3, #24
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	6879      	ldr	r1, [r7, #4]
 800fc4e:	68f8      	ldr	r0, [r7, #12]
 800fc50:	f7fc fcd6 	bl	800c600 <lfs_dir_fetch>
 800fc54:	6138      	str	r0, [r7, #16]
        if (err) {
 800fc56:	693b      	ldr	r3, [r7, #16]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d001      	beq.n	800fc60 <lfs_fs_pred+0x68>
            return err;
 800fc5c:	693b      	ldr	r3, [r7, #16]
 800fc5e:	e00c      	b.n	800fc7a <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	3318      	adds	r3, #24
 800fc64:	4618      	mov	r0, r3
 800fc66:	f7fb f9cc 	bl	800b002 <lfs_pair_isnull>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	f083 0301 	eor.w	r3, r3, #1
 800fc70:	b2db      	uxtb	r3, r3
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d1cf      	bne.n	800fc16 <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 800fc76:	f06f 0301 	mvn.w	r3, #1
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3718      	adds	r7, #24
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}

0800fc82 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800fc82:	b5b0      	push	{r4, r5, r7, lr}
 800fc84:	b08e      	sub	sp, #56	; 0x38
 800fc86:	af04      	add	r7, sp, #16
 800fc88:	60f8      	str	r0, [r7, #12]
 800fc8a:	60b9      	str	r1, [r7, #8]
 800fc8c:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 800fc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800fc9c:	6a3b      	ldr	r3, [r7, #32]
 800fc9e:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 800fca2:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800fca4:	6a3b      	ldr	r3, [r7, #32]
 800fca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fca8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
            disk->block, disk->off, &child, sizeof(child));
 800fcaa:	69fb      	ldr	r3, [r7, #28]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	69fa      	ldr	r2, [r7, #28]
 800fcb0:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 800fcb2:	2108      	movs	r1, #8
 800fcb4:	9103      	str	r1, [sp, #12]
 800fcb6:	f107 0110 	add.w	r1, r7, #16
 800fcba:	9102      	str	r1, [sp, #8]
 800fcbc:	9201      	str	r2, [sp, #4]
 800fcbe:	9300      	str	r3, [sp, #0]
 800fcc0:	462b      	mov	r3, r5
 800fcc2:	4622      	mov	r2, r4
 800fcc4:	4601      	mov	r1, r0
 800fcc6:	6a38      	ldr	r0, [r7, #32]
 800fcc8:	f7fa fe64 	bl	800a994 <lfs_bd_read>
 800fccc:	61b8      	str	r0, [r7, #24]
    if (err) {
 800fcce:	69bb      	ldr	r3, [r7, #24]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d001      	beq.n	800fcd8 <lfs_fs_parent_match+0x56>
        return err;
 800fcd4:	69bb      	ldr	r3, [r7, #24]
 800fcd6:	e012      	b.n	800fcfe <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 800fcd8:	f107 0310 	add.w	r3, r7, #16
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f7fb fa02 	bl	800b0e6 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 800fce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce4:	1d1a      	adds	r2, r3, #4
 800fce6:	f107 0310 	add.w	r3, r7, #16
 800fcea:	4611      	mov	r1, r2
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7fb f9a3 	bl	800b038 <lfs_pair_cmp>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	bf14      	ite	ne
 800fcf8:	2301      	movne	r3, #1
 800fcfa:	2300      	moveq	r3, #0
 800fcfc:	b2db      	uxtb	r3, r3
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3728      	adds	r7, #40	; 0x28
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800fd08 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b08e      	sub	sp, #56	; 0x38
 800fd0c:	af04      	add	r7, sp, #16
 800fd0e:	60f8      	str	r0, [r7, #12]
 800fd10:	60b9      	str	r1, [r7, #8]
 800fd12:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2200      	movs	r2, #0
 800fd18:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	2201      	movs	r2, #1
 800fd1e:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 800fd20:	2300      	movs	r3, #0
 800fd22:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 800fd24:	e030      	b.n	800fd88 <lfs_fs_parent+0x80>
        if (cycle >= lfs->cfg->block_count/2) {
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fd2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd2c:	085b      	lsrs	r3, r3, #1
 800fd2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd30:	429a      	cmp	r2, r3
 800fd32:	d302      	bcc.n	800fd3a <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 800fd34:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800fd38:	e033      	b.n	800fda2 <lfs_fs_parent+0x9a>
        }
        cycle += 1;
 800fd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd3c:	3301      	adds	r3, #1
 800fd3e:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800fd4e:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	3304      	adds	r3, #4
 800fd54:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800fd56:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800fd58:	f107 0314 	add.w	r3, r7, #20
 800fd5c:	9303      	str	r3, [sp, #12]
 800fd5e:	4b13      	ldr	r3, [pc, #76]	; (800fdac <lfs_fs_parent+0xa4>)
 800fd60:	9302      	str	r3, [sp, #8]
 800fd62:	2300      	movs	r3, #0
 800fd64:	9301      	str	r3, [sp, #4]
 800fd66:	4b12      	ldr	r3, [pc, #72]	; (800fdb0 <lfs_fs_parent+0xa8>)
 800fd68:	9300      	str	r3, [sp, #0]
 800fd6a:	4b12      	ldr	r3, [pc, #72]	; (800fdb4 <lfs_fs_parent+0xac>)
 800fd6c:	6879      	ldr	r1, [r7, #4]
 800fd6e:	68f8      	ldr	r0, [r7, #12]
 800fd70:	f7fc f8da 	bl	800bf28 <lfs_dir_fetchmatch>
 800fd74:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 800fd76:	6a3b      	ldr	r3, [r7, #32]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d005      	beq.n	800fd88 <lfs_fs_parent+0x80>
 800fd7c:	6a3b      	ldr	r3, [r7, #32]
 800fd7e:	f113 0f02 	cmn.w	r3, #2
 800fd82:	d001      	beq.n	800fd88 <lfs_fs_parent+0x80>
            return tag;
 800fd84:	6a3b      	ldr	r3, [r7, #32]
 800fd86:	e00c      	b.n	800fda2 <lfs_fs_parent+0x9a>
    while (!lfs_pair_isnull(parent->tail)) {
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	3318      	adds	r3, #24
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7fb f938 	bl	800b002 <lfs_pair_isnull>
 800fd92:	4603      	mov	r3, r0
 800fd94:	f083 0301 	eor.w	r3, r3, #1
 800fd98:	b2db      	uxtb	r3, r3
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d1c3      	bne.n	800fd26 <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 800fd9e:	f06f 0301 	mvn.w	r3, #1
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3728      	adds	r7, #40	; 0x28
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	0800fc83 	.word	0x0800fc83
 800fdb0:	20000008 	.word	0x20000008
 800fdb4:	7ff003ff 	.word	0x7ff003ff

0800fdb8 <lfs_fs_relocate>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_relocate(lfs_t *lfs,
        const lfs_block_t oldpair[2], lfs_block_t newpair[2]) {
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b0a6      	sub	sp, #152	; 0x98
 800fdbc:	af04      	add	r7, sp, #16
 800fdbe:	60f8      	str	r0, [r7, #12]
 800fdc0:	60b9      	str	r1, [r7, #8]
 800fdc2:	607a      	str	r2, [r7, #4]
    // update internal root
    if (lfs_pair_cmp(oldpair, lfs->root) == 0) {
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	3320      	adds	r3, #32
 800fdc8:	4619      	mov	r1, r3
 800fdca:	68b8      	ldr	r0, [r7, #8]
 800fdcc:	f7fb f934 	bl	800b038 <lfs_pair_cmp>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d107      	bne.n	800fde6 <lfs_fs_relocate+0x2e>
        lfs->root[0] = newpair[0];
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681a      	ldr	r2, [r3, #0]
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	621a      	str	r2, [r3, #32]
        lfs->root[1] = newpair[1];
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	685a      	ldr	r2, [r3, #4]
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    // update internally tracked dirs
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fdee:	e031      	b.n	800fe54 <lfs_fs_relocate+0x9c>
        if (lfs_pair_cmp(oldpair, d->m.pair) == 0) {
 800fdf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fdf4:	3308      	adds	r3, #8
 800fdf6:	4619      	mov	r1, r3
 800fdf8:	68b8      	ldr	r0, [r7, #8]
 800fdfa:	f7fb f91d 	bl	800b038 <lfs_pair_cmp>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d109      	bne.n	800fe18 <lfs_fs_relocate+0x60>
            d->m.pair[0] = newpair[0];
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681a      	ldr	r2, [r3, #0]
 800fe08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fe0c:	609a      	str	r2, [r3, #8]
            d->m.pair[1] = newpair[1];
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	685a      	ldr	r2, [r3, #4]
 800fe12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fe16:	60da      	str	r2, [r3, #12]
        }

        if (d->type == LFS_TYPE_DIR &&
 800fe18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fe1c:	799b      	ldrb	r3, [r3, #6]
 800fe1e:	2b02      	cmp	r3, #2
 800fe20:	d113      	bne.n	800fe4a <lfs_fs_relocate+0x92>
                lfs_pair_cmp(oldpair, ((lfs_dir_t*)d)->head) == 0) {
 800fe22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fe26:	332c      	adds	r3, #44	; 0x2c
 800fe28:	4619      	mov	r1, r3
 800fe2a:	68b8      	ldr	r0, [r7, #8]
 800fe2c:	f7fb f904 	bl	800b038 <lfs_pair_cmp>
 800fe30:	4603      	mov	r3, r0
        if (d->type == LFS_TYPE_DIR &&
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d109      	bne.n	800fe4a <lfs_fs_relocate+0x92>
            ((lfs_dir_t*)d)->head[0] = newpair[0];
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681a      	ldr	r2, [r3, #0]
 800fe3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fe3e:	62da      	str	r2, [r3, #44]	; 0x2c
            ((lfs_dir_t*)d)->head[1] = newpair[1];
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	685a      	ldr	r2, [r3, #4]
 800fe44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fe48:	631a      	str	r2, [r3, #48]	; 0x30
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800fe4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fe54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d1c9      	bne.n	800fdf0 <lfs_fs_relocate+0x38>
        }
    }

    // find parent
    lfs_mdir_t parent;
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
 800fe5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fe60:	461a      	mov	r2, r3
 800fe62:	68b9      	ldr	r1, [r7, #8]
 800fe64:	68f8      	ldr	r0, [r7, #12]
 800fe66:	f7ff ff4f 	bl	800fd08 <lfs_fs_parent>
 800fe6a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    if (tag < 0 && tag != LFS_ERR_NOENT) {
 800fe6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	da07      	bge.n	800fe86 <lfs_fs_relocate+0xce>
 800fe76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fe7a:	f113 0f02 	cmn.w	r3, #2
 800fe7e:	d002      	beq.n	800fe86 <lfs_fs_relocate+0xce>
        return tag;
 800fe80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fe84:	e0f3      	b.n	801006e <lfs_fs_relocate+0x2b6>
    }

    if (tag != LFS_ERR_NOENT) {
 800fe86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fe8a:	f113 0f02 	cmn.w	r3, #2
 800fe8e:	d07c      	beq.n	800ff8a <lfs_fs_relocate+0x1d2>
        // update disk, this creates a desync
        int err = lfs_fs_preporphans(lfs, +1);
 800fe90:	2101      	movs	r1, #1
 800fe92:	68f8      	ldr	r0, [r7, #12]
 800fe94:	f000 f8f8 	bl	8010088 <lfs_fs_preporphans>
 800fe98:	67b8      	str	r0, [r7, #120]	; 0x78
        if (err) {
 800fe9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d001      	beq.n	800fea4 <lfs_fs_relocate+0xec>
            return err;
 800fea0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fea2:	e0e4      	b.n	801006e <lfs_fs_relocate+0x2b6>
        }

        // fix pending move in this pair? this looks like an optimization but
        // is in fact _required_ since relocating may outdate the move.
        uint16_t moveid = 0x3ff;
 800fea4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800fea8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	3330      	adds	r3, #48	; 0x30
 800feb0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800feb4:	4611      	mov	r1, r2
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7fb fa4c 	bl	800b354 <lfs_gstate_hasmovehere>
 800febc:	4603      	mov	r3, r0
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d02d      	beq.n	800ff1e <lfs_fs_relocate+0x166>
            moveid = lfs_tag_id(lfs->gstate.tag);
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7fb f99c 	bl	800b204 <lfs_tag_id>
 800fecc:	4603      	mov	r3, r0
 800fece:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            LFS_DEBUG("Fixing move while relocating "
 800fed2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fed4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fed6:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800feda:	4867      	ldr	r0, [pc, #412]	; (8010078 <lfs_fs_relocate+0x2c0>)
 800fedc:	9002      	str	r0, [sp, #8]
 800fede:	9201      	str	r2, [sp, #4]
 800fee0:	9300      	str	r3, [sp, #0]
 800fee2:	460b      	mov	r3, r1
 800fee4:	f640 72c4 	movw	r2, #4036	; 0xfc4
 800fee8:	4964      	ldr	r1, [pc, #400]	; (801007c <lfs_fs_relocate+0x2c4>)
 800feea:	4865      	ldr	r0, [pc, #404]	; (8010080 <lfs_fs_relocate+0x2c8>)
 800feec:	f011 fc14 	bl	8021718 <iprintf>
                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                    parent.pair[0], parent.pair[1], moveid);
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800fef0:	2200      	movs	r2, #0
 800fef2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800fef6:	68f8      	ldr	r0, [r7, #12]
 800fef8:	f000 f900 	bl	80100fc <lfs_fs_prepmove>
            if (moveid < lfs_tag_id(tag)) {
 800fefc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ff00:	4618      	mov	r0, r3
 800ff02:	f7fb f97f 	bl	800b204 <lfs_tag_id>
 800ff06:	4603      	mov	r3, r0
 800ff08:	461a      	mov	r2, r3
 800ff0a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800ff0e:	4293      	cmp	r3, r2
 800ff10:	d205      	bcs.n	800ff1e <lfs_fs_relocate+0x166>
                tag -= LFS_MKTAG(0, 1, 0);
 800ff12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ff16:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ff1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }
        }

        lfs_pair_tole32(newpair);
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f7fb f8fb 	bl	800b11a <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 800ff24:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800ff28:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800ff2c:	4293      	cmp	r3, r2
 800ff2e:	d007      	beq.n	800ff40 <lfs_fs_relocate+0x188>
 800ff30:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800ff34:	029b      	lsls	r3, r3, #10
 800ff36:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800ff3a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800ff3e:	e000      	b.n	800ff42 <lfs_fs_relocate+0x18a>
 800ff40:	2300      	movs	r3, #0
 800ff42:	647b      	str	r3, [r7, #68]	; 0x44
 800ff44:	2300      	movs	r3, #0
 800ff46:	64bb      	str	r3, [r7, #72]	; 0x48
 800ff48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ff4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	653b      	str	r3, [r7, #80]	; 0x50
 800ff52:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800ff56:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800ff5a:	2302      	movs	r3, #2
 800ff5c:	68f8      	ldr	r0, [r7, #12]
 800ff5e:	f7fd fb23 	bl	800d5a8 <lfs_dir_commit>
 800ff62:	67b8      	str	r0, [r7, #120]	; 0x78
                {LFS_MKTAG_IF(moveid != 0x3ff,
                    LFS_TYPE_DELETE, moveid, 0), NULL},
                {tag, newpair}));
        lfs_pair_fromle32(newpair);
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f7fb f8be 	bl	800b0e6 <lfs_pair_fromle32>
        if (err) {
 800ff6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d001      	beq.n	800ff74 <lfs_fs_relocate+0x1bc>
            return err;
 800ff70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ff72:	e07c      	b.n	801006e <lfs_fs_relocate+0x2b6>
        }

        // next step, clean up orphans
        err = lfs_fs_preporphans(lfs, -1);
 800ff74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ff78:	68f8      	ldr	r0, [r7, #12]
 800ff7a:	f000 f885 	bl	8010088 <lfs_fs_preporphans>
 800ff7e:	67b8      	str	r0, [r7, #120]	; 0x78
        if (err) {
 800ff80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d001      	beq.n	800ff8a <lfs_fs_relocate+0x1d2>
            return err;
 800ff86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ff88:	e071      	b.n	801006e <lfs_fs_relocate+0x2b6>
        }
    }

    // find pred
    int err = lfs_fs_pred(lfs, oldpair, &parent);
 800ff8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ff8e:	461a      	mov	r2, r3
 800ff90:	68b9      	ldr	r1, [r7, #8]
 800ff92:	68f8      	ldr	r0, [r7, #12]
 800ff94:	f7ff fe30 	bl	800fbf8 <lfs_fs_pred>
 800ff98:	6778      	str	r0, [r7, #116]	; 0x74
    if (err && err != LFS_ERR_NOENT) {
 800ff9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d005      	beq.n	800ffac <lfs_fs_relocate+0x1f4>
 800ffa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ffa2:	f113 0f02 	cmn.w	r3, #2
 800ffa6:	d001      	beq.n	800ffac <lfs_fs_relocate+0x1f4>
        return err;
 800ffa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ffaa:	e060      	b.n	801006e <lfs_fs_relocate+0x2b6>
    }

    // if we can't find dir, it must be new
    if (err != LFS_ERR_NOENT) {
 800ffac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ffae:	f113 0f02 	cmn.w	r3, #2
 800ffb2:	d05b      	beq.n	801006c <lfs_fs_relocate+0x2b4>
        // fix pending move in this pair? this looks like an optimization but
        // is in fact _required_ since relocating may outdate the move.
        uint16_t moveid = 0x3ff;
 800ffb4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800ffb8:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	3330      	adds	r3, #48	; 0x30
 800ffc0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800ffc4:	4611      	mov	r1, r2
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f7fb f9c4 	bl	800b354 <lfs_gstate_hasmovehere>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d01c      	beq.n	801000c <lfs_fs_relocate+0x254>
            moveid = lfs_tag_id(lfs->gstate.tag);
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7fb f914 	bl	800b204 <lfs_tag_id>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
            LFS_DEBUG("Fixing move while relocating "
 800ffe2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ffe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ffe6:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800ffea:	4823      	ldr	r0, [pc, #140]	; (8010078 <lfs_fs_relocate+0x2c0>)
 800ffec:	9002      	str	r0, [sp, #8]
 800ffee:	9201      	str	r2, [sp, #4]
 800fff0:	9300      	str	r3, [sp, #0]
 800fff2:	460b      	mov	r3, r1
 800fff4:	f640 72eb 	movw	r2, #4075	; 0xfeb
 800fff8:	4920      	ldr	r1, [pc, #128]	; (801007c <lfs_fs_relocate+0x2c4>)
 800fffa:	4821      	ldr	r0, [pc, #132]	; (8010080 <lfs_fs_relocate+0x2c8>)
 800fffc:	f011 fb8c 	bl	8021718 <iprintf>
                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                    parent.pair[0], parent.pair[1], moveid);
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8010000:	2200      	movs	r2, #0
 8010002:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8010006:	68f8      	ldr	r0, [r7, #12]
 8010008:	f000 f878 	bl	80100fc <lfs_fs_prepmove>
        }

        // replace bad pair, either we clean up desync, or no desync occured
        lfs_pair_tole32(newpair);
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f7fb f884 	bl	800b11a <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 8010012:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8010016:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801001a:	4293      	cmp	r3, r2
 801001c:	d007      	beq.n	801002e <lfs_fs_relocate+0x276>
 801001e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8010022:	029b      	lsls	r3, r3, #10
 8010024:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8010028:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 801002c:	e000      	b.n	8010030 <lfs_fs_relocate+0x278>
 801002e:	2300      	movs	r3, #0
 8010030:	627b      	str	r3, [r7, #36]	; 0x24
 8010032:	2300      	movs	r3, #0
 8010034:	62bb      	str	r3, [r7, #40]	; 0x28
 8010036:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801003a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 801003e:	051a      	lsls	r2, r3, #20
 8010040:	4b10      	ldr	r3, [pc, #64]	; (8010084 <lfs_fs_relocate+0x2cc>)
 8010042:	4313      	orrs	r3, r2
 8010044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	633b      	str	r3, [r7, #48]	; 0x30
 801004a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801004e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8010052:	2302      	movs	r3, #2
 8010054:	68f8      	ldr	r0, [r7, #12]
 8010056:	f7fd faa7 	bl	800d5a8 <lfs_dir_commit>
 801005a:	6778      	str	r0, [r7, #116]	; 0x74
                {LFS_MKTAG_IF(moveid != 0x3ff,
                    LFS_TYPE_DELETE, moveid, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_TAIL + parent.split, 0x3ff, 8), newpair}));
        lfs_pair_fromle32(newpair);
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f7fb f842 	bl	800b0e6 <lfs_pair_fromle32>
        if (err) {
 8010062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010064:	2b00      	cmp	r3, #0
 8010066:	d001      	beq.n	801006c <lfs_fs_relocate+0x2b4>
            return err;
 8010068:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801006a:	e000      	b.n	801006e <lfs_fs_relocate+0x2b6>
        }
    }

    return 0;
 801006c:	2300      	movs	r3, #0
}
 801006e:	4618      	mov	r0, r3
 8010070:	3788      	adds	r7, #136	; 0x88
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}
 8010076:	bf00      	nop
 8010078:	080233f4 	.word	0x080233f4
 801007c:	080232e8 	.word	0x080232e8
 8010080:	08023900 	.word	0x08023900
 8010084:	000ffc08 	.word	0x000ffc08

08010088 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8010088:	b590      	push	{r4, r7, lr}
 801008a:	b083      	sub	sp, #12
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
 8010090:	460b      	mov	r3, r1
 8010092:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010098:	4618      	mov	r0, r3
 801009a:	f7fb f8c3 	bl	800b224 <lfs_tag_size>
 801009e:	4603      	mov	r3, r0
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d10a      	bne.n	80100ba <lfs_fs_preporphans+0x32>
 80100a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	da06      	bge.n	80100ba <lfs_fs_preporphans+0x32>
 80100ac:	4b10      	ldr	r3, [pc, #64]	; (80100f0 <lfs_fs_preporphans+0x68>)
 80100ae:	4a11      	ldr	r2, [pc, #68]	; (80100f4 <lfs_fs_preporphans+0x6c>)
 80100b0:	f241 0103 	movw	r1, #4099	; 0x1003
 80100b4:	4810      	ldr	r0, [pc, #64]	; (80100f8 <lfs_fs_preporphans+0x70>)
 80100b6:	f011 f8d9 	bl	802126c <__assert_func>
    lfs->gstate.tag += orphans;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80100be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80100c2:	441a      	add	r2, r3
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100cc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	3330      	adds	r3, #48	; 0x30
 80100d4:	4618      	mov	r0, r3
 80100d6:	f7fb f908 	bl	800b2ea <lfs_gstate_hasorphans>
 80100da:	4603      	mov	r3, r0
 80100dc:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80100de:	ea44 0203 	orr.w	r2, r4, r3
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 80100e6:	2300      	movs	r3, #0
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	370c      	adds	r7, #12
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd90      	pop	{r4, r7, pc}
 80100f0:	08023944 	.word	0x08023944
 80100f4:	08027268 	.word	0x08027268
 80100f8:	080232e8 	.word	0x080232e8

080100fc <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 80100fc:	b480      	push	{r7}
 80100fe:	b085      	sub	sp, #20
 8010100:	af00      	add	r7, sp, #0
 8010102:	60f8      	str	r0, [r7, #12]
 8010104:	460b      	mov	r3, r1
 8010106:	607a      	str	r2, [r7, #4]
 8010108:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801010e:	4a17      	ldr	r2, [pc, #92]	; (801016c <lfs_fs_prepmove+0x70>)
 8010110:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8010112:	897b      	ldrh	r3, [r7, #10]
 8010114:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8010118:	428b      	cmp	r3, r1
 801011a:	d006      	beq.n	801012a <lfs_fs_prepmove+0x2e>
 801011c:	897b      	ldrh	r3, [r7, #10]
 801011e:	029b      	lsls	r3, r3, #10
 8010120:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8010124:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8010128:	e000      	b.n	801012c <lfs_fs_prepmove+0x30>
 801012a:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801012c:	431a      	orrs	r2, r3
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8010132:	897b      	ldrh	r3, [r7, #10]
 8010134:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8010138:	4293      	cmp	r3, r2
 801013a:	d002      	beq.n	8010142 <lfs_fs_prepmove+0x46>
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	e000      	b.n	8010144 <lfs_fs_prepmove+0x48>
 8010142:	2300      	movs	r3, #0
 8010144:	68fa      	ldr	r2, [r7, #12]
 8010146:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8010148:	897b      	ldrh	r3, [r7, #10]
 801014a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801014e:	4293      	cmp	r3, r2
 8010150:	d003      	beq.n	801015a <lfs_fs_prepmove+0x5e>
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	3304      	adds	r3, #4
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	e000      	b.n	801015c <lfs_fs_prepmove+0x60>
 801015a:	2300      	movs	r3, #0
 801015c:	68fa      	ldr	r2, [r7, #12]
 801015e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8010160:	bf00      	nop
 8010162:	3714      	adds	r7, #20
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr
 801016c:	800003ff 	.word	0x800003ff

08010170 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8010170:	b5b0      	push	{r4, r5, r7, lr}
 8010172:	b094      	sub	sp, #80	; 0x50
 8010174:	af04      	add	r7, sp, #16
 8010176:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	333c      	adds	r3, #60	; 0x3c
 801017c:	4618      	mov	r0, r3
 801017e:	f7fb f8d6 	bl	800b32e <lfs_gstate_hasmove>
 8010182:	4603      	mov	r3, r0
 8010184:	f083 0301 	eor.w	r3, r3, #1
 8010188:	b2db      	uxtb	r3, r3
 801018a:	2b00      	cmp	r3, #0
 801018c:	d001      	beq.n	8010192 <lfs_fs_demove+0x22>
        return 0;
 801018e:	2300      	movs	r3, #0
 8010190:	e049      	b.n	8010226 <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801019e:	4618      	mov	r0, r3
 80101a0:	f7fb f830 	bl	800b204 <lfs_tag_id>
 80101a4:	4603      	mov	r3, r0
 80101a6:	461a      	mov	r2, r3
 80101a8:	4b21      	ldr	r3, [pc, #132]	; (8010230 <lfs_fs_demove+0xc0>)
 80101aa:	9302      	str	r3, [sp, #8]
 80101ac:	9201      	str	r2, [sp, #4]
 80101ae:	9400      	str	r4, [sp, #0]
 80101b0:	462b      	mov	r3, r5
 80101b2:	f241 021d 	movw	r2, #4125	; 0x101d
 80101b6:	491f      	ldr	r1, [pc, #124]	; (8010234 <lfs_fs_demove+0xc4>)
 80101b8:	481f      	ldr	r0, [pc, #124]	; (8010238 <lfs_fs_demove+0xc8>)
 80101ba:	f011 faad 	bl	8021718 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80101c4:	f107 0318 	add.w	r3, r7, #24
 80101c8:	4619      	mov	r1, r3
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f7fc fa18 	bl	800c600 <lfs_dir_fetch>
 80101d0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 80101d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d001      	beq.n	80101dc <lfs_fs_demove+0x6c>
        return err;
 80101d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101da:	e024      	b.n	8010226 <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7fb f80f 	bl	800b204 <lfs_tag_id>
 80101e6:	4603      	mov	r3, r0
 80101e8:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80101ea:	2200      	movs	r2, #0
 80101ec:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	f7ff ff83 	bl	80100fc <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 80101f6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80101f8:	029b      	lsls	r3, r3, #10
 80101fa:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80101fe:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8010202:	613b      	str	r3, [r7, #16]
 8010204:	2300      	movs	r3, #0
 8010206:	617b      	str	r3, [r7, #20]
 8010208:	f107 0210 	add.w	r2, r7, #16
 801020c:	f107 0118 	add.w	r1, r7, #24
 8010210:	2301      	movs	r3, #1
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f7fd f9c8 	bl	800d5a8 <lfs_dir_commit>
 8010218:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 801021a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801021c:	2b00      	cmp	r3, #0
 801021e:	d001      	beq.n	8010224 <lfs_fs_demove+0xb4>
        return err;
 8010220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010222:	e000      	b.n	8010226 <lfs_fs_demove+0xb6>
    }

    return 0;
 8010224:	2300      	movs	r3, #0
}
 8010226:	4618      	mov	r0, r3
 8010228:	3740      	adds	r7, #64	; 0x40
 801022a:	46bd      	mov	sp, r7
 801022c:	bdb0      	pop	{r4, r5, r7, pc}
 801022e:	bf00      	nop
 8010230:	080233f4 	.word	0x080233f4
 8010234:	080232e8 	.word	0x080232e8
 8010238:	08023978 	.word	0x08023978

0801023c <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs) {
 801023c:	b5b0      	push	{r4, r5, r7, lr}
 801023e:	b0a8      	sub	sp, #160	; 0xa0
 8010240:	af04      	add	r7, sp, #16
 8010242:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	3330      	adds	r3, #48	; 0x30
 8010248:	4618      	mov	r0, r3
 801024a:	f7fb f84e 	bl	800b2ea <lfs_gstate_hasorphans>
 801024e:	4603      	mov	r3, r0
 8010250:	f083 0301 	eor.w	r3, r3, #1
 8010254:	b2db      	uxtb	r3, r3
 8010256:	2b00      	cmp	r3, #0
 8010258:	d001      	beq.n	801025e <lfs_fs_deorphan+0x22>
        return 0;
 801025a:	2300      	movs	r3, #0
 801025c:	e0e6      	b.n	801042c <lfs_fs_deorphan+0x1f0>
    }

    // Fix any orphans
    lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 801025e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010262:	2220      	movs	r2, #32
 8010264:	2100      	movs	r1, #0
 8010266:	4618      	mov	r0, r3
 8010268:	f011 fc6c 	bl	8021b44 <memset>
 801026c:	2301      	movs	r3, #1
 801026e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8010272:	2301      	movs	r3, #1
 8010274:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    lfs_mdir_t dir;

    // iterate over all directory directory entries
    while (!lfs_pair_isnull(pdir.tail)) {
 8010278:	e0bd      	b.n	80103f6 <lfs_fs_deorphan+0x1ba>
        int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 801027a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801027e:	f103 0218 	add.w	r2, r3, #24
 8010282:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010286:	4619      	mov	r1, r3
 8010288:	6878      	ldr	r0, [r7, #4]
 801028a:	f7fc f9b9 	bl	800c600 <lfs_dir_fetch>
 801028e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        if (err) {
 8010292:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010296:	2b00      	cmp	r3, #0
 8010298:	d002      	beq.n	80102a0 <lfs_fs_deorphan+0x64>
            return err;
 801029a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801029e:	e0c5      	b.n	801042c <lfs_fs_deorphan+0x1f0>
        }

        // check head blocks for orphans
        if (!pdir.split) {
 80102a0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80102a4:	f083 0301 	eor.w	r3, r3, #1
 80102a8:	b2db      	uxtb	r3, r3
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	f000 8099 	beq.w	80103e2 <lfs_fs_deorphan+0x1a6>
            // check if we have a parent
            lfs_mdir_t parent;
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 80102b0:	f107 020c 	add.w	r2, r7, #12
 80102b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80102b8:	3318      	adds	r3, #24
 80102ba:	4619      	mov	r1, r3
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f7ff fd23 	bl	800fd08 <lfs_fs_parent>
 80102c2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            if (tag < 0 && tag != LFS_ERR_NOENT) {
 80102c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	da07      	bge.n	80102de <lfs_fs_deorphan+0xa2>
 80102ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80102d2:	f113 0f02 	cmn.w	r3, #2
 80102d6:	d002      	beq.n	80102de <lfs_fs_deorphan+0xa2>
                return tag;
 80102d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80102dc:	e0a6      	b.n	801042c <lfs_fs_deorphan+0x1f0>
            }

            if (tag == LFS_ERR_NOENT) {
 80102de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80102e2:	f113 0f02 	cmn.w	r3, #2
 80102e6:	d11d      	bne.n	8010324 <lfs_fs_deorphan+0xe8>
                // we are an orphan
                LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 80102e8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80102ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80102ee:	4951      	ldr	r1, [pc, #324]	; (8010434 <lfs_fs_deorphan+0x1f8>)
 80102f0:	9101      	str	r1, [sp, #4]
 80102f2:	9300      	str	r3, [sp, #0]
 80102f4:	4613      	mov	r3, r2
 80102f6:	f241 0252 	movw	r2, #4178	; 0x1052
 80102fa:	494f      	ldr	r1, [pc, #316]	; (8010438 <lfs_fs_deorphan+0x1fc>)
 80102fc:	484f      	ldr	r0, [pc, #316]	; (801043c <lfs_fs_deorphan+0x200>)
 80102fe:	f011 fa0b 	bl	8021718 <iprintf>
                        pdir.tail[0], pdir.tail[1]);

                err = lfs_dir_drop(lfs, &pdir, &dir);
 8010302:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8010306:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801030a:	4619      	mov	r1, r3
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f7fc fd75 	bl	800cdfc <lfs_dir_drop>
 8010312:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                if (err) {
 8010316:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801031a:	2b00      	cmp	r3, #0
 801031c:	d05d      	beq.n	80103da <lfs_fs_deorphan+0x19e>
                    return err;
 801031e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010322:	e083      	b.n	801042c <lfs_fs_deorphan+0x1f0>
                // refetch tail
                continue;
            }

            lfs_block_t pair[2];
            lfs_stag_t res = lfs_dir_get(lfs, &parent,
 8010324:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010328:	f107 010c 	add.w	r1, r7, #12
 801032c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010330:	9300      	str	r3, [sp, #0]
 8010332:	4613      	mov	r3, r2
 8010334:	4a42      	ldr	r2, [pc, #264]	; (8010440 <lfs_fs_deorphan+0x204>)
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f7fb fb4e 	bl	800b9d8 <lfs_dir_get>
 801033c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
                    LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
            if (res < 0) {
 8010340:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010344:	2b00      	cmp	r3, #0
 8010346:	da02      	bge.n	801034e <lfs_fs_deorphan+0x112>
                return res;
 8010348:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801034c:	e06e      	b.n	801042c <lfs_fs_deorphan+0x1f0>
            }
            lfs_pair_fromle32(pair);
 801034e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010352:	4618      	mov	r0, r3
 8010354:	f7fa fec7 	bl	800b0e6 <lfs_pair_fromle32>

            if (!lfs_pair_sync(pair, pdir.tail)) {
 8010358:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801035c:	f103 0218 	add.w	r2, r3, #24
 8010360:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010364:	4611      	mov	r1, r2
 8010366:	4618      	mov	r0, r3
 8010368:	f7fa fe90 	bl	800b08c <lfs_pair_sync>
 801036c:	4603      	mov	r3, r0
 801036e:	f083 0301 	eor.w	r3, r3, #1
 8010372:	b2db      	uxtb	r3, r3
 8010374:	2b00      	cmp	r3, #0
 8010376:	d034      	beq.n	80103e2 <lfs_fs_deorphan+0x1a6>
                // we have desynced
                LFS_DEBUG("Fixing half-orphan {0x%"PRIx32", 0x%"PRIx32"} "
 8010378:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801037a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801037e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010380:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010382:	4c2c      	ldr	r4, [pc, #176]	; (8010434 <lfs_fs_deorphan+0x1f8>)
 8010384:	9403      	str	r4, [sp, #12]
 8010386:	9102      	str	r1, [sp, #8]
 8010388:	9201      	str	r2, [sp, #4]
 801038a:	9300      	str	r3, [sp, #0]
 801038c:	4603      	mov	r3, r0
 801038e:	f241 0268 	movw	r2, #4200	; 0x1068
 8010392:	4929      	ldr	r1, [pc, #164]	; (8010438 <lfs_fs_deorphan+0x1fc>)
 8010394:	482b      	ldr	r0, [pc, #172]	; (8010444 <lfs_fs_deorphan+0x208>)
 8010396:	f011 f9bf 	bl	8021718 <iprintf>
                            "-> {0x%"PRIx32", 0x%"PRIx32"}",
                        pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                lfs_pair_tole32(pair);
 801039a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801039e:	4618      	mov	r0, r3
 80103a0:	f7fa febb 	bl	800b11a <lfs_pair_tole32>
                err = lfs_dir_commit(lfs, &pdir, LFS_MKATTRS(
 80103a4:	4b28      	ldr	r3, [pc, #160]	; (8010448 <lfs_fs_deorphan+0x20c>)
 80103a6:	637b      	str	r3, [r7, #52]	; 0x34
 80103a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80103ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80103ae:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80103b2:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80103b6:	2301      	movs	r3, #1
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f7fd f8f5 	bl	800d5a8 <lfs_dir_commit>
 80103be:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                        {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pair}));
                lfs_pair_fromle32(pair);
 80103c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7fa fe8d 	bl	800b0e6 <lfs_pair_fromle32>
                if (err) {
 80103cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d004      	beq.n	80103de <lfs_fs_deorphan+0x1a2>
                    return err;
 80103d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                return tag;
 80103d8:	e028      	b.n	801042c <lfs_fs_deorphan+0x1f0>
                continue;
 80103da:	bf00      	nop
 80103dc:	e00b      	b.n	80103f6 <lfs_fs_deorphan+0x1ba>
                }

                // refetch tail
                continue;
 80103de:	bf00      	nop
 80103e0:	e009      	b.n	80103f6 <lfs_fs_deorphan+0x1ba>
            }
        }

        pdir = dir;
 80103e2:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80103e6:	f107 0544 	add.w	r5, r7, #68	; 0x44
 80103ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80103f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (!lfs_pair_isnull(pdir.tail)) {
 80103f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80103fa:	3318      	adds	r3, #24
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7fa fe00 	bl	800b002 <lfs_pair_isnull>
 8010402:	4603      	mov	r3, r0
 8010404:	f083 0301 	eor.w	r3, r3, #1
 8010408:	b2db      	uxtb	r3, r3
 801040a:	2b00      	cmp	r3, #0
 801040c:	f47f af35 	bne.w	801027a <lfs_fs_deorphan+0x3e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	3330      	adds	r3, #48	; 0x30
 8010414:	4618      	mov	r0, r3
 8010416:	f7fa ff7b 	bl	800b310 <lfs_gstate_getorphans>
 801041a:	4603      	mov	r3, r0
 801041c:	425b      	negs	r3, r3
 801041e:	b2db      	uxtb	r3, r3
 8010420:	b25b      	sxtb	r3, r3
 8010422:	4619      	mov	r1, r3
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f7ff fe2f 	bl	8010088 <lfs_fs_preporphans>
 801042a:	4603      	mov	r3, r0
}
 801042c:	4618      	mov	r0, r3
 801042e:	3790      	adds	r7, #144	; 0x90
 8010430:	46bd      	mov	sp, r7
 8010432:	bdb0      	pop	{r4, r5, r7, pc}
 8010434:	080233f4 	.word	0x080233f4
 8010438:	080232e8 	.word	0x080232e8
 801043c:	080239ac 	.word	0x080239ac
 8010440:	7ffffc00 	.word	0x7ffffc00
 8010444:	080239dc 	.word	0x080239dc
 8010448:	600ffc08 	.word	0x600ffc08

0801044c <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 801044c:	b580      	push	{r7, lr}
 801044e:	b084      	sub	sp, #16
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f7ff fe8b 	bl	8010170 <lfs_fs_demove>
 801045a:	60f8      	str	r0, [r7, #12]
    if (err) {
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d001      	beq.n	8010466 <lfs_fs_forceconsistency+0x1a>
        return err;
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	e009      	b.n	801047a <lfs_fs_forceconsistency+0x2e>
    }

    err = lfs_fs_deorphan(lfs);
 8010466:	6878      	ldr	r0, [r7, #4]
 8010468:	f7ff fee8 	bl	801023c <lfs_fs_deorphan>
 801046c:	60f8      	str	r0, [r7, #12]
    if (err) {
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d001      	beq.n	8010478 <lfs_fs_forceconsistency+0x2c>
        return err;
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	e000      	b.n	801047a <lfs_fs_forceconsistency+0x2e>
    }

    return 0;
 8010478:	2300      	movs	r3, #0
}
 801047a:	4618      	mov	r0, r3
 801047c:	3710      	adds	r7, #16
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}

08010482 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8010482:	b480      	push	{r7}
 8010484:	b085      	sub	sp, #20
 8010486:	af00      	add	r7, sp, #0
 8010488:	6078      	str	r0, [r7, #4]
 801048a:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	1c5a      	adds	r2, r3, #1
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	601a      	str	r2, [r3, #0]
    return 0;
 801049a:	2300      	movs	r3, #0
}
 801049c:	4618      	mov	r0, r3
 801049e:	3714      	adds	r7, #20
 80104a0:	46bd      	mov	sp, r7
 80104a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a6:	4770      	bx	lr

080104a8 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b084      	sub	sp, #16
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 80104b0:	2300      	movs	r3, #0
 80104b2:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 80104b4:	f107 0208 	add.w	r2, r7, #8
 80104b8:	2300      	movs	r3, #0
 80104ba:	4907      	ldr	r1, [pc, #28]	; (80104d8 <lfs_fs_rawsize+0x30>)
 80104bc:	6878      	ldr	r0, [r7, #4]
 80104be:	f7ff fa75 	bl	800f9ac <lfs_fs_rawtraverse>
 80104c2:	60f8      	str	r0, [r7, #12]
    if (err) {
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d001      	beq.n	80104ce <lfs_fs_rawsize+0x26>
        return err;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	e000      	b.n	80104d0 <lfs_fs_rawsize+0x28>
    }

    return size;
 80104ce:	68bb      	ldr	r3, [r7, #8]
}
 80104d0:	4618      	mov	r0, r3
 80104d2:	3710      	adds	r7, #16
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bd80      	pop	{r7, pc}
 80104d8:	08010483 	.word	0x08010483

080104dc <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 80104dc:	b580      	push	{r7, lr}
 80104de:	b084      	sub	sp, #16
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
 80104e4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	695b      	ldr	r3, [r3, #20]
 80104ea:	6838      	ldr	r0, [r7, #0]
 80104ec:	4798      	blx	r3
 80104ee:	60f8      	str	r0, [r7, #12]
    if (err) {
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d001      	beq.n	80104fa <lfs_format+0x1e>
        return err;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	e009      	b.n	801050e <lfs_format+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 80104fa:	6839      	ldr	r1, [r7, #0]
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	f7ff f833 	bl	800f568 <lfs_rawformat>
 8010502:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	699b      	ldr	r3, [r3, #24]
 8010508:	6838      	ldr	r0, [r7, #0]
 801050a:	4798      	blx	r3
    return err;
 801050c:	68fb      	ldr	r3, [r7, #12]
}
 801050e:	4618      	mov	r0, r3
 8010510:	3710      	adds	r7, #16
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}

08010516 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8010516:	b580      	push	{r7, lr}
 8010518:	b084      	sub	sp, #16
 801051a:	af00      	add	r7, sp, #0
 801051c:	6078      	str	r0, [r7, #4]
 801051e:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	695b      	ldr	r3, [r3, #20]
 8010524:	6838      	ldr	r0, [r7, #0]
 8010526:	4798      	blx	r3
 8010528:	60f8      	str	r0, [r7, #12]
    if (err) {
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d001      	beq.n	8010534 <lfs_mount+0x1e>
        return err;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	e009      	b.n	8010548 <lfs_mount+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 8010534:	6839      	ldr	r1, [r7, #0]
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f7ff f8b6 	bl	800f6a8 <lfs_rawmount>
 801053c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	699b      	ldr	r3, [r3, #24]
 8010542:	6838      	ldr	r0, [r7, #0]
 8010544:	4798      	blx	r3
    return err;
 8010546:	68fb      	ldr	r3, [r7, #12]
}
 8010548:	4618      	mov	r0, r3
 801054a:	3710      	adds	r7, #16
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}

08010550 <lfs_file_open>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8010550:	b580      	push	{r7, lr}
 8010552:	b086      	sub	sp, #24
 8010554:	af00      	add	r7, sp, #0
 8010556:	60f8      	str	r0, [r7, #12]
 8010558:	60b9      	str	r1, [r7, #8]
 801055a:	607a      	str	r2, [r7, #4]
 801055c:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010562:	695b      	ldr	r3, [r3, #20]
 8010564:	68fa      	ldr	r2, [r7, #12]
 8010566:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8010568:	4610      	mov	r0, r2
 801056a:	4798      	blx	r3
 801056c:	6178      	str	r0, [r7, #20]
    if (err) {
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d001      	beq.n	8010578 <lfs_file_open+0x28>
        return err;
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	e021      	b.n	80105bc <lfs_file_open+0x6c>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801057c:	68b9      	ldr	r1, [r7, #8]
 801057e:	4618      	mov	r0, r3
 8010580:	f7fa ffe8 	bl	800b554 <lfs_mlist_isopen>
 8010584:	4603      	mov	r3, r0
 8010586:	f083 0301 	eor.w	r3, r3, #1
 801058a:	b2db      	uxtb	r3, r3
 801058c:	2b00      	cmp	r3, #0
 801058e:	d106      	bne.n	801059e <lfs_file_open+0x4e>
 8010590:	4b0c      	ldr	r3, [pc, #48]	; (80105c4 <lfs_file_open+0x74>)
 8010592:	4a0d      	ldr	r2, [pc, #52]	; (80105c8 <lfs_file_open+0x78>)
 8010594:	f241 31e8 	movw	r1, #5096	; 0x13e8
 8010598:	480c      	ldr	r0, [pc, #48]	; (80105cc <lfs_file_open+0x7c>)
 801059a:	f010 fe67 	bl	802126c <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	687a      	ldr	r2, [r7, #4]
 80105a2:	68b9      	ldr	r1, [r7, #8]
 80105a4:	68f8      	ldr	r0, [r7, #12]
 80105a6:	f7fe f8e3 	bl	800e770 <lfs_file_rawopen>
 80105aa:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80105b0:	699b      	ldr	r3, [r3, #24]
 80105b2:	68fa      	ldr	r2, [r7, #12]
 80105b4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80105b6:	4610      	mov	r0, r2
 80105b8:	4798      	blx	r3
    return err;
 80105ba:	697b      	ldr	r3, [r7, #20]
}
 80105bc:	4618      	mov	r0, r3
 80105be:	3718      	adds	r7, #24
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}
 80105c4:	08023a20 	.word	0x08023a20
 80105c8:	0802727c 	.word	0x0802727c
 80105cc:	080232e8 	.word	0x080232e8

080105d0 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b084      	sub	sp, #16
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80105de:	695b      	ldr	r3, [r3, #20]
 80105e0:	687a      	ldr	r2, [r7, #4]
 80105e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80105e4:	4610      	mov	r0, r2
 80105e6:	4798      	blx	r3
 80105e8:	60f8      	str	r0, [r7, #12]
    if (err) {
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d001      	beq.n	80105f4 <lfs_file_close+0x24>
        return err;
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	e01c      	b.n	801062e <lfs_file_close+0x5e>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105f8:	6839      	ldr	r1, [r7, #0]
 80105fa:	4618      	mov	r0, r3
 80105fc:	f7fa ffaa 	bl	800b554 <lfs_mlist_isopen>
 8010600:	4603      	mov	r3, r0
 8010602:	2b00      	cmp	r3, #0
 8010604:	d106      	bne.n	8010614 <lfs_file_close+0x44>
 8010606:	4b0c      	ldr	r3, [pc, #48]	; (8010638 <lfs_file_close+0x68>)
 8010608:	4a0c      	ldr	r2, [pc, #48]	; (801063c <lfs_file_close+0x6c>)
 801060a:	f241 410b 	movw	r1, #5131	; 0x140b
 801060e:	480c      	ldr	r0, [pc, #48]	; (8010640 <lfs_file_close+0x70>)
 8010610:	f010 fe2c 	bl	802126c <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 8010614:	6839      	ldr	r1, [r7, #0]
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f7fe f8c2 	bl	800e7a0 <lfs_file_rawclose>
 801061c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010622:	699b      	ldr	r3, [r3, #24]
 8010624:	687a      	ldr	r2, [r7, #4]
 8010626:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8010628:	4610      	mov	r0, r2
 801062a:	4798      	blx	r3
    return err;
 801062c:	68fb      	ldr	r3, [r7, #12]
}
 801062e:	4618      	mov	r0, r3
 8010630:	3710      	adds	r7, #16
 8010632:	46bd      	mov	sp, r7
 8010634:	bd80      	pop	{r7, pc}
 8010636:	bf00      	nop
 8010638:	08023a58 	.word	0x08023a58
 801063c:	0802728c 	.word	0x0802728c
 8010640:	080232e8 	.word	0x080232e8

08010644 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 8010644:	b580      	push	{r7, lr}
 8010646:	b084      	sub	sp, #16
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010652:	695b      	ldr	r3, [r3, #20]
 8010654:	687a      	ldr	r2, [r7, #4]
 8010656:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8010658:	4610      	mov	r0, r2
 801065a:	4798      	blx	r3
 801065c:	60f8      	str	r0, [r7, #12]
    if (err) {
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d001      	beq.n	8010668 <lfs_mkdir+0x24>
        return err;
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	e00c      	b.n	8010682 <lfs_mkdir+0x3e>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawmkdir(lfs, path);
 8010668:	6839      	ldr	r1, [r7, #0]
 801066a:	6878      	ldr	r0, [r7, #4]
 801066c:	f7fd fb4e 	bl	800dd0c <lfs_rawmkdir>
 8010670:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010676:	699b      	ldr	r3, [r3, #24]
 8010678:	687a      	ldr	r2, [r7, #4]
 801067a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801067c:	4610      	mov	r0, r2
 801067e:	4798      	blx	r3
    return err;
 8010680:	68fb      	ldr	r3, [r7, #12]
}
 8010682:	4618      	mov	r0, r3
 8010684:	3710      	adds	r7, #16
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}
	...

0801068c <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 801068c:	b480      	push	{r7}
 801068e:	b087      	sub	sp, #28
 8010690:	af00      	add	r7, sp, #0
 8010692:	60f8      	str	r0, [r7, #12]
 8010694:	60b9      	str	r1, [r7, #8]
 8010696:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 801069c:	2300      	movs	r3, #0
 801069e:	617b      	str	r3, [r7, #20]
 80106a0:	e024      	b.n	80106ec <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	091a      	lsrs	r2, r3, #4
 80106a6:	6939      	ldr	r1, [r7, #16]
 80106a8:	697b      	ldr	r3, [r7, #20]
 80106aa:	440b      	add	r3, r1
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	4619      	mov	r1, r3
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	404b      	eors	r3, r1
 80106b4:	f003 030f 	and.w	r3, r3, #15
 80106b8:	4912      	ldr	r1, [pc, #72]	; (8010704 <lfs_crc+0x78>)
 80106ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80106be:	4053      	eors	r3, r2
 80106c0:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	091a      	lsrs	r2, r3, #4
 80106c6:	6939      	ldr	r1, [r7, #16]
 80106c8:	697b      	ldr	r3, [r7, #20]
 80106ca:	440b      	add	r3, r1
 80106cc:	781b      	ldrb	r3, [r3, #0]
 80106ce:	091b      	lsrs	r3, r3, #4
 80106d0:	b2db      	uxtb	r3, r3
 80106d2:	4619      	mov	r1, r3
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	404b      	eors	r3, r1
 80106d8:	f003 030f 	and.w	r3, r3, #15
 80106dc:	4909      	ldr	r1, [pc, #36]	; (8010704 <lfs_crc+0x78>)
 80106de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80106e2:	4053      	eors	r3, r2
 80106e4:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	3301      	adds	r3, #1
 80106ea:	617b      	str	r3, [r7, #20]
 80106ec:	697a      	ldr	r2, [r7, #20]
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	429a      	cmp	r2, r3
 80106f2:	d3d6      	bcc.n	80106a2 <lfs_crc+0x16>
    }

    return crc;
 80106f4:	68fb      	ldr	r3, [r7, #12]
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	371c      	adds	r7, #28
 80106fa:	46bd      	mov	sp, r7
 80106fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010700:	4770      	bx	lr
 8010702:	bf00      	nop
 8010704:	0802729c 	.word	0x0802729c

08010708 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b084      	sub	sp, #16
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	330c      	adds	r3, #12
 8010718:	461a      	mov	r2, r3
 801071a:	6839      	ldr	r1, [r7, #0]
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f002 fa59 	bl	8012bd4 <tcpip_send_msg_wait_sem>
 8010722:	4603      	mov	r3, r0
 8010724:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d103      	bne.n	8010736 <netconn_apimsg+0x2e>
    return apimsg->err;
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010734:	e001      	b.n	801073a <netconn_apimsg+0x32>
  }
  return err;
 8010736:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801073a:	4618      	mov	r0, r3
 801073c:	3710      	adds	r7, #16
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}
	...

08010744 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b08c      	sub	sp, #48	; 0x30
 8010748:	af00      	add	r7, sp, #0
 801074a:	4603      	mov	r3, r0
 801074c:	603a      	str	r2, [r7, #0]
 801074e:	71fb      	strb	r3, [r7, #7]
 8010750:	460b      	mov	r3, r1
 8010752:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8010754:	79fb      	ldrb	r3, [r7, #7]
 8010756:	6839      	ldr	r1, [r7, #0]
 8010758:	4618      	mov	r0, r3
 801075a:	f001 f949 	bl	80119f0 <netconn_alloc>
 801075e:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8010760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010762:	2b00      	cmp	r3, #0
 8010764:	d054      	beq.n	8010810 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8010766:	79bb      	ldrb	r3, [r7, #6]
 8010768:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 801076a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801076c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 801076e:	f107 0308 	add.w	r3, r7, #8
 8010772:	4619      	mov	r1, r3
 8010774:	4829      	ldr	r0, [pc, #164]	; (801081c <netconn_new_with_proto_and_callback+0xd8>)
 8010776:	f7ff ffc7 	bl	8010708 <netconn_apimsg>
 801077a:	4603      	mov	r3, r0
 801077c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8010780:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010784:	2b00      	cmp	r3, #0
 8010786:	d043      	beq.n	8010810 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8010788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801078a:	685b      	ldr	r3, [r3, #4]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d005      	beq.n	801079c <netconn_new_with_proto_and_callback+0x58>
 8010790:	4b23      	ldr	r3, [pc, #140]	; (8010820 <netconn_new_with_proto_and_callback+0xdc>)
 8010792:	22a3      	movs	r2, #163	; 0xa3
 8010794:	4923      	ldr	r1, [pc, #140]	; (8010824 <netconn_new_with_proto_and_callback+0xe0>)
 8010796:	4824      	ldr	r0, [pc, #144]	; (8010828 <netconn_new_with_proto_and_callback+0xe4>)
 8010798:	f010 ffbe 	bl	8021718 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 801079c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801079e:	3310      	adds	r3, #16
 80107a0:	4618      	mov	r0, r3
 80107a2:	f00f fb00 	bl	801fda6 <sys_mbox_valid>
 80107a6:	4603      	mov	r3, r0
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d105      	bne.n	80107b8 <netconn_new_with_proto_and_callback+0x74>
 80107ac:	4b1c      	ldr	r3, [pc, #112]	; (8010820 <netconn_new_with_proto_and_callback+0xdc>)
 80107ae:	22a4      	movs	r2, #164	; 0xa4
 80107b0:	491e      	ldr	r1, [pc, #120]	; (801082c <netconn_new_with_proto_and_callback+0xe8>)
 80107b2:	481d      	ldr	r0, [pc, #116]	; (8010828 <netconn_new_with_proto_and_callback+0xe4>)
 80107b4:	f010 ffb0 	bl	8021718 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80107b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ba:	3314      	adds	r3, #20
 80107bc:	4618      	mov	r0, r3
 80107be:	f00f faf2 	bl	801fda6 <sys_mbox_valid>
 80107c2:	4603      	mov	r3, r0
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d005      	beq.n	80107d4 <netconn_new_with_proto_and_callback+0x90>
 80107c8:	4b15      	ldr	r3, [pc, #84]	; (8010820 <netconn_new_with_proto_and_callback+0xdc>)
 80107ca:	22a6      	movs	r2, #166	; 0xa6
 80107cc:	4918      	ldr	r1, [pc, #96]	; (8010830 <netconn_new_with_proto_and_callback+0xec>)
 80107ce:	4816      	ldr	r0, [pc, #88]	; (8010828 <netconn_new_with_proto_and_callback+0xe4>)
 80107d0:	f010 ffa2 	bl	8021718 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80107d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107d6:	330c      	adds	r3, #12
 80107d8:	4618      	mov	r0, r3
 80107da:	f00f fb75 	bl	801fec8 <sys_sem_valid>
 80107de:	4603      	mov	r3, r0
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d105      	bne.n	80107f0 <netconn_new_with_proto_and_callback+0xac>
 80107e4:	4b0e      	ldr	r3, [pc, #56]	; (8010820 <netconn_new_with_proto_and_callback+0xdc>)
 80107e6:	22a9      	movs	r2, #169	; 0xa9
 80107e8:	4912      	ldr	r1, [pc, #72]	; (8010834 <netconn_new_with_proto_and_callback+0xf0>)
 80107ea:	480f      	ldr	r0, [pc, #60]	; (8010828 <netconn_new_with_proto_and_callback+0xe4>)
 80107ec:	f010 ff94 	bl	8021718 <iprintf>
      sys_sem_free(&conn->op_completed);
 80107f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107f2:	330c      	adds	r3, #12
 80107f4:	4618      	mov	r0, r3
 80107f6:	f00f fb5a 	bl	801feae <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80107fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107fc:	3310      	adds	r3, #16
 80107fe:	4618      	mov	r0, r3
 8010800:	f00f fa4a 	bl	801fc98 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8010804:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010806:	2007      	movs	r0, #7
 8010808:	f002 ff92 	bl	8013730 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 801080c:	2300      	movs	r3, #0
 801080e:	e000      	b.n	8010812 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8010810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010812:	4618      	mov	r0, r3
 8010814:	3730      	adds	r7, #48	; 0x30
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}
 801081a:	bf00      	nop
 801081c:	080119c5 	.word	0x080119c5
 8010820:	08023ac8 	.word	0x08023ac8
 8010824:	08023afc 	.word	0x08023afc
 8010828:	08023b20 	.word	0x08023b20
 801082c:	08023b48 	.word	0x08023b48
 8010830:	08023b60 	.word	0x08023b60
 8010834:	08023b84 	.word	0x08023b84

08010838 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b08c      	sub	sp, #48	; 0x30
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d101      	bne.n	801084a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8010846:	2300      	movs	r3, #0
 8010848:	e014      	b.n	8010874 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801084e:	2329      	movs	r3, #41	; 0x29
 8010850:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8010852:	f107 030c 	add.w	r3, r7, #12
 8010856:	4619      	mov	r1, r3
 8010858:	4808      	ldr	r0, [pc, #32]	; (801087c <netconn_prepare_delete+0x44>)
 801085a:	f7ff ff55 	bl	8010708 <netconn_apimsg>
 801085e:	4603      	mov	r3, r0
 8010860:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8010864:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8010868:	2b00      	cmp	r3, #0
 801086a:	d002      	beq.n	8010872 <netconn_prepare_delete+0x3a>
    return err;
 801086c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8010870:	e000      	b.n	8010874 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8010872:	2300      	movs	r3, #0
}
 8010874:	4618      	mov	r0, r3
 8010876:	3730      	adds	r7, #48	; 0x30
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}
 801087c:	08011f39 	.word	0x08011f39

08010880 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b084      	sub	sp, #16
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d101      	bne.n	8010892 <netconn_delete+0x12>
    return ERR_OK;
 801088e:	2300      	movs	r3, #0
 8010890:	e00d      	b.n	80108ae <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8010892:	6878      	ldr	r0, [r7, #4]
 8010894:	f7ff ffd0 	bl	8010838 <netconn_prepare_delete>
 8010898:	4603      	mov	r3, r0
 801089a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 801089c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d102      	bne.n	80108aa <netconn_delete+0x2a>
    netconn_free(conn);
 80108a4:	6878      	ldr	r0, [r7, #4]
 80108a6:	f001 f915 	bl	8011ad4 <netconn_free>
  }
  return err;
 80108aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3710      	adds	r7, #16
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
	...

080108b8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b08e      	sub	sp, #56	; 0x38
 80108bc:	af00      	add	r7, sp, #0
 80108be:	60f8      	str	r0, [r7, #12]
 80108c0:	60b9      	str	r1, [r7, #8]
 80108c2:	4613      	mov	r3, r2
 80108c4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d109      	bne.n	80108e0 <netconn_bind+0x28>
 80108cc:	4b11      	ldr	r3, [pc, #68]	; (8010914 <netconn_bind+0x5c>)
 80108ce:	f44f 729c 	mov.w	r2, #312	; 0x138
 80108d2:	4911      	ldr	r1, [pc, #68]	; (8010918 <netconn_bind+0x60>)
 80108d4:	4811      	ldr	r0, [pc, #68]	; (801091c <netconn_bind+0x64>)
 80108d6:	f010 ff1f 	bl	8021718 <iprintf>
 80108da:	f06f 030f 	mvn.w	r3, #15
 80108de:	e015      	b.n	801090c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d101      	bne.n	80108ea <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80108e6:	4b0e      	ldr	r3, [pc, #56]	; (8010920 <netconn_bind+0x68>)
 80108e8:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80108ee:	68bb      	ldr	r3, [r7, #8]
 80108f0:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80108f2:	88fb      	ldrh	r3, [r7, #6]
 80108f4:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80108f6:	f107 0314 	add.w	r3, r7, #20
 80108fa:	4619      	mov	r1, r3
 80108fc:	4809      	ldr	r0, [pc, #36]	; (8010924 <netconn_bind+0x6c>)
 80108fe:	f7ff ff03 	bl	8010708 <netconn_apimsg>
 8010902:	4603      	mov	r3, r0
 8010904:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8010908:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 801090c:	4618      	mov	r0, r3
 801090e:	3738      	adds	r7, #56	; 0x38
 8010910:	46bd      	mov	sp, r7
 8010912:	bd80      	pop	{r7, pc}
 8010914:	08023ac8 	.word	0x08023ac8
 8010918:	08023c00 	.word	0x08023c00
 801091c:	08023b20 	.word	0x08023b20
 8010920:	08027400 	.word	0x08027400
 8010924:	08012105 	.word	0x08012105

08010928 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b08c      	sub	sp, #48	; 0x30
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	460b      	mov	r3, r1
 8010932:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d109      	bne.n	801094e <netconn_listen_with_backlog+0x26>
 801093a:	4b0d      	ldr	r3, [pc, #52]	; (8010970 <netconn_listen_with_backlog+0x48>)
 801093c:	f240 12bb 	movw	r2, #443	; 0x1bb
 8010940:	490c      	ldr	r1, [pc, #48]	; (8010974 <netconn_listen_with_backlog+0x4c>)
 8010942:	480d      	ldr	r0, [pc, #52]	; (8010978 <netconn_listen_with_backlog+0x50>)
 8010944:	f010 fee8 	bl	8021718 <iprintf>
 8010948:	f06f 030f 	mvn.w	r3, #15
 801094c:	e00c      	b.n	8010968 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8010952:	f107 030c 	add.w	r3, r7, #12
 8010956:	4619      	mov	r1, r3
 8010958:	4808      	ldr	r0, [pc, #32]	; (801097c <netconn_listen_with_backlog+0x54>)
 801095a:	f7ff fed5 	bl	8010708 <netconn_apimsg>
 801095e:	4603      	mov	r3, r0
 8010960:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8010964:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8010968:	4618      	mov	r0, r3
 801096a:	3730      	adds	r7, #48	; 0x30
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}
 8010970:	08023ac8 	.word	0x08023ac8
 8010974:	08023c80 	.word	0x08023c80
 8010978:	08023b20 	.word	0x08023b20
 801097c:	08012179 	.word	0x08012179

08010980 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b086      	sub	sp, #24
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d109      	bne.n	80109a4 <netconn_accept+0x24>
 8010990:	4b42      	ldr	r3, [pc, #264]	; (8010a9c <netconn_accept+0x11c>)
 8010992:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010996:	4942      	ldr	r1, [pc, #264]	; (8010aa0 <netconn_accept+0x120>)
 8010998:	4842      	ldr	r0, [pc, #264]	; (8010aa4 <netconn_accept+0x124>)
 801099a:	f010 febd 	bl	8021718 <iprintf>
 801099e:	f06f 030f 	mvn.w	r3, #15
 80109a2:	e077      	b.n	8010a94 <netconn_accept+0x114>
  *new_conn = NULL;
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	2200      	movs	r2, #0
 80109a8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d109      	bne.n	80109c4 <netconn_accept+0x44>
 80109b0:	4b3a      	ldr	r3, [pc, #232]	; (8010a9c <netconn_accept+0x11c>)
 80109b2:	f240 12e3 	movw	r2, #483	; 0x1e3
 80109b6:	493c      	ldr	r1, [pc, #240]	; (8010aa8 <netconn_accept+0x128>)
 80109b8:	483a      	ldr	r0, [pc, #232]	; (8010aa4 <netconn_accept+0x124>)
 80109ba:	f010 fead 	bl	8021718 <iprintf>
 80109be:	f06f 030f 	mvn.w	r3, #15
 80109c2:	e067      	b.n	8010a94 <netconn_accept+0x114>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f000 fb88 	bl	80110da <netconn_err>
 80109ca:	4603      	mov	r3, r0
 80109cc:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80109ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d002      	beq.n	80109dc <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80109d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80109da:	e05b      	b.n	8010a94 <netconn_accept+0x114>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	3314      	adds	r3, #20
 80109e0:	4618      	mov	r0, r3
 80109e2:	f00f f9e0 	bl	801fda6 <sys_mbox_valid>
 80109e6:	4603      	mov	r3, r0
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d006      	beq.n	80109fa <netconn_accept+0x7a>
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80109f2:	f003 0301 	and.w	r3, r3, #1
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d002      	beq.n	8010a00 <netconn_accept+0x80>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 80109fa:	f06f 030e 	mvn.w	r3, #14
 80109fe:	e049      	b.n	8010a94 <netconn_accept+0x114>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010a06:	f003 0302 	and.w	r3, r3, #2
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d00e      	beq.n	8010a2c <netconn_accept+0xac>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	3314      	adds	r3, #20
 8010a12:	f107 020c 	add.w	r2, r7, #12
 8010a16:	4611      	mov	r1, r2
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f00f f9a8 	bl	801fd6e <sys_arch_mbox_tryfetch>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a24:	d113      	bne.n	8010a4e <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8010a26:	f06f 0306 	mvn.w	r3, #6
 8010a2a:	e033      	b.n	8010a94 <netconn_accept+0x114>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f103 0014 	add.w	r0, r3, #20
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	69da      	ldr	r2, [r3, #28]
 8010a36:	f107 030c 	add.w	r3, r7, #12
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	f00f f958 	bl	801fcf0 <sys_arch_mbox_fetch>
 8010a40:	4603      	mov	r3, r0
 8010a42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a46:	d102      	bne.n	8010a4e <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 8010a48:	f06f 0302 	mvn.w	r3, #2
 8010a4c:	e022      	b.n	8010a94 <netconn_accept+0x114>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d005      	beq.n	8010a62 <netconn_accept+0xe2>
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	2101      	movs	r1, #1
 8010a5e:	6878      	ldr	r0, [r7, #4]
 8010a60:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	f107 0213 	add.w	r2, r7, #19
 8010a68:	4611      	mov	r1, r2
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f000 fb86 	bl	801117c <lwip_netconn_is_err_msg>
 8010a70:	4603      	mov	r3, r0
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d002      	beq.n	8010a7c <netconn_accept+0xfc>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8010a76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010a7a:	e00b      	b.n	8010a94 <netconn_accept+0x114>
  }
  if (accept_ptr == NULL) {
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d102      	bne.n	8010a88 <netconn_accept+0x108>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8010a82:	f06f 030e 	mvn.w	r3, #14
 8010a86:	e005      	b.n	8010a94 <netconn_accept+0x114>
  }
  newconn = (struct netconn *)accept_ptr;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	697a      	ldr	r2, [r7, #20]
 8010a90:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8010a92:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	3718      	adds	r7, #24
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}
 8010a9c:	08023ac8 	.word	0x08023ac8
 8010aa0:	08023ca0 	.word	0x08023ca0
 8010aa4:	08023b20 	.word	0x08023b20
 8010aa8:	08023cc0 	.word	0x08023cc0

08010aac <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b088      	sub	sp, #32
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	60f8      	str	r0, [r7, #12]
 8010ab4:	60b9      	str	r1, [r7, #8]
 8010ab6:	4613      	mov	r3, r2
 8010ab8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8010aba:	2300      	movs	r3, #0
 8010abc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d109      	bne.n	8010ad8 <netconn_recv_data+0x2c>
 8010ac4:	4b5e      	ldr	r3, [pc, #376]	; (8010c40 <netconn_recv_data+0x194>)
 8010ac6:	f44f 7212 	mov.w	r2, #584	; 0x248
 8010aca:	495e      	ldr	r1, [pc, #376]	; (8010c44 <netconn_recv_data+0x198>)
 8010acc:	485e      	ldr	r0, [pc, #376]	; (8010c48 <netconn_recv_data+0x19c>)
 8010ace:	f010 fe23 	bl	8021718 <iprintf>
 8010ad2:	f06f 030f 	mvn.w	r3, #15
 8010ad6:	e0ae      	b.n	8010c36 <netconn_recv_data+0x18a>
  *new_buf = NULL;
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	2200      	movs	r2, #0
 8010adc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d109      	bne.n	8010af8 <netconn_recv_data+0x4c>
 8010ae4:	4b56      	ldr	r3, [pc, #344]	; (8010c40 <netconn_recv_data+0x194>)
 8010ae6:	f240 224a 	movw	r2, #586	; 0x24a
 8010aea:	4958      	ldr	r1, [pc, #352]	; (8010c4c <netconn_recv_data+0x1a0>)
 8010aec:	4856      	ldr	r0, [pc, #344]	; (8010c48 <netconn_recv_data+0x19c>)
 8010aee:	f010 fe13 	bl	8021718 <iprintf>
 8010af2:	f06f 030f 	mvn.w	r3, #15
 8010af6:	e09e      	b.n	8010c36 <netconn_recv_data+0x18a>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	3310      	adds	r3, #16
 8010afc:	4618      	mov	r0, r3
 8010afe:	f00f f952 	bl	801fda6 <sys_mbox_valid>
 8010b02:	4603      	mov	r3, r0
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d10e      	bne.n	8010b26 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8010b08:	68f8      	ldr	r0, [r7, #12]
 8010b0a:	f000 fae6 	bl	80110da <netconn_err>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8010b12:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d002      	beq.n	8010b20 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8010b1a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8010b1e:	e08a      	b.n	8010c36 <netconn_recv_data+0x18a>
    }
    return ERR_CONN;
 8010b20:	f06f 030a 	mvn.w	r3, #10
 8010b24:	e087      	b.n	8010c36 <netconn_recv_data+0x18a>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010b2c:	f003 0302 	and.w	r3, r3, #2
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d110      	bne.n	8010b56 <netconn_recv_data+0xaa>
 8010b34:	79fb      	ldrb	r3, [r7, #7]
 8010b36:	f003 0304 	and.w	r3, r3, #4
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d10b      	bne.n	8010b56 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010b44:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d104      	bne.n	8010b56 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d024      	beq.n	8010ba0 <netconn_recv_data+0xf4>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	3310      	adds	r3, #16
 8010b5a:	f107 0218 	add.w	r2, r7, #24
 8010b5e:	4611      	mov	r1, r2
 8010b60:	4618      	mov	r0, r3
 8010b62:	f00f f904 	bl	801fd6e <sys_arch_mbox_tryfetch>
 8010b66:	4603      	mov	r3, r0
 8010b68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b6c:	d129      	bne.n	8010bc2 <netconn_recv_data+0x116>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8010b6e:	68f8      	ldr	r0, [r7, #12]
 8010b70:	f000 fab3 	bl	80110da <netconn_err>
 8010b74:	4603      	mov	r3, r0
 8010b76:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8010b78:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d002      	beq.n	8010b86 <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 8010b80:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010b84:	e057      	b.n	8010c36 <netconn_recv_data+0x18a>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010b8c:	f003 0301 	and.w	r3, r3, #1
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d002      	beq.n	8010b9a <netconn_recv_data+0xee>
        return ERR_CONN;
 8010b94:	f06f 030a 	mvn.w	r3, #10
 8010b98:	e04d      	b.n	8010c36 <netconn_recv_data+0x18a>
      }
      return ERR_WOULDBLOCK;
 8010b9a:	f06f 0306 	mvn.w	r3, #6
 8010b9e:	e04a      	b.n	8010c36 <netconn_recv_data+0x18a>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	f103 0010 	add.w	r0, r3, #16
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	69da      	ldr	r2, [r3, #28]
 8010baa:	f107 0318 	add.w	r3, r7, #24
 8010bae:	4619      	mov	r1, r3
 8010bb0:	f00f f89e 	bl	801fcf0 <sys_arch_mbox_fetch>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010bba:	d102      	bne.n	8010bc2 <netconn_recv_data+0x116>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 8010bbc:	f06f 0302 	mvn.w	r3, #2
 8010bc0:	e039      	b.n	8010c36 <netconn_recv_data+0x18a>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	781b      	ldrb	r3, [r3, #0]
 8010bc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010bca:	2b10      	cmp	r3, #16
 8010bcc:	d117      	bne.n	8010bfe <netconn_recv_data+0x152>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8010bce:	69bb      	ldr	r3, [r7, #24]
 8010bd0:	f107 0217 	add.w	r2, r7, #23
 8010bd4:	4611      	mov	r1, r2
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f000 fad0 	bl	801117c <lwip_netconn_is_err_msg>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d009      	beq.n	8010bf6 <netconn_recv_data+0x14a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8010be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010be6:	f113 0f0f 	cmn.w	r3, #15
 8010bea:	d101      	bne.n	8010bf0 <netconn_recv_data+0x144>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8010bec:	2300      	movs	r3, #0
 8010bee:	e022      	b.n	8010c36 <netconn_recv_data+0x18a>
      }
      return err;
 8010bf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010bf4:	e01f      	b.n	8010c36 <netconn_recv_data+0x18a>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8010bf6:	69bb      	ldr	r3, [r7, #24]
 8010bf8:	891b      	ldrh	r3, [r3, #8]
 8010bfa:	83fb      	strh	r3, [r7, #30]
 8010bfc:	e00d      	b.n	8010c1a <netconn_recv_data+0x16e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8010bfe:	69bb      	ldr	r3, [r7, #24]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d106      	bne.n	8010c12 <netconn_recv_data+0x166>
 8010c04:	4b0e      	ldr	r3, [pc, #56]	; (8010c40 <netconn_recv_data+0x194>)
 8010c06:	f240 2291 	movw	r2, #657	; 0x291
 8010c0a:	4911      	ldr	r1, [pc, #68]	; (8010c50 <netconn_recv_data+0x1a4>)
 8010c0c:	480e      	ldr	r0, [pc, #56]	; (8010c48 <netconn_recv_data+0x19c>)
 8010c0e:	f010 fd83 	bl	8021718 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8010c12:	69bb      	ldr	r3, [r7, #24]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	891b      	ldrh	r3, [r3, #8]
 8010c18:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d005      	beq.n	8010c2e <netconn_recv_data+0x182>
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c26:	8bfa      	ldrh	r2, [r7, #30]
 8010c28:	2101      	movs	r1, #1
 8010c2a:	68f8      	ldr	r0, [r7, #12]
 8010c2c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8010c2e:	69ba      	ldr	r2, [r7, #24]
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8010c34:	2300      	movs	r3, #0
}
 8010c36:	4618      	mov	r0, r3
 8010c38:	3720      	adds	r7, #32
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd80      	pop	{r7, pc}
 8010c3e:	bf00      	nop
 8010c40:	08023ac8 	.word	0x08023ac8
 8010c44:	08023ce0 	.word	0x08023ce0
 8010c48:	08023b20 	.word	0x08023b20
 8010c4c:	08023d00 	.word	0x08023d00
 8010c50:	08023d1c 	.word	0x08023d1c

08010c54 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b084      	sub	sp, #16
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	60f8      	str	r0, [r7, #12]
 8010c5c:	60b9      	str	r1, [r7, #8]
 8010c5e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d005      	beq.n	8010c72 <netconn_tcp_recvd_msg+0x1e>
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	781b      	ldrb	r3, [r3, #0]
 8010c6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010c6e:	2b10      	cmp	r3, #16
 8010c70:	d009      	beq.n	8010c86 <netconn_tcp_recvd_msg+0x32>
 8010c72:	4b0c      	ldr	r3, [pc, #48]	; (8010ca4 <netconn_tcp_recvd_msg+0x50>)
 8010c74:	f240 22a7 	movw	r2, #679	; 0x2a7
 8010c78:	490b      	ldr	r1, [pc, #44]	; (8010ca8 <netconn_tcp_recvd_msg+0x54>)
 8010c7a:	480c      	ldr	r0, [pc, #48]	; (8010cac <netconn_tcp_recvd_msg+0x58>)
 8010c7c:	f010 fd4c 	bl	8021718 <iprintf>
 8010c80:	f06f 030f 	mvn.w	r3, #15
 8010c84:	e00a      	b.n	8010c9c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	68fa      	ldr	r2, [r7, #12]
 8010c8a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	68ba      	ldr	r2, [r7, #8]
 8010c90:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8010c92:	6879      	ldr	r1, [r7, #4]
 8010c94:	4806      	ldr	r0, [pc, #24]	; (8010cb0 <netconn_tcp_recvd_msg+0x5c>)
 8010c96:	f7ff fd37 	bl	8010708 <netconn_apimsg>
 8010c9a:	4603      	mov	r3, r0
}
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	3710      	adds	r7, #16
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	bd80      	pop	{r7, pc}
 8010ca4:	08023ac8 	.word	0x08023ac8
 8010ca8:	08023d28 	.word	0x08023d28
 8010cac:	08023b20 	.word	0x08023b20
 8010cb0:	080122a9 	.word	0x080122a9

08010cb4 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b090      	sub	sp, #64	; 0x40
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	60f8      	str	r0, [r7, #12]
 8010cbc:	60b9      	str	r1, [r7, #8]
 8010cbe:	4613      	mov	r3, r2
 8010cc0:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	3310      	adds	r3, #16
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f00f f86d 	bl	801fda6 <sys_mbox_valid>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d102      	bne.n	8010cd8 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8010cd2:	f06f 030a 	mvn.w	r3, #10
 8010cd6:	e072      	b.n	8010dbe <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010cde:	b25b      	sxtb	r3, r3
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	da09      	bge.n	8010cf8 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010cee:	b2da      	uxtb	r2, r3
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	f883 2020 	strb.w	r2, [r3, #32]
    goto handle_fin;
 8010cf6:	e03b      	b.n	8010d70 <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8010cf8:	79fb      	ldrb	r3, [r7, #7]
 8010cfa:	461a      	mov	r2, r3
 8010cfc:	68b9      	ldr	r1, [r7, #8]
 8010cfe:	68f8      	ldr	r0, [r7, #12]
 8010d00:	f7ff fed4 	bl	8010aac <netconn_recv_data>
 8010d04:	4603      	mov	r3, r0
 8010d06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8010d0a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d002      	beq.n	8010d18 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8010d12:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010d16:	e052      	b.n	8010dbe <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 8010d18:	68bb      	ldr	r3, [r7, #8]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8010d1e:	79fb      	ldrb	r3, [r7, #7]
 8010d20:	f003 0308 	and.w	r3, r3, #8
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d10e      	bne.n	8010d46 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8010d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d002      	beq.n	8010d34 <netconn_recv_data_tcp+0x80>
 8010d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d30:	891b      	ldrh	r3, [r3, #8]
 8010d32:	e000      	b.n	8010d36 <netconn_recv_data_tcp+0x82>
 8010d34:	2301      	movs	r3, #1
 8010d36:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8010d38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010d3a:	f107 0214 	add.w	r2, r7, #20
 8010d3e:	4619      	mov	r1, r3
 8010d40:	68f8      	ldr	r0, [r7, #12]
 8010d42:	f7ff ff87 	bl	8010c54 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8010d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d136      	bne.n	8010dba <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 8010d4c:	79fb      	ldrb	r3, [r7, #7]
 8010d4e:	f003 0310 	and.w	r3, r3, #16
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d00b      	beq.n	8010d6e <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010d5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010d60:	b2da      	uxtb	r2, r3
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_WOULDBLOCK;
 8010d68:	f06f 0306 	mvn.w	r3, #6
 8010d6c:	e027      	b.n	8010dbe <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 8010d6e:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d005      	beq.n	8010d84 <netconn_recv_data_tcp+0xd0>
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	2101      	movs	r1, #1
 8010d80:	68f8      	ldr	r0, [r7, #12]
 8010d82:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	685b      	ldr	r3, [r3, #4]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d10f      	bne.n	8010dac <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8010d8c:	68f8      	ldr	r0, [r7, #12]
 8010d8e:	f000 f9a4 	bl	80110da <netconn_err>
 8010d92:	4603      	mov	r3, r0
 8010d94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8010d98:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d002      	beq.n	8010da6 <netconn_recv_data_tcp+0xf2>
          return err;
 8010da0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010da4:	e00b      	b.n	8010dbe <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 8010da6:	f06f 030d 	mvn.w	r3, #13
 8010daa:	e008      	b.n	8010dbe <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8010dac:	2101      	movs	r1, #1
 8010dae:	68f8      	ldr	r0, [r7, #12]
 8010db0:	f000 f956 	bl	8011060 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8010db4:	f06f 030e 	mvn.w	r3, #14
 8010db8:	e001      	b.n	8010dbe <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 8010dba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	3740      	adds	r7, #64	; 0x40
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}
	...

08010dc8 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b086      	sub	sp, #24
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
 8010dd0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d109      	bne.n	8010df0 <netconn_recv+0x28>
 8010ddc:	4b32      	ldr	r3, [pc, #200]	; (8010ea8 <netconn_recv+0xe0>)
 8010dde:	f240 3263 	movw	r2, #867	; 0x363
 8010de2:	4932      	ldr	r1, [pc, #200]	; (8010eac <netconn_recv+0xe4>)
 8010de4:	4832      	ldr	r0, [pc, #200]	; (8010eb0 <netconn_recv+0xe8>)
 8010de6:	f010 fc97 	bl	8021718 <iprintf>
 8010dea:	f06f 030f 	mvn.w	r3, #15
 8010dee:	e056      	b.n	8010e9e <netconn_recv+0xd6>
  *new_buf = NULL;
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	2200      	movs	r2, #0
 8010df4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d109      	bne.n	8010e10 <netconn_recv+0x48>
 8010dfc:	4b2a      	ldr	r3, [pc, #168]	; (8010ea8 <netconn_recv+0xe0>)
 8010dfe:	f240 3265 	movw	r2, #869	; 0x365
 8010e02:	492c      	ldr	r1, [pc, #176]	; (8010eb4 <netconn_recv+0xec>)
 8010e04:	482a      	ldr	r0, [pc, #168]	; (8010eb0 <netconn_recv+0xe8>)
 8010e06:	f010 fc87 	bl	8021718 <iprintf>
 8010e0a:	f06f 030f 	mvn.w	r3, #15
 8010e0e:	e046      	b.n	8010e9e <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	781b      	ldrb	r3, [r3, #0]
 8010e14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010e18:	2b10      	cmp	r3, #16
 8010e1a:	d13a      	bne.n	8010e92 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8010e20:	2006      	movs	r0, #6
 8010e22:	f002 fc0f 	bl	8013644 <memp_malloc>
 8010e26:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8010e28:	697b      	ldr	r3, [r7, #20]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d102      	bne.n	8010e34 <netconn_recv+0x6c>
      return ERR_MEM;
 8010e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e32:	e034      	b.n	8010e9e <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8010e34:	f107 030c 	add.w	r3, r7, #12
 8010e38:	2200      	movs	r2, #0
 8010e3a:	4619      	mov	r1, r3
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f7ff ff39 	bl	8010cb4 <netconn_recv_data_tcp>
 8010e42:	4603      	mov	r3, r0
 8010e44:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010e46:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d006      	beq.n	8010e5c <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8010e4e:	6979      	ldr	r1, [r7, #20]
 8010e50:	2006      	movs	r0, #6
 8010e52:	f002 fc6d 	bl	8013730 <memp_free>
      return err;
 8010e56:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e5a:	e020      	b.n	8010e9e <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d106      	bne.n	8010e70 <netconn_recv+0xa8>
 8010e62:	4b11      	ldr	r3, [pc, #68]	; (8010ea8 <netconn_recv+0xe0>)
 8010e64:	f240 3279 	movw	r2, #889	; 0x379
 8010e68:	4913      	ldr	r1, [pc, #76]	; (8010eb8 <netconn_recv+0xf0>)
 8010e6a:	4811      	ldr	r0, [pc, #68]	; (8010eb0 <netconn_recv+0xe8>)
 8010e6c:	f010 fc54 	bl	8021718 <iprintf>

    buf->p = p;
 8010e70:	68fa      	ldr	r2, [r7, #12]
 8010e72:	697b      	ldr	r3, [r7, #20]
 8010e74:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8010e76:	68fa      	ldr	r2, [r7, #12]
 8010e78:	697b      	ldr	r3, [r7, #20]
 8010e7a:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8010e7c:	697b      	ldr	r3, [r7, #20]
 8010e7e:	2200      	movs	r2, #0
 8010e80:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	2200      	movs	r2, #0
 8010e86:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8010e88:	683b      	ldr	r3, [r7, #0]
 8010e8a:	697a      	ldr	r2, [r7, #20]
 8010e8c:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8010e8e:	2300      	movs	r3, #0
 8010e90:	e005      	b.n	8010e9e <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8010e92:	2200      	movs	r2, #0
 8010e94:	6839      	ldr	r1, [r7, #0]
 8010e96:	6878      	ldr	r0, [r7, #4]
 8010e98:	f7ff fe08 	bl	8010aac <netconn_recv_data>
 8010e9c:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	3718      	adds	r7, #24
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}
 8010ea6:	bf00      	nop
 8010ea8:	08023ac8 	.word	0x08023ac8
 8010eac:	08023ce0 	.word	0x08023ce0
 8010eb0:	08023b20 	.word	0x08023b20
 8010eb4:	08023d00 	.word	0x08023d00
 8010eb8:	08023d78 	.word	0x08023d78

08010ebc <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b088      	sub	sp, #32
 8010ec0:	af02      	add	r7, sp, #8
 8010ec2:	60f8      	str	r0, [r7, #12]
 8010ec4:	60b9      	str	r1, [r7, #8]
 8010ec6:	607a      	str	r2, [r7, #4]
 8010ec8:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8010eca:	68bb      	ldr	r3, [r7, #8]
 8010ecc:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8010ed2:	78fa      	ldrb	r2, [r7, #3]
 8010ed4:	f107 0110 	add.w	r1, r7, #16
 8010ed8:	6a3b      	ldr	r3, [r7, #32]
 8010eda:	9300      	str	r3, [sp, #0]
 8010edc:	4613      	mov	r3, r2
 8010ede:	2201      	movs	r2, #1
 8010ee0:	68f8      	ldr	r0, [r7, #12]
 8010ee2:	f000 f805 	bl	8010ef0 <netconn_write_vectors_partly>
 8010ee6:	4603      	mov	r3, r0
}
 8010ee8:	4618      	mov	r0, r3
 8010eea:	3718      	adds	r7, #24
 8010eec:	46bd      	mov	sp, r7
 8010eee:	bd80      	pop	{r7, pc}

08010ef0 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b092      	sub	sp, #72	; 0x48
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	60f8      	str	r0, [r7, #12]
 8010ef8:	60b9      	str	r1, [r7, #8]
 8010efa:	4611      	mov	r1, r2
 8010efc:	461a      	mov	r2, r3
 8010efe:	460b      	mov	r3, r1
 8010f00:	80fb      	strh	r3, [r7, #6]
 8010f02:	4613      	mov	r3, r2
 8010f04:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d109      	bne.n	8010f20 <netconn_write_vectors_partly+0x30>
 8010f0c:	4b4e      	ldr	r3, [pc, #312]	; (8011048 <netconn_write_vectors_partly+0x158>)
 8010f0e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8010f12:	494e      	ldr	r1, [pc, #312]	; (801104c <netconn_write_vectors_partly+0x15c>)
 8010f14:	484e      	ldr	r0, [pc, #312]	; (8011050 <netconn_write_vectors_partly+0x160>)
 8010f16:	f010 fbff 	bl	8021718 <iprintf>
 8010f1a:	f06f 030f 	mvn.w	r3, #15
 8010f1e:	e08f      	b.n	8011040 <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	781b      	ldrb	r3, [r3, #0]
 8010f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010f28:	2b10      	cmp	r3, #16
 8010f2a:	d009      	beq.n	8010f40 <netconn_write_vectors_partly+0x50>
 8010f2c:	4b46      	ldr	r3, [pc, #280]	; (8011048 <netconn_write_vectors_partly+0x158>)
 8010f2e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8010f32:	4948      	ldr	r1, [pc, #288]	; (8011054 <netconn_write_vectors_partly+0x164>)
 8010f34:	4846      	ldr	r0, [pc, #280]	; (8011050 <netconn_write_vectors_partly+0x160>)
 8010f36:	f010 fbef 	bl	8021718 <iprintf>
 8010f3a:	f06f 0305 	mvn.w	r3, #5
 8010f3e:	e07f      	b.n	8011040 <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010f46:	f003 0302 	and.w	r3, r3, #2
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d104      	bne.n	8010f58 <netconn_write_vectors_partly+0x68>
 8010f4e:	797b      	ldrb	r3, [r7, #5]
 8010f50:	f003 0304 	and.w	r3, r3, #4
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d001      	beq.n	8010f5c <netconn_write_vectors_partly+0x6c>
 8010f58:	2301      	movs	r3, #1
 8010f5a:	e000      	b.n	8010f5e <netconn_write_vectors_partly+0x6e>
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8010f62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d005      	beq.n	8010f76 <netconn_write_vectors_partly+0x86>
 8010f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d102      	bne.n	8010f76 <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8010f70:	f06f 0305 	mvn.w	r3, #5
 8010f74:	e064      	b.n	8011040 <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 8010f76:	2300      	movs	r3, #0
 8010f78:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	643b      	str	r3, [r7, #64]	; 0x40
 8010f7e:	e015      	b.n	8010fac <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 8010f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f82:	00db      	lsls	r3, r3, #3
 8010f84:	68ba      	ldr	r2, [r7, #8]
 8010f86:	4413      	add	r3, r2
 8010f88:	685b      	ldr	r3, [r3, #4]
 8010f8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f8c:	4413      	add	r3, r2
 8010f8e:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8010f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f92:	00db      	lsls	r3, r3, #3
 8010f94:	68ba      	ldr	r2, [r7, #8]
 8010f96:	4413      	add	r3, r2
 8010f98:	685b      	ldr	r3, [r3, #4]
 8010f9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	d202      	bcs.n	8010fa6 <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 8010fa0:	f06f 0305 	mvn.w	r3, #5
 8010fa4:	e04c      	b.n	8011040 <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 8010fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fa8:	3301      	adds	r3, #1
 8010faa:	643b      	str	r3, [r7, #64]	; 0x40
 8010fac:	88fb      	ldrh	r3, [r7, #6]
 8010fae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010fb0:	429a      	cmp	r2, r3
 8010fb2:	dbe5      	blt.n	8010f80 <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 8010fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d101      	bne.n	8010fbe <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	e040      	b.n	8011040 <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 8010fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	da0a      	bge.n	8010fda <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8010fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d102      	bne.n	8010fd0 <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 8010fca:	f06f 0305 	mvn.w	r3, #5
 8010fce:	e037      	b.n	8011040 <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8010fd0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010fd4:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8010fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fd8:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8010fde:	68bb      	ldr	r3, [r7, #8]
 8010fe0:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8010fe2:	88fb      	ldrh	r3, [r7, #6]
 8010fe4:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8010fea:	797b      	ldrb	r3, [r7, #5]
 8010fec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8010ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8010ff8:	f107 0314 	add.w	r3, r7, #20
 8010ffc:	4619      	mov	r1, r3
 8010ffe:	4816      	ldr	r0, [pc, #88]	; (8011058 <netconn_write_vectors_partly+0x168>)
 8011000:	f7ff fb82 	bl	8010708 <netconn_apimsg>
 8011004:	4603      	mov	r3, r0
 8011006:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 801100a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 801100e:	2b00      	cmp	r3, #0
 8011010:	d114      	bne.n	801103c <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 8011012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011014:	2b00      	cmp	r3, #0
 8011016:	d002      	beq.n	801101e <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8011018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801101a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801101c:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 801101e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011022:	2b00      	cmp	r3, #0
 8011024:	d10a      	bne.n	801103c <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8011026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011028:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801102a:	429a      	cmp	r2, r3
 801102c:	d006      	beq.n	801103c <netconn_write_vectors_partly+0x14c>
 801102e:	4b06      	ldr	r3, [pc, #24]	; (8011048 <netconn_write_vectors_partly+0x158>)
 8011030:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011034:	4909      	ldr	r1, [pc, #36]	; (801105c <netconn_write_vectors_partly+0x16c>)
 8011036:	4806      	ldr	r0, [pc, #24]	; (8011050 <netconn_write_vectors_partly+0x160>)
 8011038:	f010 fb6e 	bl	8021718 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 801103c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8011040:	4618      	mov	r0, r3
 8011042:	3748      	adds	r7, #72	; 0x48
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}
 8011048:	08023ac8 	.word	0x08023ac8
 801104c:	08023da0 	.word	0x08023da0
 8011050:	08023b20 	.word	0x08023b20
 8011054:	08023dbc 	.word	0x08023dbc
 8011058:	080126b5 	.word	0x080126b5
 801105c:	08023de0 	.word	0x08023de0

08011060 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b08c      	sub	sp, #48	; 0x30
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
 8011068:	460b      	mov	r3, r1
 801106a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d109      	bne.n	8011086 <netconn_close_shutdown+0x26>
 8011072:	4b0f      	ldr	r3, [pc, #60]	; (80110b0 <netconn_close_shutdown+0x50>)
 8011074:	f240 4247 	movw	r2, #1095	; 0x447
 8011078:	490e      	ldr	r1, [pc, #56]	; (80110b4 <netconn_close_shutdown+0x54>)
 801107a:	480f      	ldr	r0, [pc, #60]	; (80110b8 <netconn_close_shutdown+0x58>)
 801107c:	f010 fb4c 	bl	8021718 <iprintf>
 8011080:	f06f 030f 	mvn.w	r3, #15
 8011084:	e010      	b.n	80110a8 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 801108a:	78fb      	ldrb	r3, [r7, #3]
 801108c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801108e:	2329      	movs	r3, #41	; 0x29
 8011090:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8011092:	f107 030c 	add.w	r3, r7, #12
 8011096:	4619      	mov	r1, r3
 8011098:	4808      	ldr	r0, [pc, #32]	; (80110bc <netconn_close_shutdown+0x5c>)
 801109a:	f7ff fb35 	bl	8010708 <netconn_apimsg>
 801109e:	4603      	mov	r3, r0
 80110a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80110a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3730      	adds	r7, #48	; 0x30
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}
 80110b0:	08023ac8 	.word	0x08023ac8
 80110b4:	08023e04 	.word	0x08023e04
 80110b8:	08023b20 	.word	0x08023b20
 80110bc:	080127cd 	.word	0x080127cd

080110c0 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b082      	sub	sp, #8
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80110c8:	2103      	movs	r1, #3
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f7ff ffc8 	bl	8011060 <netconn_close_shutdown>
 80110d0:	4603      	mov	r3, r0
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3708      	adds	r7, #8
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}

080110da <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80110da:	b580      	push	{r7, lr}
 80110dc:	b084      	sub	sp, #16
 80110de:	af00      	add	r7, sp, #0
 80110e0:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d101      	bne.n	80110ec <netconn_err+0x12>
    return ERR_OK;
 80110e8:	2300      	movs	r3, #0
 80110ea:	e00d      	b.n	8011108 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80110ec:	f00e ff76 	bl	801ffdc <sys_arch_protect>
 80110f0:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	7a1b      	ldrb	r3, [r3, #8]
 80110f6:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2200      	movs	r2, #0
 80110fc:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80110fe:	68f8      	ldr	r0, [r7, #12]
 8011100:	f00e ff7a 	bl	801fff8 <sys_arch_unprotect>
  return err;
 8011104:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011108:	4618      	mov	r0, r3
 801110a:	3710      	adds	r7, #16
 801110c:	46bd      	mov	sp, r7
 801110e:	bd80      	pop	{r7, pc}

08011110 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b082      	sub	sp, #8
 8011114:	af00      	add	r7, sp, #0
 8011116:	4603      	mov	r3, r0
 8011118:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 801111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801111e:	f113 0f0d 	cmn.w	r3, #13
 8011122:	d009      	beq.n	8011138 <lwip_netconn_err_to_msg+0x28>
 8011124:	f113 0f0d 	cmn.w	r3, #13
 8011128:	dc0c      	bgt.n	8011144 <lwip_netconn_err_to_msg+0x34>
 801112a:	f113 0f0f 	cmn.w	r3, #15
 801112e:	d007      	beq.n	8011140 <lwip_netconn_err_to_msg+0x30>
 8011130:	f113 0f0e 	cmn.w	r3, #14
 8011134:	d002      	beq.n	801113c <lwip_netconn_err_to_msg+0x2c>
 8011136:	e005      	b.n	8011144 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8011138:	4b0a      	ldr	r3, [pc, #40]	; (8011164 <lwip_netconn_err_to_msg+0x54>)
 801113a:	e00e      	b.n	801115a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 801113c:	4b0a      	ldr	r3, [pc, #40]	; (8011168 <lwip_netconn_err_to_msg+0x58>)
 801113e:	e00c      	b.n	801115a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8011140:	4b0a      	ldr	r3, [pc, #40]	; (801116c <lwip_netconn_err_to_msg+0x5c>)
 8011142:	e00a      	b.n	801115a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8011144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d005      	beq.n	8011158 <lwip_netconn_err_to_msg+0x48>
 801114c:	4b08      	ldr	r3, [pc, #32]	; (8011170 <lwip_netconn_err_to_msg+0x60>)
 801114e:	227d      	movs	r2, #125	; 0x7d
 8011150:	4908      	ldr	r1, [pc, #32]	; (8011174 <lwip_netconn_err_to_msg+0x64>)
 8011152:	4809      	ldr	r0, [pc, #36]	; (8011178 <lwip_netconn_err_to_msg+0x68>)
 8011154:	f010 fae0 	bl	8021718 <iprintf>
      return NULL;
 8011158:	2300      	movs	r3, #0
  }
}
 801115a:	4618      	mov	r0, r3
 801115c:	3708      	adds	r7, #8
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}
 8011162:	bf00      	nop
 8011164:	080272dc 	.word	0x080272dc
 8011168:	080272dd 	.word	0x080272dd
 801116c:	080272de 	.word	0x080272de
 8011170:	08023e20 	.word	0x08023e20
 8011174:	08023e54 	.word	0x08023e54
 8011178:	08023e64 	.word	0x08023e64

0801117c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d105      	bne.n	8011198 <lwip_netconn_is_err_msg+0x1c>
 801118c:	4b12      	ldr	r3, [pc, #72]	; (80111d8 <lwip_netconn_is_err_msg+0x5c>)
 801118e:	2285      	movs	r2, #133	; 0x85
 8011190:	4912      	ldr	r1, [pc, #72]	; (80111dc <lwip_netconn_is_err_msg+0x60>)
 8011192:	4813      	ldr	r0, [pc, #76]	; (80111e0 <lwip_netconn_is_err_msg+0x64>)
 8011194:	f010 fac0 	bl	8021718 <iprintf>

  if (msg == &netconn_aborted) {
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	4a12      	ldr	r2, [pc, #72]	; (80111e4 <lwip_netconn_is_err_msg+0x68>)
 801119c:	4293      	cmp	r3, r2
 801119e:	d104      	bne.n	80111aa <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80111a0:	683b      	ldr	r3, [r7, #0]
 80111a2:	22f3      	movs	r2, #243	; 0xf3
 80111a4:	701a      	strb	r2, [r3, #0]
    return 1;
 80111a6:	2301      	movs	r3, #1
 80111a8:	e012      	b.n	80111d0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	4a0e      	ldr	r2, [pc, #56]	; (80111e8 <lwip_netconn_is_err_msg+0x6c>)
 80111ae:	4293      	cmp	r3, r2
 80111b0:	d104      	bne.n	80111bc <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	22f2      	movs	r2, #242	; 0xf2
 80111b6:	701a      	strb	r2, [r3, #0]
    return 1;
 80111b8:	2301      	movs	r3, #1
 80111ba:	e009      	b.n	80111d0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	4a0b      	ldr	r2, [pc, #44]	; (80111ec <lwip_netconn_is_err_msg+0x70>)
 80111c0:	4293      	cmp	r3, r2
 80111c2:	d104      	bne.n	80111ce <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	22f1      	movs	r2, #241	; 0xf1
 80111c8:	701a      	strb	r2, [r3, #0]
    return 1;
 80111ca:	2301      	movs	r3, #1
 80111cc:	e000      	b.n	80111d0 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80111ce:	2300      	movs	r3, #0
}
 80111d0:	4618      	mov	r0, r3
 80111d2:	3708      	adds	r7, #8
 80111d4:	46bd      	mov	sp, r7
 80111d6:	bd80      	pop	{r7, pc}
 80111d8:	08023e20 	.word	0x08023e20
 80111dc:	08023e8c 	.word	0x08023e8c
 80111e0:	08023e64 	.word	0x08023e64
 80111e4:	080272dc 	.word	0x080272dc
 80111e8:	080272dd 	.word	0x080272dd
 80111ec:	080272de 	.word	0x080272de

080111f0 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b088      	sub	sp, #32
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	60f8      	str	r0, [r7, #12]
 80111f8:	60b9      	str	r1, [r7, #8]
 80111fa:	607a      	str	r2, [r7, #4]
 80111fc:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d105      	bne.n	8011210 <recv_udp+0x20>
 8011204:	4b34      	ldr	r3, [pc, #208]	; (80112d8 <recv_udp+0xe8>)
 8011206:	22e5      	movs	r2, #229	; 0xe5
 8011208:	4934      	ldr	r1, [pc, #208]	; (80112dc <recv_udp+0xec>)
 801120a:	4835      	ldr	r0, [pc, #212]	; (80112e0 <recv_udp+0xf0>)
 801120c:	f010 fa84 	bl	8021718 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d105      	bne.n	8011222 <recv_udp+0x32>
 8011216:	4b30      	ldr	r3, [pc, #192]	; (80112d8 <recv_udp+0xe8>)
 8011218:	22e6      	movs	r2, #230	; 0xe6
 801121a:	4932      	ldr	r1, [pc, #200]	; (80112e4 <recv_udp+0xf4>)
 801121c:	4830      	ldr	r0, [pc, #192]	; (80112e0 <recv_udp+0xf0>)
 801121e:	f010 fa7b 	bl	8021718 <iprintf>
  conn = (struct netconn *)arg;
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8011226:	69fb      	ldr	r3, [r7, #28]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d103      	bne.n	8011234 <recv_udp+0x44>
    pbuf_free(p);
 801122c:	6878      	ldr	r0, [r7, #4]
 801122e:	f003 f92f 	bl	8014490 <pbuf_free>
    return;
 8011232:	e04d      	b.n	80112d0 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8011234:	69fb      	ldr	r3, [r7, #28]
 8011236:	685b      	ldr	r3, [r3, #4]
 8011238:	68ba      	ldr	r2, [r7, #8]
 801123a:	429a      	cmp	r2, r3
 801123c:	d005      	beq.n	801124a <recv_udp+0x5a>
 801123e:	4b26      	ldr	r3, [pc, #152]	; (80112d8 <recv_udp+0xe8>)
 8011240:	22ee      	movs	r2, #238	; 0xee
 8011242:	4929      	ldr	r1, [pc, #164]	; (80112e8 <recv_udp+0xf8>)
 8011244:	4826      	ldr	r0, [pc, #152]	; (80112e0 <recv_udp+0xf0>)
 8011246:	f010 fa67 	bl	8021718 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801124a:	69fb      	ldr	r3, [r7, #28]
 801124c:	3310      	adds	r3, #16
 801124e:	4618      	mov	r0, r3
 8011250:	f00e fda9 	bl	801fda6 <sys_mbox_valid>
 8011254:	4603      	mov	r3, r0
 8011256:	2b00      	cmp	r3, #0
 8011258:	d103      	bne.n	8011262 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 801125a:	6878      	ldr	r0, [r7, #4]
 801125c:	f003 f918 	bl	8014490 <pbuf_free>
    return;
 8011260:	e036      	b.n	80112d0 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8011262:	2006      	movs	r0, #6
 8011264:	f002 f9ee 	bl	8013644 <memp_malloc>
 8011268:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 801126a:	69bb      	ldr	r3, [r7, #24]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d103      	bne.n	8011278 <recv_udp+0x88>
    pbuf_free(p);
 8011270:	6878      	ldr	r0, [r7, #4]
 8011272:	f003 f90d 	bl	8014490 <pbuf_free>
    return;
 8011276:	e02b      	b.n	80112d0 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8011278:	69bb      	ldr	r3, [r7, #24]
 801127a:	687a      	ldr	r2, [r7, #4]
 801127c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 801127e:	69bb      	ldr	r3, [r7, #24]
 8011280:	687a      	ldr	r2, [r7, #4]
 8011282:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d002      	beq.n	8011290 <recv_udp+0xa0>
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	e000      	b.n	8011292 <recv_udp+0xa2>
 8011290:	2300      	movs	r3, #0
 8011292:	69ba      	ldr	r2, [r7, #24]
 8011294:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8011296:	69bb      	ldr	r3, [r7, #24]
 8011298:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801129a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	891b      	ldrh	r3, [r3, #8]
 80112a0:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80112a2:	69fb      	ldr	r3, [r7, #28]
 80112a4:	3310      	adds	r3, #16
 80112a6:	69b9      	ldr	r1, [r7, #24]
 80112a8:	4618      	mov	r0, r3
 80112aa:	f00e fd07 	bl	801fcbc <sys_mbox_trypost>
 80112ae:	4603      	mov	r3, r0
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d003      	beq.n	80112bc <recv_udp+0xcc>
    netbuf_delete(buf);
 80112b4:	69b8      	ldr	r0, [r7, #24]
 80112b6:	f001 fb15 	bl	80128e4 <netbuf_delete>
    return;
 80112ba:	e009      	b.n	80112d0 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80112bc:	69fb      	ldr	r3, [r7, #28]
 80112be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d005      	beq.n	80112d0 <recv_udp+0xe0>
 80112c4:	69fb      	ldr	r3, [r7, #28]
 80112c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112c8:	8afa      	ldrh	r2, [r7, #22]
 80112ca:	2100      	movs	r1, #0
 80112cc:	69f8      	ldr	r0, [r7, #28]
 80112ce:	4798      	blx	r3
  }
}
 80112d0:	3720      	adds	r7, #32
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}
 80112d6:	bf00      	nop
 80112d8:	08023e20 	.word	0x08023e20
 80112dc:	08023e98 	.word	0x08023e98
 80112e0:	08023e64 	.word	0x08023e64
 80112e4:	08023ebc 	.word	0x08023ebc
 80112e8:	08023edc 	.word	0x08023edc

080112ec <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b088      	sub	sp, #32
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	60f8      	str	r0, [r7, #12]
 80112f4:	60b9      	str	r1, [r7, #8]
 80112f6:	607a      	str	r2, [r7, #4]
 80112f8:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d106      	bne.n	801130e <recv_tcp+0x22>
 8011300:	4b36      	ldr	r3, [pc, #216]	; (80113dc <recv_tcp+0xf0>)
 8011302:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8011306:	4936      	ldr	r1, [pc, #216]	; (80113e0 <recv_tcp+0xf4>)
 8011308:	4836      	ldr	r0, [pc, #216]	; (80113e4 <recv_tcp+0xf8>)
 801130a:	f010 fa05 	bl	8021718 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d106      	bne.n	8011322 <recv_tcp+0x36>
 8011314:	4b31      	ldr	r3, [pc, #196]	; (80113dc <recv_tcp+0xf0>)
 8011316:	f240 122d 	movw	r2, #301	; 0x12d
 801131a:	4933      	ldr	r1, [pc, #204]	; (80113e8 <recv_tcp+0xfc>)
 801131c:	4831      	ldr	r0, [pc, #196]	; (80113e4 <recv_tcp+0xf8>)
 801131e:	f010 f9fb 	bl	8021718 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8011322:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d006      	beq.n	8011338 <recv_tcp+0x4c>
 801132a:	4b2c      	ldr	r3, [pc, #176]	; (80113dc <recv_tcp+0xf0>)
 801132c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8011330:	492e      	ldr	r1, [pc, #184]	; (80113ec <recv_tcp+0x100>)
 8011332:	482c      	ldr	r0, [pc, #176]	; (80113e4 <recv_tcp+0xf8>)
 8011334:	f010 f9f0 	bl	8021718 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 801133c:	697b      	ldr	r3, [r7, #20]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d102      	bne.n	8011348 <recv_tcp+0x5c>
    return ERR_VAL;
 8011342:	f06f 0305 	mvn.w	r3, #5
 8011346:	e045      	b.n	80113d4 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8011348:	697b      	ldr	r3, [r7, #20]
 801134a:	685b      	ldr	r3, [r3, #4]
 801134c:	68ba      	ldr	r2, [r7, #8]
 801134e:	429a      	cmp	r2, r3
 8011350:	d006      	beq.n	8011360 <recv_tcp+0x74>
 8011352:	4b22      	ldr	r3, [pc, #136]	; (80113dc <recv_tcp+0xf0>)
 8011354:	f240 1235 	movw	r2, #309	; 0x135
 8011358:	4925      	ldr	r1, [pc, #148]	; (80113f0 <recv_tcp+0x104>)
 801135a:	4822      	ldr	r0, [pc, #136]	; (80113e4 <recv_tcp+0xf8>)
 801135c:	f010 f9dc 	bl	8021718 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011360:	697b      	ldr	r3, [r7, #20]
 8011362:	3310      	adds	r3, #16
 8011364:	4618      	mov	r0, r3
 8011366:	f00e fd1e 	bl	801fda6 <sys_mbox_valid>
 801136a:	4603      	mov	r3, r0
 801136c:	2b00      	cmp	r3, #0
 801136e:	d10d      	bne.n	801138c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d008      	beq.n	8011388 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	891b      	ldrh	r3, [r3, #8]
 801137a:	4619      	mov	r1, r3
 801137c:	68b8      	ldr	r0, [r7, #8]
 801137e:	f004 f883 	bl	8015488 <tcp_recved>
      pbuf_free(p);
 8011382:	6878      	ldr	r0, [r7, #4]
 8011384:	f003 f884 	bl	8014490 <pbuf_free>
    }
    return ERR_OK;
 8011388:	2300      	movs	r3, #0
 801138a:	e023      	b.n	80113d4 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d005      	beq.n	801139e <recv_tcp+0xb2>
    msg = p;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	891b      	ldrh	r3, [r3, #8]
 801139a:	83fb      	strh	r3, [r7, #30]
 801139c:	e003      	b.n	80113a6 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 801139e:	4b15      	ldr	r3, [pc, #84]	; (80113f4 <recv_tcp+0x108>)
 80113a0:	61bb      	str	r3, [r7, #24]
    len = 0;
 80113a2:	2300      	movs	r3, #0
 80113a4:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80113a6:	697b      	ldr	r3, [r7, #20]
 80113a8:	3310      	adds	r3, #16
 80113aa:	69b9      	ldr	r1, [r7, #24]
 80113ac:	4618      	mov	r0, r3
 80113ae:	f00e fc85 	bl	801fcbc <sys_mbox_trypost>
 80113b2:	4603      	mov	r3, r0
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d002      	beq.n	80113be <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80113b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113bc:	e00a      	b.n	80113d4 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d005      	beq.n	80113d2 <recv_tcp+0xe6>
 80113c6:	697b      	ldr	r3, [r7, #20]
 80113c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113ca:	8bfa      	ldrh	r2, [r7, #30]
 80113cc:	2100      	movs	r1, #0
 80113ce:	6978      	ldr	r0, [r7, #20]
 80113d0:	4798      	blx	r3
  }

  return ERR_OK;
 80113d2:	2300      	movs	r3, #0
}
 80113d4:	4618      	mov	r0, r3
 80113d6:	3720      	adds	r7, #32
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}
 80113dc:	08023e20 	.word	0x08023e20
 80113e0:	08023efc 	.word	0x08023efc
 80113e4:	08023e64 	.word	0x08023e64
 80113e8:	08023f20 	.word	0x08023f20
 80113ec:	08023f40 	.word	0x08023f40
 80113f0:	08023f58 	.word	0x08023f58
 80113f4:	080272de 	.word	0x080272de

080113f8 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b084      	sub	sp, #16
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
 8011400:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d106      	bne.n	801141a <poll_tcp+0x22>
 801140c:	4b2b      	ldr	r3, [pc, #172]	; (80114bc <poll_tcp+0xc4>)
 801140e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8011412:	492b      	ldr	r1, [pc, #172]	; (80114c0 <poll_tcp+0xc8>)
 8011414:	482b      	ldr	r0, [pc, #172]	; (80114c4 <poll_tcp+0xcc>)
 8011416:	f010 f97f 	bl	8021718 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	785b      	ldrb	r3, [r3, #1]
 801141e:	2b01      	cmp	r3, #1
 8011420:	d104      	bne.n	801142c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8011422:	2101      	movs	r1, #1
 8011424:	68f8      	ldr	r0, [r7, #12]
 8011426:	f000 ff75 	bl	8012314 <lwip_netconn_do_writemore>
 801142a:	e016      	b.n	801145a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	785b      	ldrb	r3, [r3, #1]
 8011430:	2b04      	cmp	r3, #4
 8011432:	d112      	bne.n	801145a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011438:	2b00      	cmp	r3, #0
 801143a:	d00a      	beq.n	8011452 <poll_tcp+0x5a>
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011440:	7a5b      	ldrb	r3, [r3, #9]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d005      	beq.n	8011452 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801144a:	7a5a      	ldrb	r2, [r3, #9]
 801144c:	3a01      	subs	r2, #1
 801144e:	b2d2      	uxtb	r2, r2
 8011450:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8011452:	2101      	movs	r1, #1
 8011454:	68f8      	ldr	r0, [r7, #12]
 8011456:	f000 fc05 	bl	8011c64 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011460:	f003 0310 	and.w	r3, r3, #16
 8011464:	2b00      	cmp	r3, #0
 8011466:	d023      	beq.n	80114b0 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	685b      	ldr	r3, [r3, #4]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d01f      	beq.n	80114b0 <poll_tcp+0xb8>
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	685b      	ldr	r3, [r3, #4]
 8011474:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011478:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 801147c:	d318      	bcc.n	80114b0 <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	685b      	ldr	r3, [r3, #4]
 8011482:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011486:	2b04      	cmp	r3, #4
 8011488:	d812      	bhi.n	80114b0 <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011490:	f023 0310 	bic.w	r3, r3, #16
 8011494:	b2da      	uxtb	r2, r3
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d005      	beq.n	80114b0 <poll_tcp+0xb8>
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114a8:	2200      	movs	r2, #0
 80114aa:	2102      	movs	r1, #2
 80114ac:	68f8      	ldr	r0, [r7, #12]
 80114ae:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80114b0:	2300      	movs	r3, #0
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3710      	adds	r7, #16
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}
 80114ba:	bf00      	nop
 80114bc:	08023e20 	.word	0x08023e20
 80114c0:	08023f78 	.word	0x08023f78
 80114c4:	08023e64 	.word	0x08023e64

080114c8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b086      	sub	sp, #24
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	60f8      	str	r0, [r7, #12]
 80114d0:	60b9      	str	r1, [r7, #8]
 80114d2:	4613      	mov	r3, r2
 80114d4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80114da:	697b      	ldr	r3, [r7, #20]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d106      	bne.n	80114ee <sent_tcp+0x26>
 80114e0:	4b21      	ldr	r3, [pc, #132]	; (8011568 <sent_tcp+0xa0>)
 80114e2:	f240 1293 	movw	r2, #403	; 0x193
 80114e6:	4921      	ldr	r1, [pc, #132]	; (801156c <sent_tcp+0xa4>)
 80114e8:	4821      	ldr	r0, [pc, #132]	; (8011570 <sent_tcp+0xa8>)
 80114ea:	f010 f915 	bl	8021718 <iprintf>

  if (conn) {
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d034      	beq.n	801155e <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 80114f4:	697b      	ldr	r3, [r7, #20]
 80114f6:	785b      	ldrb	r3, [r3, #1]
 80114f8:	2b01      	cmp	r3, #1
 80114fa:	d104      	bne.n	8011506 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80114fc:	2101      	movs	r1, #1
 80114fe:	6978      	ldr	r0, [r7, #20]
 8011500:	f000 ff08 	bl	8012314 <lwip_netconn_do_writemore>
 8011504:	e007      	b.n	8011516 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8011506:	697b      	ldr	r3, [r7, #20]
 8011508:	785b      	ldrb	r3, [r3, #1]
 801150a:	2b04      	cmp	r3, #4
 801150c:	d103      	bne.n	8011516 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801150e:	2101      	movs	r1, #1
 8011510:	6978      	ldr	r0, [r7, #20]
 8011512:	f000 fba7 	bl	8011c64 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011516:	697b      	ldr	r3, [r7, #20]
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d01f      	beq.n	801155e <sent_tcp+0x96>
 801151e:	697b      	ldr	r3, [r7, #20]
 8011520:	685b      	ldr	r3, [r3, #4]
 8011522:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011526:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 801152a:	d318      	bcc.n	801155e <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 801152c:	697b      	ldr	r3, [r7, #20]
 801152e:	685b      	ldr	r3, [r3, #4]
 8011530:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011534:	2b04      	cmp	r3, #4
 8011536:	d812      	bhi.n	801155e <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801153e:	f023 0310 	bic.w	r3, r3, #16
 8011542:	b2da      	uxtb	r2, r3
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 801154a:	697b      	ldr	r3, [r7, #20]
 801154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801154e:	2b00      	cmp	r3, #0
 8011550:	d005      	beq.n	801155e <sent_tcp+0x96>
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011556:	88fa      	ldrh	r2, [r7, #6]
 8011558:	2102      	movs	r1, #2
 801155a:	6978      	ldr	r0, [r7, #20]
 801155c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801155e:	2300      	movs	r3, #0
}
 8011560:	4618      	mov	r0, r3
 8011562:	3718      	adds	r7, #24
 8011564:	46bd      	mov	sp, r7
 8011566:	bd80      	pop	{r7, pc}
 8011568:	08023e20 	.word	0x08023e20
 801156c:	08023f78 	.word	0x08023f78
 8011570:	08023e64 	.word	0x08023e64

08011574 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b088      	sub	sp, #32
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
 801157c:	460b      	mov	r3, r1
 801157e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011584:	69fb      	ldr	r3, [r7, #28]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d106      	bne.n	8011598 <err_tcp+0x24>
 801158a:	4b61      	ldr	r3, [pc, #388]	; (8011710 <err_tcp+0x19c>)
 801158c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8011590:	4960      	ldr	r1, [pc, #384]	; (8011714 <err_tcp+0x1a0>)
 8011592:	4861      	ldr	r0, [pc, #388]	; (8011718 <err_tcp+0x1a4>)
 8011594:	f010 f8c0 	bl	8021718 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8011598:	f00e fd20 	bl	801ffdc <sys_arch_protect>
 801159c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 801159e:	69fb      	ldr	r3, [r7, #28]
 80115a0:	2200      	movs	r2, #0
 80115a2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80115a4:	69fb      	ldr	r3, [r7, #28]
 80115a6:	78fa      	ldrb	r2, [r7, #3]
 80115a8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80115aa:	69fb      	ldr	r3, [r7, #28]
 80115ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80115b0:	f043 0301 	orr.w	r3, r3, #1
 80115b4:	b2da      	uxtb	r2, r3
 80115b6:	69fb      	ldr	r3, [r7, #28]
 80115b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80115bc:	69fb      	ldr	r3, [r7, #28]
 80115be:	785b      	ldrb	r3, [r3, #1]
 80115c0:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80115c2:	69fb      	ldr	r3, [r7, #28]
 80115c4:	2200      	movs	r2, #0
 80115c6:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80115c8:	69b8      	ldr	r0, [r7, #24]
 80115ca:	f00e fd15 	bl	801fff8 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80115ce:	69fb      	ldr	r3, [r7, #28]
 80115d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d005      	beq.n	80115e2 <err_tcp+0x6e>
 80115d6:	69fb      	ldr	r3, [r7, #28]
 80115d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115da:	2200      	movs	r2, #0
 80115dc:	2104      	movs	r1, #4
 80115de:	69f8      	ldr	r0, [r7, #28]
 80115e0:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80115e2:	69fb      	ldr	r3, [r7, #28]
 80115e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d005      	beq.n	80115f6 <err_tcp+0x82>
 80115ea:	69fb      	ldr	r3, [r7, #28]
 80115ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115ee:	2200      	movs	r2, #0
 80115f0:	2100      	movs	r1, #0
 80115f2:	69f8      	ldr	r0, [r7, #28]
 80115f4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80115f6:	69fb      	ldr	r3, [r7, #28]
 80115f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d005      	beq.n	801160a <err_tcp+0x96>
 80115fe:	69fb      	ldr	r3, [r7, #28]
 8011600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011602:	2200      	movs	r2, #0
 8011604:	2102      	movs	r1, #2
 8011606:	69f8      	ldr	r0, [r7, #28]
 8011608:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 801160a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801160e:	4618      	mov	r0, r3
 8011610:	f7ff fd7e 	bl	8011110 <lwip_netconn_err_to_msg>
 8011614:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011616:	69fb      	ldr	r3, [r7, #28]
 8011618:	3310      	adds	r3, #16
 801161a:	4618      	mov	r0, r3
 801161c:	f00e fbc3 	bl	801fda6 <sys_mbox_valid>
 8011620:	4603      	mov	r3, r0
 8011622:	2b00      	cmp	r3, #0
 8011624:	d005      	beq.n	8011632 <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8011626:	69fb      	ldr	r3, [r7, #28]
 8011628:	3310      	adds	r3, #16
 801162a:	6939      	ldr	r1, [r7, #16]
 801162c:	4618      	mov	r0, r3
 801162e:	f00e fb45 	bl	801fcbc <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8011632:	69fb      	ldr	r3, [r7, #28]
 8011634:	3314      	adds	r3, #20
 8011636:	4618      	mov	r0, r3
 8011638:	f00e fbb5 	bl	801fda6 <sys_mbox_valid>
 801163c:	4603      	mov	r3, r0
 801163e:	2b00      	cmp	r3, #0
 8011640:	d005      	beq.n	801164e <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8011642:	69fb      	ldr	r3, [r7, #28]
 8011644:	3314      	adds	r3, #20
 8011646:	6939      	ldr	r1, [r7, #16]
 8011648:	4618      	mov	r0, r3
 801164a:	f00e fb37 	bl	801fcbc <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 801164e:	7dfb      	ldrb	r3, [r7, #23]
 8011650:	2b01      	cmp	r3, #1
 8011652:	d005      	beq.n	8011660 <err_tcp+0xec>
 8011654:	7dfb      	ldrb	r3, [r7, #23]
 8011656:	2b04      	cmp	r3, #4
 8011658:	d002      	beq.n	8011660 <err_tcp+0xec>
 801165a:	7dfb      	ldrb	r3, [r7, #23]
 801165c:	2b03      	cmp	r3, #3
 801165e:	d146      	bne.n	80116ee <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8011660:	69fb      	ldr	r3, [r7, #28]
 8011662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011666:	f003 0304 	and.w	r3, r3, #4
 801166a:	2b00      	cmp	r3, #0
 801166c:	bf14      	ite	ne
 801166e:	2301      	movne	r3, #1
 8011670:	2300      	moveq	r3, #0
 8011672:	b2db      	uxtb	r3, r3
 8011674:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8011676:	69fb      	ldr	r3, [r7, #28]
 8011678:	f893 3020 	ldrb.w	r3, [r3, #32]
 801167c:	f023 0304 	bic.w	r3, r3, #4
 8011680:	b2da      	uxtb	r2, r3
 8011682:	69fb      	ldr	r3, [r7, #28]
 8011684:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d13b      	bne.n	8011706 <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801168e:	69fb      	ldr	r3, [r7, #28]
 8011690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011692:	2b00      	cmp	r3, #0
 8011694:	d106      	bne.n	80116a4 <err_tcp+0x130>
 8011696:	4b1e      	ldr	r3, [pc, #120]	; (8011710 <err_tcp+0x19c>)
 8011698:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801169c:	491f      	ldr	r1, [pc, #124]	; (801171c <err_tcp+0x1a8>)
 801169e:	481e      	ldr	r0, [pc, #120]	; (8011718 <err_tcp+0x1a4>)
 80116a0:	f010 f83a 	bl	8021718 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80116a4:	7dfb      	ldrb	r3, [r7, #23]
 80116a6:	2b04      	cmp	r3, #4
 80116a8:	d104      	bne.n	80116b4 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80116aa:	69fb      	ldr	r3, [r7, #28]
 80116ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116ae:	2200      	movs	r2, #0
 80116b0:	711a      	strb	r2, [r3, #4]
 80116b2:	e003      	b.n	80116bc <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80116b4:	69fb      	ldr	r3, [r7, #28]
 80116b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116b8:	78fa      	ldrb	r2, [r7, #3]
 80116ba:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80116bc:	69fb      	ldr	r3, [r7, #28]
 80116be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	330c      	adds	r3, #12
 80116c4:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80116c6:	68b8      	ldr	r0, [r7, #8]
 80116c8:	f00e fbfe 	bl	801fec8 <sys_sem_valid>
 80116cc:	4603      	mov	r3, r0
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d106      	bne.n	80116e0 <err_tcp+0x16c>
 80116d2:	4b0f      	ldr	r3, [pc, #60]	; (8011710 <err_tcp+0x19c>)
 80116d4:	f240 12ef 	movw	r2, #495	; 0x1ef
 80116d8:	4911      	ldr	r1, [pc, #68]	; (8011720 <err_tcp+0x1ac>)
 80116da:	480f      	ldr	r0, [pc, #60]	; (8011718 <err_tcp+0x1a4>)
 80116dc:	f010 f81c 	bl	8021718 <iprintf>
      conn->current_msg = NULL;
 80116e0:	69fb      	ldr	r3, [r7, #28]
 80116e2:	2200      	movs	r2, #0
 80116e4:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80116e6:	68b8      	ldr	r0, [r7, #8]
 80116e8:	f00e fbd4 	bl	801fe94 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80116ec:	e00b      	b.n	8011706 <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80116ee:	69fb      	ldr	r3, [r7, #28]
 80116f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d008      	beq.n	8011708 <err_tcp+0x194>
 80116f6:	4b06      	ldr	r3, [pc, #24]	; (8011710 <err_tcp+0x19c>)
 80116f8:	f240 12f7 	movw	r2, #503	; 0x1f7
 80116fc:	4909      	ldr	r1, [pc, #36]	; (8011724 <err_tcp+0x1b0>)
 80116fe:	4806      	ldr	r0, [pc, #24]	; (8011718 <err_tcp+0x1a4>)
 8011700:	f010 f80a 	bl	8021718 <iprintf>
  }
}
 8011704:	e000      	b.n	8011708 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 8011706:	bf00      	nop
}
 8011708:	bf00      	nop
 801170a:	3720      	adds	r7, #32
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}
 8011710:	08023e20 	.word	0x08023e20
 8011714:	08023f78 	.word	0x08023f78
 8011718:	08023e64 	.word	0x08023e64
 801171c:	08023f88 	.word	0x08023f88
 8011720:	08023fa4 	.word	0x08023fa4
 8011724:	08023fc0 	.word	0x08023fc0

08011728 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b084      	sub	sp, #16
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	685b      	ldr	r3, [r3, #4]
 8011734:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8011736:	6879      	ldr	r1, [r7, #4]
 8011738:	68f8      	ldr	r0, [r7, #12]
 801173a:	f004 fd77 	bl	801622c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 801173e:	490a      	ldr	r1, [pc, #40]	; (8011768 <setup_tcp+0x40>)
 8011740:	68f8      	ldr	r0, [r7, #12]
 8011742:	f004 fd85 	bl	8016250 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8011746:	4909      	ldr	r1, [pc, #36]	; (801176c <setup_tcp+0x44>)
 8011748:	68f8      	ldr	r0, [r7, #12]
 801174a:	f004 fda3 	bl	8016294 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 801174e:	2202      	movs	r2, #2
 8011750:	4907      	ldr	r1, [pc, #28]	; (8011770 <setup_tcp+0x48>)
 8011752:	68f8      	ldr	r0, [r7, #12]
 8011754:	f004 fdfa 	bl	801634c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8011758:	4906      	ldr	r1, [pc, #24]	; (8011774 <setup_tcp+0x4c>)
 801175a:	68f8      	ldr	r0, [r7, #12]
 801175c:	f004 fdbc 	bl	80162d8 <tcp_err>
}
 8011760:	bf00      	nop
 8011762:	3710      	adds	r7, #16
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}
 8011768:	080112ed 	.word	0x080112ed
 801176c:	080114c9 	.word	0x080114c9
 8011770:	080113f9 	.word	0x080113f9
 8011774:	08011575 	.word	0x08011575

08011778 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8011778:	b590      	push	{r4, r7, lr}
 801177a:	b089      	sub	sp, #36	; 0x24
 801177c:	af00      	add	r7, sp, #0
 801177e:	60f8      	str	r0, [r7, #12]
 8011780:	60b9      	str	r1, [r7, #8]
 8011782:	4613      	mov	r3, r2
 8011784:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 801178a:	69fb      	ldr	r3, [r7, #28]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d102      	bne.n	8011796 <accept_function+0x1e>
    return ERR_VAL;
 8011790:	f06f 0305 	mvn.w	r3, #5
 8011794:	e0a1      	b.n	80118da <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8011796:	69fb      	ldr	r3, [r7, #28]
 8011798:	3314      	adds	r3, #20
 801179a:	4618      	mov	r0, r3
 801179c:	f00e fb03 	bl	801fda6 <sys_mbox_valid>
 80117a0:	4603      	mov	r3, r0
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d102      	bne.n	80117ac <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 80117a6:	f06f 0305 	mvn.w	r3, #5
 80117aa:	e096      	b.n	80118da <accept_function+0x162>
  }

  if (newpcb == NULL) {
 80117ac:	68bb      	ldr	r3, [r7, #8]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d11b      	bne.n	80117ea <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80117b2:	69fb      	ldr	r3, [r7, #28]
 80117b4:	f103 0414 	add.w	r4, r3, #20
 80117b8:	f06f 000c 	mvn.w	r0, #12
 80117bc:	f7ff fca8 	bl	8011110 <lwip_netconn_err_to_msg>
 80117c0:	4603      	mov	r3, r0
 80117c2:	4619      	mov	r1, r3
 80117c4:	4620      	mov	r0, r4
 80117c6:	f00e fa79 	bl	801fcbc <sys_mbox_trypost>
 80117ca:	4603      	mov	r3, r0
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d109      	bne.n	80117e4 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80117d0:	69fb      	ldr	r3, [r7, #28]
 80117d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d005      	beq.n	80117e4 <accept_function+0x6c>
 80117d8:	69fb      	ldr	r3, [r7, #28]
 80117da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117dc:	2200      	movs	r2, #0
 80117de:	2100      	movs	r1, #0
 80117e0:	69f8      	ldr	r0, [r7, #28]
 80117e2:	4798      	blx	r3
    }
    return ERR_VAL;
 80117e4:	f06f 0305 	mvn.w	r3, #5
 80117e8:	e077      	b.n	80118da <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 80117ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d006      	beq.n	8011800 <accept_function+0x88>
 80117f2:	4b3c      	ldr	r3, [pc, #240]	; (80118e4 <accept_function+0x16c>)
 80117f4:	f240 222a 	movw	r2, #554	; 0x22a
 80117f8:	493b      	ldr	r1, [pc, #236]	; (80118e8 <accept_function+0x170>)
 80117fa:	483c      	ldr	r0, [pc, #240]	; (80118ec <accept_function+0x174>)
 80117fc:	f00f ff8c 	bl	8021718 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8011800:	69fb      	ldr	r3, [r7, #28]
 8011802:	781a      	ldrb	r2, [r3, #0]
 8011804:	69fb      	ldr	r3, [r7, #28]
 8011806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011808:	4619      	mov	r1, r3
 801180a:	4610      	mov	r0, r2
 801180c:	f000 f8f0 	bl	80119f0 <netconn_alloc>
 8011810:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8011812:	69bb      	ldr	r3, [r7, #24]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d11b      	bne.n	8011850 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8011818:	69fb      	ldr	r3, [r7, #28]
 801181a:	f103 0414 	add.w	r4, r3, #20
 801181e:	f06f 000c 	mvn.w	r0, #12
 8011822:	f7ff fc75 	bl	8011110 <lwip_netconn_err_to_msg>
 8011826:	4603      	mov	r3, r0
 8011828:	4619      	mov	r1, r3
 801182a:	4620      	mov	r0, r4
 801182c:	f00e fa46 	bl	801fcbc <sys_mbox_trypost>
 8011830:	4603      	mov	r3, r0
 8011832:	2b00      	cmp	r3, #0
 8011834:	d109      	bne.n	801184a <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011836:	69fb      	ldr	r3, [r7, #28]
 8011838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801183a:	2b00      	cmp	r3, #0
 801183c:	d005      	beq.n	801184a <accept_function+0xd2>
 801183e:	69fb      	ldr	r3, [r7, #28]
 8011840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011842:	2200      	movs	r2, #0
 8011844:	2100      	movs	r1, #0
 8011846:	69f8      	ldr	r0, [r7, #28]
 8011848:	4798      	blx	r3
    }
    return ERR_MEM;
 801184a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801184e:	e044      	b.n	80118da <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8011850:	69bb      	ldr	r3, [r7, #24]
 8011852:	68ba      	ldr	r2, [r7, #8]
 8011854:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8011856:	69b8      	ldr	r0, [r7, #24]
 8011858:	f7ff ff66 	bl	8011728 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 801185c:	69fb      	ldr	r3, [r7, #28]
 801185e:	3314      	adds	r3, #20
 8011860:	69b9      	ldr	r1, [r7, #24]
 8011862:	4618      	mov	r0, r3
 8011864:	f00e fa2a 	bl	801fcbc <sys_mbox_trypost>
 8011868:	4603      	mov	r3, r0
 801186a:	2b00      	cmp	r3, #0
 801186c:	d02a      	beq.n	80118c4 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 801186e:	69bb      	ldr	r3, [r7, #24]
 8011870:	685b      	ldr	r3, [r3, #4]
 8011872:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8011874:	2100      	movs	r1, #0
 8011876:	6978      	ldr	r0, [r7, #20]
 8011878:	f004 fcd8 	bl	801622c <tcp_arg>
    tcp_recv(pcb, NULL);
 801187c:	2100      	movs	r1, #0
 801187e:	6978      	ldr	r0, [r7, #20]
 8011880:	f004 fce6 	bl	8016250 <tcp_recv>
    tcp_sent(pcb, NULL);
 8011884:	2100      	movs	r1, #0
 8011886:	6978      	ldr	r0, [r7, #20]
 8011888:	f004 fd04 	bl	8016294 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 801188c:	2200      	movs	r2, #0
 801188e:	2100      	movs	r1, #0
 8011890:	6978      	ldr	r0, [r7, #20]
 8011892:	f004 fd5b 	bl	801634c <tcp_poll>
    tcp_err(pcb, NULL);
 8011896:	2100      	movs	r1, #0
 8011898:	6978      	ldr	r0, [r7, #20]
 801189a:	f004 fd1d 	bl	80162d8 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 801189e:	69bb      	ldr	r3, [r7, #24]
 80118a0:	2200      	movs	r2, #0
 80118a2:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 80118a4:	69bb      	ldr	r3, [r7, #24]
 80118a6:	3310      	adds	r3, #16
 80118a8:	4618      	mov	r0, r3
 80118aa:	f00e f9f5 	bl	801fc98 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80118ae:	69bb      	ldr	r3, [r7, #24]
 80118b0:	3310      	adds	r3, #16
 80118b2:	4618      	mov	r0, r3
 80118b4:	f00e fa88 	bl	801fdc8 <sys_mbox_set_invalid>
    netconn_free(newconn);
 80118b8:	69b8      	ldr	r0, [r7, #24]
 80118ba:	f000 f90b 	bl	8011ad4 <netconn_free>
    return ERR_MEM;
 80118be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118c2:	e00a      	b.n	80118da <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80118c4:	69fb      	ldr	r3, [r7, #28]
 80118c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d005      	beq.n	80118d8 <accept_function+0x160>
 80118cc:	69fb      	ldr	r3, [r7, #28]
 80118ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118d0:	2200      	movs	r2, #0
 80118d2:	2100      	movs	r1, #0
 80118d4:	69f8      	ldr	r0, [r7, #28]
 80118d6:	4798      	blx	r3
  }

  return ERR_OK;
 80118d8:	2300      	movs	r3, #0
}
 80118da:	4618      	mov	r0, r3
 80118dc:	3724      	adds	r7, #36	; 0x24
 80118de:	46bd      	mov	sp, r7
 80118e0:	bd90      	pop	{r4, r7, pc}
 80118e2:	bf00      	nop
 80118e4:	08023e20 	.word	0x08023e20
 80118e8:	08023fdc 	.word	0x08023fdc
 80118ec:	08023e64 	.word	0x08023e64

080118f0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80118f0:	b590      	push	{r4, r7, lr}
 80118f2:	b085      	sub	sp, #20
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80118f8:	2300      	movs	r3, #0
 80118fa:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	685b      	ldr	r3, [r3, #4]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d006      	beq.n	8011914 <pcb_new+0x24>
 8011906:	4b2b      	ldr	r3, [pc, #172]	; (80119b4 <pcb_new+0xc4>)
 8011908:	f240 2265 	movw	r2, #613	; 0x265
 801190c:	492a      	ldr	r1, [pc, #168]	; (80119b8 <pcb_new+0xc8>)
 801190e:	482b      	ldr	r0, [pc, #172]	; (80119bc <pcb_new+0xcc>)
 8011910:	f00f ff02 	bl	8021718 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	781b      	ldrb	r3, [r3, #0]
 801191a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801191e:	2b10      	cmp	r3, #16
 8011920:	d022      	beq.n	8011968 <pcb_new+0x78>
 8011922:	2b20      	cmp	r3, #32
 8011924:	d133      	bne.n	801198e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	681c      	ldr	r4, [r3, #0]
 801192a:	7bfb      	ldrb	r3, [r7, #15]
 801192c:	4618      	mov	r0, r3
 801192e:	f009 ff4a 	bl	801b7c6 <udp_new_ip_type>
 8011932:	4603      	mov	r3, r0
 8011934:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	685b      	ldr	r3, [r3, #4]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d02a      	beq.n	8011996 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	781b      	ldrb	r3, [r3, #0]
 8011946:	2b22      	cmp	r3, #34	; 0x22
 8011948:	d104      	bne.n	8011954 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	685b      	ldr	r3, [r3, #4]
 8011950:	2201      	movs	r2, #1
 8011952:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	6858      	ldr	r0, [r3, #4]
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	461a      	mov	r2, r3
 8011960:	4917      	ldr	r1, [pc, #92]	; (80119c0 <pcb_new+0xd0>)
 8011962:	f009 feb7 	bl	801b6d4 <udp_recv>
      }
      break;
 8011966:	e016      	b.n	8011996 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	681c      	ldr	r4, [r3, #0]
 801196c:	7bfb      	ldrb	r3, [r7, #15]
 801196e:	4618      	mov	r0, r3
 8011970:	f004 fc4e 	bl	8016210 <tcp_new_ip_type>
 8011974:	4603      	mov	r3, r0
 8011976:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	685b      	ldr	r3, [r3, #4]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d00b      	beq.n	801199a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	4618      	mov	r0, r3
 8011988:	f7ff fece 	bl	8011728 <setup_tcp>
      }
      break;
 801198c:	e005      	b.n	801199a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	22fa      	movs	r2, #250	; 0xfa
 8011992:	711a      	strb	r2, [r3, #4]
      return;
 8011994:	e00a      	b.n	80119ac <pcb_new+0xbc>
      break;
 8011996:	bf00      	nop
 8011998:	e000      	b.n	801199c <pcb_new+0xac>
      break;
 801199a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	685b      	ldr	r3, [r3, #4]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d102      	bne.n	80119ac <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	22ff      	movs	r2, #255	; 0xff
 80119aa:	711a      	strb	r2, [r3, #4]
  }
}
 80119ac:	3714      	adds	r7, #20
 80119ae:	46bd      	mov	sp, r7
 80119b0:	bd90      	pop	{r4, r7, pc}
 80119b2:	bf00      	nop
 80119b4:	08023e20 	.word	0x08023e20
 80119b8:	08024004 	.word	0x08024004
 80119bc:	08023e64 	.word	0x08023e64
 80119c0:	080111f1 	.word	0x080111f1

080119c4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b084      	sub	sp, #16
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	2200      	movs	r2, #0
 80119d4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	685b      	ldr	r3, [r3, #4]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d102      	bne.n	80119e6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80119e0:	68f8      	ldr	r0, [r7, #12]
 80119e2:	f7ff ff85 	bl	80118f0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80119e6:	bf00      	nop
 80119e8:	3710      	adds	r7, #16
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}
	...

080119f0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b086      	sub	sp, #24
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	4603      	mov	r3, r0
 80119f8:	6039      	str	r1, [r7, #0]
 80119fa:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80119fc:	2300      	movs	r3, #0
 80119fe:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8011a00:	2007      	movs	r0, #7
 8011a02:	f001 fe1f 	bl	8013644 <memp_malloc>
 8011a06:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d101      	bne.n	8011a12 <netconn_alloc+0x22>
    return NULL;
 8011a0e:	2300      	movs	r3, #0
 8011a10:	e056      	b.n	8011ac0 <netconn_alloc+0xd0>
  }

  conn->pending_err = ERR_OK;
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	2200      	movs	r2, #0
 8011a16:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	79fa      	ldrb	r2, [r7, #7]
 8011a1c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	2200      	movs	r2, #0
 8011a22:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8011a24:	79fb      	ldrb	r3, [r7, #7]
 8011a26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011a2a:	2b10      	cmp	r3, #16
 8011a2c:	d004      	beq.n	8011a38 <netconn_alloc+0x48>
 8011a2e:	2b20      	cmp	r3, #32
 8011a30:	d105      	bne.n	8011a3e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8011a32:	2306      	movs	r3, #6
 8011a34:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8011a36:	e00a      	b.n	8011a4e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8011a38:	2306      	movs	r3, #6
 8011a3a:	617b      	str	r3, [r7, #20]
      break;
 8011a3c:	e007      	b.n	8011a4e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8011a3e:	4b22      	ldr	r3, [pc, #136]	; (8011ac8 <netconn_alloc+0xd8>)
 8011a40:	f240 22e5 	movw	r2, #741	; 0x2e5
 8011a44:	4921      	ldr	r1, [pc, #132]	; (8011acc <netconn_alloc+0xdc>)
 8011a46:	4822      	ldr	r0, [pc, #136]	; (8011ad0 <netconn_alloc+0xe0>)
 8011a48:	f00f fe66 	bl	8021718 <iprintf>
      goto free_and_return;
 8011a4c:	e033      	b.n	8011ab6 <netconn_alloc+0xc6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	3310      	adds	r3, #16
 8011a52:	6979      	ldr	r1, [r7, #20]
 8011a54:	4618      	mov	r0, r3
 8011a56:	f00e f8fd 	bl	801fc54 <sys_mbox_new>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d129      	bne.n	8011ab4 <netconn_alloc+0xc4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	330c      	adds	r3, #12
 8011a64:	2100      	movs	r1, #0
 8011a66:	4618      	mov	r0, r3
 8011a68:	f00e f9bb 	bl	801fde2 <sys_sem_new>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d005      	beq.n	8011a7e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	3310      	adds	r3, #16
 8011a76:	4618      	mov	r0, r3
 8011a78:	f00e f90e 	bl	801fc98 <sys_mbox_free>
    goto free_and_return;
 8011a7c:	e01b      	b.n	8011ab6 <netconn_alloc+0xc6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	3314      	adds	r3, #20
 8011a82:	4618      	mov	r0, r3
 8011a84:	f00e f9a0 	bl	801fdc8 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a94:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	683a      	ldr	r2, [r7, #0]
 8011a9a:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	7cfa      	ldrb	r2, [r7, #19]
 8011aac:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	e005      	b.n	8011ac0 <netconn_alloc+0xd0>
    goto free_and_return;
 8011ab4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8011ab6:	68f9      	ldr	r1, [r7, #12]
 8011ab8:	2007      	movs	r0, #7
 8011aba:	f001 fe39 	bl	8013730 <memp_free>
  return NULL;
 8011abe:	2300      	movs	r3, #0
}
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	3718      	adds	r7, #24
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}
 8011ac8:	08023e20 	.word	0x08023e20
 8011acc:	08024024 	.word	0x08024024
 8011ad0:	08023e64 	.word	0x08023e64

08011ad4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b082      	sub	sp, #8
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	685b      	ldr	r3, [r3, #4]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d006      	beq.n	8011af2 <netconn_free+0x1e>
 8011ae4:	4b1b      	ldr	r3, [pc, #108]	; (8011b54 <netconn_free+0x80>)
 8011ae6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011aea:	491b      	ldr	r1, [pc, #108]	; (8011b58 <netconn_free+0x84>)
 8011aec:	481b      	ldr	r0, [pc, #108]	; (8011b5c <netconn_free+0x88>)
 8011aee:	f00f fe13 	bl	8021718 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	3310      	adds	r3, #16
 8011af6:	4618      	mov	r0, r3
 8011af8:	f00e f955 	bl	801fda6 <sys_mbox_valid>
 8011afc:	4603      	mov	r3, r0
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d006      	beq.n	8011b10 <netconn_free+0x3c>
 8011b02:	4b14      	ldr	r3, [pc, #80]	; (8011b54 <netconn_free+0x80>)
 8011b04:	f240 3223 	movw	r2, #803	; 0x323
 8011b08:	4915      	ldr	r1, [pc, #84]	; (8011b60 <netconn_free+0x8c>)
 8011b0a:	4814      	ldr	r0, [pc, #80]	; (8011b5c <netconn_free+0x88>)
 8011b0c:	f00f fe04 	bl	8021718 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	3314      	adds	r3, #20
 8011b14:	4618      	mov	r0, r3
 8011b16:	f00e f946 	bl	801fda6 <sys_mbox_valid>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d006      	beq.n	8011b2e <netconn_free+0x5a>
 8011b20:	4b0c      	ldr	r3, [pc, #48]	; (8011b54 <netconn_free+0x80>)
 8011b22:	f240 3226 	movw	r2, #806	; 0x326
 8011b26:	490f      	ldr	r1, [pc, #60]	; (8011b64 <netconn_free+0x90>)
 8011b28:	480c      	ldr	r0, [pc, #48]	; (8011b5c <netconn_free+0x88>)
 8011b2a:	f00f fdf5 	bl	8021718 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	330c      	adds	r3, #12
 8011b32:	4618      	mov	r0, r3
 8011b34:	f00e f9bb 	bl	801feae <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	330c      	adds	r3, #12
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f00e f9d4 	bl	801feea <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8011b42:	6879      	ldr	r1, [r7, #4]
 8011b44:	2007      	movs	r0, #7
 8011b46:	f001 fdf3 	bl	8013730 <memp_free>
}
 8011b4a:	bf00      	nop
 8011b4c:	3708      	adds	r7, #8
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}
 8011b52:	bf00      	nop
 8011b54:	08023e20 	.word	0x08023e20
 8011b58:	0802404c 	.word	0x0802404c
 8011b5c:	08023e64 	.word	0x08023e64
 8011b60:	0802407c 	.word	0x0802407c
 8011b64:	080240b8 	.word	0x080240b8

08011b68 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b086      	sub	sp, #24
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	3310      	adds	r3, #16
 8011b74:	4618      	mov	r0, r3
 8011b76:	f00e f916 	bl	801fda6 <sys_mbox_valid>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d02f      	beq.n	8011be0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011b80:	e018      	b.n	8011bb4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	781b      	ldrb	r3, [r3, #0]
 8011b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011b8a:	2b10      	cmp	r3, #16
 8011b8c:	d10e      	bne.n	8011bac <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8011b8e:	693b      	ldr	r3, [r7, #16]
 8011b90:	f107 020f 	add.w	r2, r7, #15
 8011b94:	4611      	mov	r1, r2
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7ff faf0 	bl	801117c <lwip_netconn_is_err_msg>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d108      	bne.n	8011bb4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8011ba2:	693b      	ldr	r3, [r7, #16]
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	f002 fc73 	bl	8014490 <pbuf_free>
 8011baa:	e003      	b.n	8011bb4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8011bac:	693b      	ldr	r3, [r7, #16]
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f000 fe98 	bl	80128e4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	3310      	adds	r3, #16
 8011bb8:	f107 0210 	add.w	r2, r7, #16
 8011bbc:	4611      	mov	r1, r2
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f00e f8d5 	bl	801fd6e <sys_arch_mbox_tryfetch>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011bca:	d1da      	bne.n	8011b82 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	3310      	adds	r3, #16
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	f00e f861 	bl	801fc98 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	3310      	adds	r3, #16
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f00e f8f4 	bl	801fdc8 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	3314      	adds	r3, #20
 8011be4:	4618      	mov	r0, r3
 8011be6:	f00e f8de 	bl	801fda6 <sys_mbox_valid>
 8011bea:	4603      	mov	r3, r0
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d034      	beq.n	8011c5a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011bf0:	e01d      	b.n	8011c2e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8011bf2:	693b      	ldr	r3, [r7, #16]
 8011bf4:	f107 020e 	add.w	r2, r7, #14
 8011bf8:	4611      	mov	r1, r2
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	f7ff fabe 	bl	801117c <lwip_netconn_is_err_msg>
 8011c00:	4603      	mov	r3, r0
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d113      	bne.n	8011c2e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8011c06:	693b      	ldr	r3, [r7, #16]
 8011c08:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8011c0a:	6978      	ldr	r0, [r7, #20]
 8011c0c:	f7ff ffac 	bl	8011b68 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8011c10:	697b      	ldr	r3, [r7, #20]
 8011c12:	685b      	ldr	r3, [r3, #4]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d007      	beq.n	8011c28 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8011c18:	697b      	ldr	r3, [r7, #20]
 8011c1a:	685b      	ldr	r3, [r3, #4]
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f003 fa37 	bl	8015090 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8011c22:	697b      	ldr	r3, [r7, #20]
 8011c24:	2200      	movs	r2, #0
 8011c26:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8011c28:	6978      	ldr	r0, [r7, #20]
 8011c2a:	f7ff ff53 	bl	8011ad4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	3314      	adds	r3, #20
 8011c32:	f107 0210 	add.w	r2, r7, #16
 8011c36:	4611      	mov	r1, r2
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f00e f898 	bl	801fd6e <sys_arch_mbox_tryfetch>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c44:	d1d5      	bne.n	8011bf2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	3314      	adds	r3, #20
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	f00e f824 	bl	801fc98 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	3314      	adds	r3, #20
 8011c54:	4618      	mov	r0, r3
 8011c56:	f00e f8b7 	bl	801fdc8 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8011c5a:	bf00      	nop
 8011c5c:	3718      	adds	r7, #24
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	bd80      	pop	{r7, pc}
	...

08011c64 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b086      	sub	sp, #24
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
 8011c6c:	460b      	mov	r3, r1
 8011c6e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8011c70:	2300      	movs	r3, #0
 8011c72:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d106      	bne.n	8011c88 <lwip_netconn_do_close_internal+0x24>
 8011c7a:	4b87      	ldr	r3, [pc, #540]	; (8011e98 <lwip_netconn_do_close_internal+0x234>)
 8011c7c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8011c80:	4986      	ldr	r1, [pc, #536]	; (8011e9c <lwip_netconn_do_close_internal+0x238>)
 8011c82:	4887      	ldr	r0, [pc, #540]	; (8011ea0 <lwip_netconn_do_close_internal+0x23c>)
 8011c84:	f00f fd48 	bl	8021718 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	781b      	ldrb	r3, [r3, #0]
 8011c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011c90:	2b10      	cmp	r3, #16
 8011c92:	d006      	beq.n	8011ca2 <lwip_netconn_do_close_internal+0x3e>
 8011c94:	4b80      	ldr	r3, [pc, #512]	; (8011e98 <lwip_netconn_do_close_internal+0x234>)
 8011c96:	f240 32a3 	movw	r2, #931	; 0x3a3
 8011c9a:	4982      	ldr	r1, [pc, #520]	; (8011ea4 <lwip_netconn_do_close_internal+0x240>)
 8011c9c:	4880      	ldr	r0, [pc, #512]	; (8011ea0 <lwip_netconn_do_close_internal+0x23c>)
 8011c9e:	f00f fd3b 	bl	8021718 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	785b      	ldrb	r3, [r3, #1]
 8011ca6:	2b04      	cmp	r3, #4
 8011ca8:	d006      	beq.n	8011cb8 <lwip_netconn_do_close_internal+0x54>
 8011caa:	4b7b      	ldr	r3, [pc, #492]	; (8011e98 <lwip_netconn_do_close_internal+0x234>)
 8011cac:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8011cb0:	497d      	ldr	r1, [pc, #500]	; (8011ea8 <lwip_netconn_do_close_internal+0x244>)
 8011cb2:	487b      	ldr	r0, [pc, #492]	; (8011ea0 <lwip_netconn_do_close_internal+0x23c>)
 8011cb4:	f00f fd30 	bl	8021718 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	685b      	ldr	r3, [r3, #4]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d106      	bne.n	8011cce <lwip_netconn_do_close_internal+0x6a>
 8011cc0:	4b75      	ldr	r3, [pc, #468]	; (8011e98 <lwip_netconn_do_close_internal+0x234>)
 8011cc2:	f240 32a5 	movw	r2, #933	; 0x3a5
 8011cc6:	4979      	ldr	r1, [pc, #484]	; (8011eac <lwip_netconn_do_close_internal+0x248>)
 8011cc8:	4875      	ldr	r0, [pc, #468]	; (8011ea0 <lwip_netconn_do_close_internal+0x23c>)
 8011cca:	f00f fd25 	bl	8021718 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d106      	bne.n	8011ce4 <lwip_netconn_do_close_internal+0x80>
 8011cd6:	4b70      	ldr	r3, [pc, #448]	; (8011e98 <lwip_netconn_do_close_internal+0x234>)
 8011cd8:	f240 32a6 	movw	r2, #934	; 0x3a6
 8011cdc:	4974      	ldr	r1, [pc, #464]	; (8011eb0 <lwip_netconn_do_close_internal+0x24c>)
 8011cde:	4870      	ldr	r0, [pc, #448]	; (8011ea0 <lwip_netconn_do_close_internal+0x23c>)
 8011ce0:	f00f fd1a 	bl	8021718 <iprintf>

  tpcb = conn->pcb.tcp;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	685b      	ldr	r3, [r3, #4]
 8011ce8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cee:	7a1b      	ldrb	r3, [r3, #8]
 8011cf0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8011cf2:	7bfb      	ldrb	r3, [r7, #15]
 8011cf4:	f003 0301 	and.w	r3, r3, #1
 8011cf8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8011cfa:	7bfb      	ldrb	r3, [r7, #15]
 8011cfc:	f003 0302 	and.w	r3, r3, #2
 8011d00:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8011d02:	7bfb      	ldrb	r3, [r7, #15]
 8011d04:	2b03      	cmp	r3, #3
 8011d06:	d102      	bne.n	8011d0e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8011d08:	2301      	movs	r3, #1
 8011d0a:	75bb      	strb	r3, [r7, #22]
 8011d0c:	e01f      	b.n	8011d4e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8011d0e:	7bbb      	ldrb	r3, [r7, #14]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d00e      	beq.n	8011d32 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8011d14:	693b      	ldr	r3, [r7, #16]
 8011d16:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8011d18:	2b05      	cmp	r3, #5
 8011d1a:	d007      	beq.n	8011d2c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8011d1c:	693b      	ldr	r3, [r7, #16]
 8011d1e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8011d20:	2b06      	cmp	r3, #6
 8011d22:	d003      	beq.n	8011d2c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8011d24:	693b      	ldr	r3, [r7, #16]
 8011d26:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8011d28:	2b08      	cmp	r3, #8
 8011d2a:	d102      	bne.n	8011d32 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	75bb      	strb	r3, [r7, #22]
 8011d30:	e00d      	b.n	8011d4e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8011d32:	7b7b      	ldrb	r3, [r7, #13]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d008      	beq.n	8011d4a <lwip_netconn_do_close_internal+0xe6>
 8011d38:	693b      	ldr	r3, [r7, #16]
 8011d3a:	8b5b      	ldrh	r3, [r3, #26]
 8011d3c:	f003 0310 	and.w	r3, r3, #16
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d002      	beq.n	8011d4a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8011d44:	2301      	movs	r3, #1
 8011d46:	75bb      	strb	r3, [r7, #22]
 8011d48:	e001      	b.n	8011d4e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8011d4e:	7dbb      	ldrb	r3, [r7, #22]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d003      	beq.n	8011d5c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8011d54:	2100      	movs	r1, #0
 8011d56:	6938      	ldr	r0, [r7, #16]
 8011d58:	f004 fa68 	bl	801622c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	7d1b      	ldrb	r3, [r3, #20]
 8011d60:	2b01      	cmp	r3, #1
 8011d62:	d104      	bne.n	8011d6e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8011d64:	2100      	movs	r1, #0
 8011d66:	6938      	ldr	r0, [r7, #16]
 8011d68:	f004 fad8 	bl	801631c <tcp_accept>
 8011d6c:	e01d      	b.n	8011daa <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8011d6e:	7bbb      	ldrb	r3, [r7, #14]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d007      	beq.n	8011d84 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8011d74:	2100      	movs	r1, #0
 8011d76:	6938      	ldr	r0, [r7, #16]
 8011d78:	f004 fa6a 	bl	8016250 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8011d7c:	2100      	movs	r1, #0
 8011d7e:	6938      	ldr	r0, [r7, #16]
 8011d80:	f004 facc 	bl	801631c <tcp_accept>
    }
    if (shut_tx) {
 8011d84:	7b7b      	ldrb	r3, [r7, #13]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d003      	beq.n	8011d92 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8011d8a:	2100      	movs	r1, #0
 8011d8c:	6938      	ldr	r0, [r7, #16]
 8011d8e:	f004 fa81 	bl	8016294 <tcp_sent>
    }
    if (shut_close) {
 8011d92:	7dbb      	ldrb	r3, [r7, #22]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d008      	beq.n	8011daa <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8011d98:	2200      	movs	r2, #0
 8011d9a:	2100      	movs	r1, #0
 8011d9c:	6938      	ldr	r0, [r7, #16]
 8011d9e:	f004 fad5 	bl	801634c <tcp_poll>
      tcp_err(tpcb, NULL);
 8011da2:	2100      	movs	r1, #0
 8011da4:	6938      	ldr	r0, [r7, #16]
 8011da6:	f004 fa97 	bl	80162d8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8011daa:	7dbb      	ldrb	r3, [r7, #22]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d005      	beq.n	8011dbc <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8011db0:	6938      	ldr	r0, [r7, #16]
 8011db2:	f003 f827 	bl	8014e04 <tcp_close>
 8011db6:	4603      	mov	r3, r0
 8011db8:	75fb      	strb	r3, [r7, #23]
 8011dba:	e007      	b.n	8011dcc <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8011dbc:	7bbb      	ldrb	r3, [r7, #14]
 8011dbe:	7b7a      	ldrb	r2, [r7, #13]
 8011dc0:	4619      	mov	r1, r3
 8011dc2:	6938      	ldr	r0, [r7, #16]
 8011dc4:	f003 f84a 	bl	8014e5c <tcp_shutdown>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8011dcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d102      	bne.n	8011dda <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8011dd4:	2301      	movs	r3, #1
 8011dd6:	757b      	strb	r3, [r7, #21]
 8011dd8:	e016      	b.n	8011e08 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8011dda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011de2:	d10f      	bne.n	8011e04 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011de8:	7a5b      	ldrb	r3, [r3, #9]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d10c      	bne.n	8011e08 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8011dee:	2301      	movs	r3, #1
 8011df0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8011df2:	7dbb      	ldrb	r3, [r7, #22]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d007      	beq.n	8011e08 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8011df8:	6938      	ldr	r0, [r7, #16]
 8011dfa:	f003 f949 	bl	8015090 <tcp_abort>
          err = ERR_OK;
 8011dfe:	2300      	movs	r3, #0
 8011e00:	75fb      	strb	r3, [r7, #23]
 8011e02:	e001      	b.n	8011e08 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8011e04:	2301      	movs	r3, #1
 8011e06:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8011e08:	7d7b      	ldrb	r3, [r7, #21]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d052      	beq.n	8011eb4 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	330c      	adds	r3, #12
 8011e16:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e1c:	7dfa      	ldrb	r2, [r7, #23]
 8011e1e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2200      	movs	r2, #0
 8011e24:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	2200      	movs	r2, #0
 8011e2a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8011e2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d129      	bne.n	8011e88 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8011e34:	7dbb      	ldrb	r3, [r7, #22]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d00c      	beq.n	8011e54 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d005      	beq.n	8011e54 <lwip_netconn_do_close_internal+0x1f0>
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e4c:	2200      	movs	r2, #0
 8011e4e:	2104      	movs	r1, #4
 8011e50:	6878      	ldr	r0, [r7, #4]
 8011e52:	4798      	blx	r3
      }
      if (shut_rx) {
 8011e54:	7bbb      	ldrb	r3, [r7, #14]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d009      	beq.n	8011e6e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d005      	beq.n	8011e6e <lwip_netconn_do_close_internal+0x20a>
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e66:	2200      	movs	r2, #0
 8011e68:	2100      	movs	r1, #0
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	4798      	blx	r3
      }
      if (shut_tx) {
 8011e6e:	7b7b      	ldrb	r3, [r7, #13]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d009      	beq.n	8011e88 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d005      	beq.n	8011e88 <lwip_netconn_do_close_internal+0x224>
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e80:	2200      	movs	r2, #0
 8011e82:	2102      	movs	r1, #2
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8011e88:	78fb      	ldrb	r3, [r7, #3]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d002      	beq.n	8011e94 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8011e8e:	68b8      	ldr	r0, [r7, #8]
 8011e90:	f00e f800 	bl	801fe94 <sys_sem_signal>
    }
    return ERR_OK;
 8011e94:	2300      	movs	r3, #0
 8011e96:	e03c      	b.n	8011f12 <lwip_netconn_do_close_internal+0x2ae>
 8011e98:	08023e20 	.word	0x08023e20
 8011e9c:	080240f4 	.word	0x080240f4
 8011ea0:	08023e64 	.word	0x08023e64
 8011ea4:	08024104 	.word	0x08024104
 8011ea8:	08024124 	.word	0x08024124
 8011eac:	08024148 	.word	0x08024148
 8011eb0:	08023f88 	.word	0x08023f88
  }
  if (!close_finished) {
 8011eb4:	7d7b      	ldrb	r3, [r7, #21]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d11e      	bne.n	8011ef8 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8011eba:	693b      	ldr	r3, [r7, #16]
 8011ebc:	7d1b      	ldrb	r3, [r3, #20]
 8011ebe:	2b01      	cmp	r3, #1
 8011ec0:	d106      	bne.n	8011ed0 <lwip_netconn_do_close_internal+0x26c>
 8011ec2:	4b16      	ldr	r3, [pc, #88]	; (8011f1c <lwip_netconn_do_close_internal+0x2b8>)
 8011ec4:	f240 4241 	movw	r2, #1089	; 0x441
 8011ec8:	4915      	ldr	r1, [pc, #84]	; (8011f20 <lwip_netconn_do_close_internal+0x2bc>)
 8011eca:	4816      	ldr	r0, [pc, #88]	; (8011f24 <lwip_netconn_do_close_internal+0x2c0>)
 8011ecc:	f00f fc24 	bl	8021718 <iprintf>
    if (shut_tx) {
 8011ed0:	7b7b      	ldrb	r3, [r7, #13]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d003      	beq.n	8011ede <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8011ed6:	4914      	ldr	r1, [pc, #80]	; (8011f28 <lwip_netconn_do_close_internal+0x2c4>)
 8011ed8:	6938      	ldr	r0, [r7, #16]
 8011eda:	f004 f9db 	bl	8016294 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8011ede:	2201      	movs	r2, #1
 8011ee0:	4912      	ldr	r1, [pc, #72]	; (8011f2c <lwip_netconn_do_close_internal+0x2c8>)
 8011ee2:	6938      	ldr	r0, [r7, #16]
 8011ee4:	f004 fa32 	bl	801634c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8011ee8:	4911      	ldr	r1, [pc, #68]	; (8011f30 <lwip_netconn_do_close_internal+0x2cc>)
 8011eea:	6938      	ldr	r0, [r7, #16]
 8011eec:	f004 f9f4 	bl	80162d8 <tcp_err>
    tcp_arg(tpcb, conn);
 8011ef0:	6879      	ldr	r1, [r7, #4]
 8011ef2:	6938      	ldr	r0, [r7, #16]
 8011ef4:	f004 f99a 	bl	801622c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8011ef8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d106      	bne.n	8011f0e <lwip_netconn_do_close_internal+0x2aa>
 8011f00:	4b06      	ldr	r3, [pc, #24]	; (8011f1c <lwip_netconn_do_close_internal+0x2b8>)
 8011f02:	f240 424d 	movw	r2, #1101	; 0x44d
 8011f06:	490b      	ldr	r1, [pc, #44]	; (8011f34 <lwip_netconn_do_close_internal+0x2d0>)
 8011f08:	4806      	ldr	r0, [pc, #24]	; (8011f24 <lwip_netconn_do_close_internal+0x2c0>)
 8011f0a:	f00f fc05 	bl	8021718 <iprintf>
  return err;
 8011f0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	3718      	adds	r7, #24
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}
 8011f1a:	bf00      	nop
 8011f1c:	08023e20 	.word	0x08023e20
 8011f20:	0802415c 	.word	0x0802415c
 8011f24:	08023e64 	.word	0x08023e64
 8011f28:	080114c9 	.word	0x080114c9
 8011f2c:	080113f9 	.word	0x080113f9
 8011f30:	08011575 	.word	0x08011575
 8011f34:	08024180 	.word	0x08024180

08011f38 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b084      	sub	sp, #16
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	785b      	ldrb	r3, [r3, #1]
 8011f4a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8011f4c:	7afb      	ldrb	r3, [r7, #11]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d00d      	beq.n	8011f6e <lwip_netconn_do_delconn+0x36>
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	781b      	ldrb	r3, [r3, #0]
 8011f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011f5c:	2b10      	cmp	r3, #16
 8011f5e:	d006      	beq.n	8011f6e <lwip_netconn_do_delconn+0x36>
 8011f60:	4b61      	ldr	r3, [pc, #388]	; (80120e8 <lwip_netconn_do_delconn+0x1b0>)
 8011f62:	f240 425e 	movw	r2, #1118	; 0x45e
 8011f66:	4961      	ldr	r1, [pc, #388]	; (80120ec <lwip_netconn_do_delconn+0x1b4>)
 8011f68:	4861      	ldr	r0, [pc, #388]	; (80120f0 <lwip_netconn_do_delconn+0x1b8>)
 8011f6a:	f00f fbd5 	bl	8021718 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8011f6e:	7afb      	ldrb	r3, [r7, #11]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d005      	beq.n	8011f80 <lwip_netconn_do_delconn+0x48>
 8011f74:	7afb      	ldrb	r3, [r7, #11]
 8011f76:	2b02      	cmp	r3, #2
 8011f78:	d002      	beq.n	8011f80 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8011f7a:	7afb      	ldrb	r3, [r7, #11]
 8011f7c:	2b03      	cmp	r3, #3
 8011f7e:	d10a      	bne.n	8011f96 <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 8011f80:	7afb      	ldrb	r3, [r7, #11]
 8011f82:	2b03      	cmp	r3, #3
 8011f84:	d10b      	bne.n	8011f9e <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011f8e:	f003 0304 	and.w	r3, r3, #4
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d103      	bne.n	8011f9e <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	22fb      	movs	r2, #251	; 0xfb
 8011f9a:	711a      	strb	r2, [r3, #4]
 8011f9c:	e098      	b.n	80120d0 <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8011f9e:	7afb      	ldrb	r3, [r7, #11]
 8011fa0:	2b03      	cmp	r3, #3
 8011fa2:	d10e      	bne.n	8011fc2 <lwip_netconn_do_delconn+0x8a>
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011fac:	f003 0304 	and.w	r3, r3, #4
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d106      	bne.n	8011fc2 <lwip_netconn_do_delconn+0x8a>
 8011fb4:	4b4c      	ldr	r3, [pc, #304]	; (80120e8 <lwip_netconn_do_delconn+0x1b0>)
 8011fb6:	f240 427a 	movw	r2, #1146	; 0x47a
 8011fba:	494e      	ldr	r1, [pc, #312]	; (80120f4 <lwip_netconn_do_delconn+0x1bc>)
 8011fbc:	484c      	ldr	r0, [pc, #304]	; (80120f0 <lwip_netconn_do_delconn+0x1b8>)
 8011fbe:	f00f fbab 	bl	8021718 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f7ff fdcb 	bl	8011b68 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	685b      	ldr	r3, [r3, #4]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d05f      	beq.n	801209c <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	781b      	ldrb	r3, [r3, #0]
 8011fe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011fe6:	2b10      	cmp	r3, #16
 8011fe8:	d00d      	beq.n	8012006 <lwip_netconn_do_delconn+0xce>
 8011fea:	2b20      	cmp	r3, #32
 8011fec:	d151      	bne.n	8012092 <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	685b      	ldr	r3, [r3, #4]
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	685b      	ldr	r3, [r3, #4]
 8011ffe:	4618      	mov	r0, r3
 8012000:	f009 fb88 	bl	801b714 <udp_remove>
          break;
 8012004:	e046      	b.n	8012094 <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801200c:	2b00      	cmp	r3, #0
 801200e:	d006      	beq.n	801201e <lwip_netconn_do_delconn+0xe6>
 8012010:	4b35      	ldr	r3, [pc, #212]	; (80120e8 <lwip_netconn_do_delconn+0x1b0>)
 8012012:	f240 4294 	movw	r2, #1172	; 0x494
 8012016:	4938      	ldr	r1, [pc, #224]	; (80120f8 <lwip_netconn_do_delconn+0x1c0>)
 8012018:	4835      	ldr	r0, [pc, #212]	; (80120f0 <lwip_netconn_do_delconn+0x1b8>)
 801201a:	f00f fb7d 	bl	8021718 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	2204      	movs	r2, #4
 8012024:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	2203      	movs	r2, #3
 801202a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	68fa      	ldr	r2, [r7, #12]
 8012032:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	2100      	movs	r1, #0
 801203a:	4618      	mov	r0, r3
 801203c:	f7ff fe12 	bl	8011c64 <lwip_netconn_do_close_internal>
 8012040:	4603      	mov	r3, r0
 8012042:	2b00      	cmp	r3, #0
 8012044:	d04b      	beq.n	80120de <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	785b      	ldrb	r3, [r3, #1]
 801204c:	2b04      	cmp	r3, #4
 801204e:	d006      	beq.n	801205e <lwip_netconn_do_delconn+0x126>
 8012050:	4b25      	ldr	r3, [pc, #148]	; (80120e8 <lwip_netconn_do_delconn+0x1b0>)
 8012052:	f240 429a 	movw	r2, #1178	; 0x49a
 8012056:	4929      	ldr	r1, [pc, #164]	; (80120fc <lwip_netconn_do_delconn+0x1c4>)
 8012058:	4825      	ldr	r0, [pc, #148]	; (80120f0 <lwip_netconn_do_delconn+0x1b8>)
 801205a:	f00f fb5d 	bl	8021718 <iprintf>
            UNLOCK_TCPIP_CORE();
 801205e:	4828      	ldr	r0, [pc, #160]	; (8012100 <lwip_netconn_do_delconn+0x1c8>)
 8012060:	f00d ff89 	bl	801ff76 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	330c      	adds	r3, #12
 801206a:	2100      	movs	r1, #0
 801206c:	4618      	mov	r0, r3
 801206e:	f00d fee0 	bl	801fe32 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8012072:	4823      	ldr	r0, [pc, #140]	; (8012100 <lwip_netconn_do_delconn+0x1c8>)
 8012074:	f00d ff70 	bl	801ff58 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	785b      	ldrb	r3, [r3, #1]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d02d      	beq.n	80120de <lwip_netconn_do_delconn+0x1a6>
 8012082:	4b19      	ldr	r3, [pc, #100]	; (80120e8 <lwip_netconn_do_delconn+0x1b0>)
 8012084:	f240 429e 	movw	r2, #1182	; 0x49e
 8012088:	491c      	ldr	r1, [pc, #112]	; (80120fc <lwip_netconn_do_delconn+0x1c4>)
 801208a:	4819      	ldr	r0, [pc, #100]	; (80120f0 <lwip_netconn_do_delconn+0x1b8>)
 801208c:	f00f fb44 	bl	8021718 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8012090:	e025      	b.n	80120de <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 8012092:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	2200      	movs	r2, #0
 801209a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d007      	beq.n	80120b6 <lwip_netconn_do_delconn+0x17e>
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120ac:	68fa      	ldr	r2, [r7, #12]
 80120ae:	6810      	ldr	r0, [r2, #0]
 80120b0:	2200      	movs	r2, #0
 80120b2:	2100      	movs	r1, #0
 80120b4:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d007      	beq.n	80120d0 <lwip_netconn_do_delconn+0x198>
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120c6:	68fa      	ldr	r2, [r7, #12]
 80120c8:	6810      	ldr	r0, [r2, #0]
 80120ca:	2200      	movs	r2, #0
 80120cc:	2102      	movs	r1, #2
 80120ce:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	330c      	adds	r3, #12
 80120d6:	4618      	mov	r0, r3
 80120d8:	f00d fef6 	bl	801fec8 <sys_sem_valid>
 80120dc:	e000      	b.n	80120e0 <lwip_netconn_do_delconn+0x1a8>
          return;
 80120de:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80120e0:	3710      	adds	r7, #16
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}
 80120e6:	bf00      	nop
 80120e8:	08023e20 	.word	0x08023e20
 80120ec:	08024190 	.word	0x08024190
 80120f0:	08023e64 	.word	0x08023e64
 80120f4:	080241a4 	.word	0x080241a4
 80120f8:	080241c4 	.word	0x080241c4
 80120fc:	080241e0 	.word	0x080241e0
 8012100:	2000eba0 	.word	0x2000eba0

08012104 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b084      	sub	sp, #16
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8012110:	68bb      	ldr	r3, [r7, #8]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	685b      	ldr	r3, [r3, #4]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d025      	beq.n	8012166 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801211a:	68bb      	ldr	r3, [r7, #8]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	781b      	ldrb	r3, [r3, #0]
 8012120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012124:	2b10      	cmp	r3, #16
 8012126:	d00e      	beq.n	8012146 <lwip_netconn_do_bind+0x42>
 8012128:	2b20      	cmp	r3, #32
 801212a:	d119      	bne.n	8012160 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	6858      	ldr	r0, [r3, #4]
 8012132:	68bb      	ldr	r3, [r7, #8]
 8012134:	6899      	ldr	r1, [r3, #8]
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	899b      	ldrh	r3, [r3, #12]
 801213a:	461a      	mov	r2, r3
 801213c:	f009 f9c8 	bl	801b4d0 <udp_bind>
 8012140:	4603      	mov	r3, r0
 8012142:	73fb      	strb	r3, [r7, #15]
        break;
 8012144:	e011      	b.n	801216a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	6858      	ldr	r0, [r3, #4]
 801214c:	68bb      	ldr	r3, [r7, #8]
 801214e:	6899      	ldr	r1, [r3, #8]
 8012150:	68bb      	ldr	r3, [r7, #8]
 8012152:	899b      	ldrh	r3, [r3, #12]
 8012154:	461a      	mov	r2, r3
 8012156:	f002 ffa7 	bl	80150a8 <tcp_bind>
 801215a:	4603      	mov	r3, r0
 801215c:	73fb      	strb	r3, [r7, #15]
        break;
 801215e:	e004      	b.n	801216a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8012160:	23fa      	movs	r3, #250	; 0xfa
 8012162:	73fb      	strb	r3, [r7, #15]
        break;
 8012164:	e001      	b.n	801216a <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8012166:	23fa      	movs	r3, #250	; 0xfa
 8012168:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	7bfa      	ldrb	r2, [r7, #15]
 801216e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8012170:	bf00      	nop
 8012172:	3710      	adds	r7, #16
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}

08012178 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b086      	sub	sp, #24
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8012184:	697b      	ldr	r3, [r7, #20]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	685b      	ldr	r3, [r3, #4]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d07f      	beq.n	801228e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801218e:	697b      	ldr	r3, [r7, #20]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	781b      	ldrb	r3, [r3, #0]
 8012194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012198:	2b10      	cmp	r3, #16
 801219a:	d175      	bne.n	8012288 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 801219c:	697b      	ldr	r3, [r7, #20]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	785b      	ldrb	r3, [r3, #1]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d165      	bne.n	8012272 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	685b      	ldr	r3, [r3, #4]
 80121ac:	7d1b      	ldrb	r3, [r3, #20]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d002      	beq.n	80121b8 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 80121b2:	23fa      	movs	r3, #250	; 0xfa
 80121b4:	72fb      	strb	r3, [r7, #11]
 80121b6:	e06c      	b.n	8012292 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 80121b8:	23ff      	movs	r3, #255	; 0xff
 80121ba:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80121bc:	697b      	ldr	r3, [r7, #20]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	685b      	ldr	r3, [r3, #4]
 80121c2:	f107 020b 	add.w	r2, r7, #11
 80121c6:	7cf9      	ldrb	r1, [r7, #19]
 80121c8:	4618      	mov	r0, r3
 80121ca:	f003 f839 	bl	8015240 <tcp_listen_with_backlog_and_err>
 80121ce:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d05d      	beq.n	8012292 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80121d6:	697b      	ldr	r3, [r7, #20]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	3310      	adds	r3, #16
 80121dc:	4618      	mov	r0, r3
 80121de:	f00d fde2 	bl	801fda6 <sys_mbox_valid>
 80121e2:	4603      	mov	r3, r0
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d00b      	beq.n	8012200 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 80121e8:	697b      	ldr	r3, [r7, #20]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	3310      	adds	r3, #16
 80121ee:	4618      	mov	r0, r3
 80121f0:	f00d fd52 	bl	801fc98 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	3310      	adds	r3, #16
 80121fa:	4618      	mov	r0, r3
 80121fc:	f00d fde4 	bl	801fdc8 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8012200:	2300      	movs	r3, #0
 8012202:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8012204:	697b      	ldr	r3, [r7, #20]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	3314      	adds	r3, #20
 801220a:	4618      	mov	r0, r3
 801220c:	f00d fdcb 	bl	801fda6 <sys_mbox_valid>
 8012210:	4603      	mov	r3, r0
 8012212:	2b00      	cmp	r3, #0
 8012214:	d108      	bne.n	8012228 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8012216:	697b      	ldr	r3, [r7, #20]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	3314      	adds	r3, #20
 801221c:	2106      	movs	r1, #6
 801221e:	4618      	mov	r0, r3
 8012220:	f00d fd18 	bl	801fc54 <sys_mbox_new>
 8012224:	4603      	mov	r3, r0
 8012226:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8012228:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d118      	bne.n	8012262 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8012230:	697b      	ldr	r3, [r7, #20]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	2202      	movs	r2, #2
 8012236:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8012238:	697b      	ldr	r3, [r7, #20]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	68fa      	ldr	r2, [r7, #12]
 801223e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8012240:	697b      	ldr	r3, [r7, #20]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	685a      	ldr	r2, [r3, #4]
 8012246:	697b      	ldr	r3, [r7, #20]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	4619      	mov	r1, r3
 801224c:	4610      	mov	r0, r2
 801224e:	f003 ffed 	bl	801622c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8012252:	697b      	ldr	r3, [r7, #20]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	685b      	ldr	r3, [r3, #4]
 8012258:	4912      	ldr	r1, [pc, #72]	; (80122a4 <lwip_netconn_do_listen+0x12c>)
 801225a:	4618      	mov	r0, r3
 801225c:	f004 f85e 	bl	801631c <tcp_accept>
 8012260:	e017      	b.n	8012292 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8012262:	68f8      	ldr	r0, [r7, #12]
 8012264:	f002 fdce 	bl	8014e04 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8012268:	697b      	ldr	r3, [r7, #20]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	2200      	movs	r2, #0
 801226e:	605a      	str	r2, [r3, #4]
 8012270:	e00f      	b.n	8012292 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8012272:	697b      	ldr	r3, [r7, #20]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	785b      	ldrb	r3, [r3, #1]
 8012278:	2b02      	cmp	r3, #2
 801227a:	d102      	bne.n	8012282 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 801227c:	2300      	movs	r3, #0
 801227e:	72fb      	strb	r3, [r7, #11]
 8012280:	e007      	b.n	8012292 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8012282:	23f5      	movs	r3, #245	; 0xf5
 8012284:	72fb      	strb	r3, [r7, #11]
 8012286:	e004      	b.n	8012292 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8012288:	23f0      	movs	r3, #240	; 0xf0
 801228a:	72fb      	strb	r3, [r7, #11]
 801228c:	e001      	b.n	8012292 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 801228e:	23f5      	movs	r3, #245	; 0xf5
 8012290:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8012292:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8012296:	697b      	ldr	r3, [r7, #20]
 8012298:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801229a:	bf00      	nop
 801229c:	3718      	adds	r7, #24
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
 80122a2:	bf00      	nop
 80122a4:	08011779 	.word	0x08011779

080122a8 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b086      	sub	sp, #24
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80122b4:	693b      	ldr	r3, [r7, #16]
 80122b6:	2200      	movs	r2, #0
 80122b8:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80122ba:	693b      	ldr	r3, [r7, #16]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	685b      	ldr	r3, [r3, #4]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d022      	beq.n	801230a <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80122c4:	693b      	ldr	r3, [r7, #16]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	781b      	ldrb	r3, [r3, #0]
 80122ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80122ce:	2b10      	cmp	r3, #16
 80122d0:	d11b      	bne.n	801230a <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80122d2:	693b      	ldr	r3, [r7, #16]
 80122d4:	689b      	ldr	r3, [r3, #8]
 80122d6:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80122de:	d202      	bcs.n	80122e6 <lwip_netconn_do_recv+0x3e>
 80122e0:	697b      	ldr	r3, [r7, #20]
 80122e2:	b29b      	uxth	r3, r3
 80122e4:	e001      	b.n	80122ea <lwip_netconn_do_recv+0x42>
 80122e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80122ea:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80122ec:	693b      	ldr	r3, [r7, #16]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	685b      	ldr	r3, [r3, #4]
 80122f2:	89fa      	ldrh	r2, [r7, #14]
 80122f4:	4611      	mov	r1, r2
 80122f6:	4618      	mov	r0, r3
 80122f8:	f003 f8c6 	bl	8015488 <tcp_recved>
        remaining -= recved;
 80122fc:	89fb      	ldrh	r3, [r7, #14]
 80122fe:	697a      	ldr	r2, [r7, #20]
 8012300:	1ad3      	subs	r3, r2, r3
 8012302:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8012304:	697b      	ldr	r3, [r7, #20]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d1e6      	bne.n	80122d8 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 801230a:	bf00      	nop
 801230c:	3718      	adds	r7, #24
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}
	...

08012314 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b088      	sub	sp, #32
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
 801231c:	460b      	mov	r3, r1
 801231e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8012320:	2300      	movs	r3, #0
 8012322:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d106      	bne.n	8012338 <lwip_netconn_do_writemore+0x24>
 801232a:	4b61      	ldr	r3, [pc, #388]	; (80124b0 <lwip_netconn_do_writemore+0x19c>)
 801232c:	f240 6273 	movw	r2, #1651	; 0x673
 8012330:	4960      	ldr	r1, [pc, #384]	; (80124b4 <lwip_netconn_do_writemore+0x1a0>)
 8012332:	4861      	ldr	r0, [pc, #388]	; (80124b8 <lwip_netconn_do_writemore+0x1a4>)
 8012334:	f00f f9f0 	bl	8021718 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	785b      	ldrb	r3, [r3, #1]
 801233c:	2b01      	cmp	r3, #1
 801233e:	d006      	beq.n	801234e <lwip_netconn_do_writemore+0x3a>
 8012340:	4b5b      	ldr	r3, [pc, #364]	; (80124b0 <lwip_netconn_do_writemore+0x19c>)
 8012342:	f240 6274 	movw	r2, #1652	; 0x674
 8012346:	495d      	ldr	r1, [pc, #372]	; (80124bc <lwip_netconn_do_writemore+0x1a8>)
 8012348:	485b      	ldr	r0, [pc, #364]	; (80124b8 <lwip_netconn_do_writemore+0x1a4>)
 801234a:	f00f f9e5 	bl	8021718 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012352:	2b00      	cmp	r3, #0
 8012354:	d106      	bne.n	8012364 <lwip_netconn_do_writemore+0x50>
 8012356:	4b56      	ldr	r3, [pc, #344]	; (80124b0 <lwip_netconn_do_writemore+0x19c>)
 8012358:	f240 6275 	movw	r2, #1653	; 0x675
 801235c:	4958      	ldr	r1, [pc, #352]	; (80124c0 <lwip_netconn_do_writemore+0x1ac>)
 801235e:	4856      	ldr	r0, [pc, #344]	; (80124b8 <lwip_netconn_do_writemore+0x1a4>)
 8012360:	f00f f9da 	bl	8021718 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	685b      	ldr	r3, [r3, #4]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d106      	bne.n	801237a <lwip_netconn_do_writemore+0x66>
 801236c:	4b50      	ldr	r3, [pc, #320]	; (80124b0 <lwip_netconn_do_writemore+0x19c>)
 801236e:	f240 6276 	movw	r2, #1654	; 0x676
 8012372:	4954      	ldr	r1, [pc, #336]	; (80124c4 <lwip_netconn_do_writemore+0x1b0>)
 8012374:	4850      	ldr	r0, [pc, #320]	; (80124b8 <lwip_netconn_do_writemore+0x1a4>)
 8012376:	f00f f9cf 	bl	8021718 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801237e:	699a      	ldr	r2, [r3, #24]
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012384:	695b      	ldr	r3, [r3, #20]
 8012386:	429a      	cmp	r2, r3
 8012388:	d306      	bcc.n	8012398 <lwip_netconn_do_writemore+0x84>
 801238a:	4b49      	ldr	r3, [pc, #292]	; (80124b0 <lwip_netconn_do_writemore+0x19c>)
 801238c:	f240 6277 	movw	r2, #1655	; 0x677
 8012390:	494d      	ldr	r1, [pc, #308]	; (80124c8 <lwip_netconn_do_writemore+0x1b4>)
 8012392:	4849      	ldr	r0, [pc, #292]	; (80124b8 <lwip_netconn_do_writemore+0x1a4>)
 8012394:	f00f f9c0 	bl	8021718 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801239c:	899b      	ldrh	r3, [r3, #12]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d106      	bne.n	80123b0 <lwip_netconn_do_writemore+0x9c>
 80123a2:	4b43      	ldr	r3, [pc, #268]	; (80124b0 <lwip_netconn_do_writemore+0x19c>)
 80123a4:	f240 6279 	movw	r2, #1657	; 0x679
 80123a8:	4948      	ldr	r1, [pc, #288]	; (80124cc <lwip_netconn_do_writemore+0x1b8>)
 80123aa:	4843      	ldr	r0, [pc, #268]	; (80124b8 <lwip_netconn_do_writemore+0x1a4>)
 80123ac:	f00f f9b4 	bl	8021718 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123b4:	7f1b      	ldrb	r3, [r3, #28]
 80123b6:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80123be:	f003 0302 	and.w	r3, r3, #2
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d104      	bne.n	80123d0 <lwip_netconn_do_writemore+0xbc>
 80123c6:	7ebb      	ldrb	r3, [r7, #26]
 80123c8:	f003 0304 	and.w	r3, r3, #4
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d001      	beq.n	80123d4 <lwip_netconn_do_writemore+0xc0>
 80123d0:	2301      	movs	r3, #1
 80123d2:	e000      	b.n	80123d6 <lwip_netconn_do_writemore+0xc2>
 80123d4:	2300      	movs	r3, #0
 80123d6:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123dc:	689b      	ldr	r3, [r3, #8]
 80123de:	681a      	ldr	r2, [r3, #0]
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123e4:	691b      	ldr	r3, [r3, #16]
 80123e6:	4413      	add	r3, r2
 80123e8:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123ee:	689b      	ldr	r3, [r3, #8]
 80123f0:	685a      	ldr	r2, [r3, #4]
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123f6:	691b      	ldr	r3, [r3, #16]
 80123f8:	1ad3      	subs	r3, r2, r3
 80123fa:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80123fc:	693b      	ldr	r3, [r7, #16]
 80123fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012402:	d307      	bcc.n	8012414 <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 8012404:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012408:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 801240a:	7ebb      	ldrb	r3, [r7, #26]
 801240c:	f043 0302 	orr.w	r3, r3, #2
 8012410:	76bb      	strb	r3, [r7, #26]
 8012412:	e001      	b.n	8012418 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 8012414:	693b      	ldr	r3, [r7, #16]
 8012416:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	685b      	ldr	r3, [r3, #4]
 801241c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012420:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8012422:	89fa      	ldrh	r2, [r7, #14]
 8012424:	8bbb      	ldrh	r3, [r7, #28]
 8012426:	429a      	cmp	r2, r3
 8012428:	d216      	bcs.n	8012458 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 801242a:	89fb      	ldrh	r3, [r7, #14]
 801242c:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 801242e:	7e3b      	ldrb	r3, [r7, #24]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d00d      	beq.n	8012450 <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 8012434:	8bbb      	ldrh	r3, [r7, #28]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d10e      	bne.n	8012458 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801243e:	699b      	ldr	r3, [r3, #24]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d102      	bne.n	801244a <lwip_netconn_do_writemore+0x136>
 8012444:	f06f 0306 	mvn.w	r3, #6
 8012448:	e000      	b.n	801244c <lwip_netconn_do_writemore+0x138>
 801244a:	2300      	movs	r3, #0
 801244c:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 801244e:	e08f      	b.n	8012570 <lwip_netconn_do_writemore+0x25c>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8012450:	7ebb      	ldrb	r3, [r7, #26]
 8012452:	f043 0302 	orr.w	r3, r3, #2
 8012456:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801245c:	691a      	ldr	r2, [r3, #16]
 801245e:	8bbb      	ldrh	r3, [r7, #28]
 8012460:	441a      	add	r2, r3
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012466:	689b      	ldr	r3, [r3, #8]
 8012468:	685b      	ldr	r3, [r3, #4]
 801246a:	429a      	cmp	r2, r3
 801246c:	d906      	bls.n	801247c <lwip_netconn_do_writemore+0x168>
 801246e:	4b10      	ldr	r3, [pc, #64]	; (80124b0 <lwip_netconn_do_writemore+0x19c>)
 8012470:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8012474:	4916      	ldr	r1, [pc, #88]	; (80124d0 <lwip_netconn_do_writemore+0x1bc>)
 8012476:	4810      	ldr	r0, [pc, #64]	; (80124b8 <lwip_netconn_do_writemore+0x1a4>)
 8012478:	f00f f94e 	bl	8021718 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 801247c:	8bbb      	ldrh	r3, [r7, #28]
 801247e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012482:	4293      	cmp	r3, r2
 8012484:	d103      	bne.n	801248e <lwip_netconn_do_writemore+0x17a>
 8012486:	693b      	ldr	r3, [r7, #16]
 8012488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801248c:	d209      	bcs.n	80124a2 <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 801248e:	693b      	ldr	r3, [r7, #16]
 8012490:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8012492:	8bba      	ldrh	r2, [r7, #28]
 8012494:	429a      	cmp	r2, r3
 8012496:	d11d      	bne.n	80124d4 <lwip_netconn_do_writemore+0x1c0>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801249c:	899b      	ldrh	r3, [r3, #12]
 801249e:	2b01      	cmp	r3, #1
 80124a0:	d918      	bls.n	80124d4 <lwip_netconn_do_writemore+0x1c0>
        write_more = 1;
 80124a2:	2301      	movs	r3, #1
 80124a4:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80124a6:	7ebb      	ldrb	r3, [r7, #26]
 80124a8:	f043 0302 	orr.w	r3, r3, #2
 80124ac:	76bb      	strb	r3, [r7, #26]
 80124ae:	e013      	b.n	80124d8 <lwip_netconn_do_writemore+0x1c4>
 80124b0:	08023e20 	.word	0x08023e20
 80124b4:	08023f78 	.word	0x08023f78
 80124b8:	08023e64 	.word	0x08023e64
 80124bc:	08024280 	.word	0x08024280
 80124c0:	08023f88 	.word	0x08023f88
 80124c4:	080242a0 	.word	0x080242a0
 80124c8:	080242b8 	.word	0x080242b8
 80124cc:	080242f8 	.word	0x080242f8
 80124d0:	08024320 	.word	0x08024320
      } else {
        write_more = 0;
 80124d4:	2300      	movs	r3, #0
 80124d6:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	6858      	ldr	r0, [r3, #4]
 80124dc:	7ebb      	ldrb	r3, [r7, #26]
 80124de:	8bba      	ldrh	r2, [r7, #28]
 80124e0:	6979      	ldr	r1, [r7, #20]
 80124e2:	f006 fdf3 	bl	80190cc <tcp_write>
 80124e6:	4603      	mov	r3, r0
 80124e8:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80124ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d12c      	bne.n	801254c <lwip_netconn_do_writemore+0x238>
        conn->current_msg->msg.w.offset += len;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124f6:	6999      	ldr	r1, [r3, #24]
 80124f8:	8bba      	ldrh	r2, [r7, #28]
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124fe:	440a      	add	r2, r1
 8012500:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012506:	6919      	ldr	r1, [r3, #16]
 8012508:	8bba      	ldrh	r2, [r7, #28]
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801250e:	440a      	add	r2, r1
 8012510:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012516:	691a      	ldr	r2, [r3, #16]
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801251c:	689b      	ldr	r3, [r3, #8]
 801251e:	685b      	ldr	r3, [r3, #4]
 8012520:	429a      	cmp	r2, r3
 8012522:	d113      	bne.n	801254c <lwip_netconn_do_writemore+0x238>
          conn->current_msg->msg.w.vector_cnt--;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012528:	899a      	ldrh	r2, [r3, #12]
 801252a:	3a01      	subs	r2, #1
 801252c:	b292      	uxth	r2, r2
 801252e:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012534:	899b      	ldrh	r3, [r3, #12]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d008      	beq.n	801254c <lwip_netconn_do_writemore+0x238>
            conn->current_msg->msg.w.vector++;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801253e:	689a      	ldr	r2, [r3, #8]
 8012540:	3208      	adds	r2, #8
 8012542:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012548:	2200      	movs	r2, #0
 801254a:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 801254c:	7e7b      	ldrb	r3, [r7, #25]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d004      	beq.n	801255c <lwip_netconn_do_writemore+0x248>
 8012552:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012556:	2b00      	cmp	r3, #0
 8012558:	f43f af3e 	beq.w	80123d8 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 801255c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d004      	beq.n	801256e <lwip_netconn_do_writemore+0x25a>
 8012564:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801256c:	d136      	bne.n	80125dc <lwip_netconn_do_writemore+0x2c8>
err_mem:
 801256e:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8012570:	7e3b      	ldrb	r3, [r7, #24]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d01b      	beq.n	80125ae <lwip_netconn_do_writemore+0x29a>
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801257a:	699a      	ldr	r2, [r3, #24]
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012580:	695b      	ldr	r3, [r3, #20]
 8012582:	429a      	cmp	r2, r3
 8012584:	d213      	bcs.n	80125ae <lwip_netconn_do_writemore+0x29a>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801258a:	2b00      	cmp	r3, #0
 801258c:	d005      	beq.n	801259a <lwip_netconn_do_writemore+0x286>
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012592:	2200      	movs	r2, #0
 8012594:	2103      	movs	r1, #3
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80125a0:	f043 0310 	orr.w	r3, r3, #16
 80125a4:	b2da      	uxtb	r2, r3
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	f883 2020 	strb.w	r2, [r3, #32]
 80125ac:	e016      	b.n	80125dc <lwip_netconn_do_writemore+0x2c8>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	685b      	ldr	r3, [r3, #4]
 80125b2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80125b6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80125ba:	d305      	bcc.n	80125c8 <lwip_netconn_do_writemore+0x2b4>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	685b      	ldr	r3, [r3, #4]
 80125c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80125c4:	2b04      	cmp	r3, #4
 80125c6:	d909      	bls.n	80125dc <lwip_netconn_do_writemore+0x2c8>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d005      	beq.n	80125dc <lwip_netconn_do_writemore+0x2c8>
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125d4:	2200      	movs	r2, #0
 80125d6:	2103      	movs	r1, #3
 80125d8:	6878      	ldr	r0, [r7, #4]
 80125da:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80125dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d11d      	bne.n	8012620 <lwip_netconn_do_writemore+0x30c>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125e8:	699a      	ldr	r2, [r3, #24]
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125ee:	695b      	ldr	r3, [r3, #20]
 80125f0:	429a      	cmp	r2, r3
 80125f2:	d002      	beq.n	80125fa <lwip_netconn_do_writemore+0x2e6>
 80125f4:	7e3b      	ldrb	r3, [r7, #24]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d001      	beq.n	80125fe <lwip_netconn_do_writemore+0x2ea>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80125fa:	2301      	movs	r3, #1
 80125fc:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	685b      	ldr	r3, [r3, #4]
 8012602:	4618      	mov	r0, r3
 8012604:	f007 fb4c 	bl	8019ca0 <tcp_output>
 8012608:	4603      	mov	r3, r0
 801260a:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 801260c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8012610:	f113 0f04 	cmn.w	r3, #4
 8012614:	d12c      	bne.n	8012670 <lwip_netconn_do_writemore+0x35c>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012616:	7b3b      	ldrb	r3, [r7, #12]
 8012618:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801261a:	2301      	movs	r3, #1
 801261c:	76fb      	strb	r3, [r7, #27]
 801261e:	e027      	b.n	8012670 <lwip_netconn_do_writemore+0x35c>
      }
    } else if (err == ERR_MEM) {
 8012620:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012628:	d120      	bne.n	801266c <lwip_netconn_do_writemore+0x358>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	685b      	ldr	r3, [r3, #4]
 801262e:	4618      	mov	r0, r3
 8012630:	f007 fb36 	bl	8019ca0 <tcp_output>
 8012634:	4603      	mov	r3, r0
 8012636:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8012638:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801263c:	f113 0f04 	cmn.w	r3, #4
 8012640:	d104      	bne.n	801264c <lwip_netconn_do_writemore+0x338>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012642:	7b7b      	ldrb	r3, [r7, #13]
 8012644:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012646:	2301      	movs	r3, #1
 8012648:	76fb      	strb	r3, [r7, #27]
 801264a:	e011      	b.n	8012670 <lwip_netconn_do_writemore+0x35c>
      } else if (dontblock) {
 801264c:	7e3b      	ldrb	r3, [r7, #24]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d00e      	beq.n	8012670 <lwip_netconn_do_writemore+0x35c>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012656:	699b      	ldr	r3, [r3, #24]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d102      	bne.n	8012662 <lwip_netconn_do_writemore+0x34e>
 801265c:	f06f 0306 	mvn.w	r3, #6
 8012660:	e000      	b.n	8012664 <lwip_netconn_do_writemore+0x350>
 8012662:	2300      	movs	r3, #0
 8012664:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012666:	2301      	movs	r3, #1
 8012668:	76fb      	strb	r3, [r7, #27]
 801266a:	e001      	b.n	8012670 <lwip_netconn_do_writemore+0x35c>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 801266c:	2301      	movs	r3, #1
 801266e:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8012670:	7efb      	ldrb	r3, [r7, #27]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d015      	beq.n	80126a2 <lwip_netconn_do_writemore+0x38e>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	330c      	adds	r3, #12
 801267e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012684:	7ffa      	ldrb	r2, [r7, #31]
 8012686:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	2200      	movs	r2, #0
 801268c:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	2200      	movs	r2, #0
 8012692:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8012694:	78fb      	ldrb	r3, [r7, #3]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d006      	beq.n	80126a8 <lwip_netconn_do_writemore+0x394>
#endif
    {
      sys_sem_signal(op_completed_sem);
 801269a:	68b8      	ldr	r0, [r7, #8]
 801269c:	f00d fbfa 	bl	801fe94 <sys_sem_signal>
 80126a0:	e002      	b.n	80126a8 <lwip_netconn_do_writemore+0x394>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80126a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80126a6:	e000      	b.n	80126aa <lwip_netconn_do_writemore+0x396>
  }
#endif
  return ERR_OK;
 80126a8:	2300      	movs	r3, #0
}
 80126aa:	4618      	mov	r0, r3
 80126ac:	3720      	adds	r7, #32
 80126ae:	46bd      	mov	sp, r7
 80126b0:	bd80      	pop	{r7, pc}
 80126b2:	bf00      	nop

080126b4 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b084      	sub	sp, #16
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80126c0:	68bb      	ldr	r3, [r7, #8]
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	4618      	mov	r0, r3
 80126c6:	f7fe fd08 	bl	80110da <netconn_err>
 80126ca:	4603      	mov	r3, r0
 80126cc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80126ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d166      	bne.n	80127a4 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80126d6:	68bb      	ldr	r3, [r7, #8]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	781b      	ldrb	r3, [r3, #0]
 80126dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80126e0:	2b10      	cmp	r3, #16
 80126e2:	d15d      	bne.n	80127a0 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 80126e4:	68bb      	ldr	r3, [r7, #8]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	785b      	ldrb	r3, [r3, #1]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d002      	beq.n	80126f4 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 80126ee:	23fb      	movs	r3, #251	; 0xfb
 80126f0:	73fb      	strb	r3, [r7, #15]
 80126f2:	e057      	b.n	80127a4 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 80126f4:	68bb      	ldr	r3, [r7, #8]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	685b      	ldr	r3, [r3, #4]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d04d      	beq.n	801279a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 80126fe:	68bb      	ldr	r3, [r7, #8]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	2201      	movs	r2, #1
 8012704:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8012706:	68bb      	ldr	r3, [r7, #8]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801270c:	2b00      	cmp	r3, #0
 801270e:	d006      	beq.n	801271e <lwip_netconn_do_write+0x6a>
 8012710:	4b28      	ldr	r3, [pc, #160]	; (80127b4 <lwip_netconn_do_write+0x100>)
 8012712:	f240 7223 	movw	r2, #1827	; 0x723
 8012716:	4928      	ldr	r1, [pc, #160]	; (80127b8 <lwip_netconn_do_write+0x104>)
 8012718:	4828      	ldr	r0, [pc, #160]	; (80127bc <lwip_netconn_do_write+0x108>)
 801271a:	f00e fffd 	bl	8021718 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 801271e:	68bb      	ldr	r3, [r7, #8]
 8012720:	695b      	ldr	r3, [r3, #20]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d106      	bne.n	8012734 <lwip_netconn_do_write+0x80>
 8012726:	4b23      	ldr	r3, [pc, #140]	; (80127b4 <lwip_netconn_do_write+0x100>)
 8012728:	f240 7224 	movw	r2, #1828	; 0x724
 801272c:	4924      	ldr	r1, [pc, #144]	; (80127c0 <lwip_netconn_do_write+0x10c>)
 801272e:	4823      	ldr	r0, [pc, #140]	; (80127bc <lwip_netconn_do_write+0x108>)
 8012730:	f00e fff2 	bl	8021718 <iprintf>
        msg->conn->current_msg = msg;
 8012734:	68bb      	ldr	r3, [r7, #8]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	68ba      	ldr	r2, [r7, #8]
 801273a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 801273c:	68bb      	ldr	r3, [r7, #8]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	2100      	movs	r1, #0
 8012742:	4618      	mov	r0, r3
 8012744:	f7ff fde6 	bl	8012314 <lwip_netconn_do_writemore>
 8012748:	4603      	mov	r3, r0
 801274a:	2b00      	cmp	r3, #0
 801274c:	d02e      	beq.n	80127ac <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 801274e:	68bb      	ldr	r3, [r7, #8]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	785b      	ldrb	r3, [r3, #1]
 8012754:	2b01      	cmp	r3, #1
 8012756:	d006      	beq.n	8012766 <lwip_netconn_do_write+0xb2>
 8012758:	4b16      	ldr	r3, [pc, #88]	; (80127b4 <lwip_netconn_do_write+0x100>)
 801275a:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 801275e:	4919      	ldr	r1, [pc, #100]	; (80127c4 <lwip_netconn_do_write+0x110>)
 8012760:	4816      	ldr	r0, [pc, #88]	; (80127bc <lwip_netconn_do_write+0x108>)
 8012762:	f00e ffd9 	bl	8021718 <iprintf>
          UNLOCK_TCPIP_CORE();
 8012766:	4818      	ldr	r0, [pc, #96]	; (80127c8 <lwip_netconn_do_write+0x114>)
 8012768:	f00d fc05 	bl	801ff76 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 801276c:	68bb      	ldr	r3, [r7, #8]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	330c      	adds	r3, #12
 8012772:	2100      	movs	r1, #0
 8012774:	4618      	mov	r0, r3
 8012776:	f00d fb5c 	bl	801fe32 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 801277a:	4813      	ldr	r0, [pc, #76]	; (80127c8 <lwip_netconn_do_write+0x114>)
 801277c:	f00d fbec 	bl	801ff58 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8012780:	68bb      	ldr	r3, [r7, #8]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	785b      	ldrb	r3, [r3, #1]
 8012786:	2b01      	cmp	r3, #1
 8012788:	d110      	bne.n	80127ac <lwip_netconn_do_write+0xf8>
 801278a:	4b0a      	ldr	r3, [pc, #40]	; (80127b4 <lwip_netconn_do_write+0x100>)
 801278c:	f240 722c 	movw	r2, #1836	; 0x72c
 8012790:	490c      	ldr	r1, [pc, #48]	; (80127c4 <lwip_netconn_do_write+0x110>)
 8012792:	480a      	ldr	r0, [pc, #40]	; (80127bc <lwip_netconn_do_write+0x108>)
 8012794:	f00e ffc0 	bl	8021718 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8012798:	e008      	b.n	80127ac <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 801279a:	23f5      	movs	r3, #245	; 0xf5
 801279c:	73fb      	strb	r3, [r7, #15]
 801279e:	e001      	b.n	80127a4 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 80127a0:	23fa      	movs	r3, #250	; 0xfa
 80127a2:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 80127a4:	68bb      	ldr	r3, [r7, #8]
 80127a6:	7bfa      	ldrb	r2, [r7, #15]
 80127a8:	711a      	strb	r2, [r3, #4]
 80127aa:	e000      	b.n	80127ae <lwip_netconn_do_write+0xfa>
        return;
 80127ac:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 80127ae:	3710      	adds	r7, #16
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}
 80127b4:	08023e20 	.word	0x08023e20
 80127b8:	080241c4 	.word	0x080241c4
 80127bc:	08023e64 	.word	0x08023e64
 80127c0:	0802434c 	.word	0x0802434c
 80127c4:	080241e0 	.word	0x080241e0
 80127c8:	2000eba0 	.word	0x2000eba0

080127cc <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b084      	sub	sp, #16
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	785b      	ldrb	r3, [r3, #1]
 80127de:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	685b      	ldr	r3, [r3, #4]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d069      	beq.n	80128be <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	781b      	ldrb	r3, [r3, #0]
 80127f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 80127f4:	2b10      	cmp	r3, #16
 80127f6:	d162      	bne.n	80128be <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80127fc:	2b03      	cmp	r3, #3
 80127fe:	d002      	beq.n	8012806 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8012800:	7afb      	ldrb	r3, [r7, #11]
 8012802:	2b02      	cmp	r3, #2
 8012804:	d05b      	beq.n	80128be <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8012806:	7afb      	ldrb	r3, [r7, #11]
 8012808:	2b03      	cmp	r3, #3
 801280a:	d103      	bne.n	8012814 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	22f5      	movs	r2, #245	; 0xf5
 8012810:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8012812:	e059      	b.n	80128c8 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8012814:	7afb      	ldrb	r3, [r7, #11]
 8012816:	2b01      	cmp	r3, #1
 8012818:	d103      	bne.n	8012822 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	22fb      	movs	r2, #251	; 0xfb
 801281e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8012820:	e052      	b.n	80128c8 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	7a1b      	ldrb	r3, [r3, #8]
 8012826:	f003 0301 	and.w	r3, r3, #1
 801282a:	2b00      	cmp	r3, #0
 801282c:	d004      	beq.n	8012838 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	4618      	mov	r0, r3
 8012834:	f7ff f998 	bl	8011b68 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801283e:	2b00      	cmp	r3, #0
 8012840:	d006      	beq.n	8012850 <lwip_netconn_do_close+0x84>
 8012842:	4b23      	ldr	r3, [pc, #140]	; (80128d0 <lwip_netconn_do_close+0x104>)
 8012844:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8012848:	4922      	ldr	r1, [pc, #136]	; (80128d4 <lwip_netconn_do_close+0x108>)
 801284a:	4823      	ldr	r0, [pc, #140]	; (80128d8 <lwip_netconn_do_close+0x10c>)
 801284c:	f00e ff64 	bl	8021718 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	2204      	movs	r2, #4
 8012856:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	68fa      	ldr	r2, [r7, #12]
 801285e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	2100      	movs	r1, #0
 8012866:	4618      	mov	r0, r3
 8012868:	f7ff f9fc 	bl	8011c64 <lwip_netconn_do_close_internal>
 801286c:	4603      	mov	r3, r0
 801286e:	2b00      	cmp	r3, #0
 8012870:	d029      	beq.n	80128c6 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	785b      	ldrb	r3, [r3, #1]
 8012878:	2b04      	cmp	r3, #4
 801287a:	d006      	beq.n	801288a <lwip_netconn_do_close+0xbe>
 801287c:	4b14      	ldr	r3, [pc, #80]	; (80128d0 <lwip_netconn_do_close+0x104>)
 801287e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8012882:	4916      	ldr	r1, [pc, #88]	; (80128dc <lwip_netconn_do_close+0x110>)
 8012884:	4814      	ldr	r0, [pc, #80]	; (80128d8 <lwip_netconn_do_close+0x10c>)
 8012886:	f00e ff47 	bl	8021718 <iprintf>
        UNLOCK_TCPIP_CORE();
 801288a:	4815      	ldr	r0, [pc, #84]	; (80128e0 <lwip_netconn_do_close+0x114>)
 801288c:	f00d fb73 	bl	801ff76 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	330c      	adds	r3, #12
 8012896:	2100      	movs	r1, #0
 8012898:	4618      	mov	r0, r3
 801289a:	f00d faca 	bl	801fe32 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 801289e:	4810      	ldr	r0, [pc, #64]	; (80128e0 <lwip_netconn_do_close+0x114>)
 80128a0:	f00d fb5a 	bl	801ff58 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	785b      	ldrb	r3, [r3, #1]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d00b      	beq.n	80128c6 <lwip_netconn_do_close+0xfa>
 80128ae:	4b08      	ldr	r3, [pc, #32]	; (80128d0 <lwip_netconn_do_close+0x104>)
 80128b0:	f240 72c6 	movw	r2, #1990	; 0x7c6
 80128b4:	4909      	ldr	r1, [pc, #36]	; (80128dc <lwip_netconn_do_close+0x110>)
 80128b6:	4808      	ldr	r0, [pc, #32]	; (80128d8 <lwip_netconn_do_close+0x10c>)
 80128b8:	f00e ff2e 	bl	8021718 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80128bc:	e003      	b.n	80128c6 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	22f5      	movs	r2, #245	; 0xf5
 80128c2:	711a      	strb	r2, [r3, #4]
 80128c4:	e000      	b.n	80128c8 <lwip_netconn_do_close+0xfc>
      return;
 80128c6:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80128c8:	3710      	adds	r7, #16
 80128ca:	46bd      	mov	sp, r7
 80128cc:	bd80      	pop	{r7, pc}
 80128ce:	bf00      	nop
 80128d0:	08023e20 	.word	0x08023e20
 80128d4:	080241c4 	.word	0x080241c4
 80128d8:	08023e64 	.word	0x08023e64
 80128dc:	080241e0 	.word	0x080241e0
 80128e0:	2000eba0 	.word	0x2000eba0

080128e4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b082      	sub	sp, #8
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d013      	beq.n	801291a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d00b      	beq.n	8012912 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	4618      	mov	r0, r3
 8012900:	f001 fdc6 	bl	8014490 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	2200      	movs	r2, #0
 8012908:	605a      	str	r2, [r3, #4]
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	685a      	ldr	r2, [r3, #4]
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8012912:	6879      	ldr	r1, [r7, #4]
 8012914:	2006      	movs	r0, #6
 8012916:	f000 ff0b 	bl	8013730 <memp_free>
  }
}
 801291a:	bf00      	nop
 801291c:	3708      	adds	r7, #8
 801291e:	46bd      	mov	sp, r7
 8012920:	bd80      	pop	{r7, pc}
	...

08012924 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b084      	sub	sp, #16
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
 801292c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801292e:	f008 fa6f 	bl	801ae10 <sys_timeouts_sleeptime>
 8012932:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801293a:	d10b      	bne.n	8012954 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801293c:	4813      	ldr	r0, [pc, #76]	; (801298c <tcpip_timeouts_mbox_fetch+0x68>)
 801293e:	f00d fb1a 	bl	801ff76 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012942:	2200      	movs	r2, #0
 8012944:	6839      	ldr	r1, [r7, #0]
 8012946:	6878      	ldr	r0, [r7, #4]
 8012948:	f00d f9d2 	bl	801fcf0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801294c:	480f      	ldr	r0, [pc, #60]	; (801298c <tcpip_timeouts_mbox_fetch+0x68>)
 801294e:	f00d fb03 	bl	801ff58 <sys_mutex_lock>
    return;
 8012952:	e018      	b.n	8012986 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d102      	bne.n	8012960 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801295a:	f008 fa1f 	bl	801ad9c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801295e:	e7e6      	b.n	801292e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012960:	480a      	ldr	r0, [pc, #40]	; (801298c <tcpip_timeouts_mbox_fetch+0x68>)
 8012962:	f00d fb08 	bl	801ff76 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8012966:	68fa      	ldr	r2, [r7, #12]
 8012968:	6839      	ldr	r1, [r7, #0]
 801296a:	6878      	ldr	r0, [r7, #4]
 801296c:	f00d f9c0 	bl	801fcf0 <sys_arch_mbox_fetch>
 8012970:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8012972:	4806      	ldr	r0, [pc, #24]	; (801298c <tcpip_timeouts_mbox_fetch+0x68>)
 8012974:	f00d faf0 	bl	801ff58 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012978:	68bb      	ldr	r3, [r7, #8]
 801297a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801297e:	d102      	bne.n	8012986 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012980:	f008 fa0c 	bl	801ad9c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012984:	e7d3      	b.n	801292e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8012986:	3710      	adds	r7, #16
 8012988:	46bd      	mov	sp, r7
 801298a:	bd80      	pop	{r7, pc}
 801298c:	2000eba0 	.word	0x2000eba0

08012990 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b084      	sub	sp, #16
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012998:	4810      	ldr	r0, [pc, #64]	; (80129dc <tcpip_thread+0x4c>)
 801299a:	f00d fadd 	bl	801ff58 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801299e:	4b10      	ldr	r3, [pc, #64]	; (80129e0 <tcpip_thread+0x50>)
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d005      	beq.n	80129b2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80129a6:	4b0e      	ldr	r3, [pc, #56]	; (80129e0 <tcpip_thread+0x50>)
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	4a0e      	ldr	r2, [pc, #56]	; (80129e4 <tcpip_thread+0x54>)
 80129ac:	6812      	ldr	r2, [r2, #0]
 80129ae:	4610      	mov	r0, r2
 80129b0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80129b2:	f107 030c 	add.w	r3, r7, #12
 80129b6:	4619      	mov	r1, r3
 80129b8:	480b      	ldr	r0, [pc, #44]	; (80129e8 <tcpip_thread+0x58>)
 80129ba:	f7ff ffb3 	bl	8012924 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d106      	bne.n	80129d2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80129c4:	4b09      	ldr	r3, [pc, #36]	; (80129ec <tcpip_thread+0x5c>)
 80129c6:	2291      	movs	r2, #145	; 0x91
 80129c8:	4909      	ldr	r1, [pc, #36]	; (80129f0 <tcpip_thread+0x60>)
 80129ca:	480a      	ldr	r0, [pc, #40]	; (80129f4 <tcpip_thread+0x64>)
 80129cc:	f00e fea4 	bl	8021718 <iprintf>
      continue;
 80129d0:	e003      	b.n	80129da <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	4618      	mov	r0, r3
 80129d6:	f000 f80f 	bl	80129f8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80129da:	e7ea      	b.n	80129b2 <tcpip_thread+0x22>
 80129dc:	2000eba0 	.word	0x2000eba0
 80129e0:	2000eb94 	.word	0x2000eb94
 80129e4:	2000eb98 	.word	0x2000eb98
 80129e8:	2000eb9c 	.word	0x2000eb9c
 80129ec:	08024378 	.word	0x08024378
 80129f0:	080243a8 	.word	0x080243a8
 80129f4:	080243c8 	.word	0x080243c8

080129f8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b082      	sub	sp, #8
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	781b      	ldrb	r3, [r3, #0]
 8012a04:	2b02      	cmp	r3, #2
 8012a06:	d026      	beq.n	8012a56 <tcpip_thread_handle_msg+0x5e>
 8012a08:	2b02      	cmp	r3, #2
 8012a0a:	dc2b      	bgt.n	8012a64 <tcpip_thread_handle_msg+0x6c>
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d002      	beq.n	8012a16 <tcpip_thread_handle_msg+0x1e>
 8012a10:	2b01      	cmp	r3, #1
 8012a12:	d015      	beq.n	8012a40 <tcpip_thread_handle_msg+0x48>
 8012a14:	e026      	b.n	8012a64 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	68db      	ldr	r3, [r3, #12]
 8012a1a:	687a      	ldr	r2, [r7, #4]
 8012a1c:	6850      	ldr	r0, [r2, #4]
 8012a1e:	687a      	ldr	r2, [r7, #4]
 8012a20:	6892      	ldr	r2, [r2, #8]
 8012a22:	4611      	mov	r1, r2
 8012a24:	4798      	blx	r3
 8012a26:	4603      	mov	r3, r0
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d004      	beq.n	8012a36 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	685b      	ldr	r3, [r3, #4]
 8012a30:	4618      	mov	r0, r3
 8012a32:	f001 fd2d 	bl	8014490 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012a36:	6879      	ldr	r1, [r7, #4]
 8012a38:	2009      	movs	r0, #9
 8012a3a:	f000 fe79 	bl	8013730 <memp_free>
      break;
 8012a3e:	e018      	b.n	8012a72 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	685b      	ldr	r3, [r3, #4]
 8012a44:	687a      	ldr	r2, [r7, #4]
 8012a46:	6892      	ldr	r2, [r2, #8]
 8012a48:	4610      	mov	r0, r2
 8012a4a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012a4c:	6879      	ldr	r1, [r7, #4]
 8012a4e:	2008      	movs	r0, #8
 8012a50:	f000 fe6e 	bl	8013730 <memp_free>
      break;
 8012a54:	e00d      	b.n	8012a72 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	685b      	ldr	r3, [r3, #4]
 8012a5a:	687a      	ldr	r2, [r7, #4]
 8012a5c:	6892      	ldr	r2, [r2, #8]
 8012a5e:	4610      	mov	r0, r2
 8012a60:	4798      	blx	r3
      break;
 8012a62:	e006      	b.n	8012a72 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012a64:	4b05      	ldr	r3, [pc, #20]	; (8012a7c <tcpip_thread_handle_msg+0x84>)
 8012a66:	22cf      	movs	r2, #207	; 0xcf
 8012a68:	4905      	ldr	r1, [pc, #20]	; (8012a80 <tcpip_thread_handle_msg+0x88>)
 8012a6a:	4806      	ldr	r0, [pc, #24]	; (8012a84 <tcpip_thread_handle_msg+0x8c>)
 8012a6c:	f00e fe54 	bl	8021718 <iprintf>
      break;
 8012a70:	bf00      	nop
  }
}
 8012a72:	bf00      	nop
 8012a74:	3708      	adds	r7, #8
 8012a76:	46bd      	mov	sp, r7
 8012a78:	bd80      	pop	{r7, pc}
 8012a7a:	bf00      	nop
 8012a7c:	08024378 	.word	0x08024378
 8012a80:	080243a8 	.word	0x080243a8
 8012a84:	080243c8 	.word	0x080243c8

08012a88 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b086      	sub	sp, #24
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	60f8      	str	r0, [r7, #12]
 8012a90:	60b9      	str	r1, [r7, #8]
 8012a92:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012a94:	481a      	ldr	r0, [pc, #104]	; (8012b00 <tcpip_inpkt+0x78>)
 8012a96:	f00d f986 	bl	801fda6 <sys_mbox_valid>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d105      	bne.n	8012aac <tcpip_inpkt+0x24>
 8012aa0:	4b18      	ldr	r3, [pc, #96]	; (8012b04 <tcpip_inpkt+0x7c>)
 8012aa2:	22fc      	movs	r2, #252	; 0xfc
 8012aa4:	4918      	ldr	r1, [pc, #96]	; (8012b08 <tcpip_inpkt+0x80>)
 8012aa6:	4819      	ldr	r0, [pc, #100]	; (8012b0c <tcpip_inpkt+0x84>)
 8012aa8:	f00e fe36 	bl	8021718 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012aac:	2009      	movs	r0, #9
 8012aae:	f000 fdc9 	bl	8013644 <memp_malloc>
 8012ab2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8012ab4:	697b      	ldr	r3, [r7, #20]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d102      	bne.n	8012ac0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012abe:	e01a      	b.n	8012af6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8012ac6:	697b      	ldr	r3, [r7, #20]
 8012ac8:	68fa      	ldr	r2, [r7, #12]
 8012aca:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012acc:	697b      	ldr	r3, [r7, #20]
 8012ace:	68ba      	ldr	r2, [r7, #8]
 8012ad0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8012ad2:	697b      	ldr	r3, [r7, #20]
 8012ad4:	687a      	ldr	r2, [r7, #4]
 8012ad6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012ad8:	6979      	ldr	r1, [r7, #20]
 8012ada:	4809      	ldr	r0, [pc, #36]	; (8012b00 <tcpip_inpkt+0x78>)
 8012adc:	f00d f8ee 	bl	801fcbc <sys_mbox_trypost>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d006      	beq.n	8012af4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012ae6:	6979      	ldr	r1, [r7, #20]
 8012ae8:	2009      	movs	r0, #9
 8012aea:	f000 fe21 	bl	8013730 <memp_free>
    return ERR_MEM;
 8012aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012af2:	e000      	b.n	8012af6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8012af4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8012af6:	4618      	mov	r0, r3
 8012af8:	3718      	adds	r7, #24
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}
 8012afe:	bf00      	nop
 8012b00:	2000eb9c 	.word	0x2000eb9c
 8012b04:	08024378 	.word	0x08024378
 8012b08:	080243f0 	.word	0x080243f0
 8012b0c:	080243c8 	.word	0x080243c8

08012b10 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b082      	sub	sp, #8
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
 8012b18:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012b20:	f003 0318 	and.w	r3, r3, #24
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d006      	beq.n	8012b36 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012b28:	4a08      	ldr	r2, [pc, #32]	; (8012b4c <tcpip_input+0x3c>)
 8012b2a:	6839      	ldr	r1, [r7, #0]
 8012b2c:	6878      	ldr	r0, [r7, #4]
 8012b2e:	f7ff ffab 	bl	8012a88 <tcpip_inpkt>
 8012b32:	4603      	mov	r3, r0
 8012b34:	e005      	b.n	8012b42 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8012b36:	4a06      	ldr	r2, [pc, #24]	; (8012b50 <tcpip_input+0x40>)
 8012b38:	6839      	ldr	r1, [r7, #0]
 8012b3a:	6878      	ldr	r0, [r7, #4]
 8012b3c:	f7ff ffa4 	bl	8012a88 <tcpip_inpkt>
 8012b40:	4603      	mov	r3, r0
}
 8012b42:	4618      	mov	r0, r3
 8012b44:	3708      	adds	r7, #8
 8012b46:	46bd      	mov	sp, r7
 8012b48:	bd80      	pop	{r7, pc}
 8012b4a:	bf00      	nop
 8012b4c:	0801faa9 	.word	0x0801faa9
 8012b50:	0801e855 	.word	0x0801e855

08012b54 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b084      	sub	sp, #16
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	6078      	str	r0, [r7, #4]
 8012b5c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012b5e:	4819      	ldr	r0, [pc, #100]	; (8012bc4 <tcpip_try_callback+0x70>)
 8012b60:	f00d f921 	bl	801fda6 <sys_mbox_valid>
 8012b64:	4603      	mov	r3, r0
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d106      	bne.n	8012b78 <tcpip_try_callback+0x24>
 8012b6a:	4b17      	ldr	r3, [pc, #92]	; (8012bc8 <tcpip_try_callback+0x74>)
 8012b6c:	f240 125d 	movw	r2, #349	; 0x15d
 8012b70:	4916      	ldr	r1, [pc, #88]	; (8012bcc <tcpip_try_callback+0x78>)
 8012b72:	4817      	ldr	r0, [pc, #92]	; (8012bd0 <tcpip_try_callback+0x7c>)
 8012b74:	f00e fdd0 	bl	8021718 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012b78:	2008      	movs	r0, #8
 8012b7a:	f000 fd63 	bl	8013644 <memp_malloc>
 8012b7e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d102      	bne.n	8012b8c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8012b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012b8a:	e017      	b.n	8012bbc <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	2201      	movs	r2, #1
 8012b90:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	687a      	ldr	r2, [r7, #4]
 8012b96:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	683a      	ldr	r2, [r7, #0]
 8012b9c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012b9e:	68f9      	ldr	r1, [r7, #12]
 8012ba0:	4808      	ldr	r0, [pc, #32]	; (8012bc4 <tcpip_try_callback+0x70>)
 8012ba2:	f00d f88b 	bl	801fcbc <sys_mbox_trypost>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d006      	beq.n	8012bba <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012bac:	68f9      	ldr	r1, [r7, #12]
 8012bae:	2008      	movs	r0, #8
 8012bb0:	f000 fdbe 	bl	8013730 <memp_free>
    return ERR_MEM;
 8012bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012bb8:	e000      	b.n	8012bbc <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012bba:	2300      	movs	r3, #0
}
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	3710      	adds	r7, #16
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	bd80      	pop	{r7, pc}
 8012bc4:	2000eb9c 	.word	0x2000eb9c
 8012bc8:	08024378 	.word	0x08024378
 8012bcc:	080243f0 	.word	0x080243f0
 8012bd0:	080243c8 	.word	0x080243c8

08012bd4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b084      	sub	sp, #16
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	60f8      	str	r0, [r7, #12]
 8012bdc:	60b9      	str	r1, [r7, #8]
 8012bde:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8012be0:	4806      	ldr	r0, [pc, #24]	; (8012bfc <tcpip_send_msg_wait_sem+0x28>)
 8012be2:	f00d f9b9 	bl	801ff58 <sys_mutex_lock>
  fn(apimsg);
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	68b8      	ldr	r0, [r7, #8]
 8012bea:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8012bec:	4803      	ldr	r0, [pc, #12]	; (8012bfc <tcpip_send_msg_wait_sem+0x28>)
 8012bee:	f00d f9c2 	bl	801ff76 <sys_mutex_unlock>
  return ERR_OK;
 8012bf2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	3710      	adds	r7, #16
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd80      	pop	{r7, pc}
 8012bfc:	2000eba0 	.word	0x2000eba0

08012c00 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b084      	sub	sp, #16
 8012c04:	af02      	add	r7, sp, #8
 8012c06:	6078      	str	r0, [r7, #4]
 8012c08:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012c0a:	f000 f871 	bl	8012cf0 <lwip_init>

  tcpip_init_done = initfunc;
 8012c0e:	4a17      	ldr	r2, [pc, #92]	; (8012c6c <tcpip_init+0x6c>)
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8012c14:	4a16      	ldr	r2, [pc, #88]	; (8012c70 <tcpip_init+0x70>)
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012c1a:	2106      	movs	r1, #6
 8012c1c:	4815      	ldr	r0, [pc, #84]	; (8012c74 <tcpip_init+0x74>)
 8012c1e:	f00d f819 	bl	801fc54 <sys_mbox_new>
 8012c22:	4603      	mov	r3, r0
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d006      	beq.n	8012c36 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012c28:	4b13      	ldr	r3, [pc, #76]	; (8012c78 <tcpip_init+0x78>)
 8012c2a:	f240 2261 	movw	r2, #609	; 0x261
 8012c2e:	4913      	ldr	r1, [pc, #76]	; (8012c7c <tcpip_init+0x7c>)
 8012c30:	4813      	ldr	r0, [pc, #76]	; (8012c80 <tcpip_init+0x80>)
 8012c32:	f00e fd71 	bl	8021718 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8012c36:	4813      	ldr	r0, [pc, #76]	; (8012c84 <tcpip_init+0x84>)
 8012c38:	f00d f972 	bl	801ff20 <sys_mutex_new>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d006      	beq.n	8012c50 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8012c42:	4b0d      	ldr	r3, [pc, #52]	; (8012c78 <tcpip_init+0x78>)
 8012c44:	f240 2265 	movw	r2, #613	; 0x265
 8012c48:	490f      	ldr	r1, [pc, #60]	; (8012c88 <tcpip_init+0x88>)
 8012c4a:	480d      	ldr	r0, [pc, #52]	; (8012c80 <tcpip_init+0x80>)
 8012c4c:	f00e fd64 	bl	8021718 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012c50:	2300      	movs	r3, #0
 8012c52:	9300      	str	r3, [sp, #0]
 8012c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012c58:	2200      	movs	r2, #0
 8012c5a:	490c      	ldr	r1, [pc, #48]	; (8012c8c <tcpip_init+0x8c>)
 8012c5c:	480c      	ldr	r0, [pc, #48]	; (8012c90 <tcpip_init+0x90>)
 8012c5e:	f00d f997 	bl	801ff90 <sys_thread_new>
}
 8012c62:	bf00      	nop
 8012c64:	3708      	adds	r7, #8
 8012c66:	46bd      	mov	sp, r7
 8012c68:	bd80      	pop	{r7, pc}
 8012c6a:	bf00      	nop
 8012c6c:	2000eb94 	.word	0x2000eb94
 8012c70:	2000eb98 	.word	0x2000eb98
 8012c74:	2000eb9c 	.word	0x2000eb9c
 8012c78:	08024378 	.word	0x08024378
 8012c7c:	08024400 	.word	0x08024400
 8012c80:	080243c8 	.word	0x080243c8
 8012c84:	2000eba0 	.word	0x2000eba0
 8012c88:	08024424 	.word	0x08024424
 8012c8c:	08012991 	.word	0x08012991
 8012c90:	08024448 	.word	0x08024448

08012c94 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8012c94:	b480      	push	{r7}
 8012c96:	b083      	sub	sp, #12
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8012c9e:	88fb      	ldrh	r3, [r7, #6]
 8012ca0:	021b      	lsls	r3, r3, #8
 8012ca2:	b21a      	sxth	r2, r3
 8012ca4:	88fb      	ldrh	r3, [r7, #6]
 8012ca6:	0a1b      	lsrs	r3, r3, #8
 8012ca8:	b29b      	uxth	r3, r3
 8012caa:	b21b      	sxth	r3, r3
 8012cac:	4313      	orrs	r3, r2
 8012cae:	b21b      	sxth	r3, r3
 8012cb0:	b29b      	uxth	r3, r3
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	370c      	adds	r7, #12
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbc:	4770      	bx	lr

08012cbe <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8012cbe:	b480      	push	{r7}
 8012cc0:	b083      	sub	sp, #12
 8012cc2:	af00      	add	r7, sp, #0
 8012cc4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	061a      	lsls	r2, r3, #24
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	021b      	lsls	r3, r3, #8
 8012cce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012cd2:	431a      	orrs	r2, r3
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	0a1b      	lsrs	r3, r3, #8
 8012cd8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012cdc:	431a      	orrs	r2, r3
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	0e1b      	lsrs	r3, r3, #24
 8012ce2:	4313      	orrs	r3, r2
}
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	370c      	adds	r7, #12
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cee:	4770      	bx	lr

08012cf0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b082      	sub	sp, #8
 8012cf4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8012cfa:	f00d f903 	bl	801ff04 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8012cfe:	f000 f8d5 	bl	8012eac <mem_init>
  memp_init();
 8012d02:	f000 fc31 	bl	8013568 <memp_init>
  pbuf_init();
  netif_init();
 8012d06:	f000 fd3d 	bl	8013784 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8012d0a:	f008 f8b9 	bl	801ae80 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8012d0e:	f001 fe69 	bl	80149e4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8012d12:	f007 fffb 	bl	801ad0c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8012d16:	bf00      	nop
 8012d18:	3708      	adds	r7, #8
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}
	...

08012d20 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8012d20:	b480      	push	{r7}
 8012d22:	b083      	sub	sp, #12
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	4603      	mov	r3, r0
 8012d28:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8012d2a:	4b05      	ldr	r3, [pc, #20]	; (8012d40 <ptr_to_mem+0x20>)
 8012d2c:	681a      	ldr	r2, [r3, #0]
 8012d2e:	88fb      	ldrh	r3, [r7, #6]
 8012d30:	4413      	add	r3, r2
}
 8012d32:	4618      	mov	r0, r3
 8012d34:	370c      	adds	r7, #12
 8012d36:	46bd      	mov	sp, r7
 8012d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d3c:	4770      	bx	lr
 8012d3e:	bf00      	nop
 8012d40:	2000f210 	.word	0x2000f210

08012d44 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012d44:	b480      	push	{r7}
 8012d46:	b083      	sub	sp, #12
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8012d4c:	4b05      	ldr	r3, [pc, #20]	; (8012d64 <mem_to_ptr+0x20>)
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	687a      	ldr	r2, [r7, #4]
 8012d52:	1ad3      	subs	r3, r2, r3
 8012d54:	b29b      	uxth	r3, r3
}
 8012d56:	4618      	mov	r0, r3
 8012d58:	370c      	adds	r7, #12
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d60:	4770      	bx	lr
 8012d62:	bf00      	nop
 8012d64:	2000f210 	.word	0x2000f210

08012d68 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8012d68:	b590      	push	{r4, r7, lr}
 8012d6a:	b085      	sub	sp, #20
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8012d70:	4b45      	ldr	r3, [pc, #276]	; (8012e88 <plug_holes+0x120>)
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	687a      	ldr	r2, [r7, #4]
 8012d76:	429a      	cmp	r2, r3
 8012d78:	d206      	bcs.n	8012d88 <plug_holes+0x20>
 8012d7a:	4b44      	ldr	r3, [pc, #272]	; (8012e8c <plug_holes+0x124>)
 8012d7c:	f240 12df 	movw	r2, #479	; 0x1df
 8012d80:	4943      	ldr	r1, [pc, #268]	; (8012e90 <plug_holes+0x128>)
 8012d82:	4844      	ldr	r0, [pc, #272]	; (8012e94 <plug_holes+0x12c>)
 8012d84:	f00e fcc8 	bl	8021718 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8012d88:	4b43      	ldr	r3, [pc, #268]	; (8012e98 <plug_holes+0x130>)
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	687a      	ldr	r2, [r7, #4]
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	d306      	bcc.n	8012da0 <plug_holes+0x38>
 8012d92:	4b3e      	ldr	r3, [pc, #248]	; (8012e8c <plug_holes+0x124>)
 8012d94:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012d98:	4940      	ldr	r1, [pc, #256]	; (8012e9c <plug_holes+0x134>)
 8012d9a:	483e      	ldr	r0, [pc, #248]	; (8012e94 <plug_holes+0x12c>)
 8012d9c:	f00e fcbc 	bl	8021718 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	791b      	ldrb	r3, [r3, #4]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d006      	beq.n	8012db6 <plug_holes+0x4e>
 8012da8:	4b38      	ldr	r3, [pc, #224]	; (8012e8c <plug_holes+0x124>)
 8012daa:	f240 12e1 	movw	r2, #481	; 0x1e1
 8012dae:	493c      	ldr	r1, [pc, #240]	; (8012ea0 <plug_holes+0x138>)
 8012db0:	4838      	ldr	r0, [pc, #224]	; (8012e94 <plug_holes+0x12c>)
 8012db2:	f00e fcb1 	bl	8021718 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	881b      	ldrh	r3, [r3, #0]
 8012dba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012dbe:	d906      	bls.n	8012dce <plug_holes+0x66>
 8012dc0:	4b32      	ldr	r3, [pc, #200]	; (8012e8c <plug_holes+0x124>)
 8012dc2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8012dc6:	4937      	ldr	r1, [pc, #220]	; (8012ea4 <plug_holes+0x13c>)
 8012dc8:	4832      	ldr	r0, [pc, #200]	; (8012e94 <plug_holes+0x12c>)
 8012dca:	f00e fca5 	bl	8021718 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	881b      	ldrh	r3, [r3, #0]
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7ff ffa4 	bl	8012d20 <ptr_to_mem>
 8012dd8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8012dda:	687a      	ldr	r2, [r7, #4]
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	429a      	cmp	r2, r3
 8012de0:	d024      	beq.n	8012e2c <plug_holes+0xc4>
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	791b      	ldrb	r3, [r3, #4]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d120      	bne.n	8012e2c <plug_holes+0xc4>
 8012dea:	4b2b      	ldr	r3, [pc, #172]	; (8012e98 <plug_holes+0x130>)
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	68fa      	ldr	r2, [r7, #12]
 8012df0:	429a      	cmp	r2, r3
 8012df2:	d01b      	beq.n	8012e2c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8012df4:	4b2c      	ldr	r3, [pc, #176]	; (8012ea8 <plug_holes+0x140>)
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	68fa      	ldr	r2, [r7, #12]
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d102      	bne.n	8012e04 <plug_holes+0x9c>
      lfree = mem;
 8012dfe:	4a2a      	ldr	r2, [pc, #168]	; (8012ea8 <plug_holes+0x140>)
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	881a      	ldrh	r2, [r3, #0]
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	881b      	ldrh	r3, [r3, #0]
 8012e10:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012e14:	d00a      	beq.n	8012e2c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	881b      	ldrh	r3, [r3, #0]
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f7ff ff80 	bl	8012d20 <ptr_to_mem>
 8012e20:	4604      	mov	r4, r0
 8012e22:	6878      	ldr	r0, [r7, #4]
 8012e24:	f7ff ff8e 	bl	8012d44 <mem_to_ptr>
 8012e28:	4603      	mov	r3, r0
 8012e2a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	885b      	ldrh	r3, [r3, #2]
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7ff ff75 	bl	8012d20 <ptr_to_mem>
 8012e36:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8012e38:	68ba      	ldr	r2, [r7, #8]
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	d01f      	beq.n	8012e80 <plug_holes+0x118>
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	791b      	ldrb	r3, [r3, #4]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d11b      	bne.n	8012e80 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012e48:	4b17      	ldr	r3, [pc, #92]	; (8012ea8 <plug_holes+0x140>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	687a      	ldr	r2, [r7, #4]
 8012e4e:	429a      	cmp	r2, r3
 8012e50:	d102      	bne.n	8012e58 <plug_holes+0xf0>
      lfree = pmem;
 8012e52:	4a15      	ldr	r2, [pc, #84]	; (8012ea8 <plug_holes+0x140>)
 8012e54:	68bb      	ldr	r3, [r7, #8]
 8012e56:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	881a      	ldrh	r2, [r3, #0]
 8012e5c:	68bb      	ldr	r3, [r7, #8]
 8012e5e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	881b      	ldrh	r3, [r3, #0]
 8012e64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012e68:	d00a      	beq.n	8012e80 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	881b      	ldrh	r3, [r3, #0]
 8012e6e:	4618      	mov	r0, r3
 8012e70:	f7ff ff56 	bl	8012d20 <ptr_to_mem>
 8012e74:	4604      	mov	r4, r0
 8012e76:	68b8      	ldr	r0, [r7, #8]
 8012e78:	f7ff ff64 	bl	8012d44 <mem_to_ptr>
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8012e80:	bf00      	nop
 8012e82:	3714      	adds	r7, #20
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd90      	pop	{r4, r7, pc}
 8012e88:	2000f210 	.word	0x2000f210
 8012e8c:	08024458 	.word	0x08024458
 8012e90:	08024488 	.word	0x08024488
 8012e94:	080244a0 	.word	0x080244a0
 8012e98:	2000f214 	.word	0x2000f214
 8012e9c:	080244c8 	.word	0x080244c8
 8012ea0:	080244e4 	.word	0x080244e4
 8012ea4:	08024500 	.word	0x08024500
 8012ea8:	2000f21c 	.word	0x2000f21c

08012eac <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b082      	sub	sp, #8
 8012eb0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8012eb2:	4b1f      	ldr	r3, [pc, #124]	; (8012f30 <mem_init+0x84>)
 8012eb4:	3303      	adds	r3, #3
 8012eb6:	f023 0303 	bic.w	r3, r3, #3
 8012eba:	461a      	mov	r2, r3
 8012ebc:	4b1d      	ldr	r3, [pc, #116]	; (8012f34 <mem_init+0x88>)
 8012ebe:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012ec0:	4b1c      	ldr	r3, [pc, #112]	; (8012f34 <mem_init+0x88>)
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8012ecc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8012eda:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8012ede:	f7ff ff1f 	bl	8012d20 <ptr_to_mem>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	4a14      	ldr	r2, [pc, #80]	; (8012f38 <mem_init+0x8c>)
 8012ee6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8012ee8:	4b13      	ldr	r3, [pc, #76]	; (8012f38 <mem_init+0x8c>)
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	2201      	movs	r2, #1
 8012eee:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8012ef0:	4b11      	ldr	r3, [pc, #68]	; (8012f38 <mem_init+0x8c>)
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8012ef8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8012efa:	4b0f      	ldr	r3, [pc, #60]	; (8012f38 <mem_init+0x8c>)
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8012f02:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8012f04:	4b0b      	ldr	r3, [pc, #44]	; (8012f34 <mem_init+0x88>)
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	4a0c      	ldr	r2, [pc, #48]	; (8012f3c <mem_init+0x90>)
 8012f0a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8012f0c:	480c      	ldr	r0, [pc, #48]	; (8012f40 <mem_init+0x94>)
 8012f0e:	f00d f807 	bl	801ff20 <sys_mutex_new>
 8012f12:	4603      	mov	r3, r0
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d006      	beq.n	8012f26 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8012f18:	4b0a      	ldr	r3, [pc, #40]	; (8012f44 <mem_init+0x98>)
 8012f1a:	f240 221f 	movw	r2, #543	; 0x21f
 8012f1e:	490a      	ldr	r1, [pc, #40]	; (8012f48 <mem_init+0x9c>)
 8012f20:	480a      	ldr	r0, [pc, #40]	; (8012f4c <mem_init+0xa0>)
 8012f22:	f00e fbf9 	bl	8021718 <iprintf>
  }
}
 8012f26:	bf00      	nop
 8012f28:	3708      	adds	r7, #8
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	bd80      	pop	{r7, pc}
 8012f2e:	bf00      	nop
 8012f30:	2000ebbc 	.word	0x2000ebbc
 8012f34:	2000f210 	.word	0x2000f210
 8012f38:	2000f214 	.word	0x2000f214
 8012f3c:	2000f21c 	.word	0x2000f21c
 8012f40:	2000f218 	.word	0x2000f218
 8012f44:	08024458 	.word	0x08024458
 8012f48:	0802452c 	.word	0x0802452c
 8012f4c:	080244a0 	.word	0x080244a0

08012f50 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b086      	sub	sp, #24
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8012f58:	6878      	ldr	r0, [r7, #4]
 8012f5a:	f7ff fef3 	bl	8012d44 <mem_to_ptr>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	881b      	ldrh	r3, [r3, #0]
 8012f66:	4618      	mov	r0, r3
 8012f68:	f7ff feda 	bl	8012d20 <ptr_to_mem>
 8012f6c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	885b      	ldrh	r3, [r3, #2]
 8012f72:	4618      	mov	r0, r3
 8012f74:	f7ff fed4 	bl	8012d20 <ptr_to_mem>
 8012f78:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	881b      	ldrh	r3, [r3, #0]
 8012f7e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012f82:	d818      	bhi.n	8012fb6 <mem_link_valid+0x66>
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	885b      	ldrh	r3, [r3, #2]
 8012f88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012f8c:	d813      	bhi.n	8012fb6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012f92:	8afa      	ldrh	r2, [r7, #22]
 8012f94:	429a      	cmp	r2, r3
 8012f96:	d004      	beq.n	8012fa2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	881b      	ldrh	r3, [r3, #0]
 8012f9c:	8afa      	ldrh	r2, [r7, #22]
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d109      	bne.n	8012fb6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012fa2:	4b08      	ldr	r3, [pc, #32]	; (8012fc4 <mem_link_valid+0x74>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012fa6:	693a      	ldr	r2, [r7, #16]
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	d006      	beq.n	8012fba <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012fac:	693b      	ldr	r3, [r7, #16]
 8012fae:	885b      	ldrh	r3, [r3, #2]
 8012fb0:	8afa      	ldrh	r2, [r7, #22]
 8012fb2:	429a      	cmp	r2, r3
 8012fb4:	d001      	beq.n	8012fba <mem_link_valid+0x6a>
    return 0;
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	e000      	b.n	8012fbc <mem_link_valid+0x6c>
  }
  return 1;
 8012fba:	2301      	movs	r3, #1
}
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	3718      	adds	r7, #24
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}
 8012fc4:	2000f214 	.word	0x2000f214

08012fc8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	b088      	sub	sp, #32
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d070      	beq.n	80130b8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	f003 0303 	and.w	r3, r3, #3
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d00d      	beq.n	8012ffc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8012fe0:	4b37      	ldr	r3, [pc, #220]	; (80130c0 <mem_free+0xf8>)
 8012fe2:	f240 2273 	movw	r2, #627	; 0x273
 8012fe6:	4937      	ldr	r1, [pc, #220]	; (80130c4 <mem_free+0xfc>)
 8012fe8:	4837      	ldr	r0, [pc, #220]	; (80130c8 <mem_free+0x100>)
 8012fea:	f00e fb95 	bl	8021718 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012fee:	f00c fff5 	bl	801ffdc <sys_arch_protect>
 8012ff2:	60f8      	str	r0, [r7, #12]
 8012ff4:	68f8      	ldr	r0, [r7, #12]
 8012ff6:	f00c ffff 	bl	801fff8 <sys_arch_unprotect>
    return;
 8012ffa:	e05e      	b.n	80130ba <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	3b08      	subs	r3, #8
 8013000:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8013002:	4b32      	ldr	r3, [pc, #200]	; (80130cc <mem_free+0x104>)
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	69fa      	ldr	r2, [r7, #28]
 8013008:	429a      	cmp	r2, r3
 801300a:	d306      	bcc.n	801301a <mem_free+0x52>
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	f103 020c 	add.w	r2, r3, #12
 8013012:	4b2f      	ldr	r3, [pc, #188]	; (80130d0 <mem_free+0x108>)
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	429a      	cmp	r2, r3
 8013018:	d90d      	bls.n	8013036 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801301a:	4b29      	ldr	r3, [pc, #164]	; (80130c0 <mem_free+0xf8>)
 801301c:	f240 227f 	movw	r2, #639	; 0x27f
 8013020:	492c      	ldr	r1, [pc, #176]	; (80130d4 <mem_free+0x10c>)
 8013022:	4829      	ldr	r0, [pc, #164]	; (80130c8 <mem_free+0x100>)
 8013024:	f00e fb78 	bl	8021718 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013028:	f00c ffd8 	bl	801ffdc <sys_arch_protect>
 801302c:	6138      	str	r0, [r7, #16]
 801302e:	6938      	ldr	r0, [r7, #16]
 8013030:	f00c ffe2 	bl	801fff8 <sys_arch_unprotect>
    return;
 8013034:	e041      	b.n	80130ba <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013036:	4828      	ldr	r0, [pc, #160]	; (80130d8 <mem_free+0x110>)
 8013038:	f00c ff8e 	bl	801ff58 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 801303c:	69fb      	ldr	r3, [r7, #28]
 801303e:	791b      	ldrb	r3, [r3, #4]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d110      	bne.n	8013066 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8013044:	4b1e      	ldr	r3, [pc, #120]	; (80130c0 <mem_free+0xf8>)
 8013046:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801304a:	4924      	ldr	r1, [pc, #144]	; (80130dc <mem_free+0x114>)
 801304c:	481e      	ldr	r0, [pc, #120]	; (80130c8 <mem_free+0x100>)
 801304e:	f00e fb63 	bl	8021718 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013052:	4821      	ldr	r0, [pc, #132]	; (80130d8 <mem_free+0x110>)
 8013054:	f00c ff8f 	bl	801ff76 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013058:	f00c ffc0 	bl	801ffdc <sys_arch_protect>
 801305c:	6178      	str	r0, [r7, #20]
 801305e:	6978      	ldr	r0, [r7, #20]
 8013060:	f00c ffca 	bl	801fff8 <sys_arch_unprotect>
    return;
 8013064:	e029      	b.n	80130ba <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8013066:	69f8      	ldr	r0, [r7, #28]
 8013068:	f7ff ff72 	bl	8012f50 <mem_link_valid>
 801306c:	4603      	mov	r3, r0
 801306e:	2b00      	cmp	r3, #0
 8013070:	d110      	bne.n	8013094 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8013072:	4b13      	ldr	r3, [pc, #76]	; (80130c0 <mem_free+0xf8>)
 8013074:	f240 2295 	movw	r2, #661	; 0x295
 8013078:	4919      	ldr	r1, [pc, #100]	; (80130e0 <mem_free+0x118>)
 801307a:	4813      	ldr	r0, [pc, #76]	; (80130c8 <mem_free+0x100>)
 801307c:	f00e fb4c 	bl	8021718 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013080:	4815      	ldr	r0, [pc, #84]	; (80130d8 <mem_free+0x110>)
 8013082:	f00c ff78 	bl	801ff76 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013086:	f00c ffa9 	bl	801ffdc <sys_arch_protect>
 801308a:	61b8      	str	r0, [r7, #24]
 801308c:	69b8      	ldr	r0, [r7, #24]
 801308e:	f00c ffb3 	bl	801fff8 <sys_arch_unprotect>
    return;
 8013092:	e012      	b.n	80130ba <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8013094:	69fb      	ldr	r3, [r7, #28]
 8013096:	2200      	movs	r2, #0
 8013098:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801309a:	4b12      	ldr	r3, [pc, #72]	; (80130e4 <mem_free+0x11c>)
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	69fa      	ldr	r2, [r7, #28]
 80130a0:	429a      	cmp	r2, r3
 80130a2:	d202      	bcs.n	80130aa <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80130a4:	4a0f      	ldr	r2, [pc, #60]	; (80130e4 <mem_free+0x11c>)
 80130a6:	69fb      	ldr	r3, [r7, #28]
 80130a8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80130aa:	69f8      	ldr	r0, [r7, #28]
 80130ac:	f7ff fe5c 	bl	8012d68 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80130b0:	4809      	ldr	r0, [pc, #36]	; (80130d8 <mem_free+0x110>)
 80130b2:	f00c ff60 	bl	801ff76 <sys_mutex_unlock>
 80130b6:	e000      	b.n	80130ba <mem_free+0xf2>
    return;
 80130b8:	bf00      	nop
}
 80130ba:	3720      	adds	r7, #32
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}
 80130c0:	08024458 	.word	0x08024458
 80130c4:	08024548 	.word	0x08024548
 80130c8:	080244a0 	.word	0x080244a0
 80130cc:	2000f210 	.word	0x2000f210
 80130d0:	2000f214 	.word	0x2000f214
 80130d4:	0802456c 	.word	0x0802456c
 80130d8:	2000f218 	.word	0x2000f218
 80130dc:	08024588 	.word	0x08024588
 80130e0:	080245b0 	.word	0x080245b0
 80130e4:	2000f21c 	.word	0x2000f21c

080130e8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b088      	sub	sp, #32
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
 80130f0:	460b      	mov	r3, r1
 80130f2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80130f4:	887b      	ldrh	r3, [r7, #2]
 80130f6:	3303      	adds	r3, #3
 80130f8:	b29b      	uxth	r3, r3
 80130fa:	f023 0303 	bic.w	r3, r3, #3
 80130fe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8013100:	8bfb      	ldrh	r3, [r7, #30]
 8013102:	2b0b      	cmp	r3, #11
 8013104:	d801      	bhi.n	801310a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8013106:	230c      	movs	r3, #12
 8013108:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801310a:	8bfb      	ldrh	r3, [r7, #30]
 801310c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013110:	d803      	bhi.n	801311a <mem_trim+0x32>
 8013112:	8bfa      	ldrh	r2, [r7, #30]
 8013114:	887b      	ldrh	r3, [r7, #2]
 8013116:	429a      	cmp	r2, r3
 8013118:	d201      	bcs.n	801311e <mem_trim+0x36>
    return NULL;
 801311a:	2300      	movs	r3, #0
 801311c:	e0d8      	b.n	80132d0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801311e:	4b6e      	ldr	r3, [pc, #440]	; (80132d8 <mem_trim+0x1f0>)
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	687a      	ldr	r2, [r7, #4]
 8013124:	429a      	cmp	r2, r3
 8013126:	d304      	bcc.n	8013132 <mem_trim+0x4a>
 8013128:	4b6c      	ldr	r3, [pc, #432]	; (80132dc <mem_trim+0x1f4>)
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	687a      	ldr	r2, [r7, #4]
 801312e:	429a      	cmp	r2, r3
 8013130:	d306      	bcc.n	8013140 <mem_trim+0x58>
 8013132:	4b6b      	ldr	r3, [pc, #428]	; (80132e0 <mem_trim+0x1f8>)
 8013134:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013138:	496a      	ldr	r1, [pc, #424]	; (80132e4 <mem_trim+0x1fc>)
 801313a:	486b      	ldr	r0, [pc, #428]	; (80132e8 <mem_trim+0x200>)
 801313c:	f00e faec 	bl	8021718 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013140:	4b65      	ldr	r3, [pc, #404]	; (80132d8 <mem_trim+0x1f0>)
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	687a      	ldr	r2, [r7, #4]
 8013146:	429a      	cmp	r2, r3
 8013148:	d304      	bcc.n	8013154 <mem_trim+0x6c>
 801314a:	4b64      	ldr	r3, [pc, #400]	; (80132dc <mem_trim+0x1f4>)
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	687a      	ldr	r2, [r7, #4]
 8013150:	429a      	cmp	r2, r3
 8013152:	d307      	bcc.n	8013164 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013154:	f00c ff42 	bl	801ffdc <sys_arch_protect>
 8013158:	60b8      	str	r0, [r7, #8]
 801315a:	68b8      	ldr	r0, [r7, #8]
 801315c:	f00c ff4c 	bl	801fff8 <sys_arch_unprotect>
    return rmem;
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	e0b5      	b.n	80132d0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	3b08      	subs	r3, #8
 8013168:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801316a:	69b8      	ldr	r0, [r7, #24]
 801316c:	f7ff fdea 	bl	8012d44 <mem_to_ptr>
 8013170:	4603      	mov	r3, r0
 8013172:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8013174:	69bb      	ldr	r3, [r7, #24]
 8013176:	881a      	ldrh	r2, [r3, #0]
 8013178:	8afb      	ldrh	r3, [r7, #22]
 801317a:	1ad3      	subs	r3, r2, r3
 801317c:	b29b      	uxth	r3, r3
 801317e:	3b08      	subs	r3, #8
 8013180:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8013182:	8bfa      	ldrh	r2, [r7, #30]
 8013184:	8abb      	ldrh	r3, [r7, #20]
 8013186:	429a      	cmp	r2, r3
 8013188:	d906      	bls.n	8013198 <mem_trim+0xb0>
 801318a:	4b55      	ldr	r3, [pc, #340]	; (80132e0 <mem_trim+0x1f8>)
 801318c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8013190:	4956      	ldr	r1, [pc, #344]	; (80132ec <mem_trim+0x204>)
 8013192:	4855      	ldr	r0, [pc, #340]	; (80132e8 <mem_trim+0x200>)
 8013194:	f00e fac0 	bl	8021718 <iprintf>
  if (newsize > size) {
 8013198:	8bfa      	ldrh	r2, [r7, #30]
 801319a:	8abb      	ldrh	r3, [r7, #20]
 801319c:	429a      	cmp	r2, r3
 801319e:	d901      	bls.n	80131a4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80131a0:	2300      	movs	r3, #0
 80131a2:	e095      	b.n	80132d0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80131a4:	8bfa      	ldrh	r2, [r7, #30]
 80131a6:	8abb      	ldrh	r3, [r7, #20]
 80131a8:	429a      	cmp	r2, r3
 80131aa:	d101      	bne.n	80131b0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	e08f      	b.n	80132d0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80131b0:	484f      	ldr	r0, [pc, #316]	; (80132f0 <mem_trim+0x208>)
 80131b2:	f00c fed1 	bl	801ff58 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80131b6:	69bb      	ldr	r3, [r7, #24]
 80131b8:	881b      	ldrh	r3, [r3, #0]
 80131ba:	4618      	mov	r0, r3
 80131bc:	f7ff fdb0 	bl	8012d20 <ptr_to_mem>
 80131c0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80131c2:	693b      	ldr	r3, [r7, #16]
 80131c4:	791b      	ldrb	r3, [r3, #4]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d13f      	bne.n	801324a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80131ca:	69bb      	ldr	r3, [r7, #24]
 80131cc:	881b      	ldrh	r3, [r3, #0]
 80131ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80131d2:	d106      	bne.n	80131e2 <mem_trim+0xfa>
 80131d4:	4b42      	ldr	r3, [pc, #264]	; (80132e0 <mem_trim+0x1f8>)
 80131d6:	f240 22f5 	movw	r2, #757	; 0x2f5
 80131da:	4946      	ldr	r1, [pc, #280]	; (80132f4 <mem_trim+0x20c>)
 80131dc:	4842      	ldr	r0, [pc, #264]	; (80132e8 <mem_trim+0x200>)
 80131de:	f00e fa9b 	bl	8021718 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80131e2:	693b      	ldr	r3, [r7, #16]
 80131e4:	881b      	ldrh	r3, [r3, #0]
 80131e6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80131e8:	8afa      	ldrh	r2, [r7, #22]
 80131ea:	8bfb      	ldrh	r3, [r7, #30]
 80131ec:	4413      	add	r3, r2
 80131ee:	b29b      	uxth	r3, r3
 80131f0:	3308      	adds	r3, #8
 80131f2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80131f4:	4b40      	ldr	r3, [pc, #256]	; (80132f8 <mem_trim+0x210>)
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	693a      	ldr	r2, [r7, #16]
 80131fa:	429a      	cmp	r2, r3
 80131fc:	d106      	bne.n	801320c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80131fe:	89fb      	ldrh	r3, [r7, #14]
 8013200:	4618      	mov	r0, r3
 8013202:	f7ff fd8d 	bl	8012d20 <ptr_to_mem>
 8013206:	4603      	mov	r3, r0
 8013208:	4a3b      	ldr	r2, [pc, #236]	; (80132f8 <mem_trim+0x210>)
 801320a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801320c:	89fb      	ldrh	r3, [r7, #14]
 801320e:	4618      	mov	r0, r3
 8013210:	f7ff fd86 	bl	8012d20 <ptr_to_mem>
 8013214:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8013216:	693b      	ldr	r3, [r7, #16]
 8013218:	2200      	movs	r2, #0
 801321a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801321c:	693b      	ldr	r3, [r7, #16]
 801321e:	89ba      	ldrh	r2, [r7, #12]
 8013220:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8013222:	693b      	ldr	r3, [r7, #16]
 8013224:	8afa      	ldrh	r2, [r7, #22]
 8013226:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8013228:	69bb      	ldr	r3, [r7, #24]
 801322a:	89fa      	ldrh	r2, [r7, #14]
 801322c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801322e:	693b      	ldr	r3, [r7, #16]
 8013230:	881b      	ldrh	r3, [r3, #0]
 8013232:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013236:	d047      	beq.n	80132c8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013238:	693b      	ldr	r3, [r7, #16]
 801323a:	881b      	ldrh	r3, [r3, #0]
 801323c:	4618      	mov	r0, r3
 801323e:	f7ff fd6f 	bl	8012d20 <ptr_to_mem>
 8013242:	4602      	mov	r2, r0
 8013244:	89fb      	ldrh	r3, [r7, #14]
 8013246:	8053      	strh	r3, [r2, #2]
 8013248:	e03e      	b.n	80132c8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801324a:	8bfb      	ldrh	r3, [r7, #30]
 801324c:	f103 0214 	add.w	r2, r3, #20
 8013250:	8abb      	ldrh	r3, [r7, #20]
 8013252:	429a      	cmp	r2, r3
 8013254:	d838      	bhi.n	80132c8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013256:	8afa      	ldrh	r2, [r7, #22]
 8013258:	8bfb      	ldrh	r3, [r7, #30]
 801325a:	4413      	add	r3, r2
 801325c:	b29b      	uxth	r3, r3
 801325e:	3308      	adds	r3, #8
 8013260:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013262:	69bb      	ldr	r3, [r7, #24]
 8013264:	881b      	ldrh	r3, [r3, #0]
 8013266:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801326a:	d106      	bne.n	801327a <mem_trim+0x192>
 801326c:	4b1c      	ldr	r3, [pc, #112]	; (80132e0 <mem_trim+0x1f8>)
 801326e:	f240 3216 	movw	r2, #790	; 0x316
 8013272:	4920      	ldr	r1, [pc, #128]	; (80132f4 <mem_trim+0x20c>)
 8013274:	481c      	ldr	r0, [pc, #112]	; (80132e8 <mem_trim+0x200>)
 8013276:	f00e fa4f 	bl	8021718 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801327a:	89fb      	ldrh	r3, [r7, #14]
 801327c:	4618      	mov	r0, r3
 801327e:	f7ff fd4f 	bl	8012d20 <ptr_to_mem>
 8013282:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8013284:	4b1c      	ldr	r3, [pc, #112]	; (80132f8 <mem_trim+0x210>)
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	693a      	ldr	r2, [r7, #16]
 801328a:	429a      	cmp	r2, r3
 801328c:	d202      	bcs.n	8013294 <mem_trim+0x1ac>
      lfree = mem2;
 801328e:	4a1a      	ldr	r2, [pc, #104]	; (80132f8 <mem_trim+0x210>)
 8013290:	693b      	ldr	r3, [r7, #16]
 8013292:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8013294:	693b      	ldr	r3, [r7, #16]
 8013296:	2200      	movs	r2, #0
 8013298:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801329a:	69bb      	ldr	r3, [r7, #24]
 801329c:	881a      	ldrh	r2, [r3, #0]
 801329e:	693b      	ldr	r3, [r7, #16]
 80132a0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80132a2:	693b      	ldr	r3, [r7, #16]
 80132a4:	8afa      	ldrh	r2, [r7, #22]
 80132a6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80132a8:	69bb      	ldr	r3, [r7, #24]
 80132aa:	89fa      	ldrh	r2, [r7, #14]
 80132ac:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80132ae:	693b      	ldr	r3, [r7, #16]
 80132b0:	881b      	ldrh	r3, [r3, #0]
 80132b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80132b6:	d007      	beq.n	80132c8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80132b8:	693b      	ldr	r3, [r7, #16]
 80132ba:	881b      	ldrh	r3, [r3, #0]
 80132bc:	4618      	mov	r0, r3
 80132be:	f7ff fd2f 	bl	8012d20 <ptr_to_mem>
 80132c2:	4602      	mov	r2, r0
 80132c4:	89fb      	ldrh	r3, [r7, #14]
 80132c6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80132c8:	4809      	ldr	r0, [pc, #36]	; (80132f0 <mem_trim+0x208>)
 80132ca:	f00c fe54 	bl	801ff76 <sys_mutex_unlock>
  return rmem;
 80132ce:	687b      	ldr	r3, [r7, #4]
}
 80132d0:	4618      	mov	r0, r3
 80132d2:	3720      	adds	r7, #32
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bd80      	pop	{r7, pc}
 80132d8:	2000f210 	.word	0x2000f210
 80132dc:	2000f214 	.word	0x2000f214
 80132e0:	08024458 	.word	0x08024458
 80132e4:	080245e4 	.word	0x080245e4
 80132e8:	080244a0 	.word	0x080244a0
 80132ec:	080245fc 	.word	0x080245fc
 80132f0:	2000f218 	.word	0x2000f218
 80132f4:	0802461c 	.word	0x0802461c
 80132f8:	2000f21c 	.word	0x2000f21c

080132fc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b088      	sub	sp, #32
 8013300:	af00      	add	r7, sp, #0
 8013302:	4603      	mov	r3, r0
 8013304:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8013306:	88fb      	ldrh	r3, [r7, #6]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d101      	bne.n	8013310 <mem_malloc+0x14>
    return NULL;
 801330c:	2300      	movs	r3, #0
 801330e:	e0e2      	b.n	80134d6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013310:	88fb      	ldrh	r3, [r7, #6]
 8013312:	3303      	adds	r3, #3
 8013314:	b29b      	uxth	r3, r3
 8013316:	f023 0303 	bic.w	r3, r3, #3
 801331a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801331c:	8bbb      	ldrh	r3, [r7, #28]
 801331e:	2b0b      	cmp	r3, #11
 8013320:	d801      	bhi.n	8013326 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8013322:	230c      	movs	r3, #12
 8013324:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8013326:	8bbb      	ldrh	r3, [r7, #28]
 8013328:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801332c:	d803      	bhi.n	8013336 <mem_malloc+0x3a>
 801332e:	8bba      	ldrh	r2, [r7, #28]
 8013330:	88fb      	ldrh	r3, [r7, #6]
 8013332:	429a      	cmp	r2, r3
 8013334:	d201      	bcs.n	801333a <mem_malloc+0x3e>
    return NULL;
 8013336:	2300      	movs	r3, #0
 8013338:	e0cd      	b.n	80134d6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801333a:	4869      	ldr	r0, [pc, #420]	; (80134e0 <mem_malloc+0x1e4>)
 801333c:	f00c fe0c 	bl	801ff58 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013340:	4b68      	ldr	r3, [pc, #416]	; (80134e4 <mem_malloc+0x1e8>)
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	4618      	mov	r0, r3
 8013346:	f7ff fcfd 	bl	8012d44 <mem_to_ptr>
 801334a:	4603      	mov	r3, r0
 801334c:	83fb      	strh	r3, [r7, #30]
 801334e:	e0b7      	b.n	80134c0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013350:	8bfb      	ldrh	r3, [r7, #30]
 8013352:	4618      	mov	r0, r3
 8013354:	f7ff fce4 	bl	8012d20 <ptr_to_mem>
 8013358:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801335a:	697b      	ldr	r3, [r7, #20]
 801335c:	791b      	ldrb	r3, [r3, #4]
 801335e:	2b00      	cmp	r3, #0
 8013360:	f040 80a7 	bne.w	80134b2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013364:	697b      	ldr	r3, [r7, #20]
 8013366:	881b      	ldrh	r3, [r3, #0]
 8013368:	461a      	mov	r2, r3
 801336a:	8bfb      	ldrh	r3, [r7, #30]
 801336c:	1ad3      	subs	r3, r2, r3
 801336e:	f1a3 0208 	sub.w	r2, r3, #8
 8013372:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013374:	429a      	cmp	r2, r3
 8013376:	f0c0 809c 	bcc.w	80134b2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801337a:	697b      	ldr	r3, [r7, #20]
 801337c:	881b      	ldrh	r3, [r3, #0]
 801337e:	461a      	mov	r2, r3
 8013380:	8bfb      	ldrh	r3, [r7, #30]
 8013382:	1ad3      	subs	r3, r2, r3
 8013384:	f1a3 0208 	sub.w	r2, r3, #8
 8013388:	8bbb      	ldrh	r3, [r7, #28]
 801338a:	3314      	adds	r3, #20
 801338c:	429a      	cmp	r2, r3
 801338e:	d333      	bcc.n	80133f8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013390:	8bfa      	ldrh	r2, [r7, #30]
 8013392:	8bbb      	ldrh	r3, [r7, #28]
 8013394:	4413      	add	r3, r2
 8013396:	b29b      	uxth	r3, r3
 8013398:	3308      	adds	r3, #8
 801339a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801339c:	8a7b      	ldrh	r3, [r7, #18]
 801339e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80133a2:	d106      	bne.n	80133b2 <mem_malloc+0xb6>
 80133a4:	4b50      	ldr	r3, [pc, #320]	; (80134e8 <mem_malloc+0x1ec>)
 80133a6:	f240 3287 	movw	r2, #903	; 0x387
 80133aa:	4950      	ldr	r1, [pc, #320]	; (80134ec <mem_malloc+0x1f0>)
 80133ac:	4850      	ldr	r0, [pc, #320]	; (80134f0 <mem_malloc+0x1f4>)
 80133ae:	f00e f9b3 	bl	8021718 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80133b2:	8a7b      	ldrh	r3, [r7, #18]
 80133b4:	4618      	mov	r0, r3
 80133b6:	f7ff fcb3 	bl	8012d20 <ptr_to_mem>
 80133ba:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	2200      	movs	r2, #0
 80133c0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80133c2:	697b      	ldr	r3, [r7, #20]
 80133c4:	881a      	ldrh	r2, [r3, #0]
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	8bfa      	ldrh	r2, [r7, #30]
 80133ce:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	8a7a      	ldrh	r2, [r7, #18]
 80133d4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80133d6:	697b      	ldr	r3, [r7, #20]
 80133d8:	2201      	movs	r2, #1
 80133da:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	881b      	ldrh	r3, [r3, #0]
 80133e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80133e4:	d00b      	beq.n	80133fe <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	881b      	ldrh	r3, [r3, #0]
 80133ea:	4618      	mov	r0, r3
 80133ec:	f7ff fc98 	bl	8012d20 <ptr_to_mem>
 80133f0:	4602      	mov	r2, r0
 80133f2:	8a7b      	ldrh	r3, [r7, #18]
 80133f4:	8053      	strh	r3, [r2, #2]
 80133f6:	e002      	b.n	80133fe <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80133f8:	697b      	ldr	r3, [r7, #20]
 80133fa:	2201      	movs	r2, #1
 80133fc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80133fe:	4b39      	ldr	r3, [pc, #228]	; (80134e4 <mem_malloc+0x1e8>)
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	697a      	ldr	r2, [r7, #20]
 8013404:	429a      	cmp	r2, r3
 8013406:	d127      	bne.n	8013458 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8013408:	4b36      	ldr	r3, [pc, #216]	; (80134e4 <mem_malloc+0x1e8>)
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801340e:	e005      	b.n	801341c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013410:	69bb      	ldr	r3, [r7, #24]
 8013412:	881b      	ldrh	r3, [r3, #0]
 8013414:	4618      	mov	r0, r3
 8013416:	f7ff fc83 	bl	8012d20 <ptr_to_mem>
 801341a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801341c:	69bb      	ldr	r3, [r7, #24]
 801341e:	791b      	ldrb	r3, [r3, #4]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d004      	beq.n	801342e <mem_malloc+0x132>
 8013424:	4b33      	ldr	r3, [pc, #204]	; (80134f4 <mem_malloc+0x1f8>)
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	69ba      	ldr	r2, [r7, #24]
 801342a:	429a      	cmp	r2, r3
 801342c:	d1f0      	bne.n	8013410 <mem_malloc+0x114>
          }
          lfree = cur;
 801342e:	4a2d      	ldr	r2, [pc, #180]	; (80134e4 <mem_malloc+0x1e8>)
 8013430:	69bb      	ldr	r3, [r7, #24]
 8013432:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013434:	4b2b      	ldr	r3, [pc, #172]	; (80134e4 <mem_malloc+0x1e8>)
 8013436:	681a      	ldr	r2, [r3, #0]
 8013438:	4b2e      	ldr	r3, [pc, #184]	; (80134f4 <mem_malloc+0x1f8>)
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	429a      	cmp	r2, r3
 801343e:	d00b      	beq.n	8013458 <mem_malloc+0x15c>
 8013440:	4b28      	ldr	r3, [pc, #160]	; (80134e4 <mem_malloc+0x1e8>)
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	791b      	ldrb	r3, [r3, #4]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d006      	beq.n	8013458 <mem_malloc+0x15c>
 801344a:	4b27      	ldr	r3, [pc, #156]	; (80134e8 <mem_malloc+0x1ec>)
 801344c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8013450:	4929      	ldr	r1, [pc, #164]	; (80134f8 <mem_malloc+0x1fc>)
 8013452:	4827      	ldr	r0, [pc, #156]	; (80134f0 <mem_malloc+0x1f4>)
 8013454:	f00e f960 	bl	8021718 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8013458:	4821      	ldr	r0, [pc, #132]	; (80134e0 <mem_malloc+0x1e4>)
 801345a:	f00c fd8c 	bl	801ff76 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801345e:	8bba      	ldrh	r2, [r7, #28]
 8013460:	697b      	ldr	r3, [r7, #20]
 8013462:	4413      	add	r3, r2
 8013464:	3308      	adds	r3, #8
 8013466:	4a23      	ldr	r2, [pc, #140]	; (80134f4 <mem_malloc+0x1f8>)
 8013468:	6812      	ldr	r2, [r2, #0]
 801346a:	4293      	cmp	r3, r2
 801346c:	d906      	bls.n	801347c <mem_malloc+0x180>
 801346e:	4b1e      	ldr	r3, [pc, #120]	; (80134e8 <mem_malloc+0x1ec>)
 8013470:	f240 32b9 	movw	r2, #953	; 0x3b9
 8013474:	4921      	ldr	r1, [pc, #132]	; (80134fc <mem_malloc+0x200>)
 8013476:	481e      	ldr	r0, [pc, #120]	; (80134f0 <mem_malloc+0x1f4>)
 8013478:	f00e f94e 	bl	8021718 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801347c:	697b      	ldr	r3, [r7, #20]
 801347e:	f003 0303 	and.w	r3, r3, #3
 8013482:	2b00      	cmp	r3, #0
 8013484:	d006      	beq.n	8013494 <mem_malloc+0x198>
 8013486:	4b18      	ldr	r3, [pc, #96]	; (80134e8 <mem_malloc+0x1ec>)
 8013488:	f240 32bb 	movw	r2, #955	; 0x3bb
 801348c:	491c      	ldr	r1, [pc, #112]	; (8013500 <mem_malloc+0x204>)
 801348e:	4818      	ldr	r0, [pc, #96]	; (80134f0 <mem_malloc+0x1f4>)
 8013490:	f00e f942 	bl	8021718 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013494:	697b      	ldr	r3, [r7, #20]
 8013496:	f003 0303 	and.w	r3, r3, #3
 801349a:	2b00      	cmp	r3, #0
 801349c:	d006      	beq.n	80134ac <mem_malloc+0x1b0>
 801349e:	4b12      	ldr	r3, [pc, #72]	; (80134e8 <mem_malloc+0x1ec>)
 80134a0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80134a4:	4917      	ldr	r1, [pc, #92]	; (8013504 <mem_malloc+0x208>)
 80134a6:	4812      	ldr	r0, [pc, #72]	; (80134f0 <mem_malloc+0x1f4>)
 80134a8:	f00e f936 	bl	8021718 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80134ac:	697b      	ldr	r3, [r7, #20]
 80134ae:	3308      	adds	r3, #8
 80134b0:	e011      	b.n	80134d6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80134b2:	8bfb      	ldrh	r3, [r7, #30]
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7ff fc33 	bl	8012d20 <ptr_to_mem>
 80134ba:	4603      	mov	r3, r0
 80134bc:	881b      	ldrh	r3, [r3, #0]
 80134be:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80134c0:	8bfa      	ldrh	r2, [r7, #30]
 80134c2:	8bbb      	ldrh	r3, [r7, #28]
 80134c4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80134c8:	429a      	cmp	r2, r3
 80134ca:	f4ff af41 	bcc.w	8013350 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80134ce:	4804      	ldr	r0, [pc, #16]	; (80134e0 <mem_malloc+0x1e4>)
 80134d0:	f00c fd51 	bl	801ff76 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80134d4:	2300      	movs	r3, #0
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	3720      	adds	r7, #32
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}
 80134de:	bf00      	nop
 80134e0:	2000f218 	.word	0x2000f218
 80134e4:	2000f21c 	.word	0x2000f21c
 80134e8:	08024458 	.word	0x08024458
 80134ec:	0802461c 	.word	0x0802461c
 80134f0:	080244a0 	.word	0x080244a0
 80134f4:	2000f214 	.word	0x2000f214
 80134f8:	08024630 	.word	0x08024630
 80134fc:	0802464c 	.word	0x0802464c
 8013500:	0802467c 	.word	0x0802467c
 8013504:	080246ac 	.word	0x080246ac

08013508 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013508:	b480      	push	{r7}
 801350a:	b085      	sub	sp, #20
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	689b      	ldr	r3, [r3, #8]
 8013514:	2200      	movs	r2, #0
 8013516:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	685b      	ldr	r3, [r3, #4]
 801351c:	3303      	adds	r3, #3
 801351e:	f023 0303 	bic.w	r3, r3, #3
 8013522:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013524:	2300      	movs	r3, #0
 8013526:	60fb      	str	r3, [r7, #12]
 8013528:	e011      	b.n	801354e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	689b      	ldr	r3, [r3, #8]
 801352e:	681a      	ldr	r2, [r3, #0]
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	689b      	ldr	r3, [r3, #8]
 8013538:	68ba      	ldr	r2, [r7, #8]
 801353a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	881b      	ldrh	r3, [r3, #0]
 8013540:	461a      	mov	r2, r3
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	4413      	add	r3, r2
 8013546:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	3301      	adds	r3, #1
 801354c:	60fb      	str	r3, [r7, #12]
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	885b      	ldrh	r3, [r3, #2]
 8013552:	461a      	mov	r2, r3
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	4293      	cmp	r3, r2
 8013558:	dbe7      	blt.n	801352a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801355a:	bf00      	nop
 801355c:	bf00      	nop
 801355e:	3714      	adds	r7, #20
 8013560:	46bd      	mov	sp, r7
 8013562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013566:	4770      	bx	lr

08013568 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b082      	sub	sp, #8
 801356c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801356e:	2300      	movs	r3, #0
 8013570:	80fb      	strh	r3, [r7, #6]
 8013572:	e009      	b.n	8013588 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8013574:	88fb      	ldrh	r3, [r7, #6]
 8013576:	4a08      	ldr	r2, [pc, #32]	; (8013598 <memp_init+0x30>)
 8013578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801357c:	4618      	mov	r0, r3
 801357e:	f7ff ffc3 	bl	8013508 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013582:	88fb      	ldrh	r3, [r7, #6]
 8013584:	3301      	adds	r3, #1
 8013586:	80fb      	strh	r3, [r7, #6]
 8013588:	88fb      	ldrh	r3, [r7, #6]
 801358a:	2b0c      	cmp	r3, #12
 801358c:	d9f2      	bls.n	8013574 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801358e:	bf00      	nop
 8013590:	bf00      	nop
 8013592:	3708      	adds	r7, #8
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}
 8013598:	0802737c 	.word	0x0802737c

0801359c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b084      	sub	sp, #16
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80135a4:	f00c fd1a 	bl	801ffdc <sys_arch_protect>
 80135a8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	689b      	ldr	r3, [r3, #8]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80135b2:	68bb      	ldr	r3, [r7, #8]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d015      	beq.n	80135e4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	689b      	ldr	r3, [r3, #8]
 80135bc:	68ba      	ldr	r2, [r7, #8]
 80135be:	6812      	ldr	r2, [r2, #0]
 80135c0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80135c2:	68bb      	ldr	r3, [r7, #8]
 80135c4:	f003 0303 	and.w	r3, r3, #3
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d006      	beq.n	80135da <do_memp_malloc_pool+0x3e>
 80135cc:	4b09      	ldr	r3, [pc, #36]	; (80135f4 <do_memp_malloc_pool+0x58>)
 80135ce:	f44f 728c 	mov.w	r2, #280	; 0x118
 80135d2:	4909      	ldr	r1, [pc, #36]	; (80135f8 <do_memp_malloc_pool+0x5c>)
 80135d4:	4809      	ldr	r0, [pc, #36]	; (80135fc <do_memp_malloc_pool+0x60>)
 80135d6:	f00e f89f 	bl	8021718 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80135da:	68f8      	ldr	r0, [r7, #12]
 80135dc:	f00c fd0c 	bl	801fff8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	e003      	b.n	80135ec <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80135e4:	68f8      	ldr	r0, [r7, #12]
 80135e6:	f00c fd07 	bl	801fff8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80135ea:	2300      	movs	r3, #0
}
 80135ec:	4618      	mov	r0, r3
 80135ee:	3710      	adds	r7, #16
 80135f0:	46bd      	mov	sp, r7
 80135f2:	bd80      	pop	{r7, pc}
 80135f4:	080246d0 	.word	0x080246d0
 80135f8:	08024700 	.word	0x08024700
 80135fc:	08024724 	.word	0x08024724

08013600 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b082      	sub	sp, #8
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d106      	bne.n	801361c <memp_malloc_pool+0x1c>
 801360e:	4b0a      	ldr	r3, [pc, #40]	; (8013638 <memp_malloc_pool+0x38>)
 8013610:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8013614:	4909      	ldr	r1, [pc, #36]	; (801363c <memp_malloc_pool+0x3c>)
 8013616:	480a      	ldr	r0, [pc, #40]	; (8013640 <memp_malloc_pool+0x40>)
 8013618:	f00e f87e 	bl	8021718 <iprintf>
  if (desc == NULL) {
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d101      	bne.n	8013626 <memp_malloc_pool+0x26>
    return NULL;
 8013622:	2300      	movs	r3, #0
 8013624:	e003      	b.n	801362e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8013626:	6878      	ldr	r0, [r7, #4]
 8013628:	f7ff ffb8 	bl	801359c <do_memp_malloc_pool>
 801362c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801362e:	4618      	mov	r0, r3
 8013630:	3708      	adds	r7, #8
 8013632:	46bd      	mov	sp, r7
 8013634:	bd80      	pop	{r7, pc}
 8013636:	bf00      	nop
 8013638:	080246d0 	.word	0x080246d0
 801363c:	0802474c 	.word	0x0802474c
 8013640:	08024724 	.word	0x08024724

08013644 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b084      	sub	sp, #16
 8013648:	af00      	add	r7, sp, #0
 801364a:	4603      	mov	r3, r0
 801364c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801364e:	79fb      	ldrb	r3, [r7, #7]
 8013650:	2b0c      	cmp	r3, #12
 8013652:	d908      	bls.n	8013666 <memp_malloc+0x22>
 8013654:	4b0a      	ldr	r3, [pc, #40]	; (8013680 <memp_malloc+0x3c>)
 8013656:	f240 1257 	movw	r2, #343	; 0x157
 801365a:	490a      	ldr	r1, [pc, #40]	; (8013684 <memp_malloc+0x40>)
 801365c:	480a      	ldr	r0, [pc, #40]	; (8013688 <memp_malloc+0x44>)
 801365e:	f00e f85b 	bl	8021718 <iprintf>
 8013662:	2300      	movs	r3, #0
 8013664:	e008      	b.n	8013678 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8013666:	79fb      	ldrb	r3, [r7, #7]
 8013668:	4a08      	ldr	r2, [pc, #32]	; (801368c <memp_malloc+0x48>)
 801366a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801366e:	4618      	mov	r0, r3
 8013670:	f7ff ff94 	bl	801359c <do_memp_malloc_pool>
 8013674:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8013676:	68fb      	ldr	r3, [r7, #12]
}
 8013678:	4618      	mov	r0, r3
 801367a:	3710      	adds	r7, #16
 801367c:	46bd      	mov	sp, r7
 801367e:	bd80      	pop	{r7, pc}
 8013680:	080246d0 	.word	0x080246d0
 8013684:	08024760 	.word	0x08024760
 8013688:	08024724 	.word	0x08024724
 801368c:	0802737c 	.word	0x0802737c

08013690 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b084      	sub	sp, #16
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]
 8013698:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801369a:	683b      	ldr	r3, [r7, #0]
 801369c:	f003 0303 	and.w	r3, r3, #3
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d006      	beq.n	80136b2 <do_memp_free_pool+0x22>
 80136a4:	4b0d      	ldr	r3, [pc, #52]	; (80136dc <do_memp_free_pool+0x4c>)
 80136a6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80136aa:	490d      	ldr	r1, [pc, #52]	; (80136e0 <do_memp_free_pool+0x50>)
 80136ac:	480d      	ldr	r0, [pc, #52]	; (80136e4 <do_memp_free_pool+0x54>)
 80136ae:	f00e f833 	bl	8021718 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80136b2:	683b      	ldr	r3, [r7, #0]
 80136b4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80136b6:	f00c fc91 	bl	801ffdc <sys_arch_protect>
 80136ba:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	689b      	ldr	r3, [r3, #8]
 80136c0:	681a      	ldr	r2, [r3, #0]
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	689b      	ldr	r3, [r3, #8]
 80136ca:	68fa      	ldr	r2, [r7, #12]
 80136cc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80136ce:	68b8      	ldr	r0, [r7, #8]
 80136d0:	f00c fc92 	bl	801fff8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80136d4:	bf00      	nop
 80136d6:	3710      	adds	r7, #16
 80136d8:	46bd      	mov	sp, r7
 80136da:	bd80      	pop	{r7, pc}
 80136dc:	080246d0 	.word	0x080246d0
 80136e0:	08024780 	.word	0x08024780
 80136e4:	08024724 	.word	0x08024724

080136e8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b082      	sub	sp, #8
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
 80136f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d106      	bne.n	8013706 <memp_free_pool+0x1e>
 80136f8:	4b0a      	ldr	r3, [pc, #40]	; (8013724 <memp_free_pool+0x3c>)
 80136fa:	f240 1295 	movw	r2, #405	; 0x195
 80136fe:	490a      	ldr	r1, [pc, #40]	; (8013728 <memp_free_pool+0x40>)
 8013700:	480a      	ldr	r0, [pc, #40]	; (801372c <memp_free_pool+0x44>)
 8013702:	f00e f809 	bl	8021718 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d007      	beq.n	801371c <memp_free_pool+0x34>
 801370c:	683b      	ldr	r3, [r7, #0]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d004      	beq.n	801371c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8013712:	6839      	ldr	r1, [r7, #0]
 8013714:	6878      	ldr	r0, [r7, #4]
 8013716:	f7ff ffbb 	bl	8013690 <do_memp_free_pool>
 801371a:	e000      	b.n	801371e <memp_free_pool+0x36>
    return;
 801371c:	bf00      	nop
}
 801371e:	3708      	adds	r7, #8
 8013720:	46bd      	mov	sp, r7
 8013722:	bd80      	pop	{r7, pc}
 8013724:	080246d0 	.word	0x080246d0
 8013728:	0802474c 	.word	0x0802474c
 801372c:	08024724 	.word	0x08024724

08013730 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b082      	sub	sp, #8
 8013734:	af00      	add	r7, sp, #0
 8013736:	4603      	mov	r3, r0
 8013738:	6039      	str	r1, [r7, #0]
 801373a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801373c:	79fb      	ldrb	r3, [r7, #7]
 801373e:	2b0c      	cmp	r3, #12
 8013740:	d907      	bls.n	8013752 <memp_free+0x22>
 8013742:	4b0c      	ldr	r3, [pc, #48]	; (8013774 <memp_free+0x44>)
 8013744:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8013748:	490b      	ldr	r1, [pc, #44]	; (8013778 <memp_free+0x48>)
 801374a:	480c      	ldr	r0, [pc, #48]	; (801377c <memp_free+0x4c>)
 801374c:	f00d ffe4 	bl	8021718 <iprintf>
 8013750:	e00c      	b.n	801376c <memp_free+0x3c>

  if (mem == NULL) {
 8013752:	683b      	ldr	r3, [r7, #0]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d008      	beq.n	801376a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013758:	79fb      	ldrb	r3, [r7, #7]
 801375a:	4a09      	ldr	r2, [pc, #36]	; (8013780 <memp_free+0x50>)
 801375c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013760:	6839      	ldr	r1, [r7, #0]
 8013762:	4618      	mov	r0, r3
 8013764:	f7ff ff94 	bl	8013690 <do_memp_free_pool>
 8013768:	e000      	b.n	801376c <memp_free+0x3c>
    return;
 801376a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801376c:	3708      	adds	r7, #8
 801376e:	46bd      	mov	sp, r7
 8013770:	bd80      	pop	{r7, pc}
 8013772:	bf00      	nop
 8013774:	080246d0 	.word	0x080246d0
 8013778:	080247a0 	.word	0x080247a0
 801377c:	08024724 	.word	0x08024724
 8013780:	0802737c 	.word	0x0802737c

08013784 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013784:	b480      	push	{r7}
 8013786:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013788:	bf00      	nop
 801378a:	46bd      	mov	sp, r7
 801378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013790:	4770      	bx	lr
	...

08013794 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b086      	sub	sp, #24
 8013798:	af00      	add	r7, sp, #0
 801379a:	60f8      	str	r0, [r7, #12]
 801379c:	60b9      	str	r1, [r7, #8]
 801379e:	607a      	str	r2, [r7, #4]
 80137a0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d108      	bne.n	80137ba <netif_add+0x26>
 80137a8:	4b5b      	ldr	r3, [pc, #364]	; (8013918 <netif_add+0x184>)
 80137aa:	f240 1227 	movw	r2, #295	; 0x127
 80137ae:	495b      	ldr	r1, [pc, #364]	; (801391c <netif_add+0x188>)
 80137b0:	485b      	ldr	r0, [pc, #364]	; (8013920 <netif_add+0x18c>)
 80137b2:	f00d ffb1 	bl	8021718 <iprintf>
 80137b6:	2300      	movs	r3, #0
 80137b8:	e0a9      	b.n	801390e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80137ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d108      	bne.n	80137d2 <netif_add+0x3e>
 80137c0:	4b55      	ldr	r3, [pc, #340]	; (8013918 <netif_add+0x184>)
 80137c2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80137c6:	4957      	ldr	r1, [pc, #348]	; (8013924 <netif_add+0x190>)
 80137c8:	4855      	ldr	r0, [pc, #340]	; (8013920 <netif_add+0x18c>)
 80137ca:	f00d ffa5 	bl	8021718 <iprintf>
 80137ce:	2300      	movs	r3, #0
 80137d0:	e09d      	b.n	801390e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80137d2:	68bb      	ldr	r3, [r7, #8]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d101      	bne.n	80137dc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80137d8:	4b53      	ldr	r3, [pc, #332]	; (8013928 <netif_add+0x194>)
 80137da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d101      	bne.n	80137e6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80137e2:	4b51      	ldr	r3, [pc, #324]	; (8013928 <netif_add+0x194>)
 80137e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80137e6:	683b      	ldr	r3, [r7, #0]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d101      	bne.n	80137f0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80137ec:	4b4e      	ldr	r3, [pc, #312]	; (8013928 <netif_add+0x194>)
 80137ee:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	2200      	movs	r2, #0
 80137f4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	2200      	movs	r2, #0
 80137fa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	2200      	movs	r2, #0
 8013800:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	4a49      	ldr	r2, [pc, #292]	; (801392c <netif_add+0x198>)
 8013806:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	2200      	movs	r2, #0
 801380c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	2200      	movs	r2, #0
 8013812:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	3324      	adds	r3, #36	; 0x24
 801381a:	2204      	movs	r2, #4
 801381c:	2100      	movs	r1, #0
 801381e:	4618      	mov	r0, r3
 8013820:	f00e f990 	bl	8021b44 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	2200      	movs	r2, #0
 8013828:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	6a3a      	ldr	r2, [r7, #32]
 801382e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8013830:	4b3f      	ldr	r3, [pc, #252]	; (8013930 <netif_add+0x19c>)
 8013832:	781a      	ldrb	r2, [r3, #0]
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801383e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013840:	683b      	ldr	r3, [r7, #0]
 8013842:	687a      	ldr	r2, [r7, #4]
 8013844:	68b9      	ldr	r1, [r7, #8]
 8013846:	68f8      	ldr	r0, [r7, #12]
 8013848:	f000 f914 	bl	8013a74 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801384e:	68f8      	ldr	r0, [r7, #12]
 8013850:	4798      	blx	r3
 8013852:	4603      	mov	r3, r0
 8013854:	2b00      	cmp	r3, #0
 8013856:	d001      	beq.n	801385c <netif_add+0xc8>
    return NULL;
 8013858:	2300      	movs	r3, #0
 801385a:	e058      	b.n	801390e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013862:	2bff      	cmp	r3, #255	; 0xff
 8013864:	d103      	bne.n	801386e <netif_add+0xda>
        netif->num = 0;
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	2200      	movs	r2, #0
 801386a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801386e:	2300      	movs	r3, #0
 8013870:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013872:	4b30      	ldr	r3, [pc, #192]	; (8013934 <netif_add+0x1a0>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	617b      	str	r3, [r7, #20]
 8013878:	e02b      	b.n	80138d2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801387a:	697a      	ldr	r2, [r7, #20]
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	429a      	cmp	r2, r3
 8013880:	d106      	bne.n	8013890 <netif_add+0xfc>
 8013882:	4b25      	ldr	r3, [pc, #148]	; (8013918 <netif_add+0x184>)
 8013884:	f240 128b 	movw	r2, #395	; 0x18b
 8013888:	492b      	ldr	r1, [pc, #172]	; (8013938 <netif_add+0x1a4>)
 801388a:	4825      	ldr	r0, [pc, #148]	; (8013920 <netif_add+0x18c>)
 801388c:	f00d ff44 	bl	8021718 <iprintf>
        num_netifs++;
 8013890:	693b      	ldr	r3, [r7, #16]
 8013892:	3301      	adds	r3, #1
 8013894:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8013896:	693b      	ldr	r3, [r7, #16]
 8013898:	2bff      	cmp	r3, #255	; 0xff
 801389a:	dd06      	ble.n	80138aa <netif_add+0x116>
 801389c:	4b1e      	ldr	r3, [pc, #120]	; (8013918 <netif_add+0x184>)
 801389e:	f240 128d 	movw	r2, #397	; 0x18d
 80138a2:	4926      	ldr	r1, [pc, #152]	; (801393c <netif_add+0x1a8>)
 80138a4:	481e      	ldr	r0, [pc, #120]	; (8013920 <netif_add+0x18c>)
 80138a6:	f00d ff37 	bl	8021718 <iprintf>
        if (netif2->num == netif->num) {
 80138aa:	697b      	ldr	r3, [r7, #20]
 80138ac:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80138b6:	429a      	cmp	r2, r3
 80138b8:	d108      	bne.n	80138cc <netif_add+0x138>
          netif->num++;
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80138c0:	3301      	adds	r3, #1
 80138c2:	b2da      	uxtb	r2, r3
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80138ca:	e005      	b.n	80138d8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80138cc:	697b      	ldr	r3, [r7, #20]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	617b      	str	r3, [r7, #20]
 80138d2:	697b      	ldr	r3, [r7, #20]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d1d0      	bne.n	801387a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80138d8:	697b      	ldr	r3, [r7, #20]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d1be      	bne.n	801385c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80138e4:	2bfe      	cmp	r3, #254	; 0xfe
 80138e6:	d103      	bne.n	80138f0 <netif_add+0x15c>
    netif_num = 0;
 80138e8:	4b11      	ldr	r3, [pc, #68]	; (8013930 <netif_add+0x19c>)
 80138ea:	2200      	movs	r2, #0
 80138ec:	701a      	strb	r2, [r3, #0]
 80138ee:	e006      	b.n	80138fe <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80138f6:	3301      	adds	r3, #1
 80138f8:	b2da      	uxtb	r2, r3
 80138fa:	4b0d      	ldr	r3, [pc, #52]	; (8013930 <netif_add+0x19c>)
 80138fc:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80138fe:	4b0d      	ldr	r3, [pc, #52]	; (8013934 <netif_add+0x1a0>)
 8013900:	681a      	ldr	r2, [r3, #0]
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8013906:	4a0b      	ldr	r2, [pc, #44]	; (8013934 <netif_add+0x1a0>)
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801390c:	68fb      	ldr	r3, [r7, #12]
}
 801390e:	4618      	mov	r0, r3
 8013910:	3718      	adds	r7, #24
 8013912:	46bd      	mov	sp, r7
 8013914:	bd80      	pop	{r7, pc}
 8013916:	bf00      	nop
 8013918:	080247bc 	.word	0x080247bc
 801391c:	08024850 	.word	0x08024850
 8013920:	0802480c 	.word	0x0802480c
 8013924:	0802486c 	.word	0x0802486c
 8013928:	08027400 	.word	0x08027400
 801392c:	08013d57 	.word	0x08013d57
 8013930:	2001234c 	.word	0x2001234c
 8013934:	20012344 	.word	0x20012344
 8013938:	08024890 	.word	0x08024890
 801393c:	080248a4 	.word	0x080248a4

08013940 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b082      	sub	sp, #8
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
 8013948:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801394a:	6839      	ldr	r1, [r7, #0]
 801394c:	6878      	ldr	r0, [r7, #4]
 801394e:	f002 fea3 	bl	8016698 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8013952:	6839      	ldr	r1, [r7, #0]
 8013954:	6878      	ldr	r0, [r7, #4]
 8013956:	f007 ff43 	bl	801b7e0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801395a:	bf00      	nop
 801395c:	3708      	adds	r7, #8
 801395e:	46bd      	mov	sp, r7
 8013960:	bd80      	pop	{r7, pc}
	...

08013964 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8013964:	b580      	push	{r7, lr}
 8013966:	b086      	sub	sp, #24
 8013968:	af00      	add	r7, sp, #0
 801396a:	60f8      	str	r0, [r7, #12]
 801396c:	60b9      	str	r1, [r7, #8]
 801396e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d106      	bne.n	8013984 <netif_do_set_ipaddr+0x20>
 8013976:	4b1d      	ldr	r3, [pc, #116]	; (80139ec <netif_do_set_ipaddr+0x88>)
 8013978:	f240 12cb 	movw	r2, #459	; 0x1cb
 801397c:	491c      	ldr	r1, [pc, #112]	; (80139f0 <netif_do_set_ipaddr+0x8c>)
 801397e:	481d      	ldr	r0, [pc, #116]	; (80139f4 <netif_do_set_ipaddr+0x90>)
 8013980:	f00d feca 	bl	8021718 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d106      	bne.n	8013998 <netif_do_set_ipaddr+0x34>
 801398a:	4b18      	ldr	r3, [pc, #96]	; (80139ec <netif_do_set_ipaddr+0x88>)
 801398c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8013990:	4917      	ldr	r1, [pc, #92]	; (80139f0 <netif_do_set_ipaddr+0x8c>)
 8013992:	4818      	ldr	r0, [pc, #96]	; (80139f4 <netif_do_set_ipaddr+0x90>)
 8013994:	f00d fec0 	bl	8021718 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8013998:	68bb      	ldr	r3, [r7, #8]
 801399a:	681a      	ldr	r2, [r3, #0]
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	3304      	adds	r3, #4
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	429a      	cmp	r2, r3
 80139a4:	d01c      	beq.n	80139e0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80139a6:	68bb      	ldr	r3, [r7, #8]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	3304      	adds	r3, #4
 80139b0:	681a      	ldr	r2, [r3, #0]
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80139b6:	f107 0314 	add.w	r3, r7, #20
 80139ba:	4619      	mov	r1, r3
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f7ff ffbf 	bl	8013940 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80139c2:	68bb      	ldr	r3, [r7, #8]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d002      	beq.n	80139ce <netif_do_set_ipaddr+0x6a>
 80139c8:	68bb      	ldr	r3, [r7, #8]
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	e000      	b.n	80139d0 <netif_do_set_ipaddr+0x6c>
 80139ce:	2300      	movs	r3, #0
 80139d0:	68fa      	ldr	r2, [r7, #12]
 80139d2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80139d4:	2101      	movs	r1, #1
 80139d6:	68f8      	ldr	r0, [r7, #12]
 80139d8:	f000 f8d2 	bl	8013b80 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80139dc:	2301      	movs	r3, #1
 80139de:	e000      	b.n	80139e2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80139e0:	2300      	movs	r3, #0
}
 80139e2:	4618      	mov	r0, r3
 80139e4:	3718      	adds	r7, #24
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bd80      	pop	{r7, pc}
 80139ea:	bf00      	nop
 80139ec:	080247bc 	.word	0x080247bc
 80139f0:	080248d4 	.word	0x080248d4
 80139f4:	0802480c 	.word	0x0802480c

080139f8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80139f8:	b480      	push	{r7}
 80139fa:	b085      	sub	sp, #20
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	60f8      	str	r0, [r7, #12]
 8013a00:	60b9      	str	r1, [r7, #8]
 8013a02:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	681a      	ldr	r2, [r3, #0]
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	3308      	adds	r3, #8
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	429a      	cmp	r2, r3
 8013a10:	d00a      	beq.n	8013a28 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8013a12:	68bb      	ldr	r3, [r7, #8]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d002      	beq.n	8013a1e <netif_do_set_netmask+0x26>
 8013a18:	68bb      	ldr	r3, [r7, #8]
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	e000      	b.n	8013a20 <netif_do_set_netmask+0x28>
 8013a1e:	2300      	movs	r3, #0
 8013a20:	68fa      	ldr	r2, [r7, #12]
 8013a22:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8013a24:	2301      	movs	r3, #1
 8013a26:	e000      	b.n	8013a2a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8013a28:	2300      	movs	r3, #0
}
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	3714      	adds	r7, #20
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a34:	4770      	bx	lr

08013a36 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8013a36:	b480      	push	{r7}
 8013a38:	b085      	sub	sp, #20
 8013a3a:	af00      	add	r7, sp, #0
 8013a3c:	60f8      	str	r0, [r7, #12]
 8013a3e:	60b9      	str	r1, [r7, #8]
 8013a40:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8013a42:	68bb      	ldr	r3, [r7, #8]
 8013a44:	681a      	ldr	r2, [r3, #0]
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	330c      	adds	r3, #12
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	429a      	cmp	r2, r3
 8013a4e:	d00a      	beq.n	8013a66 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013a50:	68bb      	ldr	r3, [r7, #8]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d002      	beq.n	8013a5c <netif_do_set_gw+0x26>
 8013a56:	68bb      	ldr	r3, [r7, #8]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	e000      	b.n	8013a5e <netif_do_set_gw+0x28>
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	68fa      	ldr	r2, [r7, #12]
 8013a60:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8013a62:	2301      	movs	r3, #1
 8013a64:	e000      	b.n	8013a68 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8013a66:	2300      	movs	r3, #0
}
 8013a68:	4618      	mov	r0, r3
 8013a6a:	3714      	adds	r7, #20
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a72:	4770      	bx	lr

08013a74 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b088      	sub	sp, #32
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	60f8      	str	r0, [r7, #12]
 8013a7c:	60b9      	str	r1, [r7, #8]
 8013a7e:	607a      	str	r2, [r7, #4]
 8013a80:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8013a82:	2300      	movs	r3, #0
 8013a84:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8013a86:	2300      	movs	r3, #0
 8013a88:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013a8a:	68bb      	ldr	r3, [r7, #8]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d101      	bne.n	8013a94 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8013a90:	4b1c      	ldr	r3, [pc, #112]	; (8013b04 <netif_set_addr+0x90>)
 8013a92:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d101      	bne.n	8013a9e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8013a9a:	4b1a      	ldr	r3, [pc, #104]	; (8013b04 <netif_set_addr+0x90>)
 8013a9c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013a9e:	683b      	ldr	r3, [r7, #0]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d101      	bne.n	8013aa8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8013aa4:	4b17      	ldr	r3, [pc, #92]	; (8013b04 <netif_set_addr+0x90>)
 8013aa6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8013aa8:	68bb      	ldr	r3, [r7, #8]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d003      	beq.n	8013ab6 <netif_set_addr+0x42>
 8013aae:	68bb      	ldr	r3, [r7, #8]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d101      	bne.n	8013aba <netif_set_addr+0x46>
 8013ab6:	2301      	movs	r3, #1
 8013ab8:	e000      	b.n	8013abc <netif_set_addr+0x48>
 8013aba:	2300      	movs	r3, #0
 8013abc:	617b      	str	r3, [r7, #20]
  if (remove) {
 8013abe:	697b      	ldr	r3, [r7, #20]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d006      	beq.n	8013ad2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013ac4:	f107 0310 	add.w	r3, r7, #16
 8013ac8:	461a      	mov	r2, r3
 8013aca:	68b9      	ldr	r1, [r7, #8]
 8013acc:	68f8      	ldr	r0, [r7, #12]
 8013ace:	f7ff ff49 	bl	8013964 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8013ad2:	69fa      	ldr	r2, [r7, #28]
 8013ad4:	6879      	ldr	r1, [r7, #4]
 8013ad6:	68f8      	ldr	r0, [r7, #12]
 8013ad8:	f7ff ff8e 	bl	80139f8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8013adc:	69ba      	ldr	r2, [r7, #24]
 8013ade:	6839      	ldr	r1, [r7, #0]
 8013ae0:	68f8      	ldr	r0, [r7, #12]
 8013ae2:	f7ff ffa8 	bl	8013a36 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8013ae6:	697b      	ldr	r3, [r7, #20]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d106      	bne.n	8013afa <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013aec:	f107 0310 	add.w	r3, r7, #16
 8013af0:	461a      	mov	r2, r3
 8013af2:	68b9      	ldr	r1, [r7, #8]
 8013af4:	68f8      	ldr	r0, [r7, #12]
 8013af6:	f7ff ff35 	bl	8013964 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8013afa:	bf00      	nop
 8013afc:	3720      	adds	r7, #32
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bd80      	pop	{r7, pc}
 8013b02:	bf00      	nop
 8013b04:	08027400 	.word	0x08027400

08013b08 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8013b08:	b480      	push	{r7}
 8013b0a:	b083      	sub	sp, #12
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013b10:	4a04      	ldr	r2, [pc, #16]	; (8013b24 <netif_set_default+0x1c>)
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8013b16:	bf00      	nop
 8013b18:	370c      	adds	r7, #12
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b20:	4770      	bx	lr
 8013b22:	bf00      	nop
 8013b24:	20012348 	.word	0x20012348

08013b28 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b082      	sub	sp, #8
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d107      	bne.n	8013b46 <netif_set_up+0x1e>
 8013b36:	4b0f      	ldr	r3, [pc, #60]	; (8013b74 <netif_set_up+0x4c>)
 8013b38:	f44f 7254 	mov.w	r2, #848	; 0x350
 8013b3c:	490e      	ldr	r1, [pc, #56]	; (8013b78 <netif_set_up+0x50>)
 8013b3e:	480f      	ldr	r0, [pc, #60]	; (8013b7c <netif_set_up+0x54>)
 8013b40:	f00d fdea 	bl	8021718 <iprintf>
 8013b44:	e013      	b.n	8013b6e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013b4c:	f003 0301 	and.w	r3, r3, #1
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d10c      	bne.n	8013b6e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013b5a:	f043 0301 	orr.w	r3, r3, #1
 8013b5e:	b2da      	uxtb	r2, r3
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013b66:	2103      	movs	r1, #3
 8013b68:	6878      	ldr	r0, [r7, #4]
 8013b6a:	f000 f809 	bl	8013b80 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8013b6e:	3708      	adds	r7, #8
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bd80      	pop	{r7, pc}
 8013b74:	080247bc 	.word	0x080247bc
 8013b78:	08024944 	.word	0x08024944
 8013b7c:	0802480c 	.word	0x0802480c

08013b80 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b082      	sub	sp, #8
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	6078      	str	r0, [r7, #4]
 8013b88:	460b      	mov	r3, r1
 8013b8a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d106      	bne.n	8013ba0 <netif_issue_reports+0x20>
 8013b92:	4b18      	ldr	r3, [pc, #96]	; (8013bf4 <netif_issue_reports+0x74>)
 8013b94:	f240 326d 	movw	r2, #877	; 0x36d
 8013b98:	4917      	ldr	r1, [pc, #92]	; (8013bf8 <netif_issue_reports+0x78>)
 8013b9a:	4818      	ldr	r0, [pc, #96]	; (8013bfc <netif_issue_reports+0x7c>)
 8013b9c:	f00d fdbc 	bl	8021718 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013ba6:	f003 0304 	and.w	r3, r3, #4
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d01e      	beq.n	8013bec <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013bb4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d017      	beq.n	8013bec <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013bbc:	78fb      	ldrb	r3, [r7, #3]
 8013bbe:	f003 0301 	and.w	r3, r3, #1
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d013      	beq.n	8013bee <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	3304      	adds	r3, #4
 8013bca:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d00e      	beq.n	8013bee <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013bd6:	f003 0308 	and.w	r3, r3, #8
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d007      	beq.n	8013bee <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	3304      	adds	r3, #4
 8013be2:	4619      	mov	r1, r3
 8013be4:	6878      	ldr	r0, [r7, #4]
 8013be6:	f00a fbfb 	bl	801e3e0 <etharp_request>
 8013bea:	e000      	b.n	8013bee <netif_issue_reports+0x6e>
    return;
 8013bec:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8013bee:	3708      	adds	r7, #8
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}
 8013bf4:	080247bc 	.word	0x080247bc
 8013bf8:	08024960 	.word	0x08024960
 8013bfc:	0802480c 	.word	0x0802480c

08013c00 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b082      	sub	sp, #8
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d107      	bne.n	8013c1e <netif_set_down+0x1e>
 8013c0e:	4b12      	ldr	r3, [pc, #72]	; (8013c58 <netif_set_down+0x58>)
 8013c10:	f240 329b 	movw	r2, #923	; 0x39b
 8013c14:	4911      	ldr	r1, [pc, #68]	; (8013c5c <netif_set_down+0x5c>)
 8013c16:	4812      	ldr	r0, [pc, #72]	; (8013c60 <netif_set_down+0x60>)
 8013c18:	f00d fd7e 	bl	8021718 <iprintf>
 8013c1c:	e019      	b.n	8013c52 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013c24:	f003 0301 	and.w	r3, r3, #1
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d012      	beq.n	8013c52 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013c32:	f023 0301 	bic.w	r3, r3, #1
 8013c36:	b2da      	uxtb	r2, r3
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013c44:	f003 0308 	and.w	r3, r3, #8
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d002      	beq.n	8013c52 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8013c4c:	6878      	ldr	r0, [r7, #4]
 8013c4e:	f009 ff81 	bl	801db54 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8013c52:	3708      	adds	r7, #8
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bd80      	pop	{r7, pc}
 8013c58:	080247bc 	.word	0x080247bc
 8013c5c:	08024984 	.word	0x08024984
 8013c60:	0802480c 	.word	0x0802480c

08013c64 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d107      	bne.n	8013c82 <netif_set_link_up+0x1e>
 8013c72:	4b15      	ldr	r3, [pc, #84]	; (8013cc8 <netif_set_link_up+0x64>)
 8013c74:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8013c78:	4914      	ldr	r1, [pc, #80]	; (8013ccc <netif_set_link_up+0x68>)
 8013c7a:	4815      	ldr	r0, [pc, #84]	; (8013cd0 <netif_set_link_up+0x6c>)
 8013c7c:	f00d fd4c 	bl	8021718 <iprintf>
 8013c80:	e01e      	b.n	8013cc0 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013c88:	f003 0304 	and.w	r3, r3, #4
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d117      	bne.n	8013cc0 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013c96:	f043 0304 	orr.w	r3, r3, #4
 8013c9a:	b2da      	uxtb	r2, r3
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f008 f9c6 	bl	801c034 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013ca8:	2103      	movs	r1, #3
 8013caa:	6878      	ldr	r0, [r7, #4]
 8013cac:	f7ff ff68 	bl	8013b80 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	69db      	ldr	r3, [r3, #28]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d003      	beq.n	8013cc0 <netif_set_link_up+0x5c>
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	69db      	ldr	r3, [r3, #28]
 8013cbc:	6878      	ldr	r0, [r7, #4]
 8013cbe:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013cc0:	3708      	adds	r7, #8
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	bd80      	pop	{r7, pc}
 8013cc6:	bf00      	nop
 8013cc8:	080247bc 	.word	0x080247bc
 8013ccc:	080249a4 	.word	0x080249a4
 8013cd0:	0802480c 	.word	0x0802480c

08013cd4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b082      	sub	sp, #8
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d107      	bne.n	8013cf2 <netif_set_link_down+0x1e>
 8013ce2:	4b11      	ldr	r3, [pc, #68]	; (8013d28 <netif_set_link_down+0x54>)
 8013ce4:	f240 4206 	movw	r2, #1030	; 0x406
 8013ce8:	4910      	ldr	r1, [pc, #64]	; (8013d2c <netif_set_link_down+0x58>)
 8013cea:	4811      	ldr	r0, [pc, #68]	; (8013d30 <netif_set_link_down+0x5c>)
 8013cec:	f00d fd14 	bl	8021718 <iprintf>
 8013cf0:	e017      	b.n	8013d22 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013cf8:	f003 0304 	and.w	r3, r3, #4
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d010      	beq.n	8013d22 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013d06:	f023 0304 	bic.w	r3, r3, #4
 8013d0a:	b2da      	uxtb	r2, r3
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	69db      	ldr	r3, [r3, #28]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d003      	beq.n	8013d22 <netif_set_link_down+0x4e>
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	69db      	ldr	r3, [r3, #28]
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013d22:	3708      	adds	r7, #8
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}
 8013d28:	080247bc 	.word	0x080247bc
 8013d2c:	080249c8 	.word	0x080249c8
 8013d30:	0802480c 	.word	0x0802480c

08013d34 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8013d34:	b480      	push	{r7}
 8013d36:	b083      	sub	sp, #12
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
 8013d3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d002      	beq.n	8013d4a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	683a      	ldr	r2, [r7, #0]
 8013d48:	61da      	str	r2, [r3, #28]
  }
}
 8013d4a:	bf00      	nop
 8013d4c:	370c      	adds	r7, #12
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d54:	4770      	bx	lr

08013d56 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8013d56:	b480      	push	{r7}
 8013d58:	b085      	sub	sp, #20
 8013d5a:	af00      	add	r7, sp, #0
 8013d5c:	60f8      	str	r0, [r7, #12]
 8013d5e:	60b9      	str	r1, [r7, #8]
 8013d60:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8013d62:	f06f 030b 	mvn.w	r3, #11
}
 8013d66:	4618      	mov	r0, r3
 8013d68:	3714      	adds	r7, #20
 8013d6a:	46bd      	mov	sp, r7
 8013d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d70:	4770      	bx	lr
	...

08013d74 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8013d74:	b480      	push	{r7}
 8013d76:	b085      	sub	sp, #20
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8013d7e:	79fb      	ldrb	r3, [r7, #7]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d013      	beq.n	8013dac <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8013d84:	4b0d      	ldr	r3, [pc, #52]	; (8013dbc <netif_get_by_index+0x48>)
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	60fb      	str	r3, [r7, #12]
 8013d8a:	e00c      	b.n	8013da6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013d92:	3301      	adds	r3, #1
 8013d94:	b2db      	uxtb	r3, r3
 8013d96:	79fa      	ldrb	r2, [r7, #7]
 8013d98:	429a      	cmp	r2, r3
 8013d9a:	d101      	bne.n	8013da0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	e006      	b.n	8013dae <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	60fb      	str	r3, [r7, #12]
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d1ef      	bne.n	8013d8c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8013dac:	2300      	movs	r3, #0
}
 8013dae:	4618      	mov	r0, r3
 8013db0:	3714      	adds	r7, #20
 8013db2:	46bd      	mov	sp, r7
 8013db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db8:	4770      	bx	lr
 8013dba:	bf00      	nop
 8013dbc:	20012344 	.word	0x20012344

08013dc0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b082      	sub	sp, #8
 8013dc4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8013dc6:	f00c f909 	bl	801ffdc <sys_arch_protect>
 8013dca:	6038      	str	r0, [r7, #0]
 8013dcc:	4b0d      	ldr	r3, [pc, #52]	; (8013e04 <pbuf_free_ooseq+0x44>)
 8013dce:	2200      	movs	r2, #0
 8013dd0:	701a      	strb	r2, [r3, #0]
 8013dd2:	6838      	ldr	r0, [r7, #0]
 8013dd4:	f00c f910 	bl	801fff8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013dd8:	4b0b      	ldr	r3, [pc, #44]	; (8013e08 <pbuf_free_ooseq+0x48>)
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	607b      	str	r3, [r7, #4]
 8013dde:	e00a      	b.n	8013df6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d003      	beq.n	8013df0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013de8:	6878      	ldr	r0, [r7, #4]
 8013dea:	f002 fc93 	bl	8016714 <tcp_free_ooseq>
      return;
 8013dee:	e005      	b.n	8013dfc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	68db      	ldr	r3, [r3, #12]
 8013df4:	607b      	str	r3, [r7, #4]
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d1f1      	bne.n	8013de0 <pbuf_free_ooseq+0x20>
    }
  }
}
 8013dfc:	3708      	adds	r7, #8
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd80      	pop	{r7, pc}
 8013e02:	bf00      	nop
 8013e04:	2001234d 	.word	0x2001234d
 8013e08:	2001235c 	.word	0x2001235c

08013e0c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b082      	sub	sp, #8
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013e14:	f7ff ffd4 	bl	8013dc0 <pbuf_free_ooseq>
}
 8013e18:	bf00      	nop
 8013e1a:	3708      	adds	r7, #8
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	bd80      	pop	{r7, pc}

08013e20 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b082      	sub	sp, #8
 8013e24:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8013e26:	f00c f8d9 	bl	801ffdc <sys_arch_protect>
 8013e2a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013e2c:	4b0f      	ldr	r3, [pc, #60]	; (8013e6c <pbuf_pool_is_empty+0x4c>)
 8013e2e:	781b      	ldrb	r3, [r3, #0]
 8013e30:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8013e32:	4b0e      	ldr	r3, [pc, #56]	; (8013e6c <pbuf_pool_is_empty+0x4c>)
 8013e34:	2201      	movs	r2, #1
 8013e36:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f00c f8dd 	bl	801fff8 <sys_arch_unprotect>

  if (!queued) {
 8013e3e:	78fb      	ldrb	r3, [r7, #3]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d10f      	bne.n	8013e64 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8013e44:	2100      	movs	r1, #0
 8013e46:	480a      	ldr	r0, [pc, #40]	; (8013e70 <pbuf_pool_is_empty+0x50>)
 8013e48:	f7fe fe84 	bl	8012b54 <tcpip_try_callback>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d008      	beq.n	8013e64 <pbuf_pool_is_empty+0x44>
 8013e52:	f00c f8c3 	bl	801ffdc <sys_arch_protect>
 8013e56:	6078      	str	r0, [r7, #4]
 8013e58:	4b04      	ldr	r3, [pc, #16]	; (8013e6c <pbuf_pool_is_empty+0x4c>)
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	701a      	strb	r2, [r3, #0]
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	f00c f8ca 	bl	801fff8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013e64:	bf00      	nop
 8013e66:	3708      	adds	r7, #8
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd80      	pop	{r7, pc}
 8013e6c:	2001234d 	.word	0x2001234d
 8013e70:	08013e0d 	.word	0x08013e0d

08013e74 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8013e74:	b480      	push	{r7}
 8013e76:	b085      	sub	sp, #20
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	60f8      	str	r0, [r7, #12]
 8013e7c:	60b9      	str	r1, [r7, #8]
 8013e7e:	4611      	mov	r1, r2
 8013e80:	461a      	mov	r2, r3
 8013e82:	460b      	mov	r3, r1
 8013e84:	80fb      	strh	r3, [r7, #6]
 8013e86:	4613      	mov	r3, r2
 8013e88:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	68ba      	ldr	r2, [r7, #8]
 8013e94:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	88fa      	ldrh	r2, [r7, #6]
 8013e9a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	88ba      	ldrh	r2, [r7, #4]
 8013ea0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8013ea2:	8b3b      	ldrh	r3, [r7, #24]
 8013ea4:	b2da      	uxtb	r2, r3
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	7f3a      	ldrb	r2, [r7, #28]
 8013eae:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	2201      	movs	r2, #1
 8013eb4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	2200      	movs	r2, #0
 8013eba:	73da      	strb	r2, [r3, #15]
}
 8013ebc:	bf00      	nop
 8013ebe:	3714      	adds	r7, #20
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec6:	4770      	bx	lr

08013ec8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b08c      	sub	sp, #48	; 0x30
 8013ecc:	af02      	add	r7, sp, #8
 8013ece:	4603      	mov	r3, r0
 8013ed0:	71fb      	strb	r3, [r7, #7]
 8013ed2:	460b      	mov	r3, r1
 8013ed4:	80bb      	strh	r3, [r7, #4]
 8013ed6:	4613      	mov	r3, r2
 8013ed8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8013eda:	79fb      	ldrb	r3, [r7, #7]
 8013edc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8013ede:	887b      	ldrh	r3, [r7, #2]
 8013ee0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8013ee4:	d07f      	beq.n	8013fe6 <pbuf_alloc+0x11e>
 8013ee6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8013eea:	f300 80c8 	bgt.w	801407e <pbuf_alloc+0x1b6>
 8013eee:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8013ef2:	d010      	beq.n	8013f16 <pbuf_alloc+0x4e>
 8013ef4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8013ef8:	f300 80c1 	bgt.w	801407e <pbuf_alloc+0x1b6>
 8013efc:	2b01      	cmp	r3, #1
 8013efe:	d002      	beq.n	8013f06 <pbuf_alloc+0x3e>
 8013f00:	2b41      	cmp	r3, #65	; 0x41
 8013f02:	f040 80bc 	bne.w	801407e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8013f06:	887a      	ldrh	r2, [r7, #2]
 8013f08:	88bb      	ldrh	r3, [r7, #4]
 8013f0a:	4619      	mov	r1, r3
 8013f0c:	2000      	movs	r0, #0
 8013f0e:	f000 f8d1 	bl	80140b4 <pbuf_alloc_reference>
 8013f12:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8013f14:	e0bd      	b.n	8014092 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8013f16:	2300      	movs	r3, #0
 8013f18:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8013f1e:	88bb      	ldrh	r3, [r7, #4]
 8013f20:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8013f22:	200c      	movs	r0, #12
 8013f24:	f7ff fb8e 	bl	8013644 <memp_malloc>
 8013f28:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8013f2a:	693b      	ldr	r3, [r7, #16]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d109      	bne.n	8013f44 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8013f30:	f7ff ff76 	bl	8013e20 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8013f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d002      	beq.n	8013f40 <pbuf_alloc+0x78>
            pbuf_free(p);
 8013f3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013f3c:	f000 faa8 	bl	8014490 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8013f40:	2300      	movs	r3, #0
 8013f42:	e0a7      	b.n	8014094 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8013f44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f46:	3303      	adds	r3, #3
 8013f48:	b29b      	uxth	r3, r3
 8013f4a:	f023 0303 	bic.w	r3, r3, #3
 8013f4e:	b29b      	uxth	r3, r3
 8013f50:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8013f54:	b29b      	uxth	r3, r3
 8013f56:	8b7a      	ldrh	r2, [r7, #26]
 8013f58:	4293      	cmp	r3, r2
 8013f5a:	bf28      	it	cs
 8013f5c:	4613      	movcs	r3, r2
 8013f5e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8013f60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f62:	3310      	adds	r3, #16
 8013f64:	693a      	ldr	r2, [r7, #16]
 8013f66:	4413      	add	r3, r2
 8013f68:	3303      	adds	r3, #3
 8013f6a:	f023 0303 	bic.w	r3, r3, #3
 8013f6e:	4618      	mov	r0, r3
 8013f70:	89f9      	ldrh	r1, [r7, #14]
 8013f72:	8b7a      	ldrh	r2, [r7, #26]
 8013f74:	2300      	movs	r3, #0
 8013f76:	9301      	str	r3, [sp, #4]
 8013f78:	887b      	ldrh	r3, [r7, #2]
 8013f7a:	9300      	str	r3, [sp, #0]
 8013f7c:	460b      	mov	r3, r1
 8013f7e:	4601      	mov	r1, r0
 8013f80:	6938      	ldr	r0, [r7, #16]
 8013f82:	f7ff ff77 	bl	8013e74 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8013f86:	693b      	ldr	r3, [r7, #16]
 8013f88:	685b      	ldr	r3, [r3, #4]
 8013f8a:	f003 0303 	and.w	r3, r3, #3
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d006      	beq.n	8013fa0 <pbuf_alloc+0xd8>
 8013f92:	4b42      	ldr	r3, [pc, #264]	; (801409c <pbuf_alloc+0x1d4>)
 8013f94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013f98:	4941      	ldr	r1, [pc, #260]	; (80140a0 <pbuf_alloc+0x1d8>)
 8013f9a:	4842      	ldr	r0, [pc, #264]	; (80140a4 <pbuf_alloc+0x1dc>)
 8013f9c:	f00d fbbc 	bl	8021718 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8013fa0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013fa2:	3303      	adds	r3, #3
 8013fa4:	f023 0303 	bic.w	r3, r3, #3
 8013fa8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013fac:	d106      	bne.n	8013fbc <pbuf_alloc+0xf4>
 8013fae:	4b3b      	ldr	r3, [pc, #236]	; (801409c <pbuf_alloc+0x1d4>)
 8013fb0:	f44f 7281 	mov.w	r2, #258	; 0x102
 8013fb4:	493c      	ldr	r1, [pc, #240]	; (80140a8 <pbuf_alloc+0x1e0>)
 8013fb6:	483b      	ldr	r0, [pc, #236]	; (80140a4 <pbuf_alloc+0x1dc>)
 8013fb8:	f00d fbae 	bl	8021718 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8013fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d102      	bne.n	8013fc8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8013fc2:	693b      	ldr	r3, [r7, #16]
 8013fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8013fc6:	e002      	b.n	8013fce <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8013fc8:	69fb      	ldr	r3, [r7, #28]
 8013fca:	693a      	ldr	r2, [r7, #16]
 8013fcc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8013fce:	693b      	ldr	r3, [r7, #16]
 8013fd0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8013fd2:	8b7a      	ldrh	r2, [r7, #26]
 8013fd4:	89fb      	ldrh	r3, [r7, #14]
 8013fd6:	1ad3      	subs	r3, r2, r3
 8013fd8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8013fda:	2300      	movs	r3, #0
 8013fdc:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8013fde:	8b7b      	ldrh	r3, [r7, #26]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d19e      	bne.n	8013f22 <pbuf_alloc+0x5a>
      break;
 8013fe4:	e055      	b.n	8014092 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8013fe6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013fe8:	3303      	adds	r3, #3
 8013fea:	b29b      	uxth	r3, r3
 8013fec:	f023 0303 	bic.w	r3, r3, #3
 8013ff0:	b29a      	uxth	r2, r3
 8013ff2:	88bb      	ldrh	r3, [r7, #4]
 8013ff4:	3303      	adds	r3, #3
 8013ff6:	b29b      	uxth	r3, r3
 8013ff8:	f023 0303 	bic.w	r3, r3, #3
 8013ffc:	b29b      	uxth	r3, r3
 8013ffe:	4413      	add	r3, r2
 8014000:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8014002:	8b3b      	ldrh	r3, [r7, #24]
 8014004:	3310      	adds	r3, #16
 8014006:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014008:	8b3a      	ldrh	r2, [r7, #24]
 801400a:	88bb      	ldrh	r3, [r7, #4]
 801400c:	3303      	adds	r3, #3
 801400e:	f023 0303 	bic.w	r3, r3, #3
 8014012:	429a      	cmp	r2, r3
 8014014:	d306      	bcc.n	8014024 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8014016:	8afa      	ldrh	r2, [r7, #22]
 8014018:	88bb      	ldrh	r3, [r7, #4]
 801401a:	3303      	adds	r3, #3
 801401c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014020:	429a      	cmp	r2, r3
 8014022:	d201      	bcs.n	8014028 <pbuf_alloc+0x160>
        return NULL;
 8014024:	2300      	movs	r3, #0
 8014026:	e035      	b.n	8014094 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8014028:	8afb      	ldrh	r3, [r7, #22]
 801402a:	4618      	mov	r0, r3
 801402c:	f7ff f966 	bl	80132fc <mem_malloc>
 8014030:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8014032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014034:	2b00      	cmp	r3, #0
 8014036:	d101      	bne.n	801403c <pbuf_alloc+0x174>
        return NULL;
 8014038:	2300      	movs	r3, #0
 801403a:	e02b      	b.n	8014094 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801403c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801403e:	3310      	adds	r3, #16
 8014040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014042:	4413      	add	r3, r2
 8014044:	3303      	adds	r3, #3
 8014046:	f023 0303 	bic.w	r3, r3, #3
 801404a:	4618      	mov	r0, r3
 801404c:	88b9      	ldrh	r1, [r7, #4]
 801404e:	88ba      	ldrh	r2, [r7, #4]
 8014050:	2300      	movs	r3, #0
 8014052:	9301      	str	r3, [sp, #4]
 8014054:	887b      	ldrh	r3, [r7, #2]
 8014056:	9300      	str	r3, [sp, #0]
 8014058:	460b      	mov	r3, r1
 801405a:	4601      	mov	r1, r0
 801405c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801405e:	f7ff ff09 	bl	8013e74 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8014062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014064:	685b      	ldr	r3, [r3, #4]
 8014066:	f003 0303 	and.w	r3, r3, #3
 801406a:	2b00      	cmp	r3, #0
 801406c:	d010      	beq.n	8014090 <pbuf_alloc+0x1c8>
 801406e:	4b0b      	ldr	r3, [pc, #44]	; (801409c <pbuf_alloc+0x1d4>)
 8014070:	f44f 7291 	mov.w	r2, #290	; 0x122
 8014074:	490d      	ldr	r1, [pc, #52]	; (80140ac <pbuf_alloc+0x1e4>)
 8014076:	480b      	ldr	r0, [pc, #44]	; (80140a4 <pbuf_alloc+0x1dc>)
 8014078:	f00d fb4e 	bl	8021718 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801407c:	e008      	b.n	8014090 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801407e:	4b07      	ldr	r3, [pc, #28]	; (801409c <pbuf_alloc+0x1d4>)
 8014080:	f240 1227 	movw	r2, #295	; 0x127
 8014084:	490a      	ldr	r1, [pc, #40]	; (80140b0 <pbuf_alloc+0x1e8>)
 8014086:	4807      	ldr	r0, [pc, #28]	; (80140a4 <pbuf_alloc+0x1dc>)
 8014088:	f00d fb46 	bl	8021718 <iprintf>
      return NULL;
 801408c:	2300      	movs	r3, #0
 801408e:	e001      	b.n	8014094 <pbuf_alloc+0x1cc>
      break;
 8014090:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8014092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014094:	4618      	mov	r0, r3
 8014096:	3728      	adds	r7, #40	; 0x28
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}
 801409c:	080249ec 	.word	0x080249ec
 80140a0:	08024a1c 	.word	0x08024a1c
 80140a4:	08024a4c 	.word	0x08024a4c
 80140a8:	08024a74 	.word	0x08024a74
 80140ac:	08024aa8 	.word	0x08024aa8
 80140b0:	08024ad4 	.word	0x08024ad4

080140b4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b086      	sub	sp, #24
 80140b8:	af02      	add	r7, sp, #8
 80140ba:	6078      	str	r0, [r7, #4]
 80140bc:	460b      	mov	r3, r1
 80140be:	807b      	strh	r3, [r7, #2]
 80140c0:	4613      	mov	r3, r2
 80140c2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80140c4:	883b      	ldrh	r3, [r7, #0]
 80140c6:	2b41      	cmp	r3, #65	; 0x41
 80140c8:	d009      	beq.n	80140de <pbuf_alloc_reference+0x2a>
 80140ca:	883b      	ldrh	r3, [r7, #0]
 80140cc:	2b01      	cmp	r3, #1
 80140ce:	d006      	beq.n	80140de <pbuf_alloc_reference+0x2a>
 80140d0:	4b0f      	ldr	r3, [pc, #60]	; (8014110 <pbuf_alloc_reference+0x5c>)
 80140d2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80140d6:	490f      	ldr	r1, [pc, #60]	; (8014114 <pbuf_alloc_reference+0x60>)
 80140d8:	480f      	ldr	r0, [pc, #60]	; (8014118 <pbuf_alloc_reference+0x64>)
 80140da:	f00d fb1d 	bl	8021718 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80140de:	200b      	movs	r0, #11
 80140e0:	f7ff fab0 	bl	8013644 <memp_malloc>
 80140e4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d101      	bne.n	80140f0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80140ec:	2300      	movs	r3, #0
 80140ee:	e00b      	b.n	8014108 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80140f0:	8879      	ldrh	r1, [r7, #2]
 80140f2:	887a      	ldrh	r2, [r7, #2]
 80140f4:	2300      	movs	r3, #0
 80140f6:	9301      	str	r3, [sp, #4]
 80140f8:	883b      	ldrh	r3, [r7, #0]
 80140fa:	9300      	str	r3, [sp, #0]
 80140fc:	460b      	mov	r3, r1
 80140fe:	6879      	ldr	r1, [r7, #4]
 8014100:	68f8      	ldr	r0, [r7, #12]
 8014102:	f7ff feb7 	bl	8013e74 <pbuf_init_alloced_pbuf>
  return p;
 8014106:	68fb      	ldr	r3, [r7, #12]
}
 8014108:	4618      	mov	r0, r3
 801410a:	3710      	adds	r7, #16
 801410c:	46bd      	mov	sp, r7
 801410e:	bd80      	pop	{r7, pc}
 8014110:	080249ec 	.word	0x080249ec
 8014114:	08024af0 	.word	0x08024af0
 8014118:	08024a4c 	.word	0x08024a4c

0801411c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b088      	sub	sp, #32
 8014120:	af02      	add	r7, sp, #8
 8014122:	607b      	str	r3, [r7, #4]
 8014124:	4603      	mov	r3, r0
 8014126:	73fb      	strb	r3, [r7, #15]
 8014128:	460b      	mov	r3, r1
 801412a:	81bb      	strh	r3, [r7, #12]
 801412c:	4613      	mov	r3, r2
 801412e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8014130:	7bfb      	ldrb	r3, [r7, #15]
 8014132:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8014134:	8a7b      	ldrh	r3, [r7, #18]
 8014136:	3303      	adds	r3, #3
 8014138:	f023 0203 	bic.w	r2, r3, #3
 801413c:	89bb      	ldrh	r3, [r7, #12]
 801413e:	441a      	add	r2, r3
 8014140:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014142:	429a      	cmp	r2, r3
 8014144:	d901      	bls.n	801414a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8014146:	2300      	movs	r3, #0
 8014148:	e018      	b.n	801417c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801414a:	6a3b      	ldr	r3, [r7, #32]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d007      	beq.n	8014160 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8014150:	8a7b      	ldrh	r3, [r7, #18]
 8014152:	3303      	adds	r3, #3
 8014154:	f023 0303 	bic.w	r3, r3, #3
 8014158:	6a3a      	ldr	r2, [r7, #32]
 801415a:	4413      	add	r3, r2
 801415c:	617b      	str	r3, [r7, #20]
 801415e:	e001      	b.n	8014164 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8014160:	2300      	movs	r3, #0
 8014162:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8014164:	6878      	ldr	r0, [r7, #4]
 8014166:	89b9      	ldrh	r1, [r7, #12]
 8014168:	89ba      	ldrh	r2, [r7, #12]
 801416a:	2302      	movs	r3, #2
 801416c:	9301      	str	r3, [sp, #4]
 801416e:	897b      	ldrh	r3, [r7, #10]
 8014170:	9300      	str	r3, [sp, #0]
 8014172:	460b      	mov	r3, r1
 8014174:	6979      	ldr	r1, [r7, #20]
 8014176:	f7ff fe7d 	bl	8013e74 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801417a:	687b      	ldr	r3, [r7, #4]
}
 801417c:	4618      	mov	r0, r3
 801417e:	3718      	adds	r7, #24
 8014180:	46bd      	mov	sp, r7
 8014182:	bd80      	pop	{r7, pc}

08014184 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b084      	sub	sp, #16
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
 801418c:	460b      	mov	r3, r1
 801418e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d106      	bne.n	80141a4 <pbuf_realloc+0x20>
 8014196:	4b3a      	ldr	r3, [pc, #232]	; (8014280 <pbuf_realloc+0xfc>)
 8014198:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801419c:	4939      	ldr	r1, [pc, #228]	; (8014284 <pbuf_realloc+0x100>)
 801419e:	483a      	ldr	r0, [pc, #232]	; (8014288 <pbuf_realloc+0x104>)
 80141a0:	f00d faba 	bl	8021718 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	891b      	ldrh	r3, [r3, #8]
 80141a8:	887a      	ldrh	r2, [r7, #2]
 80141aa:	429a      	cmp	r2, r3
 80141ac:	d263      	bcs.n	8014276 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	891a      	ldrh	r2, [r3, #8]
 80141b2:	887b      	ldrh	r3, [r7, #2]
 80141b4:	1ad3      	subs	r3, r2, r3
 80141b6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80141b8:	887b      	ldrh	r3, [r7, #2]
 80141ba:	817b      	strh	r3, [r7, #10]
  q = p;
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80141c0:	e018      	b.n	80141f4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	895b      	ldrh	r3, [r3, #10]
 80141c6:	897a      	ldrh	r2, [r7, #10]
 80141c8:	1ad3      	subs	r3, r2, r3
 80141ca:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	891a      	ldrh	r2, [r3, #8]
 80141d0:	893b      	ldrh	r3, [r7, #8]
 80141d2:	1ad3      	subs	r3, r2, r3
 80141d4:	b29a      	uxth	r2, r3
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d106      	bne.n	80141f4 <pbuf_realloc+0x70>
 80141e6:	4b26      	ldr	r3, [pc, #152]	; (8014280 <pbuf_realloc+0xfc>)
 80141e8:	f240 12af 	movw	r2, #431	; 0x1af
 80141ec:	4927      	ldr	r1, [pc, #156]	; (801428c <pbuf_realloc+0x108>)
 80141ee:	4826      	ldr	r0, [pc, #152]	; (8014288 <pbuf_realloc+0x104>)
 80141f0:	f00d fa92 	bl	8021718 <iprintf>
  while (rem_len > q->len) {
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	895b      	ldrh	r3, [r3, #10]
 80141f8:	897a      	ldrh	r2, [r7, #10]
 80141fa:	429a      	cmp	r2, r3
 80141fc:	d8e1      	bhi.n	80141c2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	7b1b      	ldrb	r3, [r3, #12]
 8014202:	f003 030f 	and.w	r3, r3, #15
 8014206:	2b00      	cmp	r3, #0
 8014208:	d121      	bne.n	801424e <pbuf_realloc+0xca>
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	895b      	ldrh	r3, [r3, #10]
 801420e:	897a      	ldrh	r2, [r7, #10]
 8014210:	429a      	cmp	r2, r3
 8014212:	d01c      	beq.n	801424e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	7b5b      	ldrb	r3, [r3, #13]
 8014218:	f003 0302 	and.w	r3, r3, #2
 801421c:	2b00      	cmp	r3, #0
 801421e:	d116      	bne.n	801424e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	685a      	ldr	r2, [r3, #4]
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	1ad3      	subs	r3, r2, r3
 8014228:	b29a      	uxth	r2, r3
 801422a:	897b      	ldrh	r3, [r7, #10]
 801422c:	4413      	add	r3, r2
 801422e:	b29b      	uxth	r3, r3
 8014230:	4619      	mov	r1, r3
 8014232:	68f8      	ldr	r0, [r7, #12]
 8014234:	f7fe ff58 	bl	80130e8 <mem_trim>
 8014238:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d106      	bne.n	801424e <pbuf_realloc+0xca>
 8014240:	4b0f      	ldr	r3, [pc, #60]	; (8014280 <pbuf_realloc+0xfc>)
 8014242:	f240 12bd 	movw	r2, #445	; 0x1bd
 8014246:	4912      	ldr	r1, [pc, #72]	; (8014290 <pbuf_realloc+0x10c>)
 8014248:	480f      	ldr	r0, [pc, #60]	; (8014288 <pbuf_realloc+0x104>)
 801424a:	f00d fa65 	bl	8021718 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	897a      	ldrh	r2, [r7, #10]
 8014252:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	895a      	ldrh	r2, [r3, #10]
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d004      	beq.n	801426e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	4618      	mov	r0, r3
 801426a:	f000 f911 	bl	8014490 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	2200      	movs	r2, #0
 8014272:	601a      	str	r2, [r3, #0]
 8014274:	e000      	b.n	8014278 <pbuf_realloc+0xf4>
    return;
 8014276:	bf00      	nop

}
 8014278:	3710      	adds	r7, #16
 801427a:	46bd      	mov	sp, r7
 801427c:	bd80      	pop	{r7, pc}
 801427e:	bf00      	nop
 8014280:	080249ec 	.word	0x080249ec
 8014284:	08024b04 	.word	0x08024b04
 8014288:	08024a4c 	.word	0x08024a4c
 801428c:	08024b1c 	.word	0x08024b1c
 8014290:	08024b34 	.word	0x08024b34

08014294 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b086      	sub	sp, #24
 8014298:	af00      	add	r7, sp, #0
 801429a:	60f8      	str	r0, [r7, #12]
 801429c:	60b9      	str	r1, [r7, #8]
 801429e:	4613      	mov	r3, r2
 80142a0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d106      	bne.n	80142b6 <pbuf_add_header_impl+0x22>
 80142a8:	4b2b      	ldr	r3, [pc, #172]	; (8014358 <pbuf_add_header_impl+0xc4>)
 80142aa:	f240 12df 	movw	r2, #479	; 0x1df
 80142ae:	492b      	ldr	r1, [pc, #172]	; (801435c <pbuf_add_header_impl+0xc8>)
 80142b0:	482b      	ldr	r0, [pc, #172]	; (8014360 <pbuf_add_header_impl+0xcc>)
 80142b2:	f00d fa31 	bl	8021718 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d003      	beq.n	80142c4 <pbuf_add_header_impl+0x30>
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80142c2:	d301      	bcc.n	80142c8 <pbuf_add_header_impl+0x34>
    return 1;
 80142c4:	2301      	movs	r3, #1
 80142c6:	e043      	b.n	8014350 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80142c8:	68bb      	ldr	r3, [r7, #8]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d101      	bne.n	80142d2 <pbuf_add_header_impl+0x3e>
    return 0;
 80142ce:	2300      	movs	r3, #0
 80142d0:	e03e      	b.n	8014350 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80142d2:	68bb      	ldr	r3, [r7, #8]
 80142d4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	891a      	ldrh	r2, [r3, #8]
 80142da:	8a7b      	ldrh	r3, [r7, #18]
 80142dc:	4413      	add	r3, r2
 80142de:	b29b      	uxth	r3, r3
 80142e0:	8a7a      	ldrh	r2, [r7, #18]
 80142e2:	429a      	cmp	r2, r3
 80142e4:	d901      	bls.n	80142ea <pbuf_add_header_impl+0x56>
    return 1;
 80142e6:	2301      	movs	r3, #1
 80142e8:	e032      	b.n	8014350 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	7b1b      	ldrb	r3, [r3, #12]
 80142ee:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80142f0:	8a3b      	ldrh	r3, [r7, #16]
 80142f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d00c      	beq.n	8014314 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	685a      	ldr	r2, [r3, #4]
 80142fe:	68bb      	ldr	r3, [r7, #8]
 8014300:	425b      	negs	r3, r3
 8014302:	4413      	add	r3, r2
 8014304:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	3310      	adds	r3, #16
 801430a:	697a      	ldr	r2, [r7, #20]
 801430c:	429a      	cmp	r2, r3
 801430e:	d20d      	bcs.n	801432c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8014310:	2301      	movs	r3, #1
 8014312:	e01d      	b.n	8014350 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8014314:	79fb      	ldrb	r3, [r7, #7]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d006      	beq.n	8014328 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	685a      	ldr	r2, [r3, #4]
 801431e:	68bb      	ldr	r3, [r7, #8]
 8014320:	425b      	negs	r3, r3
 8014322:	4413      	add	r3, r2
 8014324:	617b      	str	r3, [r7, #20]
 8014326:	e001      	b.n	801432c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014328:	2301      	movs	r3, #1
 801432a:	e011      	b.n	8014350 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	697a      	ldr	r2, [r7, #20]
 8014330:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	895a      	ldrh	r2, [r3, #10]
 8014336:	8a7b      	ldrh	r3, [r7, #18]
 8014338:	4413      	add	r3, r2
 801433a:	b29a      	uxth	r2, r3
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	891a      	ldrh	r2, [r3, #8]
 8014344:	8a7b      	ldrh	r3, [r7, #18]
 8014346:	4413      	add	r3, r2
 8014348:	b29a      	uxth	r2, r3
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	811a      	strh	r2, [r3, #8]


  return 0;
 801434e:	2300      	movs	r3, #0
}
 8014350:	4618      	mov	r0, r3
 8014352:	3718      	adds	r7, #24
 8014354:	46bd      	mov	sp, r7
 8014356:	bd80      	pop	{r7, pc}
 8014358:	080249ec 	.word	0x080249ec
 801435c:	08024b50 	.word	0x08024b50
 8014360:	08024a4c 	.word	0x08024a4c

08014364 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8014364:	b580      	push	{r7, lr}
 8014366:	b082      	sub	sp, #8
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]
 801436c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801436e:	2200      	movs	r2, #0
 8014370:	6839      	ldr	r1, [r7, #0]
 8014372:	6878      	ldr	r0, [r7, #4]
 8014374:	f7ff ff8e 	bl	8014294 <pbuf_add_header_impl>
 8014378:	4603      	mov	r3, r0
}
 801437a:	4618      	mov	r0, r3
 801437c:	3708      	adds	r7, #8
 801437e:	46bd      	mov	sp, r7
 8014380:	bd80      	pop	{r7, pc}
	...

08014384 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014384:	b580      	push	{r7, lr}
 8014386:	b084      	sub	sp, #16
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
 801438c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d106      	bne.n	80143a2 <pbuf_remove_header+0x1e>
 8014394:	4b20      	ldr	r3, [pc, #128]	; (8014418 <pbuf_remove_header+0x94>)
 8014396:	f240 224b 	movw	r2, #587	; 0x24b
 801439a:	4920      	ldr	r1, [pc, #128]	; (801441c <pbuf_remove_header+0x98>)
 801439c:	4820      	ldr	r0, [pc, #128]	; (8014420 <pbuf_remove_header+0x9c>)
 801439e:	f00d f9bb 	bl	8021718 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d003      	beq.n	80143b0 <pbuf_remove_header+0x2c>
 80143a8:	683b      	ldr	r3, [r7, #0]
 80143aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80143ae:	d301      	bcc.n	80143b4 <pbuf_remove_header+0x30>
    return 1;
 80143b0:	2301      	movs	r3, #1
 80143b2:	e02c      	b.n	801440e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80143b4:	683b      	ldr	r3, [r7, #0]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d101      	bne.n	80143be <pbuf_remove_header+0x3a>
    return 0;
 80143ba:	2300      	movs	r3, #0
 80143bc:	e027      	b.n	801440e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80143be:	683b      	ldr	r3, [r7, #0]
 80143c0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	895b      	ldrh	r3, [r3, #10]
 80143c6:	89fa      	ldrh	r2, [r7, #14]
 80143c8:	429a      	cmp	r2, r3
 80143ca:	d908      	bls.n	80143de <pbuf_remove_header+0x5a>
 80143cc:	4b12      	ldr	r3, [pc, #72]	; (8014418 <pbuf_remove_header+0x94>)
 80143ce:	f240 2255 	movw	r2, #597	; 0x255
 80143d2:	4914      	ldr	r1, [pc, #80]	; (8014424 <pbuf_remove_header+0xa0>)
 80143d4:	4812      	ldr	r0, [pc, #72]	; (8014420 <pbuf_remove_header+0x9c>)
 80143d6:	f00d f99f 	bl	8021718 <iprintf>
 80143da:	2301      	movs	r3, #1
 80143dc:	e017      	b.n	801440e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	685b      	ldr	r3, [r3, #4]
 80143e2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	685a      	ldr	r2, [r3, #4]
 80143e8:	683b      	ldr	r3, [r7, #0]
 80143ea:	441a      	add	r2, r3
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	895a      	ldrh	r2, [r3, #10]
 80143f4:	89fb      	ldrh	r3, [r7, #14]
 80143f6:	1ad3      	subs	r3, r2, r3
 80143f8:	b29a      	uxth	r2, r3
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	891a      	ldrh	r2, [r3, #8]
 8014402:	89fb      	ldrh	r3, [r7, #14]
 8014404:	1ad3      	subs	r3, r2, r3
 8014406:	b29a      	uxth	r2, r3
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801440c:	2300      	movs	r3, #0
}
 801440e:	4618      	mov	r0, r3
 8014410:	3710      	adds	r7, #16
 8014412:	46bd      	mov	sp, r7
 8014414:	bd80      	pop	{r7, pc}
 8014416:	bf00      	nop
 8014418:	080249ec 	.word	0x080249ec
 801441c:	08024b50 	.word	0x08024b50
 8014420:	08024a4c 	.word	0x08024a4c
 8014424:	08024b5c 	.word	0x08024b5c

08014428 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b082      	sub	sp, #8
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
 8014430:	460b      	mov	r3, r1
 8014432:	807b      	strh	r3, [r7, #2]
 8014434:	4613      	mov	r3, r2
 8014436:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014438:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801443c:	2b00      	cmp	r3, #0
 801443e:	da08      	bge.n	8014452 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8014440:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014444:	425b      	negs	r3, r3
 8014446:	4619      	mov	r1, r3
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f7ff ff9b 	bl	8014384 <pbuf_remove_header>
 801444e:	4603      	mov	r3, r0
 8014450:	e007      	b.n	8014462 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8014452:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014456:	787a      	ldrb	r2, [r7, #1]
 8014458:	4619      	mov	r1, r3
 801445a:	6878      	ldr	r0, [r7, #4]
 801445c:	f7ff ff1a 	bl	8014294 <pbuf_add_header_impl>
 8014460:	4603      	mov	r3, r0
  }
}
 8014462:	4618      	mov	r0, r3
 8014464:	3708      	adds	r7, #8
 8014466:	46bd      	mov	sp, r7
 8014468:	bd80      	pop	{r7, pc}

0801446a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801446a:	b580      	push	{r7, lr}
 801446c:	b082      	sub	sp, #8
 801446e:	af00      	add	r7, sp, #0
 8014470:	6078      	str	r0, [r7, #4]
 8014472:	460b      	mov	r3, r1
 8014474:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8014476:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801447a:	2201      	movs	r2, #1
 801447c:	4619      	mov	r1, r3
 801447e:	6878      	ldr	r0, [r7, #4]
 8014480:	f7ff ffd2 	bl	8014428 <pbuf_header_impl>
 8014484:	4603      	mov	r3, r0
}
 8014486:	4618      	mov	r0, r3
 8014488:	3708      	adds	r7, #8
 801448a:	46bd      	mov	sp, r7
 801448c:	bd80      	pop	{r7, pc}
	...

08014490 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014490:	b580      	push	{r7, lr}
 8014492:	b088      	sub	sp, #32
 8014494:	af00      	add	r7, sp, #0
 8014496:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d10b      	bne.n	80144b6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d106      	bne.n	80144b2 <pbuf_free+0x22>
 80144a4:	4b3b      	ldr	r3, [pc, #236]	; (8014594 <pbuf_free+0x104>)
 80144a6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80144aa:	493b      	ldr	r1, [pc, #236]	; (8014598 <pbuf_free+0x108>)
 80144ac:	483b      	ldr	r0, [pc, #236]	; (801459c <pbuf_free+0x10c>)
 80144ae:	f00d f933 	bl	8021718 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80144b2:	2300      	movs	r3, #0
 80144b4:	e069      	b.n	801458a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80144b6:	2300      	movs	r3, #0
 80144b8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80144ba:	e062      	b.n	8014582 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80144bc:	f00b fd8e 	bl	801ffdc <sys_arch_protect>
 80144c0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	7b9b      	ldrb	r3, [r3, #14]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d106      	bne.n	80144d8 <pbuf_free+0x48>
 80144ca:	4b32      	ldr	r3, [pc, #200]	; (8014594 <pbuf_free+0x104>)
 80144cc:	f240 22f1 	movw	r2, #753	; 0x2f1
 80144d0:	4933      	ldr	r1, [pc, #204]	; (80145a0 <pbuf_free+0x110>)
 80144d2:	4832      	ldr	r0, [pc, #200]	; (801459c <pbuf_free+0x10c>)
 80144d4:	f00d f920 	bl	8021718 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	7b9b      	ldrb	r3, [r3, #14]
 80144dc:	3b01      	subs	r3, #1
 80144de:	b2da      	uxtb	r2, r3
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	739a      	strb	r2, [r3, #14]
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	7b9b      	ldrb	r3, [r3, #14]
 80144e8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80144ea:	69b8      	ldr	r0, [r7, #24]
 80144ec:	f00b fd84 	bl	801fff8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80144f0:	7dfb      	ldrb	r3, [r7, #23]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d143      	bne.n	801457e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	7b1b      	ldrb	r3, [r3, #12]
 8014500:	f003 030f 	and.w	r3, r3, #15
 8014504:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	7b5b      	ldrb	r3, [r3, #13]
 801450a:	f003 0302 	and.w	r3, r3, #2
 801450e:	2b00      	cmp	r3, #0
 8014510:	d011      	beq.n	8014536 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014516:	68bb      	ldr	r3, [r7, #8]
 8014518:	691b      	ldr	r3, [r3, #16]
 801451a:	2b00      	cmp	r3, #0
 801451c:	d106      	bne.n	801452c <pbuf_free+0x9c>
 801451e:	4b1d      	ldr	r3, [pc, #116]	; (8014594 <pbuf_free+0x104>)
 8014520:	f240 22ff 	movw	r2, #767	; 0x2ff
 8014524:	491f      	ldr	r1, [pc, #124]	; (80145a4 <pbuf_free+0x114>)
 8014526:	481d      	ldr	r0, [pc, #116]	; (801459c <pbuf_free+0x10c>)
 8014528:	f00d f8f6 	bl	8021718 <iprintf>
        pc->custom_free_function(p);
 801452c:	68bb      	ldr	r3, [r7, #8]
 801452e:	691b      	ldr	r3, [r3, #16]
 8014530:	6878      	ldr	r0, [r7, #4]
 8014532:	4798      	blx	r3
 8014534:	e01d      	b.n	8014572 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8014536:	7bfb      	ldrb	r3, [r7, #15]
 8014538:	2b02      	cmp	r3, #2
 801453a:	d104      	bne.n	8014546 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801453c:	6879      	ldr	r1, [r7, #4]
 801453e:	200c      	movs	r0, #12
 8014540:	f7ff f8f6 	bl	8013730 <memp_free>
 8014544:	e015      	b.n	8014572 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8014546:	7bfb      	ldrb	r3, [r7, #15]
 8014548:	2b01      	cmp	r3, #1
 801454a:	d104      	bne.n	8014556 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801454c:	6879      	ldr	r1, [r7, #4]
 801454e:	200b      	movs	r0, #11
 8014550:	f7ff f8ee 	bl	8013730 <memp_free>
 8014554:	e00d      	b.n	8014572 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8014556:	7bfb      	ldrb	r3, [r7, #15]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d103      	bne.n	8014564 <pbuf_free+0xd4>
          mem_free(p);
 801455c:	6878      	ldr	r0, [r7, #4]
 801455e:	f7fe fd33 	bl	8012fc8 <mem_free>
 8014562:	e006      	b.n	8014572 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014564:	4b0b      	ldr	r3, [pc, #44]	; (8014594 <pbuf_free+0x104>)
 8014566:	f240 320f 	movw	r2, #783	; 0x30f
 801456a:	490f      	ldr	r1, [pc, #60]	; (80145a8 <pbuf_free+0x118>)
 801456c:	480b      	ldr	r0, [pc, #44]	; (801459c <pbuf_free+0x10c>)
 801456e:	f00d f8d3 	bl	8021718 <iprintf>
        }
      }
      count++;
 8014572:	7ffb      	ldrb	r3, [r7, #31]
 8014574:	3301      	adds	r3, #1
 8014576:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014578:	693b      	ldr	r3, [r7, #16]
 801457a:	607b      	str	r3, [r7, #4]
 801457c:	e001      	b.n	8014582 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801457e:	2300      	movs	r3, #0
 8014580:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d199      	bne.n	80144bc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014588:	7ffb      	ldrb	r3, [r7, #31]
}
 801458a:	4618      	mov	r0, r3
 801458c:	3720      	adds	r7, #32
 801458e:	46bd      	mov	sp, r7
 8014590:	bd80      	pop	{r7, pc}
 8014592:	bf00      	nop
 8014594:	080249ec 	.word	0x080249ec
 8014598:	08024b50 	.word	0x08024b50
 801459c:	08024a4c 	.word	0x08024a4c
 80145a0:	08024b7c 	.word	0x08024b7c
 80145a4:	08024b94 	.word	0x08024b94
 80145a8:	08024bb8 	.word	0x08024bb8

080145ac <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80145ac:	b480      	push	{r7}
 80145ae:	b085      	sub	sp, #20
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80145b4:	2300      	movs	r3, #0
 80145b6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80145b8:	e005      	b.n	80145c6 <pbuf_clen+0x1a>
    ++len;
 80145ba:	89fb      	ldrh	r3, [r7, #14]
 80145bc:	3301      	adds	r3, #1
 80145be:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d1f6      	bne.n	80145ba <pbuf_clen+0xe>
  }
  return len;
 80145cc:	89fb      	ldrh	r3, [r7, #14]
}
 80145ce:	4618      	mov	r0, r3
 80145d0:	3714      	adds	r7, #20
 80145d2:	46bd      	mov	sp, r7
 80145d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d8:	4770      	bx	lr
	...

080145dc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b084      	sub	sp, #16
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d016      	beq.n	8014618 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80145ea:	f00b fcf7 	bl	801ffdc <sys_arch_protect>
 80145ee:	60f8      	str	r0, [r7, #12]
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	7b9b      	ldrb	r3, [r3, #14]
 80145f4:	3301      	adds	r3, #1
 80145f6:	b2da      	uxtb	r2, r3
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	739a      	strb	r2, [r3, #14]
 80145fc:	68f8      	ldr	r0, [r7, #12]
 80145fe:	f00b fcfb 	bl	801fff8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	7b9b      	ldrb	r3, [r3, #14]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d106      	bne.n	8014618 <pbuf_ref+0x3c>
 801460a:	4b05      	ldr	r3, [pc, #20]	; (8014620 <pbuf_ref+0x44>)
 801460c:	f240 3242 	movw	r2, #834	; 0x342
 8014610:	4904      	ldr	r1, [pc, #16]	; (8014624 <pbuf_ref+0x48>)
 8014612:	4805      	ldr	r0, [pc, #20]	; (8014628 <pbuf_ref+0x4c>)
 8014614:	f00d f880 	bl	8021718 <iprintf>
  }
}
 8014618:	bf00      	nop
 801461a:	3710      	adds	r7, #16
 801461c:	46bd      	mov	sp, r7
 801461e:	bd80      	pop	{r7, pc}
 8014620:	080249ec 	.word	0x080249ec
 8014624:	08024bcc 	.word	0x08024bcc
 8014628:	08024a4c 	.word	0x08024a4c

0801462c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b084      	sub	sp, #16
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
 8014634:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d002      	beq.n	8014642 <pbuf_cat+0x16>
 801463c:	683b      	ldr	r3, [r7, #0]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d107      	bne.n	8014652 <pbuf_cat+0x26>
 8014642:	4b20      	ldr	r3, [pc, #128]	; (80146c4 <pbuf_cat+0x98>)
 8014644:	f240 3259 	movw	r2, #857	; 0x359
 8014648:	491f      	ldr	r1, [pc, #124]	; (80146c8 <pbuf_cat+0x9c>)
 801464a:	4820      	ldr	r0, [pc, #128]	; (80146cc <pbuf_cat+0xa0>)
 801464c:	f00d f864 	bl	8021718 <iprintf>
 8014650:	e034      	b.n	80146bc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	60fb      	str	r3, [r7, #12]
 8014656:	e00a      	b.n	801466e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	891a      	ldrh	r2, [r3, #8]
 801465c:	683b      	ldr	r3, [r7, #0]
 801465e:	891b      	ldrh	r3, [r3, #8]
 8014660:	4413      	add	r3, r2
 8014662:	b29a      	uxth	r2, r3
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	60fb      	str	r3, [r7, #12]
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d1f0      	bne.n	8014658 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	891a      	ldrh	r2, [r3, #8]
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	895b      	ldrh	r3, [r3, #10]
 801467e:	429a      	cmp	r2, r3
 8014680:	d006      	beq.n	8014690 <pbuf_cat+0x64>
 8014682:	4b10      	ldr	r3, [pc, #64]	; (80146c4 <pbuf_cat+0x98>)
 8014684:	f240 3262 	movw	r2, #866	; 0x362
 8014688:	4911      	ldr	r1, [pc, #68]	; (80146d0 <pbuf_cat+0xa4>)
 801468a:	4810      	ldr	r0, [pc, #64]	; (80146cc <pbuf_cat+0xa0>)
 801468c:	f00d f844 	bl	8021718 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d006      	beq.n	80146a6 <pbuf_cat+0x7a>
 8014698:	4b0a      	ldr	r3, [pc, #40]	; (80146c4 <pbuf_cat+0x98>)
 801469a:	f240 3263 	movw	r2, #867	; 0x363
 801469e:	490d      	ldr	r1, [pc, #52]	; (80146d4 <pbuf_cat+0xa8>)
 80146a0:	480a      	ldr	r0, [pc, #40]	; (80146cc <pbuf_cat+0xa0>)
 80146a2:	f00d f839 	bl	8021718 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	891a      	ldrh	r2, [r3, #8]
 80146aa:	683b      	ldr	r3, [r7, #0]
 80146ac:	891b      	ldrh	r3, [r3, #8]
 80146ae:	4413      	add	r3, r2
 80146b0:	b29a      	uxth	r2, r3
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	683a      	ldr	r2, [r7, #0]
 80146ba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80146bc:	3710      	adds	r7, #16
 80146be:	46bd      	mov	sp, r7
 80146c0:	bd80      	pop	{r7, pc}
 80146c2:	bf00      	nop
 80146c4:	080249ec 	.word	0x080249ec
 80146c8:	08024be0 	.word	0x08024be0
 80146cc:	08024a4c 	.word	0x08024a4c
 80146d0:	08024c18 	.word	0x08024c18
 80146d4:	08024c48 	.word	0x08024c48

080146d8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b082      	sub	sp, #8
 80146dc:	af00      	add	r7, sp, #0
 80146de:	6078      	str	r0, [r7, #4]
 80146e0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80146e2:	6839      	ldr	r1, [r7, #0]
 80146e4:	6878      	ldr	r0, [r7, #4]
 80146e6:	f7ff ffa1 	bl	801462c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80146ea:	6838      	ldr	r0, [r7, #0]
 80146ec:	f7ff ff76 	bl	80145dc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80146f0:	bf00      	nop
 80146f2:	3708      	adds	r7, #8
 80146f4:	46bd      	mov	sp, r7
 80146f6:	bd80      	pop	{r7, pc}

080146f8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b086      	sub	sp, #24
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
 8014700:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8014702:	2300      	movs	r3, #0
 8014704:	617b      	str	r3, [r7, #20]
 8014706:	2300      	movs	r3, #0
 8014708:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d008      	beq.n	8014722 <pbuf_copy+0x2a>
 8014710:	683b      	ldr	r3, [r7, #0]
 8014712:	2b00      	cmp	r3, #0
 8014714:	d005      	beq.n	8014722 <pbuf_copy+0x2a>
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	891a      	ldrh	r2, [r3, #8]
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	891b      	ldrh	r3, [r3, #8]
 801471e:	429a      	cmp	r2, r3
 8014720:	d209      	bcs.n	8014736 <pbuf_copy+0x3e>
 8014722:	4b57      	ldr	r3, [pc, #348]	; (8014880 <pbuf_copy+0x188>)
 8014724:	f240 32c9 	movw	r2, #969	; 0x3c9
 8014728:	4956      	ldr	r1, [pc, #344]	; (8014884 <pbuf_copy+0x18c>)
 801472a:	4857      	ldr	r0, [pc, #348]	; (8014888 <pbuf_copy+0x190>)
 801472c:	f00c fff4 	bl	8021718 <iprintf>
 8014730:	f06f 030f 	mvn.w	r3, #15
 8014734:	e09f      	b.n	8014876 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	895b      	ldrh	r3, [r3, #10]
 801473a:	461a      	mov	r2, r3
 801473c:	697b      	ldr	r3, [r7, #20]
 801473e:	1ad2      	subs	r2, r2, r3
 8014740:	683b      	ldr	r3, [r7, #0]
 8014742:	895b      	ldrh	r3, [r3, #10]
 8014744:	4619      	mov	r1, r3
 8014746:	693b      	ldr	r3, [r7, #16]
 8014748:	1acb      	subs	r3, r1, r3
 801474a:	429a      	cmp	r2, r3
 801474c:	d306      	bcc.n	801475c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801474e:	683b      	ldr	r3, [r7, #0]
 8014750:	895b      	ldrh	r3, [r3, #10]
 8014752:	461a      	mov	r2, r3
 8014754:	693b      	ldr	r3, [r7, #16]
 8014756:	1ad3      	subs	r3, r2, r3
 8014758:	60fb      	str	r3, [r7, #12]
 801475a:	e005      	b.n	8014768 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	895b      	ldrh	r3, [r3, #10]
 8014760:	461a      	mov	r2, r3
 8014762:	697b      	ldr	r3, [r7, #20]
 8014764:	1ad3      	subs	r3, r2, r3
 8014766:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	685a      	ldr	r2, [r3, #4]
 801476c:	697b      	ldr	r3, [r7, #20]
 801476e:	18d0      	adds	r0, r2, r3
 8014770:	683b      	ldr	r3, [r7, #0]
 8014772:	685a      	ldr	r2, [r3, #4]
 8014774:	693b      	ldr	r3, [r7, #16]
 8014776:	4413      	add	r3, r2
 8014778:	68fa      	ldr	r2, [r7, #12]
 801477a:	4619      	mov	r1, r3
 801477c:	f00d faf3 	bl	8021d66 <memcpy>
    offset_to += len;
 8014780:	697a      	ldr	r2, [r7, #20]
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	4413      	add	r3, r2
 8014786:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014788:	693a      	ldr	r2, [r7, #16]
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	4413      	add	r3, r2
 801478e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	895b      	ldrh	r3, [r3, #10]
 8014794:	461a      	mov	r2, r3
 8014796:	697b      	ldr	r3, [r7, #20]
 8014798:	4293      	cmp	r3, r2
 801479a:	d906      	bls.n	80147aa <pbuf_copy+0xb2>
 801479c:	4b38      	ldr	r3, [pc, #224]	; (8014880 <pbuf_copy+0x188>)
 801479e:	f240 32d9 	movw	r2, #985	; 0x3d9
 80147a2:	493a      	ldr	r1, [pc, #232]	; (801488c <pbuf_copy+0x194>)
 80147a4:	4838      	ldr	r0, [pc, #224]	; (8014888 <pbuf_copy+0x190>)
 80147a6:	f00c ffb7 	bl	8021718 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80147aa:	683b      	ldr	r3, [r7, #0]
 80147ac:	895b      	ldrh	r3, [r3, #10]
 80147ae:	461a      	mov	r2, r3
 80147b0:	693b      	ldr	r3, [r7, #16]
 80147b2:	4293      	cmp	r3, r2
 80147b4:	d906      	bls.n	80147c4 <pbuf_copy+0xcc>
 80147b6:	4b32      	ldr	r3, [pc, #200]	; (8014880 <pbuf_copy+0x188>)
 80147b8:	f240 32da 	movw	r2, #986	; 0x3da
 80147bc:	4934      	ldr	r1, [pc, #208]	; (8014890 <pbuf_copy+0x198>)
 80147be:	4832      	ldr	r0, [pc, #200]	; (8014888 <pbuf_copy+0x190>)
 80147c0:	f00c ffaa 	bl	8021718 <iprintf>
    if (offset_from >= p_from->len) {
 80147c4:	683b      	ldr	r3, [r7, #0]
 80147c6:	895b      	ldrh	r3, [r3, #10]
 80147c8:	461a      	mov	r2, r3
 80147ca:	693b      	ldr	r3, [r7, #16]
 80147cc:	4293      	cmp	r3, r2
 80147ce:	d304      	bcc.n	80147da <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80147d0:	2300      	movs	r3, #0
 80147d2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80147d4:	683b      	ldr	r3, [r7, #0]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	895b      	ldrh	r3, [r3, #10]
 80147de:	461a      	mov	r2, r3
 80147e0:	697b      	ldr	r3, [r7, #20]
 80147e2:	4293      	cmp	r3, r2
 80147e4:	d114      	bne.n	8014810 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80147e6:	2300      	movs	r3, #0
 80147e8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d10c      	bne.n	8014810 <pbuf_copy+0x118>
 80147f6:	683b      	ldr	r3, [r7, #0]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d009      	beq.n	8014810 <pbuf_copy+0x118>
 80147fc:	4b20      	ldr	r3, [pc, #128]	; (8014880 <pbuf_copy+0x188>)
 80147fe:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8014802:	4924      	ldr	r1, [pc, #144]	; (8014894 <pbuf_copy+0x19c>)
 8014804:	4820      	ldr	r0, [pc, #128]	; (8014888 <pbuf_copy+0x190>)
 8014806:	f00c ff87 	bl	8021718 <iprintf>
 801480a:	f06f 030f 	mvn.w	r3, #15
 801480e:	e032      	b.n	8014876 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014810:	683b      	ldr	r3, [r7, #0]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d013      	beq.n	801483e <pbuf_copy+0x146>
 8014816:	683b      	ldr	r3, [r7, #0]
 8014818:	895a      	ldrh	r2, [r3, #10]
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	891b      	ldrh	r3, [r3, #8]
 801481e:	429a      	cmp	r2, r3
 8014820:	d10d      	bne.n	801483e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014822:	683b      	ldr	r3, [r7, #0]
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d009      	beq.n	801483e <pbuf_copy+0x146>
 801482a:	4b15      	ldr	r3, [pc, #84]	; (8014880 <pbuf_copy+0x188>)
 801482c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8014830:	4919      	ldr	r1, [pc, #100]	; (8014898 <pbuf_copy+0x1a0>)
 8014832:	4815      	ldr	r0, [pc, #84]	; (8014888 <pbuf_copy+0x190>)
 8014834:	f00c ff70 	bl	8021718 <iprintf>
 8014838:	f06f 0305 	mvn.w	r3, #5
 801483c:	e01b      	b.n	8014876 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d013      	beq.n	801486c <pbuf_copy+0x174>
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	895a      	ldrh	r2, [r3, #10]
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	891b      	ldrh	r3, [r3, #8]
 801484c:	429a      	cmp	r2, r3
 801484e:	d10d      	bne.n	801486c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d009      	beq.n	801486c <pbuf_copy+0x174>
 8014858:	4b09      	ldr	r3, [pc, #36]	; (8014880 <pbuf_copy+0x188>)
 801485a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801485e:	490e      	ldr	r1, [pc, #56]	; (8014898 <pbuf_copy+0x1a0>)
 8014860:	4809      	ldr	r0, [pc, #36]	; (8014888 <pbuf_copy+0x190>)
 8014862:	f00c ff59 	bl	8021718 <iprintf>
 8014866:	f06f 0305 	mvn.w	r3, #5
 801486a:	e004      	b.n	8014876 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801486c:	683b      	ldr	r3, [r7, #0]
 801486e:	2b00      	cmp	r3, #0
 8014870:	f47f af61 	bne.w	8014736 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014874:	2300      	movs	r3, #0
}
 8014876:	4618      	mov	r0, r3
 8014878:	3718      	adds	r7, #24
 801487a:	46bd      	mov	sp, r7
 801487c:	bd80      	pop	{r7, pc}
 801487e:	bf00      	nop
 8014880:	080249ec 	.word	0x080249ec
 8014884:	08024c94 	.word	0x08024c94
 8014888:	08024a4c 	.word	0x08024a4c
 801488c:	08024cc4 	.word	0x08024cc4
 8014890:	08024cdc 	.word	0x08024cdc
 8014894:	08024cf8 	.word	0x08024cf8
 8014898:	08024d08 	.word	0x08024d08

0801489c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b088      	sub	sp, #32
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	60f8      	str	r0, [r7, #12]
 80148a4:	60b9      	str	r1, [r7, #8]
 80148a6:	4611      	mov	r1, r2
 80148a8:	461a      	mov	r2, r3
 80148aa:	460b      	mov	r3, r1
 80148ac:	80fb      	strh	r3, [r7, #6]
 80148ae:	4613      	mov	r3, r2
 80148b0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80148b2:	2300      	movs	r3, #0
 80148b4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80148b6:	2300      	movs	r3, #0
 80148b8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d108      	bne.n	80148d2 <pbuf_copy_partial+0x36>
 80148c0:	4b2b      	ldr	r3, [pc, #172]	; (8014970 <pbuf_copy_partial+0xd4>)
 80148c2:	f240 420a 	movw	r2, #1034	; 0x40a
 80148c6:	492b      	ldr	r1, [pc, #172]	; (8014974 <pbuf_copy_partial+0xd8>)
 80148c8:	482b      	ldr	r0, [pc, #172]	; (8014978 <pbuf_copy_partial+0xdc>)
 80148ca:	f00c ff25 	bl	8021718 <iprintf>
 80148ce:	2300      	movs	r3, #0
 80148d0:	e04a      	b.n	8014968 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80148d2:	68bb      	ldr	r3, [r7, #8]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d108      	bne.n	80148ea <pbuf_copy_partial+0x4e>
 80148d8:	4b25      	ldr	r3, [pc, #148]	; (8014970 <pbuf_copy_partial+0xd4>)
 80148da:	f240 420b 	movw	r2, #1035	; 0x40b
 80148de:	4927      	ldr	r1, [pc, #156]	; (801497c <pbuf_copy_partial+0xe0>)
 80148e0:	4825      	ldr	r0, [pc, #148]	; (8014978 <pbuf_copy_partial+0xdc>)
 80148e2:	f00c ff19 	bl	8021718 <iprintf>
 80148e6:	2300      	movs	r3, #0
 80148e8:	e03e      	b.n	8014968 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	61fb      	str	r3, [r7, #28]
 80148ee:	e034      	b.n	801495a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80148f0:	88bb      	ldrh	r3, [r7, #4]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d00a      	beq.n	801490c <pbuf_copy_partial+0x70>
 80148f6:	69fb      	ldr	r3, [r7, #28]
 80148f8:	895b      	ldrh	r3, [r3, #10]
 80148fa:	88ba      	ldrh	r2, [r7, #4]
 80148fc:	429a      	cmp	r2, r3
 80148fe:	d305      	bcc.n	801490c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8014900:	69fb      	ldr	r3, [r7, #28]
 8014902:	895b      	ldrh	r3, [r3, #10]
 8014904:	88ba      	ldrh	r2, [r7, #4]
 8014906:	1ad3      	subs	r3, r2, r3
 8014908:	80bb      	strh	r3, [r7, #4]
 801490a:	e023      	b.n	8014954 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801490c:	69fb      	ldr	r3, [r7, #28]
 801490e:	895a      	ldrh	r2, [r3, #10]
 8014910:	88bb      	ldrh	r3, [r7, #4]
 8014912:	1ad3      	subs	r3, r2, r3
 8014914:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8014916:	8b3a      	ldrh	r2, [r7, #24]
 8014918:	88fb      	ldrh	r3, [r7, #6]
 801491a:	429a      	cmp	r2, r3
 801491c:	d901      	bls.n	8014922 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801491e:	88fb      	ldrh	r3, [r7, #6]
 8014920:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8014922:	8b7b      	ldrh	r3, [r7, #26]
 8014924:	68ba      	ldr	r2, [r7, #8]
 8014926:	18d0      	adds	r0, r2, r3
 8014928:	69fb      	ldr	r3, [r7, #28]
 801492a:	685a      	ldr	r2, [r3, #4]
 801492c:	88bb      	ldrh	r3, [r7, #4]
 801492e:	4413      	add	r3, r2
 8014930:	8b3a      	ldrh	r2, [r7, #24]
 8014932:	4619      	mov	r1, r3
 8014934:	f00d fa17 	bl	8021d66 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8014938:	8afa      	ldrh	r2, [r7, #22]
 801493a:	8b3b      	ldrh	r3, [r7, #24]
 801493c:	4413      	add	r3, r2
 801493e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8014940:	8b7a      	ldrh	r2, [r7, #26]
 8014942:	8b3b      	ldrh	r3, [r7, #24]
 8014944:	4413      	add	r3, r2
 8014946:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8014948:	88fa      	ldrh	r2, [r7, #6]
 801494a:	8b3b      	ldrh	r3, [r7, #24]
 801494c:	1ad3      	subs	r3, r2, r3
 801494e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8014950:	2300      	movs	r3, #0
 8014952:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014954:	69fb      	ldr	r3, [r7, #28]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	61fb      	str	r3, [r7, #28]
 801495a:	88fb      	ldrh	r3, [r7, #6]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d002      	beq.n	8014966 <pbuf_copy_partial+0xca>
 8014960:	69fb      	ldr	r3, [r7, #28]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d1c4      	bne.n	80148f0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8014966:	8afb      	ldrh	r3, [r7, #22]
}
 8014968:	4618      	mov	r0, r3
 801496a:	3720      	adds	r7, #32
 801496c:	46bd      	mov	sp, r7
 801496e:	bd80      	pop	{r7, pc}
 8014970:	080249ec 	.word	0x080249ec
 8014974:	08024d34 	.word	0x08024d34
 8014978:	08024a4c 	.word	0x08024a4c
 801497c:	08024d54 	.word	0x08024d54

08014980 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8014980:	b580      	push	{r7, lr}
 8014982:	b084      	sub	sp, #16
 8014984:	af00      	add	r7, sp, #0
 8014986:	4603      	mov	r3, r0
 8014988:	603a      	str	r2, [r7, #0]
 801498a:	71fb      	strb	r3, [r7, #7]
 801498c:	460b      	mov	r3, r1
 801498e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8014990:	683b      	ldr	r3, [r7, #0]
 8014992:	8919      	ldrh	r1, [r3, #8]
 8014994:	88ba      	ldrh	r2, [r7, #4]
 8014996:	79fb      	ldrb	r3, [r7, #7]
 8014998:	4618      	mov	r0, r3
 801499a:	f7ff fa95 	bl	8013ec8 <pbuf_alloc>
 801499e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d101      	bne.n	80149aa <pbuf_clone+0x2a>
    return NULL;
 80149a6:	2300      	movs	r3, #0
 80149a8:	e011      	b.n	80149ce <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80149aa:	6839      	ldr	r1, [r7, #0]
 80149ac:	68f8      	ldr	r0, [r7, #12]
 80149ae:	f7ff fea3 	bl	80146f8 <pbuf_copy>
 80149b2:	4603      	mov	r3, r0
 80149b4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80149b6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d006      	beq.n	80149cc <pbuf_clone+0x4c>
 80149be:	4b06      	ldr	r3, [pc, #24]	; (80149d8 <pbuf_clone+0x58>)
 80149c0:	f240 5224 	movw	r2, #1316	; 0x524
 80149c4:	4905      	ldr	r1, [pc, #20]	; (80149dc <pbuf_clone+0x5c>)
 80149c6:	4806      	ldr	r0, [pc, #24]	; (80149e0 <pbuf_clone+0x60>)
 80149c8:	f00c fea6 	bl	8021718 <iprintf>
  return q;
 80149cc:	68fb      	ldr	r3, [r7, #12]
}
 80149ce:	4618      	mov	r0, r3
 80149d0:	3710      	adds	r7, #16
 80149d2:	46bd      	mov	sp, r7
 80149d4:	bd80      	pop	{r7, pc}
 80149d6:	bf00      	nop
 80149d8:	080249ec 	.word	0x080249ec
 80149dc:	08024e60 	.word	0x08024e60
 80149e0:	08024a4c 	.word	0x08024a4c

080149e4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80149e8:	f00c fd1a 	bl	8021420 <rand>
 80149ec:	4603      	mov	r3, r0
 80149ee:	b29b      	uxth	r3, r3
 80149f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80149f4:	b29b      	uxth	r3, r3
 80149f6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80149fa:	b29a      	uxth	r2, r3
 80149fc:	4b01      	ldr	r3, [pc, #4]	; (8014a04 <tcp_init+0x20>)
 80149fe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014a00:	bf00      	nop
 8014a02:	bd80      	pop	{r7, pc}
 8014a04:	20000024 	.word	0x20000024

08014a08 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b082      	sub	sp, #8
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	7d1b      	ldrb	r3, [r3, #20]
 8014a14:	2b01      	cmp	r3, #1
 8014a16:	d105      	bne.n	8014a24 <tcp_free+0x1c>
 8014a18:	4b06      	ldr	r3, [pc, #24]	; (8014a34 <tcp_free+0x2c>)
 8014a1a:	22d4      	movs	r2, #212	; 0xd4
 8014a1c:	4906      	ldr	r1, [pc, #24]	; (8014a38 <tcp_free+0x30>)
 8014a1e:	4807      	ldr	r0, [pc, #28]	; (8014a3c <tcp_free+0x34>)
 8014a20:	f00c fe7a 	bl	8021718 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8014a24:	6879      	ldr	r1, [r7, #4]
 8014a26:	2001      	movs	r0, #1
 8014a28:	f7fe fe82 	bl	8013730 <memp_free>
}
 8014a2c:	bf00      	nop
 8014a2e:	3708      	adds	r7, #8
 8014a30:	46bd      	mov	sp, r7
 8014a32:	bd80      	pop	{r7, pc}
 8014a34:	08024eec 	.word	0x08024eec
 8014a38:	08024f1c 	.word	0x08024f1c
 8014a3c:	08024f30 	.word	0x08024f30

08014a40 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b082      	sub	sp, #8
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	7d1b      	ldrb	r3, [r3, #20]
 8014a4c:	2b01      	cmp	r3, #1
 8014a4e:	d105      	bne.n	8014a5c <tcp_free_listen+0x1c>
 8014a50:	4b06      	ldr	r3, [pc, #24]	; (8014a6c <tcp_free_listen+0x2c>)
 8014a52:	22df      	movs	r2, #223	; 0xdf
 8014a54:	4906      	ldr	r1, [pc, #24]	; (8014a70 <tcp_free_listen+0x30>)
 8014a56:	4807      	ldr	r0, [pc, #28]	; (8014a74 <tcp_free_listen+0x34>)
 8014a58:	f00c fe5e 	bl	8021718 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8014a5c:	6879      	ldr	r1, [r7, #4]
 8014a5e:	2002      	movs	r0, #2
 8014a60:	f7fe fe66 	bl	8013730 <memp_free>
}
 8014a64:	bf00      	nop
 8014a66:	3708      	adds	r7, #8
 8014a68:	46bd      	mov	sp, r7
 8014a6a:	bd80      	pop	{r7, pc}
 8014a6c:	08024eec 	.word	0x08024eec
 8014a70:	08024f58 	.word	0x08024f58
 8014a74:	08024f30 	.word	0x08024f30

08014a78 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8014a78:	b580      	push	{r7, lr}
 8014a7a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8014a7c:	f001 f8dc 	bl	8015c38 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8014a80:	4b07      	ldr	r3, [pc, #28]	; (8014aa0 <tcp_tmr+0x28>)
 8014a82:	781b      	ldrb	r3, [r3, #0]
 8014a84:	3301      	adds	r3, #1
 8014a86:	b2da      	uxtb	r2, r3
 8014a88:	4b05      	ldr	r3, [pc, #20]	; (8014aa0 <tcp_tmr+0x28>)
 8014a8a:	701a      	strb	r2, [r3, #0]
 8014a8c:	4b04      	ldr	r3, [pc, #16]	; (8014aa0 <tcp_tmr+0x28>)
 8014a8e:	781b      	ldrb	r3, [r3, #0]
 8014a90:	f003 0301 	and.w	r3, r3, #1
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d001      	beq.n	8014a9c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8014a98:	f000 fd8c 	bl	80155b4 <tcp_slowtmr>
  }
}
 8014a9c:	bf00      	nop
 8014a9e:	bd80      	pop	{r7, pc}
 8014aa0:	20012365 	.word	0x20012365

08014aa4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b084      	sub	sp, #16
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
 8014aac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8014aae:	683b      	ldr	r3, [r7, #0]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d105      	bne.n	8014ac0 <tcp_remove_listener+0x1c>
 8014ab4:	4b0d      	ldr	r3, [pc, #52]	; (8014aec <tcp_remove_listener+0x48>)
 8014ab6:	22ff      	movs	r2, #255	; 0xff
 8014ab8:	490d      	ldr	r1, [pc, #52]	; (8014af0 <tcp_remove_listener+0x4c>)
 8014aba:	480e      	ldr	r0, [pc, #56]	; (8014af4 <tcp_remove_listener+0x50>)
 8014abc:	f00c fe2c 	bl	8021718 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	60fb      	str	r3, [r7, #12]
 8014ac4:	e00a      	b.n	8014adc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014aca:	683a      	ldr	r2, [r7, #0]
 8014acc:	429a      	cmp	r2, r3
 8014ace:	d102      	bne.n	8014ad6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	68db      	ldr	r3, [r3, #12]
 8014ada:	60fb      	str	r3, [r7, #12]
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d1f1      	bne.n	8014ac6 <tcp_remove_listener+0x22>
    }
  }
}
 8014ae2:	bf00      	nop
 8014ae4:	bf00      	nop
 8014ae6:	3710      	adds	r7, #16
 8014ae8:	46bd      	mov	sp, r7
 8014aea:	bd80      	pop	{r7, pc}
 8014aec:	08024eec 	.word	0x08024eec
 8014af0:	08024f74 	.word	0x08024f74
 8014af4:	08024f30 	.word	0x08024f30

08014af8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b084      	sub	sp, #16
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d106      	bne.n	8014b14 <tcp_listen_closed+0x1c>
 8014b06:	4b14      	ldr	r3, [pc, #80]	; (8014b58 <tcp_listen_closed+0x60>)
 8014b08:	f240 1211 	movw	r2, #273	; 0x111
 8014b0c:	4913      	ldr	r1, [pc, #76]	; (8014b5c <tcp_listen_closed+0x64>)
 8014b0e:	4814      	ldr	r0, [pc, #80]	; (8014b60 <tcp_listen_closed+0x68>)
 8014b10:	f00c fe02 	bl	8021718 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	7d1b      	ldrb	r3, [r3, #20]
 8014b18:	2b01      	cmp	r3, #1
 8014b1a:	d006      	beq.n	8014b2a <tcp_listen_closed+0x32>
 8014b1c:	4b0e      	ldr	r3, [pc, #56]	; (8014b58 <tcp_listen_closed+0x60>)
 8014b1e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8014b22:	4910      	ldr	r1, [pc, #64]	; (8014b64 <tcp_listen_closed+0x6c>)
 8014b24:	480e      	ldr	r0, [pc, #56]	; (8014b60 <tcp_listen_closed+0x68>)
 8014b26:	f00c fdf7 	bl	8021718 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014b2a:	2301      	movs	r3, #1
 8014b2c:	60fb      	str	r3, [r7, #12]
 8014b2e:	e00b      	b.n	8014b48 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8014b30:	4a0d      	ldr	r2, [pc, #52]	; (8014b68 <tcp_listen_closed+0x70>)
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	6879      	ldr	r1, [r7, #4]
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	f7ff ffb1 	bl	8014aa4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	3301      	adds	r3, #1
 8014b46:	60fb      	str	r3, [r7, #12]
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	2b03      	cmp	r3, #3
 8014b4c:	d9f0      	bls.n	8014b30 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8014b4e:	bf00      	nop
 8014b50:	bf00      	nop
 8014b52:	3710      	adds	r7, #16
 8014b54:	46bd      	mov	sp, r7
 8014b56:	bd80      	pop	{r7, pc}
 8014b58:	08024eec 	.word	0x08024eec
 8014b5c:	08024f9c 	.word	0x08024f9c
 8014b60:	08024f30 	.word	0x08024f30
 8014b64:	08024fa8 	.word	0x08024fa8
 8014b68:	080273c8 	.word	0x080273c8

08014b6c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8014b6c:	b5b0      	push	{r4, r5, r7, lr}
 8014b6e:	b088      	sub	sp, #32
 8014b70:	af04      	add	r7, sp, #16
 8014b72:	6078      	str	r0, [r7, #4]
 8014b74:	460b      	mov	r3, r1
 8014b76:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d106      	bne.n	8014b8c <tcp_close_shutdown+0x20>
 8014b7e:	4b63      	ldr	r3, [pc, #396]	; (8014d0c <tcp_close_shutdown+0x1a0>)
 8014b80:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8014b84:	4962      	ldr	r1, [pc, #392]	; (8014d10 <tcp_close_shutdown+0x1a4>)
 8014b86:	4863      	ldr	r0, [pc, #396]	; (8014d14 <tcp_close_shutdown+0x1a8>)
 8014b88:	f00c fdc6 	bl	8021718 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8014b8c:	78fb      	ldrb	r3, [r7, #3]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d066      	beq.n	8014c60 <tcp_close_shutdown+0xf4>
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	7d1b      	ldrb	r3, [r3, #20]
 8014b96:	2b04      	cmp	r3, #4
 8014b98:	d003      	beq.n	8014ba2 <tcp_close_shutdown+0x36>
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	7d1b      	ldrb	r3, [r3, #20]
 8014b9e:	2b07      	cmp	r3, #7
 8014ba0:	d15e      	bne.n	8014c60 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d104      	bne.n	8014bb4 <tcp_close_shutdown+0x48>
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014bae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014bb2:	d055      	beq.n	8014c60 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	8b5b      	ldrh	r3, [r3, #26]
 8014bb8:	f003 0310 	and.w	r3, r3, #16
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d106      	bne.n	8014bce <tcp_close_shutdown+0x62>
 8014bc0:	4b52      	ldr	r3, [pc, #328]	; (8014d0c <tcp_close_shutdown+0x1a0>)
 8014bc2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8014bc6:	4954      	ldr	r1, [pc, #336]	; (8014d18 <tcp_close_shutdown+0x1ac>)
 8014bc8:	4852      	ldr	r0, [pc, #328]	; (8014d14 <tcp_close_shutdown+0x1a8>)
 8014bca:	f00c fda5 	bl	8021718 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014bd6:	687d      	ldr	r5, [r7, #4]
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	3304      	adds	r3, #4
 8014bdc:	687a      	ldr	r2, [r7, #4]
 8014bde:	8ad2      	ldrh	r2, [r2, #22]
 8014be0:	6879      	ldr	r1, [r7, #4]
 8014be2:	8b09      	ldrh	r1, [r1, #24]
 8014be4:	9102      	str	r1, [sp, #8]
 8014be6:	9201      	str	r2, [sp, #4]
 8014be8:	9300      	str	r3, [sp, #0]
 8014bea:	462b      	mov	r3, r5
 8014bec:	4622      	mov	r2, r4
 8014bee:	4601      	mov	r1, r0
 8014bf0:	6878      	ldr	r0, [r7, #4]
 8014bf2:	f005 fe09 	bl	801a808 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8014bf6:	6878      	ldr	r0, [r7, #4]
 8014bf8:	f001 fbd8 	bl	80163ac <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014bfc:	4b47      	ldr	r3, [pc, #284]	; (8014d1c <tcp_close_shutdown+0x1b0>)
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	687a      	ldr	r2, [r7, #4]
 8014c02:	429a      	cmp	r2, r3
 8014c04:	d105      	bne.n	8014c12 <tcp_close_shutdown+0xa6>
 8014c06:	4b45      	ldr	r3, [pc, #276]	; (8014d1c <tcp_close_shutdown+0x1b0>)
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	68db      	ldr	r3, [r3, #12]
 8014c0c:	4a43      	ldr	r2, [pc, #268]	; (8014d1c <tcp_close_shutdown+0x1b0>)
 8014c0e:	6013      	str	r3, [r2, #0]
 8014c10:	e013      	b.n	8014c3a <tcp_close_shutdown+0xce>
 8014c12:	4b42      	ldr	r3, [pc, #264]	; (8014d1c <tcp_close_shutdown+0x1b0>)
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	60fb      	str	r3, [r7, #12]
 8014c18:	e00c      	b.n	8014c34 <tcp_close_shutdown+0xc8>
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	68db      	ldr	r3, [r3, #12]
 8014c1e:	687a      	ldr	r2, [r7, #4]
 8014c20:	429a      	cmp	r2, r3
 8014c22:	d104      	bne.n	8014c2e <tcp_close_shutdown+0xc2>
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	68da      	ldr	r2, [r3, #12]
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	60da      	str	r2, [r3, #12]
 8014c2c:	e005      	b.n	8014c3a <tcp_close_shutdown+0xce>
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	68db      	ldr	r3, [r3, #12]
 8014c32:	60fb      	str	r3, [r7, #12]
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d1ef      	bne.n	8014c1a <tcp_close_shutdown+0xae>
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	2200      	movs	r2, #0
 8014c3e:	60da      	str	r2, [r3, #12]
 8014c40:	4b37      	ldr	r3, [pc, #220]	; (8014d20 <tcp_close_shutdown+0x1b4>)
 8014c42:	2201      	movs	r2, #1
 8014c44:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8014c46:	4b37      	ldr	r3, [pc, #220]	; (8014d24 <tcp_close_shutdown+0x1b8>)
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	687a      	ldr	r2, [r7, #4]
 8014c4c:	429a      	cmp	r2, r3
 8014c4e:	d102      	bne.n	8014c56 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8014c50:	f004 f87e 	bl	8018d50 <tcp_trigger_input_pcb_close>
 8014c54:	e002      	b.n	8014c5c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8014c56:	6878      	ldr	r0, [r7, #4]
 8014c58:	f7ff fed6 	bl	8014a08 <tcp_free>
      }
      return ERR_OK;
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	e050      	b.n	8014d02 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	7d1b      	ldrb	r3, [r3, #20]
 8014c64:	2b02      	cmp	r3, #2
 8014c66:	d03b      	beq.n	8014ce0 <tcp_close_shutdown+0x174>
 8014c68:	2b02      	cmp	r3, #2
 8014c6a:	dc44      	bgt.n	8014cf6 <tcp_close_shutdown+0x18a>
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d002      	beq.n	8014c76 <tcp_close_shutdown+0x10a>
 8014c70:	2b01      	cmp	r3, #1
 8014c72:	d02a      	beq.n	8014cca <tcp_close_shutdown+0x15e>
 8014c74:	e03f      	b.n	8014cf6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	8adb      	ldrh	r3, [r3, #22]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d021      	beq.n	8014cc2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014c7e:	4b2a      	ldr	r3, [pc, #168]	; (8014d28 <tcp_close_shutdown+0x1bc>)
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	687a      	ldr	r2, [r7, #4]
 8014c84:	429a      	cmp	r2, r3
 8014c86:	d105      	bne.n	8014c94 <tcp_close_shutdown+0x128>
 8014c88:	4b27      	ldr	r3, [pc, #156]	; (8014d28 <tcp_close_shutdown+0x1bc>)
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	68db      	ldr	r3, [r3, #12]
 8014c8e:	4a26      	ldr	r2, [pc, #152]	; (8014d28 <tcp_close_shutdown+0x1bc>)
 8014c90:	6013      	str	r3, [r2, #0]
 8014c92:	e013      	b.n	8014cbc <tcp_close_shutdown+0x150>
 8014c94:	4b24      	ldr	r3, [pc, #144]	; (8014d28 <tcp_close_shutdown+0x1bc>)
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	60bb      	str	r3, [r7, #8]
 8014c9a:	e00c      	b.n	8014cb6 <tcp_close_shutdown+0x14a>
 8014c9c:	68bb      	ldr	r3, [r7, #8]
 8014c9e:	68db      	ldr	r3, [r3, #12]
 8014ca0:	687a      	ldr	r2, [r7, #4]
 8014ca2:	429a      	cmp	r2, r3
 8014ca4:	d104      	bne.n	8014cb0 <tcp_close_shutdown+0x144>
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	68da      	ldr	r2, [r3, #12]
 8014caa:	68bb      	ldr	r3, [r7, #8]
 8014cac:	60da      	str	r2, [r3, #12]
 8014cae:	e005      	b.n	8014cbc <tcp_close_shutdown+0x150>
 8014cb0:	68bb      	ldr	r3, [r7, #8]
 8014cb2:	68db      	ldr	r3, [r3, #12]
 8014cb4:	60bb      	str	r3, [r7, #8]
 8014cb6:	68bb      	ldr	r3, [r7, #8]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d1ef      	bne.n	8014c9c <tcp_close_shutdown+0x130>
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8014cc2:	6878      	ldr	r0, [r7, #4]
 8014cc4:	f7ff fea0 	bl	8014a08 <tcp_free>
      break;
 8014cc8:	e01a      	b.n	8014d00 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8014cca:	6878      	ldr	r0, [r7, #4]
 8014ccc:	f7ff ff14 	bl	8014af8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8014cd0:	6879      	ldr	r1, [r7, #4]
 8014cd2:	4816      	ldr	r0, [pc, #88]	; (8014d2c <tcp_close_shutdown+0x1c0>)
 8014cd4:	f001 fbba 	bl	801644c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014cd8:	6878      	ldr	r0, [r7, #4]
 8014cda:	f7ff feb1 	bl	8014a40 <tcp_free_listen>
      break;
 8014cde:	e00f      	b.n	8014d00 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014ce0:	6879      	ldr	r1, [r7, #4]
 8014ce2:	480e      	ldr	r0, [pc, #56]	; (8014d1c <tcp_close_shutdown+0x1b0>)
 8014ce4:	f001 fbb2 	bl	801644c <tcp_pcb_remove>
 8014ce8:	4b0d      	ldr	r3, [pc, #52]	; (8014d20 <tcp_close_shutdown+0x1b4>)
 8014cea:	2201      	movs	r2, #1
 8014cec:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8014cee:	6878      	ldr	r0, [r7, #4]
 8014cf0:	f7ff fe8a 	bl	8014a08 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8014cf4:	e004      	b.n	8014d00 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8014cf6:	6878      	ldr	r0, [r7, #4]
 8014cf8:	f000 f81a 	bl	8014d30 <tcp_close_shutdown_fin>
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	e000      	b.n	8014d02 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8014d00:	2300      	movs	r3, #0
}
 8014d02:	4618      	mov	r0, r3
 8014d04:	3710      	adds	r7, #16
 8014d06:	46bd      	mov	sp, r7
 8014d08:	bdb0      	pop	{r4, r5, r7, pc}
 8014d0a:	bf00      	nop
 8014d0c:	08024eec 	.word	0x08024eec
 8014d10:	08024fc0 	.word	0x08024fc0
 8014d14:	08024f30 	.word	0x08024f30
 8014d18:	08024fe0 	.word	0x08024fe0
 8014d1c:	2001235c 	.word	0x2001235c
 8014d20:	20012364 	.word	0x20012364
 8014d24:	2001239c 	.word	0x2001239c
 8014d28:	20012354 	.word	0x20012354
 8014d2c:	20012358 	.word	0x20012358

08014d30 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b084      	sub	sp, #16
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d106      	bne.n	8014d4c <tcp_close_shutdown_fin+0x1c>
 8014d3e:	4b2e      	ldr	r3, [pc, #184]	; (8014df8 <tcp_close_shutdown_fin+0xc8>)
 8014d40:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8014d44:	492d      	ldr	r1, [pc, #180]	; (8014dfc <tcp_close_shutdown_fin+0xcc>)
 8014d46:	482e      	ldr	r0, [pc, #184]	; (8014e00 <tcp_close_shutdown_fin+0xd0>)
 8014d48:	f00c fce6 	bl	8021718 <iprintf>

  switch (pcb->state) {
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	7d1b      	ldrb	r3, [r3, #20]
 8014d50:	2b07      	cmp	r3, #7
 8014d52:	d020      	beq.n	8014d96 <tcp_close_shutdown_fin+0x66>
 8014d54:	2b07      	cmp	r3, #7
 8014d56:	dc2b      	bgt.n	8014db0 <tcp_close_shutdown_fin+0x80>
 8014d58:	2b03      	cmp	r3, #3
 8014d5a:	d002      	beq.n	8014d62 <tcp_close_shutdown_fin+0x32>
 8014d5c:	2b04      	cmp	r3, #4
 8014d5e:	d00d      	beq.n	8014d7c <tcp_close_shutdown_fin+0x4c>
 8014d60:	e026      	b.n	8014db0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8014d62:	6878      	ldr	r0, [r7, #4]
 8014d64:	f004 fe5e 	bl	8019a24 <tcp_send_fin>
 8014d68:	4603      	mov	r3, r0
 8014d6a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d11f      	bne.n	8014db4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	2205      	movs	r2, #5
 8014d78:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014d7a:	e01b      	b.n	8014db4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8014d7c:	6878      	ldr	r0, [r7, #4]
 8014d7e:	f004 fe51 	bl	8019a24 <tcp_send_fin>
 8014d82:	4603      	mov	r3, r0
 8014d84:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d114      	bne.n	8014db8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	2205      	movs	r2, #5
 8014d92:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014d94:	e010      	b.n	8014db8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8014d96:	6878      	ldr	r0, [r7, #4]
 8014d98:	f004 fe44 	bl	8019a24 <tcp_send_fin>
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d109      	bne.n	8014dbc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	2209      	movs	r2, #9
 8014dac:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014dae:	e005      	b.n	8014dbc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8014db0:	2300      	movs	r3, #0
 8014db2:	e01c      	b.n	8014dee <tcp_close_shutdown_fin+0xbe>
      break;
 8014db4:	bf00      	nop
 8014db6:	e002      	b.n	8014dbe <tcp_close_shutdown_fin+0x8e>
      break;
 8014db8:	bf00      	nop
 8014dba:	e000      	b.n	8014dbe <tcp_close_shutdown_fin+0x8e>
      break;
 8014dbc:	bf00      	nop
  }

  if (err == ERR_OK) {
 8014dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d103      	bne.n	8014dce <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8014dc6:	6878      	ldr	r0, [r7, #4]
 8014dc8:	f004 ff6a 	bl	8019ca0 <tcp_output>
 8014dcc:	e00d      	b.n	8014dea <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8014dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014dd6:	d108      	bne.n	8014dea <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	8b5b      	ldrh	r3, [r3, #26]
 8014ddc:	f043 0308 	orr.w	r3, r3, #8
 8014de0:	b29a      	uxth	r2, r3
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8014de6:	2300      	movs	r3, #0
 8014de8:	e001      	b.n	8014dee <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8014dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014dee:	4618      	mov	r0, r3
 8014df0:	3710      	adds	r7, #16
 8014df2:	46bd      	mov	sp, r7
 8014df4:	bd80      	pop	{r7, pc}
 8014df6:	bf00      	nop
 8014df8:	08024eec 	.word	0x08024eec
 8014dfc:	08024f9c 	.word	0x08024f9c
 8014e00:	08024f30 	.word	0x08024f30

08014e04 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b082      	sub	sp, #8
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d109      	bne.n	8014e26 <tcp_close+0x22>
 8014e12:	4b0f      	ldr	r3, [pc, #60]	; (8014e50 <tcp_close+0x4c>)
 8014e14:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8014e18:	490e      	ldr	r1, [pc, #56]	; (8014e54 <tcp_close+0x50>)
 8014e1a:	480f      	ldr	r0, [pc, #60]	; (8014e58 <tcp_close+0x54>)
 8014e1c:	f00c fc7c 	bl	8021718 <iprintf>
 8014e20:	f06f 030f 	mvn.w	r3, #15
 8014e24:	e00f      	b.n	8014e46 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	7d1b      	ldrb	r3, [r3, #20]
 8014e2a:	2b01      	cmp	r3, #1
 8014e2c:	d006      	beq.n	8014e3c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	8b5b      	ldrh	r3, [r3, #26]
 8014e32:	f043 0310 	orr.w	r3, r3, #16
 8014e36:	b29a      	uxth	r2, r3
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8014e3c:	2101      	movs	r1, #1
 8014e3e:	6878      	ldr	r0, [r7, #4]
 8014e40:	f7ff fe94 	bl	8014b6c <tcp_close_shutdown>
 8014e44:	4603      	mov	r3, r0
}
 8014e46:	4618      	mov	r0, r3
 8014e48:	3708      	adds	r7, #8
 8014e4a:	46bd      	mov	sp, r7
 8014e4c:	bd80      	pop	{r7, pc}
 8014e4e:	bf00      	nop
 8014e50:	08024eec 	.word	0x08024eec
 8014e54:	08024ffc 	.word	0x08024ffc
 8014e58:	08024f30 	.word	0x08024f30

08014e5c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b084      	sub	sp, #16
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	60f8      	str	r0, [r7, #12]
 8014e64:	60b9      	str	r1, [r7, #8]
 8014e66:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d109      	bne.n	8014e82 <tcp_shutdown+0x26>
 8014e6e:	4b26      	ldr	r3, [pc, #152]	; (8014f08 <tcp_shutdown+0xac>)
 8014e70:	f240 2207 	movw	r2, #519	; 0x207
 8014e74:	4925      	ldr	r1, [pc, #148]	; (8014f0c <tcp_shutdown+0xb0>)
 8014e76:	4826      	ldr	r0, [pc, #152]	; (8014f10 <tcp_shutdown+0xb4>)
 8014e78:	f00c fc4e 	bl	8021718 <iprintf>
 8014e7c:	f06f 030f 	mvn.w	r3, #15
 8014e80:	e03d      	b.n	8014efe <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	7d1b      	ldrb	r3, [r3, #20]
 8014e86:	2b01      	cmp	r3, #1
 8014e88:	d102      	bne.n	8014e90 <tcp_shutdown+0x34>
    return ERR_CONN;
 8014e8a:	f06f 030a 	mvn.w	r3, #10
 8014e8e:	e036      	b.n	8014efe <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8014e90:	68bb      	ldr	r3, [r7, #8]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d01b      	beq.n	8014ece <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	8b5b      	ldrh	r3, [r3, #26]
 8014e9a:	f043 0310 	orr.w	r3, r3, #16
 8014e9e:	b29a      	uxth	r2, r3
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d005      	beq.n	8014eb6 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8014eaa:	2101      	movs	r1, #1
 8014eac:	68f8      	ldr	r0, [r7, #12]
 8014eae:	f7ff fe5d 	bl	8014b6c <tcp_close_shutdown>
 8014eb2:	4603      	mov	r3, r0
 8014eb4:	e023      	b.n	8014efe <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d007      	beq.n	8014ece <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	f7ff fae4 	bl	8014490 <pbuf_free>
      pcb->refused_data = NULL;
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	2200      	movs	r2, #0
 8014ecc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d013      	beq.n	8014efc <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	7d1b      	ldrb	r3, [r3, #20]
 8014ed8:	2b04      	cmp	r3, #4
 8014eda:	dc02      	bgt.n	8014ee2 <tcp_shutdown+0x86>
 8014edc:	2b03      	cmp	r3, #3
 8014ede:	da02      	bge.n	8014ee6 <tcp_shutdown+0x8a>
 8014ee0:	e009      	b.n	8014ef6 <tcp_shutdown+0x9a>
 8014ee2:	2b07      	cmp	r3, #7
 8014ee4:	d107      	bne.n	8014ef6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8014ee6:	68bb      	ldr	r3, [r7, #8]
 8014ee8:	b2db      	uxtb	r3, r3
 8014eea:	4619      	mov	r1, r3
 8014eec:	68f8      	ldr	r0, [r7, #12]
 8014eee:	f7ff fe3d 	bl	8014b6c <tcp_close_shutdown>
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	e003      	b.n	8014efe <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8014ef6:	f06f 030a 	mvn.w	r3, #10
 8014efa:	e000      	b.n	8014efe <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8014efc:	2300      	movs	r3, #0
}
 8014efe:	4618      	mov	r0, r3
 8014f00:	3710      	adds	r7, #16
 8014f02:	46bd      	mov	sp, r7
 8014f04:	bd80      	pop	{r7, pc}
 8014f06:	bf00      	nop
 8014f08:	08024eec 	.word	0x08024eec
 8014f0c:	08025014 	.word	0x08025014
 8014f10:	08024f30 	.word	0x08024f30

08014f14 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8014f14:	b580      	push	{r7, lr}
 8014f16:	b08e      	sub	sp, #56	; 0x38
 8014f18:	af04      	add	r7, sp, #16
 8014f1a:	6078      	str	r0, [r7, #4]
 8014f1c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d107      	bne.n	8014f34 <tcp_abandon+0x20>
 8014f24:	4b52      	ldr	r3, [pc, #328]	; (8015070 <tcp_abandon+0x15c>)
 8014f26:	f240 223d 	movw	r2, #573	; 0x23d
 8014f2a:	4952      	ldr	r1, [pc, #328]	; (8015074 <tcp_abandon+0x160>)
 8014f2c:	4852      	ldr	r0, [pc, #328]	; (8015078 <tcp_abandon+0x164>)
 8014f2e:	f00c fbf3 	bl	8021718 <iprintf>
 8014f32:	e099      	b.n	8015068 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	7d1b      	ldrb	r3, [r3, #20]
 8014f38:	2b01      	cmp	r3, #1
 8014f3a:	d106      	bne.n	8014f4a <tcp_abandon+0x36>
 8014f3c:	4b4c      	ldr	r3, [pc, #304]	; (8015070 <tcp_abandon+0x15c>)
 8014f3e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8014f42:	494e      	ldr	r1, [pc, #312]	; (801507c <tcp_abandon+0x168>)
 8014f44:	484c      	ldr	r0, [pc, #304]	; (8015078 <tcp_abandon+0x164>)
 8014f46:	f00c fbe7 	bl	8021718 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	7d1b      	ldrb	r3, [r3, #20]
 8014f4e:	2b0a      	cmp	r3, #10
 8014f50:	d107      	bne.n	8014f62 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8014f52:	6879      	ldr	r1, [r7, #4]
 8014f54:	484a      	ldr	r0, [pc, #296]	; (8015080 <tcp_abandon+0x16c>)
 8014f56:	f001 fa79 	bl	801644c <tcp_pcb_remove>
    tcp_free(pcb);
 8014f5a:	6878      	ldr	r0, [r7, #4]
 8014f5c:	f7ff fd54 	bl	8014a08 <tcp_free>
 8014f60:	e082      	b.n	8015068 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8014f62:	2300      	movs	r3, #0
 8014f64:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8014f66:	2300      	movs	r3, #0
 8014f68:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f6e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f74:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014f7c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	691b      	ldr	r3, [r3, #16]
 8014f82:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	7d1b      	ldrb	r3, [r3, #20]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d126      	bne.n	8014fda <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	8adb      	ldrh	r3, [r3, #22]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d02e      	beq.n	8014ff2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014f94:	4b3b      	ldr	r3, [pc, #236]	; (8015084 <tcp_abandon+0x170>)
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	687a      	ldr	r2, [r7, #4]
 8014f9a:	429a      	cmp	r2, r3
 8014f9c:	d105      	bne.n	8014faa <tcp_abandon+0x96>
 8014f9e:	4b39      	ldr	r3, [pc, #228]	; (8015084 <tcp_abandon+0x170>)
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	68db      	ldr	r3, [r3, #12]
 8014fa4:	4a37      	ldr	r2, [pc, #220]	; (8015084 <tcp_abandon+0x170>)
 8014fa6:	6013      	str	r3, [r2, #0]
 8014fa8:	e013      	b.n	8014fd2 <tcp_abandon+0xbe>
 8014faa:	4b36      	ldr	r3, [pc, #216]	; (8015084 <tcp_abandon+0x170>)
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	61fb      	str	r3, [r7, #28]
 8014fb0:	e00c      	b.n	8014fcc <tcp_abandon+0xb8>
 8014fb2:	69fb      	ldr	r3, [r7, #28]
 8014fb4:	68db      	ldr	r3, [r3, #12]
 8014fb6:	687a      	ldr	r2, [r7, #4]
 8014fb8:	429a      	cmp	r2, r3
 8014fba:	d104      	bne.n	8014fc6 <tcp_abandon+0xb2>
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	68da      	ldr	r2, [r3, #12]
 8014fc0:	69fb      	ldr	r3, [r7, #28]
 8014fc2:	60da      	str	r2, [r3, #12]
 8014fc4:	e005      	b.n	8014fd2 <tcp_abandon+0xbe>
 8014fc6:	69fb      	ldr	r3, [r7, #28]
 8014fc8:	68db      	ldr	r3, [r3, #12]
 8014fca:	61fb      	str	r3, [r7, #28]
 8014fcc:	69fb      	ldr	r3, [r7, #28]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d1ef      	bne.n	8014fb2 <tcp_abandon+0x9e>
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	2200      	movs	r2, #0
 8014fd6:	60da      	str	r2, [r3, #12]
 8014fd8:	e00b      	b.n	8014ff2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8014fda:	683b      	ldr	r3, [r7, #0]
 8014fdc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	8adb      	ldrh	r3, [r3, #22]
 8014fe2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014fe4:	6879      	ldr	r1, [r7, #4]
 8014fe6:	4828      	ldr	r0, [pc, #160]	; (8015088 <tcp_abandon+0x174>)
 8014fe8:	f001 fa30 	bl	801644c <tcp_pcb_remove>
 8014fec:	4b27      	ldr	r3, [pc, #156]	; (801508c <tcp_abandon+0x178>)
 8014fee:	2201      	movs	r2, #1
 8014ff0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d004      	beq.n	8015004 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ffe:	4618      	mov	r0, r3
 8015000:	f000 fefa 	bl	8015df8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015008:	2b00      	cmp	r3, #0
 801500a:	d004      	beq.n	8015016 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015010:	4618      	mov	r0, r3
 8015012:	f000 fef1 	bl	8015df8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801501a:	2b00      	cmp	r3, #0
 801501c:	d004      	beq.n	8015028 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015022:	4618      	mov	r0, r3
 8015024:	f000 fee8 	bl	8015df8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8015028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801502a:	2b00      	cmp	r3, #0
 801502c:	d00e      	beq.n	801504c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801502e:	6879      	ldr	r1, [r7, #4]
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	3304      	adds	r3, #4
 8015034:	687a      	ldr	r2, [r7, #4]
 8015036:	8b12      	ldrh	r2, [r2, #24]
 8015038:	9202      	str	r2, [sp, #8]
 801503a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801503c:	9201      	str	r2, [sp, #4]
 801503e:	9300      	str	r3, [sp, #0]
 8015040:	460b      	mov	r3, r1
 8015042:	697a      	ldr	r2, [r7, #20]
 8015044:	69b9      	ldr	r1, [r7, #24]
 8015046:	6878      	ldr	r0, [r7, #4]
 8015048:	f005 fbde 	bl	801a808 <tcp_rst>
    }
    last_state = pcb->state;
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	7d1b      	ldrb	r3, [r3, #20]
 8015050:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8015052:	6878      	ldr	r0, [r7, #4]
 8015054:	f7ff fcd8 	bl	8014a08 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8015058:	693b      	ldr	r3, [r7, #16]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d004      	beq.n	8015068 <tcp_abandon+0x154>
 801505e:	693b      	ldr	r3, [r7, #16]
 8015060:	f06f 010c 	mvn.w	r1, #12
 8015064:	68f8      	ldr	r0, [r7, #12]
 8015066:	4798      	blx	r3
  }
}
 8015068:	3728      	adds	r7, #40	; 0x28
 801506a:	46bd      	mov	sp, r7
 801506c:	bd80      	pop	{r7, pc}
 801506e:	bf00      	nop
 8015070:	08024eec 	.word	0x08024eec
 8015074:	08025030 	.word	0x08025030
 8015078:	08024f30 	.word	0x08024f30
 801507c:	0802504c 	.word	0x0802504c
 8015080:	20012360 	.word	0x20012360
 8015084:	20012354 	.word	0x20012354
 8015088:	2001235c 	.word	0x2001235c
 801508c:	20012364 	.word	0x20012364

08015090 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015090:	b580      	push	{r7, lr}
 8015092:	b082      	sub	sp, #8
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8015098:	2101      	movs	r1, #1
 801509a:	6878      	ldr	r0, [r7, #4]
 801509c:	f7ff ff3a 	bl	8014f14 <tcp_abandon>
}
 80150a0:	bf00      	nop
 80150a2:	3708      	adds	r7, #8
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bd80      	pop	{r7, pc}

080150a8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b088      	sub	sp, #32
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	60f8      	str	r0, [r7, #12]
 80150b0:	60b9      	str	r1, [r7, #8]
 80150b2:	4613      	mov	r3, r2
 80150b4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80150b6:	2304      	movs	r3, #4
 80150b8:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80150ba:	68bb      	ldr	r3, [r7, #8]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d101      	bne.n	80150c4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80150c0:	4b48      	ldr	r3, [pc, #288]	; (80151e4 <tcp_bind+0x13c>)
 80150c2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d109      	bne.n	80150de <tcp_bind+0x36>
 80150ca:	4b47      	ldr	r3, [pc, #284]	; (80151e8 <tcp_bind+0x140>)
 80150cc:	f240 22a9 	movw	r2, #681	; 0x2a9
 80150d0:	4946      	ldr	r1, [pc, #280]	; (80151ec <tcp_bind+0x144>)
 80150d2:	4847      	ldr	r0, [pc, #284]	; (80151f0 <tcp_bind+0x148>)
 80150d4:	f00c fb20 	bl	8021718 <iprintf>
 80150d8:	f06f 030f 	mvn.w	r3, #15
 80150dc:	e07e      	b.n	80151dc <tcp_bind+0x134>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	7d1b      	ldrb	r3, [r3, #20]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d009      	beq.n	80150fa <tcp_bind+0x52>
 80150e6:	4b40      	ldr	r3, [pc, #256]	; (80151e8 <tcp_bind+0x140>)
 80150e8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80150ec:	4941      	ldr	r1, [pc, #260]	; (80151f4 <tcp_bind+0x14c>)
 80150ee:	4840      	ldr	r0, [pc, #256]	; (80151f0 <tcp_bind+0x148>)
 80150f0:	f00c fb12 	bl	8021718 <iprintf>
 80150f4:	f06f 0305 	mvn.w	r3, #5
 80150f8:	e070      	b.n	80151dc <tcp_bind+0x134>
  /* Unless the REUSEADDR flag is set,
     we have to check the pcbs in TIME-WAIT state, also.
     We do not dump TIME_WAIT pcb's; they can still be matched by incoming
     packets using both local and remote IP addresses and ports to distinguish.
   */
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	7a5b      	ldrb	r3, [r3, #9]
 80150fe:	f003 0304 	and.w	r3, r3, #4
 8015102:	2b00      	cmp	r3, #0
 8015104:	d001      	beq.n	801510a <tcp_bind+0x62>
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
 8015106:	2303      	movs	r3, #3
 8015108:	61bb      	str	r3, [r7, #24]
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801510a:	88fb      	ldrh	r3, [r7, #6]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d109      	bne.n	8015124 <tcp_bind+0x7c>
    port = tcp_new_port();
 8015110:	f000 fa0a 	bl	8015528 <tcp_new_port>
 8015114:	4603      	mov	r3, r0
 8015116:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015118:	88fb      	ldrh	r3, [r7, #6]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d141      	bne.n	80151a2 <tcp_bind+0xfa>
      return ERR_BUF;
 801511e:	f06f 0301 	mvn.w	r3, #1
 8015122:	e05b      	b.n	80151dc <tcp_bind+0x134>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8015124:	2300      	movs	r3, #0
 8015126:	61fb      	str	r3, [r7, #28]
 8015128:	e037      	b.n	801519a <tcp_bind+0xf2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801512a:	4a33      	ldr	r2, [pc, #204]	; (80151f8 <tcp_bind+0x150>)
 801512c:	69fb      	ldr	r3, [r7, #28]
 801512e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	617b      	str	r3, [r7, #20]
 8015136:	e02a      	b.n	801518e <tcp_bind+0xe6>
        if (cpcb->local_port == port) {
 8015138:	697b      	ldr	r3, [r7, #20]
 801513a:	8adb      	ldrh	r3, [r3, #22]
 801513c:	88fa      	ldrh	r2, [r7, #6]
 801513e:	429a      	cmp	r2, r3
 8015140:	d122      	bne.n	8015188 <tcp_bind+0xe0>
#if SO_REUSE
          /* Omit checking for the same port if both pcbs have REUSEADDR set.
             For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
             tcp_connect. */
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	7a5b      	ldrb	r3, [r3, #9]
 8015146:	f003 0304 	and.w	r3, r3, #4
 801514a:	2b00      	cmp	r3, #0
 801514c:	d005      	beq.n	801515a <tcp_bind+0xb2>
              !ip_get_option(cpcb, SOF_REUSEADDR))
 801514e:	697b      	ldr	r3, [r7, #20]
 8015150:	7a5b      	ldrb	r3, [r3, #9]
 8015152:	f003 0304 	and.w	r3, r3, #4
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 8015156:	2b00      	cmp	r3, #0
 8015158:	d116      	bne.n	8015188 <tcp_bind+0xe0>
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801515a:	697b      	ldr	r3, [r7, #20]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801515c:	2b00      	cmp	r3, #0
 801515e:	d010      	beq.n	8015182 <tcp_bind+0xda>
                (ip_addr_isany(&cpcb->local_ip) ||
 8015160:	697b      	ldr	r3, [r7, #20]
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d00c      	beq.n	8015182 <tcp_bind+0xda>
 8015168:	68bb      	ldr	r3, [r7, #8]
 801516a:	2b00      	cmp	r3, #0
 801516c:	d009      	beq.n	8015182 <tcp_bind+0xda>
                 ip_addr_isany(ipaddr) ||
 801516e:	68bb      	ldr	r3, [r7, #8]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d005      	beq.n	8015182 <tcp_bind+0xda>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8015176:	697b      	ldr	r3, [r7, #20]
 8015178:	681a      	ldr	r2, [r3, #0]
 801517a:	68bb      	ldr	r3, [r7, #8]
 801517c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801517e:	429a      	cmp	r2, r3
 8015180:	d102      	bne.n	8015188 <tcp_bind+0xe0>
              return ERR_USE;
 8015182:	f06f 0307 	mvn.w	r3, #7
 8015186:	e029      	b.n	80151dc <tcp_bind+0x134>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8015188:	697b      	ldr	r3, [r7, #20]
 801518a:	68db      	ldr	r3, [r3, #12]
 801518c:	617b      	str	r3, [r7, #20]
 801518e:	697b      	ldr	r3, [r7, #20]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d1d1      	bne.n	8015138 <tcp_bind+0x90>
    for (i = 0; i < max_pcb_list; i++) {
 8015194:	69fb      	ldr	r3, [r7, #28]
 8015196:	3301      	adds	r3, #1
 8015198:	61fb      	str	r3, [r7, #28]
 801519a:	69fa      	ldr	r2, [r7, #28]
 801519c:	69bb      	ldr	r3, [r7, #24]
 801519e:	429a      	cmp	r2, r3
 80151a0:	dbc3      	blt.n	801512a <tcp_bind+0x82>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80151a2:	68bb      	ldr	r3, [r7, #8]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d00c      	beq.n	80151c2 <tcp_bind+0x11a>
 80151a8:	68bb      	ldr	r3, [r7, #8]
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d008      	beq.n	80151c2 <tcp_bind+0x11a>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80151b0:	68bb      	ldr	r3, [r7, #8]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d002      	beq.n	80151bc <tcp_bind+0x114>
 80151b6:	68bb      	ldr	r3, [r7, #8]
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	e000      	b.n	80151be <tcp_bind+0x116>
 80151bc:	2300      	movs	r3, #0
 80151be:	68fa      	ldr	r2, [r7, #12]
 80151c0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	88fa      	ldrh	r2, [r7, #6]
 80151c6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80151c8:	4b0c      	ldr	r3, [pc, #48]	; (80151fc <tcp_bind+0x154>)
 80151ca:	681a      	ldr	r2, [r3, #0]
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	60da      	str	r2, [r3, #12]
 80151d0:	4a0a      	ldr	r2, [pc, #40]	; (80151fc <tcp_bind+0x154>)
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	6013      	str	r3, [r2, #0]
 80151d6:	f005 fcd9 	bl	801ab8c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80151da:	2300      	movs	r3, #0
}
 80151dc:	4618      	mov	r0, r3
 80151de:	3720      	adds	r7, #32
 80151e0:	46bd      	mov	sp, r7
 80151e2:	bd80      	pop	{r7, pc}
 80151e4:	08027400 	.word	0x08027400
 80151e8:	08024eec 	.word	0x08024eec
 80151ec:	08025080 	.word	0x08025080
 80151f0:	08024f30 	.word	0x08024f30
 80151f4:	08025098 	.word	0x08025098
 80151f8:	080273c8 	.word	0x080273c8
 80151fc:	20012354 	.word	0x20012354

08015200 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8015200:	b580      	push	{r7, lr}
 8015202:	b084      	sub	sp, #16
 8015204:	af00      	add	r7, sp, #0
 8015206:	60f8      	str	r0, [r7, #12]
 8015208:	60b9      	str	r1, [r7, #8]
 801520a:	4613      	mov	r3, r2
 801520c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801520e:	68bb      	ldr	r3, [r7, #8]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d106      	bne.n	8015222 <tcp_accept_null+0x22>
 8015214:	4b07      	ldr	r3, [pc, #28]	; (8015234 <tcp_accept_null+0x34>)
 8015216:	f240 320f 	movw	r2, #783	; 0x30f
 801521a:	4907      	ldr	r1, [pc, #28]	; (8015238 <tcp_accept_null+0x38>)
 801521c:	4807      	ldr	r0, [pc, #28]	; (801523c <tcp_accept_null+0x3c>)
 801521e:	f00c fa7b 	bl	8021718 <iprintf>

  tcp_abort(pcb);
 8015222:	68b8      	ldr	r0, [r7, #8]
 8015224:	f7ff ff34 	bl	8015090 <tcp_abort>

  return ERR_ABRT;
 8015228:	f06f 030c 	mvn.w	r3, #12
}
 801522c:	4618      	mov	r0, r3
 801522e:	3710      	adds	r7, #16
 8015230:	46bd      	mov	sp, r7
 8015232:	bd80      	pop	{r7, pc}
 8015234:	08024eec 	.word	0x08024eec
 8015238:	080250c0 	.word	0x080250c0
 801523c:	08024f30 	.word	0x08024f30

08015240 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8015240:	b580      	push	{r7, lr}
 8015242:	b088      	sub	sp, #32
 8015244:	af00      	add	r7, sp, #0
 8015246:	60f8      	str	r0, [r7, #12]
 8015248:	460b      	mov	r3, r1
 801524a:	607a      	str	r2, [r7, #4]
 801524c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801524e:	2300      	movs	r3, #0
 8015250:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	2b00      	cmp	r3, #0
 8015256:	d109      	bne.n	801526c <tcp_listen_with_backlog_and_err+0x2c>
 8015258:	4b57      	ldr	r3, [pc, #348]	; (80153b8 <tcp_listen_with_backlog_and_err+0x178>)
 801525a:	f240 3259 	movw	r2, #857	; 0x359
 801525e:	4957      	ldr	r1, [pc, #348]	; (80153bc <tcp_listen_with_backlog_and_err+0x17c>)
 8015260:	4857      	ldr	r0, [pc, #348]	; (80153c0 <tcp_listen_with_backlog_and_err+0x180>)
 8015262:	f00c fa59 	bl	8021718 <iprintf>
 8015266:	23f0      	movs	r3, #240	; 0xf0
 8015268:	76fb      	strb	r3, [r7, #27]
 801526a:	e09a      	b.n	80153a2 <tcp_listen_with_backlog_and_err+0x162>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	7d1b      	ldrb	r3, [r3, #20]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d009      	beq.n	8015288 <tcp_listen_with_backlog_and_err+0x48>
 8015274:	4b50      	ldr	r3, [pc, #320]	; (80153b8 <tcp_listen_with_backlog_and_err+0x178>)
 8015276:	f240 325a 	movw	r2, #858	; 0x35a
 801527a:	4952      	ldr	r1, [pc, #328]	; (80153c4 <tcp_listen_with_backlog_and_err+0x184>)
 801527c:	4850      	ldr	r0, [pc, #320]	; (80153c0 <tcp_listen_with_backlog_and_err+0x180>)
 801527e:	f00c fa4b 	bl	8021718 <iprintf>
 8015282:	23f1      	movs	r3, #241	; 0xf1
 8015284:	76fb      	strb	r3, [r7, #27]
 8015286:	e08c      	b.n	80153a2 <tcp_listen_with_backlog_and_err+0x162>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	7d1b      	ldrb	r3, [r3, #20]
 801528c:	2b01      	cmp	r3, #1
 801528e:	d104      	bne.n	801529a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8015294:	23f7      	movs	r3, #247	; 0xf7
 8015296:	76fb      	strb	r3, [r7, #27]
    goto done;
 8015298:	e083      	b.n	80153a2 <tcp_listen_with_backlog_and_err+0x162>
  }
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	7a5b      	ldrb	r3, [r3, #9]
 801529e:	f003 0304 	and.w	r3, r3, #4
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d01a      	beq.n	80152dc <tcp_listen_with_backlog_and_err+0x9c>
    /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
       is declared (listen-/connection-pcb), we have to make sure now that
       this port is only used once for every local IP. */
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80152a6:	4b48      	ldr	r3, [pc, #288]	; (80153c8 <tcp_listen_with_backlog_and_err+0x188>)
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	61fb      	str	r3, [r7, #28]
 80152ac:	e013      	b.n	80152d6 <tcp_listen_with_backlog_and_err+0x96>
      if ((lpcb->local_port == pcb->local_port) &&
 80152ae:	69fb      	ldr	r3, [r7, #28]
 80152b0:	8ada      	ldrh	r2, [r3, #22]
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	8adb      	ldrh	r3, [r3, #22]
 80152b6:	429a      	cmp	r2, r3
 80152b8:	d10a      	bne.n	80152d0 <tcp_listen_with_backlog_and_err+0x90>
          ip_addr_cmp(&lpcb->local_ip, &pcb->local_ip)) {
 80152ba:	69fb      	ldr	r3, [r7, #28]
 80152bc:	681a      	ldr	r2, [r3, #0]
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	681b      	ldr	r3, [r3, #0]
      if ((lpcb->local_port == pcb->local_port) &&
 80152c2:	429a      	cmp	r2, r3
 80152c4:	d104      	bne.n	80152d0 <tcp_listen_with_backlog_and_err+0x90>
        /* this address/port is already used */
        lpcb = NULL;
 80152c6:	2300      	movs	r3, #0
 80152c8:	61fb      	str	r3, [r7, #28]
        res = ERR_USE;
 80152ca:	23f8      	movs	r3, #248	; 0xf8
 80152cc:	76fb      	strb	r3, [r7, #27]
        goto done;
 80152ce:	e068      	b.n	80153a2 <tcp_listen_with_backlog_and_err+0x162>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80152d0:	69fb      	ldr	r3, [r7, #28]
 80152d2:	68db      	ldr	r3, [r3, #12]
 80152d4:	61fb      	str	r3, [r7, #28]
 80152d6:	69fb      	ldr	r3, [r7, #28]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d1e8      	bne.n	80152ae <tcp_listen_with_backlog_and_err+0x6e>
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80152dc:	2002      	movs	r0, #2
 80152de:	f7fe f9b1 	bl	8013644 <memp_malloc>
 80152e2:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80152e4:	69fb      	ldr	r3, [r7, #28]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d102      	bne.n	80152f0 <tcp_listen_with_backlog_and_err+0xb0>
    res = ERR_MEM;
 80152ea:	23ff      	movs	r3, #255	; 0xff
 80152ec:	76fb      	strb	r3, [r7, #27]
    goto done;
 80152ee:	e058      	b.n	80153a2 <tcp_listen_with_backlog_and_err+0x162>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	691a      	ldr	r2, [r3, #16]
 80152f4:	69fb      	ldr	r3, [r7, #28]
 80152f6:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	8ada      	ldrh	r2, [r3, #22]
 80152fc:	69fb      	ldr	r3, [r7, #28]
 80152fe:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8015300:	69fb      	ldr	r3, [r7, #28]
 8015302:	2201      	movs	r2, #1
 8015304:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	7d5a      	ldrb	r2, [r3, #21]
 801530a:	69fb      	ldr	r3, [r7, #28]
 801530c:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	7a5a      	ldrb	r2, [r3, #9]
 8015312:	69fb      	ldr	r3, [r7, #28]
 8015314:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8015316:	69fb      	ldr	r3, [r7, #28]
 8015318:	2200      	movs	r2, #0
 801531a:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	7ada      	ldrb	r2, [r3, #11]
 8015320:	69fb      	ldr	r3, [r7, #28]
 8015322:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	7a9a      	ldrb	r2, [r3, #10]
 8015328:	69fb      	ldr	r3, [r7, #28]
 801532a:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	681a      	ldr	r2, [r3, #0]
 8015330:	69fb      	ldr	r3, [r7, #28]
 8015332:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	8adb      	ldrh	r3, [r3, #22]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d021      	beq.n	8015380 <tcp_listen_with_backlog_and_err+0x140>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801533c:	4b23      	ldr	r3, [pc, #140]	; (80153cc <tcp_listen_with_backlog_and_err+0x18c>)
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	68fa      	ldr	r2, [r7, #12]
 8015342:	429a      	cmp	r2, r3
 8015344:	d105      	bne.n	8015352 <tcp_listen_with_backlog_and_err+0x112>
 8015346:	4b21      	ldr	r3, [pc, #132]	; (80153cc <tcp_listen_with_backlog_and_err+0x18c>)
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	68db      	ldr	r3, [r3, #12]
 801534c:	4a1f      	ldr	r2, [pc, #124]	; (80153cc <tcp_listen_with_backlog_and_err+0x18c>)
 801534e:	6013      	str	r3, [r2, #0]
 8015350:	e013      	b.n	801537a <tcp_listen_with_backlog_and_err+0x13a>
 8015352:	4b1e      	ldr	r3, [pc, #120]	; (80153cc <tcp_listen_with_backlog_and_err+0x18c>)
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	617b      	str	r3, [r7, #20]
 8015358:	e00c      	b.n	8015374 <tcp_listen_with_backlog_and_err+0x134>
 801535a:	697b      	ldr	r3, [r7, #20]
 801535c:	68db      	ldr	r3, [r3, #12]
 801535e:	68fa      	ldr	r2, [r7, #12]
 8015360:	429a      	cmp	r2, r3
 8015362:	d104      	bne.n	801536e <tcp_listen_with_backlog_and_err+0x12e>
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	68da      	ldr	r2, [r3, #12]
 8015368:	697b      	ldr	r3, [r7, #20]
 801536a:	60da      	str	r2, [r3, #12]
 801536c:	e005      	b.n	801537a <tcp_listen_with_backlog_and_err+0x13a>
 801536e:	697b      	ldr	r3, [r7, #20]
 8015370:	68db      	ldr	r3, [r3, #12]
 8015372:	617b      	str	r3, [r7, #20]
 8015374:	697b      	ldr	r3, [r7, #20]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d1ef      	bne.n	801535a <tcp_listen_with_backlog_and_err+0x11a>
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	2200      	movs	r2, #0
 801537e:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8015380:	68f8      	ldr	r0, [r7, #12]
 8015382:	f7ff fb41 	bl	8014a08 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8015386:	69fb      	ldr	r3, [r7, #28]
 8015388:	4a11      	ldr	r2, [pc, #68]	; (80153d0 <tcp_listen_with_backlog_and_err+0x190>)
 801538a:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801538c:	4b0e      	ldr	r3, [pc, #56]	; (80153c8 <tcp_listen_with_backlog_and_err+0x188>)
 801538e:	681a      	ldr	r2, [r3, #0]
 8015390:	69fb      	ldr	r3, [r7, #28]
 8015392:	60da      	str	r2, [r3, #12]
 8015394:	4a0c      	ldr	r2, [pc, #48]	; (80153c8 <tcp_listen_with_backlog_and_err+0x188>)
 8015396:	69fb      	ldr	r3, [r7, #28]
 8015398:	6013      	str	r3, [r2, #0]
 801539a:	f005 fbf7 	bl	801ab8c <tcp_timer_needed>
  res = ERR_OK;
 801539e:	2300      	movs	r3, #0
 80153a0:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d002      	beq.n	80153ae <tcp_listen_with_backlog_and_err+0x16e>
    *err = res;
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	7efa      	ldrb	r2, [r7, #27]
 80153ac:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80153ae:	69fb      	ldr	r3, [r7, #28]
}
 80153b0:	4618      	mov	r0, r3
 80153b2:	3720      	adds	r7, #32
 80153b4:	46bd      	mov	sp, r7
 80153b6:	bd80      	pop	{r7, pc}
 80153b8:	08024eec 	.word	0x08024eec
 80153bc:	080250e0 	.word	0x080250e0
 80153c0:	08024f30 	.word	0x08024f30
 80153c4:	08025110 	.word	0x08025110
 80153c8:	20012358 	.word	0x20012358
 80153cc:	20012354 	.word	0x20012354
 80153d0:	08015201 	.word	0x08015201

080153d4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80153d4:	b580      	push	{r7, lr}
 80153d6:	b084      	sub	sp, #16
 80153d8:	af00      	add	r7, sp, #0
 80153da:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d106      	bne.n	80153f0 <tcp_update_rcv_ann_wnd+0x1c>
 80153e2:	4b25      	ldr	r3, [pc, #148]	; (8015478 <tcp_update_rcv_ann_wnd+0xa4>)
 80153e4:	f240 32a6 	movw	r2, #934	; 0x3a6
 80153e8:	4924      	ldr	r1, [pc, #144]	; (801547c <tcp_update_rcv_ann_wnd+0xa8>)
 80153ea:	4825      	ldr	r0, [pc, #148]	; (8015480 <tcp_update_rcv_ann_wnd+0xac>)
 80153ec:	f00c f994 	bl	8021718 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153f4:	687a      	ldr	r2, [r7, #4]
 80153f6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80153f8:	4413      	add	r3, r2
 80153fa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015400:	687a      	ldr	r2, [r7, #4]
 8015402:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8015404:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8015408:	bf28      	it	cs
 801540a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801540e:	b292      	uxth	r2, r2
 8015410:	4413      	add	r3, r2
 8015412:	68fa      	ldr	r2, [r7, #12]
 8015414:	1ad3      	subs	r3, r2, r3
 8015416:	2b00      	cmp	r3, #0
 8015418:	db08      	blt.n	801542c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015426:	68fa      	ldr	r2, [r7, #12]
 8015428:	1ad3      	subs	r3, r2, r3
 801542a:	e020      	b.n	801546e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015434:	1ad3      	subs	r3, r2, r3
 8015436:	2b00      	cmp	r3, #0
 8015438:	dd03      	ble.n	8015442 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	2200      	movs	r2, #0
 801543e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8015440:	e014      	b.n	801546c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801544a:	1ad3      	subs	r3, r2, r3
 801544c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801544e:	68bb      	ldr	r3, [r7, #8]
 8015450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015454:	d306      	bcc.n	8015464 <tcp_update_rcv_ann_wnd+0x90>
 8015456:	4b08      	ldr	r3, [pc, #32]	; (8015478 <tcp_update_rcv_ann_wnd+0xa4>)
 8015458:	f240 32b6 	movw	r2, #950	; 0x3b6
 801545c:	4909      	ldr	r1, [pc, #36]	; (8015484 <tcp_update_rcv_ann_wnd+0xb0>)
 801545e:	4808      	ldr	r0, [pc, #32]	; (8015480 <tcp_update_rcv_ann_wnd+0xac>)
 8015460:	f00c f95a 	bl	8021718 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8015464:	68bb      	ldr	r3, [r7, #8]
 8015466:	b29a      	uxth	r2, r3
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801546c:	2300      	movs	r3, #0
  }
}
 801546e:	4618      	mov	r0, r3
 8015470:	3710      	adds	r7, #16
 8015472:	46bd      	mov	sp, r7
 8015474:	bd80      	pop	{r7, pc}
 8015476:	bf00      	nop
 8015478:	08024eec 	.word	0x08024eec
 801547c:	08025148 	.word	0x08025148
 8015480:	08024f30 	.word	0x08024f30
 8015484:	0802516c 	.word	0x0802516c

08015488 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8015488:	b580      	push	{r7, lr}
 801548a:	b084      	sub	sp, #16
 801548c:	af00      	add	r7, sp, #0
 801548e:	6078      	str	r0, [r7, #4]
 8015490:	460b      	mov	r3, r1
 8015492:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d107      	bne.n	80154aa <tcp_recved+0x22>
 801549a:	4b1f      	ldr	r3, [pc, #124]	; (8015518 <tcp_recved+0x90>)
 801549c:	f240 32cf 	movw	r2, #975	; 0x3cf
 80154a0:	491e      	ldr	r1, [pc, #120]	; (801551c <tcp_recved+0x94>)
 80154a2:	481f      	ldr	r0, [pc, #124]	; (8015520 <tcp_recved+0x98>)
 80154a4:	f00c f938 	bl	8021718 <iprintf>
 80154a8:	e032      	b.n	8015510 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	7d1b      	ldrb	r3, [r3, #20]
 80154ae:	2b01      	cmp	r3, #1
 80154b0:	d106      	bne.n	80154c0 <tcp_recved+0x38>
 80154b2:	4b19      	ldr	r3, [pc, #100]	; (8015518 <tcp_recved+0x90>)
 80154b4:	f240 32d2 	movw	r2, #978	; 0x3d2
 80154b8:	491a      	ldr	r1, [pc, #104]	; (8015524 <tcp_recved+0x9c>)
 80154ba:	4819      	ldr	r0, [pc, #100]	; (8015520 <tcp_recved+0x98>)
 80154bc:	f00c f92c 	bl	8021718 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80154c4:	887b      	ldrh	r3, [r7, #2]
 80154c6:	4413      	add	r3, r2
 80154c8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80154ca:	89fb      	ldrh	r3, [r7, #14]
 80154cc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80154d0:	d804      	bhi.n	80154dc <tcp_recved+0x54>
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80154d6:	89fa      	ldrh	r2, [r7, #14]
 80154d8:	429a      	cmp	r2, r3
 80154da:	d204      	bcs.n	80154e6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80154e2:	851a      	strh	r2, [r3, #40]	; 0x28
 80154e4:	e002      	b.n	80154ec <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	89fa      	ldrh	r2, [r7, #14]
 80154ea:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80154ec:	6878      	ldr	r0, [r7, #4]
 80154ee:	f7ff ff71 	bl	80153d4 <tcp_update_rcv_ann_wnd>
 80154f2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80154f4:	68bb      	ldr	r3, [r7, #8]
 80154f6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80154fa:	d309      	bcc.n	8015510 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	8b5b      	ldrh	r3, [r3, #26]
 8015500:	f043 0302 	orr.w	r3, r3, #2
 8015504:	b29a      	uxth	r2, r3
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801550a:	6878      	ldr	r0, [r7, #4]
 801550c:	f004 fbc8 	bl	8019ca0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8015510:	3710      	adds	r7, #16
 8015512:	46bd      	mov	sp, r7
 8015514:	bd80      	pop	{r7, pc}
 8015516:	bf00      	nop
 8015518:	08024eec 	.word	0x08024eec
 801551c:	08025188 	.word	0x08025188
 8015520:	08024f30 	.word	0x08024f30
 8015524:	080251a0 	.word	0x080251a0

08015528 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8015528:	b480      	push	{r7}
 801552a:	b083      	sub	sp, #12
 801552c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801552e:	2300      	movs	r3, #0
 8015530:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8015532:	4b1e      	ldr	r3, [pc, #120]	; (80155ac <tcp_new_port+0x84>)
 8015534:	881b      	ldrh	r3, [r3, #0]
 8015536:	3301      	adds	r3, #1
 8015538:	b29a      	uxth	r2, r3
 801553a:	4b1c      	ldr	r3, [pc, #112]	; (80155ac <tcp_new_port+0x84>)
 801553c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801553e:	4b1b      	ldr	r3, [pc, #108]	; (80155ac <tcp_new_port+0x84>)
 8015540:	881b      	ldrh	r3, [r3, #0]
 8015542:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015546:	4293      	cmp	r3, r2
 8015548:	d103      	bne.n	8015552 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801554a:	4b18      	ldr	r3, [pc, #96]	; (80155ac <tcp_new_port+0x84>)
 801554c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015550:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015552:	2300      	movs	r3, #0
 8015554:	71fb      	strb	r3, [r7, #7]
 8015556:	e01e      	b.n	8015596 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015558:	79fb      	ldrb	r3, [r7, #7]
 801555a:	4a15      	ldr	r2, [pc, #84]	; (80155b0 <tcp_new_port+0x88>)
 801555c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	603b      	str	r3, [r7, #0]
 8015564:	e011      	b.n	801558a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8015566:	683b      	ldr	r3, [r7, #0]
 8015568:	8ada      	ldrh	r2, [r3, #22]
 801556a:	4b10      	ldr	r3, [pc, #64]	; (80155ac <tcp_new_port+0x84>)
 801556c:	881b      	ldrh	r3, [r3, #0]
 801556e:	429a      	cmp	r2, r3
 8015570:	d108      	bne.n	8015584 <tcp_new_port+0x5c>
        n++;
 8015572:	88bb      	ldrh	r3, [r7, #4]
 8015574:	3301      	adds	r3, #1
 8015576:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8015578:	88bb      	ldrh	r3, [r7, #4]
 801557a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801557e:	d3d8      	bcc.n	8015532 <tcp_new_port+0xa>
          return 0;
 8015580:	2300      	movs	r3, #0
 8015582:	e00d      	b.n	80155a0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015584:	683b      	ldr	r3, [r7, #0]
 8015586:	68db      	ldr	r3, [r3, #12]
 8015588:	603b      	str	r3, [r7, #0]
 801558a:	683b      	ldr	r3, [r7, #0]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d1ea      	bne.n	8015566 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015590:	79fb      	ldrb	r3, [r7, #7]
 8015592:	3301      	adds	r3, #1
 8015594:	71fb      	strb	r3, [r7, #7]
 8015596:	79fb      	ldrb	r3, [r7, #7]
 8015598:	2b03      	cmp	r3, #3
 801559a:	d9dd      	bls.n	8015558 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801559c:	4b03      	ldr	r3, [pc, #12]	; (80155ac <tcp_new_port+0x84>)
 801559e:	881b      	ldrh	r3, [r3, #0]
}
 80155a0:	4618      	mov	r0, r3
 80155a2:	370c      	adds	r7, #12
 80155a4:	46bd      	mov	sp, r7
 80155a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155aa:	4770      	bx	lr
 80155ac:	20000024 	.word	0x20000024
 80155b0:	080273c8 	.word	0x080273c8

080155b4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80155b4:	b5b0      	push	{r4, r5, r7, lr}
 80155b6:	b090      	sub	sp, #64	; 0x40
 80155b8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80155ba:	2300      	movs	r3, #0
 80155bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80155c0:	4b94      	ldr	r3, [pc, #592]	; (8015814 <tcp_slowtmr+0x260>)
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	3301      	adds	r3, #1
 80155c6:	4a93      	ldr	r2, [pc, #588]	; (8015814 <tcp_slowtmr+0x260>)
 80155c8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80155ca:	4b93      	ldr	r3, [pc, #588]	; (8015818 <tcp_slowtmr+0x264>)
 80155cc:	781b      	ldrb	r3, [r3, #0]
 80155ce:	3301      	adds	r3, #1
 80155d0:	b2da      	uxtb	r2, r3
 80155d2:	4b91      	ldr	r3, [pc, #580]	; (8015818 <tcp_slowtmr+0x264>)
 80155d4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80155d6:	2300      	movs	r3, #0
 80155d8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80155da:	4b90      	ldr	r3, [pc, #576]	; (801581c <tcp_slowtmr+0x268>)
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80155e0:	e2b7      	b.n	8015b52 <tcp_slowtmr+0x59e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80155e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155e4:	7d1b      	ldrb	r3, [r3, #20]
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d106      	bne.n	80155f8 <tcp_slowtmr+0x44>
 80155ea:	4b8d      	ldr	r3, [pc, #564]	; (8015820 <tcp_slowtmr+0x26c>)
 80155ec:	f240 42be 	movw	r2, #1214	; 0x4be
 80155f0:	498c      	ldr	r1, [pc, #560]	; (8015824 <tcp_slowtmr+0x270>)
 80155f2:	488d      	ldr	r0, [pc, #564]	; (8015828 <tcp_slowtmr+0x274>)
 80155f4:	f00c f890 	bl	8021718 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80155f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155fa:	7d1b      	ldrb	r3, [r3, #20]
 80155fc:	2b01      	cmp	r3, #1
 80155fe:	d106      	bne.n	801560e <tcp_slowtmr+0x5a>
 8015600:	4b87      	ldr	r3, [pc, #540]	; (8015820 <tcp_slowtmr+0x26c>)
 8015602:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8015606:	4989      	ldr	r1, [pc, #548]	; (801582c <tcp_slowtmr+0x278>)
 8015608:	4887      	ldr	r0, [pc, #540]	; (8015828 <tcp_slowtmr+0x274>)
 801560a:	f00c f885 	bl	8021718 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015610:	7d1b      	ldrb	r3, [r3, #20]
 8015612:	2b0a      	cmp	r3, #10
 8015614:	d106      	bne.n	8015624 <tcp_slowtmr+0x70>
 8015616:	4b82      	ldr	r3, [pc, #520]	; (8015820 <tcp_slowtmr+0x26c>)
 8015618:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801561c:	4984      	ldr	r1, [pc, #528]	; (8015830 <tcp_slowtmr+0x27c>)
 801561e:	4882      	ldr	r0, [pc, #520]	; (8015828 <tcp_slowtmr+0x274>)
 8015620:	f00c f87a 	bl	8021718 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015626:	7f9a      	ldrb	r2, [r3, #30]
 8015628:	4b7b      	ldr	r3, [pc, #492]	; (8015818 <tcp_slowtmr+0x264>)
 801562a:	781b      	ldrb	r3, [r3, #0]
 801562c:	429a      	cmp	r2, r3
 801562e:	d105      	bne.n	801563c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8015630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015632:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015636:	68db      	ldr	r3, [r3, #12]
 8015638:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801563a:	e28a      	b.n	8015b52 <tcp_slowtmr+0x59e>
    }
    pcb->last_timer = tcp_timer_ctr;
 801563c:	4b76      	ldr	r3, [pc, #472]	; (8015818 <tcp_slowtmr+0x264>)
 801563e:	781a      	ldrb	r2, [r3, #0]
 8015640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015642:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8015644:	2300      	movs	r3, #0
 8015646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801564a:	2300      	movs	r3, #0
 801564c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015652:	7d1b      	ldrb	r3, [r3, #20]
 8015654:	2b02      	cmp	r3, #2
 8015656:	d10a      	bne.n	801566e <tcp_slowtmr+0xba>
 8015658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801565a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801565e:	2b05      	cmp	r3, #5
 8015660:	d905      	bls.n	801566e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8015662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015666:	3301      	adds	r3, #1
 8015668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801566c:	e11e      	b.n	80158ac <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801566e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015670:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015674:	2b0b      	cmp	r3, #11
 8015676:	d905      	bls.n	8015684 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8015678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801567c:	3301      	adds	r3, #1
 801567e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015682:	e113      	b.n	80158ac <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8015684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015686:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 801568a:	2b00      	cmp	r3, #0
 801568c:	d075      	beq.n	801577a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801568e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015692:	2b00      	cmp	r3, #0
 8015694:	d006      	beq.n	80156a4 <tcp_slowtmr+0xf0>
 8015696:	4b62      	ldr	r3, [pc, #392]	; (8015820 <tcp_slowtmr+0x26c>)
 8015698:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801569c:	4965      	ldr	r1, [pc, #404]	; (8015834 <tcp_slowtmr+0x280>)
 801569e:	4862      	ldr	r0, [pc, #392]	; (8015828 <tcp_slowtmr+0x274>)
 80156a0:	f00c f83a 	bl	8021718 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80156a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d106      	bne.n	80156ba <tcp_slowtmr+0x106>
 80156ac:	4b5c      	ldr	r3, [pc, #368]	; (8015820 <tcp_slowtmr+0x26c>)
 80156ae:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80156b2:	4961      	ldr	r1, [pc, #388]	; (8015838 <tcp_slowtmr+0x284>)
 80156b4:	485c      	ldr	r0, [pc, #368]	; (8015828 <tcp_slowtmr+0x274>)
 80156b6:	f00c f82f 	bl	8021718 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80156ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156bc:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80156c0:	2b0b      	cmp	r3, #11
 80156c2:	d905      	bls.n	80156d0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80156c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156c8:	3301      	adds	r3, #1
 80156ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80156ce:	e0ed      	b.n	80158ac <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80156d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156d2:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80156d6:	3b01      	subs	r3, #1
 80156d8:	4a58      	ldr	r2, [pc, #352]	; (801583c <tcp_slowtmr+0x288>)
 80156da:	5cd3      	ldrb	r3, [r2, r3]
 80156dc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80156de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156e0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80156e4:	7c7a      	ldrb	r2, [r7, #17]
 80156e6:	429a      	cmp	r2, r3
 80156e8:	d907      	bls.n	80156fa <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80156ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ec:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80156f0:	3301      	adds	r3, #1
 80156f2:	b2da      	uxtb	r2, r3
 80156f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80156fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156fc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8015700:	7c7a      	ldrb	r2, [r7, #17]
 8015702:	429a      	cmp	r2, r3
 8015704:	f200 80d2 	bhi.w	80158ac <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8015708:	2301      	movs	r3, #1
 801570a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801570c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801570e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015712:	2b00      	cmp	r3, #0
 8015714:	d108      	bne.n	8015728 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8015716:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015718:	f005 f96a 	bl	801a9f0 <tcp_zero_window_probe>
 801571c:	4603      	mov	r3, r0
 801571e:	2b00      	cmp	r3, #0
 8015720:	d014      	beq.n	801574c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8015722:	2300      	movs	r3, #0
 8015724:	623b      	str	r3, [r7, #32]
 8015726:	e011      	b.n	801574c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8015728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801572a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801572e:	4619      	mov	r1, r3
 8015730:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015732:	f004 f82f 	bl	8019794 <tcp_split_unsent_seg>
 8015736:	4603      	mov	r3, r0
 8015738:	2b00      	cmp	r3, #0
 801573a:	d107      	bne.n	801574c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 801573c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801573e:	f004 faaf 	bl	8019ca0 <tcp_output>
 8015742:	4603      	mov	r3, r0
 8015744:	2b00      	cmp	r3, #0
 8015746:	d101      	bne.n	801574c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8015748:	2300      	movs	r3, #0
 801574a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801574c:	6a3b      	ldr	r3, [r7, #32]
 801574e:	2b00      	cmp	r3, #0
 8015750:	f000 80ac 	beq.w	80158ac <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8015754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015756:	2200      	movs	r2, #0
 8015758:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801575c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801575e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8015762:	2b06      	cmp	r3, #6
 8015764:	f200 80a2 	bhi.w	80158ac <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8015768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801576a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 801576e:	3301      	adds	r3, #1
 8015770:	b2da      	uxtb	r2, r3
 8015772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015774:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8015778:	e098      	b.n	80158ac <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801577a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801577c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015780:	2b00      	cmp	r3, #0
 8015782:	db0f      	blt.n	80157a4 <tcp_slowtmr+0x1f0>
 8015784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015786:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801578a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801578e:	4293      	cmp	r3, r2
 8015790:	d008      	beq.n	80157a4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8015792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015794:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015798:	b29b      	uxth	r3, r3
 801579a:	3301      	adds	r3, #1
 801579c:	b29b      	uxth	r3, r3
 801579e:	b21a      	sxth	r2, r3
 80157a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157a2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80157a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157a6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80157aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ac:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80157b0:	429a      	cmp	r2, r3
 80157b2:	db7b      	blt.n	80158ac <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80157b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80157b6:	f004 fd67 	bl	801a288 <tcp_rexmit_rto_prepare>
 80157ba:	4603      	mov	r3, r0
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d007      	beq.n	80157d0 <tcp_slowtmr+0x21c>
 80157c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d171      	bne.n	80158ac <tcp_slowtmr+0x2f8>
 80157c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d06d      	beq.n	80158ac <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80157d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157d2:	7d1b      	ldrb	r3, [r3, #20]
 80157d4:	2b02      	cmp	r3, #2
 80157d6:	d03a      	beq.n	801584e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80157d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80157de:	2b0c      	cmp	r3, #12
 80157e0:	bf28      	it	cs
 80157e2:	230c      	movcs	r3, #12
 80157e4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80157e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80157ec:	10db      	asrs	r3, r3, #3
 80157ee:	b21b      	sxth	r3, r3
 80157f0:	461a      	mov	r2, r3
 80157f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157f4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80157f8:	4413      	add	r3, r2
 80157fa:	7efa      	ldrb	r2, [r7, #27]
 80157fc:	4910      	ldr	r1, [pc, #64]	; (8015840 <tcp_slowtmr+0x28c>)
 80157fe:	5c8a      	ldrb	r2, [r1, r2]
 8015800:	4093      	lsls	r3, r2
 8015802:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8015804:	697b      	ldr	r3, [r7, #20]
 8015806:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801580a:	4293      	cmp	r3, r2
 801580c:	dc1a      	bgt.n	8015844 <tcp_slowtmr+0x290>
 801580e:	697b      	ldr	r3, [r7, #20]
 8015810:	b21a      	sxth	r2, r3
 8015812:	e019      	b.n	8015848 <tcp_slowtmr+0x294>
 8015814:	20012350 	.word	0x20012350
 8015818:	20012366 	.word	0x20012366
 801581c:	2001235c 	.word	0x2001235c
 8015820:	08024eec 	.word	0x08024eec
 8015824:	08025230 	.word	0x08025230
 8015828:	08024f30 	.word	0x08024f30
 801582c:	0802525c 	.word	0x0802525c
 8015830:	08025288 	.word	0x08025288
 8015834:	080252b8 	.word	0x080252b8
 8015838:	080252ec 	.word	0x080252ec
 801583c:	080273c0 	.word	0x080273c0
 8015840:	080273b0 	.word	0x080273b0
 8015844:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801584a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801584e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015850:	2200      	movs	r2, #0
 8015852:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015856:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801585a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801585c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015860:	4293      	cmp	r3, r2
 8015862:	bf28      	it	cs
 8015864:	4613      	movcs	r3, r2
 8015866:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015868:	8a7b      	ldrh	r3, [r7, #18]
 801586a:	085b      	lsrs	r3, r3, #1
 801586c:	b29a      	uxth	r2, r3
 801586e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015870:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015876:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801587a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801587c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801587e:	005b      	lsls	r3, r3, #1
 8015880:	b29b      	uxth	r3, r3
 8015882:	429a      	cmp	r2, r3
 8015884:	d206      	bcs.n	8015894 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8015886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015888:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801588a:	005b      	lsls	r3, r3, #1
 801588c:	b29a      	uxth	r2, r3
 801588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015890:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8015894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015896:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8015898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801589a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158a0:	2200      	movs	r2, #0
 80158a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80158a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80158a8:	f004 fd5e 	bl	801a368 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80158ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ae:	7d1b      	ldrb	r3, [r3, #20]
 80158b0:	2b06      	cmp	r3, #6
 80158b2:	d111      	bne.n	80158d8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80158b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158b6:	8b5b      	ldrh	r3, [r3, #26]
 80158b8:	f003 0310 	and.w	r3, r3, #16
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d00b      	beq.n	80158d8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80158c0:	4b98      	ldr	r3, [pc, #608]	; (8015b24 <tcp_slowtmr+0x570>)
 80158c2:	681a      	ldr	r2, [r3, #0]
 80158c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158c6:	6a1b      	ldr	r3, [r3, #32]
 80158c8:	1ad3      	subs	r3, r2, r3
 80158ca:	2b28      	cmp	r3, #40	; 0x28
 80158cc:	d904      	bls.n	80158d8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80158ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80158d2:	3301      	adds	r3, #1
 80158d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80158d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158da:	7a5b      	ldrb	r3, [r3, #9]
 80158dc:	f003 0308 	and.w	r3, r3, #8
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d053      	beq.n	801598c <tcp_slowtmr+0x3d8>
        ((pcb->state == ESTABLISHED) ||
 80158e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158e6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80158e8:	2b04      	cmp	r3, #4
 80158ea:	d003      	beq.n	80158f4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80158ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ee:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80158f0:	2b07      	cmp	r3, #7
 80158f2:	d14b      	bne.n	801598c <tcp_slowtmr+0x3d8>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80158f4:	4b8b      	ldr	r3, [pc, #556]	; (8015b24 <tcp_slowtmr+0x570>)
 80158f6:	681a      	ldr	r2, [r3, #0]
 80158f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158fa:	6a1b      	ldr	r3, [r3, #32]
 80158fc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80158fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015900:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8015904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015906:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801590a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801590c:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 8015910:	fb00 f303 	mul.w	r3, r0, r3
 8015914:	440b      	add	r3, r1
 8015916:	4984      	ldr	r1, [pc, #528]	; (8015b28 <tcp_slowtmr+0x574>)
 8015918:	fba1 1303 	umull	r1, r3, r1, r3
 801591c:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801591e:	429a      	cmp	r2, r3
 8015920:	d90a      	bls.n	8015938 <tcp_slowtmr+0x384>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8015922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015926:	3301      	adds	r3, #1
 8015928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801592c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015930:	3301      	adds	r3, #1
 8015932:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015936:	e029      	b.n	801598c <tcp_slowtmr+0x3d8>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015938:	4b7a      	ldr	r3, [pc, #488]	; (8015b24 <tcp_slowtmr+0x570>)
 801593a:	681a      	ldr	r2, [r3, #0]
 801593c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801593e:	6a1b      	ldr	r3, [r3, #32]
 8015940:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8015942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015944:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8015948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801594a:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 801594e:	4618      	mov	r0, r3
 8015950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015952:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015956:	fb00 f303 	mul.w	r3, r0, r3
 801595a:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801595c:	4972      	ldr	r1, [pc, #456]	; (8015b28 <tcp_slowtmr+0x574>)
 801595e:	fba1 1303 	umull	r1, r3, r1, r3
 8015962:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015964:	429a      	cmp	r2, r3
 8015966:	d911      	bls.n	801598c <tcp_slowtmr+0x3d8>
        err = tcp_keepalive(pcb);
 8015968:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801596a:	f005 f801 	bl	801a970 <tcp_keepalive>
 801596e:	4603      	mov	r3, r0
 8015970:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8015974:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8015978:	2b00      	cmp	r3, #0
 801597a:	d107      	bne.n	801598c <tcp_slowtmr+0x3d8>
          pcb->keep_cnt_sent++;
 801597c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801597e:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8015982:	3301      	adds	r3, #1
 8015984:	b2da      	uxtb	r2, r3
 8015986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015988:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801598c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801598e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015990:	2b00      	cmp	r3, #0
 8015992:	d011      	beq.n	80159b8 <tcp_slowtmr+0x404>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8015994:	4b63      	ldr	r3, [pc, #396]	; (8015b24 <tcp_slowtmr+0x570>)
 8015996:	681a      	ldr	r2, [r3, #0]
 8015998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801599a:	6a1b      	ldr	r3, [r3, #32]
 801599c:	1ad2      	subs	r2, r2, r3
 801599e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159a0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80159a4:	4619      	mov	r1, r3
 80159a6:	460b      	mov	r3, r1
 80159a8:	005b      	lsls	r3, r3, #1
 80159aa:	440b      	add	r3, r1
 80159ac:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80159ae:	429a      	cmp	r2, r3
 80159b0:	d302      	bcc.n	80159b8 <tcp_slowtmr+0x404>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80159b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80159b4:	f000 feae 	bl	8016714 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80159b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ba:	7d1b      	ldrb	r3, [r3, #20]
 80159bc:	2b03      	cmp	r3, #3
 80159be:	d10b      	bne.n	80159d8 <tcp_slowtmr+0x424>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80159c0:	4b58      	ldr	r3, [pc, #352]	; (8015b24 <tcp_slowtmr+0x570>)
 80159c2:	681a      	ldr	r2, [r3, #0]
 80159c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159c6:	6a1b      	ldr	r3, [r3, #32]
 80159c8:	1ad3      	subs	r3, r2, r3
 80159ca:	2b28      	cmp	r3, #40	; 0x28
 80159cc:	d904      	bls.n	80159d8 <tcp_slowtmr+0x424>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80159ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159d2:	3301      	adds	r3, #1
 80159d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80159d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159da:	7d1b      	ldrb	r3, [r3, #20]
 80159dc:	2b09      	cmp	r3, #9
 80159de:	d10b      	bne.n	80159f8 <tcp_slowtmr+0x444>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80159e0:	4b50      	ldr	r3, [pc, #320]	; (8015b24 <tcp_slowtmr+0x570>)
 80159e2:	681a      	ldr	r2, [r3, #0]
 80159e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159e6:	6a1b      	ldr	r3, [r3, #32]
 80159e8:	1ad3      	subs	r3, r2, r3
 80159ea:	2bf0      	cmp	r3, #240	; 0xf0
 80159ec:	d904      	bls.n	80159f8 <tcp_slowtmr+0x444>
        ++pcb_remove;
 80159ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159f2:	3301      	adds	r3, #1
 80159f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80159f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d060      	beq.n	8015ac2 <tcp_slowtmr+0x50e>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8015a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015a06:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8015a08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a0a:	f000 fccf 	bl	80163ac <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8015a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d010      	beq.n	8015a36 <tcp_slowtmr+0x482>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8015a14:	4b45      	ldr	r3, [pc, #276]	; (8015b2c <tcp_slowtmr+0x578>)
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a1a:	429a      	cmp	r2, r3
 8015a1c:	d106      	bne.n	8015a2c <tcp_slowtmr+0x478>
 8015a1e:	4b44      	ldr	r3, [pc, #272]	; (8015b30 <tcp_slowtmr+0x57c>)
 8015a20:	f240 526d 	movw	r2, #1389	; 0x56d
 8015a24:	4943      	ldr	r1, [pc, #268]	; (8015b34 <tcp_slowtmr+0x580>)
 8015a26:	4844      	ldr	r0, [pc, #272]	; (8015b38 <tcp_slowtmr+0x584>)
 8015a28:	f00b fe76 	bl	8021718 <iprintf>
        prev->next = pcb->next;
 8015a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a2e:	68da      	ldr	r2, [r3, #12]
 8015a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a32:	60da      	str	r2, [r3, #12]
 8015a34:	e00f      	b.n	8015a56 <tcp_slowtmr+0x4a2>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8015a36:	4b3d      	ldr	r3, [pc, #244]	; (8015b2c <tcp_slowtmr+0x578>)
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a3c:	429a      	cmp	r2, r3
 8015a3e:	d006      	beq.n	8015a4e <tcp_slowtmr+0x49a>
 8015a40:	4b3b      	ldr	r3, [pc, #236]	; (8015b30 <tcp_slowtmr+0x57c>)
 8015a42:	f240 5271 	movw	r2, #1393	; 0x571
 8015a46:	493d      	ldr	r1, [pc, #244]	; (8015b3c <tcp_slowtmr+0x588>)
 8015a48:	483b      	ldr	r0, [pc, #236]	; (8015b38 <tcp_slowtmr+0x584>)
 8015a4a:	f00b fe65 	bl	8021718 <iprintf>
        tcp_active_pcbs = pcb->next;
 8015a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a50:	68db      	ldr	r3, [r3, #12]
 8015a52:	4a36      	ldr	r2, [pc, #216]	; (8015b2c <tcp_slowtmr+0x578>)
 8015a54:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8015a56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d013      	beq.n	8015a86 <tcp_slowtmr+0x4d2>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a60:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8015a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a64:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015a66:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8015a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a6a:	3304      	adds	r3, #4
 8015a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a6e:	8ad2      	ldrh	r2, [r2, #22]
 8015a70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015a72:	8b09      	ldrh	r1, [r1, #24]
 8015a74:	9102      	str	r1, [sp, #8]
 8015a76:	9201      	str	r2, [sp, #4]
 8015a78:	9300      	str	r3, [sp, #0]
 8015a7a:	462b      	mov	r3, r5
 8015a7c:	4622      	mov	r2, r4
 8015a7e:	4601      	mov	r1, r0
 8015a80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a82:	f004 fec1 	bl	801a808 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8015a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a88:	691b      	ldr	r3, [r3, #16]
 8015a8a:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8015a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a8e:	7d1b      	ldrb	r3, [r3, #20]
 8015a90:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8015a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a94:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8015a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a98:	68db      	ldr	r3, [r3, #12]
 8015a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8015a9c:	6838      	ldr	r0, [r7, #0]
 8015a9e:	f7fe ffb3 	bl	8014a08 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8015aa2:	4b27      	ldr	r3, [pc, #156]	; (8015b40 <tcp_slowtmr+0x58c>)
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d004      	beq.n	8015ab8 <tcp_slowtmr+0x504>
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	f06f 010c 	mvn.w	r1, #12
 8015ab4:	68b8      	ldr	r0, [r7, #8]
 8015ab6:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8015ab8:	4b21      	ldr	r3, [pc, #132]	; (8015b40 <tcp_slowtmr+0x58c>)
 8015aba:	781b      	ldrb	r3, [r3, #0]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d048      	beq.n	8015b52 <tcp_slowtmr+0x59e>
        goto tcp_slowtmr_start;
 8015ac0:	e589      	b.n	80155d6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8015ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ac4:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ac8:	68db      	ldr	r3, [r3, #12]
 8015aca:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8015acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ace:	7f1b      	ldrb	r3, [r3, #28]
 8015ad0:	3301      	adds	r3, #1
 8015ad2:	b2da      	uxtb	r2, r3
 8015ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ad6:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8015ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ada:	7f1a      	ldrb	r2, [r3, #28]
 8015adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ade:	7f5b      	ldrb	r3, [r3, #29]
 8015ae0:	429a      	cmp	r2, r3
 8015ae2:	d336      	bcc.n	8015b52 <tcp_slowtmr+0x59e>
        prev->polltmr = 0;
 8015ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8015aea:	4b15      	ldr	r3, [pc, #84]	; (8015b40 <tcp_slowtmr+0x58c>)
 8015aec:	2200      	movs	r2, #0
 8015aee:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8015af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d00b      	beq.n	8015b12 <tcp_slowtmr+0x55e>
 8015afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015b02:	6912      	ldr	r2, [r2, #16]
 8015b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015b06:	4610      	mov	r0, r2
 8015b08:	4798      	blx	r3
 8015b0a:	4603      	mov	r3, r0
 8015b0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8015b10:	e002      	b.n	8015b18 <tcp_slowtmr+0x564>
 8015b12:	2300      	movs	r3, #0
 8015b14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8015b18:	4b09      	ldr	r3, [pc, #36]	; (8015b40 <tcp_slowtmr+0x58c>)
 8015b1a:	781b      	ldrb	r3, [r3, #0]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d011      	beq.n	8015b44 <tcp_slowtmr+0x590>
          goto tcp_slowtmr_start;
 8015b20:	e559      	b.n	80155d6 <tcp_slowtmr+0x22>
 8015b22:	bf00      	nop
 8015b24:	20012350 	.word	0x20012350
 8015b28:	10624dd3 	.word	0x10624dd3
 8015b2c:	2001235c 	.word	0x2001235c
 8015b30:	08024eec 	.word	0x08024eec
 8015b34:	08025324 	.word	0x08025324
 8015b38:	08024f30 	.word	0x08024f30
 8015b3c:	08025350 	.word	0x08025350
 8015b40:	20012364 	.word	0x20012364
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8015b44:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d102      	bne.n	8015b52 <tcp_slowtmr+0x59e>
          tcp_output(prev);
 8015b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b4e:	f004 f8a7 	bl	8019ca0 <tcp_output>
  while (pcb != NULL) {
 8015b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	f47f ad44 	bne.w	80155e2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8015b5e:	4b2f      	ldr	r3, [pc, #188]	; (8015c1c <tcp_slowtmr+0x668>)
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8015b64:	e052      	b.n	8015c0c <tcp_slowtmr+0x658>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b68:	7d1b      	ldrb	r3, [r3, #20]
 8015b6a:	2b0a      	cmp	r3, #10
 8015b6c:	d006      	beq.n	8015b7c <tcp_slowtmr+0x5c8>
 8015b6e:	4b2c      	ldr	r3, [pc, #176]	; (8015c20 <tcp_slowtmr+0x66c>)
 8015b70:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8015b74:	492b      	ldr	r1, [pc, #172]	; (8015c24 <tcp_slowtmr+0x670>)
 8015b76:	482c      	ldr	r0, [pc, #176]	; (8015c28 <tcp_slowtmr+0x674>)
 8015b78:	f00b fdce 	bl	8021718 <iprintf>
    pcb_remove = 0;
 8015b7c:	2300      	movs	r3, #0
 8015b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015b82:	4b2a      	ldr	r3, [pc, #168]	; (8015c2c <tcp_slowtmr+0x678>)
 8015b84:	681a      	ldr	r2, [r3, #0]
 8015b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b88:	6a1b      	ldr	r3, [r3, #32]
 8015b8a:	1ad3      	subs	r3, r2, r3
 8015b8c:	2bf0      	cmp	r3, #240	; 0xf0
 8015b8e:	d904      	bls.n	8015b9a <tcp_slowtmr+0x5e6>
      ++pcb_remove;
 8015b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b94:	3301      	adds	r3, #1
 8015b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015b9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d02f      	beq.n	8015c02 <tcp_slowtmr+0x64e>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8015ba2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015ba4:	f000 fc02 	bl	80163ac <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8015ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d010      	beq.n	8015bd0 <tcp_slowtmr+0x61c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015bae:	4b1b      	ldr	r3, [pc, #108]	; (8015c1c <tcp_slowtmr+0x668>)
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015bb4:	429a      	cmp	r2, r3
 8015bb6:	d106      	bne.n	8015bc6 <tcp_slowtmr+0x612>
 8015bb8:	4b19      	ldr	r3, [pc, #100]	; (8015c20 <tcp_slowtmr+0x66c>)
 8015bba:	f240 52af 	movw	r2, #1455	; 0x5af
 8015bbe:	491c      	ldr	r1, [pc, #112]	; (8015c30 <tcp_slowtmr+0x67c>)
 8015bc0:	4819      	ldr	r0, [pc, #100]	; (8015c28 <tcp_slowtmr+0x674>)
 8015bc2:	f00b fda9 	bl	8021718 <iprintf>
        prev->next = pcb->next;
 8015bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bc8:	68da      	ldr	r2, [r3, #12]
 8015bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bcc:	60da      	str	r2, [r3, #12]
 8015bce:	e00f      	b.n	8015bf0 <tcp_slowtmr+0x63c>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8015bd0:	4b12      	ldr	r3, [pc, #72]	; (8015c1c <tcp_slowtmr+0x668>)
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015bd6:	429a      	cmp	r2, r3
 8015bd8:	d006      	beq.n	8015be8 <tcp_slowtmr+0x634>
 8015bda:	4b11      	ldr	r3, [pc, #68]	; (8015c20 <tcp_slowtmr+0x66c>)
 8015bdc:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8015be0:	4914      	ldr	r1, [pc, #80]	; (8015c34 <tcp_slowtmr+0x680>)
 8015be2:	4811      	ldr	r0, [pc, #68]	; (8015c28 <tcp_slowtmr+0x674>)
 8015be4:	f00b fd98 	bl	8021718 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8015be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bea:	68db      	ldr	r3, [r3, #12]
 8015bec:	4a0b      	ldr	r2, [pc, #44]	; (8015c1c <tcp_slowtmr+0x668>)
 8015bee:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8015bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bf2:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8015bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bf6:	68db      	ldr	r3, [r3, #12]
 8015bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8015bfa:	69f8      	ldr	r0, [r7, #28]
 8015bfc:	f7fe ff04 	bl	8014a08 <tcp_free>
 8015c00:	e004      	b.n	8015c0c <tcp_slowtmr+0x658>
    } else {
      prev = pcb;
 8015c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c04:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c08:	68db      	ldr	r3, [r3, #12]
 8015c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8015c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d1a9      	bne.n	8015b66 <tcp_slowtmr+0x5b2>
    }
  }
}
 8015c12:	bf00      	nop
 8015c14:	bf00      	nop
 8015c16:	3730      	adds	r7, #48	; 0x30
 8015c18:	46bd      	mov	sp, r7
 8015c1a:	bdb0      	pop	{r4, r5, r7, pc}
 8015c1c:	20012360 	.word	0x20012360
 8015c20:	08024eec 	.word	0x08024eec
 8015c24:	0802537c 	.word	0x0802537c
 8015c28:	08024f30 	.word	0x08024f30
 8015c2c:	20012350 	.word	0x20012350
 8015c30:	080253ac 	.word	0x080253ac
 8015c34:	080253d4 	.word	0x080253d4

08015c38 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8015c38:	b580      	push	{r7, lr}
 8015c3a:	b082      	sub	sp, #8
 8015c3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8015c3e:	4b2d      	ldr	r3, [pc, #180]	; (8015cf4 <tcp_fasttmr+0xbc>)
 8015c40:	781b      	ldrb	r3, [r3, #0]
 8015c42:	3301      	adds	r3, #1
 8015c44:	b2da      	uxtb	r2, r3
 8015c46:	4b2b      	ldr	r3, [pc, #172]	; (8015cf4 <tcp_fasttmr+0xbc>)
 8015c48:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8015c4a:	4b2b      	ldr	r3, [pc, #172]	; (8015cf8 <tcp_fasttmr+0xc0>)
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015c50:	e048      	b.n	8015ce4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	7f9a      	ldrb	r2, [r3, #30]
 8015c56:	4b27      	ldr	r3, [pc, #156]	; (8015cf4 <tcp_fasttmr+0xbc>)
 8015c58:	781b      	ldrb	r3, [r3, #0]
 8015c5a:	429a      	cmp	r2, r3
 8015c5c:	d03f      	beq.n	8015cde <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8015c5e:	4b25      	ldr	r3, [pc, #148]	; (8015cf4 <tcp_fasttmr+0xbc>)
 8015c60:	781a      	ldrb	r2, [r3, #0]
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	8b5b      	ldrh	r3, [r3, #26]
 8015c6a:	f003 0301 	and.w	r3, r3, #1
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d010      	beq.n	8015c94 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	8b5b      	ldrh	r3, [r3, #26]
 8015c76:	f043 0302 	orr.w	r3, r3, #2
 8015c7a:	b29a      	uxth	r2, r3
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8015c80:	6878      	ldr	r0, [r7, #4]
 8015c82:	f004 f80d 	bl	8019ca0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	8b5b      	ldrh	r3, [r3, #26]
 8015c8a:	f023 0303 	bic.w	r3, r3, #3
 8015c8e:	b29a      	uxth	r2, r3
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	8b5b      	ldrh	r3, [r3, #26]
 8015c98:	f003 0308 	and.w	r3, r3, #8
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d009      	beq.n	8015cb4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	8b5b      	ldrh	r3, [r3, #26]
 8015ca4:	f023 0308 	bic.w	r3, r3, #8
 8015ca8:	b29a      	uxth	r2, r3
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8015cae:	6878      	ldr	r0, [r7, #4]
 8015cb0:	f7ff f83e 	bl	8014d30 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	68db      	ldr	r3, [r3, #12]
 8015cb8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d00a      	beq.n	8015cd8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8015cc2:	4b0e      	ldr	r3, [pc, #56]	; (8015cfc <tcp_fasttmr+0xc4>)
 8015cc4:	2200      	movs	r2, #0
 8015cc6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8015cc8:	6878      	ldr	r0, [r7, #4]
 8015cca:	f000 f819 	bl	8015d00 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8015cce:	4b0b      	ldr	r3, [pc, #44]	; (8015cfc <tcp_fasttmr+0xc4>)
 8015cd0:	781b      	ldrb	r3, [r3, #0]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d000      	beq.n	8015cd8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8015cd6:	e7b8      	b.n	8015c4a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8015cd8:	683b      	ldr	r3, [r7, #0]
 8015cda:	607b      	str	r3, [r7, #4]
 8015cdc:	e002      	b.n	8015ce4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	68db      	ldr	r3, [r3, #12]
 8015ce2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d1b3      	bne.n	8015c52 <tcp_fasttmr+0x1a>
    }
  }
}
 8015cea:	bf00      	nop
 8015cec:	bf00      	nop
 8015cee:	3708      	adds	r7, #8
 8015cf0:	46bd      	mov	sp, r7
 8015cf2:	bd80      	pop	{r7, pc}
 8015cf4:	20012366 	.word	0x20012366
 8015cf8:	2001235c 	.word	0x2001235c
 8015cfc:	20012364 	.word	0x20012364

08015d00 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8015d00:	b590      	push	{r4, r7, lr}
 8015d02:	b085      	sub	sp, #20
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d109      	bne.n	8015d22 <tcp_process_refused_data+0x22>
 8015d0e:	4b37      	ldr	r3, [pc, #220]	; (8015dec <tcp_process_refused_data+0xec>)
 8015d10:	f240 6209 	movw	r2, #1545	; 0x609
 8015d14:	4936      	ldr	r1, [pc, #216]	; (8015df0 <tcp_process_refused_data+0xf0>)
 8015d16:	4837      	ldr	r0, [pc, #220]	; (8015df4 <tcp_process_refused_data+0xf4>)
 8015d18:	f00b fcfe 	bl	8021718 <iprintf>
 8015d1c:	f06f 030f 	mvn.w	r3, #15
 8015d20:	e060      	b.n	8015de4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015d26:	7b5b      	ldrb	r3, [r3, #13]
 8015d28:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015d2e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	2200      	movs	r2, #0
 8015d34:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d00b      	beq.n	8015d58 <tcp_process_refused_data+0x58>
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	6918      	ldr	r0, [r3, #16]
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	68ba      	ldr	r2, [r7, #8]
 8015d4e:	6879      	ldr	r1, [r7, #4]
 8015d50:	47a0      	blx	r4
 8015d52:	4603      	mov	r3, r0
 8015d54:	73fb      	strb	r3, [r7, #15]
 8015d56:	e007      	b.n	8015d68 <tcp_process_refused_data+0x68>
 8015d58:	2300      	movs	r3, #0
 8015d5a:	68ba      	ldr	r2, [r7, #8]
 8015d5c:	6879      	ldr	r1, [r7, #4]
 8015d5e:	2000      	movs	r0, #0
 8015d60:	f000 f8a4 	bl	8015eac <tcp_recv_null>
 8015d64:	4603      	mov	r3, r0
 8015d66:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8015d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d12a      	bne.n	8015dc6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8015d70:	7bbb      	ldrb	r3, [r7, #14]
 8015d72:	f003 0320 	and.w	r3, r3, #32
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d033      	beq.n	8015de2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d7e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015d82:	d005      	beq.n	8015d90 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d88:	3301      	adds	r3, #1
 8015d8a:	b29a      	uxth	r2, r3
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d00b      	beq.n	8015db2 <tcp_process_refused_data+0xb2>
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	6918      	ldr	r0, [r3, #16]
 8015da4:	2300      	movs	r3, #0
 8015da6:	2200      	movs	r2, #0
 8015da8:	6879      	ldr	r1, [r7, #4]
 8015daa:	47a0      	blx	r4
 8015dac:	4603      	mov	r3, r0
 8015dae:	73fb      	strb	r3, [r7, #15]
 8015db0:	e001      	b.n	8015db6 <tcp_process_refused_data+0xb6>
 8015db2:	2300      	movs	r3, #0
 8015db4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8015db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015dba:	f113 0f0d 	cmn.w	r3, #13
 8015dbe:	d110      	bne.n	8015de2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8015dc0:	f06f 030c 	mvn.w	r3, #12
 8015dc4:	e00e      	b.n	8015de4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8015dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015dca:	f113 0f0d 	cmn.w	r3, #13
 8015dce:	d102      	bne.n	8015dd6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8015dd0:	f06f 030c 	mvn.w	r3, #12
 8015dd4:	e006      	b.n	8015de4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	68ba      	ldr	r2, [r7, #8]
 8015dda:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8015ddc:	f06f 0304 	mvn.w	r3, #4
 8015de0:	e000      	b.n	8015de4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8015de2:	2300      	movs	r3, #0
}
 8015de4:	4618      	mov	r0, r3
 8015de6:	3714      	adds	r7, #20
 8015de8:	46bd      	mov	sp, r7
 8015dea:	bd90      	pop	{r4, r7, pc}
 8015dec:	08024eec 	.word	0x08024eec
 8015df0:	080253fc 	.word	0x080253fc
 8015df4:	08024f30 	.word	0x08024f30

08015df8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8015df8:	b580      	push	{r7, lr}
 8015dfa:	b084      	sub	sp, #16
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8015e00:	e007      	b.n	8015e12 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8015e08:	6878      	ldr	r0, [r7, #4]
 8015e0a:	f000 f80a 	bl	8015e22 <tcp_seg_free>
    seg = next;
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d1f4      	bne.n	8015e02 <tcp_segs_free+0xa>
  }
}
 8015e18:	bf00      	nop
 8015e1a:	bf00      	nop
 8015e1c:	3710      	adds	r7, #16
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	bd80      	pop	{r7, pc}

08015e22 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8015e22:	b580      	push	{r7, lr}
 8015e24:	b082      	sub	sp, #8
 8015e26:	af00      	add	r7, sp, #0
 8015e28:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d00c      	beq.n	8015e4a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	685b      	ldr	r3, [r3, #4]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d004      	beq.n	8015e42 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	685b      	ldr	r3, [r3, #4]
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	f7fe fb27 	bl	8014490 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8015e42:	6879      	ldr	r1, [r7, #4]
 8015e44:	2003      	movs	r0, #3
 8015e46:	f7fd fc73 	bl	8013730 <memp_free>
  }
}
 8015e4a:	bf00      	nop
 8015e4c:	3708      	adds	r7, #8
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	bd80      	pop	{r7, pc}
	...

08015e54 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015e54:	b580      	push	{r7, lr}
 8015e56:	b084      	sub	sp, #16
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d106      	bne.n	8015e70 <tcp_seg_copy+0x1c>
 8015e62:	4b0f      	ldr	r3, [pc, #60]	; (8015ea0 <tcp_seg_copy+0x4c>)
 8015e64:	f240 6282 	movw	r2, #1666	; 0x682
 8015e68:	490e      	ldr	r1, [pc, #56]	; (8015ea4 <tcp_seg_copy+0x50>)
 8015e6a:	480f      	ldr	r0, [pc, #60]	; (8015ea8 <tcp_seg_copy+0x54>)
 8015e6c:	f00b fc54 	bl	8021718 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015e70:	2003      	movs	r0, #3
 8015e72:	f7fd fbe7 	bl	8013644 <memp_malloc>
 8015e76:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d101      	bne.n	8015e82 <tcp_seg_copy+0x2e>
    return NULL;
 8015e7e:	2300      	movs	r3, #0
 8015e80:	e00a      	b.n	8015e98 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8015e82:	2210      	movs	r2, #16
 8015e84:	6879      	ldr	r1, [r7, #4]
 8015e86:	68f8      	ldr	r0, [r7, #12]
 8015e88:	f00b ff6d 	bl	8021d66 <memcpy>
  pbuf_ref(cseg->p);
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	685b      	ldr	r3, [r3, #4]
 8015e90:	4618      	mov	r0, r3
 8015e92:	f7fe fba3 	bl	80145dc <pbuf_ref>
  return cseg;
 8015e96:	68fb      	ldr	r3, [r7, #12]
}
 8015e98:	4618      	mov	r0, r3
 8015e9a:	3710      	adds	r7, #16
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	bd80      	pop	{r7, pc}
 8015ea0:	08024eec 	.word	0x08024eec
 8015ea4:	08025440 	.word	0x08025440
 8015ea8:	08024f30 	.word	0x08024f30

08015eac <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8015eac:	b580      	push	{r7, lr}
 8015eae:	b084      	sub	sp, #16
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	60f8      	str	r0, [r7, #12]
 8015eb4:	60b9      	str	r1, [r7, #8]
 8015eb6:	607a      	str	r2, [r7, #4]
 8015eb8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8015eba:	68bb      	ldr	r3, [r7, #8]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d109      	bne.n	8015ed4 <tcp_recv_null+0x28>
 8015ec0:	4b12      	ldr	r3, [pc, #72]	; (8015f0c <tcp_recv_null+0x60>)
 8015ec2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015ec6:	4912      	ldr	r1, [pc, #72]	; (8015f10 <tcp_recv_null+0x64>)
 8015ec8:	4812      	ldr	r0, [pc, #72]	; (8015f14 <tcp_recv_null+0x68>)
 8015eca:	f00b fc25 	bl	8021718 <iprintf>
 8015ece:	f06f 030f 	mvn.w	r3, #15
 8015ed2:	e016      	b.n	8015f02 <tcp_recv_null+0x56>

  if (p != NULL) {
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d009      	beq.n	8015eee <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	891b      	ldrh	r3, [r3, #8]
 8015ede:	4619      	mov	r1, r3
 8015ee0:	68b8      	ldr	r0, [r7, #8]
 8015ee2:	f7ff fad1 	bl	8015488 <tcp_recved>
    pbuf_free(p);
 8015ee6:	6878      	ldr	r0, [r7, #4]
 8015ee8:	f7fe fad2 	bl	8014490 <pbuf_free>
 8015eec:	e008      	b.n	8015f00 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8015eee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d104      	bne.n	8015f00 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8015ef6:	68b8      	ldr	r0, [r7, #8]
 8015ef8:	f7fe ff84 	bl	8014e04 <tcp_close>
 8015efc:	4603      	mov	r3, r0
 8015efe:	e000      	b.n	8015f02 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8015f00:	2300      	movs	r3, #0
}
 8015f02:	4618      	mov	r0, r3
 8015f04:	3710      	adds	r7, #16
 8015f06:	46bd      	mov	sp, r7
 8015f08:	bd80      	pop	{r7, pc}
 8015f0a:	bf00      	nop
 8015f0c:	08024eec 	.word	0x08024eec
 8015f10:	0802545c 	.word	0x0802545c
 8015f14:	08024f30 	.word	0x08024f30

08015f18 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	b086      	sub	sp, #24
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	4603      	mov	r3, r0
 8015f20:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8015f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	db01      	blt.n	8015f2e <tcp_kill_prio+0x16>
 8015f2a:	79fb      	ldrb	r3, [r7, #7]
 8015f2c:	e000      	b.n	8015f30 <tcp_kill_prio+0x18>
 8015f2e:	237f      	movs	r3, #127	; 0x7f
 8015f30:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8015f32:	7afb      	ldrb	r3, [r7, #11]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d034      	beq.n	8015fa2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8015f38:	7afb      	ldrb	r3, [r7, #11]
 8015f3a:	3b01      	subs	r3, #1
 8015f3c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8015f3e:	2300      	movs	r3, #0
 8015f40:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015f42:	2300      	movs	r3, #0
 8015f44:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015f46:	4b19      	ldr	r3, [pc, #100]	; (8015fac <tcp_kill_prio+0x94>)
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	617b      	str	r3, [r7, #20]
 8015f4c:	e01f      	b.n	8015f8e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8015f4e:	697b      	ldr	r3, [r7, #20]
 8015f50:	7d5b      	ldrb	r3, [r3, #21]
 8015f52:	7afa      	ldrb	r2, [r7, #11]
 8015f54:	429a      	cmp	r2, r3
 8015f56:	d80c      	bhi.n	8015f72 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015f58:	697b      	ldr	r3, [r7, #20]
 8015f5a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8015f5c:	7afa      	ldrb	r2, [r7, #11]
 8015f5e:	429a      	cmp	r2, r3
 8015f60:	d112      	bne.n	8015f88 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015f62:	4b13      	ldr	r3, [pc, #76]	; (8015fb0 <tcp_kill_prio+0x98>)
 8015f64:	681a      	ldr	r2, [r3, #0]
 8015f66:	697b      	ldr	r3, [r7, #20]
 8015f68:	6a1b      	ldr	r3, [r3, #32]
 8015f6a:	1ad3      	subs	r3, r2, r3
 8015f6c:	68fa      	ldr	r2, [r7, #12]
 8015f6e:	429a      	cmp	r2, r3
 8015f70:	d80a      	bhi.n	8015f88 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8015f72:	4b0f      	ldr	r3, [pc, #60]	; (8015fb0 <tcp_kill_prio+0x98>)
 8015f74:	681a      	ldr	r2, [r3, #0]
 8015f76:	697b      	ldr	r3, [r7, #20]
 8015f78:	6a1b      	ldr	r3, [r3, #32]
 8015f7a:	1ad3      	subs	r3, r2, r3
 8015f7c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8015f7e:	697b      	ldr	r3, [r7, #20]
 8015f80:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8015f82:	697b      	ldr	r3, [r7, #20]
 8015f84:	7d5b      	ldrb	r3, [r3, #21]
 8015f86:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015f88:	697b      	ldr	r3, [r7, #20]
 8015f8a:	68db      	ldr	r3, [r3, #12]
 8015f8c:	617b      	str	r3, [r7, #20]
 8015f8e:	697b      	ldr	r3, [r7, #20]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d1dc      	bne.n	8015f4e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8015f94:	693b      	ldr	r3, [r7, #16]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d004      	beq.n	8015fa4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015f9a:	6938      	ldr	r0, [r7, #16]
 8015f9c:	f7ff f878 	bl	8015090 <tcp_abort>
 8015fa0:	e000      	b.n	8015fa4 <tcp_kill_prio+0x8c>
    return;
 8015fa2:	bf00      	nop
  }
}
 8015fa4:	3718      	adds	r7, #24
 8015fa6:	46bd      	mov	sp, r7
 8015fa8:	bd80      	pop	{r7, pc}
 8015faa:	bf00      	nop
 8015fac:	2001235c 	.word	0x2001235c
 8015fb0:	20012350 	.word	0x20012350

08015fb4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b086      	sub	sp, #24
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	4603      	mov	r3, r0
 8015fbc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8015fbe:	79fb      	ldrb	r3, [r7, #7]
 8015fc0:	2b08      	cmp	r3, #8
 8015fc2:	d009      	beq.n	8015fd8 <tcp_kill_state+0x24>
 8015fc4:	79fb      	ldrb	r3, [r7, #7]
 8015fc6:	2b09      	cmp	r3, #9
 8015fc8:	d006      	beq.n	8015fd8 <tcp_kill_state+0x24>
 8015fca:	4b1a      	ldr	r3, [pc, #104]	; (8016034 <tcp_kill_state+0x80>)
 8015fcc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8015fd0:	4919      	ldr	r1, [pc, #100]	; (8016038 <tcp_kill_state+0x84>)
 8015fd2:	481a      	ldr	r0, [pc, #104]	; (801603c <tcp_kill_state+0x88>)
 8015fd4:	f00b fba0 	bl	8021718 <iprintf>

  inactivity = 0;
 8015fd8:	2300      	movs	r3, #0
 8015fda:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015fdc:	2300      	movs	r3, #0
 8015fde:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015fe0:	4b17      	ldr	r3, [pc, #92]	; (8016040 <tcp_kill_state+0x8c>)
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	617b      	str	r3, [r7, #20]
 8015fe6:	e017      	b.n	8016018 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8015fe8:	697b      	ldr	r3, [r7, #20]
 8015fea:	7d1b      	ldrb	r3, [r3, #20]
 8015fec:	79fa      	ldrb	r2, [r7, #7]
 8015fee:	429a      	cmp	r2, r3
 8015ff0:	d10f      	bne.n	8016012 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015ff2:	4b14      	ldr	r3, [pc, #80]	; (8016044 <tcp_kill_state+0x90>)
 8015ff4:	681a      	ldr	r2, [r3, #0]
 8015ff6:	697b      	ldr	r3, [r7, #20]
 8015ff8:	6a1b      	ldr	r3, [r3, #32]
 8015ffa:	1ad3      	subs	r3, r2, r3
 8015ffc:	68fa      	ldr	r2, [r7, #12]
 8015ffe:	429a      	cmp	r2, r3
 8016000:	d807      	bhi.n	8016012 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8016002:	4b10      	ldr	r3, [pc, #64]	; (8016044 <tcp_kill_state+0x90>)
 8016004:	681a      	ldr	r2, [r3, #0]
 8016006:	697b      	ldr	r3, [r7, #20]
 8016008:	6a1b      	ldr	r3, [r3, #32]
 801600a:	1ad3      	subs	r3, r2, r3
 801600c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801600e:	697b      	ldr	r3, [r7, #20]
 8016010:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016012:	697b      	ldr	r3, [r7, #20]
 8016014:	68db      	ldr	r3, [r3, #12]
 8016016:	617b      	str	r3, [r7, #20]
 8016018:	697b      	ldr	r3, [r7, #20]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d1e4      	bne.n	8015fe8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801601e:	693b      	ldr	r3, [r7, #16]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d003      	beq.n	801602c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8016024:	2100      	movs	r1, #0
 8016026:	6938      	ldr	r0, [r7, #16]
 8016028:	f7fe ff74 	bl	8014f14 <tcp_abandon>
  }
}
 801602c:	bf00      	nop
 801602e:	3718      	adds	r7, #24
 8016030:	46bd      	mov	sp, r7
 8016032:	bd80      	pop	{r7, pc}
 8016034:	08024eec 	.word	0x08024eec
 8016038:	08025478 	.word	0x08025478
 801603c:	08024f30 	.word	0x08024f30
 8016040:	2001235c 	.word	0x2001235c
 8016044:	20012350 	.word	0x20012350

08016048 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8016048:	b580      	push	{r7, lr}
 801604a:	b084      	sub	sp, #16
 801604c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801604e:	2300      	movs	r3, #0
 8016050:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8016052:	2300      	movs	r3, #0
 8016054:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016056:	4b12      	ldr	r3, [pc, #72]	; (80160a0 <tcp_kill_timewait+0x58>)
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	60fb      	str	r3, [r7, #12]
 801605c:	e012      	b.n	8016084 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801605e:	4b11      	ldr	r3, [pc, #68]	; (80160a4 <tcp_kill_timewait+0x5c>)
 8016060:	681a      	ldr	r2, [r3, #0]
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	6a1b      	ldr	r3, [r3, #32]
 8016066:	1ad3      	subs	r3, r2, r3
 8016068:	687a      	ldr	r2, [r7, #4]
 801606a:	429a      	cmp	r2, r3
 801606c:	d807      	bhi.n	801607e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801606e:	4b0d      	ldr	r3, [pc, #52]	; (80160a4 <tcp_kill_timewait+0x5c>)
 8016070:	681a      	ldr	r2, [r3, #0]
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	6a1b      	ldr	r3, [r3, #32]
 8016076:	1ad3      	subs	r3, r2, r3
 8016078:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	68db      	ldr	r3, [r3, #12]
 8016082:	60fb      	str	r3, [r7, #12]
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d1e9      	bne.n	801605e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801608a:	68bb      	ldr	r3, [r7, #8]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d002      	beq.n	8016096 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016090:	68b8      	ldr	r0, [r7, #8]
 8016092:	f7fe fffd 	bl	8015090 <tcp_abort>
  }
}
 8016096:	bf00      	nop
 8016098:	3710      	adds	r7, #16
 801609a:	46bd      	mov	sp, r7
 801609c:	bd80      	pop	{r7, pc}
 801609e:	bf00      	nop
 80160a0:	20012360 	.word	0x20012360
 80160a4:	20012350 	.word	0x20012350

080160a8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b082      	sub	sp, #8
 80160ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80160ae:	4b10      	ldr	r3, [pc, #64]	; (80160f0 <tcp_handle_closepend+0x48>)
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80160b4:	e014      	b.n	80160e0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	68db      	ldr	r3, [r3, #12]
 80160ba:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	8b5b      	ldrh	r3, [r3, #26]
 80160c0:	f003 0308 	and.w	r3, r3, #8
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d009      	beq.n	80160dc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	8b5b      	ldrh	r3, [r3, #26]
 80160cc:	f023 0308 	bic.w	r3, r3, #8
 80160d0:	b29a      	uxth	r2, r3
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80160d6:	6878      	ldr	r0, [r7, #4]
 80160d8:	f7fe fe2a 	bl	8014d30 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80160dc:	683b      	ldr	r3, [r7, #0]
 80160de:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d1e7      	bne.n	80160b6 <tcp_handle_closepend+0xe>
  }
}
 80160e6:	bf00      	nop
 80160e8:	bf00      	nop
 80160ea:	3708      	adds	r7, #8
 80160ec:	46bd      	mov	sp, r7
 80160ee:	bd80      	pop	{r7, pc}
 80160f0:	2001235c 	.word	0x2001235c

080160f4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80160f4:	b580      	push	{r7, lr}
 80160f6:	b084      	sub	sp, #16
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	4603      	mov	r3, r0
 80160fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80160fe:	2001      	movs	r0, #1
 8016100:	f7fd faa0 	bl	8013644 <memp_malloc>
 8016104:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d126      	bne.n	801615a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801610c:	f7ff ffcc 	bl	80160a8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8016110:	f7ff ff9a 	bl	8016048 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016114:	2001      	movs	r0, #1
 8016116:	f7fd fa95 	bl	8013644 <memp_malloc>
 801611a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d11b      	bne.n	801615a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8016122:	2009      	movs	r0, #9
 8016124:	f7ff ff46 	bl	8015fb4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016128:	2001      	movs	r0, #1
 801612a:	f7fd fa8b 	bl	8013644 <memp_malloc>
 801612e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d111      	bne.n	801615a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8016136:	2008      	movs	r0, #8
 8016138:	f7ff ff3c 	bl	8015fb4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801613c:	2001      	movs	r0, #1
 801613e:	f7fd fa81 	bl	8013644 <memp_malloc>
 8016142:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d107      	bne.n	801615a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801614a:	79fb      	ldrb	r3, [r7, #7]
 801614c:	4618      	mov	r0, r3
 801614e:	f7ff fee3 	bl	8015f18 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016152:	2001      	movs	r0, #1
 8016154:	f7fd fa76 	bl	8013644 <memp_malloc>
 8016158:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	2b00      	cmp	r3, #0
 801615e:	d047      	beq.n	80161f0 <tcp_alloc+0xfc>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8016160:	22a4      	movs	r2, #164	; 0xa4
 8016162:	2100      	movs	r1, #0
 8016164:	68f8      	ldr	r0, [r7, #12]
 8016166:	f00b fced 	bl	8021b44 <memset>
    pcb->prio = prio;
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	79fa      	ldrb	r2, [r7, #7]
 801616e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8016176:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016180:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	22ff      	movs	r2, #255	; 0xff
 801618e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016196:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	2206      	movs	r2, #6
 801619c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	2206      	movs	r2, #6
 80161a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80161ac:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	2201      	movs	r2, #1
 80161b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80161b6:	4b11      	ldr	r3, [pc, #68]	; (80161fc <tcp_alloc+0x108>)
 80161b8:	681a      	ldr	r2, [r3, #0]
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80161be:	4b10      	ldr	r3, [pc, #64]	; (8016200 <tcp_alloc+0x10c>)
 80161c0:	781a      	ldrb	r2, [r3, #0]
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80161cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	4a0c      	ldr	r2, [pc, #48]	; (8016204 <tcp_alloc+0x110>)
 80161d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	4a0b      	ldr	r2, [pc, #44]	; (8016208 <tcp_alloc+0x114>)
 80161dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	4a0a      	ldr	r2, [pc, #40]	; (801620c <tcp_alloc+0x118>)
 80161e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	2209      	movs	r2, #9
 80161ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80161f0:	68fb      	ldr	r3, [r7, #12]
}
 80161f2:	4618      	mov	r0, r3
 80161f4:	3710      	adds	r7, #16
 80161f6:	46bd      	mov	sp, r7
 80161f8:	bd80      	pop	{r7, pc}
 80161fa:	bf00      	nop
 80161fc:	20012350 	.word	0x20012350
 8016200:	20012366 	.word	0x20012366
 8016204:	08015ead 	.word	0x08015ead
 8016208:	006ddd00 	.word	0x006ddd00
 801620c:	000124f8 	.word	0x000124f8

08016210 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8016210:	b580      	push	{r7, lr}
 8016212:	b084      	sub	sp, #16
 8016214:	af00      	add	r7, sp, #0
 8016216:	4603      	mov	r3, r0
 8016218:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801621a:	2040      	movs	r0, #64	; 0x40
 801621c:	f7ff ff6a 	bl	80160f4 <tcp_alloc>
 8016220:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016222:	68fb      	ldr	r3, [r7, #12]
}
 8016224:	4618      	mov	r0, r3
 8016226:	3710      	adds	r7, #16
 8016228:	46bd      	mov	sp, r7
 801622a:	bd80      	pop	{r7, pc}

0801622c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801622c:	b480      	push	{r7}
 801622e:	b083      	sub	sp, #12
 8016230:	af00      	add	r7, sp, #0
 8016232:	6078      	str	r0, [r7, #4]
 8016234:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d002      	beq.n	8016242 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	683a      	ldr	r2, [r7, #0]
 8016240:	611a      	str	r2, [r3, #16]
  }
}
 8016242:	bf00      	nop
 8016244:	370c      	adds	r7, #12
 8016246:	46bd      	mov	sp, r7
 8016248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801624c:	4770      	bx	lr
	...

08016250 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8016250:	b580      	push	{r7, lr}
 8016252:	b082      	sub	sp, #8
 8016254:	af00      	add	r7, sp, #0
 8016256:	6078      	str	r0, [r7, #4]
 8016258:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d00e      	beq.n	801627e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	7d1b      	ldrb	r3, [r3, #20]
 8016264:	2b01      	cmp	r3, #1
 8016266:	d106      	bne.n	8016276 <tcp_recv+0x26>
 8016268:	4b07      	ldr	r3, [pc, #28]	; (8016288 <tcp_recv+0x38>)
 801626a:	f240 72df 	movw	r2, #2015	; 0x7df
 801626e:	4907      	ldr	r1, [pc, #28]	; (801628c <tcp_recv+0x3c>)
 8016270:	4807      	ldr	r0, [pc, #28]	; (8016290 <tcp_recv+0x40>)
 8016272:	f00b fa51 	bl	8021718 <iprintf>
    pcb->recv = recv;
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	683a      	ldr	r2, [r7, #0]
 801627a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801627e:	bf00      	nop
 8016280:	3708      	adds	r7, #8
 8016282:	46bd      	mov	sp, r7
 8016284:	bd80      	pop	{r7, pc}
 8016286:	bf00      	nop
 8016288:	08024eec 	.word	0x08024eec
 801628c:	08025488 	.word	0x08025488
 8016290:	08024f30 	.word	0x08024f30

08016294 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b082      	sub	sp, #8
 8016298:	af00      	add	r7, sp, #0
 801629a:	6078      	str	r0, [r7, #4]
 801629c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d00e      	beq.n	80162c2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	7d1b      	ldrb	r3, [r3, #20]
 80162a8:	2b01      	cmp	r3, #1
 80162aa:	d106      	bne.n	80162ba <tcp_sent+0x26>
 80162ac:	4b07      	ldr	r3, [pc, #28]	; (80162cc <tcp_sent+0x38>)
 80162ae:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80162b2:	4907      	ldr	r1, [pc, #28]	; (80162d0 <tcp_sent+0x3c>)
 80162b4:	4807      	ldr	r0, [pc, #28]	; (80162d4 <tcp_sent+0x40>)
 80162b6:	f00b fa2f 	bl	8021718 <iprintf>
    pcb->sent = sent;
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	683a      	ldr	r2, [r7, #0]
 80162be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80162c2:	bf00      	nop
 80162c4:	3708      	adds	r7, #8
 80162c6:	46bd      	mov	sp, r7
 80162c8:	bd80      	pop	{r7, pc}
 80162ca:	bf00      	nop
 80162cc:	08024eec 	.word	0x08024eec
 80162d0:	080254b0 	.word	0x080254b0
 80162d4:	08024f30 	.word	0x08024f30

080162d8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	b082      	sub	sp, #8
 80162dc:	af00      	add	r7, sp, #0
 80162de:	6078      	str	r0, [r7, #4]
 80162e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d00e      	beq.n	8016306 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	7d1b      	ldrb	r3, [r3, #20]
 80162ec:	2b01      	cmp	r3, #1
 80162ee:	d106      	bne.n	80162fe <tcp_err+0x26>
 80162f0:	4b07      	ldr	r3, [pc, #28]	; (8016310 <tcp_err+0x38>)
 80162f2:	f640 020d 	movw	r2, #2061	; 0x80d
 80162f6:	4907      	ldr	r1, [pc, #28]	; (8016314 <tcp_err+0x3c>)
 80162f8:	4807      	ldr	r0, [pc, #28]	; (8016318 <tcp_err+0x40>)
 80162fa:	f00b fa0d 	bl	8021718 <iprintf>
    pcb->errf = err;
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	683a      	ldr	r2, [r7, #0]
 8016302:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8016306:	bf00      	nop
 8016308:	3708      	adds	r7, #8
 801630a:	46bd      	mov	sp, r7
 801630c:	bd80      	pop	{r7, pc}
 801630e:	bf00      	nop
 8016310:	08024eec 	.word	0x08024eec
 8016314:	080254d8 	.word	0x080254d8
 8016318:	08024f30 	.word	0x08024f30

0801631c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801631c:	b480      	push	{r7}
 801631e:	b085      	sub	sp, #20
 8016320:	af00      	add	r7, sp, #0
 8016322:	6078      	str	r0, [r7, #4]
 8016324:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d008      	beq.n	801633e <tcp_accept+0x22>
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	7d1b      	ldrb	r3, [r3, #20]
 8016330:	2b01      	cmp	r3, #1
 8016332:	d104      	bne.n	801633e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	683a      	ldr	r2, [r7, #0]
 801633c:	619a      	str	r2, [r3, #24]
  }
}
 801633e:	bf00      	nop
 8016340:	3714      	adds	r7, #20
 8016342:	46bd      	mov	sp, r7
 8016344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016348:	4770      	bx	lr
	...

0801634c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b084      	sub	sp, #16
 8016350:	af00      	add	r7, sp, #0
 8016352:	60f8      	str	r0, [r7, #12]
 8016354:	60b9      	str	r1, [r7, #8]
 8016356:	4613      	mov	r3, r2
 8016358:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d107      	bne.n	8016370 <tcp_poll+0x24>
 8016360:	4b0e      	ldr	r3, [pc, #56]	; (801639c <tcp_poll+0x50>)
 8016362:	f640 023d 	movw	r2, #2109	; 0x83d
 8016366:	490e      	ldr	r1, [pc, #56]	; (80163a0 <tcp_poll+0x54>)
 8016368:	480e      	ldr	r0, [pc, #56]	; (80163a4 <tcp_poll+0x58>)
 801636a:	f00b f9d5 	bl	8021718 <iprintf>
 801636e:	e011      	b.n	8016394 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	7d1b      	ldrb	r3, [r3, #20]
 8016374:	2b01      	cmp	r3, #1
 8016376:	d106      	bne.n	8016386 <tcp_poll+0x3a>
 8016378:	4b08      	ldr	r3, [pc, #32]	; (801639c <tcp_poll+0x50>)
 801637a:	f640 023e 	movw	r2, #2110	; 0x83e
 801637e:	490a      	ldr	r1, [pc, #40]	; (80163a8 <tcp_poll+0x5c>)
 8016380:	4808      	ldr	r0, [pc, #32]	; (80163a4 <tcp_poll+0x58>)
 8016382:	f00b f9c9 	bl	8021718 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	68ba      	ldr	r2, [r7, #8]
 801638a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	79fa      	ldrb	r2, [r7, #7]
 8016392:	775a      	strb	r2, [r3, #29]
}
 8016394:	3710      	adds	r7, #16
 8016396:	46bd      	mov	sp, r7
 8016398:	bd80      	pop	{r7, pc}
 801639a:	bf00      	nop
 801639c:	08024eec 	.word	0x08024eec
 80163a0:	08025500 	.word	0x08025500
 80163a4:	08024f30 	.word	0x08024f30
 80163a8:	08025518 	.word	0x08025518

080163ac <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80163ac:	b580      	push	{r7, lr}
 80163ae:	b082      	sub	sp, #8
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d107      	bne.n	80163ca <tcp_pcb_purge+0x1e>
 80163ba:	4b21      	ldr	r3, [pc, #132]	; (8016440 <tcp_pcb_purge+0x94>)
 80163bc:	f640 0251 	movw	r2, #2129	; 0x851
 80163c0:	4920      	ldr	r1, [pc, #128]	; (8016444 <tcp_pcb_purge+0x98>)
 80163c2:	4821      	ldr	r0, [pc, #132]	; (8016448 <tcp_pcb_purge+0x9c>)
 80163c4:	f00b f9a8 	bl	8021718 <iprintf>
 80163c8:	e037      	b.n	801643a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	7d1b      	ldrb	r3, [r3, #20]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d033      	beq.n	801643a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80163d6:	2b0a      	cmp	r3, #10
 80163d8:	d02f      	beq.n	801643a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80163de:	2b01      	cmp	r3, #1
 80163e0:	d02b      	beq.n	801643a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d007      	beq.n	80163fa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80163ee:	4618      	mov	r0, r3
 80163f0:	f7fe f84e 	bl	8014490 <pbuf_free>
      pcb->refused_data = NULL;
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	2200      	movs	r2, #0
 80163f8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d002      	beq.n	8016408 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8016402:	6878      	ldr	r0, [r7, #4]
 8016404:	f000 f986 	bl	8016714 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801640e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016414:	4618      	mov	r0, r3
 8016416:	f7ff fcef 	bl	8015df8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801641e:	4618      	mov	r0, r3
 8016420:	f7ff fcea 	bl	8015df8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	2200      	movs	r2, #0
 8016428:	66da      	str	r2, [r3, #108]	; 0x6c
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	2200      	movs	r2, #0
 8016436:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801643a:	3708      	adds	r7, #8
 801643c:	46bd      	mov	sp, r7
 801643e:	bd80      	pop	{r7, pc}
 8016440:	08024eec 	.word	0x08024eec
 8016444:	08025538 	.word	0x08025538
 8016448:	08024f30 	.word	0x08024f30

0801644c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801644c:	b580      	push	{r7, lr}
 801644e:	b084      	sub	sp, #16
 8016450:	af00      	add	r7, sp, #0
 8016452:	6078      	str	r0, [r7, #4]
 8016454:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8016456:	683b      	ldr	r3, [r7, #0]
 8016458:	2b00      	cmp	r3, #0
 801645a:	d106      	bne.n	801646a <tcp_pcb_remove+0x1e>
 801645c:	4b3e      	ldr	r3, [pc, #248]	; (8016558 <tcp_pcb_remove+0x10c>)
 801645e:	f640 0283 	movw	r2, #2179	; 0x883
 8016462:	493e      	ldr	r1, [pc, #248]	; (801655c <tcp_pcb_remove+0x110>)
 8016464:	483e      	ldr	r0, [pc, #248]	; (8016560 <tcp_pcb_remove+0x114>)
 8016466:	f00b f957 	bl	8021718 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	2b00      	cmp	r3, #0
 801646e:	d106      	bne.n	801647e <tcp_pcb_remove+0x32>
 8016470:	4b39      	ldr	r3, [pc, #228]	; (8016558 <tcp_pcb_remove+0x10c>)
 8016472:	f640 0284 	movw	r2, #2180	; 0x884
 8016476:	493b      	ldr	r1, [pc, #236]	; (8016564 <tcp_pcb_remove+0x118>)
 8016478:	4839      	ldr	r0, [pc, #228]	; (8016560 <tcp_pcb_remove+0x114>)
 801647a:	f00b f94d 	bl	8021718 <iprintf>

  TCP_RMV(pcblist, pcb);
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	683a      	ldr	r2, [r7, #0]
 8016484:	429a      	cmp	r2, r3
 8016486:	d105      	bne.n	8016494 <tcp_pcb_remove+0x48>
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	68da      	ldr	r2, [r3, #12]
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	601a      	str	r2, [r3, #0]
 8016492:	e013      	b.n	80164bc <tcp_pcb_remove+0x70>
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	60fb      	str	r3, [r7, #12]
 801649a:	e00c      	b.n	80164b6 <tcp_pcb_remove+0x6a>
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	68db      	ldr	r3, [r3, #12]
 80164a0:	683a      	ldr	r2, [r7, #0]
 80164a2:	429a      	cmp	r2, r3
 80164a4:	d104      	bne.n	80164b0 <tcp_pcb_remove+0x64>
 80164a6:	683b      	ldr	r3, [r7, #0]
 80164a8:	68da      	ldr	r2, [r3, #12]
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	60da      	str	r2, [r3, #12]
 80164ae:	e005      	b.n	80164bc <tcp_pcb_remove+0x70>
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	68db      	ldr	r3, [r3, #12]
 80164b4:	60fb      	str	r3, [r7, #12]
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d1ef      	bne.n	801649c <tcp_pcb_remove+0x50>
 80164bc:	683b      	ldr	r3, [r7, #0]
 80164be:	2200      	movs	r2, #0
 80164c0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80164c2:	6838      	ldr	r0, [r7, #0]
 80164c4:	f7ff ff72 	bl	80163ac <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80164c8:	683b      	ldr	r3, [r7, #0]
 80164ca:	7d1b      	ldrb	r3, [r3, #20]
 80164cc:	2b0a      	cmp	r3, #10
 80164ce:	d013      	beq.n	80164f8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80164d0:	683b      	ldr	r3, [r7, #0]
 80164d2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80164d4:	2b01      	cmp	r3, #1
 80164d6:	d00f      	beq.n	80164f8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80164d8:	683b      	ldr	r3, [r7, #0]
 80164da:	8b5b      	ldrh	r3, [r3, #26]
 80164dc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d009      	beq.n	80164f8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80164e4:	683b      	ldr	r3, [r7, #0]
 80164e6:	8b5b      	ldrh	r3, [r3, #26]
 80164e8:	f043 0302 	orr.w	r3, r3, #2
 80164ec:	b29a      	uxth	r2, r3
 80164ee:	683b      	ldr	r3, [r7, #0]
 80164f0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80164f2:	6838      	ldr	r0, [r7, #0]
 80164f4:	f003 fbd4 	bl	8019ca0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80164f8:	683b      	ldr	r3, [r7, #0]
 80164fa:	7d1b      	ldrb	r3, [r3, #20]
 80164fc:	2b01      	cmp	r3, #1
 80164fe:	d020      	beq.n	8016542 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8016500:	683b      	ldr	r3, [r7, #0]
 8016502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016504:	2b00      	cmp	r3, #0
 8016506:	d006      	beq.n	8016516 <tcp_pcb_remove+0xca>
 8016508:	4b13      	ldr	r3, [pc, #76]	; (8016558 <tcp_pcb_remove+0x10c>)
 801650a:	f640 0293 	movw	r2, #2195	; 0x893
 801650e:	4916      	ldr	r1, [pc, #88]	; (8016568 <tcp_pcb_remove+0x11c>)
 8016510:	4813      	ldr	r0, [pc, #76]	; (8016560 <tcp_pcb_remove+0x114>)
 8016512:	f00b f901 	bl	8021718 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8016516:	683b      	ldr	r3, [r7, #0]
 8016518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801651a:	2b00      	cmp	r3, #0
 801651c:	d006      	beq.n	801652c <tcp_pcb_remove+0xe0>
 801651e:	4b0e      	ldr	r3, [pc, #56]	; (8016558 <tcp_pcb_remove+0x10c>)
 8016520:	f640 0294 	movw	r2, #2196	; 0x894
 8016524:	4911      	ldr	r1, [pc, #68]	; (801656c <tcp_pcb_remove+0x120>)
 8016526:	480e      	ldr	r0, [pc, #56]	; (8016560 <tcp_pcb_remove+0x114>)
 8016528:	f00b f8f6 	bl	8021718 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801652c:	683b      	ldr	r3, [r7, #0]
 801652e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016530:	2b00      	cmp	r3, #0
 8016532:	d006      	beq.n	8016542 <tcp_pcb_remove+0xf6>
 8016534:	4b08      	ldr	r3, [pc, #32]	; (8016558 <tcp_pcb_remove+0x10c>)
 8016536:	f640 0296 	movw	r2, #2198	; 0x896
 801653a:	490d      	ldr	r1, [pc, #52]	; (8016570 <tcp_pcb_remove+0x124>)
 801653c:	4808      	ldr	r0, [pc, #32]	; (8016560 <tcp_pcb_remove+0x114>)
 801653e:	f00b f8eb 	bl	8021718 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8016542:	683b      	ldr	r3, [r7, #0]
 8016544:	2200      	movs	r2, #0
 8016546:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8016548:	683b      	ldr	r3, [r7, #0]
 801654a:	2200      	movs	r2, #0
 801654c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801654e:	bf00      	nop
 8016550:	3710      	adds	r7, #16
 8016552:	46bd      	mov	sp, r7
 8016554:	bd80      	pop	{r7, pc}
 8016556:	bf00      	nop
 8016558:	08024eec 	.word	0x08024eec
 801655c:	08025554 	.word	0x08025554
 8016560:	08024f30 	.word	0x08024f30
 8016564:	08025570 	.word	0x08025570
 8016568:	08025590 	.word	0x08025590
 801656c:	080255a8 	.word	0x080255a8
 8016570:	080255c4 	.word	0x080255c4

08016574 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8016574:	b580      	push	{r7, lr}
 8016576:	b082      	sub	sp, #8
 8016578:	af00      	add	r7, sp, #0
 801657a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d106      	bne.n	8016590 <tcp_next_iss+0x1c>
 8016582:	4b0a      	ldr	r3, [pc, #40]	; (80165ac <tcp_next_iss+0x38>)
 8016584:	f640 02af 	movw	r2, #2223	; 0x8af
 8016588:	4909      	ldr	r1, [pc, #36]	; (80165b0 <tcp_next_iss+0x3c>)
 801658a:	480a      	ldr	r0, [pc, #40]	; (80165b4 <tcp_next_iss+0x40>)
 801658c:	f00b f8c4 	bl	8021718 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8016590:	4b09      	ldr	r3, [pc, #36]	; (80165b8 <tcp_next_iss+0x44>)
 8016592:	681a      	ldr	r2, [r3, #0]
 8016594:	4b09      	ldr	r3, [pc, #36]	; (80165bc <tcp_next_iss+0x48>)
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	4413      	add	r3, r2
 801659a:	4a07      	ldr	r2, [pc, #28]	; (80165b8 <tcp_next_iss+0x44>)
 801659c:	6013      	str	r3, [r2, #0]
  return iss;
 801659e:	4b06      	ldr	r3, [pc, #24]	; (80165b8 <tcp_next_iss+0x44>)
 80165a0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80165a2:	4618      	mov	r0, r3
 80165a4:	3708      	adds	r7, #8
 80165a6:	46bd      	mov	sp, r7
 80165a8:	bd80      	pop	{r7, pc}
 80165aa:	bf00      	nop
 80165ac:	08024eec 	.word	0x08024eec
 80165b0:	080255dc 	.word	0x080255dc
 80165b4:	08024f30 	.word	0x08024f30
 80165b8:	20000028 	.word	0x20000028
 80165bc:	20012350 	.word	0x20012350

080165c0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80165c0:	b580      	push	{r7, lr}
 80165c2:	b086      	sub	sp, #24
 80165c4:	af00      	add	r7, sp, #0
 80165c6:	4603      	mov	r3, r0
 80165c8:	60b9      	str	r1, [r7, #8]
 80165ca:	607a      	str	r2, [r7, #4]
 80165cc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d106      	bne.n	80165e2 <tcp_eff_send_mss_netif+0x22>
 80165d4:	4b14      	ldr	r3, [pc, #80]	; (8016628 <tcp_eff_send_mss_netif+0x68>)
 80165d6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80165da:	4914      	ldr	r1, [pc, #80]	; (801662c <tcp_eff_send_mss_netif+0x6c>)
 80165dc:	4814      	ldr	r0, [pc, #80]	; (8016630 <tcp_eff_send_mss_netif+0x70>)
 80165de:	f00b f89b 	bl	8021718 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80165e2:	68bb      	ldr	r3, [r7, #8]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d101      	bne.n	80165ec <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80165e8:	89fb      	ldrh	r3, [r7, #14]
 80165ea:	e019      	b.n	8016620 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80165ec:	68bb      	ldr	r3, [r7, #8]
 80165ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80165f0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80165f2:	8afb      	ldrh	r3, [r7, #22]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d012      	beq.n	801661e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80165f8:	2328      	movs	r3, #40	; 0x28
 80165fa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80165fc:	8afa      	ldrh	r2, [r7, #22]
 80165fe:	8abb      	ldrh	r3, [r7, #20]
 8016600:	429a      	cmp	r2, r3
 8016602:	d904      	bls.n	801660e <tcp_eff_send_mss_netif+0x4e>
 8016604:	8afa      	ldrh	r2, [r7, #22]
 8016606:	8abb      	ldrh	r3, [r7, #20]
 8016608:	1ad3      	subs	r3, r2, r3
 801660a:	b29b      	uxth	r3, r3
 801660c:	e000      	b.n	8016610 <tcp_eff_send_mss_netif+0x50>
 801660e:	2300      	movs	r3, #0
 8016610:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8016612:	8a7a      	ldrh	r2, [r7, #18]
 8016614:	89fb      	ldrh	r3, [r7, #14]
 8016616:	4293      	cmp	r3, r2
 8016618:	bf28      	it	cs
 801661a:	4613      	movcs	r3, r2
 801661c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801661e:	89fb      	ldrh	r3, [r7, #14]
}
 8016620:	4618      	mov	r0, r3
 8016622:	3718      	adds	r7, #24
 8016624:	46bd      	mov	sp, r7
 8016626:	bd80      	pop	{r7, pc}
 8016628:	08024eec 	.word	0x08024eec
 801662c:	080255f8 	.word	0x080255f8
 8016630:	08024f30 	.word	0x08024f30

08016634 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8016634:	b580      	push	{r7, lr}
 8016636:	b084      	sub	sp, #16
 8016638:	af00      	add	r7, sp, #0
 801663a:	6078      	str	r0, [r7, #4]
 801663c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801663e:	683b      	ldr	r3, [r7, #0]
 8016640:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d119      	bne.n	801667c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8016648:	4b10      	ldr	r3, [pc, #64]	; (801668c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801664a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801664e:	4910      	ldr	r1, [pc, #64]	; (8016690 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8016650:	4810      	ldr	r0, [pc, #64]	; (8016694 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8016652:	f00b f861 	bl	8021718 <iprintf>

  while (pcb != NULL) {
 8016656:	e011      	b.n	801667c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8016658:	68fb      	ldr	r3, [r7, #12]
 801665a:	681a      	ldr	r2, [r3, #0]
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	429a      	cmp	r2, r3
 8016662:	d108      	bne.n	8016676 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	68db      	ldr	r3, [r3, #12]
 8016668:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801666a:	68f8      	ldr	r0, [r7, #12]
 801666c:	f7fe fd10 	bl	8015090 <tcp_abort>
      pcb = next;
 8016670:	68bb      	ldr	r3, [r7, #8]
 8016672:	60fb      	str	r3, [r7, #12]
 8016674:	e002      	b.n	801667c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	68db      	ldr	r3, [r3, #12]
 801667a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d1ea      	bne.n	8016658 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8016682:	bf00      	nop
 8016684:	bf00      	nop
 8016686:	3710      	adds	r7, #16
 8016688:	46bd      	mov	sp, r7
 801668a:	bd80      	pop	{r7, pc}
 801668c:	08024eec 	.word	0x08024eec
 8016690:	08025620 	.word	0x08025620
 8016694:	08024f30 	.word	0x08024f30

08016698 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b084      	sub	sp, #16
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
 80166a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d02a      	beq.n	80166fe <tcp_netif_ip_addr_changed+0x66>
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d026      	beq.n	80166fe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80166b0:	4b15      	ldr	r3, [pc, #84]	; (8016708 <tcp_netif_ip_addr_changed+0x70>)
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	4619      	mov	r1, r3
 80166b6:	6878      	ldr	r0, [r7, #4]
 80166b8:	f7ff ffbc 	bl	8016634 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80166bc:	4b13      	ldr	r3, [pc, #76]	; (801670c <tcp_netif_ip_addr_changed+0x74>)
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	4619      	mov	r1, r3
 80166c2:	6878      	ldr	r0, [r7, #4]
 80166c4:	f7ff ffb6 	bl	8016634 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80166c8:	683b      	ldr	r3, [r7, #0]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d017      	beq.n	80166fe <tcp_netif_ip_addr_changed+0x66>
 80166ce:	683b      	ldr	r3, [r7, #0]
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d013      	beq.n	80166fe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80166d6:	4b0e      	ldr	r3, [pc, #56]	; (8016710 <tcp_netif_ip_addr_changed+0x78>)
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	60fb      	str	r3, [r7, #12]
 80166dc:	e00c      	b.n	80166f8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	681a      	ldr	r2, [r3, #0]
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	429a      	cmp	r2, r3
 80166e8:	d103      	bne.n	80166f2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80166ea:	683b      	ldr	r3, [r7, #0]
 80166ec:	681a      	ldr	r2, [r3, #0]
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	68db      	ldr	r3, [r3, #12]
 80166f6:	60fb      	str	r3, [r7, #12]
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d1ef      	bne.n	80166de <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80166fe:	bf00      	nop
 8016700:	3710      	adds	r7, #16
 8016702:	46bd      	mov	sp, r7
 8016704:	bd80      	pop	{r7, pc}
 8016706:	bf00      	nop
 8016708:	2001235c 	.word	0x2001235c
 801670c:	20012354 	.word	0x20012354
 8016710:	20012358 	.word	0x20012358

08016714 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8016714:	b580      	push	{r7, lr}
 8016716:	b082      	sub	sp, #8
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016720:	2b00      	cmp	r3, #0
 8016722:	d007      	beq.n	8016734 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016728:	4618      	mov	r0, r3
 801672a:	f7ff fb65 	bl	8015df8 <tcp_segs_free>
    pcb->ooseq = NULL;
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	2200      	movs	r2, #0
 8016732:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8016734:	bf00      	nop
 8016736:	3708      	adds	r7, #8
 8016738:	46bd      	mov	sp, r7
 801673a:	bd80      	pop	{r7, pc}

0801673c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801673c:	b590      	push	{r4, r7, lr}
 801673e:	b08f      	sub	sp, #60	; 0x3c
 8016740:	af04      	add	r7, sp, #16
 8016742:	6078      	str	r0, [r7, #4]
 8016744:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb, *prev;
  struct tcp_pcb_listen *lpcb;
#if SO_REUSE
  struct tcp_pcb *lpcb_prev = NULL;
 8016746:	2300      	movs	r3, #0
 8016748:	61bb      	str	r3, [r7, #24]
  struct tcp_pcb_listen *lpcb_any = NULL;
 801674a:	2300      	movs	r3, #0
 801674c:	617b      	str	r3, [r7, #20]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d105      	bne.n	8016760 <tcp_input+0x24>
 8016754:	4b9b      	ldr	r3, [pc, #620]	; (80169c4 <tcp_input+0x288>)
 8016756:	2283      	movs	r2, #131	; 0x83
 8016758:	499b      	ldr	r1, [pc, #620]	; (80169c8 <tcp_input+0x28c>)
 801675a:	489c      	ldr	r0, [pc, #624]	; (80169cc <tcp_input+0x290>)
 801675c:	f00a ffdc 	bl	8021718 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	685b      	ldr	r3, [r3, #4]
 8016764:	4a9a      	ldr	r2, [pc, #616]	; (80169d0 <tcp_input+0x294>)
 8016766:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	895b      	ldrh	r3, [r3, #10]
 801676c:	2b13      	cmp	r3, #19
 801676e:	f240 83db 	bls.w	8016f28 <tcp_input+0x7ec>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016772:	4b98      	ldr	r3, [pc, #608]	; (80169d4 <tcp_input+0x298>)
 8016774:	695b      	ldr	r3, [r3, #20]
 8016776:	4a97      	ldr	r2, [pc, #604]	; (80169d4 <tcp_input+0x298>)
 8016778:	6812      	ldr	r2, [r2, #0]
 801677a:	4611      	mov	r1, r2
 801677c:	4618      	mov	r0, r3
 801677e:	f008 fa83 	bl	801ec88 <ip4_addr_isbroadcast_u32>
 8016782:	4603      	mov	r3, r0
 8016784:	2b00      	cmp	r3, #0
 8016786:	f040 83d1 	bne.w	8016f2c <tcp_input+0x7f0>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801678a:	4b92      	ldr	r3, [pc, #584]	; (80169d4 <tcp_input+0x298>)
 801678c:	695b      	ldr	r3, [r3, #20]
 801678e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016792:	2be0      	cmp	r3, #224	; 0xe0
 8016794:	f000 83ca 	beq.w	8016f2c <tcp_input+0x7f0>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8016798:	4b8d      	ldr	r3, [pc, #564]	; (80169d0 <tcp_input+0x294>)
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	899b      	ldrh	r3, [r3, #12]
 801679e:	b29b      	uxth	r3, r3
 80167a0:	4618      	mov	r0, r3
 80167a2:	f7fc fa77 	bl	8012c94 <lwip_htons>
 80167a6:	4603      	mov	r3, r0
 80167a8:	0b1b      	lsrs	r3, r3, #12
 80167aa:	b29b      	uxth	r3, r3
 80167ac:	b2db      	uxtb	r3, r3
 80167ae:	009b      	lsls	r3, r3, #2
 80167b0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80167b2:	7cbb      	ldrb	r3, [r7, #18]
 80167b4:	2b13      	cmp	r3, #19
 80167b6:	f240 83bb 	bls.w	8016f30 <tcp_input+0x7f4>
 80167ba:	7cbb      	ldrb	r3, [r7, #18]
 80167bc:	b29a      	uxth	r2, r3
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	891b      	ldrh	r3, [r3, #8]
 80167c2:	429a      	cmp	r2, r3
 80167c4:	f200 83b4 	bhi.w	8016f30 <tcp_input+0x7f4>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80167c8:	7cbb      	ldrb	r3, [r7, #18]
 80167ca:	b29b      	uxth	r3, r3
 80167cc:	3b14      	subs	r3, #20
 80167ce:	b29a      	uxth	r2, r3
 80167d0:	4b81      	ldr	r3, [pc, #516]	; (80169d8 <tcp_input+0x29c>)
 80167d2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80167d4:	4b81      	ldr	r3, [pc, #516]	; (80169dc <tcp_input+0x2a0>)
 80167d6:	2200      	movs	r2, #0
 80167d8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	895a      	ldrh	r2, [r3, #10]
 80167de:	7cbb      	ldrb	r3, [r7, #18]
 80167e0:	b29b      	uxth	r3, r3
 80167e2:	429a      	cmp	r2, r3
 80167e4:	d309      	bcc.n	80167fa <tcp_input+0xbe>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80167e6:	4b7c      	ldr	r3, [pc, #496]	; (80169d8 <tcp_input+0x29c>)
 80167e8:	881a      	ldrh	r2, [r3, #0]
 80167ea:	4b7d      	ldr	r3, [pc, #500]	; (80169e0 <tcp_input+0x2a4>)
 80167ec:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80167ee:	7cbb      	ldrb	r3, [r7, #18]
 80167f0:	4619      	mov	r1, r3
 80167f2:	6878      	ldr	r0, [r7, #4]
 80167f4:	f7fd fdc6 	bl	8014384 <pbuf_remove_header>
 80167f8:	e04e      	b.n	8016898 <tcp_input+0x15c>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d105      	bne.n	801680e <tcp_input+0xd2>
 8016802:	4b70      	ldr	r3, [pc, #448]	; (80169c4 <tcp_input+0x288>)
 8016804:	22c2      	movs	r2, #194	; 0xc2
 8016806:	4977      	ldr	r1, [pc, #476]	; (80169e4 <tcp_input+0x2a8>)
 8016808:	4870      	ldr	r0, [pc, #448]	; (80169cc <tcp_input+0x290>)
 801680a:	f00a ff85 	bl	8021718 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801680e:	2114      	movs	r1, #20
 8016810:	6878      	ldr	r0, [r7, #4]
 8016812:	f7fd fdb7 	bl	8014384 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	895a      	ldrh	r2, [r3, #10]
 801681a:	4b71      	ldr	r3, [pc, #452]	; (80169e0 <tcp_input+0x2a4>)
 801681c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801681e:	4b6e      	ldr	r3, [pc, #440]	; (80169d8 <tcp_input+0x29c>)
 8016820:	881a      	ldrh	r2, [r3, #0]
 8016822:	4b6f      	ldr	r3, [pc, #444]	; (80169e0 <tcp_input+0x2a4>)
 8016824:	881b      	ldrh	r3, [r3, #0]
 8016826:	1ad3      	subs	r3, r2, r3
 8016828:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801682a:	4b6d      	ldr	r3, [pc, #436]	; (80169e0 <tcp_input+0x2a4>)
 801682c:	881b      	ldrh	r3, [r3, #0]
 801682e:	4619      	mov	r1, r3
 8016830:	6878      	ldr	r0, [r7, #4]
 8016832:	f7fd fda7 	bl	8014384 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	895b      	ldrh	r3, [r3, #10]
 801683c:	8a3a      	ldrh	r2, [r7, #16]
 801683e:	429a      	cmp	r2, r3
 8016840:	f200 8378 	bhi.w	8016f34 <tcp_input+0x7f8>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	685b      	ldr	r3, [r3, #4]
 801684a:	4a64      	ldr	r2, [pc, #400]	; (80169dc <tcp_input+0x2a0>)
 801684c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	8a3a      	ldrh	r2, [r7, #16]
 8016854:	4611      	mov	r1, r2
 8016856:	4618      	mov	r0, r3
 8016858:	f7fd fd94 	bl	8014384 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	891a      	ldrh	r2, [r3, #8]
 8016860:	8a3b      	ldrh	r3, [r7, #16]
 8016862:	1ad3      	subs	r3, r2, r3
 8016864:	b29a      	uxth	r2, r3
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	895b      	ldrh	r3, [r3, #10]
 801686e:	2b00      	cmp	r3, #0
 8016870:	d005      	beq.n	801687e <tcp_input+0x142>
 8016872:	4b54      	ldr	r3, [pc, #336]	; (80169c4 <tcp_input+0x288>)
 8016874:	22df      	movs	r2, #223	; 0xdf
 8016876:	495c      	ldr	r1, [pc, #368]	; (80169e8 <tcp_input+0x2ac>)
 8016878:	4854      	ldr	r0, [pc, #336]	; (80169cc <tcp_input+0x290>)
 801687a:	f00a ff4d 	bl	8021718 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	891a      	ldrh	r2, [r3, #8]
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	891b      	ldrh	r3, [r3, #8]
 8016888:	429a      	cmp	r2, r3
 801688a:	d005      	beq.n	8016898 <tcp_input+0x15c>
 801688c:	4b4d      	ldr	r3, [pc, #308]	; (80169c4 <tcp_input+0x288>)
 801688e:	22e0      	movs	r2, #224	; 0xe0
 8016890:	4956      	ldr	r1, [pc, #344]	; (80169ec <tcp_input+0x2b0>)
 8016892:	484e      	ldr	r0, [pc, #312]	; (80169cc <tcp_input+0x290>)
 8016894:	f00a ff40 	bl	8021718 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8016898:	4b4d      	ldr	r3, [pc, #308]	; (80169d0 <tcp_input+0x294>)
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	881b      	ldrh	r3, [r3, #0]
 801689e:	b29b      	uxth	r3, r3
 80168a0:	4a4b      	ldr	r2, [pc, #300]	; (80169d0 <tcp_input+0x294>)
 80168a2:	6814      	ldr	r4, [r2, #0]
 80168a4:	4618      	mov	r0, r3
 80168a6:	f7fc f9f5 	bl	8012c94 <lwip_htons>
 80168aa:	4603      	mov	r3, r0
 80168ac:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80168ae:	4b48      	ldr	r3, [pc, #288]	; (80169d0 <tcp_input+0x294>)
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	885b      	ldrh	r3, [r3, #2]
 80168b4:	b29b      	uxth	r3, r3
 80168b6:	4a46      	ldr	r2, [pc, #280]	; (80169d0 <tcp_input+0x294>)
 80168b8:	6814      	ldr	r4, [r2, #0]
 80168ba:	4618      	mov	r0, r3
 80168bc:	f7fc f9ea 	bl	8012c94 <lwip_htons>
 80168c0:	4603      	mov	r3, r0
 80168c2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80168c4:	4b42      	ldr	r3, [pc, #264]	; (80169d0 <tcp_input+0x294>)
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	685b      	ldr	r3, [r3, #4]
 80168ca:	4a41      	ldr	r2, [pc, #260]	; (80169d0 <tcp_input+0x294>)
 80168cc:	6814      	ldr	r4, [r2, #0]
 80168ce:	4618      	mov	r0, r3
 80168d0:	f7fc f9f5 	bl	8012cbe <lwip_htonl>
 80168d4:	4603      	mov	r3, r0
 80168d6:	6063      	str	r3, [r4, #4]
 80168d8:	6863      	ldr	r3, [r4, #4]
 80168da:	4a45      	ldr	r2, [pc, #276]	; (80169f0 <tcp_input+0x2b4>)
 80168dc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80168de:	4b3c      	ldr	r3, [pc, #240]	; (80169d0 <tcp_input+0x294>)
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	689b      	ldr	r3, [r3, #8]
 80168e4:	4a3a      	ldr	r2, [pc, #232]	; (80169d0 <tcp_input+0x294>)
 80168e6:	6814      	ldr	r4, [r2, #0]
 80168e8:	4618      	mov	r0, r3
 80168ea:	f7fc f9e8 	bl	8012cbe <lwip_htonl>
 80168ee:	4603      	mov	r3, r0
 80168f0:	60a3      	str	r3, [r4, #8]
 80168f2:	68a3      	ldr	r3, [r4, #8]
 80168f4:	4a3f      	ldr	r2, [pc, #252]	; (80169f4 <tcp_input+0x2b8>)
 80168f6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80168f8:	4b35      	ldr	r3, [pc, #212]	; (80169d0 <tcp_input+0x294>)
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	89db      	ldrh	r3, [r3, #14]
 80168fe:	b29b      	uxth	r3, r3
 8016900:	4a33      	ldr	r2, [pc, #204]	; (80169d0 <tcp_input+0x294>)
 8016902:	6814      	ldr	r4, [r2, #0]
 8016904:	4618      	mov	r0, r3
 8016906:	f7fc f9c5 	bl	8012c94 <lwip_htons>
 801690a:	4603      	mov	r3, r0
 801690c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801690e:	4b30      	ldr	r3, [pc, #192]	; (80169d0 <tcp_input+0x294>)
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	899b      	ldrh	r3, [r3, #12]
 8016914:	b29b      	uxth	r3, r3
 8016916:	4618      	mov	r0, r3
 8016918:	f7fc f9bc 	bl	8012c94 <lwip_htons>
 801691c:	4603      	mov	r3, r0
 801691e:	b2db      	uxtb	r3, r3
 8016920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016924:	b2da      	uxtb	r2, r3
 8016926:	4b34      	ldr	r3, [pc, #208]	; (80169f8 <tcp_input+0x2bc>)
 8016928:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	891a      	ldrh	r2, [r3, #8]
 801692e:	4b33      	ldr	r3, [pc, #204]	; (80169fc <tcp_input+0x2c0>)
 8016930:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8016932:	4b31      	ldr	r3, [pc, #196]	; (80169f8 <tcp_input+0x2bc>)
 8016934:	781b      	ldrb	r3, [r3, #0]
 8016936:	f003 0303 	and.w	r3, r3, #3
 801693a:	2b00      	cmp	r3, #0
 801693c:	d00c      	beq.n	8016958 <tcp_input+0x21c>
    tcplen++;
 801693e:	4b2f      	ldr	r3, [pc, #188]	; (80169fc <tcp_input+0x2c0>)
 8016940:	881b      	ldrh	r3, [r3, #0]
 8016942:	3301      	adds	r3, #1
 8016944:	b29a      	uxth	r2, r3
 8016946:	4b2d      	ldr	r3, [pc, #180]	; (80169fc <tcp_input+0x2c0>)
 8016948:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	891a      	ldrh	r2, [r3, #8]
 801694e:	4b2b      	ldr	r3, [pc, #172]	; (80169fc <tcp_input+0x2c0>)
 8016950:	881b      	ldrh	r3, [r3, #0]
 8016952:	429a      	cmp	r2, r3
 8016954:	f200 82f0 	bhi.w	8016f38 <tcp_input+0x7fc>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8016958:	2300      	movs	r3, #0
 801695a:	623b      	str	r3, [r7, #32]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801695c:	4b28      	ldr	r3, [pc, #160]	; (8016a00 <tcp_input+0x2c4>)
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	627b      	str	r3, [r7, #36]	; 0x24
 8016962:	e09d      	b.n	8016aa0 <tcp_input+0x364>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8016964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016966:	7d1b      	ldrb	r3, [r3, #20]
 8016968:	2b00      	cmp	r3, #0
 801696a:	d105      	bne.n	8016978 <tcp_input+0x23c>
 801696c:	4b15      	ldr	r3, [pc, #84]	; (80169c4 <tcp_input+0x288>)
 801696e:	22fb      	movs	r2, #251	; 0xfb
 8016970:	4924      	ldr	r1, [pc, #144]	; (8016a04 <tcp_input+0x2c8>)
 8016972:	4816      	ldr	r0, [pc, #88]	; (80169cc <tcp_input+0x290>)
 8016974:	f00a fed0 	bl	8021718 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8016978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801697a:	7d1b      	ldrb	r3, [r3, #20]
 801697c:	2b0a      	cmp	r3, #10
 801697e:	d105      	bne.n	801698c <tcp_input+0x250>
 8016980:	4b10      	ldr	r3, [pc, #64]	; (80169c4 <tcp_input+0x288>)
 8016982:	22fc      	movs	r2, #252	; 0xfc
 8016984:	4920      	ldr	r1, [pc, #128]	; (8016a08 <tcp_input+0x2cc>)
 8016986:	4811      	ldr	r0, [pc, #68]	; (80169cc <tcp_input+0x290>)
 8016988:	f00a fec6 	bl	8021718 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801698e:	7d1b      	ldrb	r3, [r3, #20]
 8016990:	2b01      	cmp	r3, #1
 8016992:	d105      	bne.n	80169a0 <tcp_input+0x264>
 8016994:	4b0b      	ldr	r3, [pc, #44]	; (80169c4 <tcp_input+0x288>)
 8016996:	22fd      	movs	r2, #253	; 0xfd
 8016998:	491c      	ldr	r1, [pc, #112]	; (8016a0c <tcp_input+0x2d0>)
 801699a:	480c      	ldr	r0, [pc, #48]	; (80169cc <tcp_input+0x290>)
 801699c:	f00a febc 	bl	8021718 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80169a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169a2:	7a1b      	ldrb	r3, [r3, #8]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d033      	beq.n	8016a10 <tcp_input+0x2d4>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80169a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169aa:	7a1a      	ldrb	r2, [r3, #8]
 80169ac:	4b09      	ldr	r3, [pc, #36]	; (80169d4 <tcp_input+0x298>)
 80169ae:	685b      	ldr	r3, [r3, #4]
 80169b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80169b4:	3301      	adds	r3, #1
 80169b6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80169b8:	429a      	cmp	r2, r3
 80169ba:	d029      	beq.n	8016a10 <tcp_input+0x2d4>
      prev = pcb;
 80169bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169be:	623b      	str	r3, [r7, #32]
      continue;
 80169c0:	e06b      	b.n	8016a9a <tcp_input+0x35e>
 80169c2:	bf00      	nop
 80169c4:	08025654 	.word	0x08025654
 80169c8:	08025688 	.word	0x08025688
 80169cc:	080256a0 	.word	0x080256a0
 80169d0:	20012378 	.word	0x20012378
 80169d4:	2000eba4 	.word	0x2000eba4
 80169d8:	2001237c 	.word	0x2001237c
 80169dc:	20012380 	.word	0x20012380
 80169e0:	2001237e 	.word	0x2001237e
 80169e4:	080256c8 	.word	0x080256c8
 80169e8:	080256d8 	.word	0x080256d8
 80169ec:	080256e4 	.word	0x080256e4
 80169f0:	20012388 	.word	0x20012388
 80169f4:	2001238c 	.word	0x2001238c
 80169f8:	20012394 	.word	0x20012394
 80169fc:	20012392 	.word	0x20012392
 8016a00:	2001235c 	.word	0x2001235c
 8016a04:	08025704 	.word	0x08025704
 8016a08:	0802572c 	.word	0x0802572c
 8016a0c:	08025758 	.word	0x08025758
    }

    if (pcb->remote_port == tcphdr->src &&
 8016a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a12:	8b1a      	ldrh	r2, [r3, #24]
 8016a14:	4b77      	ldr	r3, [pc, #476]	; (8016bf4 <tcp_input+0x4b8>)
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	881b      	ldrh	r3, [r3, #0]
 8016a1a:	b29b      	uxth	r3, r3
 8016a1c:	429a      	cmp	r2, r3
 8016a1e:	d13a      	bne.n	8016a96 <tcp_input+0x35a>
        pcb->local_port == tcphdr->dest &&
 8016a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a22:	8ada      	ldrh	r2, [r3, #22]
 8016a24:	4b73      	ldr	r3, [pc, #460]	; (8016bf4 <tcp_input+0x4b8>)
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	885b      	ldrh	r3, [r3, #2]
 8016a2a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8016a2c:	429a      	cmp	r2, r3
 8016a2e:	d132      	bne.n	8016a96 <tcp_input+0x35a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a32:	685a      	ldr	r2, [r3, #4]
 8016a34:	4b70      	ldr	r3, [pc, #448]	; (8016bf8 <tcp_input+0x4bc>)
 8016a36:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8016a38:	429a      	cmp	r2, r3
 8016a3a:	d12c      	bne.n	8016a96 <tcp_input+0x35a>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a3e:	681a      	ldr	r2, [r3, #0]
 8016a40:	4b6d      	ldr	r3, [pc, #436]	; (8016bf8 <tcp_input+0x4bc>)
 8016a42:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016a44:	429a      	cmp	r2, r3
 8016a46:	d126      	bne.n	8016a96 <tcp_input+0x35a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8016a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a4a:	68db      	ldr	r3, [r3, #12]
 8016a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a4e:	429a      	cmp	r2, r3
 8016a50:	d106      	bne.n	8016a60 <tcp_input+0x324>
 8016a52:	4b6a      	ldr	r3, [pc, #424]	; (8016bfc <tcp_input+0x4c0>)
 8016a54:	f240 120d 	movw	r2, #269	; 0x10d
 8016a58:	4969      	ldr	r1, [pc, #420]	; (8016c00 <tcp_input+0x4c4>)
 8016a5a:	486a      	ldr	r0, [pc, #424]	; (8016c04 <tcp_input+0x4c8>)
 8016a5c:	f00a fe5c 	bl	8021718 <iprintf>
      if (prev != NULL) {
 8016a60:	6a3b      	ldr	r3, [r7, #32]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d00a      	beq.n	8016a7c <tcp_input+0x340>
        prev->next = pcb->next;
 8016a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a68:	68da      	ldr	r2, [r3, #12]
 8016a6a:	6a3b      	ldr	r3, [r7, #32]
 8016a6c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8016a6e:	4b66      	ldr	r3, [pc, #408]	; (8016c08 <tcp_input+0x4cc>)
 8016a70:	681a      	ldr	r2, [r3, #0]
 8016a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a74:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8016a76:	4a64      	ldr	r2, [pc, #400]	; (8016c08 <tcp_input+0x4cc>)
 8016a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a7a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8016a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a7e:	68db      	ldr	r3, [r3, #12]
 8016a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a82:	429a      	cmp	r2, r3
 8016a84:	d111      	bne.n	8016aaa <tcp_input+0x36e>
 8016a86:	4b5d      	ldr	r3, [pc, #372]	; (8016bfc <tcp_input+0x4c0>)
 8016a88:	f240 1215 	movw	r2, #277	; 0x115
 8016a8c:	495f      	ldr	r1, [pc, #380]	; (8016c0c <tcp_input+0x4d0>)
 8016a8e:	485d      	ldr	r0, [pc, #372]	; (8016c04 <tcp_input+0x4c8>)
 8016a90:	f00a fe42 	bl	8021718 <iprintf>
      break;
 8016a94:	e009      	b.n	8016aaa <tcp_input+0x36e>
    }
    prev = pcb;
 8016a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a98:	623b      	str	r3, [r7, #32]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a9c:	68db      	ldr	r3, [r3, #12]
 8016a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8016aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	f47f af5e 	bne.w	8016964 <tcp_input+0x228>
 8016aa8:	e000      	b.n	8016aac <tcp_input+0x370>
      break;
 8016aaa:	bf00      	nop
  }

  if (pcb == NULL) {
 8016aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	f040 80b4 	bne.w	8016c1c <tcp_input+0x4e0>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016ab4:	4b56      	ldr	r3, [pc, #344]	; (8016c10 <tcp_input+0x4d4>)
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8016aba:	e03f      	b.n	8016b3c <tcp_input+0x400>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016abe:	7d1b      	ldrb	r3, [r3, #20]
 8016ac0:	2b0a      	cmp	r3, #10
 8016ac2:	d006      	beq.n	8016ad2 <tcp_input+0x396>
 8016ac4:	4b4d      	ldr	r3, [pc, #308]	; (8016bfc <tcp_input+0x4c0>)
 8016ac6:	f240 121f 	movw	r2, #287	; 0x11f
 8016aca:	4952      	ldr	r1, [pc, #328]	; (8016c14 <tcp_input+0x4d8>)
 8016acc:	484d      	ldr	r0, [pc, #308]	; (8016c04 <tcp_input+0x4c8>)
 8016ace:	f00a fe23 	bl	8021718 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ad4:	7a1b      	ldrb	r3, [r3, #8]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d009      	beq.n	8016aee <tcp_input+0x3b2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016adc:	7a1a      	ldrb	r2, [r3, #8]
 8016ade:	4b46      	ldr	r3, [pc, #280]	; (8016bf8 <tcp_input+0x4bc>)
 8016ae0:	685b      	ldr	r3, [r3, #4]
 8016ae2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016ae6:	3301      	adds	r3, #1
 8016ae8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016aea:	429a      	cmp	r2, r3
 8016aec:	d122      	bne.n	8016b34 <tcp_input+0x3f8>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8016aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016af0:	8b1a      	ldrh	r2, [r3, #24]
 8016af2:	4b40      	ldr	r3, [pc, #256]	; (8016bf4 <tcp_input+0x4b8>)
 8016af4:	681b      	ldr	r3, [r3, #0]
 8016af6:	881b      	ldrh	r3, [r3, #0]
 8016af8:	b29b      	uxth	r3, r3
 8016afa:	429a      	cmp	r2, r3
 8016afc:	d11b      	bne.n	8016b36 <tcp_input+0x3fa>
          pcb->local_port == tcphdr->dest &&
 8016afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b00:	8ada      	ldrh	r2, [r3, #22]
 8016b02:	4b3c      	ldr	r3, [pc, #240]	; (8016bf4 <tcp_input+0x4b8>)
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	885b      	ldrh	r3, [r3, #2]
 8016b08:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8016b0a:	429a      	cmp	r2, r3
 8016b0c:	d113      	bne.n	8016b36 <tcp_input+0x3fa>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b10:	685a      	ldr	r2, [r3, #4]
 8016b12:	4b39      	ldr	r3, [pc, #228]	; (8016bf8 <tcp_input+0x4bc>)
 8016b14:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8016b16:	429a      	cmp	r2, r3
 8016b18:	d10d      	bne.n	8016b36 <tcp_input+0x3fa>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b1c:	681a      	ldr	r2, [r3, #0]
 8016b1e:	4b36      	ldr	r3, [pc, #216]	; (8016bf8 <tcp_input+0x4bc>)
 8016b20:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016b22:	429a      	cmp	r2, r3
 8016b24:	d107      	bne.n	8016b36 <tcp_input+0x3fa>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8016b26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b28:	f000 fb60 	bl	80171ec <tcp_timewait_input>
        }
        pbuf_free(p);
 8016b2c:	6878      	ldr	r0, [r7, #4]
 8016b2e:	f7fd fcaf 	bl	8014490 <pbuf_free>
        return;
 8016b32:	e207      	b.n	8016f44 <tcp_input+0x808>
        continue;
 8016b34:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b38:	68db      	ldr	r3, [r3, #12]
 8016b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8016b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d1bc      	bne.n	8016abc <tcp_input+0x380>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8016b42:	2300      	movs	r3, #0
 8016b44:	623b      	str	r3, [r7, #32]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016b46:	4b34      	ldr	r3, [pc, #208]	; (8016c18 <tcp_input+0x4dc>)
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	61fb      	str	r3, [r7, #28]
 8016b4c:	e02e      	b.n	8016bac <tcp_input+0x470>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016b4e:	69fb      	ldr	r3, [r7, #28]
 8016b50:	7a1b      	ldrb	r3, [r3, #8]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d00c      	beq.n	8016b70 <tcp_input+0x434>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016b56:	69fb      	ldr	r3, [r7, #28]
 8016b58:	7a1a      	ldrb	r2, [r3, #8]
 8016b5a:	4b27      	ldr	r3, [pc, #156]	; (8016bf8 <tcp_input+0x4bc>)
 8016b5c:	685b      	ldr	r3, [r3, #4]
 8016b5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016b62:	3301      	adds	r3, #1
 8016b64:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016b66:	429a      	cmp	r2, r3
 8016b68:	d002      	beq.n	8016b70 <tcp_input+0x434>
        prev = (struct tcp_pcb *)lpcb;
 8016b6a:	69fb      	ldr	r3, [r7, #28]
 8016b6c:	623b      	str	r3, [r7, #32]
        continue;
 8016b6e:	e01a      	b.n	8016ba6 <tcp_input+0x46a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8016b70:	69fb      	ldr	r3, [r7, #28]
 8016b72:	8ada      	ldrh	r2, [r3, #22]
 8016b74:	4b1f      	ldr	r3, [pc, #124]	; (8016bf4 <tcp_input+0x4b8>)
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	885b      	ldrh	r3, [r3, #2]
 8016b7a:	b29b      	uxth	r3, r3
 8016b7c:	429a      	cmp	r2, r3
 8016b7e:	d110      	bne.n	8016ba2 <tcp_input+0x466>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8016b80:	69fb      	ldr	r3, [r7, #28]
 8016b82:	681a      	ldr	r2, [r3, #0]
 8016b84:	4b1c      	ldr	r3, [pc, #112]	; (8016bf8 <tcp_input+0x4bc>)
 8016b86:	695b      	ldr	r3, [r3, #20]
 8016b88:	429a      	cmp	r2, r3
 8016b8a:	d013      	beq.n	8016bb4 <tcp_input+0x478>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8016b8c:	69fb      	ldr	r3, [r7, #28]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d003      	beq.n	8016b9a <tcp_input+0x45e>
 8016b92:	69fb      	ldr	r3, [r7, #28]
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d103      	bne.n	8016ba2 <tcp_input+0x466>
            /* found an ANY-match */
#if SO_REUSE
            lpcb_any = lpcb;
 8016b9a:	69fb      	ldr	r3, [r7, #28]
 8016b9c:	617b      	str	r3, [r7, #20]
            lpcb_prev = prev;
 8016b9e:	6a3b      	ldr	r3, [r7, #32]
 8016ba0:	61bb      	str	r3, [r7, #24]
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8016ba2:	69fb      	ldr	r3, [r7, #28]
 8016ba4:	623b      	str	r3, [r7, #32]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016ba6:	69fb      	ldr	r3, [r7, #28]
 8016ba8:	68db      	ldr	r3, [r3, #12]
 8016baa:	61fb      	str	r3, [r7, #28]
 8016bac:	69fb      	ldr	r3, [r7, #28]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d1cd      	bne.n	8016b4e <tcp_input+0x412>
 8016bb2:	e000      	b.n	8016bb6 <tcp_input+0x47a>
            break;
 8016bb4:	bf00      	nop
    }
#if SO_REUSE
    /* first try specific local IP */
    if (lpcb == NULL) {
 8016bb6:	69fb      	ldr	r3, [r7, #28]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d103      	bne.n	8016bc4 <tcp_input+0x488>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
 8016bbc:	697b      	ldr	r3, [r7, #20]
 8016bbe:	61fb      	str	r3, [r7, #28]
      prev = lpcb_prev;
 8016bc0:	69bb      	ldr	r3, [r7, #24]
 8016bc2:	623b      	str	r3, [r7, #32]
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8016bc4:	69fb      	ldr	r3, [r7, #28]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d028      	beq.n	8016c1c <tcp_input+0x4e0>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8016bca:	6a3b      	ldr	r3, [r7, #32]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d00a      	beq.n	8016be6 <tcp_input+0x4aa>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8016bd0:	69fb      	ldr	r3, [r7, #28]
 8016bd2:	68da      	ldr	r2, [r3, #12]
 8016bd4:	6a3b      	ldr	r3, [r7, #32]
 8016bd6:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8016bd8:	4b0f      	ldr	r3, [pc, #60]	; (8016c18 <tcp_input+0x4dc>)
 8016bda:	681a      	ldr	r2, [r3, #0]
 8016bdc:	69fb      	ldr	r3, [r7, #28]
 8016bde:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8016be0:	4a0d      	ldr	r2, [pc, #52]	; (8016c18 <tcp_input+0x4dc>)
 8016be2:	69fb      	ldr	r3, [r7, #28]
 8016be4:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8016be6:	69f8      	ldr	r0, [r7, #28]
 8016be8:	f000 fa02 	bl	8016ff0 <tcp_listen_input>
      }
      pbuf_free(p);
 8016bec:	6878      	ldr	r0, [r7, #4]
 8016bee:	f7fd fc4f 	bl	8014490 <pbuf_free>
      return;
 8016bf2:	e1a7      	b.n	8016f44 <tcp_input+0x808>
 8016bf4:	20012378 	.word	0x20012378
 8016bf8:	2000eba4 	.word	0x2000eba4
 8016bfc:	08025654 	.word	0x08025654
 8016c00:	08025780 	.word	0x08025780
 8016c04:	080256a0 	.word	0x080256a0
 8016c08:	2001235c 	.word	0x2001235c
 8016c0c:	080257ac 	.word	0x080257ac
 8016c10:	20012360 	.word	0x20012360
 8016c14:	080257d8 	.word	0x080257d8
 8016c18:	20012358 	.word	0x20012358
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8016c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	f000 8158 	beq.w	8016ed4 <tcp_input+0x798>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8016c24:	4b95      	ldr	r3, [pc, #596]	; (8016e7c <tcp_input+0x740>)
 8016c26:	2200      	movs	r2, #0
 8016c28:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	891a      	ldrh	r2, [r3, #8]
 8016c2e:	4b93      	ldr	r3, [pc, #588]	; (8016e7c <tcp_input+0x740>)
 8016c30:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8016c32:	4a92      	ldr	r2, [pc, #584]	; (8016e7c <tcp_input+0x740>)
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016c38:	4b91      	ldr	r3, [pc, #580]	; (8016e80 <tcp_input+0x744>)
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	4a8f      	ldr	r2, [pc, #572]	; (8016e7c <tcp_input+0x740>)
 8016c3e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8016c40:	4b90      	ldr	r3, [pc, #576]	; (8016e84 <tcp_input+0x748>)
 8016c42:	2200      	movs	r2, #0
 8016c44:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8016c46:	4b90      	ldr	r3, [pc, #576]	; (8016e88 <tcp_input+0x74c>)
 8016c48:	2200      	movs	r2, #0
 8016c4a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8016c4c:	4b8f      	ldr	r3, [pc, #572]	; (8016e8c <tcp_input+0x750>)
 8016c4e:	2200      	movs	r2, #0
 8016c50:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8016c52:	4b8f      	ldr	r3, [pc, #572]	; (8016e90 <tcp_input+0x754>)
 8016c54:	781b      	ldrb	r3, [r3, #0]
 8016c56:	f003 0308 	and.w	r3, r3, #8
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d006      	beq.n	8016c6c <tcp_input+0x530>
      p->flags |= PBUF_FLAG_PUSH;
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	7b5b      	ldrb	r3, [r3, #13]
 8016c62:	f043 0301 	orr.w	r3, r3, #1
 8016c66:	b2da      	uxtb	r2, r3
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8016c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d017      	beq.n	8016ca4 <tcp_input+0x568>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016c74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c76:	f7ff f843 	bl	8015d00 <tcp_process_refused_data>
 8016c7a:	4603      	mov	r3, r0
 8016c7c:	f113 0f0d 	cmn.w	r3, #13
 8016c80:	d007      	beq.n	8016c92 <tcp_input+0x556>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d00c      	beq.n	8016ca4 <tcp_input+0x568>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016c8a:	4b82      	ldr	r3, [pc, #520]	; (8016e94 <tcp_input+0x758>)
 8016c8c:	881b      	ldrh	r3, [r3, #0]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d008      	beq.n	8016ca4 <tcp_input+0x568>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8016c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	f040 80e3 	bne.w	8016e62 <tcp_input+0x726>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8016c9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c9e:	f003 fe05 	bl	801a8ac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8016ca2:	e0de      	b.n	8016e62 <tcp_input+0x726>
      }
    }
    tcp_input_pcb = pcb;
 8016ca4:	4a7c      	ldr	r2, [pc, #496]	; (8016e98 <tcp_input+0x75c>)
 8016ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ca8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8016caa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016cac:	f000 fb18 	bl	80172e0 <tcp_process>
 8016cb0:	4603      	mov	r3, r0
 8016cb2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8016cb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016cb8:	f113 0f0d 	cmn.w	r3, #13
 8016cbc:	f000 80d3 	beq.w	8016e66 <tcp_input+0x72a>
      if (recv_flags & TF_RESET) {
 8016cc0:	4b71      	ldr	r3, [pc, #452]	; (8016e88 <tcp_input+0x74c>)
 8016cc2:	781b      	ldrb	r3, [r3, #0]
 8016cc4:	f003 0308 	and.w	r3, r3, #8
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d015      	beq.n	8016cf8 <tcp_input+0x5bc>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8016ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d008      	beq.n	8016ce8 <tcp_input+0x5ac>
 8016cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016cde:	6912      	ldr	r2, [r2, #16]
 8016ce0:	f06f 010d 	mvn.w	r1, #13
 8016ce4:	4610      	mov	r0, r2
 8016ce6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016ce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016cea:	486c      	ldr	r0, [pc, #432]	; (8016e9c <tcp_input+0x760>)
 8016cec:	f7ff fbae 	bl	801644c <tcp_pcb_remove>
        tcp_free(pcb);
 8016cf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016cf2:	f7fd fe89 	bl	8014a08 <tcp_free>
 8016cf6:	e0da      	b.n	8016eae <tcp_input+0x772>
      } else {
        err = ERR_OK;
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8016cfc:	4b63      	ldr	r3, [pc, #396]	; (8016e8c <tcp_input+0x750>)
 8016cfe:	881b      	ldrh	r3, [r3, #0]
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d01d      	beq.n	8016d40 <tcp_input+0x604>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8016d04:	4b61      	ldr	r3, [pc, #388]	; (8016e8c <tcp_input+0x750>)
 8016d06:	881b      	ldrh	r3, [r3, #0]
 8016d08:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8016d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d00a      	beq.n	8016d2a <tcp_input+0x5ee>
 8016d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d1c:	6910      	ldr	r0, [r2, #16]
 8016d1e:	89fa      	ldrh	r2, [r7, #14]
 8016d20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016d22:	4798      	blx	r3
 8016d24:	4603      	mov	r3, r0
 8016d26:	74fb      	strb	r3, [r7, #19]
 8016d28:	e001      	b.n	8016d2e <tcp_input+0x5f2>
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016d2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016d32:	f113 0f0d 	cmn.w	r3, #13
 8016d36:	f000 8098 	beq.w	8016e6a <tcp_input+0x72e>
              goto aborted;
            }
          }
          recv_acked = 0;
 8016d3a:	4b54      	ldr	r3, [pc, #336]	; (8016e8c <tcp_input+0x750>)
 8016d3c:	2200      	movs	r2, #0
 8016d3e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8016d40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d42:	f000 f915 	bl	8016f70 <tcp_input_delayed_close>
 8016d46:	4603      	mov	r3, r0
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	f040 8090 	bne.w	8016e6e <tcp_input+0x732>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8016d4e:	4b4d      	ldr	r3, [pc, #308]	; (8016e84 <tcp_input+0x748>)
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d041      	beq.n	8016dda <tcp_input+0x69e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d006      	beq.n	8016d6c <tcp_input+0x630>
 8016d5e:	4b50      	ldr	r3, [pc, #320]	; (8016ea0 <tcp_input+0x764>)
 8016d60:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8016d64:	494f      	ldr	r1, [pc, #316]	; (8016ea4 <tcp_input+0x768>)
 8016d66:	4850      	ldr	r0, [pc, #320]	; (8016ea8 <tcp_input+0x76c>)
 8016d68:	f00a fcd6 	bl	8021718 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8016d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d6e:	8b5b      	ldrh	r3, [r3, #26]
 8016d70:	f003 0310 	and.w	r3, r3, #16
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d008      	beq.n	8016d8a <tcp_input+0x64e>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8016d78:	4b42      	ldr	r3, [pc, #264]	; (8016e84 <tcp_input+0x748>)
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	f7fd fb87 	bl	8014490 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8016d82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d84:	f7fe f984 	bl	8015090 <tcp_abort>
            goto aborted;
 8016d88:	e091      	b.n	8016eae <tcp_input+0x772>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8016d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d00c      	beq.n	8016dae <tcp_input+0x672>
 8016d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d96:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d9c:	6918      	ldr	r0, [r3, #16]
 8016d9e:	4b39      	ldr	r3, [pc, #228]	; (8016e84 <tcp_input+0x748>)
 8016da0:	681a      	ldr	r2, [r3, #0]
 8016da2:	2300      	movs	r3, #0
 8016da4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016da6:	47a0      	blx	r4
 8016da8:	4603      	mov	r3, r0
 8016daa:	74fb      	strb	r3, [r7, #19]
 8016dac:	e008      	b.n	8016dc0 <tcp_input+0x684>
 8016dae:	4b35      	ldr	r3, [pc, #212]	; (8016e84 <tcp_input+0x748>)
 8016db0:	681a      	ldr	r2, [r3, #0]
 8016db2:	2300      	movs	r3, #0
 8016db4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016db6:	2000      	movs	r0, #0
 8016db8:	f7ff f878 	bl	8015eac <tcp_recv_null>
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8016dc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016dc4:	f113 0f0d 	cmn.w	r3, #13
 8016dc8:	d053      	beq.n	8016e72 <tcp_input+0x736>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8016dca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d003      	beq.n	8016dda <tcp_input+0x69e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8016dd2:	4b2c      	ldr	r3, [pc, #176]	; (8016e84 <tcp_input+0x748>)
 8016dd4:	681a      	ldr	r2, [r3, #0]
 8016dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dd8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8016dda:	4b2b      	ldr	r3, [pc, #172]	; (8016e88 <tcp_input+0x74c>)
 8016ddc:	781b      	ldrb	r3, [r3, #0]
 8016dde:	f003 0320 	and.w	r3, r3, #32
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d030      	beq.n	8016e48 <tcp_input+0x70c>
          if (pcb->refused_data != NULL) {
 8016de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016de8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d009      	beq.n	8016e02 <tcp_input+0x6c6>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8016dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016df2:	7b5a      	ldrb	r2, [r3, #13]
 8016df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016df6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016df8:	f042 0220 	orr.w	r2, r2, #32
 8016dfc:	b2d2      	uxtb	r2, r2
 8016dfe:	735a      	strb	r2, [r3, #13]
 8016e00:	e022      	b.n	8016e48 <tcp_input+0x70c>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e06:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016e0a:	d005      	beq.n	8016e18 <tcp_input+0x6dc>
              pcb->rcv_wnd++;
 8016e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e10:	3301      	adds	r3, #1
 8016e12:	b29a      	uxth	r2, r3
 8016e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e16:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d00b      	beq.n	8016e3a <tcp_input+0x6fe>
 8016e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e24:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e2a:	6918      	ldr	r0, [r3, #16]
 8016e2c:	2300      	movs	r3, #0
 8016e2e:	2200      	movs	r2, #0
 8016e30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016e32:	47a0      	blx	r4
 8016e34:	4603      	mov	r3, r0
 8016e36:	74fb      	strb	r3, [r7, #19]
 8016e38:	e001      	b.n	8016e3e <tcp_input+0x702>
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016e3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016e42:	f113 0f0d 	cmn.w	r3, #13
 8016e46:	d016      	beq.n	8016e76 <tcp_input+0x73a>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016e48:	4b13      	ldr	r3, [pc, #76]	; (8016e98 <tcp_input+0x75c>)
 8016e4a:	2200      	movs	r2, #0
 8016e4c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8016e4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016e50:	f000 f88e 	bl	8016f70 <tcp_input_delayed_close>
 8016e54:	4603      	mov	r3, r0
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d128      	bne.n	8016eac <tcp_input+0x770>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8016e5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016e5c:	f002 ff20 	bl	8019ca0 <tcp_output>
 8016e60:	e025      	b.n	8016eae <tcp_input+0x772>
        goto aborted;
 8016e62:	bf00      	nop
 8016e64:	e023      	b.n	8016eae <tcp_input+0x772>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016e66:	bf00      	nop
 8016e68:	e021      	b.n	8016eae <tcp_input+0x772>
              goto aborted;
 8016e6a:	bf00      	nop
 8016e6c:	e01f      	b.n	8016eae <tcp_input+0x772>
          goto aborted;
 8016e6e:	bf00      	nop
 8016e70:	e01d      	b.n	8016eae <tcp_input+0x772>
            goto aborted;
 8016e72:	bf00      	nop
 8016e74:	e01b      	b.n	8016eae <tcp_input+0x772>
              goto aborted;
 8016e76:	bf00      	nop
 8016e78:	e019      	b.n	8016eae <tcp_input+0x772>
 8016e7a:	bf00      	nop
 8016e7c:	20012368 	.word	0x20012368
 8016e80:	20012378 	.word	0x20012378
 8016e84:	20012398 	.word	0x20012398
 8016e88:	20012395 	.word	0x20012395
 8016e8c:	20012390 	.word	0x20012390
 8016e90:	20012394 	.word	0x20012394
 8016e94:	20012392 	.word	0x20012392
 8016e98:	2001239c 	.word	0x2001239c
 8016e9c:	2001235c 	.word	0x2001235c
 8016ea0:	08025654 	.word	0x08025654
 8016ea4:	08025808 	.word	0x08025808
 8016ea8:	080256a0 	.word	0x080256a0
          goto aborted;
 8016eac:	bf00      	nop
    tcp_input_pcb = NULL;
 8016eae:	4b27      	ldr	r3, [pc, #156]	; (8016f4c <tcp_input+0x810>)
 8016eb0:	2200      	movs	r2, #0
 8016eb2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8016eb4:	4b26      	ldr	r3, [pc, #152]	; (8016f50 <tcp_input+0x814>)
 8016eb6:	2200      	movs	r2, #0
 8016eb8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8016eba:	4b26      	ldr	r3, [pc, #152]	; (8016f54 <tcp_input+0x818>)
 8016ebc:	685b      	ldr	r3, [r3, #4]
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d03f      	beq.n	8016f42 <tcp_input+0x806>
      pbuf_free(inseg.p);
 8016ec2:	4b24      	ldr	r3, [pc, #144]	; (8016f54 <tcp_input+0x818>)
 8016ec4:	685b      	ldr	r3, [r3, #4]
 8016ec6:	4618      	mov	r0, r3
 8016ec8:	f7fd fae2 	bl	8014490 <pbuf_free>
      inseg.p = NULL;
 8016ecc:	4b21      	ldr	r3, [pc, #132]	; (8016f54 <tcp_input+0x818>)
 8016ece:	2200      	movs	r2, #0
 8016ed0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8016ed2:	e036      	b.n	8016f42 <tcp_input+0x806>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8016ed4:	4b20      	ldr	r3, [pc, #128]	; (8016f58 <tcp_input+0x81c>)
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	899b      	ldrh	r3, [r3, #12]
 8016eda:	b29b      	uxth	r3, r3
 8016edc:	4618      	mov	r0, r3
 8016ede:	f7fb fed9 	bl	8012c94 <lwip_htons>
 8016ee2:	4603      	mov	r3, r0
 8016ee4:	b2db      	uxtb	r3, r3
 8016ee6:	f003 0304 	and.w	r3, r3, #4
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d118      	bne.n	8016f20 <tcp_input+0x7e4>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016eee:	4b1b      	ldr	r3, [pc, #108]	; (8016f5c <tcp_input+0x820>)
 8016ef0:	6819      	ldr	r1, [r3, #0]
 8016ef2:	4b1b      	ldr	r3, [pc, #108]	; (8016f60 <tcp_input+0x824>)
 8016ef4:	881b      	ldrh	r3, [r3, #0]
 8016ef6:	461a      	mov	r2, r3
 8016ef8:	4b1a      	ldr	r3, [pc, #104]	; (8016f64 <tcp_input+0x828>)
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016efe:	4b16      	ldr	r3, [pc, #88]	; (8016f58 <tcp_input+0x81c>)
 8016f00:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016f02:	885b      	ldrh	r3, [r3, #2]
 8016f04:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016f06:	4a14      	ldr	r2, [pc, #80]	; (8016f58 <tcp_input+0x81c>)
 8016f08:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016f0a:	8812      	ldrh	r2, [r2, #0]
 8016f0c:	b292      	uxth	r2, r2
 8016f0e:	9202      	str	r2, [sp, #8]
 8016f10:	9301      	str	r3, [sp, #4]
 8016f12:	4b15      	ldr	r3, [pc, #84]	; (8016f68 <tcp_input+0x82c>)
 8016f14:	9300      	str	r3, [sp, #0]
 8016f16:	4b15      	ldr	r3, [pc, #84]	; (8016f6c <tcp_input+0x830>)
 8016f18:	4602      	mov	r2, r0
 8016f1a:	2000      	movs	r0, #0
 8016f1c:	f003 fc74 	bl	801a808 <tcp_rst>
    pbuf_free(p);
 8016f20:	6878      	ldr	r0, [r7, #4]
 8016f22:	f7fd fab5 	bl	8014490 <pbuf_free>
  return;
 8016f26:	e00c      	b.n	8016f42 <tcp_input+0x806>
    goto dropped;
 8016f28:	bf00      	nop
 8016f2a:	e006      	b.n	8016f3a <tcp_input+0x7fe>
    goto dropped;
 8016f2c:	bf00      	nop
 8016f2e:	e004      	b.n	8016f3a <tcp_input+0x7fe>
    goto dropped;
 8016f30:	bf00      	nop
 8016f32:	e002      	b.n	8016f3a <tcp_input+0x7fe>
      goto dropped;
 8016f34:	bf00      	nop
 8016f36:	e000      	b.n	8016f3a <tcp_input+0x7fe>
      goto dropped;
 8016f38:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8016f3a:	6878      	ldr	r0, [r7, #4]
 8016f3c:	f7fd faa8 	bl	8014490 <pbuf_free>
 8016f40:	e000      	b.n	8016f44 <tcp_input+0x808>
  return;
 8016f42:	bf00      	nop
}
 8016f44:	372c      	adds	r7, #44	; 0x2c
 8016f46:	46bd      	mov	sp, r7
 8016f48:	bd90      	pop	{r4, r7, pc}
 8016f4a:	bf00      	nop
 8016f4c:	2001239c 	.word	0x2001239c
 8016f50:	20012398 	.word	0x20012398
 8016f54:	20012368 	.word	0x20012368
 8016f58:	20012378 	.word	0x20012378
 8016f5c:	2001238c 	.word	0x2001238c
 8016f60:	20012392 	.word	0x20012392
 8016f64:	20012388 	.word	0x20012388
 8016f68:	2000ebb4 	.word	0x2000ebb4
 8016f6c:	2000ebb8 	.word	0x2000ebb8

08016f70 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8016f70:	b580      	push	{r7, lr}
 8016f72:	b082      	sub	sp, #8
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d106      	bne.n	8016f8c <tcp_input_delayed_close+0x1c>
 8016f7e:	4b17      	ldr	r3, [pc, #92]	; (8016fdc <tcp_input_delayed_close+0x6c>)
 8016f80:	f240 225a 	movw	r2, #602	; 0x25a
 8016f84:	4916      	ldr	r1, [pc, #88]	; (8016fe0 <tcp_input_delayed_close+0x70>)
 8016f86:	4817      	ldr	r0, [pc, #92]	; (8016fe4 <tcp_input_delayed_close+0x74>)
 8016f88:	f00a fbc6 	bl	8021718 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8016f8c:	4b16      	ldr	r3, [pc, #88]	; (8016fe8 <tcp_input_delayed_close+0x78>)
 8016f8e:	781b      	ldrb	r3, [r3, #0]
 8016f90:	f003 0310 	and.w	r3, r3, #16
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d01c      	beq.n	8016fd2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	8b5b      	ldrh	r3, [r3, #26]
 8016f9c:	f003 0310 	and.w	r3, r3, #16
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d10d      	bne.n	8016fc0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d008      	beq.n	8016fc0 <tcp_input_delayed_close+0x50>
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016fb4:	687a      	ldr	r2, [r7, #4]
 8016fb6:	6912      	ldr	r2, [r2, #16]
 8016fb8:	f06f 010e 	mvn.w	r1, #14
 8016fbc:	4610      	mov	r0, r2
 8016fbe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016fc0:	6879      	ldr	r1, [r7, #4]
 8016fc2:	480a      	ldr	r0, [pc, #40]	; (8016fec <tcp_input_delayed_close+0x7c>)
 8016fc4:	f7ff fa42 	bl	801644c <tcp_pcb_remove>
    tcp_free(pcb);
 8016fc8:	6878      	ldr	r0, [r7, #4]
 8016fca:	f7fd fd1d 	bl	8014a08 <tcp_free>
    return 1;
 8016fce:	2301      	movs	r3, #1
 8016fd0:	e000      	b.n	8016fd4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8016fd2:	2300      	movs	r3, #0
}
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	3708      	adds	r7, #8
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	bd80      	pop	{r7, pc}
 8016fdc:	08025654 	.word	0x08025654
 8016fe0:	08025824 	.word	0x08025824
 8016fe4:	080256a0 	.word	0x080256a0
 8016fe8:	20012395 	.word	0x20012395
 8016fec:	2001235c 	.word	0x2001235c

08016ff0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8016ff0:	b590      	push	{r4, r7, lr}
 8016ff2:	b08b      	sub	sp, #44	; 0x2c
 8016ff4:	af04      	add	r7, sp, #16
 8016ff6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8016ff8:	4b6f      	ldr	r3, [pc, #444]	; (80171b8 <tcp_listen_input+0x1c8>)
 8016ffa:	781b      	ldrb	r3, [r3, #0]
 8016ffc:	f003 0304 	and.w	r3, r3, #4
 8017000:	2b00      	cmp	r3, #0
 8017002:	f040 80d2 	bne.w	80171aa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	2b00      	cmp	r3, #0
 801700a:	d106      	bne.n	801701a <tcp_listen_input+0x2a>
 801700c:	4b6b      	ldr	r3, [pc, #428]	; (80171bc <tcp_listen_input+0x1cc>)
 801700e:	f240 2281 	movw	r2, #641	; 0x281
 8017012:	496b      	ldr	r1, [pc, #428]	; (80171c0 <tcp_listen_input+0x1d0>)
 8017014:	486b      	ldr	r0, [pc, #428]	; (80171c4 <tcp_listen_input+0x1d4>)
 8017016:	f00a fb7f 	bl	8021718 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801701a:	4b67      	ldr	r3, [pc, #412]	; (80171b8 <tcp_listen_input+0x1c8>)
 801701c:	781b      	ldrb	r3, [r3, #0]
 801701e:	f003 0310 	and.w	r3, r3, #16
 8017022:	2b00      	cmp	r3, #0
 8017024:	d019      	beq.n	801705a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017026:	4b68      	ldr	r3, [pc, #416]	; (80171c8 <tcp_listen_input+0x1d8>)
 8017028:	6819      	ldr	r1, [r3, #0]
 801702a:	4b68      	ldr	r3, [pc, #416]	; (80171cc <tcp_listen_input+0x1dc>)
 801702c:	881b      	ldrh	r3, [r3, #0]
 801702e:	461a      	mov	r2, r3
 8017030:	4b67      	ldr	r3, [pc, #412]	; (80171d0 <tcp_listen_input+0x1e0>)
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017036:	4b67      	ldr	r3, [pc, #412]	; (80171d4 <tcp_listen_input+0x1e4>)
 8017038:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801703a:	885b      	ldrh	r3, [r3, #2]
 801703c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801703e:	4a65      	ldr	r2, [pc, #404]	; (80171d4 <tcp_listen_input+0x1e4>)
 8017040:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017042:	8812      	ldrh	r2, [r2, #0]
 8017044:	b292      	uxth	r2, r2
 8017046:	9202      	str	r2, [sp, #8]
 8017048:	9301      	str	r3, [sp, #4]
 801704a:	4b63      	ldr	r3, [pc, #396]	; (80171d8 <tcp_listen_input+0x1e8>)
 801704c:	9300      	str	r3, [sp, #0]
 801704e:	4b63      	ldr	r3, [pc, #396]	; (80171dc <tcp_listen_input+0x1ec>)
 8017050:	4602      	mov	r2, r0
 8017052:	6878      	ldr	r0, [r7, #4]
 8017054:	f003 fbd8 	bl	801a808 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8017058:	e0a9      	b.n	80171ae <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801705a:	4b57      	ldr	r3, [pc, #348]	; (80171b8 <tcp_listen_input+0x1c8>)
 801705c:	781b      	ldrb	r3, [r3, #0]
 801705e:	f003 0302 	and.w	r3, r3, #2
 8017062:	2b00      	cmp	r3, #0
 8017064:	f000 80a3 	beq.w	80171ae <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	7d5b      	ldrb	r3, [r3, #21]
 801706c:	4618      	mov	r0, r3
 801706e:	f7ff f841 	bl	80160f4 <tcp_alloc>
 8017072:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8017074:	697b      	ldr	r3, [r7, #20]
 8017076:	2b00      	cmp	r3, #0
 8017078:	d111      	bne.n	801709e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	699b      	ldr	r3, [r3, #24]
 801707e:	2b00      	cmp	r3, #0
 8017080:	d00a      	beq.n	8017098 <tcp_listen_input+0xa8>
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	699b      	ldr	r3, [r3, #24]
 8017086:	687a      	ldr	r2, [r7, #4]
 8017088:	6910      	ldr	r0, [r2, #16]
 801708a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801708e:	2100      	movs	r1, #0
 8017090:	4798      	blx	r3
 8017092:	4603      	mov	r3, r0
 8017094:	73bb      	strb	r3, [r7, #14]
      return;
 8017096:	e08b      	b.n	80171b0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017098:	23f0      	movs	r3, #240	; 0xf0
 801709a:	73bb      	strb	r3, [r7, #14]
      return;
 801709c:	e088      	b.n	80171b0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801709e:	4b50      	ldr	r3, [pc, #320]	; (80171e0 <tcp_listen_input+0x1f0>)
 80170a0:	695a      	ldr	r2, [r3, #20]
 80170a2:	697b      	ldr	r3, [r7, #20]
 80170a4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80170a6:	4b4e      	ldr	r3, [pc, #312]	; (80171e0 <tcp_listen_input+0x1f0>)
 80170a8:	691a      	ldr	r2, [r3, #16]
 80170aa:	697b      	ldr	r3, [r7, #20]
 80170ac:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	8ada      	ldrh	r2, [r3, #22]
 80170b2:	697b      	ldr	r3, [r7, #20]
 80170b4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80170b6:	4b47      	ldr	r3, [pc, #284]	; (80171d4 <tcp_listen_input+0x1e4>)
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	881b      	ldrh	r3, [r3, #0]
 80170bc:	b29a      	uxth	r2, r3
 80170be:	697b      	ldr	r3, [r7, #20]
 80170c0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80170c2:	697b      	ldr	r3, [r7, #20]
 80170c4:	2203      	movs	r2, #3
 80170c6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80170c8:	4b41      	ldr	r3, [pc, #260]	; (80171d0 <tcp_listen_input+0x1e0>)
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	1c5a      	adds	r2, r3, #1
 80170ce:	697b      	ldr	r3, [r7, #20]
 80170d0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80170d2:	697b      	ldr	r3, [r7, #20]
 80170d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80170d6:	697b      	ldr	r3, [r7, #20]
 80170d8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80170da:	6978      	ldr	r0, [r7, #20]
 80170dc:	f7ff fa4a 	bl	8016574 <tcp_next_iss>
 80170e0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80170e2:	697b      	ldr	r3, [r7, #20]
 80170e4:	693a      	ldr	r2, [r7, #16]
 80170e6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80170e8:	697b      	ldr	r3, [r7, #20]
 80170ea:	693a      	ldr	r2, [r7, #16]
 80170ec:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80170ee:	697b      	ldr	r3, [r7, #20]
 80170f0:	693a      	ldr	r2, [r7, #16]
 80170f2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80170f4:	697b      	ldr	r3, [r7, #20]
 80170f6:	693a      	ldr	r2, [r7, #16]
 80170f8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80170fa:	4b35      	ldr	r3, [pc, #212]	; (80171d0 <tcp_listen_input+0x1e0>)
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	1e5a      	subs	r2, r3, #1
 8017100:	697b      	ldr	r3, [r7, #20]
 8017102:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	691a      	ldr	r2, [r3, #16]
 8017108:	697b      	ldr	r3, [r7, #20]
 801710a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801710c:	697b      	ldr	r3, [r7, #20]
 801710e:	687a      	ldr	r2, [r7, #4]
 8017110:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	7a5b      	ldrb	r3, [r3, #9]
 8017116:	f003 030c 	and.w	r3, r3, #12
 801711a:	b2da      	uxtb	r2, r3
 801711c:	697b      	ldr	r3, [r7, #20]
 801711e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	7a1a      	ldrb	r2, [r3, #8]
 8017124:	697b      	ldr	r3, [r7, #20]
 8017126:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8017128:	4b2e      	ldr	r3, [pc, #184]	; (80171e4 <tcp_listen_input+0x1f4>)
 801712a:	681a      	ldr	r2, [r3, #0]
 801712c:	697b      	ldr	r3, [r7, #20]
 801712e:	60da      	str	r2, [r3, #12]
 8017130:	4a2c      	ldr	r2, [pc, #176]	; (80171e4 <tcp_listen_input+0x1f4>)
 8017132:	697b      	ldr	r3, [r7, #20]
 8017134:	6013      	str	r3, [r2, #0]
 8017136:	f003 fd29 	bl	801ab8c <tcp_timer_needed>
 801713a:	4b2b      	ldr	r3, [pc, #172]	; (80171e8 <tcp_listen_input+0x1f8>)
 801713c:	2201      	movs	r2, #1
 801713e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8017140:	6978      	ldr	r0, [r7, #20]
 8017142:	f001 fd8f 	bl	8018c64 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8017146:	4b23      	ldr	r3, [pc, #140]	; (80171d4 <tcp_listen_input+0x1e4>)
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	89db      	ldrh	r3, [r3, #14]
 801714c:	b29a      	uxth	r2, r3
 801714e:	697b      	ldr	r3, [r7, #20]
 8017150:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8017154:	697b      	ldr	r3, [r7, #20]
 8017156:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801715a:	697b      	ldr	r3, [r7, #20]
 801715c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8017160:	697b      	ldr	r3, [r7, #20]
 8017162:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8017164:	697b      	ldr	r3, [r7, #20]
 8017166:	3304      	adds	r3, #4
 8017168:	4618      	mov	r0, r3
 801716a:	f007 fad9 	bl	801e720 <ip4_route>
 801716e:	4601      	mov	r1, r0
 8017170:	697b      	ldr	r3, [r7, #20]
 8017172:	3304      	adds	r3, #4
 8017174:	461a      	mov	r2, r3
 8017176:	4620      	mov	r0, r4
 8017178:	f7ff fa22 	bl	80165c0 <tcp_eff_send_mss_netif>
 801717c:	4603      	mov	r3, r0
 801717e:	461a      	mov	r2, r3
 8017180:	697b      	ldr	r3, [r7, #20]
 8017182:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8017184:	2112      	movs	r1, #18
 8017186:	6978      	ldr	r0, [r7, #20]
 8017188:	f002 fc9c 	bl	8019ac4 <tcp_enqueue_flags>
 801718c:	4603      	mov	r3, r0
 801718e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8017190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017194:	2b00      	cmp	r3, #0
 8017196:	d004      	beq.n	80171a2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8017198:	2100      	movs	r1, #0
 801719a:	6978      	ldr	r0, [r7, #20]
 801719c:	f7fd feba 	bl	8014f14 <tcp_abandon>
      return;
 80171a0:	e006      	b.n	80171b0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80171a2:	6978      	ldr	r0, [r7, #20]
 80171a4:	f002 fd7c 	bl	8019ca0 <tcp_output>
  return;
 80171a8:	e001      	b.n	80171ae <tcp_listen_input+0x1be>
    return;
 80171aa:	bf00      	nop
 80171ac:	e000      	b.n	80171b0 <tcp_listen_input+0x1c0>
  return;
 80171ae:	bf00      	nop
}
 80171b0:	371c      	adds	r7, #28
 80171b2:	46bd      	mov	sp, r7
 80171b4:	bd90      	pop	{r4, r7, pc}
 80171b6:	bf00      	nop
 80171b8:	20012394 	.word	0x20012394
 80171bc:	08025654 	.word	0x08025654
 80171c0:	0802584c 	.word	0x0802584c
 80171c4:	080256a0 	.word	0x080256a0
 80171c8:	2001238c 	.word	0x2001238c
 80171cc:	20012392 	.word	0x20012392
 80171d0:	20012388 	.word	0x20012388
 80171d4:	20012378 	.word	0x20012378
 80171d8:	2000ebb4 	.word	0x2000ebb4
 80171dc:	2000ebb8 	.word	0x2000ebb8
 80171e0:	2000eba4 	.word	0x2000eba4
 80171e4:	2001235c 	.word	0x2001235c
 80171e8:	20012364 	.word	0x20012364

080171ec <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b086      	sub	sp, #24
 80171f0:	af04      	add	r7, sp, #16
 80171f2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80171f4:	4b2f      	ldr	r3, [pc, #188]	; (80172b4 <tcp_timewait_input+0xc8>)
 80171f6:	781b      	ldrb	r3, [r3, #0]
 80171f8:	f003 0304 	and.w	r3, r3, #4
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d153      	bne.n	80172a8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	2b00      	cmp	r3, #0
 8017204:	d106      	bne.n	8017214 <tcp_timewait_input+0x28>
 8017206:	4b2c      	ldr	r3, [pc, #176]	; (80172b8 <tcp_timewait_input+0xcc>)
 8017208:	f240 22ee 	movw	r2, #750	; 0x2ee
 801720c:	492b      	ldr	r1, [pc, #172]	; (80172bc <tcp_timewait_input+0xd0>)
 801720e:	482c      	ldr	r0, [pc, #176]	; (80172c0 <tcp_timewait_input+0xd4>)
 8017210:	f00a fa82 	bl	8021718 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8017214:	4b27      	ldr	r3, [pc, #156]	; (80172b4 <tcp_timewait_input+0xc8>)
 8017216:	781b      	ldrb	r3, [r3, #0]
 8017218:	f003 0302 	and.w	r3, r3, #2
 801721c:	2b00      	cmp	r3, #0
 801721e:	d02a      	beq.n	8017276 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8017220:	4b28      	ldr	r3, [pc, #160]	; (80172c4 <tcp_timewait_input+0xd8>)
 8017222:	681a      	ldr	r2, [r3, #0]
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017228:	1ad3      	subs	r3, r2, r3
 801722a:	2b00      	cmp	r3, #0
 801722c:	db2d      	blt.n	801728a <tcp_timewait_input+0x9e>
 801722e:	4b25      	ldr	r3, [pc, #148]	; (80172c4 <tcp_timewait_input+0xd8>)
 8017230:	681a      	ldr	r2, [r3, #0]
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017236:	6879      	ldr	r1, [r7, #4]
 8017238:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801723a:	440b      	add	r3, r1
 801723c:	1ad3      	subs	r3, r2, r3
 801723e:	2b00      	cmp	r3, #0
 8017240:	dc23      	bgt.n	801728a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017242:	4b21      	ldr	r3, [pc, #132]	; (80172c8 <tcp_timewait_input+0xdc>)
 8017244:	6819      	ldr	r1, [r3, #0]
 8017246:	4b21      	ldr	r3, [pc, #132]	; (80172cc <tcp_timewait_input+0xe0>)
 8017248:	881b      	ldrh	r3, [r3, #0]
 801724a:	461a      	mov	r2, r3
 801724c:	4b1d      	ldr	r3, [pc, #116]	; (80172c4 <tcp_timewait_input+0xd8>)
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017252:	4b1f      	ldr	r3, [pc, #124]	; (80172d0 <tcp_timewait_input+0xe4>)
 8017254:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017256:	885b      	ldrh	r3, [r3, #2]
 8017258:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801725a:	4a1d      	ldr	r2, [pc, #116]	; (80172d0 <tcp_timewait_input+0xe4>)
 801725c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801725e:	8812      	ldrh	r2, [r2, #0]
 8017260:	b292      	uxth	r2, r2
 8017262:	9202      	str	r2, [sp, #8]
 8017264:	9301      	str	r3, [sp, #4]
 8017266:	4b1b      	ldr	r3, [pc, #108]	; (80172d4 <tcp_timewait_input+0xe8>)
 8017268:	9300      	str	r3, [sp, #0]
 801726a:	4b1b      	ldr	r3, [pc, #108]	; (80172d8 <tcp_timewait_input+0xec>)
 801726c:	4602      	mov	r2, r0
 801726e:	6878      	ldr	r0, [r7, #4]
 8017270:	f003 faca 	bl	801a808 <tcp_rst>
      return;
 8017274:	e01b      	b.n	80172ae <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8017276:	4b0f      	ldr	r3, [pc, #60]	; (80172b4 <tcp_timewait_input+0xc8>)
 8017278:	781b      	ldrb	r3, [r3, #0]
 801727a:	f003 0301 	and.w	r3, r3, #1
 801727e:	2b00      	cmp	r3, #0
 8017280:	d003      	beq.n	801728a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8017282:	4b16      	ldr	r3, [pc, #88]	; (80172dc <tcp_timewait_input+0xf0>)
 8017284:	681a      	ldr	r2, [r3, #0]
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801728a:	4b10      	ldr	r3, [pc, #64]	; (80172cc <tcp_timewait_input+0xe0>)
 801728c:	881b      	ldrh	r3, [r3, #0]
 801728e:	2b00      	cmp	r3, #0
 8017290:	d00c      	beq.n	80172ac <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	8b5b      	ldrh	r3, [r3, #26]
 8017296:	f043 0302 	orr.w	r3, r3, #2
 801729a:	b29a      	uxth	r2, r3
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80172a0:	6878      	ldr	r0, [r7, #4]
 80172a2:	f002 fcfd 	bl	8019ca0 <tcp_output>
  }
  return;
 80172a6:	e001      	b.n	80172ac <tcp_timewait_input+0xc0>
    return;
 80172a8:	bf00      	nop
 80172aa:	e000      	b.n	80172ae <tcp_timewait_input+0xc2>
  return;
 80172ac:	bf00      	nop
}
 80172ae:	3708      	adds	r7, #8
 80172b0:	46bd      	mov	sp, r7
 80172b2:	bd80      	pop	{r7, pc}
 80172b4:	20012394 	.word	0x20012394
 80172b8:	08025654 	.word	0x08025654
 80172bc:	0802586c 	.word	0x0802586c
 80172c0:	080256a0 	.word	0x080256a0
 80172c4:	20012388 	.word	0x20012388
 80172c8:	2001238c 	.word	0x2001238c
 80172cc:	20012392 	.word	0x20012392
 80172d0:	20012378 	.word	0x20012378
 80172d4:	2000ebb4 	.word	0x2000ebb4
 80172d8:	2000ebb8 	.word	0x2000ebb8
 80172dc:	20012350 	.word	0x20012350

080172e0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80172e0:	b590      	push	{r4, r7, lr}
 80172e2:	b08d      	sub	sp, #52	; 0x34
 80172e4:	af04      	add	r7, sp, #16
 80172e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80172e8:	2300      	movs	r3, #0
 80172ea:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80172ec:	2300      	movs	r3, #0
 80172ee:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d106      	bne.n	8017304 <tcp_process+0x24>
 80172f6:	4b9d      	ldr	r3, [pc, #628]	; (801756c <tcp_process+0x28c>)
 80172f8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80172fc:	499c      	ldr	r1, [pc, #624]	; (8017570 <tcp_process+0x290>)
 80172fe:	489d      	ldr	r0, [pc, #628]	; (8017574 <tcp_process+0x294>)
 8017300:	f00a fa0a 	bl	8021718 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8017304:	4b9c      	ldr	r3, [pc, #624]	; (8017578 <tcp_process+0x298>)
 8017306:	781b      	ldrb	r3, [r3, #0]
 8017308:	f003 0304 	and.w	r3, r3, #4
 801730c:	2b00      	cmp	r3, #0
 801730e:	d04e      	beq.n	80173ae <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	7d1b      	ldrb	r3, [r3, #20]
 8017314:	2b02      	cmp	r3, #2
 8017316:	d108      	bne.n	801732a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801731c:	4b97      	ldr	r3, [pc, #604]	; (801757c <tcp_process+0x29c>)
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	429a      	cmp	r2, r3
 8017322:	d123      	bne.n	801736c <tcp_process+0x8c>
        acceptable = 1;
 8017324:	2301      	movs	r3, #1
 8017326:	76fb      	strb	r3, [r7, #27]
 8017328:	e020      	b.n	801736c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801732e:	4b94      	ldr	r3, [pc, #592]	; (8017580 <tcp_process+0x2a0>)
 8017330:	681b      	ldr	r3, [r3, #0]
 8017332:	429a      	cmp	r2, r3
 8017334:	d102      	bne.n	801733c <tcp_process+0x5c>
        acceptable = 1;
 8017336:	2301      	movs	r3, #1
 8017338:	76fb      	strb	r3, [r7, #27]
 801733a:	e017      	b.n	801736c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801733c:	4b90      	ldr	r3, [pc, #576]	; (8017580 <tcp_process+0x2a0>)
 801733e:	681a      	ldr	r2, [r3, #0]
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017344:	1ad3      	subs	r3, r2, r3
 8017346:	2b00      	cmp	r3, #0
 8017348:	db10      	blt.n	801736c <tcp_process+0x8c>
 801734a:	4b8d      	ldr	r3, [pc, #564]	; (8017580 <tcp_process+0x2a0>)
 801734c:	681a      	ldr	r2, [r3, #0]
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017352:	6879      	ldr	r1, [r7, #4]
 8017354:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017356:	440b      	add	r3, r1
 8017358:	1ad3      	subs	r3, r2, r3
 801735a:	2b00      	cmp	r3, #0
 801735c:	dc06      	bgt.n	801736c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	8b5b      	ldrh	r3, [r3, #26]
 8017362:	f043 0302 	orr.w	r3, r3, #2
 8017366:	b29a      	uxth	r2, r3
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801736c:	7efb      	ldrb	r3, [r7, #27]
 801736e:	2b00      	cmp	r3, #0
 8017370:	d01b      	beq.n	80173aa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	7d1b      	ldrb	r3, [r3, #20]
 8017376:	2b00      	cmp	r3, #0
 8017378:	d106      	bne.n	8017388 <tcp_process+0xa8>
 801737a:	4b7c      	ldr	r3, [pc, #496]	; (801756c <tcp_process+0x28c>)
 801737c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8017380:	4980      	ldr	r1, [pc, #512]	; (8017584 <tcp_process+0x2a4>)
 8017382:	487c      	ldr	r0, [pc, #496]	; (8017574 <tcp_process+0x294>)
 8017384:	f00a f9c8 	bl	8021718 <iprintf>
      recv_flags |= TF_RESET;
 8017388:	4b7f      	ldr	r3, [pc, #508]	; (8017588 <tcp_process+0x2a8>)
 801738a:	781b      	ldrb	r3, [r3, #0]
 801738c:	f043 0308 	orr.w	r3, r3, #8
 8017390:	b2da      	uxtb	r2, r3
 8017392:	4b7d      	ldr	r3, [pc, #500]	; (8017588 <tcp_process+0x2a8>)
 8017394:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	8b5b      	ldrh	r3, [r3, #26]
 801739a:	f023 0301 	bic.w	r3, r3, #1
 801739e:	b29a      	uxth	r2, r3
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80173a4:	f06f 030d 	mvn.w	r3, #13
 80173a8:	e37a      	b.n	8017aa0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80173aa:	2300      	movs	r3, #0
 80173ac:	e378      	b.n	8017aa0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80173ae:	4b72      	ldr	r3, [pc, #456]	; (8017578 <tcp_process+0x298>)
 80173b0:	781b      	ldrb	r3, [r3, #0]
 80173b2:	f003 0302 	and.w	r3, r3, #2
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d010      	beq.n	80173dc <tcp_process+0xfc>
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	7d1b      	ldrb	r3, [r3, #20]
 80173be:	2b02      	cmp	r3, #2
 80173c0:	d00c      	beq.n	80173dc <tcp_process+0xfc>
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	7d1b      	ldrb	r3, [r3, #20]
 80173c6:	2b03      	cmp	r3, #3
 80173c8:	d008      	beq.n	80173dc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	8b5b      	ldrh	r3, [r3, #26]
 80173ce:	f043 0302 	orr.w	r3, r3, #2
 80173d2:	b29a      	uxth	r2, r3
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80173d8:	2300      	movs	r3, #0
 80173da:	e361      	b.n	8017aa0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	8b5b      	ldrh	r3, [r3, #26]
 80173e0:	f003 0310 	and.w	r3, r3, #16
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d103      	bne.n	80173f0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80173e8:	4b68      	ldr	r3, [pc, #416]	; (801758c <tcp_process+0x2ac>)
 80173ea:	681a      	ldr	r2, [r3, #0]
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	2200      	movs	r2, #0
 80173f4:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
  pcb->persist_probe = 0;
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	2200      	movs	r2, #0
 80173fc:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2

  tcp_parseopt(pcb);
 8017400:	6878      	ldr	r0, [r7, #4]
 8017402:	f001 fc2f 	bl	8018c64 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	7d1b      	ldrb	r3, [r3, #20]
 801740a:	3b02      	subs	r3, #2
 801740c:	2b07      	cmp	r3, #7
 801740e:	f200 8337 	bhi.w	8017a80 <tcp_process+0x7a0>
 8017412:	a201      	add	r2, pc, #4	; (adr r2, 8017418 <tcp_process+0x138>)
 8017414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017418:	08017439 	.word	0x08017439
 801741c:	08017669 	.word	0x08017669
 8017420:	080177e1 	.word	0x080177e1
 8017424:	0801780b 	.word	0x0801780b
 8017428:	0801792f 	.word	0x0801792f
 801742c:	080177e1 	.word	0x080177e1
 8017430:	080179bb 	.word	0x080179bb
 8017434:	08017a4b 	.word	0x08017a4b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8017438:	4b4f      	ldr	r3, [pc, #316]	; (8017578 <tcp_process+0x298>)
 801743a:	781b      	ldrb	r3, [r3, #0]
 801743c:	f003 0310 	and.w	r3, r3, #16
 8017440:	2b00      	cmp	r3, #0
 8017442:	f000 80e4 	beq.w	801760e <tcp_process+0x32e>
 8017446:	4b4c      	ldr	r3, [pc, #304]	; (8017578 <tcp_process+0x298>)
 8017448:	781b      	ldrb	r3, [r3, #0]
 801744a:	f003 0302 	and.w	r3, r3, #2
 801744e:	2b00      	cmp	r3, #0
 8017450:	f000 80dd 	beq.w	801760e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017458:	1c5a      	adds	r2, r3, #1
 801745a:	4b48      	ldr	r3, [pc, #288]	; (801757c <tcp_process+0x29c>)
 801745c:	681b      	ldr	r3, [r3, #0]
 801745e:	429a      	cmp	r2, r3
 8017460:	f040 80d5 	bne.w	801760e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8017464:	4b46      	ldr	r3, [pc, #280]	; (8017580 <tcp_process+0x2a0>)
 8017466:	681b      	ldr	r3, [r3, #0]
 8017468:	1c5a      	adds	r2, r3, #1
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8017476:	4b41      	ldr	r3, [pc, #260]	; (801757c <tcp_process+0x29c>)
 8017478:	681a      	ldr	r2, [r3, #0]
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801747e:	4b44      	ldr	r3, [pc, #272]	; (8017590 <tcp_process+0x2b0>)
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	89db      	ldrh	r3, [r3, #14]
 8017484:	b29a      	uxth	r2, r3
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8017498:	4b39      	ldr	r3, [pc, #228]	; (8017580 <tcp_process+0x2a0>)
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	1e5a      	subs	r2, r3, #1
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	2204      	movs	r2, #4
 80174a6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	3304      	adds	r3, #4
 80174b0:	4618      	mov	r0, r3
 80174b2:	f007 f935 	bl	801e720 <ip4_route>
 80174b6:	4601      	mov	r1, r0
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	3304      	adds	r3, #4
 80174bc:	461a      	mov	r2, r3
 80174be:	4620      	mov	r0, r4
 80174c0:	f7ff f87e 	bl	80165c0 <tcp_eff_send_mss_netif>
 80174c4:	4603      	mov	r3, r0
 80174c6:	461a      	mov	r2, r3
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174d0:	009a      	lsls	r2, r3, #2
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174d6:	005b      	lsls	r3, r3, #1
 80174d8:	f241 111c 	movw	r1, #4380	; 0x111c
 80174dc:	428b      	cmp	r3, r1
 80174de:	bf38      	it	cc
 80174e0:	460b      	movcc	r3, r1
 80174e2:	429a      	cmp	r2, r3
 80174e4:	d204      	bcs.n	80174f0 <tcp_process+0x210>
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174ea:	009b      	lsls	r3, r3, #2
 80174ec:	b29b      	uxth	r3, r3
 80174ee:	e00d      	b.n	801750c <tcp_process+0x22c>
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174f4:	005b      	lsls	r3, r3, #1
 80174f6:	f241 121c 	movw	r2, #4380	; 0x111c
 80174fa:	4293      	cmp	r3, r2
 80174fc:	d904      	bls.n	8017508 <tcp_process+0x228>
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017502:	005b      	lsls	r3, r3, #1
 8017504:	b29b      	uxth	r3, r3
 8017506:	e001      	b.n	801750c <tcp_process+0x22c>
 8017508:	f241 131c 	movw	r3, #4380	; 0x111c
 801750c:	687a      	ldr	r2, [r7, #4]
 801750e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017518:	2b00      	cmp	r3, #0
 801751a:	d106      	bne.n	801752a <tcp_process+0x24a>
 801751c:	4b13      	ldr	r3, [pc, #76]	; (801756c <tcp_process+0x28c>)
 801751e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8017522:	491c      	ldr	r1, [pc, #112]	; (8017594 <tcp_process+0x2b4>)
 8017524:	4813      	ldr	r0, [pc, #76]	; (8017574 <tcp_process+0x294>)
 8017526:	f00a f8f7 	bl	8021718 <iprintf>
        --pcb->snd_queuelen;
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017530:	3b01      	subs	r3, #1
 8017532:	b29a      	uxth	r2, r3
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801753e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8017540:	69fb      	ldr	r3, [r7, #28]
 8017542:	2b00      	cmp	r3, #0
 8017544:	d12a      	bne.n	801759c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801754a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801754c:	69fb      	ldr	r3, [r7, #28]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d106      	bne.n	8017560 <tcp_process+0x280>
 8017552:	4b06      	ldr	r3, [pc, #24]	; (801756c <tcp_process+0x28c>)
 8017554:	f44f 725d 	mov.w	r2, #884	; 0x374
 8017558:	490f      	ldr	r1, [pc, #60]	; (8017598 <tcp_process+0x2b8>)
 801755a:	4806      	ldr	r0, [pc, #24]	; (8017574 <tcp_process+0x294>)
 801755c:	f00a f8dc 	bl	8021718 <iprintf>
          pcb->unsent = rseg->next;
 8017560:	69fb      	ldr	r3, [r7, #28]
 8017562:	681a      	ldr	r2, [r3, #0]
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	66da      	str	r2, [r3, #108]	; 0x6c
 8017568:	e01c      	b.n	80175a4 <tcp_process+0x2c4>
 801756a:	bf00      	nop
 801756c:	08025654 	.word	0x08025654
 8017570:	0802588c 	.word	0x0802588c
 8017574:	080256a0 	.word	0x080256a0
 8017578:	20012394 	.word	0x20012394
 801757c:	2001238c 	.word	0x2001238c
 8017580:	20012388 	.word	0x20012388
 8017584:	080258a8 	.word	0x080258a8
 8017588:	20012395 	.word	0x20012395
 801758c:	20012350 	.word	0x20012350
 8017590:	20012378 	.word	0x20012378
 8017594:	080258c8 	.word	0x080258c8
 8017598:	080258e0 	.word	0x080258e0
        } else {
          pcb->unacked = rseg->next;
 801759c:	69fb      	ldr	r3, [r7, #28]
 801759e:	681a      	ldr	r2, [r3, #0]
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80175a4:	69f8      	ldr	r0, [r7, #28]
 80175a6:	f7fe fc3c 	bl	8015e22 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d104      	bne.n	80175bc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80175b8:	861a      	strh	r2, [r3, #48]	; 0x30
 80175ba:	e006      	b.n	80175ca <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	2200      	movs	r2, #0
 80175c0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	2200      	movs	r2, #0
 80175c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d00a      	beq.n	80175ea <tcp_process+0x30a>
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80175da:	687a      	ldr	r2, [r7, #4]
 80175dc:	6910      	ldr	r0, [r2, #16]
 80175de:	2200      	movs	r2, #0
 80175e0:	6879      	ldr	r1, [r7, #4]
 80175e2:	4798      	blx	r3
 80175e4:	4603      	mov	r3, r0
 80175e6:	76bb      	strb	r3, [r7, #26]
 80175e8:	e001      	b.n	80175ee <tcp_process+0x30e>
 80175ea:	2300      	movs	r3, #0
 80175ec:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80175ee:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80175f2:	f113 0f0d 	cmn.w	r3, #13
 80175f6:	d102      	bne.n	80175fe <tcp_process+0x31e>
          return ERR_ABRT;
 80175f8:	f06f 030c 	mvn.w	r3, #12
 80175fc:	e250      	b.n	8017aa0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	8b5b      	ldrh	r3, [r3, #26]
 8017602:	f043 0302 	orr.w	r3, r3, #2
 8017606:	b29a      	uxth	r2, r3
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801760c:	e23a      	b.n	8017a84 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801760e:	4b98      	ldr	r3, [pc, #608]	; (8017870 <tcp_process+0x590>)
 8017610:	781b      	ldrb	r3, [r3, #0]
 8017612:	f003 0310 	and.w	r3, r3, #16
 8017616:	2b00      	cmp	r3, #0
 8017618:	f000 8234 	beq.w	8017a84 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801761c:	4b95      	ldr	r3, [pc, #596]	; (8017874 <tcp_process+0x594>)
 801761e:	6819      	ldr	r1, [r3, #0]
 8017620:	4b95      	ldr	r3, [pc, #596]	; (8017878 <tcp_process+0x598>)
 8017622:	881b      	ldrh	r3, [r3, #0]
 8017624:	461a      	mov	r2, r3
 8017626:	4b95      	ldr	r3, [pc, #596]	; (801787c <tcp_process+0x59c>)
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801762c:	4b94      	ldr	r3, [pc, #592]	; (8017880 <tcp_process+0x5a0>)
 801762e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017630:	885b      	ldrh	r3, [r3, #2]
 8017632:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017634:	4a92      	ldr	r2, [pc, #584]	; (8017880 <tcp_process+0x5a0>)
 8017636:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017638:	8812      	ldrh	r2, [r2, #0]
 801763a:	b292      	uxth	r2, r2
 801763c:	9202      	str	r2, [sp, #8]
 801763e:	9301      	str	r3, [sp, #4]
 8017640:	4b90      	ldr	r3, [pc, #576]	; (8017884 <tcp_process+0x5a4>)
 8017642:	9300      	str	r3, [sp, #0]
 8017644:	4b90      	ldr	r3, [pc, #576]	; (8017888 <tcp_process+0x5a8>)
 8017646:	4602      	mov	r2, r0
 8017648:	6878      	ldr	r0, [r7, #4]
 801764a:	f003 f8dd 	bl	801a808 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017654:	2b05      	cmp	r3, #5
 8017656:	f200 8215 	bhi.w	8017a84 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	2200      	movs	r2, #0
 801765e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8017660:	6878      	ldr	r0, [r7, #4]
 8017662:	f002 fea9 	bl	801a3b8 <tcp_rexmit_rto>
      break;
 8017666:	e20d      	b.n	8017a84 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017668:	4b81      	ldr	r3, [pc, #516]	; (8017870 <tcp_process+0x590>)
 801766a:	781b      	ldrb	r3, [r3, #0]
 801766c:	f003 0310 	and.w	r3, r3, #16
 8017670:	2b00      	cmp	r3, #0
 8017672:	f000 80a1 	beq.w	80177b8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017676:	4b7f      	ldr	r3, [pc, #508]	; (8017874 <tcp_process+0x594>)
 8017678:	681a      	ldr	r2, [r3, #0]
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801767e:	1ad3      	subs	r3, r2, r3
 8017680:	3b01      	subs	r3, #1
 8017682:	2b00      	cmp	r3, #0
 8017684:	db7e      	blt.n	8017784 <tcp_process+0x4a4>
 8017686:	4b7b      	ldr	r3, [pc, #492]	; (8017874 <tcp_process+0x594>)
 8017688:	681a      	ldr	r2, [r3, #0]
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801768e:	1ad3      	subs	r3, r2, r3
 8017690:	2b00      	cmp	r3, #0
 8017692:	dc77      	bgt.n	8017784 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	2204      	movs	r2, #4
 8017698:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d102      	bne.n	80176a8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80176a2:	23fa      	movs	r3, #250	; 0xfa
 80176a4:	76bb      	strb	r3, [r7, #26]
 80176a6:	e01d      	b.n	80176e4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80176ac:	699b      	ldr	r3, [r3, #24]
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d106      	bne.n	80176c0 <tcp_process+0x3e0>
 80176b2:	4b76      	ldr	r3, [pc, #472]	; (801788c <tcp_process+0x5ac>)
 80176b4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80176b8:	4975      	ldr	r1, [pc, #468]	; (8017890 <tcp_process+0x5b0>)
 80176ba:	4876      	ldr	r0, [pc, #472]	; (8017894 <tcp_process+0x5b4>)
 80176bc:	f00a f82c 	bl	8021718 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80176c4:	699b      	ldr	r3, [r3, #24]
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d00a      	beq.n	80176e0 <tcp_process+0x400>
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80176ce:	699b      	ldr	r3, [r3, #24]
 80176d0:	687a      	ldr	r2, [r7, #4]
 80176d2:	6910      	ldr	r0, [r2, #16]
 80176d4:	2200      	movs	r2, #0
 80176d6:	6879      	ldr	r1, [r7, #4]
 80176d8:	4798      	blx	r3
 80176da:	4603      	mov	r3, r0
 80176dc:	76bb      	strb	r3, [r7, #26]
 80176de:	e001      	b.n	80176e4 <tcp_process+0x404>
 80176e0:	23f0      	movs	r3, #240	; 0xf0
 80176e2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80176e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d00a      	beq.n	8017702 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80176ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80176f0:	f113 0f0d 	cmn.w	r3, #13
 80176f4:	d002      	beq.n	80176fc <tcp_process+0x41c>
              tcp_abort(pcb);
 80176f6:	6878      	ldr	r0, [r7, #4]
 80176f8:	f7fd fcca 	bl	8015090 <tcp_abort>
            }
            return ERR_ABRT;
 80176fc:	f06f 030c 	mvn.w	r3, #12
 8017700:	e1ce      	b.n	8017aa0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8017702:	6878      	ldr	r0, [r7, #4]
 8017704:	f000 fae0 	bl	8017cc8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8017708:	4b63      	ldr	r3, [pc, #396]	; (8017898 <tcp_process+0x5b8>)
 801770a:	881b      	ldrh	r3, [r3, #0]
 801770c:	2b00      	cmp	r3, #0
 801770e:	d005      	beq.n	801771c <tcp_process+0x43c>
            recv_acked--;
 8017710:	4b61      	ldr	r3, [pc, #388]	; (8017898 <tcp_process+0x5b8>)
 8017712:	881b      	ldrh	r3, [r3, #0]
 8017714:	3b01      	subs	r3, #1
 8017716:	b29a      	uxth	r2, r3
 8017718:	4b5f      	ldr	r3, [pc, #380]	; (8017898 <tcp_process+0x5b8>)
 801771a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017720:	009a      	lsls	r2, r3, #2
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017726:	005b      	lsls	r3, r3, #1
 8017728:	f241 111c 	movw	r1, #4380	; 0x111c
 801772c:	428b      	cmp	r3, r1
 801772e:	bf38      	it	cc
 8017730:	460b      	movcc	r3, r1
 8017732:	429a      	cmp	r2, r3
 8017734:	d204      	bcs.n	8017740 <tcp_process+0x460>
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801773a:	009b      	lsls	r3, r3, #2
 801773c:	b29b      	uxth	r3, r3
 801773e:	e00d      	b.n	801775c <tcp_process+0x47c>
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017744:	005b      	lsls	r3, r3, #1
 8017746:	f241 121c 	movw	r2, #4380	; 0x111c
 801774a:	4293      	cmp	r3, r2
 801774c:	d904      	bls.n	8017758 <tcp_process+0x478>
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017752:	005b      	lsls	r3, r3, #1
 8017754:	b29b      	uxth	r3, r3
 8017756:	e001      	b.n	801775c <tcp_process+0x47c>
 8017758:	f241 131c 	movw	r3, #4380	; 0x111c
 801775c:	687a      	ldr	r2, [r7, #4]
 801775e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8017762:	4b4e      	ldr	r3, [pc, #312]	; (801789c <tcp_process+0x5bc>)
 8017764:	781b      	ldrb	r3, [r3, #0]
 8017766:	f003 0320 	and.w	r3, r3, #32
 801776a:	2b00      	cmp	r3, #0
 801776c:	d037      	beq.n	80177de <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	8b5b      	ldrh	r3, [r3, #26]
 8017772:	f043 0302 	orr.w	r3, r3, #2
 8017776:	b29a      	uxth	r2, r3
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	2207      	movs	r2, #7
 8017780:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8017782:	e02c      	b.n	80177de <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017784:	4b3b      	ldr	r3, [pc, #236]	; (8017874 <tcp_process+0x594>)
 8017786:	6819      	ldr	r1, [r3, #0]
 8017788:	4b3b      	ldr	r3, [pc, #236]	; (8017878 <tcp_process+0x598>)
 801778a:	881b      	ldrh	r3, [r3, #0]
 801778c:	461a      	mov	r2, r3
 801778e:	4b3b      	ldr	r3, [pc, #236]	; (801787c <tcp_process+0x59c>)
 8017790:	681b      	ldr	r3, [r3, #0]
 8017792:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017794:	4b3a      	ldr	r3, [pc, #232]	; (8017880 <tcp_process+0x5a0>)
 8017796:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017798:	885b      	ldrh	r3, [r3, #2]
 801779a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801779c:	4a38      	ldr	r2, [pc, #224]	; (8017880 <tcp_process+0x5a0>)
 801779e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80177a0:	8812      	ldrh	r2, [r2, #0]
 80177a2:	b292      	uxth	r2, r2
 80177a4:	9202      	str	r2, [sp, #8]
 80177a6:	9301      	str	r3, [sp, #4]
 80177a8:	4b36      	ldr	r3, [pc, #216]	; (8017884 <tcp_process+0x5a4>)
 80177aa:	9300      	str	r3, [sp, #0]
 80177ac:	4b36      	ldr	r3, [pc, #216]	; (8017888 <tcp_process+0x5a8>)
 80177ae:	4602      	mov	r2, r0
 80177b0:	6878      	ldr	r0, [r7, #4]
 80177b2:	f003 f829 	bl	801a808 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80177b6:	e167      	b.n	8017a88 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80177b8:	4b2d      	ldr	r3, [pc, #180]	; (8017870 <tcp_process+0x590>)
 80177ba:	781b      	ldrb	r3, [r3, #0]
 80177bc:	f003 0302 	and.w	r3, r3, #2
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	f000 8161 	beq.w	8017a88 <tcp_process+0x7a8>
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177ca:	1e5a      	subs	r2, r3, #1
 80177cc:	4b2b      	ldr	r3, [pc, #172]	; (801787c <tcp_process+0x59c>)
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	429a      	cmp	r2, r3
 80177d2:	f040 8159 	bne.w	8017a88 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80177d6:	6878      	ldr	r0, [r7, #4]
 80177d8:	f002 fe10 	bl	801a3fc <tcp_rexmit>
      break;
 80177dc:	e154      	b.n	8017a88 <tcp_process+0x7a8>
 80177de:	e153      	b.n	8017a88 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80177e0:	6878      	ldr	r0, [r7, #4]
 80177e2:	f000 fa71 	bl	8017cc8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80177e6:	4b2d      	ldr	r3, [pc, #180]	; (801789c <tcp_process+0x5bc>)
 80177e8:	781b      	ldrb	r3, [r3, #0]
 80177ea:	f003 0320 	and.w	r3, r3, #32
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	f000 814c 	beq.w	8017a8c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	8b5b      	ldrh	r3, [r3, #26]
 80177f8:	f043 0302 	orr.w	r3, r3, #2
 80177fc:	b29a      	uxth	r2, r3
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	2207      	movs	r2, #7
 8017806:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017808:	e140      	b.n	8017a8c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801780a:	6878      	ldr	r0, [r7, #4]
 801780c:	f000 fa5c 	bl	8017cc8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017810:	4b22      	ldr	r3, [pc, #136]	; (801789c <tcp_process+0x5bc>)
 8017812:	781b      	ldrb	r3, [r3, #0]
 8017814:	f003 0320 	and.w	r3, r3, #32
 8017818:	2b00      	cmp	r3, #0
 801781a:	d071      	beq.n	8017900 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801781c:	4b14      	ldr	r3, [pc, #80]	; (8017870 <tcp_process+0x590>)
 801781e:	781b      	ldrb	r3, [r3, #0]
 8017820:	f003 0310 	and.w	r3, r3, #16
 8017824:	2b00      	cmp	r3, #0
 8017826:	d060      	beq.n	80178ea <tcp_process+0x60a>
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801782c:	4b11      	ldr	r3, [pc, #68]	; (8017874 <tcp_process+0x594>)
 801782e:	681b      	ldr	r3, [r3, #0]
 8017830:	429a      	cmp	r2, r3
 8017832:	d15a      	bne.n	80178ea <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017838:	2b00      	cmp	r3, #0
 801783a:	d156      	bne.n	80178ea <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	8b5b      	ldrh	r3, [r3, #26]
 8017840:	f043 0302 	orr.w	r3, r3, #2
 8017844:	b29a      	uxth	r2, r3
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801784a:	6878      	ldr	r0, [r7, #4]
 801784c:	f7fe fdae 	bl	80163ac <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8017850:	4b13      	ldr	r3, [pc, #76]	; (80178a0 <tcp_process+0x5c0>)
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	687a      	ldr	r2, [r7, #4]
 8017856:	429a      	cmp	r2, r3
 8017858:	d105      	bne.n	8017866 <tcp_process+0x586>
 801785a:	4b11      	ldr	r3, [pc, #68]	; (80178a0 <tcp_process+0x5c0>)
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	68db      	ldr	r3, [r3, #12]
 8017860:	4a0f      	ldr	r2, [pc, #60]	; (80178a0 <tcp_process+0x5c0>)
 8017862:	6013      	str	r3, [r2, #0]
 8017864:	e02e      	b.n	80178c4 <tcp_process+0x5e4>
 8017866:	4b0e      	ldr	r3, [pc, #56]	; (80178a0 <tcp_process+0x5c0>)
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	617b      	str	r3, [r7, #20]
 801786c:	e027      	b.n	80178be <tcp_process+0x5de>
 801786e:	bf00      	nop
 8017870:	20012394 	.word	0x20012394
 8017874:	2001238c 	.word	0x2001238c
 8017878:	20012392 	.word	0x20012392
 801787c:	20012388 	.word	0x20012388
 8017880:	20012378 	.word	0x20012378
 8017884:	2000ebb4 	.word	0x2000ebb4
 8017888:	2000ebb8 	.word	0x2000ebb8
 801788c:	08025654 	.word	0x08025654
 8017890:	080258f4 	.word	0x080258f4
 8017894:	080256a0 	.word	0x080256a0
 8017898:	20012390 	.word	0x20012390
 801789c:	20012395 	.word	0x20012395
 80178a0:	2001235c 	.word	0x2001235c
 80178a4:	697b      	ldr	r3, [r7, #20]
 80178a6:	68db      	ldr	r3, [r3, #12]
 80178a8:	687a      	ldr	r2, [r7, #4]
 80178aa:	429a      	cmp	r2, r3
 80178ac:	d104      	bne.n	80178b8 <tcp_process+0x5d8>
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	68da      	ldr	r2, [r3, #12]
 80178b2:	697b      	ldr	r3, [r7, #20]
 80178b4:	60da      	str	r2, [r3, #12]
 80178b6:	e005      	b.n	80178c4 <tcp_process+0x5e4>
 80178b8:	697b      	ldr	r3, [r7, #20]
 80178ba:	68db      	ldr	r3, [r3, #12]
 80178bc:	617b      	str	r3, [r7, #20]
 80178be:	697b      	ldr	r3, [r7, #20]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d1ef      	bne.n	80178a4 <tcp_process+0x5c4>
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	2200      	movs	r2, #0
 80178c8:	60da      	str	r2, [r3, #12]
 80178ca:	4b77      	ldr	r3, [pc, #476]	; (8017aa8 <tcp_process+0x7c8>)
 80178cc:	2201      	movs	r2, #1
 80178ce:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	220a      	movs	r2, #10
 80178d4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80178d6:	4b75      	ldr	r3, [pc, #468]	; (8017aac <tcp_process+0x7cc>)
 80178d8:	681a      	ldr	r2, [r3, #0]
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	60da      	str	r2, [r3, #12]
 80178de:	4a73      	ldr	r2, [pc, #460]	; (8017aac <tcp_process+0x7cc>)
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	6013      	str	r3, [r2, #0]
 80178e4:	f003 f952 	bl	801ab8c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80178e8:	e0d2      	b.n	8017a90 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	8b5b      	ldrh	r3, [r3, #26]
 80178ee:	f043 0302 	orr.w	r3, r3, #2
 80178f2:	b29a      	uxth	r2, r3
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	2208      	movs	r2, #8
 80178fc:	751a      	strb	r2, [r3, #20]
      break;
 80178fe:	e0c7      	b.n	8017a90 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017900:	4b6b      	ldr	r3, [pc, #428]	; (8017ab0 <tcp_process+0x7d0>)
 8017902:	781b      	ldrb	r3, [r3, #0]
 8017904:	f003 0310 	and.w	r3, r3, #16
 8017908:	2b00      	cmp	r3, #0
 801790a:	f000 80c1 	beq.w	8017a90 <tcp_process+0x7b0>
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017912:	4b68      	ldr	r3, [pc, #416]	; (8017ab4 <tcp_process+0x7d4>)
 8017914:	681b      	ldr	r3, [r3, #0]
 8017916:	429a      	cmp	r2, r3
 8017918:	f040 80ba 	bne.w	8017a90 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017920:	2b00      	cmp	r3, #0
 8017922:	f040 80b5 	bne.w	8017a90 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	2206      	movs	r2, #6
 801792a:	751a      	strb	r2, [r3, #20]
      break;
 801792c:	e0b0      	b.n	8017a90 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801792e:	6878      	ldr	r0, [r7, #4]
 8017930:	f000 f9ca 	bl	8017cc8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017934:	4b60      	ldr	r3, [pc, #384]	; (8017ab8 <tcp_process+0x7d8>)
 8017936:	781b      	ldrb	r3, [r3, #0]
 8017938:	f003 0320 	and.w	r3, r3, #32
 801793c:	2b00      	cmp	r3, #0
 801793e:	f000 80a9 	beq.w	8017a94 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	8b5b      	ldrh	r3, [r3, #26]
 8017946:	f043 0302 	orr.w	r3, r3, #2
 801794a:	b29a      	uxth	r2, r3
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8017950:	6878      	ldr	r0, [r7, #4]
 8017952:	f7fe fd2b 	bl	80163ac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017956:	4b59      	ldr	r3, [pc, #356]	; (8017abc <tcp_process+0x7dc>)
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	687a      	ldr	r2, [r7, #4]
 801795c:	429a      	cmp	r2, r3
 801795e:	d105      	bne.n	801796c <tcp_process+0x68c>
 8017960:	4b56      	ldr	r3, [pc, #344]	; (8017abc <tcp_process+0x7dc>)
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	68db      	ldr	r3, [r3, #12]
 8017966:	4a55      	ldr	r2, [pc, #340]	; (8017abc <tcp_process+0x7dc>)
 8017968:	6013      	str	r3, [r2, #0]
 801796a:	e013      	b.n	8017994 <tcp_process+0x6b4>
 801796c:	4b53      	ldr	r3, [pc, #332]	; (8017abc <tcp_process+0x7dc>)
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	613b      	str	r3, [r7, #16]
 8017972:	e00c      	b.n	801798e <tcp_process+0x6ae>
 8017974:	693b      	ldr	r3, [r7, #16]
 8017976:	68db      	ldr	r3, [r3, #12]
 8017978:	687a      	ldr	r2, [r7, #4]
 801797a:	429a      	cmp	r2, r3
 801797c:	d104      	bne.n	8017988 <tcp_process+0x6a8>
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	68da      	ldr	r2, [r3, #12]
 8017982:	693b      	ldr	r3, [r7, #16]
 8017984:	60da      	str	r2, [r3, #12]
 8017986:	e005      	b.n	8017994 <tcp_process+0x6b4>
 8017988:	693b      	ldr	r3, [r7, #16]
 801798a:	68db      	ldr	r3, [r3, #12]
 801798c:	613b      	str	r3, [r7, #16]
 801798e:	693b      	ldr	r3, [r7, #16]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d1ef      	bne.n	8017974 <tcp_process+0x694>
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	2200      	movs	r2, #0
 8017998:	60da      	str	r2, [r3, #12]
 801799a:	4b43      	ldr	r3, [pc, #268]	; (8017aa8 <tcp_process+0x7c8>)
 801799c:	2201      	movs	r2, #1
 801799e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	220a      	movs	r2, #10
 80179a4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80179a6:	4b41      	ldr	r3, [pc, #260]	; (8017aac <tcp_process+0x7cc>)
 80179a8:	681a      	ldr	r2, [r3, #0]
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	60da      	str	r2, [r3, #12]
 80179ae:	4a3f      	ldr	r2, [pc, #252]	; (8017aac <tcp_process+0x7cc>)
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	6013      	str	r3, [r2, #0]
 80179b4:	f003 f8ea 	bl	801ab8c <tcp_timer_needed>
      }
      break;
 80179b8:	e06c      	b.n	8017a94 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80179ba:	6878      	ldr	r0, [r7, #4]
 80179bc:	f000 f984 	bl	8017cc8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80179c0:	4b3b      	ldr	r3, [pc, #236]	; (8017ab0 <tcp_process+0x7d0>)
 80179c2:	781b      	ldrb	r3, [r3, #0]
 80179c4:	f003 0310 	and.w	r3, r3, #16
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d065      	beq.n	8017a98 <tcp_process+0x7b8>
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80179d0:	4b38      	ldr	r3, [pc, #224]	; (8017ab4 <tcp_process+0x7d4>)
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	429a      	cmp	r2, r3
 80179d6:	d15f      	bne.n	8017a98 <tcp_process+0x7b8>
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d15b      	bne.n	8017a98 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80179e0:	6878      	ldr	r0, [r7, #4]
 80179e2:	f7fe fce3 	bl	80163ac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80179e6:	4b35      	ldr	r3, [pc, #212]	; (8017abc <tcp_process+0x7dc>)
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	687a      	ldr	r2, [r7, #4]
 80179ec:	429a      	cmp	r2, r3
 80179ee:	d105      	bne.n	80179fc <tcp_process+0x71c>
 80179f0:	4b32      	ldr	r3, [pc, #200]	; (8017abc <tcp_process+0x7dc>)
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	68db      	ldr	r3, [r3, #12]
 80179f6:	4a31      	ldr	r2, [pc, #196]	; (8017abc <tcp_process+0x7dc>)
 80179f8:	6013      	str	r3, [r2, #0]
 80179fa:	e013      	b.n	8017a24 <tcp_process+0x744>
 80179fc:	4b2f      	ldr	r3, [pc, #188]	; (8017abc <tcp_process+0x7dc>)
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	60fb      	str	r3, [r7, #12]
 8017a02:	e00c      	b.n	8017a1e <tcp_process+0x73e>
 8017a04:	68fb      	ldr	r3, [r7, #12]
 8017a06:	68db      	ldr	r3, [r3, #12]
 8017a08:	687a      	ldr	r2, [r7, #4]
 8017a0a:	429a      	cmp	r2, r3
 8017a0c:	d104      	bne.n	8017a18 <tcp_process+0x738>
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	68da      	ldr	r2, [r3, #12]
 8017a12:	68fb      	ldr	r3, [r7, #12]
 8017a14:	60da      	str	r2, [r3, #12]
 8017a16:	e005      	b.n	8017a24 <tcp_process+0x744>
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	68db      	ldr	r3, [r3, #12]
 8017a1c:	60fb      	str	r3, [r7, #12]
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d1ef      	bne.n	8017a04 <tcp_process+0x724>
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	2200      	movs	r2, #0
 8017a28:	60da      	str	r2, [r3, #12]
 8017a2a:	4b1f      	ldr	r3, [pc, #124]	; (8017aa8 <tcp_process+0x7c8>)
 8017a2c:	2201      	movs	r2, #1
 8017a2e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	220a      	movs	r2, #10
 8017a34:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017a36:	4b1d      	ldr	r3, [pc, #116]	; (8017aac <tcp_process+0x7cc>)
 8017a38:	681a      	ldr	r2, [r3, #0]
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	60da      	str	r2, [r3, #12]
 8017a3e:	4a1b      	ldr	r2, [pc, #108]	; (8017aac <tcp_process+0x7cc>)
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	6013      	str	r3, [r2, #0]
 8017a44:	f003 f8a2 	bl	801ab8c <tcp_timer_needed>
      }
      break;
 8017a48:	e026      	b.n	8017a98 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8017a4a:	6878      	ldr	r0, [r7, #4]
 8017a4c:	f000 f93c 	bl	8017cc8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017a50:	4b17      	ldr	r3, [pc, #92]	; (8017ab0 <tcp_process+0x7d0>)
 8017a52:	781b      	ldrb	r3, [r3, #0]
 8017a54:	f003 0310 	and.w	r3, r3, #16
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d01f      	beq.n	8017a9c <tcp_process+0x7bc>
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017a60:	4b14      	ldr	r3, [pc, #80]	; (8017ab4 <tcp_process+0x7d4>)
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	429a      	cmp	r2, r3
 8017a66:	d119      	bne.n	8017a9c <tcp_process+0x7bc>
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d115      	bne.n	8017a9c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8017a70:	4b11      	ldr	r3, [pc, #68]	; (8017ab8 <tcp_process+0x7d8>)
 8017a72:	781b      	ldrb	r3, [r3, #0]
 8017a74:	f043 0310 	orr.w	r3, r3, #16
 8017a78:	b2da      	uxtb	r2, r3
 8017a7a:	4b0f      	ldr	r3, [pc, #60]	; (8017ab8 <tcp_process+0x7d8>)
 8017a7c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8017a7e:	e00d      	b.n	8017a9c <tcp_process+0x7bc>
    default:
      break;
 8017a80:	bf00      	nop
 8017a82:	e00c      	b.n	8017a9e <tcp_process+0x7be>
      break;
 8017a84:	bf00      	nop
 8017a86:	e00a      	b.n	8017a9e <tcp_process+0x7be>
      break;
 8017a88:	bf00      	nop
 8017a8a:	e008      	b.n	8017a9e <tcp_process+0x7be>
      break;
 8017a8c:	bf00      	nop
 8017a8e:	e006      	b.n	8017a9e <tcp_process+0x7be>
      break;
 8017a90:	bf00      	nop
 8017a92:	e004      	b.n	8017a9e <tcp_process+0x7be>
      break;
 8017a94:	bf00      	nop
 8017a96:	e002      	b.n	8017a9e <tcp_process+0x7be>
      break;
 8017a98:	bf00      	nop
 8017a9a:	e000      	b.n	8017a9e <tcp_process+0x7be>
      break;
 8017a9c:	bf00      	nop
  }
  return ERR_OK;
 8017a9e:	2300      	movs	r3, #0
}
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	3724      	adds	r7, #36	; 0x24
 8017aa4:	46bd      	mov	sp, r7
 8017aa6:	bd90      	pop	{r4, r7, pc}
 8017aa8:	20012364 	.word	0x20012364
 8017aac:	20012360 	.word	0x20012360
 8017ab0:	20012394 	.word	0x20012394
 8017ab4:	2001238c 	.word	0x2001238c
 8017ab8:	20012395 	.word	0x20012395
 8017abc:	2001235c 	.word	0x2001235c

08017ac0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8017ac0:	b590      	push	{r4, r7, lr}
 8017ac2:	b085      	sub	sp, #20
 8017ac4:	af00      	add	r7, sp, #0
 8017ac6:	6078      	str	r0, [r7, #4]
 8017ac8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d106      	bne.n	8017ade <tcp_oos_insert_segment+0x1e>
 8017ad0:	4b3b      	ldr	r3, [pc, #236]	; (8017bc0 <tcp_oos_insert_segment+0x100>)
 8017ad2:	f240 421f 	movw	r2, #1055	; 0x41f
 8017ad6:	493b      	ldr	r1, [pc, #236]	; (8017bc4 <tcp_oos_insert_segment+0x104>)
 8017ad8:	483b      	ldr	r0, [pc, #236]	; (8017bc8 <tcp_oos_insert_segment+0x108>)
 8017ada:	f009 fe1d 	bl	8021718 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	68db      	ldr	r3, [r3, #12]
 8017ae2:	899b      	ldrh	r3, [r3, #12]
 8017ae4:	b29b      	uxth	r3, r3
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	f7fb f8d4 	bl	8012c94 <lwip_htons>
 8017aec:	4603      	mov	r3, r0
 8017aee:	b2db      	uxtb	r3, r3
 8017af0:	f003 0301 	and.w	r3, r3, #1
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d028      	beq.n	8017b4a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8017af8:	6838      	ldr	r0, [r7, #0]
 8017afa:	f7fe f97d 	bl	8015df8 <tcp_segs_free>
    next = NULL;
 8017afe:	2300      	movs	r3, #0
 8017b00:	603b      	str	r3, [r7, #0]
 8017b02:	e056      	b.n	8017bb2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017b04:	683b      	ldr	r3, [r7, #0]
 8017b06:	68db      	ldr	r3, [r3, #12]
 8017b08:	899b      	ldrh	r3, [r3, #12]
 8017b0a:	b29b      	uxth	r3, r3
 8017b0c:	4618      	mov	r0, r3
 8017b0e:	f7fb f8c1 	bl	8012c94 <lwip_htons>
 8017b12:	4603      	mov	r3, r0
 8017b14:	b2db      	uxtb	r3, r3
 8017b16:	f003 0301 	and.w	r3, r3, #1
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d00d      	beq.n	8017b3a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	68db      	ldr	r3, [r3, #12]
 8017b22:	899b      	ldrh	r3, [r3, #12]
 8017b24:	b29c      	uxth	r4, r3
 8017b26:	2001      	movs	r0, #1
 8017b28:	f7fb f8b4 	bl	8012c94 <lwip_htons>
 8017b2c:	4603      	mov	r3, r0
 8017b2e:	461a      	mov	r2, r3
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	68db      	ldr	r3, [r3, #12]
 8017b34:	4322      	orrs	r2, r4
 8017b36:	b292      	uxth	r2, r2
 8017b38:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8017b3a:	683b      	ldr	r3, [r7, #0]
 8017b3c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8017b3e:	683b      	ldr	r3, [r7, #0]
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8017b44:	68f8      	ldr	r0, [r7, #12]
 8017b46:	f7fe f96c 	bl	8015e22 <tcp_seg_free>
    while (next &&
 8017b4a:	683b      	ldr	r3, [r7, #0]
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d00e      	beq.n	8017b6e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	891b      	ldrh	r3, [r3, #8]
 8017b54:	461a      	mov	r2, r3
 8017b56:	4b1d      	ldr	r3, [pc, #116]	; (8017bcc <tcp_oos_insert_segment+0x10c>)
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	441a      	add	r2, r3
 8017b5c:	683b      	ldr	r3, [r7, #0]
 8017b5e:	68db      	ldr	r3, [r3, #12]
 8017b60:	685b      	ldr	r3, [r3, #4]
 8017b62:	6839      	ldr	r1, [r7, #0]
 8017b64:	8909      	ldrh	r1, [r1, #8]
 8017b66:	440b      	add	r3, r1
 8017b68:	1ad3      	subs	r3, r2, r3
    while (next &&
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	daca      	bge.n	8017b04 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8017b6e:	683b      	ldr	r3, [r7, #0]
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d01e      	beq.n	8017bb2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	891b      	ldrh	r3, [r3, #8]
 8017b78:	461a      	mov	r2, r3
 8017b7a:	4b14      	ldr	r3, [pc, #80]	; (8017bcc <tcp_oos_insert_segment+0x10c>)
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	441a      	add	r2, r3
 8017b80:	683b      	ldr	r3, [r7, #0]
 8017b82:	68db      	ldr	r3, [r3, #12]
 8017b84:	685b      	ldr	r3, [r3, #4]
 8017b86:	1ad3      	subs	r3, r2, r3
    if (next &&
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	dd12      	ble.n	8017bb2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8017b8c:	683b      	ldr	r3, [r7, #0]
 8017b8e:	68db      	ldr	r3, [r3, #12]
 8017b90:	685b      	ldr	r3, [r3, #4]
 8017b92:	b29a      	uxth	r2, r3
 8017b94:	4b0d      	ldr	r3, [pc, #52]	; (8017bcc <tcp_oos_insert_segment+0x10c>)
 8017b96:	681b      	ldr	r3, [r3, #0]
 8017b98:	b29b      	uxth	r3, r3
 8017b9a:	1ad3      	subs	r3, r2, r3
 8017b9c:	b29a      	uxth	r2, r3
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	685a      	ldr	r2, [r3, #4]
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	891b      	ldrh	r3, [r3, #8]
 8017baa:	4619      	mov	r1, r3
 8017bac:	4610      	mov	r0, r2
 8017bae:	f7fc fae9 	bl	8014184 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	683a      	ldr	r2, [r7, #0]
 8017bb6:	601a      	str	r2, [r3, #0]
}
 8017bb8:	bf00      	nop
 8017bba:	3714      	adds	r7, #20
 8017bbc:	46bd      	mov	sp, r7
 8017bbe:	bd90      	pop	{r4, r7, pc}
 8017bc0:	08025654 	.word	0x08025654
 8017bc4:	08025914 	.word	0x08025914
 8017bc8:	080256a0 	.word	0x080256a0
 8017bcc:	20012388 	.word	0x20012388

08017bd0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8017bd0:	b5b0      	push	{r4, r5, r7, lr}
 8017bd2:	b086      	sub	sp, #24
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	60f8      	str	r0, [r7, #12]
 8017bd8:	60b9      	str	r1, [r7, #8]
 8017bda:	607a      	str	r2, [r7, #4]
 8017bdc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8017bde:	e03e      	b.n	8017c5e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8017be0:	68bb      	ldr	r3, [r7, #8]
 8017be2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8017be4:	68bb      	ldr	r3, [r7, #8]
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8017bea:	697b      	ldr	r3, [r7, #20]
 8017bec:	685b      	ldr	r3, [r3, #4]
 8017bee:	4618      	mov	r0, r3
 8017bf0:	f7fc fcdc 	bl	80145ac <pbuf_clen>
 8017bf4:	4603      	mov	r3, r0
 8017bf6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017bfe:	8a7a      	ldrh	r2, [r7, #18]
 8017c00:	429a      	cmp	r2, r3
 8017c02:	d906      	bls.n	8017c12 <tcp_free_acked_segments+0x42>
 8017c04:	4b2a      	ldr	r3, [pc, #168]	; (8017cb0 <tcp_free_acked_segments+0xe0>)
 8017c06:	f240 4257 	movw	r2, #1111	; 0x457
 8017c0a:	492a      	ldr	r1, [pc, #168]	; (8017cb4 <tcp_free_acked_segments+0xe4>)
 8017c0c:	482a      	ldr	r0, [pc, #168]	; (8017cb8 <tcp_free_acked_segments+0xe8>)
 8017c0e:	f009 fd83 	bl	8021718 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8017c18:	8a7b      	ldrh	r3, [r7, #18]
 8017c1a:	1ad3      	subs	r3, r2, r3
 8017c1c:	b29a      	uxth	r2, r3
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8017c24:	697b      	ldr	r3, [r7, #20]
 8017c26:	891a      	ldrh	r2, [r3, #8]
 8017c28:	4b24      	ldr	r3, [pc, #144]	; (8017cbc <tcp_free_acked_segments+0xec>)
 8017c2a:	881b      	ldrh	r3, [r3, #0]
 8017c2c:	4413      	add	r3, r2
 8017c2e:	b29a      	uxth	r2, r3
 8017c30:	4b22      	ldr	r3, [pc, #136]	; (8017cbc <tcp_free_acked_segments+0xec>)
 8017c32:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8017c34:	6978      	ldr	r0, [r7, #20]
 8017c36:	f7fe f8f4 	bl	8015e22 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d00c      	beq.n	8017c5e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8017c44:	68bb      	ldr	r3, [r7, #8]
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d109      	bne.n	8017c5e <tcp_free_acked_segments+0x8e>
 8017c4a:	683b      	ldr	r3, [r7, #0]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d106      	bne.n	8017c5e <tcp_free_acked_segments+0x8e>
 8017c50:	4b17      	ldr	r3, [pc, #92]	; (8017cb0 <tcp_free_acked_segments+0xe0>)
 8017c52:	f240 4261 	movw	r2, #1121	; 0x461
 8017c56:	491a      	ldr	r1, [pc, #104]	; (8017cc0 <tcp_free_acked_segments+0xf0>)
 8017c58:	4817      	ldr	r0, [pc, #92]	; (8017cb8 <tcp_free_acked_segments+0xe8>)
 8017c5a:	f009 fd5d 	bl	8021718 <iprintf>
  while (seg_list != NULL &&
 8017c5e:	68bb      	ldr	r3, [r7, #8]
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d020      	beq.n	8017ca6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8017c64:	68bb      	ldr	r3, [r7, #8]
 8017c66:	68db      	ldr	r3, [r3, #12]
 8017c68:	685b      	ldr	r3, [r3, #4]
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	f7fb f827 	bl	8012cbe <lwip_htonl>
 8017c70:	4604      	mov	r4, r0
 8017c72:	68bb      	ldr	r3, [r7, #8]
 8017c74:	891b      	ldrh	r3, [r3, #8]
 8017c76:	461d      	mov	r5, r3
 8017c78:	68bb      	ldr	r3, [r7, #8]
 8017c7a:	68db      	ldr	r3, [r3, #12]
 8017c7c:	899b      	ldrh	r3, [r3, #12]
 8017c7e:	b29b      	uxth	r3, r3
 8017c80:	4618      	mov	r0, r3
 8017c82:	f7fb f807 	bl	8012c94 <lwip_htons>
 8017c86:	4603      	mov	r3, r0
 8017c88:	b2db      	uxtb	r3, r3
 8017c8a:	f003 0303 	and.w	r3, r3, #3
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d001      	beq.n	8017c96 <tcp_free_acked_segments+0xc6>
 8017c92:	2301      	movs	r3, #1
 8017c94:	e000      	b.n	8017c98 <tcp_free_acked_segments+0xc8>
 8017c96:	2300      	movs	r3, #0
 8017c98:	442b      	add	r3, r5
 8017c9a:	18e2      	adds	r2, r4, r3
 8017c9c:	4b09      	ldr	r3, [pc, #36]	; (8017cc4 <tcp_free_acked_segments+0xf4>)
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	dd9c      	ble.n	8017be0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8017ca6:	68bb      	ldr	r3, [r7, #8]
}
 8017ca8:	4618      	mov	r0, r3
 8017caa:	3718      	adds	r7, #24
 8017cac:	46bd      	mov	sp, r7
 8017cae:	bdb0      	pop	{r4, r5, r7, pc}
 8017cb0:	08025654 	.word	0x08025654
 8017cb4:	0802593c 	.word	0x0802593c
 8017cb8:	080256a0 	.word	0x080256a0
 8017cbc:	20012390 	.word	0x20012390
 8017cc0:	08025964 	.word	0x08025964
 8017cc4:	2001238c 	.word	0x2001238c

08017cc8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8017cc8:	b5b0      	push	{r4, r5, r7, lr}
 8017cca:	b094      	sub	sp, #80	; 0x50
 8017ccc:	af00      	add	r7, sp, #0
 8017cce:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8017cd0:	2300      	movs	r3, #0
 8017cd2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d106      	bne.n	8017ce8 <tcp_receive+0x20>
 8017cda:	4b91      	ldr	r3, [pc, #580]	; (8017f20 <tcp_receive+0x258>)
 8017cdc:	f240 427b 	movw	r2, #1147	; 0x47b
 8017ce0:	4990      	ldr	r1, [pc, #576]	; (8017f24 <tcp_receive+0x25c>)
 8017ce2:	4891      	ldr	r0, [pc, #580]	; (8017f28 <tcp_receive+0x260>)
 8017ce4:	f009 fd18 	bl	8021718 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	7d1b      	ldrb	r3, [r3, #20]
 8017cec:	2b03      	cmp	r3, #3
 8017cee:	d806      	bhi.n	8017cfe <tcp_receive+0x36>
 8017cf0:	4b8b      	ldr	r3, [pc, #556]	; (8017f20 <tcp_receive+0x258>)
 8017cf2:	f240 427c 	movw	r2, #1148	; 0x47c
 8017cf6:	498d      	ldr	r1, [pc, #564]	; (8017f2c <tcp_receive+0x264>)
 8017cf8:	488b      	ldr	r0, [pc, #556]	; (8017f28 <tcp_receive+0x260>)
 8017cfa:	f009 fd0d 	bl	8021718 <iprintf>

  if (flags & TCP_ACK) {
 8017cfe:	4b8c      	ldr	r3, [pc, #560]	; (8017f30 <tcp_receive+0x268>)
 8017d00:	781b      	ldrb	r3, [r3, #0]
 8017d02:	f003 0310 	and.w	r3, r3, #16
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	f000 8264 	beq.w	80181d4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017d12:	461a      	mov	r2, r3
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017d18:	4413      	add	r3, r2
 8017d1a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017d20:	4b84      	ldr	r3, [pc, #528]	; (8017f34 <tcp_receive+0x26c>)
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	1ad3      	subs	r3, r2, r3
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	db1b      	blt.n	8017d62 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017d2e:	4b81      	ldr	r3, [pc, #516]	; (8017f34 <tcp_receive+0x26c>)
 8017d30:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017d32:	429a      	cmp	r2, r3
 8017d34:	d106      	bne.n	8017d44 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8017d3a:	4b7f      	ldr	r3, [pc, #508]	; (8017f38 <tcp_receive+0x270>)
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	1ad3      	subs	r3, r2, r3
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	db0e      	blt.n	8017d62 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8017d48:	4b7b      	ldr	r3, [pc, #492]	; (8017f38 <tcp_receive+0x270>)
 8017d4a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017d4c:	429a      	cmp	r2, r3
 8017d4e:	d125      	bne.n	8017d9c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017d50:	4b7a      	ldr	r3, [pc, #488]	; (8017f3c <tcp_receive+0x274>)
 8017d52:	681b      	ldr	r3, [r3, #0]
 8017d54:	89db      	ldrh	r3, [r3, #14]
 8017d56:	b29a      	uxth	r2, r3
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017d5e:	429a      	cmp	r2, r3
 8017d60:	d91c      	bls.n	8017d9c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8017d62:	4b76      	ldr	r3, [pc, #472]	; (8017f3c <tcp_receive+0x274>)
 8017d64:	681b      	ldr	r3, [r3, #0]
 8017d66:	89db      	ldrh	r3, [r3, #14]
 8017d68:	b29a      	uxth	r2, r3
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017d7c:	429a      	cmp	r2, r3
 8017d7e:	d205      	bcs.n	8017d8c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8017d8c:	4b69      	ldr	r3, [pc, #420]	; (8017f34 <tcp_receive+0x26c>)
 8017d8e:	681a      	ldr	r2, [r3, #0]
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8017d94:	4b68      	ldr	r3, [pc, #416]	; (8017f38 <tcp_receive+0x270>)
 8017d96:	681a      	ldr	r2, [r3, #0]
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8017d9c:	4b66      	ldr	r3, [pc, #408]	; (8017f38 <tcp_receive+0x270>)
 8017d9e:	681a      	ldr	r2, [r3, #0]
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017da4:	1ad3      	subs	r3, r2, r3
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	dc58      	bgt.n	8017e5c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8017daa:	4b65      	ldr	r3, [pc, #404]	; (8017f40 <tcp_receive+0x278>)
 8017dac:	881b      	ldrh	r3, [r3, #0]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d14b      	bne.n	8017e4a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017db6:	687a      	ldr	r2, [r7, #4]
 8017db8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8017dbc:	4413      	add	r3, r2
 8017dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017dc0:	429a      	cmp	r2, r3
 8017dc2:	d142      	bne.n	8017e4a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	db3d      	blt.n	8017e4a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017dd2:	4b59      	ldr	r3, [pc, #356]	; (8017f38 <tcp_receive+0x270>)
 8017dd4:	681b      	ldr	r3, [r3, #0]
 8017dd6:	429a      	cmp	r2, r3
 8017dd8:	d137      	bne.n	8017e4a <tcp_receive+0x182>
              found_dupack = 1;
 8017dda:	2301      	movs	r3, #1
 8017ddc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017de4:	2bff      	cmp	r3, #255	; 0xff
 8017de6:	d007      	beq.n	8017df8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017dee:	3301      	adds	r3, #1
 8017df0:	b2da      	uxtb	r2, r3
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017dfe:	2b03      	cmp	r3, #3
 8017e00:	d91b      	bls.n	8017e3a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017e0c:	4413      	add	r3, r2
 8017e0e:	b29a      	uxth	r2, r3
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017e16:	429a      	cmp	r2, r3
 8017e18:	d30a      	bcc.n	8017e30 <tcp_receive+0x168>
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017e24:	4413      	add	r3, r2
 8017e26:	b29a      	uxth	r2, r3
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017e2e:	e004      	b.n	8017e3a <tcp_receive+0x172>
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017e36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017e40:	2b02      	cmp	r3, #2
 8017e42:	d902      	bls.n	8017e4a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017e44:	6878      	ldr	r0, [r7, #4]
 8017e46:	f002 fb45 	bl	801a4d4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8017e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	f040 8161 	bne.w	8018114 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	2200      	movs	r2, #0
 8017e56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017e5a:	e15b      	b.n	8018114 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017e5c:	4b36      	ldr	r3, [pc, #216]	; (8017f38 <tcp_receive+0x270>)
 8017e5e:	681a      	ldr	r2, [r3, #0]
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017e64:	1ad3      	subs	r3, r2, r3
 8017e66:	3b01      	subs	r3, #1
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	f2c0 814e 	blt.w	801810a <tcp_receive+0x442>
 8017e6e:	4b32      	ldr	r3, [pc, #200]	; (8017f38 <tcp_receive+0x270>)
 8017e70:	681a      	ldr	r2, [r3, #0]
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017e76:	1ad3      	subs	r3, r2, r3
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	f300 8146 	bgt.w	801810a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	8b5b      	ldrh	r3, [r3, #26]
 8017e82:	f003 0304 	and.w	r3, r3, #4
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d010      	beq.n	8017eac <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	8b5b      	ldrh	r3, [r3, #26]
 8017e8e:	f023 0304 	bic.w	r3, r3, #4
 8017e92:	b29a      	uxth	r2, r3
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	2200      	movs	r2, #0
 8017ea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	2200      	movs	r2, #0
 8017eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017eba:	10db      	asrs	r3, r3, #3
 8017ebc:	b21b      	sxth	r3, r3
 8017ebe:	b29a      	uxth	r2, r3
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017ec6:	b29b      	uxth	r3, r3
 8017ec8:	4413      	add	r3, r2
 8017eca:	b29b      	uxth	r3, r3
 8017ecc:	b21a      	sxth	r2, r3
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8017ed4:	4b18      	ldr	r3, [pc, #96]	; (8017f38 <tcp_receive+0x270>)
 8017ed6:	681b      	ldr	r3, [r3, #0]
 8017ed8:	b29a      	uxth	r2, r3
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ede:	b29b      	uxth	r3, r3
 8017ee0:	1ad3      	subs	r3, r2, r3
 8017ee2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	2200      	movs	r2, #0
 8017ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8017eec:	4b12      	ldr	r3, [pc, #72]	; (8017f38 <tcp_receive+0x270>)
 8017eee:	681a      	ldr	r2, [r3, #0]
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	7d1b      	ldrb	r3, [r3, #20]
 8017ef8:	2b03      	cmp	r3, #3
 8017efa:	f240 8097 	bls.w	801802c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017f0a:	429a      	cmp	r2, r3
 8017f0c:	d245      	bcs.n	8017f9a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	8b5b      	ldrh	r3, [r3, #26]
 8017f12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d014      	beq.n	8017f44 <tcp_receive+0x27c>
 8017f1a:	2301      	movs	r3, #1
 8017f1c:	e013      	b.n	8017f46 <tcp_receive+0x27e>
 8017f1e:	bf00      	nop
 8017f20:	08025654 	.word	0x08025654
 8017f24:	08025984 	.word	0x08025984
 8017f28:	080256a0 	.word	0x080256a0
 8017f2c:	080259a0 	.word	0x080259a0
 8017f30:	20012394 	.word	0x20012394
 8017f34:	20012388 	.word	0x20012388
 8017f38:	2001238c 	.word	0x2001238c
 8017f3c:	20012378 	.word	0x20012378
 8017f40:	20012392 	.word	0x20012392
 8017f44:	2302      	movs	r3, #2
 8017f46:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8017f4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8017f4e:	b29a      	uxth	r2, r3
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017f54:	fb12 f303 	smulbb	r3, r2, r3
 8017f58:	b29b      	uxth	r3, r3
 8017f5a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017f5c:	4293      	cmp	r3, r2
 8017f5e:	bf28      	it	cs
 8017f60:	4613      	movcs	r3, r2
 8017f62:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017f6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017f6c:	4413      	add	r3, r2
 8017f6e:	b29a      	uxth	r2, r3
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017f76:	429a      	cmp	r2, r3
 8017f78:	d309      	bcc.n	8017f8e <tcp_receive+0x2c6>
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017f80:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017f82:	4413      	add	r3, r2
 8017f84:	b29a      	uxth	r2, r3
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017f8c:	e04e      	b.n	801802c <tcp_receive+0x364>
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017f94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017f98:	e048      	b.n	801802c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017fa0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017fa2:	4413      	add	r3, r2
 8017fa4:	b29a      	uxth	r2, r3
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8017fac:	429a      	cmp	r2, r3
 8017fae:	d309      	bcc.n	8017fc4 <tcp_receive+0x2fc>
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017fb6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017fb8:	4413      	add	r3, r2
 8017fba:	b29a      	uxth	r2, r3
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8017fc2:	e004      	b.n	8017fce <tcp_receive+0x306>
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017fca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017fda:	429a      	cmp	r2, r3
 8017fdc:	d326      	bcc.n	801802c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017fea:	1ad3      	subs	r3, r2, r3
 8017fec:	b29a      	uxth	r2, r3
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017ffe:	4413      	add	r3, r2
 8018000:	b29a      	uxth	r2, r3
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018008:	429a      	cmp	r2, r3
 801800a:	d30a      	bcc.n	8018022 <tcp_receive+0x35a>
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018016:	4413      	add	r3, r2
 8018018:	b29a      	uxth	r2, r3
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018020:	e004      	b.n	801802c <tcp_receive+0x364>
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018028:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018034:	4a98      	ldr	r2, [pc, #608]	; (8018298 <tcp_receive+0x5d0>)
 8018036:	6878      	ldr	r0, [r7, #4]
 8018038:	f7ff fdca 	bl	8017bd0 <tcp_free_acked_segments>
 801803c:	4602      	mov	r2, r0
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801804a:	4a94      	ldr	r2, [pc, #592]	; (801829c <tcp_receive+0x5d4>)
 801804c:	6878      	ldr	r0, [r7, #4]
 801804e:	f7ff fdbf 	bl	8017bd0 <tcp_free_acked_segments>
 8018052:	4602      	mov	r2, r0
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801805c:	2b00      	cmp	r3, #0
 801805e:	d104      	bne.n	801806a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018066:	861a      	strh	r2, [r3, #48]	; 0x30
 8018068:	e002      	b.n	8018070 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	2200      	movs	r2, #0
 801806e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	2200      	movs	r2, #0
 8018074:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801807a:	2b00      	cmp	r3, #0
 801807c:	d103      	bne.n	8018086 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	2200      	movs	r2, #0
 8018082:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801808c:	4b84      	ldr	r3, [pc, #528]	; (80182a0 <tcp_receive+0x5d8>)
 801808e:	881b      	ldrh	r3, [r3, #0]
 8018090:	4413      	add	r3, r2
 8018092:	b29a      	uxth	r2, r3
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	8b5b      	ldrh	r3, [r3, #26]
 801809e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d035      	beq.n	8018112 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d118      	bne.n	80180e0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d00c      	beq.n	80180d0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80180be:	68db      	ldr	r3, [r3, #12]
 80180c0:	685b      	ldr	r3, [r3, #4]
 80180c2:	4618      	mov	r0, r3
 80180c4:	f7fa fdfb 	bl	8012cbe <lwip_htonl>
 80180c8:	4603      	mov	r3, r0
 80180ca:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	dc20      	bgt.n	8018112 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	8b5b      	ldrh	r3, [r3, #26]
 80180d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80180d8:	b29a      	uxth	r2, r3
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80180de:	e018      	b.n	8018112 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80180e8:	68db      	ldr	r3, [r3, #12]
 80180ea:	685b      	ldr	r3, [r3, #4]
 80180ec:	4618      	mov	r0, r3
 80180ee:	f7fa fde6 	bl	8012cbe <lwip_htonl>
 80180f2:	4603      	mov	r3, r0
 80180f4:	1ae3      	subs	r3, r4, r3
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	dc0b      	bgt.n	8018112 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	8b5b      	ldrh	r3, [r3, #26]
 80180fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018102:	b29a      	uxth	r2, r3
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018108:	e003      	b.n	8018112 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801810a:	6878      	ldr	r0, [r7, #4]
 801810c:	f002 fbce 	bl	801a8ac <tcp_send_empty_ack>
 8018110:	e000      	b.n	8018114 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018112:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018118:	2b00      	cmp	r3, #0
 801811a:	d05b      	beq.n	80181d4 <tcp_receive+0x50c>
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018120:	4b60      	ldr	r3, [pc, #384]	; (80182a4 <tcp_receive+0x5dc>)
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	1ad3      	subs	r3, r2, r3
 8018126:	2b00      	cmp	r3, #0
 8018128:	da54      	bge.n	80181d4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801812a:	4b5f      	ldr	r3, [pc, #380]	; (80182a8 <tcp_receive+0x5e0>)
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	b29a      	uxth	r2, r3
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018134:	b29b      	uxth	r3, r3
 8018136:	1ad3      	subs	r3, r2, r3
 8018138:	b29b      	uxth	r3, r3
 801813a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801813e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018148:	10db      	asrs	r3, r3, #3
 801814a:	b21b      	sxth	r3, r3
 801814c:	b29b      	uxth	r3, r3
 801814e:	1ad3      	subs	r3, r2, r3
 8018150:	b29b      	uxth	r3, r3
 8018152:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801815c:	b29a      	uxth	r2, r3
 801815e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018162:	4413      	add	r3, r2
 8018164:	b29b      	uxth	r3, r3
 8018166:	b21a      	sxth	r2, r3
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801816c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018170:	2b00      	cmp	r3, #0
 8018172:	da05      	bge.n	8018180 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8018174:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018178:	425b      	negs	r3, r3
 801817a:	b29b      	uxth	r3, r3
 801817c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8018180:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801818a:	109b      	asrs	r3, r3, #2
 801818c:	b21b      	sxth	r3, r3
 801818e:	b29b      	uxth	r3, r3
 8018190:	1ad3      	subs	r3, r2, r3
 8018192:	b29b      	uxth	r3, r3
 8018194:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801819e:	b29a      	uxth	r2, r3
 80181a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80181a4:	4413      	add	r3, r2
 80181a6:	b29b      	uxth	r3, r3
 80181a8:	b21a      	sxth	r2, r3
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80181b4:	10db      	asrs	r3, r3, #3
 80181b6:	b21b      	sxth	r3, r3
 80181b8:	b29a      	uxth	r2, r3
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80181c0:	b29b      	uxth	r3, r3
 80181c2:	4413      	add	r3, r2
 80181c4:	b29b      	uxth	r3, r3
 80181c6:	b21a      	sxth	r2, r3
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	2200      	movs	r2, #0
 80181d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80181d4:	4b35      	ldr	r3, [pc, #212]	; (80182ac <tcp_receive+0x5e4>)
 80181d6:	881b      	ldrh	r3, [r3, #0]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	f000 84e2 	beq.w	8018ba2 <tcp_receive+0xeda>
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	7d1b      	ldrb	r3, [r3, #20]
 80181e2:	2b06      	cmp	r3, #6
 80181e4:	f200 84dd 	bhi.w	8018ba2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80181ec:	4b30      	ldr	r3, [pc, #192]	; (80182b0 <tcp_receive+0x5e8>)
 80181ee:	681b      	ldr	r3, [r3, #0]
 80181f0:	1ad3      	subs	r3, r2, r3
 80181f2:	3b01      	subs	r3, #1
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	f2c0 808f 	blt.w	8018318 <tcp_receive+0x650>
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80181fe:	4b2b      	ldr	r3, [pc, #172]	; (80182ac <tcp_receive+0x5e4>)
 8018200:	881b      	ldrh	r3, [r3, #0]
 8018202:	4619      	mov	r1, r3
 8018204:	4b2a      	ldr	r3, [pc, #168]	; (80182b0 <tcp_receive+0x5e8>)
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	440b      	add	r3, r1
 801820a:	1ad3      	subs	r3, r2, r3
 801820c:	3301      	adds	r3, #1
 801820e:	2b00      	cmp	r3, #0
 8018210:	f300 8082 	bgt.w	8018318 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8018214:	4b27      	ldr	r3, [pc, #156]	; (80182b4 <tcp_receive+0x5ec>)
 8018216:	685b      	ldr	r3, [r3, #4]
 8018218:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801821e:	4b24      	ldr	r3, [pc, #144]	; (80182b0 <tcp_receive+0x5e8>)
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	1ad3      	subs	r3, r2, r3
 8018224:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8018226:	4b23      	ldr	r3, [pc, #140]	; (80182b4 <tcp_receive+0x5ec>)
 8018228:	685b      	ldr	r3, [r3, #4]
 801822a:	2b00      	cmp	r3, #0
 801822c:	d106      	bne.n	801823c <tcp_receive+0x574>
 801822e:	4b22      	ldr	r3, [pc, #136]	; (80182b8 <tcp_receive+0x5f0>)
 8018230:	f240 5294 	movw	r2, #1428	; 0x594
 8018234:	4921      	ldr	r1, [pc, #132]	; (80182bc <tcp_receive+0x5f4>)
 8018236:	4822      	ldr	r0, [pc, #136]	; (80182c0 <tcp_receive+0x5f8>)
 8018238:	f009 fa6e 	bl	8021718 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801823e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018242:	4293      	cmp	r3, r2
 8018244:	d906      	bls.n	8018254 <tcp_receive+0x58c>
 8018246:	4b1c      	ldr	r3, [pc, #112]	; (80182b8 <tcp_receive+0x5f0>)
 8018248:	f240 5295 	movw	r2, #1429	; 0x595
 801824c:	491d      	ldr	r1, [pc, #116]	; (80182c4 <tcp_receive+0x5fc>)
 801824e:	481c      	ldr	r0, [pc, #112]	; (80182c0 <tcp_receive+0x5f8>)
 8018250:	f009 fa62 	bl	8021718 <iprintf>
      off = (u16_t)off32;
 8018254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018256:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801825a:	4b16      	ldr	r3, [pc, #88]	; (80182b4 <tcp_receive+0x5ec>)
 801825c:	685b      	ldr	r3, [r3, #4]
 801825e:	891b      	ldrh	r3, [r3, #8]
 8018260:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018264:	429a      	cmp	r2, r3
 8018266:	d906      	bls.n	8018276 <tcp_receive+0x5ae>
 8018268:	4b13      	ldr	r3, [pc, #76]	; (80182b8 <tcp_receive+0x5f0>)
 801826a:	f240 5297 	movw	r2, #1431	; 0x597
 801826e:	4916      	ldr	r1, [pc, #88]	; (80182c8 <tcp_receive+0x600>)
 8018270:	4813      	ldr	r0, [pc, #76]	; (80182c0 <tcp_receive+0x5f8>)
 8018272:	f009 fa51 	bl	8021718 <iprintf>
      inseg.len -= off;
 8018276:	4b0f      	ldr	r3, [pc, #60]	; (80182b4 <tcp_receive+0x5ec>)
 8018278:	891a      	ldrh	r2, [r3, #8]
 801827a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801827e:	1ad3      	subs	r3, r2, r3
 8018280:	b29a      	uxth	r2, r3
 8018282:	4b0c      	ldr	r3, [pc, #48]	; (80182b4 <tcp_receive+0x5ec>)
 8018284:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8018286:	4b0b      	ldr	r3, [pc, #44]	; (80182b4 <tcp_receive+0x5ec>)
 8018288:	685b      	ldr	r3, [r3, #4]
 801828a:	891a      	ldrh	r2, [r3, #8]
 801828c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018290:	1ad3      	subs	r3, r2, r3
 8018292:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8018294:	e02a      	b.n	80182ec <tcp_receive+0x624>
 8018296:	bf00      	nop
 8018298:	080259bc 	.word	0x080259bc
 801829c:	080259c4 	.word	0x080259c4
 80182a0:	20012390 	.word	0x20012390
 80182a4:	2001238c 	.word	0x2001238c
 80182a8:	20012350 	.word	0x20012350
 80182ac:	20012392 	.word	0x20012392
 80182b0:	20012388 	.word	0x20012388
 80182b4:	20012368 	.word	0x20012368
 80182b8:	08025654 	.word	0x08025654
 80182bc:	080259cc 	.word	0x080259cc
 80182c0:	080256a0 	.word	0x080256a0
 80182c4:	080259dc 	.word	0x080259dc
 80182c8:	080259ec 	.word	0x080259ec
        off -= p->len;
 80182cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80182ce:	895b      	ldrh	r3, [r3, #10]
 80182d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80182d4:	1ad3      	subs	r3, r2, r3
 80182d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80182da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80182dc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80182de:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80182e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80182e2:	2200      	movs	r2, #0
 80182e4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80182e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80182ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80182ee:	895b      	ldrh	r3, [r3, #10]
 80182f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80182f4:	429a      	cmp	r2, r3
 80182f6:	d8e9      	bhi.n	80182cc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80182f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80182fc:	4619      	mov	r1, r3
 80182fe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8018300:	f7fc f840 	bl	8014384 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018308:	4a91      	ldr	r2, [pc, #580]	; (8018550 <tcp_receive+0x888>)
 801830a:	6013      	str	r3, [r2, #0]
 801830c:	4b91      	ldr	r3, [pc, #580]	; (8018554 <tcp_receive+0x88c>)
 801830e:	68db      	ldr	r3, [r3, #12]
 8018310:	4a8f      	ldr	r2, [pc, #572]	; (8018550 <tcp_receive+0x888>)
 8018312:	6812      	ldr	r2, [r2, #0]
 8018314:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018316:	e00d      	b.n	8018334 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8018318:	4b8d      	ldr	r3, [pc, #564]	; (8018550 <tcp_receive+0x888>)
 801831a:	681a      	ldr	r2, [r3, #0]
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018320:	1ad3      	subs	r3, r2, r3
 8018322:	2b00      	cmp	r3, #0
 8018324:	da06      	bge.n	8018334 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	8b5b      	ldrh	r3, [r3, #26]
 801832a:	f043 0302 	orr.w	r3, r3, #2
 801832e:	b29a      	uxth	r2, r3
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018334:	4b86      	ldr	r3, [pc, #536]	; (8018550 <tcp_receive+0x888>)
 8018336:	681a      	ldr	r2, [r3, #0]
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801833c:	1ad3      	subs	r3, r2, r3
 801833e:	2b00      	cmp	r3, #0
 8018340:	f2c0 842a 	blt.w	8018b98 <tcp_receive+0xed0>
 8018344:	4b82      	ldr	r3, [pc, #520]	; (8018550 <tcp_receive+0x888>)
 8018346:	681a      	ldr	r2, [r3, #0]
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801834c:	6879      	ldr	r1, [r7, #4]
 801834e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018350:	440b      	add	r3, r1
 8018352:	1ad3      	subs	r3, r2, r3
 8018354:	3301      	adds	r3, #1
 8018356:	2b00      	cmp	r3, #0
 8018358:	f300 841e 	bgt.w	8018b98 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018360:	4b7b      	ldr	r3, [pc, #492]	; (8018550 <tcp_receive+0x888>)
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	429a      	cmp	r2, r3
 8018366:	f040 829a 	bne.w	801889e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801836a:	4b7a      	ldr	r3, [pc, #488]	; (8018554 <tcp_receive+0x88c>)
 801836c:	891c      	ldrh	r4, [r3, #8]
 801836e:	4b79      	ldr	r3, [pc, #484]	; (8018554 <tcp_receive+0x88c>)
 8018370:	68db      	ldr	r3, [r3, #12]
 8018372:	899b      	ldrh	r3, [r3, #12]
 8018374:	b29b      	uxth	r3, r3
 8018376:	4618      	mov	r0, r3
 8018378:	f7fa fc8c 	bl	8012c94 <lwip_htons>
 801837c:	4603      	mov	r3, r0
 801837e:	b2db      	uxtb	r3, r3
 8018380:	f003 0303 	and.w	r3, r3, #3
 8018384:	2b00      	cmp	r3, #0
 8018386:	d001      	beq.n	801838c <tcp_receive+0x6c4>
 8018388:	2301      	movs	r3, #1
 801838a:	e000      	b.n	801838e <tcp_receive+0x6c6>
 801838c:	2300      	movs	r3, #0
 801838e:	4423      	add	r3, r4
 8018390:	b29a      	uxth	r2, r3
 8018392:	4b71      	ldr	r3, [pc, #452]	; (8018558 <tcp_receive+0x890>)
 8018394:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801839a:	4b6f      	ldr	r3, [pc, #444]	; (8018558 <tcp_receive+0x890>)
 801839c:	881b      	ldrh	r3, [r3, #0]
 801839e:	429a      	cmp	r2, r3
 80183a0:	d275      	bcs.n	801848e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80183a2:	4b6c      	ldr	r3, [pc, #432]	; (8018554 <tcp_receive+0x88c>)
 80183a4:	68db      	ldr	r3, [r3, #12]
 80183a6:	899b      	ldrh	r3, [r3, #12]
 80183a8:	b29b      	uxth	r3, r3
 80183aa:	4618      	mov	r0, r3
 80183ac:	f7fa fc72 	bl	8012c94 <lwip_htons>
 80183b0:	4603      	mov	r3, r0
 80183b2:	b2db      	uxtb	r3, r3
 80183b4:	f003 0301 	and.w	r3, r3, #1
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d01f      	beq.n	80183fc <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80183bc:	4b65      	ldr	r3, [pc, #404]	; (8018554 <tcp_receive+0x88c>)
 80183be:	68db      	ldr	r3, [r3, #12]
 80183c0:	899b      	ldrh	r3, [r3, #12]
 80183c2:	b29b      	uxth	r3, r3
 80183c4:	b21b      	sxth	r3, r3
 80183c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80183ca:	b21c      	sxth	r4, r3
 80183cc:	4b61      	ldr	r3, [pc, #388]	; (8018554 <tcp_receive+0x88c>)
 80183ce:	68db      	ldr	r3, [r3, #12]
 80183d0:	899b      	ldrh	r3, [r3, #12]
 80183d2:	b29b      	uxth	r3, r3
 80183d4:	4618      	mov	r0, r3
 80183d6:	f7fa fc5d 	bl	8012c94 <lwip_htons>
 80183da:	4603      	mov	r3, r0
 80183dc:	b2db      	uxtb	r3, r3
 80183de:	b29b      	uxth	r3, r3
 80183e0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80183e4:	b29b      	uxth	r3, r3
 80183e6:	4618      	mov	r0, r3
 80183e8:	f7fa fc54 	bl	8012c94 <lwip_htons>
 80183ec:	4603      	mov	r3, r0
 80183ee:	b21b      	sxth	r3, r3
 80183f0:	4323      	orrs	r3, r4
 80183f2:	b21a      	sxth	r2, r3
 80183f4:	4b57      	ldr	r3, [pc, #348]	; (8018554 <tcp_receive+0x88c>)
 80183f6:	68db      	ldr	r3, [r3, #12]
 80183f8:	b292      	uxth	r2, r2
 80183fa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018400:	4b54      	ldr	r3, [pc, #336]	; (8018554 <tcp_receive+0x88c>)
 8018402:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018404:	4b53      	ldr	r3, [pc, #332]	; (8018554 <tcp_receive+0x88c>)
 8018406:	68db      	ldr	r3, [r3, #12]
 8018408:	899b      	ldrh	r3, [r3, #12]
 801840a:	b29b      	uxth	r3, r3
 801840c:	4618      	mov	r0, r3
 801840e:	f7fa fc41 	bl	8012c94 <lwip_htons>
 8018412:	4603      	mov	r3, r0
 8018414:	b2db      	uxtb	r3, r3
 8018416:	f003 0302 	and.w	r3, r3, #2
 801841a:	2b00      	cmp	r3, #0
 801841c:	d005      	beq.n	801842a <tcp_receive+0x762>
            inseg.len -= 1;
 801841e:	4b4d      	ldr	r3, [pc, #308]	; (8018554 <tcp_receive+0x88c>)
 8018420:	891b      	ldrh	r3, [r3, #8]
 8018422:	3b01      	subs	r3, #1
 8018424:	b29a      	uxth	r2, r3
 8018426:	4b4b      	ldr	r3, [pc, #300]	; (8018554 <tcp_receive+0x88c>)
 8018428:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801842a:	4b4a      	ldr	r3, [pc, #296]	; (8018554 <tcp_receive+0x88c>)
 801842c:	685b      	ldr	r3, [r3, #4]
 801842e:	4a49      	ldr	r2, [pc, #292]	; (8018554 <tcp_receive+0x88c>)
 8018430:	8912      	ldrh	r2, [r2, #8]
 8018432:	4611      	mov	r1, r2
 8018434:	4618      	mov	r0, r3
 8018436:	f7fb fea5 	bl	8014184 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801843a:	4b46      	ldr	r3, [pc, #280]	; (8018554 <tcp_receive+0x88c>)
 801843c:	891c      	ldrh	r4, [r3, #8]
 801843e:	4b45      	ldr	r3, [pc, #276]	; (8018554 <tcp_receive+0x88c>)
 8018440:	68db      	ldr	r3, [r3, #12]
 8018442:	899b      	ldrh	r3, [r3, #12]
 8018444:	b29b      	uxth	r3, r3
 8018446:	4618      	mov	r0, r3
 8018448:	f7fa fc24 	bl	8012c94 <lwip_htons>
 801844c:	4603      	mov	r3, r0
 801844e:	b2db      	uxtb	r3, r3
 8018450:	f003 0303 	and.w	r3, r3, #3
 8018454:	2b00      	cmp	r3, #0
 8018456:	d001      	beq.n	801845c <tcp_receive+0x794>
 8018458:	2301      	movs	r3, #1
 801845a:	e000      	b.n	801845e <tcp_receive+0x796>
 801845c:	2300      	movs	r3, #0
 801845e:	4423      	add	r3, r4
 8018460:	b29a      	uxth	r2, r3
 8018462:	4b3d      	ldr	r3, [pc, #244]	; (8018558 <tcp_receive+0x890>)
 8018464:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018466:	4b3c      	ldr	r3, [pc, #240]	; (8018558 <tcp_receive+0x890>)
 8018468:	881b      	ldrh	r3, [r3, #0]
 801846a:	461a      	mov	r2, r3
 801846c:	4b38      	ldr	r3, [pc, #224]	; (8018550 <tcp_receive+0x888>)
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	441a      	add	r2, r3
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018476:	6879      	ldr	r1, [r7, #4]
 8018478:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801847a:	440b      	add	r3, r1
 801847c:	429a      	cmp	r2, r3
 801847e:	d006      	beq.n	801848e <tcp_receive+0x7c6>
 8018480:	4b36      	ldr	r3, [pc, #216]	; (801855c <tcp_receive+0x894>)
 8018482:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8018486:	4936      	ldr	r1, [pc, #216]	; (8018560 <tcp_receive+0x898>)
 8018488:	4836      	ldr	r0, [pc, #216]	; (8018564 <tcp_receive+0x89c>)
 801848a:	f009 f945 	bl	8021718 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018492:	2b00      	cmp	r3, #0
 8018494:	f000 80e7 	beq.w	8018666 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018498:	4b2e      	ldr	r3, [pc, #184]	; (8018554 <tcp_receive+0x88c>)
 801849a:	68db      	ldr	r3, [r3, #12]
 801849c:	899b      	ldrh	r3, [r3, #12]
 801849e:	b29b      	uxth	r3, r3
 80184a0:	4618      	mov	r0, r3
 80184a2:	f7fa fbf7 	bl	8012c94 <lwip_htons>
 80184a6:	4603      	mov	r3, r0
 80184a8:	b2db      	uxtb	r3, r3
 80184aa:	f003 0301 	and.w	r3, r3, #1
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d010      	beq.n	80184d4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80184b2:	e00a      	b.n	80184ca <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80184b8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80184be:	681a      	ldr	r2, [r3, #0]
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80184c4:	68f8      	ldr	r0, [r7, #12]
 80184c6:	f7fd fcac 	bl	8015e22 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d1f0      	bne.n	80184b4 <tcp_receive+0x7ec>
 80184d2:	e0c8      	b.n	8018666 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80184d8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80184da:	e052      	b.n	8018582 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80184dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184de:	68db      	ldr	r3, [r3, #12]
 80184e0:	899b      	ldrh	r3, [r3, #12]
 80184e2:	b29b      	uxth	r3, r3
 80184e4:	4618      	mov	r0, r3
 80184e6:	f7fa fbd5 	bl	8012c94 <lwip_htons>
 80184ea:	4603      	mov	r3, r0
 80184ec:	b2db      	uxtb	r3, r3
 80184ee:	f003 0301 	and.w	r3, r3, #1
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d03d      	beq.n	8018572 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80184f6:	4b17      	ldr	r3, [pc, #92]	; (8018554 <tcp_receive+0x88c>)
 80184f8:	68db      	ldr	r3, [r3, #12]
 80184fa:	899b      	ldrh	r3, [r3, #12]
 80184fc:	b29b      	uxth	r3, r3
 80184fe:	4618      	mov	r0, r3
 8018500:	f7fa fbc8 	bl	8012c94 <lwip_htons>
 8018504:	4603      	mov	r3, r0
 8018506:	b2db      	uxtb	r3, r3
 8018508:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801850c:	2b00      	cmp	r3, #0
 801850e:	d130      	bne.n	8018572 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8018510:	4b10      	ldr	r3, [pc, #64]	; (8018554 <tcp_receive+0x88c>)
 8018512:	68db      	ldr	r3, [r3, #12]
 8018514:	899b      	ldrh	r3, [r3, #12]
 8018516:	b29c      	uxth	r4, r3
 8018518:	2001      	movs	r0, #1
 801851a:	f7fa fbbb 	bl	8012c94 <lwip_htons>
 801851e:	4603      	mov	r3, r0
 8018520:	461a      	mov	r2, r3
 8018522:	4b0c      	ldr	r3, [pc, #48]	; (8018554 <tcp_receive+0x88c>)
 8018524:	68db      	ldr	r3, [r3, #12]
 8018526:	4322      	orrs	r2, r4
 8018528:	b292      	uxth	r2, r2
 801852a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801852c:	4b09      	ldr	r3, [pc, #36]	; (8018554 <tcp_receive+0x88c>)
 801852e:	891c      	ldrh	r4, [r3, #8]
 8018530:	4b08      	ldr	r3, [pc, #32]	; (8018554 <tcp_receive+0x88c>)
 8018532:	68db      	ldr	r3, [r3, #12]
 8018534:	899b      	ldrh	r3, [r3, #12]
 8018536:	b29b      	uxth	r3, r3
 8018538:	4618      	mov	r0, r3
 801853a:	f7fa fbab 	bl	8012c94 <lwip_htons>
 801853e:	4603      	mov	r3, r0
 8018540:	b2db      	uxtb	r3, r3
 8018542:	f003 0303 	and.w	r3, r3, #3
 8018546:	2b00      	cmp	r3, #0
 8018548:	d00e      	beq.n	8018568 <tcp_receive+0x8a0>
 801854a:	2301      	movs	r3, #1
 801854c:	e00d      	b.n	801856a <tcp_receive+0x8a2>
 801854e:	bf00      	nop
 8018550:	20012388 	.word	0x20012388
 8018554:	20012368 	.word	0x20012368
 8018558:	20012392 	.word	0x20012392
 801855c:	08025654 	.word	0x08025654
 8018560:	080259fc 	.word	0x080259fc
 8018564:	080256a0 	.word	0x080256a0
 8018568:	2300      	movs	r3, #0
 801856a:	4423      	add	r3, r4
 801856c:	b29a      	uxth	r2, r3
 801856e:	4b98      	ldr	r3, [pc, #608]	; (80187d0 <tcp_receive+0xb08>)
 8018570:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8018572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018574:	613b      	str	r3, [r7, #16]
              next = next->next;
 8018576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801857c:	6938      	ldr	r0, [r7, #16]
 801857e:	f7fd fc50 	bl	8015e22 <tcp_seg_free>
            while (next &&
 8018582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018584:	2b00      	cmp	r3, #0
 8018586:	d00e      	beq.n	80185a6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018588:	4b91      	ldr	r3, [pc, #580]	; (80187d0 <tcp_receive+0xb08>)
 801858a:	881b      	ldrh	r3, [r3, #0]
 801858c:	461a      	mov	r2, r3
 801858e:	4b91      	ldr	r3, [pc, #580]	; (80187d4 <tcp_receive+0xb0c>)
 8018590:	681b      	ldr	r3, [r3, #0]
 8018592:	441a      	add	r2, r3
 8018594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018596:	68db      	ldr	r3, [r3, #12]
 8018598:	685b      	ldr	r3, [r3, #4]
 801859a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801859c:	8909      	ldrh	r1, [r1, #8]
 801859e:	440b      	add	r3, r1
 80185a0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	da9a      	bge.n	80184dc <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80185a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d059      	beq.n	8018660 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80185ac:	4b88      	ldr	r3, [pc, #544]	; (80187d0 <tcp_receive+0xb08>)
 80185ae:	881b      	ldrh	r3, [r3, #0]
 80185b0:	461a      	mov	r2, r3
 80185b2:	4b88      	ldr	r3, [pc, #544]	; (80187d4 <tcp_receive+0xb0c>)
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	441a      	add	r2, r3
 80185b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185ba:	68db      	ldr	r3, [r3, #12]
 80185bc:	685b      	ldr	r3, [r3, #4]
 80185be:	1ad3      	subs	r3, r2, r3
            if (next &&
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	dd4d      	ble.n	8018660 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80185c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185c6:	68db      	ldr	r3, [r3, #12]
 80185c8:	685b      	ldr	r3, [r3, #4]
 80185ca:	b29a      	uxth	r2, r3
 80185cc:	4b81      	ldr	r3, [pc, #516]	; (80187d4 <tcp_receive+0xb0c>)
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	b29b      	uxth	r3, r3
 80185d2:	1ad3      	subs	r3, r2, r3
 80185d4:	b29a      	uxth	r2, r3
 80185d6:	4b80      	ldr	r3, [pc, #512]	; (80187d8 <tcp_receive+0xb10>)
 80185d8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80185da:	4b7f      	ldr	r3, [pc, #508]	; (80187d8 <tcp_receive+0xb10>)
 80185dc:	68db      	ldr	r3, [r3, #12]
 80185de:	899b      	ldrh	r3, [r3, #12]
 80185e0:	b29b      	uxth	r3, r3
 80185e2:	4618      	mov	r0, r3
 80185e4:	f7fa fb56 	bl	8012c94 <lwip_htons>
 80185e8:	4603      	mov	r3, r0
 80185ea:	b2db      	uxtb	r3, r3
 80185ec:	f003 0302 	and.w	r3, r3, #2
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d005      	beq.n	8018600 <tcp_receive+0x938>
                inseg.len -= 1;
 80185f4:	4b78      	ldr	r3, [pc, #480]	; (80187d8 <tcp_receive+0xb10>)
 80185f6:	891b      	ldrh	r3, [r3, #8]
 80185f8:	3b01      	subs	r3, #1
 80185fa:	b29a      	uxth	r2, r3
 80185fc:	4b76      	ldr	r3, [pc, #472]	; (80187d8 <tcp_receive+0xb10>)
 80185fe:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8018600:	4b75      	ldr	r3, [pc, #468]	; (80187d8 <tcp_receive+0xb10>)
 8018602:	685b      	ldr	r3, [r3, #4]
 8018604:	4a74      	ldr	r2, [pc, #464]	; (80187d8 <tcp_receive+0xb10>)
 8018606:	8912      	ldrh	r2, [r2, #8]
 8018608:	4611      	mov	r1, r2
 801860a:	4618      	mov	r0, r3
 801860c:	f7fb fdba 	bl	8014184 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8018610:	4b71      	ldr	r3, [pc, #452]	; (80187d8 <tcp_receive+0xb10>)
 8018612:	891c      	ldrh	r4, [r3, #8]
 8018614:	4b70      	ldr	r3, [pc, #448]	; (80187d8 <tcp_receive+0xb10>)
 8018616:	68db      	ldr	r3, [r3, #12]
 8018618:	899b      	ldrh	r3, [r3, #12]
 801861a:	b29b      	uxth	r3, r3
 801861c:	4618      	mov	r0, r3
 801861e:	f7fa fb39 	bl	8012c94 <lwip_htons>
 8018622:	4603      	mov	r3, r0
 8018624:	b2db      	uxtb	r3, r3
 8018626:	f003 0303 	and.w	r3, r3, #3
 801862a:	2b00      	cmp	r3, #0
 801862c:	d001      	beq.n	8018632 <tcp_receive+0x96a>
 801862e:	2301      	movs	r3, #1
 8018630:	e000      	b.n	8018634 <tcp_receive+0x96c>
 8018632:	2300      	movs	r3, #0
 8018634:	4423      	add	r3, r4
 8018636:	b29a      	uxth	r2, r3
 8018638:	4b65      	ldr	r3, [pc, #404]	; (80187d0 <tcp_receive+0xb08>)
 801863a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801863c:	4b64      	ldr	r3, [pc, #400]	; (80187d0 <tcp_receive+0xb08>)
 801863e:	881b      	ldrh	r3, [r3, #0]
 8018640:	461a      	mov	r2, r3
 8018642:	4b64      	ldr	r3, [pc, #400]	; (80187d4 <tcp_receive+0xb0c>)
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	441a      	add	r2, r3
 8018648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801864a:	68db      	ldr	r3, [r3, #12]
 801864c:	685b      	ldr	r3, [r3, #4]
 801864e:	429a      	cmp	r2, r3
 8018650:	d006      	beq.n	8018660 <tcp_receive+0x998>
 8018652:	4b62      	ldr	r3, [pc, #392]	; (80187dc <tcp_receive+0xb14>)
 8018654:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8018658:	4961      	ldr	r1, [pc, #388]	; (80187e0 <tcp_receive+0xb18>)
 801865a:	4862      	ldr	r0, [pc, #392]	; (80187e4 <tcp_receive+0xb1c>)
 801865c:	f009 f85c 	bl	8021718 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018664:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8018666:	4b5a      	ldr	r3, [pc, #360]	; (80187d0 <tcp_receive+0xb08>)
 8018668:	881b      	ldrh	r3, [r3, #0]
 801866a:	461a      	mov	r2, r3
 801866c:	4b59      	ldr	r3, [pc, #356]	; (80187d4 <tcp_receive+0xb0c>)
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	441a      	add	r2, r3
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801867a:	4b55      	ldr	r3, [pc, #340]	; (80187d0 <tcp_receive+0xb08>)
 801867c:	881b      	ldrh	r3, [r3, #0]
 801867e:	429a      	cmp	r2, r3
 8018680:	d206      	bcs.n	8018690 <tcp_receive+0x9c8>
 8018682:	4b56      	ldr	r3, [pc, #344]	; (80187dc <tcp_receive+0xb14>)
 8018684:	f240 6207 	movw	r2, #1543	; 0x607
 8018688:	4957      	ldr	r1, [pc, #348]	; (80187e8 <tcp_receive+0xb20>)
 801868a:	4856      	ldr	r0, [pc, #344]	; (80187e4 <tcp_receive+0xb1c>)
 801868c:	f009 f844 	bl	8021718 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018694:	4b4e      	ldr	r3, [pc, #312]	; (80187d0 <tcp_receive+0xb08>)
 8018696:	881b      	ldrh	r3, [r3, #0]
 8018698:	1ad3      	subs	r3, r2, r3
 801869a:	b29a      	uxth	r2, r3
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80186a0:	6878      	ldr	r0, [r7, #4]
 80186a2:	f7fc fe97 	bl	80153d4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80186a6:	4b4c      	ldr	r3, [pc, #304]	; (80187d8 <tcp_receive+0xb10>)
 80186a8:	685b      	ldr	r3, [r3, #4]
 80186aa:	891b      	ldrh	r3, [r3, #8]
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d006      	beq.n	80186be <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80186b0:	4b49      	ldr	r3, [pc, #292]	; (80187d8 <tcp_receive+0xb10>)
 80186b2:	685b      	ldr	r3, [r3, #4]
 80186b4:	4a4d      	ldr	r2, [pc, #308]	; (80187ec <tcp_receive+0xb24>)
 80186b6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80186b8:	4b47      	ldr	r3, [pc, #284]	; (80187d8 <tcp_receive+0xb10>)
 80186ba:	2200      	movs	r2, #0
 80186bc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80186be:	4b46      	ldr	r3, [pc, #280]	; (80187d8 <tcp_receive+0xb10>)
 80186c0:	68db      	ldr	r3, [r3, #12]
 80186c2:	899b      	ldrh	r3, [r3, #12]
 80186c4:	b29b      	uxth	r3, r3
 80186c6:	4618      	mov	r0, r3
 80186c8:	f7fa fae4 	bl	8012c94 <lwip_htons>
 80186cc:	4603      	mov	r3, r0
 80186ce:	b2db      	uxtb	r3, r3
 80186d0:	f003 0301 	and.w	r3, r3, #1
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	f000 80b8 	beq.w	801884a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80186da:	4b45      	ldr	r3, [pc, #276]	; (80187f0 <tcp_receive+0xb28>)
 80186dc:	781b      	ldrb	r3, [r3, #0]
 80186de:	f043 0320 	orr.w	r3, r3, #32
 80186e2:	b2da      	uxtb	r2, r3
 80186e4:	4b42      	ldr	r3, [pc, #264]	; (80187f0 <tcp_receive+0xb28>)
 80186e6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80186e8:	e0af      	b.n	801884a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80186ee:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80186f4:	68db      	ldr	r3, [r3, #12]
 80186f6:	685b      	ldr	r3, [r3, #4]
 80186f8:	4a36      	ldr	r2, [pc, #216]	; (80187d4 <tcp_receive+0xb0c>)
 80186fa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80186fc:	68bb      	ldr	r3, [r7, #8]
 80186fe:	891b      	ldrh	r3, [r3, #8]
 8018700:	461c      	mov	r4, r3
 8018702:	68bb      	ldr	r3, [r7, #8]
 8018704:	68db      	ldr	r3, [r3, #12]
 8018706:	899b      	ldrh	r3, [r3, #12]
 8018708:	b29b      	uxth	r3, r3
 801870a:	4618      	mov	r0, r3
 801870c:	f7fa fac2 	bl	8012c94 <lwip_htons>
 8018710:	4603      	mov	r3, r0
 8018712:	b2db      	uxtb	r3, r3
 8018714:	f003 0303 	and.w	r3, r3, #3
 8018718:	2b00      	cmp	r3, #0
 801871a:	d001      	beq.n	8018720 <tcp_receive+0xa58>
 801871c:	2301      	movs	r3, #1
 801871e:	e000      	b.n	8018722 <tcp_receive+0xa5a>
 8018720:	2300      	movs	r3, #0
 8018722:	191a      	adds	r2, r3, r4
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018728:	441a      	add	r2, r3
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018732:	461c      	mov	r4, r3
 8018734:	68bb      	ldr	r3, [r7, #8]
 8018736:	891b      	ldrh	r3, [r3, #8]
 8018738:	461d      	mov	r5, r3
 801873a:	68bb      	ldr	r3, [r7, #8]
 801873c:	68db      	ldr	r3, [r3, #12]
 801873e:	899b      	ldrh	r3, [r3, #12]
 8018740:	b29b      	uxth	r3, r3
 8018742:	4618      	mov	r0, r3
 8018744:	f7fa faa6 	bl	8012c94 <lwip_htons>
 8018748:	4603      	mov	r3, r0
 801874a:	b2db      	uxtb	r3, r3
 801874c:	f003 0303 	and.w	r3, r3, #3
 8018750:	2b00      	cmp	r3, #0
 8018752:	d001      	beq.n	8018758 <tcp_receive+0xa90>
 8018754:	2301      	movs	r3, #1
 8018756:	e000      	b.n	801875a <tcp_receive+0xa92>
 8018758:	2300      	movs	r3, #0
 801875a:	442b      	add	r3, r5
 801875c:	429c      	cmp	r4, r3
 801875e:	d206      	bcs.n	801876e <tcp_receive+0xaa6>
 8018760:	4b1e      	ldr	r3, [pc, #120]	; (80187dc <tcp_receive+0xb14>)
 8018762:	f240 622b 	movw	r2, #1579	; 0x62b
 8018766:	4923      	ldr	r1, [pc, #140]	; (80187f4 <tcp_receive+0xb2c>)
 8018768:	481e      	ldr	r0, [pc, #120]	; (80187e4 <tcp_receive+0xb1c>)
 801876a:	f008 ffd5 	bl	8021718 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801876e:	68bb      	ldr	r3, [r7, #8]
 8018770:	891b      	ldrh	r3, [r3, #8]
 8018772:	461c      	mov	r4, r3
 8018774:	68bb      	ldr	r3, [r7, #8]
 8018776:	68db      	ldr	r3, [r3, #12]
 8018778:	899b      	ldrh	r3, [r3, #12]
 801877a:	b29b      	uxth	r3, r3
 801877c:	4618      	mov	r0, r3
 801877e:	f7fa fa89 	bl	8012c94 <lwip_htons>
 8018782:	4603      	mov	r3, r0
 8018784:	b2db      	uxtb	r3, r3
 8018786:	f003 0303 	and.w	r3, r3, #3
 801878a:	2b00      	cmp	r3, #0
 801878c:	d001      	beq.n	8018792 <tcp_receive+0xaca>
 801878e:	2301      	movs	r3, #1
 8018790:	e000      	b.n	8018794 <tcp_receive+0xacc>
 8018792:	2300      	movs	r3, #0
 8018794:	1919      	adds	r1, r3, r4
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801879a:	b28b      	uxth	r3, r1
 801879c:	1ad3      	subs	r3, r2, r3
 801879e:	b29a      	uxth	r2, r3
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80187a4:	6878      	ldr	r0, [r7, #4]
 80187a6:	f7fc fe15 	bl	80153d4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80187aa:	68bb      	ldr	r3, [r7, #8]
 80187ac:	685b      	ldr	r3, [r3, #4]
 80187ae:	891b      	ldrh	r3, [r3, #8]
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d028      	beq.n	8018806 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80187b4:	4b0d      	ldr	r3, [pc, #52]	; (80187ec <tcp_receive+0xb24>)
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d01d      	beq.n	80187f8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80187bc:	4b0b      	ldr	r3, [pc, #44]	; (80187ec <tcp_receive+0xb24>)
 80187be:	681a      	ldr	r2, [r3, #0]
 80187c0:	68bb      	ldr	r3, [r7, #8]
 80187c2:	685b      	ldr	r3, [r3, #4]
 80187c4:	4619      	mov	r1, r3
 80187c6:	4610      	mov	r0, r2
 80187c8:	f7fb ff30 	bl	801462c <pbuf_cat>
 80187cc:	e018      	b.n	8018800 <tcp_receive+0xb38>
 80187ce:	bf00      	nop
 80187d0:	20012392 	.word	0x20012392
 80187d4:	20012388 	.word	0x20012388
 80187d8:	20012368 	.word	0x20012368
 80187dc:	08025654 	.word	0x08025654
 80187e0:	08025a34 	.word	0x08025a34
 80187e4:	080256a0 	.word	0x080256a0
 80187e8:	08025a70 	.word	0x08025a70
 80187ec:	20012398 	.word	0x20012398
 80187f0:	20012395 	.word	0x20012395
 80187f4:	08025a90 	.word	0x08025a90
            } else {
              recv_data = cseg->p;
 80187f8:	68bb      	ldr	r3, [r7, #8]
 80187fa:	685b      	ldr	r3, [r3, #4]
 80187fc:	4a70      	ldr	r2, [pc, #448]	; (80189c0 <tcp_receive+0xcf8>)
 80187fe:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8018800:	68bb      	ldr	r3, [r7, #8]
 8018802:	2200      	movs	r2, #0
 8018804:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018806:	68bb      	ldr	r3, [r7, #8]
 8018808:	68db      	ldr	r3, [r3, #12]
 801880a:	899b      	ldrh	r3, [r3, #12]
 801880c:	b29b      	uxth	r3, r3
 801880e:	4618      	mov	r0, r3
 8018810:	f7fa fa40 	bl	8012c94 <lwip_htons>
 8018814:	4603      	mov	r3, r0
 8018816:	b2db      	uxtb	r3, r3
 8018818:	f003 0301 	and.w	r3, r3, #1
 801881c:	2b00      	cmp	r3, #0
 801881e:	d00d      	beq.n	801883c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8018820:	4b68      	ldr	r3, [pc, #416]	; (80189c4 <tcp_receive+0xcfc>)
 8018822:	781b      	ldrb	r3, [r3, #0]
 8018824:	f043 0320 	orr.w	r3, r3, #32
 8018828:	b2da      	uxtb	r2, r3
 801882a:	4b66      	ldr	r3, [pc, #408]	; (80189c4 <tcp_receive+0xcfc>)
 801882c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	7d1b      	ldrb	r3, [r3, #20]
 8018832:	2b04      	cmp	r3, #4
 8018834:	d102      	bne.n	801883c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	2207      	movs	r2, #7
 801883a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801883c:	68bb      	ldr	r3, [r7, #8]
 801883e:	681a      	ldr	r2, [r3, #0]
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8018844:	68b8      	ldr	r0, [r7, #8]
 8018846:	f7fd faec 	bl	8015e22 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801884e:	2b00      	cmp	r3, #0
 8018850:	d008      	beq.n	8018864 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018856:	68db      	ldr	r3, [r3, #12]
 8018858:	685a      	ldr	r2, [r3, #4]
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801885e:	429a      	cmp	r2, r3
 8018860:	f43f af43 	beq.w	80186ea <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	8b5b      	ldrh	r3, [r3, #26]
 8018868:	f003 0301 	and.w	r3, r3, #1
 801886c:	2b00      	cmp	r3, #0
 801886e:	d00e      	beq.n	801888e <tcp_receive+0xbc6>
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	8b5b      	ldrh	r3, [r3, #26]
 8018874:	f023 0301 	bic.w	r3, r3, #1
 8018878:	b29a      	uxth	r2, r3
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	835a      	strh	r2, [r3, #26]
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	8b5b      	ldrh	r3, [r3, #26]
 8018882:	f043 0302 	orr.w	r3, r3, #2
 8018886:	b29a      	uxth	r2, r3
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801888c:	e188      	b.n	8018ba0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	8b5b      	ldrh	r3, [r3, #26]
 8018892:	f043 0301 	orr.w	r3, r3, #1
 8018896:	b29a      	uxth	r2, r3
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801889c:	e180      	b.n	8018ba0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d106      	bne.n	80188b4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80188a6:	4848      	ldr	r0, [pc, #288]	; (80189c8 <tcp_receive+0xd00>)
 80188a8:	f7fd fad4 	bl	8015e54 <tcp_seg_copy>
 80188ac:	4602      	mov	r2, r0
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	675a      	str	r2, [r3, #116]	; 0x74
 80188b2:	e16d      	b.n	8018b90 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80188b4:	2300      	movs	r3, #0
 80188b6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80188bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80188be:	e157      	b.n	8018b70 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80188c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188c2:	68db      	ldr	r3, [r3, #12]
 80188c4:	685a      	ldr	r2, [r3, #4]
 80188c6:	4b41      	ldr	r3, [pc, #260]	; (80189cc <tcp_receive+0xd04>)
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	429a      	cmp	r2, r3
 80188cc:	d11d      	bne.n	801890a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80188ce:	4b3e      	ldr	r3, [pc, #248]	; (80189c8 <tcp_receive+0xd00>)
 80188d0:	891a      	ldrh	r2, [r3, #8]
 80188d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188d4:	891b      	ldrh	r3, [r3, #8]
 80188d6:	429a      	cmp	r2, r3
 80188d8:	f240 814f 	bls.w	8018b7a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80188dc:	483a      	ldr	r0, [pc, #232]	; (80189c8 <tcp_receive+0xd00>)
 80188de:	f7fd fab9 	bl	8015e54 <tcp_seg_copy>
 80188e2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80188e4:	697b      	ldr	r3, [r7, #20]
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	f000 8149 	beq.w	8018b7e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80188ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d003      	beq.n	80188fa <tcp_receive+0xc32>
                    prev->next = cseg;
 80188f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188f4:	697a      	ldr	r2, [r7, #20]
 80188f6:	601a      	str	r2, [r3, #0]
 80188f8:	e002      	b.n	8018900 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	697a      	ldr	r2, [r7, #20]
 80188fe:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8018900:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018902:	6978      	ldr	r0, [r7, #20]
 8018904:	f7ff f8dc 	bl	8017ac0 <tcp_oos_insert_segment>
                }
                break;
 8018908:	e139      	b.n	8018b7e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801890a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801890c:	2b00      	cmp	r3, #0
 801890e:	d117      	bne.n	8018940 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8018910:	4b2e      	ldr	r3, [pc, #184]	; (80189cc <tcp_receive+0xd04>)
 8018912:	681a      	ldr	r2, [r3, #0]
 8018914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018916:	68db      	ldr	r3, [r3, #12]
 8018918:	685b      	ldr	r3, [r3, #4]
 801891a:	1ad3      	subs	r3, r2, r3
 801891c:	2b00      	cmp	r3, #0
 801891e:	da57      	bge.n	80189d0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018920:	4829      	ldr	r0, [pc, #164]	; (80189c8 <tcp_receive+0xd00>)
 8018922:	f7fd fa97 	bl	8015e54 <tcp_seg_copy>
 8018926:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018928:	69bb      	ldr	r3, [r7, #24]
 801892a:	2b00      	cmp	r3, #0
 801892c:	f000 8129 	beq.w	8018b82 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	69ba      	ldr	r2, [r7, #24]
 8018934:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8018936:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018938:	69b8      	ldr	r0, [r7, #24]
 801893a:	f7ff f8c1 	bl	8017ac0 <tcp_oos_insert_segment>
                  }
                  break;
 801893e:	e120      	b.n	8018b82 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018940:	4b22      	ldr	r3, [pc, #136]	; (80189cc <tcp_receive+0xd04>)
 8018942:	681a      	ldr	r2, [r3, #0]
 8018944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018946:	68db      	ldr	r3, [r3, #12]
 8018948:	685b      	ldr	r3, [r3, #4]
 801894a:	1ad3      	subs	r3, r2, r3
 801894c:	3b01      	subs	r3, #1
 801894e:	2b00      	cmp	r3, #0
 8018950:	db3e      	blt.n	80189d0 <tcp_receive+0xd08>
 8018952:	4b1e      	ldr	r3, [pc, #120]	; (80189cc <tcp_receive+0xd04>)
 8018954:	681a      	ldr	r2, [r3, #0]
 8018956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018958:	68db      	ldr	r3, [r3, #12]
 801895a:	685b      	ldr	r3, [r3, #4]
 801895c:	1ad3      	subs	r3, r2, r3
 801895e:	3301      	adds	r3, #1
 8018960:	2b00      	cmp	r3, #0
 8018962:	dc35      	bgt.n	80189d0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018964:	4818      	ldr	r0, [pc, #96]	; (80189c8 <tcp_receive+0xd00>)
 8018966:	f7fd fa75 	bl	8015e54 <tcp_seg_copy>
 801896a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801896c:	69fb      	ldr	r3, [r7, #28]
 801896e:	2b00      	cmp	r3, #0
 8018970:	f000 8109 	beq.w	8018b86 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8018974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018976:	68db      	ldr	r3, [r3, #12]
 8018978:	685b      	ldr	r3, [r3, #4]
 801897a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801897c:	8912      	ldrh	r2, [r2, #8]
 801897e:	441a      	add	r2, r3
 8018980:	4b12      	ldr	r3, [pc, #72]	; (80189cc <tcp_receive+0xd04>)
 8018982:	681b      	ldr	r3, [r3, #0]
 8018984:	1ad3      	subs	r3, r2, r3
 8018986:	2b00      	cmp	r3, #0
 8018988:	dd12      	ble.n	80189b0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801898a:	4b10      	ldr	r3, [pc, #64]	; (80189cc <tcp_receive+0xd04>)
 801898c:	681b      	ldr	r3, [r3, #0]
 801898e:	b29a      	uxth	r2, r3
 8018990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018992:	68db      	ldr	r3, [r3, #12]
 8018994:	685b      	ldr	r3, [r3, #4]
 8018996:	b29b      	uxth	r3, r3
 8018998:	1ad3      	subs	r3, r2, r3
 801899a:	b29a      	uxth	r2, r3
 801899c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801899e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80189a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189a2:	685a      	ldr	r2, [r3, #4]
 80189a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189a6:	891b      	ldrh	r3, [r3, #8]
 80189a8:	4619      	mov	r1, r3
 80189aa:	4610      	mov	r0, r2
 80189ac:	f7fb fbea 	bl	8014184 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80189b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189b2:	69fa      	ldr	r2, [r7, #28]
 80189b4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80189b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80189b8:	69f8      	ldr	r0, [r7, #28]
 80189ba:	f7ff f881 	bl	8017ac0 <tcp_oos_insert_segment>
                  }
                  break;
 80189be:	e0e2      	b.n	8018b86 <tcp_receive+0xebe>
 80189c0:	20012398 	.word	0x20012398
 80189c4:	20012395 	.word	0x20012395
 80189c8:	20012368 	.word	0x20012368
 80189cc:	20012388 	.word	0x20012388
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80189d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189d2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80189d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	2b00      	cmp	r3, #0
 80189da:	f040 80c6 	bne.w	8018b6a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80189de:	4b80      	ldr	r3, [pc, #512]	; (8018be0 <tcp_receive+0xf18>)
 80189e0:	681a      	ldr	r2, [r3, #0]
 80189e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189e4:	68db      	ldr	r3, [r3, #12]
 80189e6:	685b      	ldr	r3, [r3, #4]
 80189e8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	f340 80bd 	ble.w	8018b6a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80189f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189f2:	68db      	ldr	r3, [r3, #12]
 80189f4:	899b      	ldrh	r3, [r3, #12]
 80189f6:	b29b      	uxth	r3, r3
 80189f8:	4618      	mov	r0, r3
 80189fa:	f7fa f94b 	bl	8012c94 <lwip_htons>
 80189fe:	4603      	mov	r3, r0
 8018a00:	b2db      	uxtb	r3, r3
 8018a02:	f003 0301 	and.w	r3, r3, #1
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	f040 80bf 	bne.w	8018b8a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8018a0c:	4875      	ldr	r0, [pc, #468]	; (8018be4 <tcp_receive+0xf1c>)
 8018a0e:	f7fd fa21 	bl	8015e54 <tcp_seg_copy>
 8018a12:	4602      	mov	r2, r0
 8018a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a16:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8018a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	f000 80b6 	beq.w	8018b8e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8018a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a24:	68db      	ldr	r3, [r3, #12]
 8018a26:	685b      	ldr	r3, [r3, #4]
 8018a28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018a2a:	8912      	ldrh	r2, [r2, #8]
 8018a2c:	441a      	add	r2, r3
 8018a2e:	4b6c      	ldr	r3, [pc, #432]	; (8018be0 <tcp_receive+0xf18>)
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	1ad3      	subs	r3, r2, r3
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	dd12      	ble.n	8018a5e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018a38:	4b69      	ldr	r3, [pc, #420]	; (8018be0 <tcp_receive+0xf18>)
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	b29a      	uxth	r2, r3
 8018a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a40:	68db      	ldr	r3, [r3, #12]
 8018a42:	685b      	ldr	r3, [r3, #4]
 8018a44:	b29b      	uxth	r3, r3
 8018a46:	1ad3      	subs	r3, r2, r3
 8018a48:	b29a      	uxth	r2, r3
 8018a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a4c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8018a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a50:	685a      	ldr	r2, [r3, #4]
 8018a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a54:	891b      	ldrh	r3, [r3, #8]
 8018a56:	4619      	mov	r1, r3
 8018a58:	4610      	mov	r0, r2
 8018a5a:	f7fb fb93 	bl	8014184 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8018a5e:	4b62      	ldr	r3, [pc, #392]	; (8018be8 <tcp_receive+0xf20>)
 8018a60:	881b      	ldrh	r3, [r3, #0]
 8018a62:	461a      	mov	r2, r3
 8018a64:	4b5e      	ldr	r3, [pc, #376]	; (8018be0 <tcp_receive+0xf18>)
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	441a      	add	r2, r3
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a6e:	6879      	ldr	r1, [r7, #4]
 8018a70:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018a72:	440b      	add	r3, r1
 8018a74:	1ad3      	subs	r3, r2, r3
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	f340 8089 	ble.w	8018b8e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	68db      	ldr	r3, [r3, #12]
 8018a82:	899b      	ldrh	r3, [r3, #12]
 8018a84:	b29b      	uxth	r3, r3
 8018a86:	4618      	mov	r0, r3
 8018a88:	f7fa f904 	bl	8012c94 <lwip_htons>
 8018a8c:	4603      	mov	r3, r0
 8018a8e:	b2db      	uxtb	r3, r3
 8018a90:	f003 0301 	and.w	r3, r3, #1
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d022      	beq.n	8018ade <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8018a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	68db      	ldr	r3, [r3, #12]
 8018a9e:	899b      	ldrh	r3, [r3, #12]
 8018aa0:	b29b      	uxth	r3, r3
 8018aa2:	b21b      	sxth	r3, r3
 8018aa4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018aa8:	b21c      	sxth	r4, r3
 8018aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	68db      	ldr	r3, [r3, #12]
 8018ab0:	899b      	ldrh	r3, [r3, #12]
 8018ab2:	b29b      	uxth	r3, r3
 8018ab4:	4618      	mov	r0, r3
 8018ab6:	f7fa f8ed 	bl	8012c94 <lwip_htons>
 8018aba:	4603      	mov	r3, r0
 8018abc:	b2db      	uxtb	r3, r3
 8018abe:	b29b      	uxth	r3, r3
 8018ac0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8018ac4:	b29b      	uxth	r3, r3
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	f7fa f8e4 	bl	8012c94 <lwip_htons>
 8018acc:	4603      	mov	r3, r0
 8018ace:	b21b      	sxth	r3, r3
 8018ad0:	4323      	orrs	r3, r4
 8018ad2:	b21a      	sxth	r2, r3
 8018ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	68db      	ldr	r3, [r3, #12]
 8018ada:	b292      	uxth	r2, r2
 8018adc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ae2:	b29a      	uxth	r2, r3
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018ae8:	4413      	add	r3, r2
 8018aea:	b299      	uxth	r1, r3
 8018aec:	4b3c      	ldr	r3, [pc, #240]	; (8018be0 <tcp_receive+0xf18>)
 8018aee:	681b      	ldr	r3, [r3, #0]
 8018af0:	b29a      	uxth	r2, r3
 8018af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	1a8a      	subs	r2, r1, r2
 8018af8:	b292      	uxth	r2, r2
 8018afa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8018afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	685a      	ldr	r2, [r3, #4]
 8018b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	891b      	ldrh	r3, [r3, #8]
 8018b08:	4619      	mov	r1, r3
 8018b0a:	4610      	mov	r0, r2
 8018b0c:	f7fb fb3a 	bl	8014184 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8018b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	891c      	ldrh	r4, [r3, #8]
 8018b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b18:	681b      	ldr	r3, [r3, #0]
 8018b1a:	68db      	ldr	r3, [r3, #12]
 8018b1c:	899b      	ldrh	r3, [r3, #12]
 8018b1e:	b29b      	uxth	r3, r3
 8018b20:	4618      	mov	r0, r3
 8018b22:	f7fa f8b7 	bl	8012c94 <lwip_htons>
 8018b26:	4603      	mov	r3, r0
 8018b28:	b2db      	uxtb	r3, r3
 8018b2a:	f003 0303 	and.w	r3, r3, #3
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d001      	beq.n	8018b36 <tcp_receive+0xe6e>
 8018b32:	2301      	movs	r3, #1
 8018b34:	e000      	b.n	8018b38 <tcp_receive+0xe70>
 8018b36:	2300      	movs	r3, #0
 8018b38:	4423      	add	r3, r4
 8018b3a:	b29a      	uxth	r2, r3
 8018b3c:	4b2a      	ldr	r3, [pc, #168]	; (8018be8 <tcp_receive+0xf20>)
 8018b3e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018b40:	4b29      	ldr	r3, [pc, #164]	; (8018be8 <tcp_receive+0xf20>)
 8018b42:	881b      	ldrh	r3, [r3, #0]
 8018b44:	461a      	mov	r2, r3
 8018b46:	4b26      	ldr	r3, [pc, #152]	; (8018be0 <tcp_receive+0xf18>)
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	441a      	add	r2, r3
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b50:	6879      	ldr	r1, [r7, #4]
 8018b52:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018b54:	440b      	add	r3, r1
 8018b56:	429a      	cmp	r2, r3
 8018b58:	d019      	beq.n	8018b8e <tcp_receive+0xec6>
 8018b5a:	4b24      	ldr	r3, [pc, #144]	; (8018bec <tcp_receive+0xf24>)
 8018b5c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8018b60:	4923      	ldr	r1, [pc, #140]	; (8018bf0 <tcp_receive+0xf28>)
 8018b62:	4824      	ldr	r0, [pc, #144]	; (8018bf4 <tcp_receive+0xf2c>)
 8018b64:	f008 fdd8 	bl	8021718 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8018b68:	e011      	b.n	8018b8e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8018b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	f47f aea4 	bne.w	80188c0 <tcp_receive+0xbf8>
 8018b78:	e00a      	b.n	8018b90 <tcp_receive+0xec8>
                break;
 8018b7a:	bf00      	nop
 8018b7c:	e008      	b.n	8018b90 <tcp_receive+0xec8>
                break;
 8018b7e:	bf00      	nop
 8018b80:	e006      	b.n	8018b90 <tcp_receive+0xec8>
                  break;
 8018b82:	bf00      	nop
 8018b84:	e004      	b.n	8018b90 <tcp_receive+0xec8>
                  break;
 8018b86:	bf00      	nop
 8018b88:	e002      	b.n	8018b90 <tcp_receive+0xec8>
                  break;
 8018b8a:	bf00      	nop
 8018b8c:	e000      	b.n	8018b90 <tcp_receive+0xec8>
                break;
 8018b8e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8018b90:	6878      	ldr	r0, [r7, #4]
 8018b92:	f001 fe8b 	bl	801a8ac <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8018b96:	e003      	b.n	8018ba0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8018b98:	6878      	ldr	r0, [r7, #4]
 8018b9a:	f001 fe87 	bl	801a8ac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018b9e:	e01a      	b.n	8018bd6 <tcp_receive+0xf0e>
 8018ba0:	e019      	b.n	8018bd6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8018ba2:	4b0f      	ldr	r3, [pc, #60]	; (8018be0 <tcp_receive+0xf18>)
 8018ba4:	681a      	ldr	r2, [r3, #0]
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018baa:	1ad3      	subs	r3, r2, r3
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	db0a      	blt.n	8018bc6 <tcp_receive+0xefe>
 8018bb0:	4b0b      	ldr	r3, [pc, #44]	; (8018be0 <tcp_receive+0xf18>)
 8018bb2:	681a      	ldr	r2, [r3, #0]
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bb8:	6879      	ldr	r1, [r7, #4]
 8018bba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018bbc:	440b      	add	r3, r1
 8018bbe:	1ad3      	subs	r3, r2, r3
 8018bc0:	3301      	adds	r3, #1
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	dd07      	ble.n	8018bd6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	8b5b      	ldrh	r3, [r3, #26]
 8018bca:	f043 0302 	orr.w	r3, r3, #2
 8018bce:	b29a      	uxth	r2, r3
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8018bd4:	e7ff      	b.n	8018bd6 <tcp_receive+0xf0e>
 8018bd6:	bf00      	nop
 8018bd8:	3750      	adds	r7, #80	; 0x50
 8018bda:	46bd      	mov	sp, r7
 8018bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8018bde:	bf00      	nop
 8018be0:	20012388 	.word	0x20012388
 8018be4:	20012368 	.word	0x20012368
 8018be8:	20012392 	.word	0x20012392
 8018bec:	08025654 	.word	0x08025654
 8018bf0:	080259fc 	.word	0x080259fc
 8018bf4:	080256a0 	.word	0x080256a0

08018bf8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8018bf8:	b480      	push	{r7}
 8018bfa:	b083      	sub	sp, #12
 8018bfc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8018bfe:	4b15      	ldr	r3, [pc, #84]	; (8018c54 <tcp_get_next_optbyte+0x5c>)
 8018c00:	881b      	ldrh	r3, [r3, #0]
 8018c02:	1c5a      	adds	r2, r3, #1
 8018c04:	b291      	uxth	r1, r2
 8018c06:	4a13      	ldr	r2, [pc, #76]	; (8018c54 <tcp_get_next_optbyte+0x5c>)
 8018c08:	8011      	strh	r1, [r2, #0]
 8018c0a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018c0c:	4b12      	ldr	r3, [pc, #72]	; (8018c58 <tcp_get_next_optbyte+0x60>)
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d004      	beq.n	8018c1e <tcp_get_next_optbyte+0x26>
 8018c14:	4b11      	ldr	r3, [pc, #68]	; (8018c5c <tcp_get_next_optbyte+0x64>)
 8018c16:	881b      	ldrh	r3, [r3, #0]
 8018c18:	88fa      	ldrh	r2, [r7, #6]
 8018c1a:	429a      	cmp	r2, r3
 8018c1c:	d208      	bcs.n	8018c30 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8018c1e:	4b10      	ldr	r3, [pc, #64]	; (8018c60 <tcp_get_next_optbyte+0x68>)
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	3314      	adds	r3, #20
 8018c24:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8018c26:	88fb      	ldrh	r3, [r7, #6]
 8018c28:	683a      	ldr	r2, [r7, #0]
 8018c2a:	4413      	add	r3, r2
 8018c2c:	781b      	ldrb	r3, [r3, #0]
 8018c2e:	e00b      	b.n	8018c48 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018c30:	88fb      	ldrh	r3, [r7, #6]
 8018c32:	b2da      	uxtb	r2, r3
 8018c34:	4b09      	ldr	r3, [pc, #36]	; (8018c5c <tcp_get_next_optbyte+0x64>)
 8018c36:	881b      	ldrh	r3, [r3, #0]
 8018c38:	b2db      	uxtb	r3, r3
 8018c3a:	1ad3      	subs	r3, r2, r3
 8018c3c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8018c3e:	4b06      	ldr	r3, [pc, #24]	; (8018c58 <tcp_get_next_optbyte+0x60>)
 8018c40:	681a      	ldr	r2, [r3, #0]
 8018c42:	797b      	ldrb	r3, [r7, #5]
 8018c44:	4413      	add	r3, r2
 8018c46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018c48:	4618      	mov	r0, r3
 8018c4a:	370c      	adds	r7, #12
 8018c4c:	46bd      	mov	sp, r7
 8018c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c52:	4770      	bx	lr
 8018c54:	20012384 	.word	0x20012384
 8018c58:	20012380 	.word	0x20012380
 8018c5c:	2001237e 	.word	0x2001237e
 8018c60:	20012378 	.word	0x20012378

08018c64 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8018c64:	b580      	push	{r7, lr}
 8018c66:	b084      	sub	sp, #16
 8018c68:	af00      	add	r7, sp, #0
 8018c6a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d106      	bne.n	8018c80 <tcp_parseopt+0x1c>
 8018c72:	4b32      	ldr	r3, [pc, #200]	; (8018d3c <tcp_parseopt+0xd8>)
 8018c74:	f240 727d 	movw	r2, #1917	; 0x77d
 8018c78:	4931      	ldr	r1, [pc, #196]	; (8018d40 <tcp_parseopt+0xdc>)
 8018c7a:	4832      	ldr	r0, [pc, #200]	; (8018d44 <tcp_parseopt+0xe0>)
 8018c7c:	f008 fd4c 	bl	8021718 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8018c80:	4b31      	ldr	r3, [pc, #196]	; (8018d48 <tcp_parseopt+0xe4>)
 8018c82:	881b      	ldrh	r3, [r3, #0]
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d055      	beq.n	8018d34 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018c88:	4b30      	ldr	r3, [pc, #192]	; (8018d4c <tcp_parseopt+0xe8>)
 8018c8a:	2200      	movs	r2, #0
 8018c8c:	801a      	strh	r2, [r3, #0]
 8018c8e:	e045      	b.n	8018d1c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8018c90:	f7ff ffb2 	bl	8018bf8 <tcp_get_next_optbyte>
 8018c94:	4603      	mov	r3, r0
 8018c96:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8018c98:	7bfb      	ldrb	r3, [r7, #15]
 8018c9a:	2b02      	cmp	r3, #2
 8018c9c:	d006      	beq.n	8018cac <tcp_parseopt+0x48>
 8018c9e:	2b02      	cmp	r3, #2
 8018ca0:	dc2b      	bgt.n	8018cfa <tcp_parseopt+0x96>
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d041      	beq.n	8018d2a <tcp_parseopt+0xc6>
 8018ca6:	2b01      	cmp	r3, #1
 8018ca8:	d127      	bne.n	8018cfa <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8018caa:	e037      	b.n	8018d1c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8018cac:	f7ff ffa4 	bl	8018bf8 <tcp_get_next_optbyte>
 8018cb0:	4603      	mov	r3, r0
 8018cb2:	2b04      	cmp	r3, #4
 8018cb4:	d13b      	bne.n	8018d2e <tcp_parseopt+0xca>
 8018cb6:	4b25      	ldr	r3, [pc, #148]	; (8018d4c <tcp_parseopt+0xe8>)
 8018cb8:	881b      	ldrh	r3, [r3, #0]
 8018cba:	3301      	adds	r3, #1
 8018cbc:	4a22      	ldr	r2, [pc, #136]	; (8018d48 <tcp_parseopt+0xe4>)
 8018cbe:	8812      	ldrh	r2, [r2, #0]
 8018cc0:	4293      	cmp	r3, r2
 8018cc2:	da34      	bge.n	8018d2e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8018cc4:	f7ff ff98 	bl	8018bf8 <tcp_get_next_optbyte>
 8018cc8:	4603      	mov	r3, r0
 8018cca:	b29b      	uxth	r3, r3
 8018ccc:	021b      	lsls	r3, r3, #8
 8018cce:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8018cd0:	f7ff ff92 	bl	8018bf8 <tcp_get_next_optbyte>
 8018cd4:	4603      	mov	r3, r0
 8018cd6:	b29a      	uxth	r2, r3
 8018cd8:	89bb      	ldrh	r3, [r7, #12]
 8018cda:	4313      	orrs	r3, r2
 8018cdc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8018cde:	89bb      	ldrh	r3, [r7, #12]
 8018ce0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8018ce4:	d804      	bhi.n	8018cf0 <tcp_parseopt+0x8c>
 8018ce6:	89bb      	ldrh	r3, [r7, #12]
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d001      	beq.n	8018cf0 <tcp_parseopt+0x8c>
 8018cec:	89ba      	ldrh	r2, [r7, #12]
 8018cee:	e001      	b.n	8018cf4 <tcp_parseopt+0x90>
 8018cf0:	f44f 7206 	mov.w	r2, #536	; 0x218
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8018cf8:	e010      	b.n	8018d1c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8018cfa:	f7ff ff7d 	bl	8018bf8 <tcp_get_next_optbyte>
 8018cfe:	4603      	mov	r3, r0
 8018d00:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8018d02:	7afb      	ldrb	r3, [r7, #11]
 8018d04:	2b01      	cmp	r3, #1
 8018d06:	d914      	bls.n	8018d32 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8018d08:	7afb      	ldrb	r3, [r7, #11]
 8018d0a:	b29a      	uxth	r2, r3
 8018d0c:	4b0f      	ldr	r3, [pc, #60]	; (8018d4c <tcp_parseopt+0xe8>)
 8018d0e:	881b      	ldrh	r3, [r3, #0]
 8018d10:	4413      	add	r3, r2
 8018d12:	b29b      	uxth	r3, r3
 8018d14:	3b02      	subs	r3, #2
 8018d16:	b29a      	uxth	r2, r3
 8018d18:	4b0c      	ldr	r3, [pc, #48]	; (8018d4c <tcp_parseopt+0xe8>)
 8018d1a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018d1c:	4b0b      	ldr	r3, [pc, #44]	; (8018d4c <tcp_parseopt+0xe8>)
 8018d1e:	881a      	ldrh	r2, [r3, #0]
 8018d20:	4b09      	ldr	r3, [pc, #36]	; (8018d48 <tcp_parseopt+0xe4>)
 8018d22:	881b      	ldrh	r3, [r3, #0]
 8018d24:	429a      	cmp	r2, r3
 8018d26:	d3b3      	bcc.n	8018c90 <tcp_parseopt+0x2c>
 8018d28:	e004      	b.n	8018d34 <tcp_parseopt+0xd0>
          return;
 8018d2a:	bf00      	nop
 8018d2c:	e002      	b.n	8018d34 <tcp_parseopt+0xd0>
            return;
 8018d2e:	bf00      	nop
 8018d30:	e000      	b.n	8018d34 <tcp_parseopt+0xd0>
            return;
 8018d32:	bf00      	nop
      }
    }
  }
}
 8018d34:	3710      	adds	r7, #16
 8018d36:	46bd      	mov	sp, r7
 8018d38:	bd80      	pop	{r7, pc}
 8018d3a:	bf00      	nop
 8018d3c:	08025654 	.word	0x08025654
 8018d40:	08025ab8 	.word	0x08025ab8
 8018d44:	080256a0 	.word	0x080256a0
 8018d48:	2001237c 	.word	0x2001237c
 8018d4c:	20012384 	.word	0x20012384

08018d50 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8018d50:	b480      	push	{r7}
 8018d52:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8018d54:	4b05      	ldr	r3, [pc, #20]	; (8018d6c <tcp_trigger_input_pcb_close+0x1c>)
 8018d56:	781b      	ldrb	r3, [r3, #0]
 8018d58:	f043 0310 	orr.w	r3, r3, #16
 8018d5c:	b2da      	uxtb	r2, r3
 8018d5e:	4b03      	ldr	r3, [pc, #12]	; (8018d6c <tcp_trigger_input_pcb_close+0x1c>)
 8018d60:	701a      	strb	r2, [r3, #0]
}
 8018d62:	bf00      	nop
 8018d64:	46bd      	mov	sp, r7
 8018d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d6a:	4770      	bx	lr
 8018d6c:	20012395 	.word	0x20012395

08018d70 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8018d70:	b580      	push	{r7, lr}
 8018d72:	b084      	sub	sp, #16
 8018d74:	af00      	add	r7, sp, #0
 8018d76:	60f8      	str	r0, [r7, #12]
 8018d78:	60b9      	str	r1, [r7, #8]
 8018d7a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8018d7c:	68fb      	ldr	r3, [r7, #12]
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d00a      	beq.n	8018d98 <tcp_route+0x28>
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	7a1b      	ldrb	r3, [r3, #8]
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d006      	beq.n	8018d98 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8018d8a:	68fb      	ldr	r3, [r7, #12]
 8018d8c:	7a1b      	ldrb	r3, [r3, #8]
 8018d8e:	4618      	mov	r0, r3
 8018d90:	f7fa fff0 	bl	8013d74 <netif_get_by_index>
 8018d94:	4603      	mov	r3, r0
 8018d96:	e003      	b.n	8018da0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8018d98:	6878      	ldr	r0, [r7, #4]
 8018d9a:	f005 fcc1 	bl	801e720 <ip4_route>
 8018d9e:	4603      	mov	r3, r0
  }
}
 8018da0:	4618      	mov	r0, r3
 8018da2:	3710      	adds	r7, #16
 8018da4:	46bd      	mov	sp, r7
 8018da6:	bd80      	pop	{r7, pc}

08018da8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8018da8:	b590      	push	{r4, r7, lr}
 8018daa:	b087      	sub	sp, #28
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	60f8      	str	r0, [r7, #12]
 8018db0:	60b9      	str	r1, [r7, #8]
 8018db2:	603b      	str	r3, [r7, #0]
 8018db4:	4613      	mov	r3, r2
 8018db6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	d105      	bne.n	8018dca <tcp_create_segment+0x22>
 8018dbe:	4b44      	ldr	r3, [pc, #272]	; (8018ed0 <tcp_create_segment+0x128>)
 8018dc0:	22a3      	movs	r2, #163	; 0xa3
 8018dc2:	4944      	ldr	r1, [pc, #272]	; (8018ed4 <tcp_create_segment+0x12c>)
 8018dc4:	4844      	ldr	r0, [pc, #272]	; (8018ed8 <tcp_create_segment+0x130>)
 8018dc6:	f008 fca7 	bl	8021718 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8018dca:	68bb      	ldr	r3, [r7, #8]
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d105      	bne.n	8018ddc <tcp_create_segment+0x34>
 8018dd0:	4b3f      	ldr	r3, [pc, #252]	; (8018ed0 <tcp_create_segment+0x128>)
 8018dd2:	22a4      	movs	r2, #164	; 0xa4
 8018dd4:	4941      	ldr	r1, [pc, #260]	; (8018edc <tcp_create_segment+0x134>)
 8018dd6:	4840      	ldr	r0, [pc, #256]	; (8018ed8 <tcp_create_segment+0x130>)
 8018dd8:	f008 fc9e 	bl	8021718 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018ddc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018de0:	009b      	lsls	r3, r3, #2
 8018de2:	b2db      	uxtb	r3, r3
 8018de4:	f003 0304 	and.w	r3, r3, #4
 8018de8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8018dea:	2003      	movs	r0, #3
 8018dec:	f7fa fc2a 	bl	8013644 <memp_malloc>
 8018df0:	6138      	str	r0, [r7, #16]
 8018df2:	693b      	ldr	r3, [r7, #16]
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	d104      	bne.n	8018e02 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8018df8:	68b8      	ldr	r0, [r7, #8]
 8018dfa:	f7fb fb49 	bl	8014490 <pbuf_free>
    return NULL;
 8018dfe:	2300      	movs	r3, #0
 8018e00:	e061      	b.n	8018ec6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8018e02:	693b      	ldr	r3, [r7, #16]
 8018e04:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018e08:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8018e0a:	693b      	ldr	r3, [r7, #16]
 8018e0c:	2200      	movs	r2, #0
 8018e0e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8018e10:	693b      	ldr	r3, [r7, #16]
 8018e12:	68ba      	ldr	r2, [r7, #8]
 8018e14:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8018e16:	68bb      	ldr	r3, [r7, #8]
 8018e18:	891a      	ldrh	r2, [r3, #8]
 8018e1a:	7dfb      	ldrb	r3, [r7, #23]
 8018e1c:	b29b      	uxth	r3, r3
 8018e1e:	429a      	cmp	r2, r3
 8018e20:	d205      	bcs.n	8018e2e <tcp_create_segment+0x86>
 8018e22:	4b2b      	ldr	r3, [pc, #172]	; (8018ed0 <tcp_create_segment+0x128>)
 8018e24:	22b0      	movs	r2, #176	; 0xb0
 8018e26:	492e      	ldr	r1, [pc, #184]	; (8018ee0 <tcp_create_segment+0x138>)
 8018e28:	482b      	ldr	r0, [pc, #172]	; (8018ed8 <tcp_create_segment+0x130>)
 8018e2a:	f008 fc75 	bl	8021718 <iprintf>
  seg->len = p->tot_len - optlen;
 8018e2e:	68bb      	ldr	r3, [r7, #8]
 8018e30:	891a      	ldrh	r2, [r3, #8]
 8018e32:	7dfb      	ldrb	r3, [r7, #23]
 8018e34:	b29b      	uxth	r3, r3
 8018e36:	1ad3      	subs	r3, r2, r3
 8018e38:	b29a      	uxth	r2, r3
 8018e3a:	693b      	ldr	r3, [r7, #16]
 8018e3c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018e3e:	2114      	movs	r1, #20
 8018e40:	68b8      	ldr	r0, [r7, #8]
 8018e42:	f7fb fa8f 	bl	8014364 <pbuf_add_header>
 8018e46:	4603      	mov	r3, r0
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d004      	beq.n	8018e56 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018e4c:	6938      	ldr	r0, [r7, #16]
 8018e4e:	f7fc ffe8 	bl	8015e22 <tcp_seg_free>
    return NULL;
 8018e52:	2300      	movs	r3, #0
 8018e54:	e037      	b.n	8018ec6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8018e56:	693b      	ldr	r3, [r7, #16]
 8018e58:	685b      	ldr	r3, [r3, #4]
 8018e5a:	685a      	ldr	r2, [r3, #4]
 8018e5c:	693b      	ldr	r3, [r7, #16]
 8018e5e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018e60:	68fb      	ldr	r3, [r7, #12]
 8018e62:	8ada      	ldrh	r2, [r3, #22]
 8018e64:	693b      	ldr	r3, [r7, #16]
 8018e66:	68dc      	ldr	r4, [r3, #12]
 8018e68:	4610      	mov	r0, r2
 8018e6a:	f7f9 ff13 	bl	8012c94 <lwip_htons>
 8018e6e:	4603      	mov	r3, r0
 8018e70:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8018e72:	68fb      	ldr	r3, [r7, #12]
 8018e74:	8b1a      	ldrh	r2, [r3, #24]
 8018e76:	693b      	ldr	r3, [r7, #16]
 8018e78:	68dc      	ldr	r4, [r3, #12]
 8018e7a:	4610      	mov	r0, r2
 8018e7c:	f7f9 ff0a 	bl	8012c94 <lwip_htons>
 8018e80:	4603      	mov	r3, r0
 8018e82:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8018e84:	693b      	ldr	r3, [r7, #16]
 8018e86:	68dc      	ldr	r4, [r3, #12]
 8018e88:	6838      	ldr	r0, [r7, #0]
 8018e8a:	f7f9 ff18 	bl	8012cbe <lwip_htonl>
 8018e8e:	4603      	mov	r3, r0
 8018e90:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8018e92:	7dfb      	ldrb	r3, [r7, #23]
 8018e94:	089b      	lsrs	r3, r3, #2
 8018e96:	b2db      	uxtb	r3, r3
 8018e98:	b29b      	uxth	r3, r3
 8018e9a:	3305      	adds	r3, #5
 8018e9c:	b29b      	uxth	r3, r3
 8018e9e:	031b      	lsls	r3, r3, #12
 8018ea0:	b29a      	uxth	r2, r3
 8018ea2:	79fb      	ldrb	r3, [r7, #7]
 8018ea4:	b29b      	uxth	r3, r3
 8018ea6:	4313      	orrs	r3, r2
 8018ea8:	b29a      	uxth	r2, r3
 8018eaa:	693b      	ldr	r3, [r7, #16]
 8018eac:	68dc      	ldr	r4, [r3, #12]
 8018eae:	4610      	mov	r0, r2
 8018eb0:	f7f9 fef0 	bl	8012c94 <lwip_htons>
 8018eb4:	4603      	mov	r3, r0
 8018eb6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8018eb8:	693b      	ldr	r3, [r7, #16]
 8018eba:	68db      	ldr	r3, [r3, #12]
 8018ebc:	2200      	movs	r2, #0
 8018ebe:	749a      	strb	r2, [r3, #18]
 8018ec0:	2200      	movs	r2, #0
 8018ec2:	74da      	strb	r2, [r3, #19]
  return seg;
 8018ec4:	693b      	ldr	r3, [r7, #16]
}
 8018ec6:	4618      	mov	r0, r3
 8018ec8:	371c      	adds	r7, #28
 8018eca:	46bd      	mov	sp, r7
 8018ecc:	bd90      	pop	{r4, r7, pc}
 8018ece:	bf00      	nop
 8018ed0:	08025ad4 	.word	0x08025ad4
 8018ed4:	08025b08 	.word	0x08025b08
 8018ed8:	08025b28 	.word	0x08025b28
 8018edc:	08025b50 	.word	0x08025b50
 8018ee0:	08025b74 	.word	0x08025b74

08018ee4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8018ee4:	b580      	push	{r7, lr}
 8018ee6:	b086      	sub	sp, #24
 8018ee8:	af00      	add	r7, sp, #0
 8018eea:	607b      	str	r3, [r7, #4]
 8018eec:	4603      	mov	r3, r0
 8018eee:	73fb      	strb	r3, [r7, #15]
 8018ef0:	460b      	mov	r3, r1
 8018ef2:	81bb      	strh	r3, [r7, #12]
 8018ef4:	4613      	mov	r3, r2
 8018ef6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8018ef8:	89bb      	ldrh	r3, [r7, #12]
 8018efa:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d105      	bne.n	8018f0e <tcp_pbuf_prealloc+0x2a>
 8018f02:	4b30      	ldr	r3, [pc, #192]	; (8018fc4 <tcp_pbuf_prealloc+0xe0>)
 8018f04:	22e8      	movs	r2, #232	; 0xe8
 8018f06:	4930      	ldr	r1, [pc, #192]	; (8018fc8 <tcp_pbuf_prealloc+0xe4>)
 8018f08:	4830      	ldr	r0, [pc, #192]	; (8018fcc <tcp_pbuf_prealloc+0xe8>)
 8018f0a:	f008 fc05 	bl	8021718 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8018f0e:	6a3b      	ldr	r3, [r7, #32]
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d105      	bne.n	8018f20 <tcp_pbuf_prealloc+0x3c>
 8018f14:	4b2b      	ldr	r3, [pc, #172]	; (8018fc4 <tcp_pbuf_prealloc+0xe0>)
 8018f16:	22e9      	movs	r2, #233	; 0xe9
 8018f18:	492d      	ldr	r1, [pc, #180]	; (8018fd0 <tcp_pbuf_prealloc+0xec>)
 8018f1a:	482c      	ldr	r0, [pc, #176]	; (8018fcc <tcp_pbuf_prealloc+0xe8>)
 8018f1c:	f008 fbfc 	bl	8021718 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8018f20:	89ba      	ldrh	r2, [r7, #12]
 8018f22:	897b      	ldrh	r3, [r7, #10]
 8018f24:	429a      	cmp	r2, r3
 8018f26:	d221      	bcs.n	8018f6c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018f28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018f2c:	f003 0302 	and.w	r3, r3, #2
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d111      	bne.n	8018f58 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8018f34:	6a3b      	ldr	r3, [r7, #32]
 8018f36:	8b5b      	ldrh	r3, [r3, #26]
 8018f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d115      	bne.n	8018f6c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8018f40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d007      	beq.n	8018f58 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8018f48:	6a3b      	ldr	r3, [r7, #32]
 8018f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d103      	bne.n	8018f58 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8018f50:	6a3b      	ldr	r3, [r7, #32]
 8018f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d009      	beq.n	8018f6c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8018f58:	89bb      	ldrh	r3, [r7, #12]
 8018f5a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8018f5e:	f023 0203 	bic.w	r2, r3, #3
 8018f62:	897b      	ldrh	r3, [r7, #10]
 8018f64:	4293      	cmp	r3, r2
 8018f66:	bf28      	it	cs
 8018f68:	4613      	movcs	r3, r2
 8018f6a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8018f6c:	8af9      	ldrh	r1, [r7, #22]
 8018f6e:	7bfb      	ldrb	r3, [r7, #15]
 8018f70:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018f74:	4618      	mov	r0, r3
 8018f76:	f7fa ffa7 	bl	8013ec8 <pbuf_alloc>
 8018f7a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018f7c:	693b      	ldr	r3, [r7, #16]
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d101      	bne.n	8018f86 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8018f82:	2300      	movs	r3, #0
 8018f84:	e019      	b.n	8018fba <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8018f86:	693b      	ldr	r3, [r7, #16]
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	d006      	beq.n	8018f9c <tcp_pbuf_prealloc+0xb8>
 8018f8e:	4b0d      	ldr	r3, [pc, #52]	; (8018fc4 <tcp_pbuf_prealloc+0xe0>)
 8018f90:	f240 120b 	movw	r2, #267	; 0x10b
 8018f94:	490f      	ldr	r1, [pc, #60]	; (8018fd4 <tcp_pbuf_prealloc+0xf0>)
 8018f96:	480d      	ldr	r0, [pc, #52]	; (8018fcc <tcp_pbuf_prealloc+0xe8>)
 8018f98:	f008 fbbe 	bl	8021718 <iprintf>
  *oversize = p->len - length;
 8018f9c:	693b      	ldr	r3, [r7, #16]
 8018f9e:	895a      	ldrh	r2, [r3, #10]
 8018fa0:	89bb      	ldrh	r3, [r7, #12]
 8018fa2:	1ad3      	subs	r3, r2, r3
 8018fa4:	b29a      	uxth	r2, r3
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8018faa:	693b      	ldr	r3, [r7, #16]
 8018fac:	89ba      	ldrh	r2, [r7, #12]
 8018fae:	811a      	strh	r2, [r3, #8]
 8018fb0:	693b      	ldr	r3, [r7, #16]
 8018fb2:	891a      	ldrh	r2, [r3, #8]
 8018fb4:	693b      	ldr	r3, [r7, #16]
 8018fb6:	815a      	strh	r2, [r3, #10]
  return p;
 8018fb8:	693b      	ldr	r3, [r7, #16]
}
 8018fba:	4618      	mov	r0, r3
 8018fbc:	3718      	adds	r7, #24
 8018fbe:	46bd      	mov	sp, r7
 8018fc0:	bd80      	pop	{r7, pc}
 8018fc2:	bf00      	nop
 8018fc4:	08025ad4 	.word	0x08025ad4
 8018fc8:	08025b8c 	.word	0x08025b8c
 8018fcc:	08025b28 	.word	0x08025b28
 8018fd0:	08025bb0 	.word	0x08025bb0
 8018fd4:	08025bd0 	.word	0x08025bd0

08018fd8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8018fd8:	b580      	push	{r7, lr}
 8018fda:	b082      	sub	sp, #8
 8018fdc:	af00      	add	r7, sp, #0
 8018fde:	6078      	str	r0, [r7, #4]
 8018fe0:	460b      	mov	r3, r1
 8018fe2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d106      	bne.n	8018ff8 <tcp_write_checks+0x20>
 8018fea:	4b33      	ldr	r3, [pc, #204]	; (80190b8 <tcp_write_checks+0xe0>)
 8018fec:	f240 1233 	movw	r2, #307	; 0x133
 8018ff0:	4932      	ldr	r1, [pc, #200]	; (80190bc <tcp_write_checks+0xe4>)
 8018ff2:	4833      	ldr	r0, [pc, #204]	; (80190c0 <tcp_write_checks+0xe8>)
 8018ff4:	f008 fb90 	bl	8021718 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	7d1b      	ldrb	r3, [r3, #20]
 8018ffc:	2b04      	cmp	r3, #4
 8018ffe:	d00e      	beq.n	801901e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8019004:	2b07      	cmp	r3, #7
 8019006:	d00a      	beq.n	801901e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801900c:	2b02      	cmp	r3, #2
 801900e:	d006      	beq.n	801901e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8019014:	2b03      	cmp	r3, #3
 8019016:	d002      	beq.n	801901e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8019018:	f06f 030a 	mvn.w	r3, #10
 801901c:	e048      	b.n	80190b0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801901e:	887b      	ldrh	r3, [r7, #2]
 8019020:	2b00      	cmp	r3, #0
 8019022:	d101      	bne.n	8019028 <tcp_write_checks+0x50>
    return ERR_OK;
 8019024:	2300      	movs	r3, #0
 8019026:	e043      	b.n	80190b0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801902e:	887a      	ldrh	r2, [r7, #2]
 8019030:	429a      	cmp	r2, r3
 8019032:	d909      	bls.n	8019048 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	8b5b      	ldrh	r3, [r3, #26]
 8019038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801903c:	b29a      	uxth	r2, r3
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019046:	e033      	b.n	80190b0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801904e:	2b08      	cmp	r3, #8
 8019050:	d909      	bls.n	8019066 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	8b5b      	ldrh	r3, [r3, #26]
 8019056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801905a:	b29a      	uxth	r2, r3
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019064:	e024      	b.n	80190b0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801906c:	2b00      	cmp	r3, #0
 801906e:	d00f      	beq.n	8019090 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019074:	2b00      	cmp	r3, #0
 8019076:	d11a      	bne.n	80190ae <tcp_write_checks+0xd6>
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801907c:	2b00      	cmp	r3, #0
 801907e:	d116      	bne.n	80190ae <tcp_write_checks+0xd6>
 8019080:	4b0d      	ldr	r3, [pc, #52]	; (80190b8 <tcp_write_checks+0xe0>)
 8019082:	f240 1255 	movw	r2, #341	; 0x155
 8019086:	490f      	ldr	r1, [pc, #60]	; (80190c4 <tcp_write_checks+0xec>)
 8019088:	480d      	ldr	r0, [pc, #52]	; (80190c0 <tcp_write_checks+0xe8>)
 801908a:	f008 fb45 	bl	8021718 <iprintf>
 801908e:	e00e      	b.n	80190ae <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019094:	2b00      	cmp	r3, #0
 8019096:	d103      	bne.n	80190a0 <tcp_write_checks+0xc8>
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801909c:	2b00      	cmp	r3, #0
 801909e:	d006      	beq.n	80190ae <tcp_write_checks+0xd6>
 80190a0:	4b05      	ldr	r3, [pc, #20]	; (80190b8 <tcp_write_checks+0xe0>)
 80190a2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80190a6:	4908      	ldr	r1, [pc, #32]	; (80190c8 <tcp_write_checks+0xf0>)
 80190a8:	4805      	ldr	r0, [pc, #20]	; (80190c0 <tcp_write_checks+0xe8>)
 80190aa:	f008 fb35 	bl	8021718 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80190ae:	2300      	movs	r3, #0
}
 80190b0:	4618      	mov	r0, r3
 80190b2:	3708      	adds	r7, #8
 80190b4:	46bd      	mov	sp, r7
 80190b6:	bd80      	pop	{r7, pc}
 80190b8:	08025ad4 	.word	0x08025ad4
 80190bc:	08025be4 	.word	0x08025be4
 80190c0:	08025b28 	.word	0x08025b28
 80190c4:	08025c04 	.word	0x08025c04
 80190c8:	08025c40 	.word	0x08025c40

080190cc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80190cc:	b590      	push	{r4, r7, lr}
 80190ce:	b09b      	sub	sp, #108	; 0x6c
 80190d0:	af04      	add	r7, sp, #16
 80190d2:	60f8      	str	r0, [r7, #12]
 80190d4:	60b9      	str	r1, [r7, #8]
 80190d6:	4611      	mov	r1, r2
 80190d8:	461a      	mov	r2, r3
 80190da:	460b      	mov	r3, r1
 80190dc:	80fb      	strh	r3, [r7, #6]
 80190de:	4613      	mov	r3, r2
 80190e0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80190e2:	2300      	movs	r3, #0
 80190e4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80190e6:	2300      	movs	r3, #0
 80190e8:	653b      	str	r3, [r7, #80]	; 0x50
 80190ea:	2300      	movs	r3, #0
 80190ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80190ee:	2300      	movs	r3, #0
 80190f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80190f2:	2300      	movs	r3, #0
 80190f4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80190f6:	2300      	movs	r3, #0
 80190f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80190fc:	2300      	movs	r3, #0
 80190fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8019102:	2300      	movs	r3, #0
 8019104:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8019106:	2300      	movs	r3, #0
 8019108:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801910a:	2300      	movs	r3, #0
 801910c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801910e:	68fb      	ldr	r3, [r7, #12]
 8019110:	2b00      	cmp	r3, #0
 8019112:	d109      	bne.n	8019128 <tcp_write+0x5c>
 8019114:	4ba4      	ldr	r3, [pc, #656]	; (80193a8 <tcp_write+0x2dc>)
 8019116:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801911a:	49a4      	ldr	r1, [pc, #656]	; (80193ac <tcp_write+0x2e0>)
 801911c:	48a4      	ldr	r0, [pc, #656]	; (80193b0 <tcp_write+0x2e4>)
 801911e:	f008 fafb 	bl	8021718 <iprintf>
 8019122:	f06f 030f 	mvn.w	r3, #15
 8019126:	e32a      	b.n	801977e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8019128:	68fb      	ldr	r3, [r7, #12]
 801912a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801912e:	085b      	lsrs	r3, r3, #1
 8019130:	b29a      	uxth	r2, r3
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019136:	4293      	cmp	r3, r2
 8019138:	bf28      	it	cs
 801913a:	4613      	movcs	r3, r2
 801913c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801913e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019140:	2b00      	cmp	r3, #0
 8019142:	d102      	bne.n	801914a <tcp_write+0x7e>
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019148:	e000      	b.n	801914c <tcp_write+0x80>
 801914a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801914c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801914e:	68bb      	ldr	r3, [r7, #8]
 8019150:	2b00      	cmp	r3, #0
 8019152:	d109      	bne.n	8019168 <tcp_write+0x9c>
 8019154:	4b94      	ldr	r3, [pc, #592]	; (80193a8 <tcp_write+0x2dc>)
 8019156:	f240 12ad 	movw	r2, #429	; 0x1ad
 801915a:	4996      	ldr	r1, [pc, #600]	; (80193b4 <tcp_write+0x2e8>)
 801915c:	4894      	ldr	r0, [pc, #592]	; (80193b0 <tcp_write+0x2e4>)
 801915e:	f008 fadb 	bl	8021718 <iprintf>
 8019162:	f06f 030f 	mvn.w	r3, #15
 8019166:	e30a      	b.n	801977e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8019168:	88fb      	ldrh	r3, [r7, #6]
 801916a:	4619      	mov	r1, r3
 801916c:	68f8      	ldr	r0, [r7, #12]
 801916e:	f7ff ff33 	bl	8018fd8 <tcp_write_checks>
 8019172:	4603      	mov	r3, r0
 8019174:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8019178:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801917c:	2b00      	cmp	r3, #0
 801917e:	d002      	beq.n	8019186 <tcp_write+0xba>
    return err;
 8019180:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8019184:	e2fb      	b.n	801977e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8019186:	68fb      	ldr	r3, [r7, #12]
 8019188:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801918c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019190:	2300      	movs	r3, #0
 8019192:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801919a:	2b00      	cmp	r3, #0
 801919c:	f000 80f6 	beq.w	801938c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80191a0:	68fb      	ldr	r3, [r7, #12]
 80191a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80191a4:	653b      	str	r3, [r7, #80]	; 0x50
 80191a6:	e002      	b.n	80191ae <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80191a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80191aa:	681b      	ldr	r3, [r3, #0]
 80191ac:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80191ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d1f8      	bne.n	80191a8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80191b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80191b8:	7a9b      	ldrb	r3, [r3, #10]
 80191ba:	009b      	lsls	r3, r3, #2
 80191bc:	b29b      	uxth	r3, r3
 80191be:	f003 0304 	and.w	r3, r3, #4
 80191c2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80191c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80191c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80191c8:	891b      	ldrh	r3, [r3, #8]
 80191ca:	4619      	mov	r1, r3
 80191cc:	8c3b      	ldrh	r3, [r7, #32]
 80191ce:	440b      	add	r3, r1
 80191d0:	429a      	cmp	r2, r3
 80191d2:	da06      	bge.n	80191e2 <tcp_write+0x116>
 80191d4:	4b74      	ldr	r3, [pc, #464]	; (80193a8 <tcp_write+0x2dc>)
 80191d6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80191da:	4977      	ldr	r1, [pc, #476]	; (80193b8 <tcp_write+0x2ec>)
 80191dc:	4874      	ldr	r0, [pc, #464]	; (80193b0 <tcp_write+0x2e4>)
 80191de:	f008 fa9b 	bl	8021718 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80191e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80191e4:	891a      	ldrh	r2, [r3, #8]
 80191e6:	8c3b      	ldrh	r3, [r7, #32]
 80191e8:	4413      	add	r3, r2
 80191ea:	b29b      	uxth	r3, r3
 80191ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80191ee:	1ad3      	subs	r3, r2, r3
 80191f0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80191f8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80191fa:	8a7b      	ldrh	r3, [r7, #18]
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	d026      	beq.n	801924e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8019200:	8a7b      	ldrh	r3, [r7, #18]
 8019202:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019204:	429a      	cmp	r2, r3
 8019206:	d206      	bcs.n	8019216 <tcp_write+0x14a>
 8019208:	4b67      	ldr	r3, [pc, #412]	; (80193a8 <tcp_write+0x2dc>)
 801920a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801920e:	496b      	ldr	r1, [pc, #428]	; (80193bc <tcp_write+0x2f0>)
 8019210:	4867      	ldr	r0, [pc, #412]	; (80193b0 <tcp_write+0x2e4>)
 8019212:	f008 fa81 	bl	8021718 <iprintf>
      seg = last_unsent;
 8019216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019218:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801921a:	8a7b      	ldrh	r3, [r7, #18]
 801921c:	88fa      	ldrh	r2, [r7, #6]
 801921e:	4293      	cmp	r3, r2
 8019220:	bf28      	it	cs
 8019222:	4613      	movcs	r3, r2
 8019224:	b29b      	uxth	r3, r3
 8019226:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019228:	4293      	cmp	r3, r2
 801922a:	bf28      	it	cs
 801922c:	4613      	movcs	r3, r2
 801922e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8019230:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019234:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019236:	4413      	add	r3, r2
 8019238:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801923c:	8a7a      	ldrh	r2, [r7, #18]
 801923e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019240:	1ad3      	subs	r3, r2, r3
 8019242:	b29b      	uxth	r3, r3
 8019244:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8019246:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019248:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801924a:	1ad3      	subs	r3, r2, r3
 801924c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801924e:	8a7b      	ldrh	r3, [r7, #18]
 8019250:	2b00      	cmp	r3, #0
 8019252:	d00b      	beq.n	801926c <tcp_write+0x1a0>
 8019254:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019258:	88fb      	ldrh	r3, [r7, #6]
 801925a:	429a      	cmp	r2, r3
 801925c:	d006      	beq.n	801926c <tcp_write+0x1a0>
 801925e:	4b52      	ldr	r3, [pc, #328]	; (80193a8 <tcp_write+0x2dc>)
 8019260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019264:	4956      	ldr	r1, [pc, #344]	; (80193c0 <tcp_write+0x2f4>)
 8019266:	4852      	ldr	r0, [pc, #328]	; (80193b0 <tcp_write+0x2e4>)
 8019268:	f008 fa56 	bl	8021718 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801926c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019270:	88fb      	ldrh	r3, [r7, #6]
 8019272:	429a      	cmp	r2, r3
 8019274:	f080 8167 	bcs.w	8019546 <tcp_write+0x47a>
 8019278:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801927a:	2b00      	cmp	r3, #0
 801927c:	f000 8163 	beq.w	8019546 <tcp_write+0x47a>
 8019280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019282:	891b      	ldrh	r3, [r3, #8]
 8019284:	2b00      	cmp	r3, #0
 8019286:	f000 815e 	beq.w	8019546 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801928a:	88fa      	ldrh	r2, [r7, #6]
 801928c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019290:	1ad2      	subs	r2, r2, r3
 8019292:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019294:	4293      	cmp	r3, r2
 8019296:	bfa8      	it	ge
 8019298:	4613      	movge	r3, r2
 801929a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801929c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801929e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80192a0:	797b      	ldrb	r3, [r7, #5]
 80192a2:	f003 0301 	and.w	r3, r3, #1
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d027      	beq.n	80192fa <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80192aa:	f107 0012 	add.w	r0, r7, #18
 80192ae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80192b0:	8bf9      	ldrh	r1, [r7, #30]
 80192b2:	2301      	movs	r3, #1
 80192b4:	9302      	str	r3, [sp, #8]
 80192b6:	797b      	ldrb	r3, [r7, #5]
 80192b8:	9301      	str	r3, [sp, #4]
 80192ba:	68fb      	ldr	r3, [r7, #12]
 80192bc:	9300      	str	r3, [sp, #0]
 80192be:	4603      	mov	r3, r0
 80192c0:	2000      	movs	r0, #0
 80192c2:	f7ff fe0f 	bl	8018ee4 <tcp_pbuf_prealloc>
 80192c6:	6578      	str	r0, [r7, #84]	; 0x54
 80192c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	f000 8225 	beq.w	801971a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80192d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80192d2:	6858      	ldr	r0, [r3, #4]
 80192d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80192d8:	68ba      	ldr	r2, [r7, #8]
 80192da:	4413      	add	r3, r2
 80192dc:	8bfa      	ldrh	r2, [r7, #30]
 80192de:	4619      	mov	r1, r3
 80192e0:	f008 fd41 	bl	8021d66 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80192e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80192e6:	f7fb f961 	bl	80145ac <pbuf_clen>
 80192ea:	4603      	mov	r3, r0
 80192ec:	461a      	mov	r2, r3
 80192ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80192f2:	4413      	add	r3, r2
 80192f4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80192f8:	e041      	b.n	801937e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80192fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192fc:	685b      	ldr	r3, [r3, #4]
 80192fe:	637b      	str	r3, [r7, #52]	; 0x34
 8019300:	e002      	b.n	8019308 <tcp_write+0x23c>
 8019302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	637b      	str	r3, [r7, #52]	; 0x34
 8019308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	2b00      	cmp	r3, #0
 801930e:	d1f8      	bne.n	8019302 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019312:	7b1b      	ldrb	r3, [r3, #12]
 8019314:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8019318:	2b00      	cmp	r3, #0
 801931a:	d115      	bne.n	8019348 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801931c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801931e:	685b      	ldr	r3, [r3, #4]
 8019320:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019322:	8952      	ldrh	r2, [r2, #10]
 8019324:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019326:	68ba      	ldr	r2, [r7, #8]
 8019328:	429a      	cmp	r2, r3
 801932a:	d10d      	bne.n	8019348 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801932c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019330:	2b00      	cmp	r3, #0
 8019332:	d006      	beq.n	8019342 <tcp_write+0x276>
 8019334:	4b1c      	ldr	r3, [pc, #112]	; (80193a8 <tcp_write+0x2dc>)
 8019336:	f240 2231 	movw	r2, #561	; 0x231
 801933a:	4922      	ldr	r1, [pc, #136]	; (80193c4 <tcp_write+0x2f8>)
 801933c:	481c      	ldr	r0, [pc, #112]	; (80193b0 <tcp_write+0x2e4>)
 801933e:	f008 f9eb 	bl	8021718 <iprintf>
          extendlen = seglen;
 8019342:	8bfb      	ldrh	r3, [r7, #30]
 8019344:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8019346:	e01a      	b.n	801937e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8019348:	8bfb      	ldrh	r3, [r7, #30]
 801934a:	2201      	movs	r2, #1
 801934c:	4619      	mov	r1, r3
 801934e:	2000      	movs	r0, #0
 8019350:	f7fa fdba 	bl	8013ec8 <pbuf_alloc>
 8019354:	6578      	str	r0, [r7, #84]	; 0x54
 8019356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019358:	2b00      	cmp	r3, #0
 801935a:	f000 81e0 	beq.w	801971e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801935e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019362:	68ba      	ldr	r2, [r7, #8]
 8019364:	441a      	add	r2, r3
 8019366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019368:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801936a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801936c:	f7fb f91e 	bl	80145ac <pbuf_clen>
 8019370:	4603      	mov	r3, r0
 8019372:	461a      	mov	r2, r3
 8019374:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019378:	4413      	add	r3, r2
 801937a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801937e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019382:	8bfb      	ldrh	r3, [r7, #30]
 8019384:	4413      	add	r3, r2
 8019386:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801938a:	e0dc      	b.n	8019546 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801938c:	68fb      	ldr	r3, [r7, #12]
 801938e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019392:	2b00      	cmp	r3, #0
 8019394:	f000 80d7 	beq.w	8019546 <tcp_write+0x47a>
 8019398:	4b03      	ldr	r3, [pc, #12]	; (80193a8 <tcp_write+0x2dc>)
 801939a:	f240 224a 	movw	r2, #586	; 0x24a
 801939e:	490a      	ldr	r1, [pc, #40]	; (80193c8 <tcp_write+0x2fc>)
 80193a0:	4803      	ldr	r0, [pc, #12]	; (80193b0 <tcp_write+0x2e4>)
 80193a2:	f008 f9b9 	bl	8021718 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80193a6:	e0ce      	b.n	8019546 <tcp_write+0x47a>
 80193a8:	08025ad4 	.word	0x08025ad4
 80193ac:	08025c74 	.word	0x08025c74
 80193b0:	08025b28 	.word	0x08025b28
 80193b4:	08025c8c 	.word	0x08025c8c
 80193b8:	08025cc0 	.word	0x08025cc0
 80193bc:	08025cd8 	.word	0x08025cd8
 80193c0:	08025cf8 	.word	0x08025cf8
 80193c4:	08025d18 	.word	0x08025d18
 80193c8:	08025d44 	.word	0x08025d44
    struct pbuf *p;
    u16_t left = len - pos;
 80193cc:	88fa      	ldrh	r2, [r7, #6]
 80193ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80193d2:	1ad3      	subs	r3, r2, r3
 80193d4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80193d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80193da:	b29b      	uxth	r3, r3
 80193dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80193de:	1ad3      	subs	r3, r2, r3
 80193e0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80193e2:	8b7a      	ldrh	r2, [r7, #26]
 80193e4:	8bbb      	ldrh	r3, [r7, #28]
 80193e6:	4293      	cmp	r3, r2
 80193e8:	bf28      	it	cs
 80193ea:	4613      	movcs	r3, r2
 80193ec:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80193ee:	797b      	ldrb	r3, [r7, #5]
 80193f0:	f003 0301 	and.w	r3, r3, #1
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	d036      	beq.n	8019466 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80193f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80193fc:	b29a      	uxth	r2, r3
 80193fe:	8b3b      	ldrh	r3, [r7, #24]
 8019400:	4413      	add	r3, r2
 8019402:	b299      	uxth	r1, r3
 8019404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019406:	2b00      	cmp	r3, #0
 8019408:	bf0c      	ite	eq
 801940a:	2301      	moveq	r3, #1
 801940c:	2300      	movne	r3, #0
 801940e:	b2db      	uxtb	r3, r3
 8019410:	f107 0012 	add.w	r0, r7, #18
 8019414:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019416:	9302      	str	r3, [sp, #8]
 8019418:	797b      	ldrb	r3, [r7, #5]
 801941a:	9301      	str	r3, [sp, #4]
 801941c:	68fb      	ldr	r3, [r7, #12]
 801941e:	9300      	str	r3, [sp, #0]
 8019420:	4603      	mov	r3, r0
 8019422:	2036      	movs	r0, #54	; 0x36
 8019424:	f7ff fd5e 	bl	8018ee4 <tcp_pbuf_prealloc>
 8019428:	6338      	str	r0, [r7, #48]	; 0x30
 801942a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801942c:	2b00      	cmp	r3, #0
 801942e:	f000 8178 	beq.w	8019722 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8019432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019434:	895b      	ldrh	r3, [r3, #10]
 8019436:	8b3a      	ldrh	r2, [r7, #24]
 8019438:	429a      	cmp	r2, r3
 801943a:	d906      	bls.n	801944a <tcp_write+0x37e>
 801943c:	4b8c      	ldr	r3, [pc, #560]	; (8019670 <tcp_write+0x5a4>)
 801943e:	f240 2266 	movw	r2, #614	; 0x266
 8019442:	498c      	ldr	r1, [pc, #560]	; (8019674 <tcp_write+0x5a8>)
 8019444:	488c      	ldr	r0, [pc, #560]	; (8019678 <tcp_write+0x5ac>)
 8019446:	f008 f967 	bl	8021718 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801944a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801944c:	685a      	ldr	r2, [r3, #4]
 801944e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019452:	18d0      	adds	r0, r2, r3
 8019454:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019458:	68ba      	ldr	r2, [r7, #8]
 801945a:	4413      	add	r3, r2
 801945c:	8b3a      	ldrh	r2, [r7, #24]
 801945e:	4619      	mov	r1, r3
 8019460:	f008 fc81 	bl	8021d66 <memcpy>
 8019464:	e02f      	b.n	80194c6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8019466:	8a7b      	ldrh	r3, [r7, #18]
 8019468:	2b00      	cmp	r3, #0
 801946a:	d006      	beq.n	801947a <tcp_write+0x3ae>
 801946c:	4b80      	ldr	r3, [pc, #512]	; (8019670 <tcp_write+0x5a4>)
 801946e:	f240 2271 	movw	r2, #625	; 0x271
 8019472:	4982      	ldr	r1, [pc, #520]	; (801967c <tcp_write+0x5b0>)
 8019474:	4880      	ldr	r0, [pc, #512]	; (8019678 <tcp_write+0x5ac>)
 8019476:	f008 f94f 	bl	8021718 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801947a:	8b3b      	ldrh	r3, [r7, #24]
 801947c:	2201      	movs	r2, #1
 801947e:	4619      	mov	r1, r3
 8019480:	2036      	movs	r0, #54	; 0x36
 8019482:	f7fa fd21 	bl	8013ec8 <pbuf_alloc>
 8019486:	6178      	str	r0, [r7, #20]
 8019488:	697b      	ldr	r3, [r7, #20]
 801948a:	2b00      	cmp	r3, #0
 801948c:	f000 814b 	beq.w	8019726 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8019490:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019494:	68ba      	ldr	r2, [r7, #8]
 8019496:	441a      	add	r2, r3
 8019498:	697b      	ldr	r3, [r7, #20]
 801949a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801949c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80194a0:	b29b      	uxth	r3, r3
 80194a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80194a6:	4619      	mov	r1, r3
 80194a8:	2036      	movs	r0, #54	; 0x36
 80194aa:	f7fa fd0d 	bl	8013ec8 <pbuf_alloc>
 80194ae:	6338      	str	r0, [r7, #48]	; 0x30
 80194b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d103      	bne.n	80194be <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80194b6:	6978      	ldr	r0, [r7, #20]
 80194b8:	f7fa ffea 	bl	8014490 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80194bc:	e136      	b.n	801972c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80194be:	6979      	ldr	r1, [r7, #20]
 80194c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80194c2:	f7fb f8b3 	bl	801462c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80194c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80194c8:	f7fb f870 	bl	80145ac <pbuf_clen>
 80194cc:	4603      	mov	r3, r0
 80194ce:	461a      	mov	r2, r3
 80194d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80194d4:	4413      	add	r3, r2
 80194d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80194da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80194de:	2b09      	cmp	r3, #9
 80194e0:	d903      	bls.n	80194ea <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80194e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80194e4:	f7fa ffd4 	bl	8014490 <pbuf_free>
      goto memerr;
 80194e8:	e120      	b.n	801972c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80194ea:	68fb      	ldr	r3, [r7, #12]
 80194ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80194ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80194f2:	441a      	add	r2, r3
 80194f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80194f8:	9300      	str	r3, [sp, #0]
 80194fa:	4613      	mov	r3, r2
 80194fc:	2200      	movs	r2, #0
 80194fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019500:	68f8      	ldr	r0, [r7, #12]
 8019502:	f7ff fc51 	bl	8018da8 <tcp_create_segment>
 8019506:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801950a:	2b00      	cmp	r3, #0
 801950c:	f000 810d 	beq.w	801972a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8019510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019512:	2b00      	cmp	r3, #0
 8019514:	d102      	bne.n	801951c <tcp_write+0x450>
      queue = seg;
 8019516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019518:	647b      	str	r3, [r7, #68]	; 0x44
 801951a:	e00c      	b.n	8019536 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801951c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801951e:	2b00      	cmp	r3, #0
 8019520:	d106      	bne.n	8019530 <tcp_write+0x464>
 8019522:	4b53      	ldr	r3, [pc, #332]	; (8019670 <tcp_write+0x5a4>)
 8019524:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019528:	4955      	ldr	r1, [pc, #340]	; (8019680 <tcp_write+0x5b4>)
 801952a:	4853      	ldr	r0, [pc, #332]	; (8019678 <tcp_write+0x5ac>)
 801952c:	f008 f8f4 	bl	8021718 <iprintf>
      prev_seg->next = seg;
 8019530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019532:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019534:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8019536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019538:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801953a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801953e:	8b3b      	ldrh	r3, [r7, #24]
 8019540:	4413      	add	r3, r2
 8019542:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8019546:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801954a:	88fb      	ldrh	r3, [r7, #6]
 801954c:	429a      	cmp	r2, r3
 801954e:	f4ff af3d 	bcc.w	80193cc <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8019552:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019554:	2b00      	cmp	r3, #0
 8019556:	d02c      	beq.n	80195b2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8019558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801955a:	685b      	ldr	r3, [r3, #4]
 801955c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801955e:	e01e      	b.n	801959e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8019560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019562:	891a      	ldrh	r2, [r3, #8]
 8019564:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019566:	4413      	add	r3, r2
 8019568:	b29a      	uxth	r2, r3
 801956a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801956c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801956e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	2b00      	cmp	r3, #0
 8019574:	d110      	bne.n	8019598 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8019576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019578:	685b      	ldr	r3, [r3, #4]
 801957a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801957c:	8952      	ldrh	r2, [r2, #10]
 801957e:	4413      	add	r3, r2
 8019580:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019582:	68b9      	ldr	r1, [r7, #8]
 8019584:	4618      	mov	r0, r3
 8019586:	f008 fbee 	bl	8021d66 <memcpy>
        p->len += oversize_used;
 801958a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801958c:	895a      	ldrh	r2, [r3, #10]
 801958e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019590:	4413      	add	r3, r2
 8019592:	b29a      	uxth	r2, r3
 8019594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019596:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8019598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801959e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d1dd      	bne.n	8019560 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80195a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195a6:	891a      	ldrh	r2, [r3, #8]
 80195a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80195aa:	4413      	add	r3, r2
 80195ac:	b29a      	uxth	r2, r3
 80195ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195b0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80195b2:	8a7a      	ldrh	r2, [r7, #18]
 80195b4:	68fb      	ldr	r3, [r7, #12]
 80195b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80195ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d018      	beq.n	80195f2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80195c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d106      	bne.n	80195d4 <tcp_write+0x508>
 80195c6:	4b2a      	ldr	r3, [pc, #168]	; (8019670 <tcp_write+0x5a4>)
 80195c8:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80195cc:	492d      	ldr	r1, [pc, #180]	; (8019684 <tcp_write+0x5b8>)
 80195ce:	482a      	ldr	r0, [pc, #168]	; (8019678 <tcp_write+0x5ac>)
 80195d0:	f008 f8a2 	bl	8021718 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80195d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195d6:	685b      	ldr	r3, [r3, #4]
 80195d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80195da:	4618      	mov	r0, r3
 80195dc:	f7fb f826 	bl	801462c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80195e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195e2:	891a      	ldrh	r2, [r3, #8]
 80195e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80195e6:	891b      	ldrh	r3, [r3, #8]
 80195e8:	4413      	add	r3, r2
 80195ea:	b29a      	uxth	r2, r3
 80195ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195ee:	811a      	strh	r2, [r3, #8]
 80195f0:	e037      	b.n	8019662 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80195f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d034      	beq.n	8019662 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80195f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d003      	beq.n	8019606 <tcp_write+0x53a>
 80195fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019600:	685b      	ldr	r3, [r3, #4]
 8019602:	2b00      	cmp	r3, #0
 8019604:	d106      	bne.n	8019614 <tcp_write+0x548>
 8019606:	4b1a      	ldr	r3, [pc, #104]	; (8019670 <tcp_write+0x5a4>)
 8019608:	f240 22e6 	movw	r2, #742	; 0x2e6
 801960c:	491e      	ldr	r1, [pc, #120]	; (8019688 <tcp_write+0x5bc>)
 801960e:	481a      	ldr	r0, [pc, #104]	; (8019678 <tcp_write+0x5ac>)
 8019610:	f008 f882 	bl	8021718 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019616:	685b      	ldr	r3, [r3, #4]
 8019618:	62bb      	str	r3, [r7, #40]	; 0x28
 801961a:	e009      	b.n	8019630 <tcp_write+0x564>
      p->tot_len += extendlen;
 801961c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801961e:	891a      	ldrh	r2, [r3, #8]
 8019620:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019622:	4413      	add	r3, r2
 8019624:	b29a      	uxth	r2, r3
 8019626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019628:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801962a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801962c:	681b      	ldr	r3, [r3, #0]
 801962e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	2b00      	cmp	r3, #0
 8019636:	d1f1      	bne.n	801961c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8019638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801963a:	891a      	ldrh	r2, [r3, #8]
 801963c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801963e:	4413      	add	r3, r2
 8019640:	b29a      	uxth	r2, r3
 8019642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019644:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8019646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019648:	895a      	ldrh	r2, [r3, #10]
 801964a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801964c:	4413      	add	r3, r2
 801964e:	b29a      	uxth	r2, r3
 8019650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019652:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8019654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019656:	891a      	ldrh	r2, [r3, #8]
 8019658:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801965a:	4413      	add	r3, r2
 801965c:	b29a      	uxth	r2, r3
 801965e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019660:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8019662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019664:	2b00      	cmp	r3, #0
 8019666:	d111      	bne.n	801968c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8019668:	68fb      	ldr	r3, [r7, #12]
 801966a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801966c:	66da      	str	r2, [r3, #108]	; 0x6c
 801966e:	e010      	b.n	8019692 <tcp_write+0x5c6>
 8019670:	08025ad4 	.word	0x08025ad4
 8019674:	08025d74 	.word	0x08025d74
 8019678:	08025b28 	.word	0x08025b28
 801967c:	08025db4 	.word	0x08025db4
 8019680:	08025dc4 	.word	0x08025dc4
 8019684:	08025dd8 	.word	0x08025dd8
 8019688:	08025e10 	.word	0x08025e10
  } else {
    last_unsent->next = queue;
 801968c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801968e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019690:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019696:	88fb      	ldrh	r3, [r7, #6]
 8019698:	441a      	add	r2, r3
 801969a:	68fb      	ldr	r3, [r7, #12]
 801969c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801969e:	68fb      	ldr	r3, [r7, #12]
 80196a0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80196a4:	88fb      	ldrh	r3, [r7, #6]
 80196a6:	1ad3      	subs	r3, r2, r3
 80196a8:	b29a      	uxth	r2, r3
 80196aa:	68fb      	ldr	r3, [r7, #12]
 80196ac:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80196b0:	68fb      	ldr	r3, [r7, #12]
 80196b2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80196b6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80196ba:	68fb      	ldr	r3, [r7, #12]
 80196bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d00e      	beq.n	80196e2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80196c4:	68fb      	ldr	r3, [r7, #12]
 80196c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d10a      	bne.n	80196e2 <tcp_write+0x616>
 80196cc:	68fb      	ldr	r3, [r7, #12]
 80196ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d106      	bne.n	80196e2 <tcp_write+0x616>
 80196d4:	4b2c      	ldr	r3, [pc, #176]	; (8019788 <tcp_write+0x6bc>)
 80196d6:	f240 3212 	movw	r2, #786	; 0x312
 80196da:	492c      	ldr	r1, [pc, #176]	; (801978c <tcp_write+0x6c0>)
 80196dc:	482c      	ldr	r0, [pc, #176]	; (8019790 <tcp_write+0x6c4>)
 80196de:	f008 f81b 	bl	8021718 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80196e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d016      	beq.n	8019716 <tcp_write+0x64a>
 80196e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80196ea:	68db      	ldr	r3, [r3, #12]
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d012      	beq.n	8019716 <tcp_write+0x64a>
 80196f0:	797b      	ldrb	r3, [r7, #5]
 80196f2:	f003 0302 	and.w	r3, r3, #2
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	d10d      	bne.n	8019716 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80196fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80196fc:	68db      	ldr	r3, [r3, #12]
 80196fe:	899b      	ldrh	r3, [r3, #12]
 8019700:	b29c      	uxth	r4, r3
 8019702:	2008      	movs	r0, #8
 8019704:	f7f9 fac6 	bl	8012c94 <lwip_htons>
 8019708:	4603      	mov	r3, r0
 801970a:	461a      	mov	r2, r3
 801970c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801970e:	68db      	ldr	r3, [r3, #12]
 8019710:	4322      	orrs	r2, r4
 8019712:	b292      	uxth	r2, r2
 8019714:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8019716:	2300      	movs	r3, #0
 8019718:	e031      	b.n	801977e <tcp_write+0x6b2>
          goto memerr;
 801971a:	bf00      	nop
 801971c:	e006      	b.n	801972c <tcp_write+0x660>
            goto memerr;
 801971e:	bf00      	nop
 8019720:	e004      	b.n	801972c <tcp_write+0x660>
        goto memerr;
 8019722:	bf00      	nop
 8019724:	e002      	b.n	801972c <tcp_write+0x660>
        goto memerr;
 8019726:	bf00      	nop
 8019728:	e000      	b.n	801972c <tcp_write+0x660>
      goto memerr;
 801972a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801972c:	68fb      	ldr	r3, [r7, #12]
 801972e:	8b5b      	ldrh	r3, [r3, #26]
 8019730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019734:	b29a      	uxth	r2, r3
 8019736:	68fb      	ldr	r3, [r7, #12]
 8019738:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801973a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801973c:	2b00      	cmp	r3, #0
 801973e:	d002      	beq.n	8019746 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8019740:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019742:	f7fa fea5 	bl	8014490 <pbuf_free>
  }
  if (queue != NULL) {
 8019746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019748:	2b00      	cmp	r3, #0
 801974a:	d002      	beq.n	8019752 <tcp_write+0x686>
    tcp_segs_free(queue);
 801974c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801974e:	f7fc fb53 	bl	8015df8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8019752:	68fb      	ldr	r3, [r7, #12]
 8019754:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019758:	2b00      	cmp	r3, #0
 801975a:	d00e      	beq.n	801977a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801975c:	68fb      	ldr	r3, [r7, #12]
 801975e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019760:	2b00      	cmp	r3, #0
 8019762:	d10a      	bne.n	801977a <tcp_write+0x6ae>
 8019764:	68fb      	ldr	r3, [r7, #12]
 8019766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019768:	2b00      	cmp	r3, #0
 801976a:	d106      	bne.n	801977a <tcp_write+0x6ae>
 801976c:	4b06      	ldr	r3, [pc, #24]	; (8019788 <tcp_write+0x6bc>)
 801976e:	f240 3227 	movw	r2, #807	; 0x327
 8019772:	4906      	ldr	r1, [pc, #24]	; (801978c <tcp_write+0x6c0>)
 8019774:	4806      	ldr	r0, [pc, #24]	; (8019790 <tcp_write+0x6c4>)
 8019776:	f007 ffcf 	bl	8021718 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801977a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801977e:	4618      	mov	r0, r3
 8019780:	375c      	adds	r7, #92	; 0x5c
 8019782:	46bd      	mov	sp, r7
 8019784:	bd90      	pop	{r4, r7, pc}
 8019786:	bf00      	nop
 8019788:	08025ad4 	.word	0x08025ad4
 801978c:	08025e48 	.word	0x08025e48
 8019790:	08025b28 	.word	0x08025b28

08019794 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8019794:	b590      	push	{r4, r7, lr}
 8019796:	b08b      	sub	sp, #44	; 0x2c
 8019798:	af02      	add	r7, sp, #8
 801979a:	6078      	str	r0, [r7, #4]
 801979c:	460b      	mov	r3, r1
 801979e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80197a0:	2300      	movs	r3, #0
 80197a2:	61fb      	str	r3, [r7, #28]
 80197a4:	2300      	movs	r3, #0
 80197a6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80197a8:	2300      	movs	r3, #0
 80197aa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	d106      	bne.n	80197c0 <tcp_split_unsent_seg+0x2c>
 80197b2:	4b95      	ldr	r3, [pc, #596]	; (8019a08 <tcp_split_unsent_seg+0x274>)
 80197b4:	f240 324b 	movw	r2, #843	; 0x34b
 80197b8:	4994      	ldr	r1, [pc, #592]	; (8019a0c <tcp_split_unsent_seg+0x278>)
 80197ba:	4895      	ldr	r0, [pc, #596]	; (8019a10 <tcp_split_unsent_seg+0x27c>)
 80197bc:	f007 ffac 	bl	8021718 <iprintf>

  useg = pcb->unsent;
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80197c4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80197c6:	697b      	ldr	r3, [r7, #20]
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d102      	bne.n	80197d2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80197cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80197d0:	e116      	b.n	8019a00 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80197d2:	887b      	ldrh	r3, [r7, #2]
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d109      	bne.n	80197ec <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80197d8:	4b8b      	ldr	r3, [pc, #556]	; (8019a08 <tcp_split_unsent_seg+0x274>)
 80197da:	f240 3253 	movw	r2, #851	; 0x353
 80197de:	498d      	ldr	r1, [pc, #564]	; (8019a14 <tcp_split_unsent_seg+0x280>)
 80197e0:	488b      	ldr	r0, [pc, #556]	; (8019a10 <tcp_split_unsent_seg+0x27c>)
 80197e2:	f007 ff99 	bl	8021718 <iprintf>
    return ERR_VAL;
 80197e6:	f06f 0305 	mvn.w	r3, #5
 80197ea:	e109      	b.n	8019a00 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80197ec:	697b      	ldr	r3, [r7, #20]
 80197ee:	891b      	ldrh	r3, [r3, #8]
 80197f0:	887a      	ldrh	r2, [r7, #2]
 80197f2:	429a      	cmp	r2, r3
 80197f4:	d301      	bcc.n	80197fa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80197f6:	2300      	movs	r3, #0
 80197f8:	e102      	b.n	8019a00 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80197fe:	887a      	ldrh	r2, [r7, #2]
 8019800:	429a      	cmp	r2, r3
 8019802:	d906      	bls.n	8019812 <tcp_split_unsent_seg+0x7e>
 8019804:	4b80      	ldr	r3, [pc, #512]	; (8019a08 <tcp_split_unsent_seg+0x274>)
 8019806:	f240 325b 	movw	r2, #859	; 0x35b
 801980a:	4983      	ldr	r1, [pc, #524]	; (8019a18 <tcp_split_unsent_seg+0x284>)
 801980c:	4880      	ldr	r0, [pc, #512]	; (8019a10 <tcp_split_unsent_seg+0x27c>)
 801980e:	f007 ff83 	bl	8021718 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8019812:	697b      	ldr	r3, [r7, #20]
 8019814:	891b      	ldrh	r3, [r3, #8]
 8019816:	2b00      	cmp	r3, #0
 8019818:	d106      	bne.n	8019828 <tcp_split_unsent_seg+0x94>
 801981a:	4b7b      	ldr	r3, [pc, #492]	; (8019a08 <tcp_split_unsent_seg+0x274>)
 801981c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8019820:	497e      	ldr	r1, [pc, #504]	; (8019a1c <tcp_split_unsent_seg+0x288>)
 8019822:	487b      	ldr	r0, [pc, #492]	; (8019a10 <tcp_split_unsent_seg+0x27c>)
 8019824:	f007 ff78 	bl	8021718 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8019828:	697b      	ldr	r3, [r7, #20]
 801982a:	7a9b      	ldrb	r3, [r3, #10]
 801982c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801982e:	7bfb      	ldrb	r3, [r7, #15]
 8019830:	009b      	lsls	r3, r3, #2
 8019832:	b2db      	uxtb	r3, r3
 8019834:	f003 0304 	and.w	r3, r3, #4
 8019838:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801983a:	697b      	ldr	r3, [r7, #20]
 801983c:	891a      	ldrh	r2, [r3, #8]
 801983e:	887b      	ldrh	r3, [r7, #2]
 8019840:	1ad3      	subs	r3, r2, r3
 8019842:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8019844:	7bbb      	ldrb	r3, [r7, #14]
 8019846:	b29a      	uxth	r2, r3
 8019848:	89bb      	ldrh	r3, [r7, #12]
 801984a:	4413      	add	r3, r2
 801984c:	b29b      	uxth	r3, r3
 801984e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019852:	4619      	mov	r1, r3
 8019854:	2036      	movs	r0, #54	; 0x36
 8019856:	f7fa fb37 	bl	8013ec8 <pbuf_alloc>
 801985a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801985c:	693b      	ldr	r3, [r7, #16]
 801985e:	2b00      	cmp	r3, #0
 8019860:	f000 80b7 	beq.w	80199d2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8019864:	697b      	ldr	r3, [r7, #20]
 8019866:	685b      	ldr	r3, [r3, #4]
 8019868:	891a      	ldrh	r2, [r3, #8]
 801986a:	697b      	ldr	r3, [r7, #20]
 801986c:	891b      	ldrh	r3, [r3, #8]
 801986e:	1ad3      	subs	r3, r2, r3
 8019870:	b29a      	uxth	r2, r3
 8019872:	887b      	ldrh	r3, [r7, #2]
 8019874:	4413      	add	r3, r2
 8019876:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8019878:	697b      	ldr	r3, [r7, #20]
 801987a:	6858      	ldr	r0, [r3, #4]
 801987c:	693b      	ldr	r3, [r7, #16]
 801987e:	685a      	ldr	r2, [r3, #4]
 8019880:	7bbb      	ldrb	r3, [r7, #14]
 8019882:	18d1      	adds	r1, r2, r3
 8019884:	897b      	ldrh	r3, [r7, #10]
 8019886:	89ba      	ldrh	r2, [r7, #12]
 8019888:	f7fb f808 	bl	801489c <pbuf_copy_partial>
 801988c:	4603      	mov	r3, r0
 801988e:	461a      	mov	r2, r3
 8019890:	89bb      	ldrh	r3, [r7, #12]
 8019892:	4293      	cmp	r3, r2
 8019894:	f040 809f 	bne.w	80199d6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8019898:	697b      	ldr	r3, [r7, #20]
 801989a:	68db      	ldr	r3, [r3, #12]
 801989c:	899b      	ldrh	r3, [r3, #12]
 801989e:	b29b      	uxth	r3, r3
 80198a0:	4618      	mov	r0, r3
 80198a2:	f7f9 f9f7 	bl	8012c94 <lwip_htons>
 80198a6:	4603      	mov	r3, r0
 80198a8:	b2db      	uxtb	r3, r3
 80198aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80198ae:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80198b0:	2300      	movs	r3, #0
 80198b2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80198b4:	7efb      	ldrb	r3, [r7, #27]
 80198b6:	f003 0308 	and.w	r3, r3, #8
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d007      	beq.n	80198ce <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80198be:	7efb      	ldrb	r3, [r7, #27]
 80198c0:	f023 0308 	bic.w	r3, r3, #8
 80198c4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80198c6:	7ebb      	ldrb	r3, [r7, #26]
 80198c8:	f043 0308 	orr.w	r3, r3, #8
 80198cc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80198ce:	7efb      	ldrb	r3, [r7, #27]
 80198d0:	f003 0301 	and.w	r3, r3, #1
 80198d4:	2b00      	cmp	r3, #0
 80198d6:	d007      	beq.n	80198e8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80198d8:	7efb      	ldrb	r3, [r7, #27]
 80198da:	f023 0301 	bic.w	r3, r3, #1
 80198de:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80198e0:	7ebb      	ldrb	r3, [r7, #26]
 80198e2:	f043 0301 	orr.w	r3, r3, #1
 80198e6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80198e8:	697b      	ldr	r3, [r7, #20]
 80198ea:	68db      	ldr	r3, [r3, #12]
 80198ec:	685b      	ldr	r3, [r3, #4]
 80198ee:	4618      	mov	r0, r3
 80198f0:	f7f9 f9e5 	bl	8012cbe <lwip_htonl>
 80198f4:	4602      	mov	r2, r0
 80198f6:	887b      	ldrh	r3, [r7, #2]
 80198f8:	18d1      	adds	r1, r2, r3
 80198fa:	7eba      	ldrb	r2, [r7, #26]
 80198fc:	7bfb      	ldrb	r3, [r7, #15]
 80198fe:	9300      	str	r3, [sp, #0]
 8019900:	460b      	mov	r3, r1
 8019902:	6939      	ldr	r1, [r7, #16]
 8019904:	6878      	ldr	r0, [r7, #4]
 8019906:	f7ff fa4f 	bl	8018da8 <tcp_create_segment>
 801990a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801990c:	69fb      	ldr	r3, [r7, #28]
 801990e:	2b00      	cmp	r3, #0
 8019910:	d063      	beq.n	80199da <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8019912:	697b      	ldr	r3, [r7, #20]
 8019914:	685b      	ldr	r3, [r3, #4]
 8019916:	4618      	mov	r0, r3
 8019918:	f7fa fe48 	bl	80145ac <pbuf_clen>
 801991c:	4603      	mov	r3, r0
 801991e:	461a      	mov	r2, r3
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019926:	1a9b      	subs	r3, r3, r2
 8019928:	b29a      	uxth	r2, r3
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8019930:	697b      	ldr	r3, [r7, #20]
 8019932:	6858      	ldr	r0, [r3, #4]
 8019934:	697b      	ldr	r3, [r7, #20]
 8019936:	685b      	ldr	r3, [r3, #4]
 8019938:	891a      	ldrh	r2, [r3, #8]
 801993a:	89bb      	ldrh	r3, [r7, #12]
 801993c:	1ad3      	subs	r3, r2, r3
 801993e:	b29b      	uxth	r3, r3
 8019940:	4619      	mov	r1, r3
 8019942:	f7fa fc1f 	bl	8014184 <pbuf_realloc>
  useg->len -= remainder;
 8019946:	697b      	ldr	r3, [r7, #20]
 8019948:	891a      	ldrh	r2, [r3, #8]
 801994a:	89bb      	ldrh	r3, [r7, #12]
 801994c:	1ad3      	subs	r3, r2, r3
 801994e:	b29a      	uxth	r2, r3
 8019950:	697b      	ldr	r3, [r7, #20]
 8019952:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8019954:	697b      	ldr	r3, [r7, #20]
 8019956:	68db      	ldr	r3, [r3, #12]
 8019958:	899b      	ldrh	r3, [r3, #12]
 801995a:	b29c      	uxth	r4, r3
 801995c:	7efb      	ldrb	r3, [r7, #27]
 801995e:	b29b      	uxth	r3, r3
 8019960:	4618      	mov	r0, r3
 8019962:	f7f9 f997 	bl	8012c94 <lwip_htons>
 8019966:	4603      	mov	r3, r0
 8019968:	461a      	mov	r2, r3
 801996a:	697b      	ldr	r3, [r7, #20]
 801996c:	68db      	ldr	r3, [r3, #12]
 801996e:	4322      	orrs	r2, r4
 8019970:	b292      	uxth	r2, r2
 8019972:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8019974:	697b      	ldr	r3, [r7, #20]
 8019976:	685b      	ldr	r3, [r3, #4]
 8019978:	4618      	mov	r0, r3
 801997a:	f7fa fe17 	bl	80145ac <pbuf_clen>
 801997e:	4603      	mov	r3, r0
 8019980:	461a      	mov	r2, r3
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019988:	4413      	add	r3, r2
 801998a:	b29a      	uxth	r2, r3
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019992:	69fb      	ldr	r3, [r7, #28]
 8019994:	685b      	ldr	r3, [r3, #4]
 8019996:	4618      	mov	r0, r3
 8019998:	f7fa fe08 	bl	80145ac <pbuf_clen>
 801999c:	4603      	mov	r3, r0
 801999e:	461a      	mov	r2, r3
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80199a6:	4413      	add	r3, r2
 80199a8:	b29a      	uxth	r2, r3
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80199b0:	697b      	ldr	r3, [r7, #20]
 80199b2:	681a      	ldr	r2, [r3, #0]
 80199b4:	69fb      	ldr	r3, [r7, #28]
 80199b6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80199b8:	697b      	ldr	r3, [r7, #20]
 80199ba:	69fa      	ldr	r2, [r7, #28]
 80199bc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80199be:	69fb      	ldr	r3, [r7, #28]
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d103      	bne.n	80199ce <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	2200      	movs	r2, #0
 80199ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80199ce:	2300      	movs	r3, #0
 80199d0:	e016      	b.n	8019a00 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80199d2:	bf00      	nop
 80199d4:	e002      	b.n	80199dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80199d6:	bf00      	nop
 80199d8:	e000      	b.n	80199dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80199da:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80199dc:	69fb      	ldr	r3, [r7, #28]
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d006      	beq.n	80199f0 <tcp_split_unsent_seg+0x25c>
 80199e2:	4b09      	ldr	r3, [pc, #36]	; (8019a08 <tcp_split_unsent_seg+0x274>)
 80199e4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80199e8:	490d      	ldr	r1, [pc, #52]	; (8019a20 <tcp_split_unsent_seg+0x28c>)
 80199ea:	4809      	ldr	r0, [pc, #36]	; (8019a10 <tcp_split_unsent_seg+0x27c>)
 80199ec:	f007 fe94 	bl	8021718 <iprintf>
  if (p != NULL) {
 80199f0:	693b      	ldr	r3, [r7, #16]
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d002      	beq.n	80199fc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80199f6:	6938      	ldr	r0, [r7, #16]
 80199f8:	f7fa fd4a 	bl	8014490 <pbuf_free>
  }

  return ERR_MEM;
 80199fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8019a00:	4618      	mov	r0, r3
 8019a02:	3724      	adds	r7, #36	; 0x24
 8019a04:	46bd      	mov	sp, r7
 8019a06:	bd90      	pop	{r4, r7, pc}
 8019a08:	08025ad4 	.word	0x08025ad4
 8019a0c:	08025e68 	.word	0x08025e68
 8019a10:	08025b28 	.word	0x08025b28
 8019a14:	08025e8c 	.word	0x08025e8c
 8019a18:	08025eb0 	.word	0x08025eb0
 8019a1c:	08025ec0 	.word	0x08025ec0
 8019a20:	08025ed0 	.word	0x08025ed0

08019a24 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8019a24:	b590      	push	{r4, r7, lr}
 8019a26:	b085      	sub	sp, #20
 8019a28:	af00      	add	r7, sp, #0
 8019a2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d106      	bne.n	8019a40 <tcp_send_fin+0x1c>
 8019a32:	4b21      	ldr	r3, [pc, #132]	; (8019ab8 <tcp_send_fin+0x94>)
 8019a34:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8019a38:	4920      	ldr	r1, [pc, #128]	; (8019abc <tcp_send_fin+0x98>)
 8019a3a:	4821      	ldr	r0, [pc, #132]	; (8019ac0 <tcp_send_fin+0x9c>)
 8019a3c:	f007 fe6c 	bl	8021718 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d02e      	beq.n	8019aa6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a4c:	60fb      	str	r3, [r7, #12]
 8019a4e:	e002      	b.n	8019a56 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8019a50:	68fb      	ldr	r3, [r7, #12]
 8019a52:	681b      	ldr	r3, [r3, #0]
 8019a54:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	681b      	ldr	r3, [r3, #0]
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d1f8      	bne.n	8019a50 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	68db      	ldr	r3, [r3, #12]
 8019a62:	899b      	ldrh	r3, [r3, #12]
 8019a64:	b29b      	uxth	r3, r3
 8019a66:	4618      	mov	r0, r3
 8019a68:	f7f9 f914 	bl	8012c94 <lwip_htons>
 8019a6c:	4603      	mov	r3, r0
 8019a6e:	b2db      	uxtb	r3, r3
 8019a70:	f003 0307 	and.w	r3, r3, #7
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d116      	bne.n	8019aa6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8019a78:	68fb      	ldr	r3, [r7, #12]
 8019a7a:	68db      	ldr	r3, [r3, #12]
 8019a7c:	899b      	ldrh	r3, [r3, #12]
 8019a7e:	b29c      	uxth	r4, r3
 8019a80:	2001      	movs	r0, #1
 8019a82:	f7f9 f907 	bl	8012c94 <lwip_htons>
 8019a86:	4603      	mov	r3, r0
 8019a88:	461a      	mov	r2, r3
 8019a8a:	68fb      	ldr	r3, [r7, #12]
 8019a8c:	68db      	ldr	r3, [r3, #12]
 8019a8e:	4322      	orrs	r2, r4
 8019a90:	b292      	uxth	r2, r2
 8019a92:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	8b5b      	ldrh	r3, [r3, #26]
 8019a98:	f043 0320 	orr.w	r3, r3, #32
 8019a9c:	b29a      	uxth	r2, r3
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8019aa2:	2300      	movs	r3, #0
 8019aa4:	e004      	b.n	8019ab0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8019aa6:	2101      	movs	r1, #1
 8019aa8:	6878      	ldr	r0, [r7, #4]
 8019aaa:	f000 f80b 	bl	8019ac4 <tcp_enqueue_flags>
 8019aae:	4603      	mov	r3, r0
}
 8019ab0:	4618      	mov	r0, r3
 8019ab2:	3714      	adds	r7, #20
 8019ab4:	46bd      	mov	sp, r7
 8019ab6:	bd90      	pop	{r4, r7, pc}
 8019ab8:	08025ad4 	.word	0x08025ad4
 8019abc:	08025edc 	.word	0x08025edc
 8019ac0:	08025b28 	.word	0x08025b28

08019ac4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8019ac4:	b580      	push	{r7, lr}
 8019ac6:	b08a      	sub	sp, #40	; 0x28
 8019ac8:	af02      	add	r7, sp, #8
 8019aca:	6078      	str	r0, [r7, #4]
 8019acc:	460b      	mov	r3, r1
 8019ace:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8019ad0:	2300      	movs	r3, #0
 8019ad2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8019ad4:	2300      	movs	r3, #0
 8019ad6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8019ad8:	78fb      	ldrb	r3, [r7, #3]
 8019ada:	f003 0303 	and.w	r3, r3, #3
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d106      	bne.n	8019af0 <tcp_enqueue_flags+0x2c>
 8019ae2:	4b67      	ldr	r3, [pc, #412]	; (8019c80 <tcp_enqueue_flags+0x1bc>)
 8019ae4:	f240 4211 	movw	r2, #1041	; 0x411
 8019ae8:	4966      	ldr	r1, [pc, #408]	; (8019c84 <tcp_enqueue_flags+0x1c0>)
 8019aea:	4867      	ldr	r0, [pc, #412]	; (8019c88 <tcp_enqueue_flags+0x1c4>)
 8019aec:	f007 fe14 	bl	8021718 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d106      	bne.n	8019b04 <tcp_enqueue_flags+0x40>
 8019af6:	4b62      	ldr	r3, [pc, #392]	; (8019c80 <tcp_enqueue_flags+0x1bc>)
 8019af8:	f240 4213 	movw	r2, #1043	; 0x413
 8019afc:	4963      	ldr	r1, [pc, #396]	; (8019c8c <tcp_enqueue_flags+0x1c8>)
 8019afe:	4862      	ldr	r0, [pc, #392]	; (8019c88 <tcp_enqueue_flags+0x1c4>)
 8019b00:	f007 fe0a 	bl	8021718 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8019b04:	78fb      	ldrb	r3, [r7, #3]
 8019b06:	f003 0302 	and.w	r3, r3, #2
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d001      	beq.n	8019b12 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8019b0e:	2301      	movs	r3, #1
 8019b10:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019b12:	7ffb      	ldrb	r3, [r7, #31]
 8019b14:	009b      	lsls	r3, r3, #2
 8019b16:	b2db      	uxtb	r3, r3
 8019b18:	f003 0304 	and.w	r3, r3, #4
 8019b1c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019b1e:	7dfb      	ldrb	r3, [r7, #23]
 8019b20:	b29b      	uxth	r3, r3
 8019b22:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019b26:	4619      	mov	r1, r3
 8019b28:	2036      	movs	r0, #54	; 0x36
 8019b2a:	f7fa f9cd 	bl	8013ec8 <pbuf_alloc>
 8019b2e:	6138      	str	r0, [r7, #16]
 8019b30:	693b      	ldr	r3, [r7, #16]
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	d109      	bne.n	8019b4a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	8b5b      	ldrh	r3, [r3, #26]
 8019b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019b3e:	b29a      	uxth	r2, r3
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019b48:	e095      	b.n	8019c76 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8019b4a:	693b      	ldr	r3, [r7, #16]
 8019b4c:	895a      	ldrh	r2, [r3, #10]
 8019b4e:	7dfb      	ldrb	r3, [r7, #23]
 8019b50:	b29b      	uxth	r3, r3
 8019b52:	429a      	cmp	r2, r3
 8019b54:	d206      	bcs.n	8019b64 <tcp_enqueue_flags+0xa0>
 8019b56:	4b4a      	ldr	r3, [pc, #296]	; (8019c80 <tcp_enqueue_flags+0x1bc>)
 8019b58:	f240 4239 	movw	r2, #1081	; 0x439
 8019b5c:	494c      	ldr	r1, [pc, #304]	; (8019c90 <tcp_enqueue_flags+0x1cc>)
 8019b5e:	484a      	ldr	r0, [pc, #296]	; (8019c88 <tcp_enqueue_flags+0x1c4>)
 8019b60:	f007 fdda 	bl	8021718 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8019b68:	78fa      	ldrb	r2, [r7, #3]
 8019b6a:	7ffb      	ldrb	r3, [r7, #31]
 8019b6c:	9300      	str	r3, [sp, #0]
 8019b6e:	460b      	mov	r3, r1
 8019b70:	6939      	ldr	r1, [r7, #16]
 8019b72:	6878      	ldr	r0, [r7, #4]
 8019b74:	f7ff f918 	bl	8018da8 <tcp_create_segment>
 8019b78:	60f8      	str	r0, [r7, #12]
 8019b7a:	68fb      	ldr	r3, [r7, #12]
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	d109      	bne.n	8019b94 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	8b5b      	ldrh	r3, [r3, #26]
 8019b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019b88:	b29a      	uxth	r2, r3
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019b92:	e070      	b.n	8019c76 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8019b94:	68fb      	ldr	r3, [r7, #12]
 8019b96:	68db      	ldr	r3, [r3, #12]
 8019b98:	f003 0303 	and.w	r3, r3, #3
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d006      	beq.n	8019bae <tcp_enqueue_flags+0xea>
 8019ba0:	4b37      	ldr	r3, [pc, #220]	; (8019c80 <tcp_enqueue_flags+0x1bc>)
 8019ba2:	f240 4242 	movw	r2, #1090	; 0x442
 8019ba6:	493b      	ldr	r1, [pc, #236]	; (8019c94 <tcp_enqueue_flags+0x1d0>)
 8019ba8:	4837      	ldr	r0, [pc, #220]	; (8019c88 <tcp_enqueue_flags+0x1c4>)
 8019baa:	f007 fdb5 	bl	8021718 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8019bae:	68fb      	ldr	r3, [r7, #12]
 8019bb0:	891b      	ldrh	r3, [r3, #8]
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d006      	beq.n	8019bc4 <tcp_enqueue_flags+0x100>
 8019bb6:	4b32      	ldr	r3, [pc, #200]	; (8019c80 <tcp_enqueue_flags+0x1bc>)
 8019bb8:	f240 4243 	movw	r2, #1091	; 0x443
 8019bbc:	4936      	ldr	r1, [pc, #216]	; (8019c98 <tcp_enqueue_flags+0x1d4>)
 8019bbe:	4832      	ldr	r0, [pc, #200]	; (8019c88 <tcp_enqueue_flags+0x1c4>)
 8019bc0:	f007 fdaa 	bl	8021718 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d103      	bne.n	8019bd4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	68fa      	ldr	r2, [r7, #12]
 8019bd0:	66da      	str	r2, [r3, #108]	; 0x6c
 8019bd2:	e00d      	b.n	8019bf0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019bd8:	61bb      	str	r3, [r7, #24]
 8019bda:	e002      	b.n	8019be2 <tcp_enqueue_flags+0x11e>
 8019bdc:	69bb      	ldr	r3, [r7, #24]
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	61bb      	str	r3, [r7, #24]
 8019be2:	69bb      	ldr	r3, [r7, #24]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d1f8      	bne.n	8019bdc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8019bea:	69bb      	ldr	r3, [r7, #24]
 8019bec:	68fa      	ldr	r2, [r7, #12]
 8019bee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	2200      	movs	r2, #0
 8019bf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8019bf8:	78fb      	ldrb	r3, [r7, #3]
 8019bfa:	f003 0302 	and.w	r3, r3, #2
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d104      	bne.n	8019c0c <tcp_enqueue_flags+0x148>
 8019c02:	78fb      	ldrb	r3, [r7, #3]
 8019c04:	f003 0301 	and.w	r3, r3, #1
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d004      	beq.n	8019c16 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c10:	1c5a      	adds	r2, r3, #1
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8019c16:	78fb      	ldrb	r3, [r7, #3]
 8019c18:	f003 0301 	and.w	r3, r3, #1
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	d006      	beq.n	8019c2e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	8b5b      	ldrh	r3, [r3, #26]
 8019c24:	f043 0320 	orr.w	r3, r3, #32
 8019c28:	b29a      	uxth	r2, r3
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	685b      	ldr	r3, [r3, #4]
 8019c32:	4618      	mov	r0, r3
 8019c34:	f7fa fcba 	bl	80145ac <pbuf_clen>
 8019c38:	4603      	mov	r3, r0
 8019c3a:	461a      	mov	r2, r3
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019c42:	4413      	add	r3, r2
 8019c44:	b29a      	uxth	r2, r3
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d00e      	beq.n	8019c74 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	d10a      	bne.n	8019c74 <tcp_enqueue_flags+0x1b0>
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d106      	bne.n	8019c74 <tcp_enqueue_flags+0x1b0>
 8019c66:	4b06      	ldr	r3, [pc, #24]	; (8019c80 <tcp_enqueue_flags+0x1bc>)
 8019c68:	f240 4265 	movw	r2, #1125	; 0x465
 8019c6c:	490b      	ldr	r1, [pc, #44]	; (8019c9c <tcp_enqueue_flags+0x1d8>)
 8019c6e:	4806      	ldr	r0, [pc, #24]	; (8019c88 <tcp_enqueue_flags+0x1c4>)
 8019c70:	f007 fd52 	bl	8021718 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8019c74:	2300      	movs	r3, #0
}
 8019c76:	4618      	mov	r0, r3
 8019c78:	3720      	adds	r7, #32
 8019c7a:	46bd      	mov	sp, r7
 8019c7c:	bd80      	pop	{r7, pc}
 8019c7e:	bf00      	nop
 8019c80:	08025ad4 	.word	0x08025ad4
 8019c84:	08025ef8 	.word	0x08025ef8
 8019c88:	08025b28 	.word	0x08025b28
 8019c8c:	08025f50 	.word	0x08025f50
 8019c90:	08025f70 	.word	0x08025f70
 8019c94:	08025fac 	.word	0x08025fac
 8019c98:	08025fc4 	.word	0x08025fc4
 8019c9c:	08025ff0 	.word	0x08025ff0

08019ca0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8019ca0:	b5b0      	push	{r4, r5, r7, lr}
 8019ca2:	b08a      	sub	sp, #40	; 0x28
 8019ca4:	af00      	add	r7, sp, #0
 8019ca6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d106      	bne.n	8019cbc <tcp_output+0x1c>
 8019cae:	4b8a      	ldr	r3, [pc, #552]	; (8019ed8 <tcp_output+0x238>)
 8019cb0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8019cb4:	4989      	ldr	r1, [pc, #548]	; (8019edc <tcp_output+0x23c>)
 8019cb6:	488a      	ldr	r0, [pc, #552]	; (8019ee0 <tcp_output+0x240>)
 8019cb8:	f007 fd2e 	bl	8021718 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	7d1b      	ldrb	r3, [r3, #20]
 8019cc0:	2b01      	cmp	r3, #1
 8019cc2:	d106      	bne.n	8019cd2 <tcp_output+0x32>
 8019cc4:	4b84      	ldr	r3, [pc, #528]	; (8019ed8 <tcp_output+0x238>)
 8019cc6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8019cca:	4986      	ldr	r1, [pc, #536]	; (8019ee4 <tcp_output+0x244>)
 8019ccc:	4884      	ldr	r0, [pc, #528]	; (8019ee0 <tcp_output+0x240>)
 8019cce:	f007 fd23 	bl	8021718 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8019cd2:	4b85      	ldr	r3, [pc, #532]	; (8019ee8 <tcp_output+0x248>)
 8019cd4:	681b      	ldr	r3, [r3, #0]
 8019cd6:	687a      	ldr	r2, [r7, #4]
 8019cd8:	429a      	cmp	r2, r3
 8019cda:	d101      	bne.n	8019ce0 <tcp_output+0x40>
    return ERR_OK;
 8019cdc:	2300      	movs	r3, #0
 8019cde:	e1ce      	b.n	801a07e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019cec:	4293      	cmp	r3, r2
 8019cee:	bf28      	it	cs
 8019cf0:	4613      	movcs	r3, r2
 8019cf2:	b29b      	uxth	r3, r3
 8019cf4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019cfa:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8019cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d10b      	bne.n	8019d1a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	8b5b      	ldrh	r3, [r3, #26]
 8019d06:	f003 0302 	and.w	r3, r3, #2
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	f000 81aa 	beq.w	801a064 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8019d10:	6878      	ldr	r0, [r7, #4]
 8019d12:	f000 fdcb 	bl	801a8ac <tcp_send_empty_ack>
 8019d16:	4603      	mov	r3, r0
 8019d18:	e1b1      	b.n	801a07e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8019d1a:	6879      	ldr	r1, [r7, #4]
 8019d1c:	687b      	ldr	r3, [r7, #4]
 8019d1e:	3304      	adds	r3, #4
 8019d20:	461a      	mov	r2, r3
 8019d22:	6878      	ldr	r0, [r7, #4]
 8019d24:	f7ff f824 	bl	8018d70 <tcp_route>
 8019d28:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8019d2a:	697b      	ldr	r3, [r7, #20]
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	d102      	bne.n	8019d36 <tcp_output+0x96>
    return ERR_RTE;
 8019d30:	f06f 0303 	mvn.w	r3, #3
 8019d34:	e1a3      	b.n	801a07e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	d003      	beq.n	8019d44 <tcp_output+0xa4>
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	681b      	ldr	r3, [r3, #0]
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d111      	bne.n	8019d68 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8019d44:	697b      	ldr	r3, [r7, #20]
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d002      	beq.n	8019d50 <tcp_output+0xb0>
 8019d4a:	697b      	ldr	r3, [r7, #20]
 8019d4c:	3304      	adds	r3, #4
 8019d4e:	e000      	b.n	8019d52 <tcp_output+0xb2>
 8019d50:	2300      	movs	r3, #0
 8019d52:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8019d54:	693b      	ldr	r3, [r7, #16]
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d102      	bne.n	8019d60 <tcp_output+0xc0>
      return ERR_RTE;
 8019d5a:	f06f 0303 	mvn.w	r3, #3
 8019d5e:	e18e      	b.n	801a07e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019d60:	693b      	ldr	r3, [r7, #16]
 8019d62:	681a      	ldr	r2, [r3, #0]
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8019d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d6a:	68db      	ldr	r3, [r3, #12]
 8019d6c:	685b      	ldr	r3, [r3, #4]
 8019d6e:	4618      	mov	r0, r3
 8019d70:	f7f8 ffa5 	bl	8012cbe <lwip_htonl>
 8019d74:	4602      	mov	r2, r0
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019d7a:	1ad3      	subs	r3, r2, r3
 8019d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d7e:	8912      	ldrh	r2, [r2, #8]
 8019d80:	4413      	add	r3, r2
 8019d82:	69ba      	ldr	r2, [r7, #24]
 8019d84:	429a      	cmp	r2, r3
 8019d86:	d227      	bcs.n	8019dd8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019d8e:	461a      	mov	r2, r3
 8019d90:	69bb      	ldr	r3, [r7, #24]
 8019d92:	4293      	cmp	r3, r2
 8019d94:	d114      	bne.n	8019dc0 <tcp_output+0x120>
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d110      	bne.n	8019dc0 <tcp_output+0x120>
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	d10b      	bne.n	8019dc0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	2200      	movs	r2, #0
 8019dac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      pcb->persist_backoff = 1;
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	2201      	movs	r2, #1
 8019db4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      pcb->persist_probe = 0;
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	2200      	movs	r2, #0
 8019dbc:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	8b5b      	ldrh	r3, [r3, #26]
 8019dc4:	f003 0302 	and.w	r3, r3, #2
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	f000 814d 	beq.w	801a068 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8019dce:	6878      	ldr	r0, [r7, #4]
 8019dd0:	f000 fd6c 	bl	801a8ac <tcp_send_empty_ack>
 8019dd4:	4603      	mov	r3, r0
 8019dd6:	e152      	b.n	801a07e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	2200      	movs	r2, #0
 8019ddc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019de4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8019de6:	6a3b      	ldr	r3, [r7, #32]
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	f000 811c 	beq.w	801a026 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8019dee:	e002      	b.n	8019df6 <tcp_output+0x156>
 8019df0:	6a3b      	ldr	r3, [r7, #32]
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	623b      	str	r3, [r7, #32]
 8019df6:	6a3b      	ldr	r3, [r7, #32]
 8019df8:	681b      	ldr	r3, [r3, #0]
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	d1f8      	bne.n	8019df0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8019dfe:	e112      	b.n	801a026 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8019e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e02:	68db      	ldr	r3, [r3, #12]
 8019e04:	899b      	ldrh	r3, [r3, #12]
 8019e06:	b29b      	uxth	r3, r3
 8019e08:	4618      	mov	r0, r3
 8019e0a:	f7f8 ff43 	bl	8012c94 <lwip_htons>
 8019e0e:	4603      	mov	r3, r0
 8019e10:	b2db      	uxtb	r3, r3
 8019e12:	f003 0304 	and.w	r3, r3, #4
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	d006      	beq.n	8019e28 <tcp_output+0x188>
 8019e1a:	4b2f      	ldr	r3, [pc, #188]	; (8019ed8 <tcp_output+0x238>)
 8019e1c:	f240 5236 	movw	r2, #1334	; 0x536
 8019e20:	4932      	ldr	r1, [pc, #200]	; (8019eec <tcp_output+0x24c>)
 8019e22:	482f      	ldr	r0, [pc, #188]	; (8019ee0 <tcp_output+0x240>)
 8019e24:	f007 fc78 	bl	8021718 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d01f      	beq.n	8019e70 <tcp_output+0x1d0>
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	8b5b      	ldrh	r3, [r3, #26]
 8019e34:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d119      	bne.n	8019e70 <tcp_output+0x1d0>
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	d00b      	beq.n	8019e5c <tcp_output+0x1bc>
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019e48:	681b      	ldr	r3, [r3, #0]
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d110      	bne.n	8019e70 <tcp_output+0x1d0>
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019e52:	891a      	ldrh	r2, [r3, #8]
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019e58:	429a      	cmp	r2, r3
 8019e5a:	d209      	bcs.n	8019e70 <tcp_output+0x1d0>
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	d004      	beq.n	8019e70 <tcp_output+0x1d0>
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019e6c:	2b08      	cmp	r3, #8
 8019e6e:	d901      	bls.n	8019e74 <tcp_output+0x1d4>
 8019e70:	2301      	movs	r3, #1
 8019e72:	e000      	b.n	8019e76 <tcp_output+0x1d6>
 8019e74:	2300      	movs	r3, #0
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	d106      	bne.n	8019e88 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	8b5b      	ldrh	r3, [r3, #26]
 8019e7e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	f000 80e4 	beq.w	801a050 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	7d1b      	ldrb	r3, [r3, #20]
 8019e8c:	2b02      	cmp	r3, #2
 8019e8e:	d00d      	beq.n	8019eac <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8019e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e92:	68db      	ldr	r3, [r3, #12]
 8019e94:	899b      	ldrh	r3, [r3, #12]
 8019e96:	b29c      	uxth	r4, r3
 8019e98:	2010      	movs	r0, #16
 8019e9a:	f7f8 fefb 	bl	8012c94 <lwip_htons>
 8019e9e:	4603      	mov	r3, r0
 8019ea0:	461a      	mov	r2, r3
 8019ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ea4:	68db      	ldr	r3, [r3, #12]
 8019ea6:	4322      	orrs	r2, r4
 8019ea8:	b292      	uxth	r2, r2
 8019eaa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8019eac:	697a      	ldr	r2, [r7, #20]
 8019eae:	6879      	ldr	r1, [r7, #4]
 8019eb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019eb2:	f000 f909 	bl	801a0c8 <tcp_output_segment>
 8019eb6:	4603      	mov	r3, r0
 8019eb8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8019eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d016      	beq.n	8019ef0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	8b5b      	ldrh	r3, [r3, #26]
 8019ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019eca:	b29a      	uxth	r2, r3
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	835a      	strh	r2, [r3, #26]
      return err;
 8019ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019ed4:	e0d3      	b.n	801a07e <tcp_output+0x3de>
 8019ed6:	bf00      	nop
 8019ed8:	08025ad4 	.word	0x08025ad4
 8019edc:	08026018 	.word	0x08026018
 8019ee0:	08025b28 	.word	0x08025b28
 8019ee4:	08026030 	.word	0x08026030
 8019ee8:	2001239c 	.word	0x2001239c
 8019eec:	08026058 	.word	0x08026058
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8019ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ef2:	681a      	ldr	r2, [r3, #0]
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	7d1b      	ldrb	r3, [r3, #20]
 8019efc:	2b02      	cmp	r3, #2
 8019efe:	d006      	beq.n	8019f0e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	8b5b      	ldrh	r3, [r3, #26]
 8019f04:	f023 0303 	bic.w	r3, r3, #3
 8019f08:	b29a      	uxth	r2, r3
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f10:	68db      	ldr	r3, [r3, #12]
 8019f12:	685b      	ldr	r3, [r3, #4]
 8019f14:	4618      	mov	r0, r3
 8019f16:	f7f8 fed2 	bl	8012cbe <lwip_htonl>
 8019f1a:	4604      	mov	r4, r0
 8019f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f1e:	891b      	ldrh	r3, [r3, #8]
 8019f20:	461d      	mov	r5, r3
 8019f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f24:	68db      	ldr	r3, [r3, #12]
 8019f26:	899b      	ldrh	r3, [r3, #12]
 8019f28:	b29b      	uxth	r3, r3
 8019f2a:	4618      	mov	r0, r3
 8019f2c:	f7f8 feb2 	bl	8012c94 <lwip_htons>
 8019f30:	4603      	mov	r3, r0
 8019f32:	b2db      	uxtb	r3, r3
 8019f34:	f003 0303 	and.w	r3, r3, #3
 8019f38:	2b00      	cmp	r3, #0
 8019f3a:	d001      	beq.n	8019f40 <tcp_output+0x2a0>
 8019f3c:	2301      	movs	r3, #1
 8019f3e:	e000      	b.n	8019f42 <tcp_output+0x2a2>
 8019f40:	2300      	movs	r3, #0
 8019f42:	442b      	add	r3, r5
 8019f44:	4423      	add	r3, r4
 8019f46:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019f4c:	68bb      	ldr	r3, [r7, #8]
 8019f4e:	1ad3      	subs	r3, r2, r3
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	da02      	bge.n	8019f5a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	68ba      	ldr	r2, [r7, #8]
 8019f58:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8019f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f5c:	891b      	ldrh	r3, [r3, #8]
 8019f5e:	461c      	mov	r4, r3
 8019f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f62:	68db      	ldr	r3, [r3, #12]
 8019f64:	899b      	ldrh	r3, [r3, #12]
 8019f66:	b29b      	uxth	r3, r3
 8019f68:	4618      	mov	r0, r3
 8019f6a:	f7f8 fe93 	bl	8012c94 <lwip_htons>
 8019f6e:	4603      	mov	r3, r0
 8019f70:	b2db      	uxtb	r3, r3
 8019f72:	f003 0303 	and.w	r3, r3, #3
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	d001      	beq.n	8019f7e <tcp_output+0x2de>
 8019f7a:	2301      	movs	r3, #1
 8019f7c:	e000      	b.n	8019f80 <tcp_output+0x2e0>
 8019f7e:	2300      	movs	r3, #0
 8019f80:	4423      	add	r3, r4
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d049      	beq.n	801a01a <tcp_output+0x37a>
      seg->next = NULL;
 8019f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f88:	2200      	movs	r2, #0
 8019f8a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d105      	bne.n	8019fa0 <tcp_output+0x300>
        pcb->unacked = seg;
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f98:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8019f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f9c:	623b      	str	r3, [r7, #32]
 8019f9e:	e03f      	b.n	801a020 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8019fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fa2:	68db      	ldr	r3, [r3, #12]
 8019fa4:	685b      	ldr	r3, [r3, #4]
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	f7f8 fe89 	bl	8012cbe <lwip_htonl>
 8019fac:	4604      	mov	r4, r0
 8019fae:	6a3b      	ldr	r3, [r7, #32]
 8019fb0:	68db      	ldr	r3, [r3, #12]
 8019fb2:	685b      	ldr	r3, [r3, #4]
 8019fb4:	4618      	mov	r0, r3
 8019fb6:	f7f8 fe82 	bl	8012cbe <lwip_htonl>
 8019fba:	4603      	mov	r3, r0
 8019fbc:	1ae3      	subs	r3, r4, r3
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	da24      	bge.n	801a00c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	3370      	adds	r3, #112	; 0x70
 8019fc6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019fc8:	e002      	b.n	8019fd0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8019fca:	69fb      	ldr	r3, [r7, #28]
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019fd0:	69fb      	ldr	r3, [r7, #28]
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d011      	beq.n	8019ffc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019fd8:	69fb      	ldr	r3, [r7, #28]
 8019fda:	681b      	ldr	r3, [r3, #0]
 8019fdc:	68db      	ldr	r3, [r3, #12]
 8019fde:	685b      	ldr	r3, [r3, #4]
 8019fe0:	4618      	mov	r0, r3
 8019fe2:	f7f8 fe6c 	bl	8012cbe <lwip_htonl>
 8019fe6:	4604      	mov	r4, r0
 8019fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fea:	68db      	ldr	r3, [r3, #12]
 8019fec:	685b      	ldr	r3, [r3, #4]
 8019fee:	4618      	mov	r0, r3
 8019ff0:	f7f8 fe65 	bl	8012cbe <lwip_htonl>
 8019ff4:	4603      	mov	r3, r0
 8019ff6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	dbe6      	blt.n	8019fca <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8019ffc:	69fb      	ldr	r3, [r7, #28]
 8019ffe:	681a      	ldr	r2, [r3, #0]
 801a000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a002:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801a004:	69fb      	ldr	r3, [r7, #28]
 801a006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a008:	601a      	str	r2, [r3, #0]
 801a00a:	e009      	b.n	801a020 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801a00c:	6a3b      	ldr	r3, [r7, #32]
 801a00e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a010:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801a012:	6a3b      	ldr	r3, [r7, #32]
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	623b      	str	r3, [r7, #32]
 801a018:	e002      	b.n	801a020 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801a01a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a01c:	f7fb ff01 	bl	8015e22 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a024:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801a026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d012      	beq.n	801a052 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801a02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a02e:	68db      	ldr	r3, [r3, #12]
 801a030:	685b      	ldr	r3, [r3, #4]
 801a032:	4618      	mov	r0, r3
 801a034:	f7f8 fe43 	bl	8012cbe <lwip_htonl>
 801a038:	4602      	mov	r2, r0
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a03e:	1ad3      	subs	r3, r2, r3
 801a040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a042:	8912      	ldrh	r2, [r2, #8]
 801a044:	4413      	add	r3, r2
  while (seg != NULL &&
 801a046:	69ba      	ldr	r2, [r7, #24]
 801a048:	429a      	cmp	r2, r3
 801a04a:	f4bf aed9 	bcs.w	8019e00 <tcp_output+0x160>
 801a04e:	e000      	b.n	801a052 <tcp_output+0x3b2>
      break;
 801a050:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a056:	2b00      	cmp	r3, #0
 801a058:	d108      	bne.n	801a06c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	2200      	movs	r2, #0
 801a05e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801a062:	e004      	b.n	801a06e <tcp_output+0x3ce>
    goto output_done;
 801a064:	bf00      	nop
 801a066:	e002      	b.n	801a06e <tcp_output+0x3ce>
    goto output_done;
 801a068:	bf00      	nop
 801a06a:	e000      	b.n	801a06e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801a06c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	8b5b      	ldrh	r3, [r3, #26]
 801a072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801a076:	b29a      	uxth	r2, r3
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801a07c:	2300      	movs	r3, #0
}
 801a07e:	4618      	mov	r0, r3
 801a080:	3728      	adds	r7, #40	; 0x28
 801a082:	46bd      	mov	sp, r7
 801a084:	bdb0      	pop	{r4, r5, r7, pc}
 801a086:	bf00      	nop

0801a088 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801a088:	b580      	push	{r7, lr}
 801a08a:	b082      	sub	sp, #8
 801a08c:	af00      	add	r7, sp, #0
 801a08e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	2b00      	cmp	r3, #0
 801a094:	d106      	bne.n	801a0a4 <tcp_output_segment_busy+0x1c>
 801a096:	4b09      	ldr	r3, [pc, #36]	; (801a0bc <tcp_output_segment_busy+0x34>)
 801a098:	f240 529a 	movw	r2, #1434	; 0x59a
 801a09c:	4908      	ldr	r1, [pc, #32]	; (801a0c0 <tcp_output_segment_busy+0x38>)
 801a09e:	4809      	ldr	r0, [pc, #36]	; (801a0c4 <tcp_output_segment_busy+0x3c>)
 801a0a0:	f007 fb3a 	bl	8021718 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	685b      	ldr	r3, [r3, #4]
 801a0a8:	7b9b      	ldrb	r3, [r3, #14]
 801a0aa:	2b01      	cmp	r3, #1
 801a0ac:	d001      	beq.n	801a0b2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801a0ae:	2301      	movs	r3, #1
 801a0b0:	e000      	b.n	801a0b4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801a0b2:	2300      	movs	r3, #0
}
 801a0b4:	4618      	mov	r0, r3
 801a0b6:	3708      	adds	r7, #8
 801a0b8:	46bd      	mov	sp, r7
 801a0ba:	bd80      	pop	{r7, pc}
 801a0bc:	08025ad4 	.word	0x08025ad4
 801a0c0:	08026070 	.word	0x08026070
 801a0c4:	08025b28 	.word	0x08025b28

0801a0c8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801a0c8:	b5b0      	push	{r4, r5, r7, lr}
 801a0ca:	b08c      	sub	sp, #48	; 0x30
 801a0cc:	af04      	add	r7, sp, #16
 801a0ce:	60f8      	str	r0, [r7, #12]
 801a0d0:	60b9      	str	r1, [r7, #8]
 801a0d2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801a0d4:	68fb      	ldr	r3, [r7, #12]
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d106      	bne.n	801a0e8 <tcp_output_segment+0x20>
 801a0da:	4b64      	ldr	r3, [pc, #400]	; (801a26c <tcp_output_segment+0x1a4>)
 801a0dc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801a0e0:	4963      	ldr	r1, [pc, #396]	; (801a270 <tcp_output_segment+0x1a8>)
 801a0e2:	4864      	ldr	r0, [pc, #400]	; (801a274 <tcp_output_segment+0x1ac>)
 801a0e4:	f007 fb18 	bl	8021718 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801a0e8:	68bb      	ldr	r3, [r7, #8]
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d106      	bne.n	801a0fc <tcp_output_segment+0x34>
 801a0ee:	4b5f      	ldr	r3, [pc, #380]	; (801a26c <tcp_output_segment+0x1a4>)
 801a0f0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801a0f4:	4960      	ldr	r1, [pc, #384]	; (801a278 <tcp_output_segment+0x1b0>)
 801a0f6:	485f      	ldr	r0, [pc, #380]	; (801a274 <tcp_output_segment+0x1ac>)
 801a0f8:	f007 fb0e 	bl	8021718 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d106      	bne.n	801a110 <tcp_output_segment+0x48>
 801a102:	4b5a      	ldr	r3, [pc, #360]	; (801a26c <tcp_output_segment+0x1a4>)
 801a104:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801a108:	495c      	ldr	r1, [pc, #368]	; (801a27c <tcp_output_segment+0x1b4>)
 801a10a:	485a      	ldr	r0, [pc, #360]	; (801a274 <tcp_output_segment+0x1ac>)
 801a10c:	f007 fb04 	bl	8021718 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801a110:	68f8      	ldr	r0, [r7, #12]
 801a112:	f7ff ffb9 	bl	801a088 <tcp_output_segment_busy>
 801a116:	4603      	mov	r3, r0
 801a118:	2b00      	cmp	r3, #0
 801a11a:	d001      	beq.n	801a120 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801a11c:	2300      	movs	r3, #0
 801a11e:	e0a1      	b.n	801a264 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801a120:	68bb      	ldr	r3, [r7, #8]
 801a122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a124:	68fb      	ldr	r3, [r7, #12]
 801a126:	68dc      	ldr	r4, [r3, #12]
 801a128:	4610      	mov	r0, r2
 801a12a:	f7f8 fdc8 	bl	8012cbe <lwip_htonl>
 801a12e:	4603      	mov	r3, r0
 801a130:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801a132:	68bb      	ldr	r3, [r7, #8]
 801a134:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801a136:	68fb      	ldr	r3, [r7, #12]
 801a138:	68dc      	ldr	r4, [r3, #12]
 801a13a:	4610      	mov	r0, r2
 801a13c:	f7f8 fdaa 	bl	8012c94 <lwip_htons>
 801a140:	4603      	mov	r3, r0
 801a142:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a144:	68bb      	ldr	r3, [r7, #8]
 801a146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a148:	68ba      	ldr	r2, [r7, #8]
 801a14a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801a14c:	441a      	add	r2, r3
 801a14e:	68bb      	ldr	r3, [r7, #8]
 801a150:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801a152:	68fb      	ldr	r3, [r7, #12]
 801a154:	68db      	ldr	r3, [r3, #12]
 801a156:	3314      	adds	r3, #20
 801a158:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801a15a:	68fb      	ldr	r3, [r7, #12]
 801a15c:	7a9b      	ldrb	r3, [r3, #10]
 801a15e:	f003 0301 	and.w	r3, r3, #1
 801a162:	2b00      	cmp	r3, #0
 801a164:	d015      	beq.n	801a192 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801a166:	68bb      	ldr	r3, [r7, #8]
 801a168:	3304      	adds	r3, #4
 801a16a:	461a      	mov	r2, r3
 801a16c:	6879      	ldr	r1, [r7, #4]
 801a16e:	f44f 7006 	mov.w	r0, #536	; 0x218
 801a172:	f7fc fa25 	bl	80165c0 <tcp_eff_send_mss_netif>
 801a176:	4603      	mov	r3, r0
 801a178:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801a17a:	8b7b      	ldrh	r3, [r7, #26]
 801a17c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801a180:	4618      	mov	r0, r3
 801a182:	f7f8 fd9c 	bl	8012cbe <lwip_htonl>
 801a186:	4602      	mov	r2, r0
 801a188:	69fb      	ldr	r3, [r7, #28]
 801a18a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801a18c:	69fb      	ldr	r3, [r7, #28]
 801a18e:	3304      	adds	r3, #4
 801a190:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801a192:	68bb      	ldr	r3, [r7, #8]
 801a194:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a198:	2b00      	cmp	r3, #0
 801a19a:	da02      	bge.n	801a1a2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801a19c:	68bb      	ldr	r3, [r7, #8]
 801a19e:	2200      	movs	r2, #0
 801a1a0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801a1a2:	68bb      	ldr	r3, [r7, #8]
 801a1a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	d10c      	bne.n	801a1c4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801a1aa:	4b35      	ldr	r3, [pc, #212]	; (801a280 <tcp_output_segment+0x1b8>)
 801a1ac:	681a      	ldr	r2, [r3, #0]
 801a1ae:	68bb      	ldr	r3, [r7, #8]
 801a1b0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801a1b2:	68fb      	ldr	r3, [r7, #12]
 801a1b4:	68db      	ldr	r3, [r3, #12]
 801a1b6:	685b      	ldr	r3, [r3, #4]
 801a1b8:	4618      	mov	r0, r3
 801a1ba:	f7f8 fd80 	bl	8012cbe <lwip_htonl>
 801a1be:	4602      	mov	r2, r0
 801a1c0:	68bb      	ldr	r3, [r7, #8]
 801a1c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801a1c4:	68fb      	ldr	r3, [r7, #12]
 801a1c6:	68da      	ldr	r2, [r3, #12]
 801a1c8:	68fb      	ldr	r3, [r7, #12]
 801a1ca:	685b      	ldr	r3, [r3, #4]
 801a1cc:	685b      	ldr	r3, [r3, #4]
 801a1ce:	1ad3      	subs	r3, r2, r3
 801a1d0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801a1d2:	68fb      	ldr	r3, [r7, #12]
 801a1d4:	685b      	ldr	r3, [r3, #4]
 801a1d6:	8959      	ldrh	r1, [r3, #10]
 801a1d8:	68fb      	ldr	r3, [r7, #12]
 801a1da:	685b      	ldr	r3, [r3, #4]
 801a1dc:	8b3a      	ldrh	r2, [r7, #24]
 801a1de:	1a8a      	subs	r2, r1, r2
 801a1e0:	b292      	uxth	r2, r2
 801a1e2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801a1e4:	68fb      	ldr	r3, [r7, #12]
 801a1e6:	685b      	ldr	r3, [r3, #4]
 801a1e8:	8919      	ldrh	r1, [r3, #8]
 801a1ea:	68fb      	ldr	r3, [r7, #12]
 801a1ec:	685b      	ldr	r3, [r3, #4]
 801a1ee:	8b3a      	ldrh	r2, [r7, #24]
 801a1f0:	1a8a      	subs	r2, r1, r2
 801a1f2:	b292      	uxth	r2, r2
 801a1f4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801a1f6:	68fb      	ldr	r3, [r7, #12]
 801a1f8:	685b      	ldr	r3, [r3, #4]
 801a1fa:	68fa      	ldr	r2, [r7, #12]
 801a1fc:	68d2      	ldr	r2, [r2, #12]
 801a1fe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801a200:	68fb      	ldr	r3, [r7, #12]
 801a202:	68db      	ldr	r3, [r3, #12]
 801a204:	2200      	movs	r2, #0
 801a206:	741a      	strb	r2, [r3, #16]
 801a208:	2200      	movs	r2, #0
 801a20a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801a20c:	68fb      	ldr	r3, [r7, #12]
 801a20e:	68da      	ldr	r2, [r3, #12]
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	7a9b      	ldrb	r3, [r3, #10]
 801a214:	f003 0301 	and.w	r3, r3, #1
 801a218:	2b00      	cmp	r3, #0
 801a21a:	d001      	beq.n	801a220 <tcp_output_segment+0x158>
 801a21c:	2318      	movs	r3, #24
 801a21e:	e000      	b.n	801a222 <tcp_output_segment+0x15a>
 801a220:	2314      	movs	r3, #20
 801a222:	4413      	add	r3, r2
 801a224:	69fa      	ldr	r2, [r7, #28]
 801a226:	429a      	cmp	r2, r3
 801a228:	d006      	beq.n	801a238 <tcp_output_segment+0x170>
 801a22a:	4b10      	ldr	r3, [pc, #64]	; (801a26c <tcp_output_segment+0x1a4>)
 801a22c:	f240 621c 	movw	r2, #1564	; 0x61c
 801a230:	4914      	ldr	r1, [pc, #80]	; (801a284 <tcp_output_segment+0x1bc>)
 801a232:	4810      	ldr	r0, [pc, #64]	; (801a274 <tcp_output_segment+0x1ac>)
 801a234:	f007 fa70 	bl	8021718 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801a238:	68fb      	ldr	r3, [r7, #12]
 801a23a:	6858      	ldr	r0, [r3, #4]
 801a23c:	68b9      	ldr	r1, [r7, #8]
 801a23e:	68bb      	ldr	r3, [r7, #8]
 801a240:	1d1c      	adds	r4, r3, #4
 801a242:	68bb      	ldr	r3, [r7, #8]
 801a244:	7add      	ldrb	r5, [r3, #11]
 801a246:	68bb      	ldr	r3, [r7, #8]
 801a248:	7a9b      	ldrb	r3, [r3, #10]
 801a24a:	687a      	ldr	r2, [r7, #4]
 801a24c:	9202      	str	r2, [sp, #8]
 801a24e:	2206      	movs	r2, #6
 801a250:	9201      	str	r2, [sp, #4]
 801a252:	9300      	str	r3, [sp, #0]
 801a254:	462b      	mov	r3, r5
 801a256:	4622      	mov	r2, r4
 801a258:	f004 fc3e 	bl	801ead8 <ip4_output_if>
 801a25c:	4603      	mov	r3, r0
 801a25e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801a260:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a264:	4618      	mov	r0, r3
 801a266:	3720      	adds	r7, #32
 801a268:	46bd      	mov	sp, r7
 801a26a:	bdb0      	pop	{r4, r5, r7, pc}
 801a26c:	08025ad4 	.word	0x08025ad4
 801a270:	08026098 	.word	0x08026098
 801a274:	08025b28 	.word	0x08025b28
 801a278:	080260b8 	.word	0x080260b8
 801a27c:	080260d8 	.word	0x080260d8
 801a280:	20012350 	.word	0x20012350
 801a284:	080260fc 	.word	0x080260fc

0801a288 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801a288:	b5b0      	push	{r4, r5, r7, lr}
 801a28a:	b084      	sub	sp, #16
 801a28c:	af00      	add	r7, sp, #0
 801a28e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	2b00      	cmp	r3, #0
 801a294:	d106      	bne.n	801a2a4 <tcp_rexmit_rto_prepare+0x1c>
 801a296:	4b31      	ldr	r3, [pc, #196]	; (801a35c <tcp_rexmit_rto_prepare+0xd4>)
 801a298:	f240 6263 	movw	r2, #1635	; 0x663
 801a29c:	4930      	ldr	r1, [pc, #192]	; (801a360 <tcp_rexmit_rto_prepare+0xd8>)
 801a29e:	4831      	ldr	r0, [pc, #196]	; (801a364 <tcp_rexmit_rto_prepare+0xdc>)
 801a2a0:	f007 fa3a 	bl	8021718 <iprintf>

  if (pcb->unacked == NULL) {
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	d102      	bne.n	801a2b2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801a2ac:	f06f 0305 	mvn.w	r3, #5
 801a2b0:	e050      	b.n	801a354 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a2b6:	60fb      	str	r3, [r7, #12]
 801a2b8:	e00b      	b.n	801a2d2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801a2ba:	68f8      	ldr	r0, [r7, #12]
 801a2bc:	f7ff fee4 	bl	801a088 <tcp_output_segment_busy>
 801a2c0:	4603      	mov	r3, r0
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d002      	beq.n	801a2cc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801a2c6:	f06f 0305 	mvn.w	r3, #5
 801a2ca:	e043      	b.n	801a354 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a2cc:	68fb      	ldr	r3, [r7, #12]
 801a2ce:	681b      	ldr	r3, [r3, #0]
 801a2d0:	60fb      	str	r3, [r7, #12]
 801a2d2:	68fb      	ldr	r3, [r7, #12]
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d1ef      	bne.n	801a2ba <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801a2da:	68f8      	ldr	r0, [r7, #12]
 801a2dc:	f7ff fed4 	bl	801a088 <tcp_output_segment_busy>
 801a2e0:	4603      	mov	r3, r0
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	d002      	beq.n	801a2ec <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801a2e6:	f06f 0305 	mvn.w	r3, #5
 801a2ea:	e033      	b.n	801a354 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801a2f0:	68fb      	ldr	r3, [r7, #12]
 801a2f2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	2200      	movs	r2, #0
 801a300:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	8b5b      	ldrh	r3, [r3, #26]
 801a306:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a30a:	b29a      	uxth	r2, r3
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a310:	68fb      	ldr	r3, [r7, #12]
 801a312:	68db      	ldr	r3, [r3, #12]
 801a314:	685b      	ldr	r3, [r3, #4]
 801a316:	4618      	mov	r0, r3
 801a318:	f7f8 fcd1 	bl	8012cbe <lwip_htonl>
 801a31c:	4604      	mov	r4, r0
 801a31e:	68fb      	ldr	r3, [r7, #12]
 801a320:	891b      	ldrh	r3, [r3, #8]
 801a322:	461d      	mov	r5, r3
 801a324:	68fb      	ldr	r3, [r7, #12]
 801a326:	68db      	ldr	r3, [r3, #12]
 801a328:	899b      	ldrh	r3, [r3, #12]
 801a32a:	b29b      	uxth	r3, r3
 801a32c:	4618      	mov	r0, r3
 801a32e:	f7f8 fcb1 	bl	8012c94 <lwip_htons>
 801a332:	4603      	mov	r3, r0
 801a334:	b2db      	uxtb	r3, r3
 801a336:	f003 0303 	and.w	r3, r3, #3
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	d001      	beq.n	801a342 <tcp_rexmit_rto_prepare+0xba>
 801a33e:	2301      	movs	r3, #1
 801a340:	e000      	b.n	801a344 <tcp_rexmit_rto_prepare+0xbc>
 801a342:	2300      	movs	r3, #0
 801a344:	442b      	add	r3, r5
 801a346:	18e2      	adds	r2, r4, r3
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	2200      	movs	r2, #0
 801a350:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801a352:	2300      	movs	r3, #0
}
 801a354:	4618      	mov	r0, r3
 801a356:	3710      	adds	r7, #16
 801a358:	46bd      	mov	sp, r7
 801a35a:	bdb0      	pop	{r4, r5, r7, pc}
 801a35c:	08025ad4 	.word	0x08025ad4
 801a360:	08026110 	.word	0x08026110
 801a364:	08025b28 	.word	0x08025b28

0801a368 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801a368:	b580      	push	{r7, lr}
 801a36a:	b082      	sub	sp, #8
 801a36c:	af00      	add	r7, sp, #0
 801a36e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	2b00      	cmp	r3, #0
 801a374:	d106      	bne.n	801a384 <tcp_rexmit_rto_commit+0x1c>
 801a376:	4b0d      	ldr	r3, [pc, #52]	; (801a3ac <tcp_rexmit_rto_commit+0x44>)
 801a378:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801a37c:	490c      	ldr	r1, [pc, #48]	; (801a3b0 <tcp_rexmit_rto_commit+0x48>)
 801a37e:	480d      	ldr	r0, [pc, #52]	; (801a3b4 <tcp_rexmit_rto_commit+0x4c>)
 801a380:	f007 f9ca 	bl	8021718 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a38a:	2bff      	cmp	r3, #255	; 0xff
 801a38c:	d007      	beq.n	801a39e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801a38e:	687b      	ldr	r3, [r7, #4]
 801a390:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a394:	3301      	adds	r3, #1
 801a396:	b2da      	uxtb	r2, r3
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801a39e:	6878      	ldr	r0, [r7, #4]
 801a3a0:	f7ff fc7e 	bl	8019ca0 <tcp_output>
}
 801a3a4:	bf00      	nop
 801a3a6:	3708      	adds	r7, #8
 801a3a8:	46bd      	mov	sp, r7
 801a3aa:	bd80      	pop	{r7, pc}
 801a3ac:	08025ad4 	.word	0x08025ad4
 801a3b0:	08026134 	.word	0x08026134
 801a3b4:	08025b28 	.word	0x08025b28

0801a3b8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801a3b8:	b580      	push	{r7, lr}
 801a3ba:	b082      	sub	sp, #8
 801a3bc:	af00      	add	r7, sp, #0
 801a3be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	d106      	bne.n	801a3d4 <tcp_rexmit_rto+0x1c>
 801a3c6:	4b0a      	ldr	r3, [pc, #40]	; (801a3f0 <tcp_rexmit_rto+0x38>)
 801a3c8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801a3cc:	4909      	ldr	r1, [pc, #36]	; (801a3f4 <tcp_rexmit_rto+0x3c>)
 801a3ce:	480a      	ldr	r0, [pc, #40]	; (801a3f8 <tcp_rexmit_rto+0x40>)
 801a3d0:	f007 f9a2 	bl	8021718 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801a3d4:	6878      	ldr	r0, [r7, #4]
 801a3d6:	f7ff ff57 	bl	801a288 <tcp_rexmit_rto_prepare>
 801a3da:	4603      	mov	r3, r0
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d102      	bne.n	801a3e6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801a3e0:	6878      	ldr	r0, [r7, #4]
 801a3e2:	f7ff ffc1 	bl	801a368 <tcp_rexmit_rto_commit>
  }
}
 801a3e6:	bf00      	nop
 801a3e8:	3708      	adds	r7, #8
 801a3ea:	46bd      	mov	sp, r7
 801a3ec:	bd80      	pop	{r7, pc}
 801a3ee:	bf00      	nop
 801a3f0:	08025ad4 	.word	0x08025ad4
 801a3f4:	08026158 	.word	0x08026158
 801a3f8:	08025b28 	.word	0x08025b28

0801a3fc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801a3fc:	b590      	push	{r4, r7, lr}
 801a3fe:	b085      	sub	sp, #20
 801a400:	af00      	add	r7, sp, #0
 801a402:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	2b00      	cmp	r3, #0
 801a408:	d106      	bne.n	801a418 <tcp_rexmit+0x1c>
 801a40a:	4b2f      	ldr	r3, [pc, #188]	; (801a4c8 <tcp_rexmit+0xcc>)
 801a40c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801a410:	492e      	ldr	r1, [pc, #184]	; (801a4cc <tcp_rexmit+0xd0>)
 801a412:	482f      	ldr	r0, [pc, #188]	; (801a4d0 <tcp_rexmit+0xd4>)
 801a414:	f007 f980 	bl	8021718 <iprintf>

  if (pcb->unacked == NULL) {
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d102      	bne.n	801a426 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801a420:	f06f 0305 	mvn.w	r3, #5
 801a424:	e04c      	b.n	801a4c0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a42a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801a42c:	68b8      	ldr	r0, [r7, #8]
 801a42e:	f7ff fe2b 	bl	801a088 <tcp_output_segment_busy>
 801a432:	4603      	mov	r3, r0
 801a434:	2b00      	cmp	r3, #0
 801a436:	d002      	beq.n	801a43e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801a438:	f06f 0305 	mvn.w	r3, #5
 801a43c:	e040      	b.n	801a4c0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801a43e:	68bb      	ldr	r3, [r7, #8]
 801a440:	681a      	ldr	r2, [r3, #0]
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	336c      	adds	r3, #108	; 0x6c
 801a44a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a44c:	e002      	b.n	801a454 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801a44e:	68fb      	ldr	r3, [r7, #12]
 801a450:	681b      	ldr	r3, [r3, #0]
 801a452:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a454:	68fb      	ldr	r3, [r7, #12]
 801a456:	681b      	ldr	r3, [r3, #0]
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d011      	beq.n	801a480 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a45c:	68fb      	ldr	r3, [r7, #12]
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	68db      	ldr	r3, [r3, #12]
 801a462:	685b      	ldr	r3, [r3, #4]
 801a464:	4618      	mov	r0, r3
 801a466:	f7f8 fc2a 	bl	8012cbe <lwip_htonl>
 801a46a:	4604      	mov	r4, r0
 801a46c:	68bb      	ldr	r3, [r7, #8]
 801a46e:	68db      	ldr	r3, [r3, #12]
 801a470:	685b      	ldr	r3, [r3, #4]
 801a472:	4618      	mov	r0, r3
 801a474:	f7f8 fc23 	bl	8012cbe <lwip_htonl>
 801a478:	4603      	mov	r3, r0
 801a47a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	dbe6      	blt.n	801a44e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801a480:	68fb      	ldr	r3, [r7, #12]
 801a482:	681a      	ldr	r2, [r3, #0]
 801a484:	68bb      	ldr	r3, [r7, #8]
 801a486:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801a488:	68fb      	ldr	r3, [r7, #12]
 801a48a:	68ba      	ldr	r2, [r7, #8]
 801a48c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801a48e:	68bb      	ldr	r3, [r7, #8]
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	2b00      	cmp	r3, #0
 801a494:	d103      	bne.n	801a49e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	2200      	movs	r2, #0
 801a49a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a4a4:	2bff      	cmp	r3, #255	; 0xff
 801a4a6:	d007      	beq.n	801a4b8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a4ae:	3301      	adds	r3, #1
 801a4b0:	b2da      	uxtb	r2, r3
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	2200      	movs	r2, #0
 801a4bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801a4be:	2300      	movs	r3, #0
}
 801a4c0:	4618      	mov	r0, r3
 801a4c2:	3714      	adds	r7, #20
 801a4c4:	46bd      	mov	sp, r7
 801a4c6:	bd90      	pop	{r4, r7, pc}
 801a4c8:	08025ad4 	.word	0x08025ad4
 801a4cc:	08026174 	.word	0x08026174
 801a4d0:	08025b28 	.word	0x08025b28

0801a4d4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801a4d4:	b580      	push	{r7, lr}
 801a4d6:	b082      	sub	sp, #8
 801a4d8:	af00      	add	r7, sp, #0
 801a4da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d106      	bne.n	801a4f0 <tcp_rexmit_fast+0x1c>
 801a4e2:	4b2a      	ldr	r3, [pc, #168]	; (801a58c <tcp_rexmit_fast+0xb8>)
 801a4e4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801a4e8:	4929      	ldr	r1, [pc, #164]	; (801a590 <tcp_rexmit_fast+0xbc>)
 801a4ea:	482a      	ldr	r0, [pc, #168]	; (801a594 <tcp_rexmit_fast+0xc0>)
 801a4ec:	f007 f914 	bl	8021718 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d044      	beq.n	801a582 <tcp_rexmit_fast+0xae>
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	8b5b      	ldrh	r3, [r3, #26]
 801a4fc:	f003 0304 	and.w	r3, r3, #4
 801a500:	2b00      	cmp	r3, #0
 801a502:	d13e      	bne.n	801a582 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801a504:	6878      	ldr	r0, [r7, #4]
 801a506:	f7ff ff79 	bl	801a3fc <tcp_rexmit>
 801a50a:	4603      	mov	r3, r0
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d138      	bne.n	801a582 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a51c:	4293      	cmp	r3, r2
 801a51e:	bf28      	it	cs
 801a520:	4613      	movcs	r3, r2
 801a522:	b29b      	uxth	r3, r3
 801a524:	0fda      	lsrs	r2, r3, #31
 801a526:	4413      	add	r3, r2
 801a528:	105b      	asrs	r3, r3, #1
 801a52a:	b29a      	uxth	r2, r3
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801a538:	461a      	mov	r2, r3
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a53e:	005b      	lsls	r3, r3, #1
 801a540:	429a      	cmp	r2, r3
 801a542:	d206      	bcs.n	801a552 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a548:	005b      	lsls	r3, r3, #1
 801a54a:	b29a      	uxth	r2, r3
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a55c:	4619      	mov	r1, r3
 801a55e:	0049      	lsls	r1, r1, #1
 801a560:	440b      	add	r3, r1
 801a562:	b29b      	uxth	r3, r3
 801a564:	4413      	add	r3, r2
 801a566:	b29a      	uxth	r2, r3
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	8b5b      	ldrh	r3, [r3, #26]
 801a572:	f043 0304 	orr.w	r3, r3, #4
 801a576:	b29a      	uxth	r2, r3
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	2200      	movs	r2, #0
 801a580:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801a582:	bf00      	nop
 801a584:	3708      	adds	r7, #8
 801a586:	46bd      	mov	sp, r7
 801a588:	bd80      	pop	{r7, pc}
 801a58a:	bf00      	nop
 801a58c:	08025ad4 	.word	0x08025ad4
 801a590:	0802618c 	.word	0x0802618c
 801a594:	08025b28 	.word	0x08025b28

0801a598 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801a598:	b580      	push	{r7, lr}
 801a59a:	b086      	sub	sp, #24
 801a59c:	af00      	add	r7, sp, #0
 801a59e:	60f8      	str	r0, [r7, #12]
 801a5a0:	607b      	str	r3, [r7, #4]
 801a5a2:	460b      	mov	r3, r1
 801a5a4:	817b      	strh	r3, [r7, #10]
 801a5a6:	4613      	mov	r3, r2
 801a5a8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a5aa:	897a      	ldrh	r2, [r7, #10]
 801a5ac:	893b      	ldrh	r3, [r7, #8]
 801a5ae:	4413      	add	r3, r2
 801a5b0:	b29b      	uxth	r3, r3
 801a5b2:	3314      	adds	r3, #20
 801a5b4:	b29b      	uxth	r3, r3
 801a5b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a5ba:	4619      	mov	r1, r3
 801a5bc:	2022      	movs	r0, #34	; 0x22
 801a5be:	f7f9 fc83 	bl	8013ec8 <pbuf_alloc>
 801a5c2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801a5c4:	697b      	ldr	r3, [r7, #20]
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d04d      	beq.n	801a666 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a5ca:	897b      	ldrh	r3, [r7, #10]
 801a5cc:	3313      	adds	r3, #19
 801a5ce:	697a      	ldr	r2, [r7, #20]
 801a5d0:	8952      	ldrh	r2, [r2, #10]
 801a5d2:	4293      	cmp	r3, r2
 801a5d4:	db06      	blt.n	801a5e4 <tcp_output_alloc_header_common+0x4c>
 801a5d6:	4b26      	ldr	r3, [pc, #152]	; (801a670 <tcp_output_alloc_header_common+0xd8>)
 801a5d8:	f240 7223 	movw	r2, #1827	; 0x723
 801a5dc:	4925      	ldr	r1, [pc, #148]	; (801a674 <tcp_output_alloc_header_common+0xdc>)
 801a5de:	4826      	ldr	r0, [pc, #152]	; (801a678 <tcp_output_alloc_header_common+0xe0>)
 801a5e0:	f007 f89a 	bl	8021718 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801a5e4:	697b      	ldr	r3, [r7, #20]
 801a5e6:	685b      	ldr	r3, [r3, #4]
 801a5e8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801a5ea:	8c3b      	ldrh	r3, [r7, #32]
 801a5ec:	4618      	mov	r0, r3
 801a5ee:	f7f8 fb51 	bl	8012c94 <lwip_htons>
 801a5f2:	4603      	mov	r3, r0
 801a5f4:	461a      	mov	r2, r3
 801a5f6:	693b      	ldr	r3, [r7, #16]
 801a5f8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801a5fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a5fc:	4618      	mov	r0, r3
 801a5fe:	f7f8 fb49 	bl	8012c94 <lwip_htons>
 801a602:	4603      	mov	r3, r0
 801a604:	461a      	mov	r2, r3
 801a606:	693b      	ldr	r3, [r7, #16]
 801a608:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801a60a:	693b      	ldr	r3, [r7, #16]
 801a60c:	687a      	ldr	r2, [r7, #4]
 801a60e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801a610:	68f8      	ldr	r0, [r7, #12]
 801a612:	f7f8 fb54 	bl	8012cbe <lwip_htonl>
 801a616:	4602      	mov	r2, r0
 801a618:	693b      	ldr	r3, [r7, #16]
 801a61a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801a61c:	897b      	ldrh	r3, [r7, #10]
 801a61e:	089b      	lsrs	r3, r3, #2
 801a620:	b29b      	uxth	r3, r3
 801a622:	3305      	adds	r3, #5
 801a624:	b29b      	uxth	r3, r3
 801a626:	031b      	lsls	r3, r3, #12
 801a628:	b29a      	uxth	r2, r3
 801a62a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a62e:	b29b      	uxth	r3, r3
 801a630:	4313      	orrs	r3, r2
 801a632:	b29b      	uxth	r3, r3
 801a634:	4618      	mov	r0, r3
 801a636:	f7f8 fb2d 	bl	8012c94 <lwip_htons>
 801a63a:	4603      	mov	r3, r0
 801a63c:	461a      	mov	r2, r3
 801a63e:	693b      	ldr	r3, [r7, #16]
 801a640:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801a642:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a644:	4618      	mov	r0, r3
 801a646:	f7f8 fb25 	bl	8012c94 <lwip_htons>
 801a64a:	4603      	mov	r3, r0
 801a64c:	461a      	mov	r2, r3
 801a64e:	693b      	ldr	r3, [r7, #16]
 801a650:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801a652:	693b      	ldr	r3, [r7, #16]
 801a654:	2200      	movs	r2, #0
 801a656:	741a      	strb	r2, [r3, #16]
 801a658:	2200      	movs	r2, #0
 801a65a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801a65c:	693b      	ldr	r3, [r7, #16]
 801a65e:	2200      	movs	r2, #0
 801a660:	749a      	strb	r2, [r3, #18]
 801a662:	2200      	movs	r2, #0
 801a664:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801a666:	697b      	ldr	r3, [r7, #20]
}
 801a668:	4618      	mov	r0, r3
 801a66a:	3718      	adds	r7, #24
 801a66c:	46bd      	mov	sp, r7
 801a66e:	bd80      	pop	{r7, pc}
 801a670:	08025ad4 	.word	0x08025ad4
 801a674:	080261ac 	.word	0x080261ac
 801a678:	08025b28 	.word	0x08025b28

0801a67c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801a67c:	b5b0      	push	{r4, r5, r7, lr}
 801a67e:	b08a      	sub	sp, #40	; 0x28
 801a680:	af04      	add	r7, sp, #16
 801a682:	60f8      	str	r0, [r7, #12]
 801a684:	607b      	str	r3, [r7, #4]
 801a686:	460b      	mov	r3, r1
 801a688:	817b      	strh	r3, [r7, #10]
 801a68a:	4613      	mov	r3, r2
 801a68c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801a68e:	68fb      	ldr	r3, [r7, #12]
 801a690:	2b00      	cmp	r3, #0
 801a692:	d106      	bne.n	801a6a2 <tcp_output_alloc_header+0x26>
 801a694:	4b15      	ldr	r3, [pc, #84]	; (801a6ec <tcp_output_alloc_header+0x70>)
 801a696:	f240 7242 	movw	r2, #1858	; 0x742
 801a69a:	4915      	ldr	r1, [pc, #84]	; (801a6f0 <tcp_output_alloc_header+0x74>)
 801a69c:	4815      	ldr	r0, [pc, #84]	; (801a6f4 <tcp_output_alloc_header+0x78>)
 801a69e:	f007 f83b 	bl	8021718 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801a6a2:	68fb      	ldr	r3, [r7, #12]
 801a6a4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801a6a6:	68fb      	ldr	r3, [r7, #12]
 801a6a8:	8adb      	ldrh	r3, [r3, #22]
 801a6aa:	68fa      	ldr	r2, [r7, #12]
 801a6ac:	8b12      	ldrh	r2, [r2, #24]
 801a6ae:	68f9      	ldr	r1, [r7, #12]
 801a6b0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801a6b2:	893d      	ldrh	r5, [r7, #8]
 801a6b4:	897c      	ldrh	r4, [r7, #10]
 801a6b6:	9103      	str	r1, [sp, #12]
 801a6b8:	2110      	movs	r1, #16
 801a6ba:	9102      	str	r1, [sp, #8]
 801a6bc:	9201      	str	r2, [sp, #4]
 801a6be:	9300      	str	r3, [sp, #0]
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	462a      	mov	r2, r5
 801a6c4:	4621      	mov	r1, r4
 801a6c6:	f7ff ff67 	bl	801a598 <tcp_output_alloc_header_common>
 801a6ca:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801a6cc:	697b      	ldr	r3, [r7, #20]
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	d006      	beq.n	801a6e0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a6d2:	68fb      	ldr	r3, [r7, #12]
 801a6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6d6:	68fa      	ldr	r2, [r7, #12]
 801a6d8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801a6da:	441a      	add	r2, r3
 801a6dc:	68fb      	ldr	r3, [r7, #12]
 801a6de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801a6e0:	697b      	ldr	r3, [r7, #20]
}
 801a6e2:	4618      	mov	r0, r3
 801a6e4:	3718      	adds	r7, #24
 801a6e6:	46bd      	mov	sp, r7
 801a6e8:	bdb0      	pop	{r4, r5, r7, pc}
 801a6ea:	bf00      	nop
 801a6ec:	08025ad4 	.word	0x08025ad4
 801a6f0:	080261dc 	.word	0x080261dc
 801a6f4:	08025b28 	.word	0x08025b28

0801a6f8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801a6f8:	b580      	push	{r7, lr}
 801a6fa:	b088      	sub	sp, #32
 801a6fc:	af00      	add	r7, sp, #0
 801a6fe:	60f8      	str	r0, [r7, #12]
 801a700:	60b9      	str	r1, [r7, #8]
 801a702:	4611      	mov	r1, r2
 801a704:	461a      	mov	r2, r3
 801a706:	460b      	mov	r3, r1
 801a708:	71fb      	strb	r3, [r7, #7]
 801a70a:	4613      	mov	r3, r2
 801a70c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801a70e:	2300      	movs	r3, #0
 801a710:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801a712:	68bb      	ldr	r3, [r7, #8]
 801a714:	2b00      	cmp	r3, #0
 801a716:	d106      	bne.n	801a726 <tcp_output_fill_options+0x2e>
 801a718:	4b12      	ldr	r3, [pc, #72]	; (801a764 <tcp_output_fill_options+0x6c>)
 801a71a:	f240 7256 	movw	r2, #1878	; 0x756
 801a71e:	4912      	ldr	r1, [pc, #72]	; (801a768 <tcp_output_fill_options+0x70>)
 801a720:	4812      	ldr	r0, [pc, #72]	; (801a76c <tcp_output_fill_options+0x74>)
 801a722:	f006 fff9 	bl	8021718 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801a726:	68bb      	ldr	r3, [r7, #8]
 801a728:	685b      	ldr	r3, [r3, #4]
 801a72a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801a72c:	69bb      	ldr	r3, [r7, #24]
 801a72e:	3314      	adds	r3, #20
 801a730:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801a732:	8bfb      	ldrh	r3, [r7, #30]
 801a734:	009b      	lsls	r3, r3, #2
 801a736:	461a      	mov	r2, r3
 801a738:	79fb      	ldrb	r3, [r7, #7]
 801a73a:	009b      	lsls	r3, r3, #2
 801a73c:	f003 0304 	and.w	r3, r3, #4
 801a740:	4413      	add	r3, r2
 801a742:	3314      	adds	r3, #20
 801a744:	69ba      	ldr	r2, [r7, #24]
 801a746:	4413      	add	r3, r2
 801a748:	697a      	ldr	r2, [r7, #20]
 801a74a:	429a      	cmp	r2, r3
 801a74c:	d006      	beq.n	801a75c <tcp_output_fill_options+0x64>
 801a74e:	4b05      	ldr	r3, [pc, #20]	; (801a764 <tcp_output_fill_options+0x6c>)
 801a750:	f240 7275 	movw	r2, #1909	; 0x775
 801a754:	4906      	ldr	r1, [pc, #24]	; (801a770 <tcp_output_fill_options+0x78>)
 801a756:	4805      	ldr	r0, [pc, #20]	; (801a76c <tcp_output_fill_options+0x74>)
 801a758:	f006 ffde 	bl	8021718 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801a75c:	bf00      	nop
 801a75e:	3720      	adds	r7, #32
 801a760:	46bd      	mov	sp, r7
 801a762:	bd80      	pop	{r7, pc}
 801a764:	08025ad4 	.word	0x08025ad4
 801a768:	08026204 	.word	0x08026204
 801a76c:	08025b28 	.word	0x08025b28
 801a770:	080260fc 	.word	0x080260fc

0801a774 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801a774:	b580      	push	{r7, lr}
 801a776:	b08a      	sub	sp, #40	; 0x28
 801a778:	af04      	add	r7, sp, #16
 801a77a:	60f8      	str	r0, [r7, #12]
 801a77c:	60b9      	str	r1, [r7, #8]
 801a77e:	607a      	str	r2, [r7, #4]
 801a780:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801a782:	68bb      	ldr	r3, [r7, #8]
 801a784:	2b00      	cmp	r3, #0
 801a786:	d106      	bne.n	801a796 <tcp_output_control_segment+0x22>
 801a788:	4b1c      	ldr	r3, [pc, #112]	; (801a7fc <tcp_output_control_segment+0x88>)
 801a78a:	f240 7287 	movw	r2, #1927	; 0x787
 801a78e:	491c      	ldr	r1, [pc, #112]	; (801a800 <tcp_output_control_segment+0x8c>)
 801a790:	481c      	ldr	r0, [pc, #112]	; (801a804 <tcp_output_control_segment+0x90>)
 801a792:	f006 ffc1 	bl	8021718 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801a796:	683a      	ldr	r2, [r7, #0]
 801a798:	6879      	ldr	r1, [r7, #4]
 801a79a:	68f8      	ldr	r0, [r7, #12]
 801a79c:	f7fe fae8 	bl	8018d70 <tcp_route>
 801a7a0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801a7a2:	693b      	ldr	r3, [r7, #16]
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d102      	bne.n	801a7ae <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801a7a8:	23fc      	movs	r3, #252	; 0xfc
 801a7aa:	75fb      	strb	r3, [r7, #23]
 801a7ac:	e01c      	b.n	801a7e8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801a7ae:	68fb      	ldr	r3, [r7, #12]
 801a7b0:	2b00      	cmp	r3, #0
 801a7b2:	d006      	beq.n	801a7c2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801a7b4:	68fb      	ldr	r3, [r7, #12]
 801a7b6:	7adb      	ldrb	r3, [r3, #11]
 801a7b8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801a7ba:	68fb      	ldr	r3, [r7, #12]
 801a7bc:	7a9b      	ldrb	r3, [r3, #10]
 801a7be:	757b      	strb	r3, [r7, #21]
 801a7c0:	e003      	b.n	801a7ca <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801a7c2:	23ff      	movs	r3, #255	; 0xff
 801a7c4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801a7c6:	2300      	movs	r3, #0
 801a7c8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a7ca:	7dba      	ldrb	r2, [r7, #22]
 801a7cc:	693b      	ldr	r3, [r7, #16]
 801a7ce:	9302      	str	r3, [sp, #8]
 801a7d0:	2306      	movs	r3, #6
 801a7d2:	9301      	str	r3, [sp, #4]
 801a7d4:	7d7b      	ldrb	r3, [r7, #21]
 801a7d6:	9300      	str	r3, [sp, #0]
 801a7d8:	4613      	mov	r3, r2
 801a7da:	683a      	ldr	r2, [r7, #0]
 801a7dc:	6879      	ldr	r1, [r7, #4]
 801a7de:	68b8      	ldr	r0, [r7, #8]
 801a7e0:	f004 f97a 	bl	801ead8 <ip4_output_if>
 801a7e4:	4603      	mov	r3, r0
 801a7e6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801a7e8:	68b8      	ldr	r0, [r7, #8]
 801a7ea:	f7f9 fe51 	bl	8014490 <pbuf_free>
  return err;
 801a7ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a7f2:	4618      	mov	r0, r3
 801a7f4:	3718      	adds	r7, #24
 801a7f6:	46bd      	mov	sp, r7
 801a7f8:	bd80      	pop	{r7, pc}
 801a7fa:	bf00      	nop
 801a7fc:	08025ad4 	.word	0x08025ad4
 801a800:	0802622c 	.word	0x0802622c
 801a804:	08025b28 	.word	0x08025b28

0801a808 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801a808:	b590      	push	{r4, r7, lr}
 801a80a:	b08b      	sub	sp, #44	; 0x2c
 801a80c:	af04      	add	r7, sp, #16
 801a80e:	60f8      	str	r0, [r7, #12]
 801a810:	60b9      	str	r1, [r7, #8]
 801a812:	607a      	str	r2, [r7, #4]
 801a814:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801a816:	683b      	ldr	r3, [r7, #0]
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d106      	bne.n	801a82a <tcp_rst+0x22>
 801a81c:	4b1f      	ldr	r3, [pc, #124]	; (801a89c <tcp_rst+0x94>)
 801a81e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801a822:	491f      	ldr	r1, [pc, #124]	; (801a8a0 <tcp_rst+0x98>)
 801a824:	481f      	ldr	r0, [pc, #124]	; (801a8a4 <tcp_rst+0x9c>)
 801a826:	f006 ff77 	bl	8021718 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801a82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d106      	bne.n	801a83e <tcp_rst+0x36>
 801a830:	4b1a      	ldr	r3, [pc, #104]	; (801a89c <tcp_rst+0x94>)
 801a832:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801a836:	491c      	ldr	r1, [pc, #112]	; (801a8a8 <tcp_rst+0xa0>)
 801a838:	481a      	ldr	r0, [pc, #104]	; (801a8a4 <tcp_rst+0x9c>)
 801a83a:	f006 ff6d 	bl	8021718 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a83e:	2300      	movs	r3, #0
 801a840:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801a842:	f246 0308 	movw	r3, #24584	; 0x6008
 801a846:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801a848:	7dfb      	ldrb	r3, [r7, #23]
 801a84a:	b29c      	uxth	r4, r3
 801a84c:	68b8      	ldr	r0, [r7, #8]
 801a84e:	f7f8 fa36 	bl	8012cbe <lwip_htonl>
 801a852:	4602      	mov	r2, r0
 801a854:	8abb      	ldrh	r3, [r7, #20]
 801a856:	9303      	str	r3, [sp, #12]
 801a858:	2314      	movs	r3, #20
 801a85a:	9302      	str	r3, [sp, #8]
 801a85c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801a85e:	9301      	str	r3, [sp, #4]
 801a860:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a862:	9300      	str	r3, [sp, #0]
 801a864:	4613      	mov	r3, r2
 801a866:	2200      	movs	r2, #0
 801a868:	4621      	mov	r1, r4
 801a86a:	6878      	ldr	r0, [r7, #4]
 801a86c:	f7ff fe94 	bl	801a598 <tcp_output_alloc_header_common>
 801a870:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801a872:	693b      	ldr	r3, [r7, #16]
 801a874:	2b00      	cmp	r3, #0
 801a876:	d00c      	beq.n	801a892 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a878:	7dfb      	ldrb	r3, [r7, #23]
 801a87a:	2200      	movs	r2, #0
 801a87c:	6939      	ldr	r1, [r7, #16]
 801a87e:	68f8      	ldr	r0, [r7, #12]
 801a880:	f7ff ff3a 	bl	801a6f8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801a884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a886:	683a      	ldr	r2, [r7, #0]
 801a888:	6939      	ldr	r1, [r7, #16]
 801a88a:	68f8      	ldr	r0, [r7, #12]
 801a88c:	f7ff ff72 	bl	801a774 <tcp_output_control_segment>
 801a890:	e000      	b.n	801a894 <tcp_rst+0x8c>
    return;
 801a892:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801a894:	371c      	adds	r7, #28
 801a896:	46bd      	mov	sp, r7
 801a898:	bd90      	pop	{r4, r7, pc}
 801a89a:	bf00      	nop
 801a89c:	08025ad4 	.word	0x08025ad4
 801a8a0:	08026258 	.word	0x08026258
 801a8a4:	08025b28 	.word	0x08025b28
 801a8a8:	08026274 	.word	0x08026274

0801a8ac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801a8ac:	b590      	push	{r4, r7, lr}
 801a8ae:	b087      	sub	sp, #28
 801a8b0:	af00      	add	r7, sp, #0
 801a8b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801a8b4:	2300      	movs	r3, #0
 801a8b6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801a8b8:	2300      	movs	r3, #0
 801a8ba:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	2b00      	cmp	r3, #0
 801a8c0:	d106      	bne.n	801a8d0 <tcp_send_empty_ack+0x24>
 801a8c2:	4b28      	ldr	r3, [pc, #160]	; (801a964 <tcp_send_empty_ack+0xb8>)
 801a8c4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801a8c8:	4927      	ldr	r1, [pc, #156]	; (801a968 <tcp_send_empty_ack+0xbc>)
 801a8ca:	4828      	ldr	r0, [pc, #160]	; (801a96c <tcp_send_empty_ack+0xc0>)
 801a8cc:	f006 ff24 	bl	8021718 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a8d0:	7dfb      	ldrb	r3, [r7, #23]
 801a8d2:	009b      	lsls	r3, r3, #2
 801a8d4:	b2db      	uxtb	r3, r3
 801a8d6:	f003 0304 	and.w	r3, r3, #4
 801a8da:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801a8dc:	7d7b      	ldrb	r3, [r7, #21]
 801a8de:	b29c      	uxth	r4, r3
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a8e4:	4618      	mov	r0, r3
 801a8e6:	f7f8 f9ea 	bl	8012cbe <lwip_htonl>
 801a8ea:	4603      	mov	r3, r0
 801a8ec:	2200      	movs	r2, #0
 801a8ee:	4621      	mov	r1, r4
 801a8f0:	6878      	ldr	r0, [r7, #4]
 801a8f2:	f7ff fec3 	bl	801a67c <tcp_output_alloc_header>
 801a8f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a8f8:	693b      	ldr	r3, [r7, #16]
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	d109      	bne.n	801a912 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	8b5b      	ldrh	r3, [r3, #26]
 801a902:	f043 0303 	orr.w	r3, r3, #3
 801a906:	b29a      	uxth	r2, r3
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801a90c:	f06f 0301 	mvn.w	r3, #1
 801a910:	e023      	b.n	801a95a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801a912:	7dbb      	ldrb	r3, [r7, #22]
 801a914:	7dfa      	ldrb	r2, [r7, #23]
 801a916:	6939      	ldr	r1, [r7, #16]
 801a918:	6878      	ldr	r0, [r7, #4]
 801a91a:	f7ff feed 	bl	801a6f8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a91e:	687a      	ldr	r2, [r7, #4]
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	3304      	adds	r3, #4
 801a924:	6939      	ldr	r1, [r7, #16]
 801a926:	6878      	ldr	r0, [r7, #4]
 801a928:	f7ff ff24 	bl	801a774 <tcp_output_control_segment>
 801a92c:	4603      	mov	r3, r0
 801a92e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801a930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a934:	2b00      	cmp	r3, #0
 801a936:	d007      	beq.n	801a948 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	8b5b      	ldrh	r3, [r3, #26]
 801a93c:	f043 0303 	orr.w	r3, r3, #3
 801a940:	b29a      	uxth	r2, r3
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	835a      	strh	r2, [r3, #26]
 801a946:	e006      	b.n	801a956 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	8b5b      	ldrh	r3, [r3, #26]
 801a94c:	f023 0303 	bic.w	r3, r3, #3
 801a950:	b29a      	uxth	r2, r3
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801a956:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a95a:	4618      	mov	r0, r3
 801a95c:	371c      	adds	r7, #28
 801a95e:	46bd      	mov	sp, r7
 801a960:	bd90      	pop	{r4, r7, pc}
 801a962:	bf00      	nop
 801a964:	08025ad4 	.word	0x08025ad4
 801a968:	08026290 	.word	0x08026290
 801a96c:	08025b28 	.word	0x08025b28

0801a970 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801a970:	b590      	push	{r4, r7, lr}
 801a972:	b087      	sub	sp, #28
 801a974:	af00      	add	r7, sp, #0
 801a976:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a978:	2300      	movs	r3, #0
 801a97a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d106      	bne.n	801a990 <tcp_keepalive+0x20>
 801a982:	4b18      	ldr	r3, [pc, #96]	; (801a9e4 <tcp_keepalive+0x74>)
 801a984:	f640 0224 	movw	r2, #2084	; 0x824
 801a988:	4917      	ldr	r1, [pc, #92]	; (801a9e8 <tcp_keepalive+0x78>)
 801a98a:	4818      	ldr	r0, [pc, #96]	; (801a9ec <tcp_keepalive+0x7c>)
 801a98c:	f006 fec4 	bl	8021718 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801a990:	7dfb      	ldrb	r3, [r7, #23]
 801a992:	b29c      	uxth	r4, r3
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a998:	3b01      	subs	r3, #1
 801a99a:	4618      	mov	r0, r3
 801a99c:	f7f8 f98f 	bl	8012cbe <lwip_htonl>
 801a9a0:	4603      	mov	r3, r0
 801a9a2:	2200      	movs	r2, #0
 801a9a4:	4621      	mov	r1, r4
 801a9a6:	6878      	ldr	r0, [r7, #4]
 801a9a8:	f7ff fe68 	bl	801a67c <tcp_output_alloc_header>
 801a9ac:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a9ae:	693b      	ldr	r3, [r7, #16]
 801a9b0:	2b00      	cmp	r3, #0
 801a9b2:	d102      	bne.n	801a9ba <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801a9b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a9b8:	e010      	b.n	801a9dc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a9ba:	7dfb      	ldrb	r3, [r7, #23]
 801a9bc:	2200      	movs	r2, #0
 801a9be:	6939      	ldr	r1, [r7, #16]
 801a9c0:	6878      	ldr	r0, [r7, #4]
 801a9c2:	f7ff fe99 	bl	801a6f8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a9c6:	687a      	ldr	r2, [r7, #4]
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	3304      	adds	r3, #4
 801a9cc:	6939      	ldr	r1, [r7, #16]
 801a9ce:	6878      	ldr	r0, [r7, #4]
 801a9d0:	f7ff fed0 	bl	801a774 <tcp_output_control_segment>
 801a9d4:	4603      	mov	r3, r0
 801a9d6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a9d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a9dc:	4618      	mov	r0, r3
 801a9de:	371c      	adds	r7, #28
 801a9e0:	46bd      	mov	sp, r7
 801a9e2:	bd90      	pop	{r4, r7, pc}
 801a9e4:	08025ad4 	.word	0x08025ad4
 801a9e8:	080262b0 	.word	0x080262b0
 801a9ec:	08025b28 	.word	0x08025b28

0801a9f0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801a9f0:	b590      	push	{r4, r7, lr}
 801a9f2:	b08b      	sub	sp, #44	; 0x2c
 801a9f4:	af00      	add	r7, sp, #0
 801a9f6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a9f8:	2300      	movs	r3, #0
 801a9fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	2b00      	cmp	r3, #0
 801aa02:	d106      	bne.n	801aa12 <tcp_zero_window_probe+0x22>
 801aa04:	4b4c      	ldr	r3, [pc, #304]	; (801ab38 <tcp_zero_window_probe+0x148>)
 801aa06:	f640 024f 	movw	r2, #2127	; 0x84f
 801aa0a:	494c      	ldr	r1, [pc, #304]	; (801ab3c <tcp_zero_window_probe+0x14c>)
 801aa0c:	484c      	ldr	r0, [pc, #304]	; (801ab40 <tcp_zero_window_probe+0x150>)
 801aa0e:	f006 fe83 	bl	8021718 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa16:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801aa18:	6a3b      	ldr	r3, [r7, #32]
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d101      	bne.n	801aa22 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801aa1e:	2300      	movs	r3, #0
 801aa20:	e086      	b.n	801ab30 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 801aa28:	2bff      	cmp	r3, #255	; 0xff
 801aa2a:	d007      	beq.n	801aa3c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 801aa32:	3301      	adds	r3, #1
 801aa34:	b2da      	uxtb	r2, r3
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801aa3c:	6a3b      	ldr	r3, [r7, #32]
 801aa3e:	68db      	ldr	r3, [r3, #12]
 801aa40:	899b      	ldrh	r3, [r3, #12]
 801aa42:	b29b      	uxth	r3, r3
 801aa44:	4618      	mov	r0, r3
 801aa46:	f7f8 f925 	bl	8012c94 <lwip_htons>
 801aa4a:	4603      	mov	r3, r0
 801aa4c:	b2db      	uxtb	r3, r3
 801aa4e:	f003 0301 	and.w	r3, r3, #1
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	d005      	beq.n	801aa62 <tcp_zero_window_probe+0x72>
 801aa56:	6a3b      	ldr	r3, [r7, #32]
 801aa58:	891b      	ldrh	r3, [r3, #8]
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	d101      	bne.n	801aa62 <tcp_zero_window_probe+0x72>
 801aa5e:	2301      	movs	r3, #1
 801aa60:	e000      	b.n	801aa64 <tcp_zero_window_probe+0x74>
 801aa62:	2300      	movs	r3, #0
 801aa64:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801aa66:	7ffb      	ldrb	r3, [r7, #31]
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	bf0c      	ite	eq
 801aa6c:	2301      	moveq	r3, #1
 801aa6e:	2300      	movne	r3, #0
 801aa70:	b2db      	uxtb	r3, r3
 801aa72:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801aa74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aa78:	b299      	uxth	r1, r3
 801aa7a:	6a3b      	ldr	r3, [r7, #32]
 801aa7c:	68db      	ldr	r3, [r3, #12]
 801aa7e:	685b      	ldr	r3, [r3, #4]
 801aa80:	8bba      	ldrh	r2, [r7, #28]
 801aa82:	6878      	ldr	r0, [r7, #4]
 801aa84:	f7ff fdfa 	bl	801a67c <tcp_output_alloc_header>
 801aa88:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801aa8a:	69bb      	ldr	r3, [r7, #24]
 801aa8c:	2b00      	cmp	r3, #0
 801aa8e:	d102      	bne.n	801aa96 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801aa90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aa94:	e04c      	b.n	801ab30 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801aa96:	69bb      	ldr	r3, [r7, #24]
 801aa98:	685b      	ldr	r3, [r3, #4]
 801aa9a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801aa9c:	7ffb      	ldrb	r3, [r7, #31]
 801aa9e:	2b00      	cmp	r3, #0
 801aaa0:	d011      	beq.n	801aac6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801aaa2:	697b      	ldr	r3, [r7, #20]
 801aaa4:	899b      	ldrh	r3, [r3, #12]
 801aaa6:	b29b      	uxth	r3, r3
 801aaa8:	b21b      	sxth	r3, r3
 801aaaa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801aaae:	b21c      	sxth	r4, r3
 801aab0:	2011      	movs	r0, #17
 801aab2:	f7f8 f8ef 	bl	8012c94 <lwip_htons>
 801aab6:	4603      	mov	r3, r0
 801aab8:	b21b      	sxth	r3, r3
 801aaba:	4323      	orrs	r3, r4
 801aabc:	b21b      	sxth	r3, r3
 801aabe:	b29a      	uxth	r2, r3
 801aac0:	697b      	ldr	r3, [r7, #20]
 801aac2:	819a      	strh	r2, [r3, #12]
 801aac4:	e010      	b.n	801aae8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801aac6:	69bb      	ldr	r3, [r7, #24]
 801aac8:	685b      	ldr	r3, [r3, #4]
 801aaca:	3314      	adds	r3, #20
 801aacc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801aace:	6a3b      	ldr	r3, [r7, #32]
 801aad0:	6858      	ldr	r0, [r3, #4]
 801aad2:	6a3b      	ldr	r3, [r7, #32]
 801aad4:	685b      	ldr	r3, [r3, #4]
 801aad6:	891a      	ldrh	r2, [r3, #8]
 801aad8:	6a3b      	ldr	r3, [r7, #32]
 801aada:	891b      	ldrh	r3, [r3, #8]
 801aadc:	1ad3      	subs	r3, r2, r3
 801aade:	b29b      	uxth	r3, r3
 801aae0:	2201      	movs	r2, #1
 801aae2:	6939      	ldr	r1, [r7, #16]
 801aae4:	f7f9 feda 	bl	801489c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801aae8:	6a3b      	ldr	r3, [r7, #32]
 801aaea:	68db      	ldr	r3, [r3, #12]
 801aaec:	685b      	ldr	r3, [r3, #4]
 801aaee:	4618      	mov	r0, r3
 801aaf0:	f7f8 f8e5 	bl	8012cbe <lwip_htonl>
 801aaf4:	4603      	mov	r3, r0
 801aaf6:	3301      	adds	r3, #1
 801aaf8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801aafe:	68fb      	ldr	r3, [r7, #12]
 801ab00:	1ad3      	subs	r3, r2, r3
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	da02      	bge.n	801ab0c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	68fa      	ldr	r2, [r7, #12]
 801ab0a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801ab0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ab10:	2200      	movs	r2, #0
 801ab12:	69b9      	ldr	r1, [r7, #24]
 801ab14:	6878      	ldr	r0, [r7, #4]
 801ab16:	f7ff fdef 	bl	801a6f8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ab1a:	687a      	ldr	r2, [r7, #4]
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	3304      	adds	r3, #4
 801ab20:	69b9      	ldr	r1, [r7, #24]
 801ab22:	6878      	ldr	r0, [r7, #4]
 801ab24:	f7ff fe26 	bl	801a774 <tcp_output_control_segment>
 801ab28:	4603      	mov	r3, r0
 801ab2a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801ab2c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801ab30:	4618      	mov	r0, r3
 801ab32:	372c      	adds	r7, #44	; 0x2c
 801ab34:	46bd      	mov	sp, r7
 801ab36:	bd90      	pop	{r4, r7, pc}
 801ab38:	08025ad4 	.word	0x08025ad4
 801ab3c:	080262cc 	.word	0x080262cc
 801ab40:	08025b28 	.word	0x08025b28

0801ab44 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801ab44:	b580      	push	{r7, lr}
 801ab46:	b082      	sub	sp, #8
 801ab48:	af00      	add	r7, sp, #0
 801ab4a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801ab4c:	f7f9 ff94 	bl	8014a78 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801ab50:	4b0a      	ldr	r3, [pc, #40]	; (801ab7c <tcpip_tcp_timer+0x38>)
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	2b00      	cmp	r3, #0
 801ab56:	d103      	bne.n	801ab60 <tcpip_tcp_timer+0x1c>
 801ab58:	4b09      	ldr	r3, [pc, #36]	; (801ab80 <tcpip_tcp_timer+0x3c>)
 801ab5a:	681b      	ldr	r3, [r3, #0]
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	d005      	beq.n	801ab6c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801ab60:	2200      	movs	r2, #0
 801ab62:	4908      	ldr	r1, [pc, #32]	; (801ab84 <tcpip_tcp_timer+0x40>)
 801ab64:	20fa      	movs	r0, #250	; 0xfa
 801ab66:	f000 f8f3 	bl	801ad50 <sys_timeout>
 801ab6a:	e003      	b.n	801ab74 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801ab6c:	4b06      	ldr	r3, [pc, #24]	; (801ab88 <tcpip_tcp_timer+0x44>)
 801ab6e:	2200      	movs	r2, #0
 801ab70:	601a      	str	r2, [r3, #0]
  }
}
 801ab72:	bf00      	nop
 801ab74:	bf00      	nop
 801ab76:	3708      	adds	r7, #8
 801ab78:	46bd      	mov	sp, r7
 801ab7a:	bd80      	pop	{r7, pc}
 801ab7c:	2001235c 	.word	0x2001235c
 801ab80:	20012360 	.word	0x20012360
 801ab84:	0801ab45 	.word	0x0801ab45
 801ab88:	200123a8 	.word	0x200123a8

0801ab8c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801ab8c:	b580      	push	{r7, lr}
 801ab8e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801ab90:	4b0a      	ldr	r3, [pc, #40]	; (801abbc <tcp_timer_needed+0x30>)
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	d10f      	bne.n	801abb8 <tcp_timer_needed+0x2c>
 801ab98:	4b09      	ldr	r3, [pc, #36]	; (801abc0 <tcp_timer_needed+0x34>)
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	d103      	bne.n	801aba8 <tcp_timer_needed+0x1c>
 801aba0:	4b08      	ldr	r3, [pc, #32]	; (801abc4 <tcp_timer_needed+0x38>)
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d007      	beq.n	801abb8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801aba8:	4b04      	ldr	r3, [pc, #16]	; (801abbc <tcp_timer_needed+0x30>)
 801abaa:	2201      	movs	r2, #1
 801abac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801abae:	2200      	movs	r2, #0
 801abb0:	4905      	ldr	r1, [pc, #20]	; (801abc8 <tcp_timer_needed+0x3c>)
 801abb2:	20fa      	movs	r0, #250	; 0xfa
 801abb4:	f000 f8cc 	bl	801ad50 <sys_timeout>
  }
}
 801abb8:	bf00      	nop
 801abba:	bd80      	pop	{r7, pc}
 801abbc:	200123a8 	.word	0x200123a8
 801abc0:	2001235c 	.word	0x2001235c
 801abc4:	20012360 	.word	0x20012360
 801abc8:	0801ab45 	.word	0x0801ab45

0801abcc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801abcc:	b580      	push	{r7, lr}
 801abce:	b086      	sub	sp, #24
 801abd0:	af00      	add	r7, sp, #0
 801abd2:	60f8      	str	r0, [r7, #12]
 801abd4:	60b9      	str	r1, [r7, #8]
 801abd6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801abd8:	200a      	movs	r0, #10
 801abda:	f7f8 fd33 	bl	8013644 <memp_malloc>
 801abde:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801abe0:	693b      	ldr	r3, [r7, #16]
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d109      	bne.n	801abfa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801abe6:	693b      	ldr	r3, [r7, #16]
 801abe8:	2b00      	cmp	r3, #0
 801abea:	d151      	bne.n	801ac90 <sys_timeout_abs+0xc4>
 801abec:	4b2a      	ldr	r3, [pc, #168]	; (801ac98 <sys_timeout_abs+0xcc>)
 801abee:	22be      	movs	r2, #190	; 0xbe
 801abf0:	492a      	ldr	r1, [pc, #168]	; (801ac9c <sys_timeout_abs+0xd0>)
 801abf2:	482b      	ldr	r0, [pc, #172]	; (801aca0 <sys_timeout_abs+0xd4>)
 801abf4:	f006 fd90 	bl	8021718 <iprintf>
    return;
 801abf8:	e04a      	b.n	801ac90 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801abfa:	693b      	ldr	r3, [r7, #16]
 801abfc:	2200      	movs	r2, #0
 801abfe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801ac00:	693b      	ldr	r3, [r7, #16]
 801ac02:	68ba      	ldr	r2, [r7, #8]
 801ac04:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801ac06:	693b      	ldr	r3, [r7, #16]
 801ac08:	687a      	ldr	r2, [r7, #4]
 801ac0a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801ac0c:	693b      	ldr	r3, [r7, #16]
 801ac0e:	68fa      	ldr	r2, [r7, #12]
 801ac10:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801ac12:	4b24      	ldr	r3, [pc, #144]	; (801aca4 <sys_timeout_abs+0xd8>)
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d103      	bne.n	801ac22 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801ac1a:	4a22      	ldr	r2, [pc, #136]	; (801aca4 <sys_timeout_abs+0xd8>)
 801ac1c:	693b      	ldr	r3, [r7, #16]
 801ac1e:	6013      	str	r3, [r2, #0]
    return;
 801ac20:	e037      	b.n	801ac92 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801ac22:	693b      	ldr	r3, [r7, #16]
 801ac24:	685a      	ldr	r2, [r3, #4]
 801ac26:	4b1f      	ldr	r3, [pc, #124]	; (801aca4 <sys_timeout_abs+0xd8>)
 801ac28:	681b      	ldr	r3, [r3, #0]
 801ac2a:	685b      	ldr	r3, [r3, #4]
 801ac2c:	1ad3      	subs	r3, r2, r3
 801ac2e:	0fdb      	lsrs	r3, r3, #31
 801ac30:	f003 0301 	and.w	r3, r3, #1
 801ac34:	b2db      	uxtb	r3, r3
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	d007      	beq.n	801ac4a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801ac3a:	4b1a      	ldr	r3, [pc, #104]	; (801aca4 <sys_timeout_abs+0xd8>)
 801ac3c:	681a      	ldr	r2, [r3, #0]
 801ac3e:	693b      	ldr	r3, [r7, #16]
 801ac40:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801ac42:	4a18      	ldr	r2, [pc, #96]	; (801aca4 <sys_timeout_abs+0xd8>)
 801ac44:	693b      	ldr	r3, [r7, #16]
 801ac46:	6013      	str	r3, [r2, #0]
 801ac48:	e023      	b.n	801ac92 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801ac4a:	4b16      	ldr	r3, [pc, #88]	; (801aca4 <sys_timeout_abs+0xd8>)
 801ac4c:	681b      	ldr	r3, [r3, #0]
 801ac4e:	617b      	str	r3, [r7, #20]
 801ac50:	e01a      	b.n	801ac88 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801ac52:	697b      	ldr	r3, [r7, #20]
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	d00b      	beq.n	801ac72 <sys_timeout_abs+0xa6>
 801ac5a:	693b      	ldr	r3, [r7, #16]
 801ac5c:	685a      	ldr	r2, [r3, #4]
 801ac5e:	697b      	ldr	r3, [r7, #20]
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	685b      	ldr	r3, [r3, #4]
 801ac64:	1ad3      	subs	r3, r2, r3
 801ac66:	0fdb      	lsrs	r3, r3, #31
 801ac68:	f003 0301 	and.w	r3, r3, #1
 801ac6c:	b2db      	uxtb	r3, r3
 801ac6e:	2b00      	cmp	r3, #0
 801ac70:	d007      	beq.n	801ac82 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801ac72:	697b      	ldr	r3, [r7, #20]
 801ac74:	681a      	ldr	r2, [r3, #0]
 801ac76:	693b      	ldr	r3, [r7, #16]
 801ac78:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801ac7a:	697b      	ldr	r3, [r7, #20]
 801ac7c:	693a      	ldr	r2, [r7, #16]
 801ac7e:	601a      	str	r2, [r3, #0]
        break;
 801ac80:	e007      	b.n	801ac92 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801ac82:	697b      	ldr	r3, [r7, #20]
 801ac84:	681b      	ldr	r3, [r3, #0]
 801ac86:	617b      	str	r3, [r7, #20]
 801ac88:	697b      	ldr	r3, [r7, #20]
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	d1e1      	bne.n	801ac52 <sys_timeout_abs+0x86>
 801ac8e:	e000      	b.n	801ac92 <sys_timeout_abs+0xc6>
    return;
 801ac90:	bf00      	nop
      }
    }
  }
}
 801ac92:	3718      	adds	r7, #24
 801ac94:	46bd      	mov	sp, r7
 801ac96:	bd80      	pop	{r7, pc}
 801ac98:	080262f0 	.word	0x080262f0
 801ac9c:	08026324 	.word	0x08026324
 801aca0:	08026364 	.word	0x08026364
 801aca4:	200123a0 	.word	0x200123a0

0801aca8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801aca8:	b580      	push	{r7, lr}
 801acaa:	b086      	sub	sp, #24
 801acac:	af00      	add	r7, sp, #0
 801acae:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801acb4:	697b      	ldr	r3, [r7, #20]
 801acb6:	685b      	ldr	r3, [r3, #4]
 801acb8:	4798      	blx	r3

  now = sys_now();
 801acba:	f7eb ffb7 	bl	8006c2c <sys_now>
 801acbe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801acc0:	697b      	ldr	r3, [r7, #20]
 801acc2:	681a      	ldr	r2, [r3, #0]
 801acc4:	4b0f      	ldr	r3, [pc, #60]	; (801ad04 <lwip_cyclic_timer+0x5c>)
 801acc6:	681b      	ldr	r3, [r3, #0]
 801acc8:	4413      	add	r3, r2
 801acca:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801accc:	68fa      	ldr	r2, [r7, #12]
 801acce:	693b      	ldr	r3, [r7, #16]
 801acd0:	1ad3      	subs	r3, r2, r3
 801acd2:	0fdb      	lsrs	r3, r3, #31
 801acd4:	f003 0301 	and.w	r3, r3, #1
 801acd8:	b2db      	uxtb	r3, r3
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d009      	beq.n	801acf2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801acde:	697b      	ldr	r3, [r7, #20]
 801ace0:	681a      	ldr	r2, [r3, #0]
 801ace2:	693b      	ldr	r3, [r7, #16]
 801ace4:	4413      	add	r3, r2
 801ace6:	687a      	ldr	r2, [r7, #4]
 801ace8:	4907      	ldr	r1, [pc, #28]	; (801ad08 <lwip_cyclic_timer+0x60>)
 801acea:	4618      	mov	r0, r3
 801acec:	f7ff ff6e 	bl	801abcc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801acf0:	e004      	b.n	801acfc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801acf2:	687a      	ldr	r2, [r7, #4]
 801acf4:	4904      	ldr	r1, [pc, #16]	; (801ad08 <lwip_cyclic_timer+0x60>)
 801acf6:	68f8      	ldr	r0, [r7, #12]
 801acf8:	f7ff ff68 	bl	801abcc <sys_timeout_abs>
}
 801acfc:	bf00      	nop
 801acfe:	3718      	adds	r7, #24
 801ad00:	46bd      	mov	sp, r7
 801ad02:	bd80      	pop	{r7, pc}
 801ad04:	200123a4 	.word	0x200123a4
 801ad08:	0801aca9 	.word	0x0801aca9

0801ad0c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801ad0c:	b580      	push	{r7, lr}
 801ad0e:	b082      	sub	sp, #8
 801ad10:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801ad12:	2301      	movs	r3, #1
 801ad14:	607b      	str	r3, [r7, #4]
 801ad16:	e00e      	b.n	801ad36 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801ad18:	4a0b      	ldr	r2, [pc, #44]	; (801ad48 <sys_timeouts_init+0x3c>)
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	00db      	lsls	r3, r3, #3
 801ad24:	4a08      	ldr	r2, [pc, #32]	; (801ad48 <sys_timeouts_init+0x3c>)
 801ad26:	4413      	add	r3, r2
 801ad28:	461a      	mov	r2, r3
 801ad2a:	4908      	ldr	r1, [pc, #32]	; (801ad4c <sys_timeouts_init+0x40>)
 801ad2c:	f000 f810 	bl	801ad50 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	3301      	adds	r3, #1
 801ad34:	607b      	str	r3, [r7, #4]
 801ad36:	687b      	ldr	r3, [r7, #4]
 801ad38:	2b04      	cmp	r3, #4
 801ad3a:	d9ed      	bls.n	801ad18 <sys_timeouts_init+0xc>
  }
}
 801ad3c:	bf00      	nop
 801ad3e:	bf00      	nop
 801ad40:	3708      	adds	r7, #8
 801ad42:	46bd      	mov	sp, r7
 801ad44:	bd80      	pop	{r7, pc}
 801ad46:	bf00      	nop
 801ad48:	080273d8 	.word	0x080273d8
 801ad4c:	0801aca9 	.word	0x0801aca9

0801ad50 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801ad50:	b580      	push	{r7, lr}
 801ad52:	b086      	sub	sp, #24
 801ad54:	af00      	add	r7, sp, #0
 801ad56:	60f8      	str	r0, [r7, #12]
 801ad58:	60b9      	str	r1, [r7, #8]
 801ad5a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801ad5c:	68fb      	ldr	r3, [r7, #12]
 801ad5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ad62:	d306      	bcc.n	801ad72 <sys_timeout+0x22>
 801ad64:	4b0a      	ldr	r3, [pc, #40]	; (801ad90 <sys_timeout+0x40>)
 801ad66:	f240 1229 	movw	r2, #297	; 0x129
 801ad6a:	490a      	ldr	r1, [pc, #40]	; (801ad94 <sys_timeout+0x44>)
 801ad6c:	480a      	ldr	r0, [pc, #40]	; (801ad98 <sys_timeout+0x48>)
 801ad6e:	f006 fcd3 	bl	8021718 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801ad72:	f7eb ff5b 	bl	8006c2c <sys_now>
 801ad76:	4602      	mov	r2, r0
 801ad78:	68fb      	ldr	r3, [r7, #12]
 801ad7a:	4413      	add	r3, r2
 801ad7c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801ad7e:	687a      	ldr	r2, [r7, #4]
 801ad80:	68b9      	ldr	r1, [r7, #8]
 801ad82:	6978      	ldr	r0, [r7, #20]
 801ad84:	f7ff ff22 	bl	801abcc <sys_timeout_abs>
#endif
}
 801ad88:	bf00      	nop
 801ad8a:	3718      	adds	r7, #24
 801ad8c:	46bd      	mov	sp, r7
 801ad8e:	bd80      	pop	{r7, pc}
 801ad90:	080262f0 	.word	0x080262f0
 801ad94:	0802638c 	.word	0x0802638c
 801ad98:	08026364 	.word	0x08026364

0801ad9c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801ad9c:	b580      	push	{r7, lr}
 801ad9e:	b084      	sub	sp, #16
 801ada0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801ada2:	f7eb ff43 	bl	8006c2c <sys_now>
 801ada6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801ada8:	4b17      	ldr	r3, [pc, #92]	; (801ae08 <sys_check_timeouts+0x6c>)
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801adae:	68bb      	ldr	r3, [r7, #8]
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d022      	beq.n	801adfa <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801adb4:	68bb      	ldr	r3, [r7, #8]
 801adb6:	685b      	ldr	r3, [r3, #4]
 801adb8:	68fa      	ldr	r2, [r7, #12]
 801adba:	1ad3      	subs	r3, r2, r3
 801adbc:	0fdb      	lsrs	r3, r3, #31
 801adbe:	f003 0301 	and.w	r3, r3, #1
 801adc2:	b2db      	uxtb	r3, r3
 801adc4:	2b00      	cmp	r3, #0
 801adc6:	d11a      	bne.n	801adfe <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801adc8:	68bb      	ldr	r3, [r7, #8]
 801adca:	681b      	ldr	r3, [r3, #0]
 801adcc:	4a0e      	ldr	r2, [pc, #56]	; (801ae08 <sys_check_timeouts+0x6c>)
 801adce:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801add0:	68bb      	ldr	r3, [r7, #8]
 801add2:	689b      	ldr	r3, [r3, #8]
 801add4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801add6:	68bb      	ldr	r3, [r7, #8]
 801add8:	68db      	ldr	r3, [r3, #12]
 801adda:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801addc:	68bb      	ldr	r3, [r7, #8]
 801adde:	685b      	ldr	r3, [r3, #4]
 801ade0:	4a0a      	ldr	r2, [pc, #40]	; (801ae0c <sys_check_timeouts+0x70>)
 801ade2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801ade4:	68b9      	ldr	r1, [r7, #8]
 801ade6:	200a      	movs	r0, #10
 801ade8:	f7f8 fca2 	bl	8013730 <memp_free>
    if (handler != NULL) {
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	2b00      	cmp	r3, #0
 801adf0:	d0da      	beq.n	801ada8 <sys_check_timeouts+0xc>
      handler(arg);
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	6838      	ldr	r0, [r7, #0]
 801adf6:	4798      	blx	r3
  do {
 801adf8:	e7d6      	b.n	801ada8 <sys_check_timeouts+0xc>
      return;
 801adfa:	bf00      	nop
 801adfc:	e000      	b.n	801ae00 <sys_check_timeouts+0x64>
      return;
 801adfe:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801ae00:	3710      	adds	r7, #16
 801ae02:	46bd      	mov	sp, r7
 801ae04:	bd80      	pop	{r7, pc}
 801ae06:	bf00      	nop
 801ae08:	200123a0 	.word	0x200123a0
 801ae0c:	200123a4 	.word	0x200123a4

0801ae10 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801ae10:	b580      	push	{r7, lr}
 801ae12:	b082      	sub	sp, #8
 801ae14:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801ae16:	4b16      	ldr	r3, [pc, #88]	; (801ae70 <sys_timeouts_sleeptime+0x60>)
 801ae18:	681b      	ldr	r3, [r3, #0]
 801ae1a:	2b00      	cmp	r3, #0
 801ae1c:	d102      	bne.n	801ae24 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801ae1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ae22:	e020      	b.n	801ae66 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801ae24:	f7eb ff02 	bl	8006c2c <sys_now>
 801ae28:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801ae2a:	4b11      	ldr	r3, [pc, #68]	; (801ae70 <sys_timeouts_sleeptime+0x60>)
 801ae2c:	681b      	ldr	r3, [r3, #0]
 801ae2e:	685a      	ldr	r2, [r3, #4]
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	1ad3      	subs	r3, r2, r3
 801ae34:	0fdb      	lsrs	r3, r3, #31
 801ae36:	f003 0301 	and.w	r3, r3, #1
 801ae3a:	b2db      	uxtb	r3, r3
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	d001      	beq.n	801ae44 <sys_timeouts_sleeptime+0x34>
    return 0;
 801ae40:	2300      	movs	r3, #0
 801ae42:	e010      	b.n	801ae66 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801ae44:	4b0a      	ldr	r3, [pc, #40]	; (801ae70 <sys_timeouts_sleeptime+0x60>)
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	685a      	ldr	r2, [r3, #4]
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	1ad3      	subs	r3, r2, r3
 801ae4e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801ae50:	683b      	ldr	r3, [r7, #0]
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	da06      	bge.n	801ae64 <sys_timeouts_sleeptime+0x54>
 801ae56:	4b07      	ldr	r3, [pc, #28]	; (801ae74 <sys_timeouts_sleeptime+0x64>)
 801ae58:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801ae5c:	4906      	ldr	r1, [pc, #24]	; (801ae78 <sys_timeouts_sleeptime+0x68>)
 801ae5e:	4807      	ldr	r0, [pc, #28]	; (801ae7c <sys_timeouts_sleeptime+0x6c>)
 801ae60:	f006 fc5a 	bl	8021718 <iprintf>
    return ret;
 801ae64:	683b      	ldr	r3, [r7, #0]
  }
}
 801ae66:	4618      	mov	r0, r3
 801ae68:	3708      	adds	r7, #8
 801ae6a:	46bd      	mov	sp, r7
 801ae6c:	bd80      	pop	{r7, pc}
 801ae6e:	bf00      	nop
 801ae70:	200123a0 	.word	0x200123a0
 801ae74:	080262f0 	.word	0x080262f0
 801ae78:	080263c4 	.word	0x080263c4
 801ae7c:	08026364 	.word	0x08026364

0801ae80 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801ae80:	b580      	push	{r7, lr}
 801ae82:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801ae84:	f006 facc 	bl	8021420 <rand>
 801ae88:	4603      	mov	r3, r0
 801ae8a:	b29b      	uxth	r3, r3
 801ae8c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801ae90:	b29b      	uxth	r3, r3
 801ae92:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801ae96:	b29a      	uxth	r2, r3
 801ae98:	4b01      	ldr	r3, [pc, #4]	; (801aea0 <udp_init+0x20>)
 801ae9a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801ae9c:	bf00      	nop
 801ae9e:	bd80      	pop	{r7, pc}
 801aea0:	2000002c 	.word	0x2000002c

0801aea4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801aea4:	b480      	push	{r7}
 801aea6:	b083      	sub	sp, #12
 801aea8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801aeaa:	2300      	movs	r3, #0
 801aeac:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801aeae:	4b17      	ldr	r3, [pc, #92]	; (801af0c <udp_new_port+0x68>)
 801aeb0:	881b      	ldrh	r3, [r3, #0]
 801aeb2:	1c5a      	adds	r2, r3, #1
 801aeb4:	b291      	uxth	r1, r2
 801aeb6:	4a15      	ldr	r2, [pc, #84]	; (801af0c <udp_new_port+0x68>)
 801aeb8:	8011      	strh	r1, [r2, #0]
 801aeba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aebe:	4293      	cmp	r3, r2
 801aec0:	d103      	bne.n	801aeca <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801aec2:	4b12      	ldr	r3, [pc, #72]	; (801af0c <udp_new_port+0x68>)
 801aec4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801aec8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801aeca:	4b11      	ldr	r3, [pc, #68]	; (801af10 <udp_new_port+0x6c>)
 801aecc:	681b      	ldr	r3, [r3, #0]
 801aece:	603b      	str	r3, [r7, #0]
 801aed0:	e011      	b.n	801aef6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801aed2:	683b      	ldr	r3, [r7, #0]
 801aed4:	8a5a      	ldrh	r2, [r3, #18]
 801aed6:	4b0d      	ldr	r3, [pc, #52]	; (801af0c <udp_new_port+0x68>)
 801aed8:	881b      	ldrh	r3, [r3, #0]
 801aeda:	429a      	cmp	r2, r3
 801aedc:	d108      	bne.n	801aef0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801aede:	88fb      	ldrh	r3, [r7, #6]
 801aee0:	3301      	adds	r3, #1
 801aee2:	80fb      	strh	r3, [r7, #6]
 801aee4:	88fb      	ldrh	r3, [r7, #6]
 801aee6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801aeea:	d3e0      	bcc.n	801aeae <udp_new_port+0xa>
        return 0;
 801aeec:	2300      	movs	r3, #0
 801aeee:	e007      	b.n	801af00 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801aef0:	683b      	ldr	r3, [r7, #0]
 801aef2:	68db      	ldr	r3, [r3, #12]
 801aef4:	603b      	str	r3, [r7, #0]
 801aef6:	683b      	ldr	r3, [r7, #0]
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d1ea      	bne.n	801aed2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801aefc:	4b03      	ldr	r3, [pc, #12]	; (801af0c <udp_new_port+0x68>)
 801aefe:	881b      	ldrh	r3, [r3, #0]
}
 801af00:	4618      	mov	r0, r3
 801af02:	370c      	adds	r7, #12
 801af04:	46bd      	mov	sp, r7
 801af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af0a:	4770      	bx	lr
 801af0c:	2000002c 	.word	0x2000002c
 801af10:	200123ac 	.word	0x200123ac

0801af14 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801af14:	b580      	push	{r7, lr}
 801af16:	b084      	sub	sp, #16
 801af18:	af00      	add	r7, sp, #0
 801af1a:	60f8      	str	r0, [r7, #12]
 801af1c:	60b9      	str	r1, [r7, #8]
 801af1e:	4613      	mov	r3, r2
 801af20:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801af22:	68fb      	ldr	r3, [r7, #12]
 801af24:	2b00      	cmp	r3, #0
 801af26:	d105      	bne.n	801af34 <udp_input_local_match+0x20>
 801af28:	4b27      	ldr	r3, [pc, #156]	; (801afc8 <udp_input_local_match+0xb4>)
 801af2a:	2287      	movs	r2, #135	; 0x87
 801af2c:	4927      	ldr	r1, [pc, #156]	; (801afcc <udp_input_local_match+0xb8>)
 801af2e:	4828      	ldr	r0, [pc, #160]	; (801afd0 <udp_input_local_match+0xbc>)
 801af30:	f006 fbf2 	bl	8021718 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801af34:	68bb      	ldr	r3, [r7, #8]
 801af36:	2b00      	cmp	r3, #0
 801af38:	d105      	bne.n	801af46 <udp_input_local_match+0x32>
 801af3a:	4b23      	ldr	r3, [pc, #140]	; (801afc8 <udp_input_local_match+0xb4>)
 801af3c:	2288      	movs	r2, #136	; 0x88
 801af3e:	4925      	ldr	r1, [pc, #148]	; (801afd4 <udp_input_local_match+0xc0>)
 801af40:	4823      	ldr	r0, [pc, #140]	; (801afd0 <udp_input_local_match+0xbc>)
 801af42:	f006 fbe9 	bl	8021718 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801af46:	68fb      	ldr	r3, [r7, #12]
 801af48:	7a1b      	ldrb	r3, [r3, #8]
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	d00b      	beq.n	801af66 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801af4e:	68fb      	ldr	r3, [r7, #12]
 801af50:	7a1a      	ldrb	r2, [r3, #8]
 801af52:	4b21      	ldr	r3, [pc, #132]	; (801afd8 <udp_input_local_match+0xc4>)
 801af54:	685b      	ldr	r3, [r3, #4]
 801af56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801af5a:	3301      	adds	r3, #1
 801af5c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801af5e:	429a      	cmp	r2, r3
 801af60:	d001      	beq.n	801af66 <udp_input_local_match+0x52>
    return 0;
 801af62:	2300      	movs	r3, #0
 801af64:	e02b      	b.n	801afbe <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801af66:	79fb      	ldrb	r3, [r7, #7]
 801af68:	2b00      	cmp	r3, #0
 801af6a:	d018      	beq.n	801af9e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801af6c:	68fb      	ldr	r3, [r7, #12]
 801af6e:	2b00      	cmp	r3, #0
 801af70:	d013      	beq.n	801af9a <udp_input_local_match+0x86>
 801af72:	68fb      	ldr	r3, [r7, #12]
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	2b00      	cmp	r3, #0
 801af78:	d00f      	beq.n	801af9a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801af7a:	4b17      	ldr	r3, [pc, #92]	; (801afd8 <udp_input_local_match+0xc4>)
 801af7c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801af7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801af82:	d00a      	beq.n	801af9a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	681a      	ldr	r2, [r3, #0]
 801af88:	4b13      	ldr	r3, [pc, #76]	; (801afd8 <udp_input_local_match+0xc4>)
 801af8a:	695b      	ldr	r3, [r3, #20]
 801af8c:	405a      	eors	r2, r3
 801af8e:	68bb      	ldr	r3, [r7, #8]
 801af90:	3308      	adds	r3, #8
 801af92:	681b      	ldr	r3, [r3, #0]
 801af94:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801af96:	2b00      	cmp	r3, #0
 801af98:	d110      	bne.n	801afbc <udp_input_local_match+0xa8>
          return 1;
 801af9a:	2301      	movs	r3, #1
 801af9c:	e00f      	b.n	801afbe <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801af9e:	68fb      	ldr	r3, [r7, #12]
 801afa0:	2b00      	cmp	r3, #0
 801afa2:	d009      	beq.n	801afb8 <udp_input_local_match+0xa4>
 801afa4:	68fb      	ldr	r3, [r7, #12]
 801afa6:	681b      	ldr	r3, [r3, #0]
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	d005      	beq.n	801afb8 <udp_input_local_match+0xa4>
 801afac:	68fb      	ldr	r3, [r7, #12]
 801afae:	681a      	ldr	r2, [r3, #0]
 801afb0:	4b09      	ldr	r3, [pc, #36]	; (801afd8 <udp_input_local_match+0xc4>)
 801afb2:	695b      	ldr	r3, [r3, #20]
 801afb4:	429a      	cmp	r2, r3
 801afb6:	d101      	bne.n	801afbc <udp_input_local_match+0xa8>
        return 1;
 801afb8:	2301      	movs	r3, #1
 801afba:	e000      	b.n	801afbe <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801afbc:	2300      	movs	r3, #0
}
 801afbe:	4618      	mov	r0, r3
 801afc0:	3710      	adds	r7, #16
 801afc2:	46bd      	mov	sp, r7
 801afc4:	bd80      	pop	{r7, pc}
 801afc6:	bf00      	nop
 801afc8:	080263d8 	.word	0x080263d8
 801afcc:	08026408 	.word	0x08026408
 801afd0:	0802642c 	.word	0x0802642c
 801afd4:	08026454 	.word	0x08026454
 801afd8:	2000eba4 	.word	0x2000eba4

0801afdc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801afdc:	b590      	push	{r4, r7, lr}
 801afde:	b08d      	sub	sp, #52	; 0x34
 801afe0:	af02      	add	r7, sp, #8
 801afe2:	6078      	str	r0, [r7, #4]
 801afe4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801afe6:	2300      	movs	r3, #0
 801afe8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	2b00      	cmp	r3, #0
 801afee:	d105      	bne.n	801affc <udp_input+0x20>
 801aff0:	4b82      	ldr	r3, [pc, #520]	; (801b1fc <udp_input+0x220>)
 801aff2:	22cf      	movs	r2, #207	; 0xcf
 801aff4:	4982      	ldr	r1, [pc, #520]	; (801b200 <udp_input+0x224>)
 801aff6:	4883      	ldr	r0, [pc, #524]	; (801b204 <udp_input+0x228>)
 801aff8:	f006 fb8e 	bl	8021718 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801affc:	683b      	ldr	r3, [r7, #0]
 801affe:	2b00      	cmp	r3, #0
 801b000:	d105      	bne.n	801b00e <udp_input+0x32>
 801b002:	4b7e      	ldr	r3, [pc, #504]	; (801b1fc <udp_input+0x220>)
 801b004:	22d0      	movs	r2, #208	; 0xd0
 801b006:	4980      	ldr	r1, [pc, #512]	; (801b208 <udp_input+0x22c>)
 801b008:	487e      	ldr	r0, [pc, #504]	; (801b204 <udp_input+0x228>)
 801b00a:	f006 fb85 	bl	8021718 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801b00e:	687b      	ldr	r3, [r7, #4]
 801b010:	895b      	ldrh	r3, [r3, #10]
 801b012:	2b07      	cmp	r3, #7
 801b014:	d803      	bhi.n	801b01e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801b016:	6878      	ldr	r0, [r7, #4]
 801b018:	f7f9 fa3a 	bl	8014490 <pbuf_free>
    goto end;
 801b01c:	e0ea      	b.n	801b1f4 <udp_input+0x218>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	685b      	ldr	r3, [r3, #4]
 801b022:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b024:	4b79      	ldr	r3, [pc, #484]	; (801b20c <udp_input+0x230>)
 801b026:	695b      	ldr	r3, [r3, #20]
 801b028:	4a78      	ldr	r2, [pc, #480]	; (801b20c <udp_input+0x230>)
 801b02a:	6812      	ldr	r2, [r2, #0]
 801b02c:	4611      	mov	r1, r2
 801b02e:	4618      	mov	r0, r3
 801b030:	f003 fe2a 	bl	801ec88 <ip4_addr_isbroadcast_u32>
 801b034:	4603      	mov	r3, r0
 801b036:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801b038:	697b      	ldr	r3, [r7, #20]
 801b03a:	881b      	ldrh	r3, [r3, #0]
 801b03c:	b29b      	uxth	r3, r3
 801b03e:	4618      	mov	r0, r3
 801b040:	f7f7 fe28 	bl	8012c94 <lwip_htons>
 801b044:	4603      	mov	r3, r0
 801b046:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801b048:	697b      	ldr	r3, [r7, #20]
 801b04a:	885b      	ldrh	r3, [r3, #2]
 801b04c:	b29b      	uxth	r3, r3
 801b04e:	4618      	mov	r0, r3
 801b050:	f7f7 fe20 	bl	8012c94 <lwip_htons>
 801b054:	4603      	mov	r3, r0
 801b056:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801b058:	2300      	movs	r3, #0
 801b05a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801b05c:	2300      	movs	r3, #0
 801b05e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801b060:	2300      	movs	r3, #0
 801b062:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b064:	4b6a      	ldr	r3, [pc, #424]	; (801b210 <udp_input+0x234>)
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	627b      	str	r3, [r7, #36]	; 0x24
 801b06a:	e060      	b.n	801b12e <udp_input+0x152>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801b06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b06e:	8a5b      	ldrh	r3, [r3, #18]
 801b070:	89fa      	ldrh	r2, [r7, #14]
 801b072:	429a      	cmp	r2, r3
 801b074:	d156      	bne.n	801b124 <udp_input+0x148>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801b076:	7cfb      	ldrb	r3, [r7, #19]
 801b078:	461a      	mov	r2, r3
 801b07a:	6839      	ldr	r1, [r7, #0]
 801b07c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b07e:	f7ff ff49 	bl	801af14 <udp_input_local_match>
 801b082:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801b084:	2b00      	cmp	r3, #0
 801b086:	d04d      	beq.n	801b124 <udp_input+0x148>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801b088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b08a:	7c1b      	ldrb	r3, [r3, #16]
 801b08c:	f003 0304 	and.w	r3, r3, #4
 801b090:	2b00      	cmp	r3, #0
 801b092:	d129      	bne.n	801b0e8 <udp_input+0x10c>
        if (uncon_pcb == NULL) {
 801b094:	69fb      	ldr	r3, [r7, #28]
 801b096:	2b00      	cmp	r3, #0
 801b098:	d102      	bne.n	801b0a0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801b09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b09c:	61fb      	str	r3, [r7, #28]
 801b09e:	e023      	b.n	801b0e8 <udp_input+0x10c>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801b0a0:	7cfb      	ldrb	r3, [r7, #19]
 801b0a2:	2b00      	cmp	r3, #0
 801b0a4:	d015      	beq.n	801b0d2 <udp_input+0xf6>
 801b0a6:	4b59      	ldr	r3, [pc, #356]	; (801b20c <udp_input+0x230>)
 801b0a8:	695b      	ldr	r3, [r3, #20]
 801b0aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b0ae:	d110      	bne.n	801b0d2 <udp_input+0xf6>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801b0b0:	69fb      	ldr	r3, [r7, #28]
 801b0b2:	681a      	ldr	r2, [r3, #0]
 801b0b4:	683b      	ldr	r3, [r7, #0]
 801b0b6:	3304      	adds	r3, #4
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	429a      	cmp	r2, r3
 801b0bc:	d013      	beq.n	801b0e6 <udp_input+0x10a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801b0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0c0:	681a      	ldr	r2, [r3, #0]
 801b0c2:	683b      	ldr	r3, [r7, #0]
 801b0c4:	3304      	adds	r3, #4
 801b0c6:	681b      	ldr	r3, [r3, #0]
 801b0c8:	429a      	cmp	r2, r3
 801b0ca:	d10c      	bne.n	801b0e6 <udp_input+0x10a>
              /* better match */
              uncon_pcb = pcb;
 801b0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0ce:	61fb      	str	r3, [r7, #28]
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801b0d0:	e009      	b.n	801b0e6 <udp_input+0x10a>
            }
          }
#endif /* LWIP_IPV4 */
        }
#if SO_REUSE
        else if (!ip_addr_isany(&pcb->local_ip)) {
 801b0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d007      	beq.n	801b0e8 <udp_input+0x10c>
 801b0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0da:	681b      	ldr	r3, [r3, #0]
 801b0dc:	2b00      	cmp	r3, #0
 801b0de:	d003      	beq.n	801b0e8 <udp_input+0x10c>
          /* prefer specific IPs over catch-all */
          uncon_pcb = pcb;
 801b0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0e2:	61fb      	str	r3, [r7, #28]
 801b0e4:	e000      	b.n	801b0e8 <udp_input+0x10c>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801b0e6:	bf00      	nop
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801b0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0ea:	8a9b      	ldrh	r3, [r3, #20]
 801b0ec:	8a3a      	ldrh	r2, [r7, #16]
 801b0ee:	429a      	cmp	r2, r3
 801b0f0:	d118      	bne.n	801b124 <udp_input+0x148>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0f4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801b0f6:	2b00      	cmp	r3, #0
 801b0f8:	d005      	beq.n	801b106 <udp_input+0x12a>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801b0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0fc:	685a      	ldr	r2, [r3, #4]
 801b0fe:	4b43      	ldr	r3, [pc, #268]	; (801b20c <udp_input+0x230>)
 801b100:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b102:	429a      	cmp	r2, r3
 801b104:	d10e      	bne.n	801b124 <udp_input+0x148>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801b106:	6a3b      	ldr	r3, [r7, #32]
 801b108:	2b00      	cmp	r3, #0
 801b10a:	d014      	beq.n	801b136 <udp_input+0x15a>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801b10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b10e:	68da      	ldr	r2, [r3, #12]
 801b110:	6a3b      	ldr	r3, [r7, #32]
 801b112:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801b114:	4b3e      	ldr	r3, [pc, #248]	; (801b210 <udp_input+0x234>)
 801b116:	681a      	ldr	r2, [r3, #0]
 801b118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b11a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801b11c:	4a3c      	ldr	r2, [pc, #240]	; (801b210 <udp_input+0x234>)
 801b11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b120:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801b122:	e008      	b.n	801b136 <udp_input+0x15a>
      }
    }

    prev = pcb;
 801b124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b126:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b12a:	68db      	ldr	r3, [r3, #12]
 801b12c:	627b      	str	r3, [r7, #36]	; 0x24
 801b12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b130:	2b00      	cmp	r3, #0
 801b132:	d19b      	bne.n	801b06c <udp_input+0x90>
 801b134:	e000      	b.n	801b138 <udp_input+0x15c>
        break;
 801b136:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801b138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	d101      	bne.n	801b142 <udp_input+0x166>
    pcb = uncon_pcb;
 801b13e:	69fb      	ldr	r3, [r7, #28]
 801b140:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801b142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b144:	2b00      	cmp	r3, #0
 801b146:	d002      	beq.n	801b14e <udp_input+0x172>
    for_us = 1;
 801b148:	2301      	movs	r3, #1
 801b14a:	76fb      	strb	r3, [r7, #27]
 801b14c:	e00a      	b.n	801b164 <udp_input+0x188>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801b14e:	683b      	ldr	r3, [r7, #0]
 801b150:	3304      	adds	r3, #4
 801b152:	681a      	ldr	r2, [r3, #0]
 801b154:	4b2d      	ldr	r3, [pc, #180]	; (801b20c <udp_input+0x230>)
 801b156:	695b      	ldr	r3, [r3, #20]
 801b158:	429a      	cmp	r2, r3
 801b15a:	bf0c      	ite	eq
 801b15c:	2301      	moveq	r3, #1
 801b15e:	2300      	movne	r3, #0
 801b160:	b2db      	uxtb	r3, r3
 801b162:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801b164:	7efb      	ldrb	r3, [r7, #27]
 801b166:	2b00      	cmp	r3, #0
 801b168:	d041      	beq.n	801b1ee <udp_input+0x212>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801b16a:	2108      	movs	r1, #8
 801b16c:	6878      	ldr	r0, [r7, #4]
 801b16e:	f7f9 f909 	bl	8014384 <pbuf_remove_header>
 801b172:	4603      	mov	r3, r0
 801b174:	2b00      	cmp	r3, #0
 801b176:	d00a      	beq.n	801b18e <udp_input+0x1b2>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801b178:	4b20      	ldr	r3, [pc, #128]	; (801b1fc <udp_input+0x220>)
 801b17a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801b17e:	4925      	ldr	r1, [pc, #148]	; (801b214 <udp_input+0x238>)
 801b180:	4820      	ldr	r0, [pc, #128]	; (801b204 <udp_input+0x228>)
 801b182:	f006 fac9 	bl	8021718 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801b186:	6878      	ldr	r0, [r7, #4]
 801b188:	f7f9 f982 	bl	8014490 <pbuf_free>
      goto end;
 801b18c:	e032      	b.n	801b1f4 <udp_input+0x218>
    }

    if (pcb != NULL) {
 801b18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b190:	2b00      	cmp	r3, #0
 801b192:	d012      	beq.n	801b1ba <udp_input+0x1de>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801b194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b196:	699b      	ldr	r3, [r3, #24]
 801b198:	2b00      	cmp	r3, #0
 801b19a:	d00a      	beq.n	801b1b2 <udp_input+0x1d6>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801b19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b19e:	699c      	ldr	r4, [r3, #24]
 801b1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1a2:	69d8      	ldr	r0, [r3, #28]
 801b1a4:	8a3b      	ldrh	r3, [r7, #16]
 801b1a6:	9300      	str	r3, [sp, #0]
 801b1a8:	4b1b      	ldr	r3, [pc, #108]	; (801b218 <udp_input+0x23c>)
 801b1aa:	687a      	ldr	r2, [r7, #4]
 801b1ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b1ae:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801b1b0:	e021      	b.n	801b1f6 <udp_input+0x21a>
        pbuf_free(p);
 801b1b2:	6878      	ldr	r0, [r7, #4]
 801b1b4:	f7f9 f96c 	bl	8014490 <pbuf_free>
        goto end;
 801b1b8:	e01c      	b.n	801b1f4 <udp_input+0x218>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801b1ba:	7cfb      	ldrb	r3, [r7, #19]
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d112      	bne.n	801b1e6 <udp_input+0x20a>
 801b1c0:	4b12      	ldr	r3, [pc, #72]	; (801b20c <udp_input+0x230>)
 801b1c2:	695b      	ldr	r3, [r3, #20]
 801b1c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b1c8:	2be0      	cmp	r3, #224	; 0xe0
 801b1ca:	d00c      	beq.n	801b1e6 <udp_input+0x20a>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801b1cc:	4b0f      	ldr	r3, [pc, #60]	; (801b20c <udp_input+0x230>)
 801b1ce:	899b      	ldrh	r3, [r3, #12]
 801b1d0:	3308      	adds	r3, #8
 801b1d2:	b29b      	uxth	r3, r3
 801b1d4:	b21b      	sxth	r3, r3
 801b1d6:	4619      	mov	r1, r3
 801b1d8:	6878      	ldr	r0, [r7, #4]
 801b1da:	f7f9 f946 	bl	801446a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801b1de:	2103      	movs	r1, #3
 801b1e0:	6878      	ldr	r0, [r7, #4]
 801b1e2:	f003 fa13 	bl	801e60c <icmp_dest_unreach>
      pbuf_free(p);
 801b1e6:	6878      	ldr	r0, [r7, #4]
 801b1e8:	f7f9 f952 	bl	8014490 <pbuf_free>
  return;
 801b1ec:	e003      	b.n	801b1f6 <udp_input+0x21a>
    pbuf_free(p);
 801b1ee:	6878      	ldr	r0, [r7, #4]
 801b1f0:	f7f9 f94e 	bl	8014490 <pbuf_free>
  return;
 801b1f4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801b1f6:	372c      	adds	r7, #44	; 0x2c
 801b1f8:	46bd      	mov	sp, r7
 801b1fa:	bd90      	pop	{r4, r7, pc}
 801b1fc:	080263d8 	.word	0x080263d8
 801b200:	0802647c 	.word	0x0802647c
 801b204:	0802642c 	.word	0x0802642c
 801b208:	08026494 	.word	0x08026494
 801b20c:	2000eba4 	.word	0x2000eba4
 801b210:	200123ac 	.word	0x200123ac
 801b214:	080264b0 	.word	0x080264b0
 801b218:	2000ebb4 	.word	0x2000ebb4

0801b21c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801b21c:	b580      	push	{r7, lr}
 801b21e:	b088      	sub	sp, #32
 801b220:	af02      	add	r7, sp, #8
 801b222:	60f8      	str	r0, [r7, #12]
 801b224:	60b9      	str	r1, [r7, #8]
 801b226:	607a      	str	r2, [r7, #4]
 801b228:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801b22a:	68fb      	ldr	r3, [r7, #12]
 801b22c:	2b00      	cmp	r3, #0
 801b22e:	d109      	bne.n	801b244 <udp_sendto_if+0x28>
 801b230:	4b2e      	ldr	r3, [pc, #184]	; (801b2ec <udp_sendto_if+0xd0>)
 801b232:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b236:	492e      	ldr	r1, [pc, #184]	; (801b2f0 <udp_sendto_if+0xd4>)
 801b238:	482e      	ldr	r0, [pc, #184]	; (801b2f4 <udp_sendto_if+0xd8>)
 801b23a:	f006 fa6d 	bl	8021718 <iprintf>
 801b23e:	f06f 030f 	mvn.w	r3, #15
 801b242:	e04f      	b.n	801b2e4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801b244:	68bb      	ldr	r3, [r7, #8]
 801b246:	2b00      	cmp	r3, #0
 801b248:	d109      	bne.n	801b25e <udp_sendto_if+0x42>
 801b24a:	4b28      	ldr	r3, [pc, #160]	; (801b2ec <udp_sendto_if+0xd0>)
 801b24c:	f240 2281 	movw	r2, #641	; 0x281
 801b250:	4929      	ldr	r1, [pc, #164]	; (801b2f8 <udp_sendto_if+0xdc>)
 801b252:	4828      	ldr	r0, [pc, #160]	; (801b2f4 <udp_sendto_if+0xd8>)
 801b254:	f006 fa60 	bl	8021718 <iprintf>
 801b258:	f06f 030f 	mvn.w	r3, #15
 801b25c:	e042      	b.n	801b2e4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	2b00      	cmp	r3, #0
 801b262:	d109      	bne.n	801b278 <udp_sendto_if+0x5c>
 801b264:	4b21      	ldr	r3, [pc, #132]	; (801b2ec <udp_sendto_if+0xd0>)
 801b266:	f240 2282 	movw	r2, #642	; 0x282
 801b26a:	4924      	ldr	r1, [pc, #144]	; (801b2fc <udp_sendto_if+0xe0>)
 801b26c:	4821      	ldr	r0, [pc, #132]	; (801b2f4 <udp_sendto_if+0xd8>)
 801b26e:	f006 fa53 	bl	8021718 <iprintf>
 801b272:	f06f 030f 	mvn.w	r3, #15
 801b276:	e035      	b.n	801b2e4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801b278:	6a3b      	ldr	r3, [r7, #32]
 801b27a:	2b00      	cmp	r3, #0
 801b27c:	d109      	bne.n	801b292 <udp_sendto_if+0x76>
 801b27e:	4b1b      	ldr	r3, [pc, #108]	; (801b2ec <udp_sendto_if+0xd0>)
 801b280:	f240 2283 	movw	r2, #643	; 0x283
 801b284:	491e      	ldr	r1, [pc, #120]	; (801b300 <udp_sendto_if+0xe4>)
 801b286:	481b      	ldr	r0, [pc, #108]	; (801b2f4 <udp_sendto_if+0xd8>)
 801b288:	f006 fa46 	bl	8021718 <iprintf>
 801b28c:	f06f 030f 	mvn.w	r3, #15
 801b290:	e028      	b.n	801b2e4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b292:	68fb      	ldr	r3, [r7, #12]
 801b294:	2b00      	cmp	r3, #0
 801b296:	d009      	beq.n	801b2ac <udp_sendto_if+0x90>
 801b298:	68fb      	ldr	r3, [r7, #12]
 801b29a:	681b      	ldr	r3, [r3, #0]
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	d005      	beq.n	801b2ac <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801b2a0:	68fb      	ldr	r3, [r7, #12]
 801b2a2:	681b      	ldr	r3, [r3, #0]
 801b2a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b2a8:	2be0      	cmp	r3, #224	; 0xe0
 801b2aa:	d103      	bne.n	801b2b4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801b2ac:	6a3b      	ldr	r3, [r7, #32]
 801b2ae:	3304      	adds	r3, #4
 801b2b0:	617b      	str	r3, [r7, #20]
 801b2b2:	e00b      	b.n	801b2cc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801b2b4:	68fb      	ldr	r3, [r7, #12]
 801b2b6:	681a      	ldr	r2, [r3, #0]
 801b2b8:	6a3b      	ldr	r3, [r7, #32]
 801b2ba:	3304      	adds	r3, #4
 801b2bc:	681b      	ldr	r3, [r3, #0]
 801b2be:	429a      	cmp	r2, r3
 801b2c0:	d002      	beq.n	801b2c8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801b2c2:	f06f 0303 	mvn.w	r3, #3
 801b2c6:	e00d      	b.n	801b2e4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801b2c8:	68fb      	ldr	r3, [r7, #12]
 801b2ca:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801b2cc:	887a      	ldrh	r2, [r7, #2]
 801b2ce:	697b      	ldr	r3, [r7, #20]
 801b2d0:	9301      	str	r3, [sp, #4]
 801b2d2:	6a3b      	ldr	r3, [r7, #32]
 801b2d4:	9300      	str	r3, [sp, #0]
 801b2d6:	4613      	mov	r3, r2
 801b2d8:	687a      	ldr	r2, [r7, #4]
 801b2da:	68b9      	ldr	r1, [r7, #8]
 801b2dc:	68f8      	ldr	r0, [r7, #12]
 801b2de:	f000 f811 	bl	801b304 <udp_sendto_if_src>
 801b2e2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801b2e4:	4618      	mov	r0, r3
 801b2e6:	3718      	adds	r7, #24
 801b2e8:	46bd      	mov	sp, r7
 801b2ea:	bd80      	pop	{r7, pc}
 801b2ec:	080263d8 	.word	0x080263d8
 801b2f0:	0802654c 	.word	0x0802654c
 801b2f4:	0802642c 	.word	0x0802642c
 801b2f8:	08026568 	.word	0x08026568
 801b2fc:	08026584 	.word	0x08026584
 801b300:	080265a4 	.word	0x080265a4

0801b304 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801b304:	b580      	push	{r7, lr}
 801b306:	b08c      	sub	sp, #48	; 0x30
 801b308:	af04      	add	r7, sp, #16
 801b30a:	60f8      	str	r0, [r7, #12]
 801b30c:	60b9      	str	r1, [r7, #8]
 801b30e:	607a      	str	r2, [r7, #4]
 801b310:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801b312:	68fb      	ldr	r3, [r7, #12]
 801b314:	2b00      	cmp	r3, #0
 801b316:	d109      	bne.n	801b32c <udp_sendto_if_src+0x28>
 801b318:	4b65      	ldr	r3, [pc, #404]	; (801b4b0 <udp_sendto_if_src+0x1ac>)
 801b31a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801b31e:	4965      	ldr	r1, [pc, #404]	; (801b4b4 <udp_sendto_if_src+0x1b0>)
 801b320:	4865      	ldr	r0, [pc, #404]	; (801b4b8 <udp_sendto_if_src+0x1b4>)
 801b322:	f006 f9f9 	bl	8021718 <iprintf>
 801b326:	f06f 030f 	mvn.w	r3, #15
 801b32a:	e0bc      	b.n	801b4a6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801b32c:	68bb      	ldr	r3, [r7, #8]
 801b32e:	2b00      	cmp	r3, #0
 801b330:	d109      	bne.n	801b346 <udp_sendto_if_src+0x42>
 801b332:	4b5f      	ldr	r3, [pc, #380]	; (801b4b0 <udp_sendto_if_src+0x1ac>)
 801b334:	f240 22d2 	movw	r2, #722	; 0x2d2
 801b338:	4960      	ldr	r1, [pc, #384]	; (801b4bc <udp_sendto_if_src+0x1b8>)
 801b33a:	485f      	ldr	r0, [pc, #380]	; (801b4b8 <udp_sendto_if_src+0x1b4>)
 801b33c:	f006 f9ec 	bl	8021718 <iprintf>
 801b340:	f06f 030f 	mvn.w	r3, #15
 801b344:	e0af      	b.n	801b4a6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	2b00      	cmp	r3, #0
 801b34a:	d109      	bne.n	801b360 <udp_sendto_if_src+0x5c>
 801b34c:	4b58      	ldr	r3, [pc, #352]	; (801b4b0 <udp_sendto_if_src+0x1ac>)
 801b34e:	f240 22d3 	movw	r2, #723	; 0x2d3
 801b352:	495b      	ldr	r1, [pc, #364]	; (801b4c0 <udp_sendto_if_src+0x1bc>)
 801b354:	4858      	ldr	r0, [pc, #352]	; (801b4b8 <udp_sendto_if_src+0x1b4>)
 801b356:	f006 f9df 	bl	8021718 <iprintf>
 801b35a:	f06f 030f 	mvn.w	r3, #15
 801b35e:	e0a2      	b.n	801b4a6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801b360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b362:	2b00      	cmp	r3, #0
 801b364:	d109      	bne.n	801b37a <udp_sendto_if_src+0x76>
 801b366:	4b52      	ldr	r3, [pc, #328]	; (801b4b0 <udp_sendto_if_src+0x1ac>)
 801b368:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801b36c:	4955      	ldr	r1, [pc, #340]	; (801b4c4 <udp_sendto_if_src+0x1c0>)
 801b36e:	4852      	ldr	r0, [pc, #328]	; (801b4b8 <udp_sendto_if_src+0x1b4>)
 801b370:	f006 f9d2 	bl	8021718 <iprintf>
 801b374:	f06f 030f 	mvn.w	r3, #15
 801b378:	e095      	b.n	801b4a6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801b37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	d109      	bne.n	801b394 <udp_sendto_if_src+0x90>
 801b380:	4b4b      	ldr	r3, [pc, #300]	; (801b4b0 <udp_sendto_if_src+0x1ac>)
 801b382:	f240 22d5 	movw	r2, #725	; 0x2d5
 801b386:	4950      	ldr	r1, [pc, #320]	; (801b4c8 <udp_sendto_if_src+0x1c4>)
 801b388:	484b      	ldr	r0, [pc, #300]	; (801b4b8 <udp_sendto_if_src+0x1b4>)
 801b38a:	f006 f9c5 	bl	8021718 <iprintf>
 801b38e:	f06f 030f 	mvn.w	r3, #15
 801b392:	e088      	b.n	801b4a6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801b394:	68fb      	ldr	r3, [r7, #12]
 801b396:	8a5b      	ldrh	r3, [r3, #18]
 801b398:	2b00      	cmp	r3, #0
 801b39a:	d10f      	bne.n	801b3bc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b39c:	68f9      	ldr	r1, [r7, #12]
 801b39e:	68fb      	ldr	r3, [r7, #12]
 801b3a0:	8a5b      	ldrh	r3, [r3, #18]
 801b3a2:	461a      	mov	r2, r3
 801b3a4:	68f8      	ldr	r0, [r7, #12]
 801b3a6:	f000 f893 	bl	801b4d0 <udp_bind>
 801b3aa:	4603      	mov	r3, r0
 801b3ac:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801b3ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	d002      	beq.n	801b3bc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801b3b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b3ba:	e074      	b.n	801b4a6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801b3bc:	68bb      	ldr	r3, [r7, #8]
 801b3be:	891b      	ldrh	r3, [r3, #8]
 801b3c0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801b3c4:	4293      	cmp	r3, r2
 801b3c6:	d902      	bls.n	801b3ce <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801b3c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b3cc:	e06b      	b.n	801b4a6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801b3ce:	2108      	movs	r1, #8
 801b3d0:	68b8      	ldr	r0, [r7, #8]
 801b3d2:	f7f8 ffc7 	bl	8014364 <pbuf_add_header>
 801b3d6:	4603      	mov	r3, r0
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	d015      	beq.n	801b408 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801b3dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b3e0:	2108      	movs	r1, #8
 801b3e2:	2022      	movs	r0, #34	; 0x22
 801b3e4:	f7f8 fd70 	bl	8013ec8 <pbuf_alloc>
 801b3e8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801b3ea:	69fb      	ldr	r3, [r7, #28]
 801b3ec:	2b00      	cmp	r3, #0
 801b3ee:	d102      	bne.n	801b3f6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801b3f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b3f4:	e057      	b.n	801b4a6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801b3f6:	68bb      	ldr	r3, [r7, #8]
 801b3f8:	891b      	ldrh	r3, [r3, #8]
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d006      	beq.n	801b40c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801b3fe:	68b9      	ldr	r1, [r7, #8]
 801b400:	69f8      	ldr	r0, [r7, #28]
 801b402:	f7f9 f969 	bl	80146d8 <pbuf_chain>
 801b406:	e001      	b.n	801b40c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801b408:	68bb      	ldr	r3, [r7, #8]
 801b40a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801b40c:	69fb      	ldr	r3, [r7, #28]
 801b40e:	895b      	ldrh	r3, [r3, #10]
 801b410:	2b07      	cmp	r3, #7
 801b412:	d806      	bhi.n	801b422 <udp_sendto_if_src+0x11e>
 801b414:	4b26      	ldr	r3, [pc, #152]	; (801b4b0 <udp_sendto_if_src+0x1ac>)
 801b416:	f240 320d 	movw	r2, #781	; 0x30d
 801b41a:	492c      	ldr	r1, [pc, #176]	; (801b4cc <udp_sendto_if_src+0x1c8>)
 801b41c:	4826      	ldr	r0, [pc, #152]	; (801b4b8 <udp_sendto_if_src+0x1b4>)
 801b41e:	f006 f97b 	bl	8021718 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801b422:	69fb      	ldr	r3, [r7, #28]
 801b424:	685b      	ldr	r3, [r3, #4]
 801b426:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801b428:	68fb      	ldr	r3, [r7, #12]
 801b42a:	8a5b      	ldrh	r3, [r3, #18]
 801b42c:	4618      	mov	r0, r3
 801b42e:	f7f7 fc31 	bl	8012c94 <lwip_htons>
 801b432:	4603      	mov	r3, r0
 801b434:	461a      	mov	r2, r3
 801b436:	697b      	ldr	r3, [r7, #20]
 801b438:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801b43a:	887b      	ldrh	r3, [r7, #2]
 801b43c:	4618      	mov	r0, r3
 801b43e:	f7f7 fc29 	bl	8012c94 <lwip_htons>
 801b442:	4603      	mov	r3, r0
 801b444:	461a      	mov	r2, r3
 801b446:	697b      	ldr	r3, [r7, #20]
 801b448:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801b44a:	697b      	ldr	r3, [r7, #20]
 801b44c:	2200      	movs	r2, #0
 801b44e:	719a      	strb	r2, [r3, #6]
 801b450:	2200      	movs	r2, #0
 801b452:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801b454:	69fb      	ldr	r3, [r7, #28]
 801b456:	891b      	ldrh	r3, [r3, #8]
 801b458:	4618      	mov	r0, r3
 801b45a:	f7f7 fc1b 	bl	8012c94 <lwip_htons>
 801b45e:	4603      	mov	r3, r0
 801b460:	461a      	mov	r2, r3
 801b462:	697b      	ldr	r3, [r7, #20]
 801b464:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801b466:	2311      	movs	r3, #17
 801b468:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801b46a:	68fb      	ldr	r3, [r7, #12]
 801b46c:	7adb      	ldrb	r3, [r3, #11]
 801b46e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801b470:	68fb      	ldr	r3, [r7, #12]
 801b472:	7a9b      	ldrb	r3, [r3, #10]
 801b474:	7cb9      	ldrb	r1, [r7, #18]
 801b476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b478:	9202      	str	r2, [sp, #8]
 801b47a:	7cfa      	ldrb	r2, [r7, #19]
 801b47c:	9201      	str	r2, [sp, #4]
 801b47e:	9300      	str	r3, [sp, #0]
 801b480:	460b      	mov	r3, r1
 801b482:	687a      	ldr	r2, [r7, #4]
 801b484:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b486:	69f8      	ldr	r0, [r7, #28]
 801b488:	f003 fb50 	bl	801eb2c <ip4_output_if_src>
 801b48c:	4603      	mov	r3, r0
 801b48e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801b490:	69fa      	ldr	r2, [r7, #28]
 801b492:	68bb      	ldr	r3, [r7, #8]
 801b494:	429a      	cmp	r2, r3
 801b496:	d004      	beq.n	801b4a2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801b498:	69f8      	ldr	r0, [r7, #28]
 801b49a:	f7f8 fff9 	bl	8014490 <pbuf_free>
    q = NULL;
 801b49e:	2300      	movs	r3, #0
 801b4a0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801b4a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801b4a6:	4618      	mov	r0, r3
 801b4a8:	3720      	adds	r7, #32
 801b4aa:	46bd      	mov	sp, r7
 801b4ac:	bd80      	pop	{r7, pc}
 801b4ae:	bf00      	nop
 801b4b0:	080263d8 	.word	0x080263d8
 801b4b4:	080265c4 	.word	0x080265c4
 801b4b8:	0802642c 	.word	0x0802642c
 801b4bc:	080265e4 	.word	0x080265e4
 801b4c0:	08026604 	.word	0x08026604
 801b4c4:	08026628 	.word	0x08026628
 801b4c8:	0802664c 	.word	0x0802664c
 801b4cc:	08026670 	.word	0x08026670

0801b4d0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b4d0:	b580      	push	{r7, lr}
 801b4d2:	b086      	sub	sp, #24
 801b4d4:	af00      	add	r7, sp, #0
 801b4d6:	60f8      	str	r0, [r7, #12]
 801b4d8:	60b9      	str	r1, [r7, #8]
 801b4da:	4613      	mov	r3, r2
 801b4dc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801b4de:	68bb      	ldr	r3, [r7, #8]
 801b4e0:	2b00      	cmp	r3, #0
 801b4e2:	d101      	bne.n	801b4e8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801b4e4:	4b3f      	ldr	r3, [pc, #252]	; (801b5e4 <udp_bind+0x114>)
 801b4e6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b4e8:	68fb      	ldr	r3, [r7, #12]
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	d109      	bne.n	801b502 <udp_bind+0x32>
 801b4ee:	4b3e      	ldr	r3, [pc, #248]	; (801b5e8 <udp_bind+0x118>)
 801b4f0:	f240 32b7 	movw	r2, #951	; 0x3b7
 801b4f4:	493d      	ldr	r1, [pc, #244]	; (801b5ec <udp_bind+0x11c>)
 801b4f6:	483e      	ldr	r0, [pc, #248]	; (801b5f0 <udp_bind+0x120>)
 801b4f8:	f006 f90e 	bl	8021718 <iprintf>
 801b4fc:	f06f 030f 	mvn.w	r3, #15
 801b500:	e06c      	b.n	801b5dc <udp_bind+0x10c>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801b502:	2300      	movs	r3, #0
 801b504:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b506:	4b3b      	ldr	r3, [pc, #236]	; (801b5f4 <udp_bind+0x124>)
 801b508:	681b      	ldr	r3, [r3, #0]
 801b50a:	617b      	str	r3, [r7, #20]
 801b50c:	e009      	b.n	801b522 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801b50e:	68fa      	ldr	r2, [r7, #12]
 801b510:	697b      	ldr	r3, [r7, #20]
 801b512:	429a      	cmp	r2, r3
 801b514:	d102      	bne.n	801b51c <udp_bind+0x4c>
      rebind = 1;
 801b516:	2301      	movs	r3, #1
 801b518:	74fb      	strb	r3, [r7, #19]
      break;
 801b51a:	e005      	b.n	801b528 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b51c:	697b      	ldr	r3, [r7, #20]
 801b51e:	68db      	ldr	r3, [r3, #12]
 801b520:	617b      	str	r3, [r7, #20]
 801b522:	697b      	ldr	r3, [r7, #20]
 801b524:	2b00      	cmp	r3, #0
 801b526:	d1f2      	bne.n	801b50e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801b528:	88fb      	ldrh	r3, [r7, #6]
 801b52a:	2b00      	cmp	r3, #0
 801b52c:	d109      	bne.n	801b542 <udp_bind+0x72>
    port = udp_new_port();
 801b52e:	f7ff fcb9 	bl	801aea4 <udp_new_port>
 801b532:	4603      	mov	r3, r0
 801b534:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801b536:	88fb      	ldrh	r3, [r7, #6]
 801b538:	2b00      	cmp	r3, #0
 801b53a:	d138      	bne.n	801b5ae <udp_bind+0xde>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801b53c:	f06f 0307 	mvn.w	r3, #7
 801b540:	e04c      	b.n	801b5dc <udp_bind+0x10c>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b542:	4b2c      	ldr	r3, [pc, #176]	; (801b5f4 <udp_bind+0x124>)
 801b544:	681b      	ldr	r3, [r3, #0]
 801b546:	617b      	str	r3, [r7, #20]
 801b548:	e02e      	b.n	801b5a8 <udp_bind+0xd8>
      if (pcb != ipcb) {
 801b54a:	68fa      	ldr	r2, [r7, #12]
 801b54c:	697b      	ldr	r3, [r7, #20]
 801b54e:	429a      	cmp	r2, r3
 801b550:	d027      	beq.n	801b5a2 <udp_bind+0xd2>
        /* By default, we don't allow to bind to a port that any other udp
           PCB is already bound to, unless *all* PCBs with that port have tha
           REUSEADDR flag set. */
#if SO_REUSE
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 801b552:	68fb      	ldr	r3, [r7, #12]
 801b554:	7a5b      	ldrb	r3, [r3, #9]
 801b556:	f003 0304 	and.w	r3, r3, #4
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	d005      	beq.n	801b56a <udp_bind+0x9a>
            !ip_get_option(ipcb, SOF_REUSEADDR))
 801b55e:	697b      	ldr	r3, [r7, #20]
 801b560:	7a5b      	ldrb	r3, [r3, #9]
 801b562:	f003 0304 	and.w	r3, r3, #4
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 801b566:	2b00      	cmp	r3, #0
 801b568:	d11b      	bne.n	801b5a2 <udp_bind+0xd2>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801b56a:	697b      	ldr	r3, [r7, #20]
 801b56c:	8a5b      	ldrh	r3, [r3, #18]
 801b56e:	88fa      	ldrh	r2, [r7, #6]
 801b570:	429a      	cmp	r2, r3
 801b572:	d116      	bne.n	801b5a2 <udp_bind+0xd2>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b574:	697b      	ldr	r3, [r7, #20]
 801b576:	681a      	ldr	r2, [r3, #0]
 801b578:	68bb      	ldr	r3, [r7, #8]
 801b57a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801b57c:	429a      	cmp	r2, r3
 801b57e:	d00d      	beq.n	801b59c <udp_bind+0xcc>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b580:	68bb      	ldr	r3, [r7, #8]
 801b582:	2b00      	cmp	r3, #0
 801b584:	d00a      	beq.n	801b59c <udp_bind+0xcc>
 801b586:	68bb      	ldr	r3, [r7, #8]
 801b588:	681b      	ldr	r3, [r3, #0]
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	d006      	beq.n	801b59c <udp_bind+0xcc>
              ip_addr_isany(&ipcb->local_ip))) {
 801b58e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b590:	2b00      	cmp	r3, #0
 801b592:	d003      	beq.n	801b59c <udp_bind+0xcc>
              ip_addr_isany(&ipcb->local_ip))) {
 801b594:	697b      	ldr	r3, [r7, #20]
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d102      	bne.n	801b5a2 <udp_bind+0xd2>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801b59c:	f06f 0307 	mvn.w	r3, #7
 801b5a0:	e01c      	b.n	801b5dc <udp_bind+0x10c>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b5a2:	697b      	ldr	r3, [r7, #20]
 801b5a4:	68db      	ldr	r3, [r3, #12]
 801b5a6:	617b      	str	r3, [r7, #20]
 801b5a8:	697b      	ldr	r3, [r7, #20]
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d1cd      	bne.n	801b54a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801b5ae:	68bb      	ldr	r3, [r7, #8]
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	d002      	beq.n	801b5ba <udp_bind+0xea>
 801b5b4:	68bb      	ldr	r3, [r7, #8]
 801b5b6:	681b      	ldr	r3, [r3, #0]
 801b5b8:	e000      	b.n	801b5bc <udp_bind+0xec>
 801b5ba:	2300      	movs	r3, #0
 801b5bc:	68fa      	ldr	r2, [r7, #12]
 801b5be:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801b5c0:	68fb      	ldr	r3, [r7, #12]
 801b5c2:	88fa      	ldrh	r2, [r7, #6]
 801b5c4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801b5c6:	7cfb      	ldrb	r3, [r7, #19]
 801b5c8:	2b00      	cmp	r3, #0
 801b5ca:	d106      	bne.n	801b5da <udp_bind+0x10a>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801b5cc:	4b09      	ldr	r3, [pc, #36]	; (801b5f4 <udp_bind+0x124>)
 801b5ce:	681a      	ldr	r2, [r3, #0]
 801b5d0:	68fb      	ldr	r3, [r7, #12]
 801b5d2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801b5d4:	4a07      	ldr	r2, [pc, #28]	; (801b5f4 <udp_bind+0x124>)
 801b5d6:	68fb      	ldr	r3, [r7, #12]
 801b5d8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801b5da:	2300      	movs	r3, #0
}
 801b5dc:	4618      	mov	r0, r3
 801b5de:	3718      	adds	r7, #24
 801b5e0:	46bd      	mov	sp, r7
 801b5e2:	bd80      	pop	{r7, pc}
 801b5e4:	08027400 	.word	0x08027400
 801b5e8:	080263d8 	.word	0x080263d8
 801b5ec:	080266a0 	.word	0x080266a0
 801b5f0:	0802642c 	.word	0x0802642c
 801b5f4:	200123ac 	.word	0x200123ac

0801b5f8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b5f8:	b580      	push	{r7, lr}
 801b5fa:	b086      	sub	sp, #24
 801b5fc:	af00      	add	r7, sp, #0
 801b5fe:	60f8      	str	r0, [r7, #12]
 801b600:	60b9      	str	r1, [r7, #8]
 801b602:	4613      	mov	r3, r2
 801b604:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801b606:	68fb      	ldr	r3, [r7, #12]
 801b608:	2b00      	cmp	r3, #0
 801b60a:	d109      	bne.n	801b620 <udp_connect+0x28>
 801b60c:	4b2c      	ldr	r3, [pc, #176]	; (801b6c0 <udp_connect+0xc8>)
 801b60e:	f240 4235 	movw	r2, #1077	; 0x435
 801b612:	492c      	ldr	r1, [pc, #176]	; (801b6c4 <udp_connect+0xcc>)
 801b614:	482c      	ldr	r0, [pc, #176]	; (801b6c8 <udp_connect+0xd0>)
 801b616:	f006 f87f 	bl	8021718 <iprintf>
 801b61a:	f06f 030f 	mvn.w	r3, #15
 801b61e:	e04b      	b.n	801b6b8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801b620:	68bb      	ldr	r3, [r7, #8]
 801b622:	2b00      	cmp	r3, #0
 801b624:	d109      	bne.n	801b63a <udp_connect+0x42>
 801b626:	4b26      	ldr	r3, [pc, #152]	; (801b6c0 <udp_connect+0xc8>)
 801b628:	f240 4236 	movw	r2, #1078	; 0x436
 801b62c:	4927      	ldr	r1, [pc, #156]	; (801b6cc <udp_connect+0xd4>)
 801b62e:	4826      	ldr	r0, [pc, #152]	; (801b6c8 <udp_connect+0xd0>)
 801b630:	f006 f872 	bl	8021718 <iprintf>
 801b634:	f06f 030f 	mvn.w	r3, #15
 801b638:	e03e      	b.n	801b6b8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801b63a:	68fb      	ldr	r3, [r7, #12]
 801b63c:	8a5b      	ldrh	r3, [r3, #18]
 801b63e:	2b00      	cmp	r3, #0
 801b640:	d10f      	bne.n	801b662 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b642:	68f9      	ldr	r1, [r7, #12]
 801b644:	68fb      	ldr	r3, [r7, #12]
 801b646:	8a5b      	ldrh	r3, [r3, #18]
 801b648:	461a      	mov	r2, r3
 801b64a:	68f8      	ldr	r0, [r7, #12]
 801b64c:	f7ff ff40 	bl	801b4d0 <udp_bind>
 801b650:	4603      	mov	r3, r0
 801b652:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801b654:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b658:	2b00      	cmp	r3, #0
 801b65a:	d002      	beq.n	801b662 <udp_connect+0x6a>
      return err;
 801b65c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b660:	e02a      	b.n	801b6b8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801b662:	68bb      	ldr	r3, [r7, #8]
 801b664:	2b00      	cmp	r3, #0
 801b666:	d002      	beq.n	801b66e <udp_connect+0x76>
 801b668:	68bb      	ldr	r3, [r7, #8]
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	e000      	b.n	801b670 <udp_connect+0x78>
 801b66e:	2300      	movs	r3, #0
 801b670:	68fa      	ldr	r2, [r7, #12]
 801b672:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801b674:	68fb      	ldr	r3, [r7, #12]
 801b676:	88fa      	ldrh	r2, [r7, #6]
 801b678:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801b67a:	68fb      	ldr	r3, [r7, #12]
 801b67c:	7c1b      	ldrb	r3, [r3, #16]
 801b67e:	f043 0304 	orr.w	r3, r3, #4
 801b682:	b2da      	uxtb	r2, r3
 801b684:	68fb      	ldr	r3, [r7, #12]
 801b686:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b688:	4b11      	ldr	r3, [pc, #68]	; (801b6d0 <udp_connect+0xd8>)
 801b68a:	681b      	ldr	r3, [r3, #0]
 801b68c:	617b      	str	r3, [r7, #20]
 801b68e:	e008      	b.n	801b6a2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801b690:	68fa      	ldr	r2, [r7, #12]
 801b692:	697b      	ldr	r3, [r7, #20]
 801b694:	429a      	cmp	r2, r3
 801b696:	d101      	bne.n	801b69c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801b698:	2300      	movs	r3, #0
 801b69a:	e00d      	b.n	801b6b8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b69c:	697b      	ldr	r3, [r7, #20]
 801b69e:	68db      	ldr	r3, [r3, #12]
 801b6a0:	617b      	str	r3, [r7, #20]
 801b6a2:	697b      	ldr	r3, [r7, #20]
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	d1f3      	bne.n	801b690 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801b6a8:	4b09      	ldr	r3, [pc, #36]	; (801b6d0 <udp_connect+0xd8>)
 801b6aa:	681a      	ldr	r2, [r3, #0]
 801b6ac:	68fb      	ldr	r3, [r7, #12]
 801b6ae:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801b6b0:	4a07      	ldr	r2, [pc, #28]	; (801b6d0 <udp_connect+0xd8>)
 801b6b2:	68fb      	ldr	r3, [r7, #12]
 801b6b4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801b6b6:	2300      	movs	r3, #0
}
 801b6b8:	4618      	mov	r0, r3
 801b6ba:	3718      	adds	r7, #24
 801b6bc:	46bd      	mov	sp, r7
 801b6be:	bd80      	pop	{r7, pc}
 801b6c0:	080263d8 	.word	0x080263d8
 801b6c4:	080266b8 	.word	0x080266b8
 801b6c8:	0802642c 	.word	0x0802642c
 801b6cc:	080266d4 	.word	0x080266d4
 801b6d0:	200123ac 	.word	0x200123ac

0801b6d4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801b6d4:	b580      	push	{r7, lr}
 801b6d6:	b084      	sub	sp, #16
 801b6d8:	af00      	add	r7, sp, #0
 801b6da:	60f8      	str	r0, [r7, #12]
 801b6dc:	60b9      	str	r1, [r7, #8]
 801b6de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801b6e0:	68fb      	ldr	r3, [r7, #12]
 801b6e2:	2b00      	cmp	r3, #0
 801b6e4:	d107      	bne.n	801b6f6 <udp_recv+0x22>
 801b6e6:	4b08      	ldr	r3, [pc, #32]	; (801b708 <udp_recv+0x34>)
 801b6e8:	f240 428a 	movw	r2, #1162	; 0x48a
 801b6ec:	4907      	ldr	r1, [pc, #28]	; (801b70c <udp_recv+0x38>)
 801b6ee:	4808      	ldr	r0, [pc, #32]	; (801b710 <udp_recv+0x3c>)
 801b6f0:	f006 f812 	bl	8021718 <iprintf>
 801b6f4:	e005      	b.n	801b702 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801b6f6:	68fb      	ldr	r3, [r7, #12]
 801b6f8:	68ba      	ldr	r2, [r7, #8]
 801b6fa:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801b6fc:	68fb      	ldr	r3, [r7, #12]
 801b6fe:	687a      	ldr	r2, [r7, #4]
 801b700:	61da      	str	r2, [r3, #28]
}
 801b702:	3710      	adds	r7, #16
 801b704:	46bd      	mov	sp, r7
 801b706:	bd80      	pop	{r7, pc}
 801b708:	080263d8 	.word	0x080263d8
 801b70c:	0802670c 	.word	0x0802670c
 801b710:	0802642c 	.word	0x0802642c

0801b714 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801b714:	b580      	push	{r7, lr}
 801b716:	b084      	sub	sp, #16
 801b718:	af00      	add	r7, sp, #0
 801b71a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	2b00      	cmp	r3, #0
 801b720:	d107      	bne.n	801b732 <udp_remove+0x1e>
 801b722:	4b19      	ldr	r3, [pc, #100]	; (801b788 <udp_remove+0x74>)
 801b724:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801b728:	4918      	ldr	r1, [pc, #96]	; (801b78c <udp_remove+0x78>)
 801b72a:	4819      	ldr	r0, [pc, #100]	; (801b790 <udp_remove+0x7c>)
 801b72c:	f005 fff4 	bl	8021718 <iprintf>
 801b730:	e026      	b.n	801b780 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801b732:	4b18      	ldr	r3, [pc, #96]	; (801b794 <udp_remove+0x80>)
 801b734:	681b      	ldr	r3, [r3, #0]
 801b736:	687a      	ldr	r2, [r7, #4]
 801b738:	429a      	cmp	r2, r3
 801b73a:	d105      	bne.n	801b748 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801b73c:	4b15      	ldr	r3, [pc, #84]	; (801b794 <udp_remove+0x80>)
 801b73e:	681b      	ldr	r3, [r3, #0]
 801b740:	68db      	ldr	r3, [r3, #12]
 801b742:	4a14      	ldr	r2, [pc, #80]	; (801b794 <udp_remove+0x80>)
 801b744:	6013      	str	r3, [r2, #0]
 801b746:	e017      	b.n	801b778 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b748:	4b12      	ldr	r3, [pc, #72]	; (801b794 <udp_remove+0x80>)
 801b74a:	681b      	ldr	r3, [r3, #0]
 801b74c:	60fb      	str	r3, [r7, #12]
 801b74e:	e010      	b.n	801b772 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801b750:	68fb      	ldr	r3, [r7, #12]
 801b752:	68db      	ldr	r3, [r3, #12]
 801b754:	2b00      	cmp	r3, #0
 801b756:	d009      	beq.n	801b76c <udp_remove+0x58>
 801b758:	68fb      	ldr	r3, [r7, #12]
 801b75a:	68db      	ldr	r3, [r3, #12]
 801b75c:	687a      	ldr	r2, [r7, #4]
 801b75e:	429a      	cmp	r2, r3
 801b760:	d104      	bne.n	801b76c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	68da      	ldr	r2, [r3, #12]
 801b766:	68fb      	ldr	r3, [r7, #12]
 801b768:	60da      	str	r2, [r3, #12]
        break;
 801b76a:	e005      	b.n	801b778 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b76c:	68fb      	ldr	r3, [r7, #12]
 801b76e:	68db      	ldr	r3, [r3, #12]
 801b770:	60fb      	str	r3, [r7, #12]
 801b772:	68fb      	ldr	r3, [r7, #12]
 801b774:	2b00      	cmp	r3, #0
 801b776:	d1eb      	bne.n	801b750 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801b778:	6879      	ldr	r1, [r7, #4]
 801b77a:	2000      	movs	r0, #0
 801b77c:	f7f7 ffd8 	bl	8013730 <memp_free>
}
 801b780:	3710      	adds	r7, #16
 801b782:	46bd      	mov	sp, r7
 801b784:	bd80      	pop	{r7, pc}
 801b786:	bf00      	nop
 801b788:	080263d8 	.word	0x080263d8
 801b78c:	08026724 	.word	0x08026724
 801b790:	0802642c 	.word	0x0802642c
 801b794:	200123ac 	.word	0x200123ac

0801b798 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801b798:	b580      	push	{r7, lr}
 801b79a:	b082      	sub	sp, #8
 801b79c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801b79e:	2000      	movs	r0, #0
 801b7a0:	f7f7 ff50 	bl	8013644 <memp_malloc>
 801b7a4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	2b00      	cmp	r3, #0
 801b7aa:	d007      	beq.n	801b7bc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801b7ac:	2220      	movs	r2, #32
 801b7ae:	2100      	movs	r1, #0
 801b7b0:	6878      	ldr	r0, [r7, #4]
 801b7b2:	f006 f9c7 	bl	8021b44 <memset>
    pcb->ttl = UDP_TTL;
 801b7b6:	687b      	ldr	r3, [r7, #4]
 801b7b8:	22ff      	movs	r2, #255	; 0xff
 801b7ba:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801b7bc:	687b      	ldr	r3, [r7, #4]
}
 801b7be:	4618      	mov	r0, r3
 801b7c0:	3708      	adds	r7, #8
 801b7c2:	46bd      	mov	sp, r7
 801b7c4:	bd80      	pop	{r7, pc}

0801b7c6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801b7c6:	b580      	push	{r7, lr}
 801b7c8:	b084      	sub	sp, #16
 801b7ca:	af00      	add	r7, sp, #0
 801b7cc:	4603      	mov	r3, r0
 801b7ce:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801b7d0:	f7ff ffe2 	bl	801b798 <udp_new>
 801b7d4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801b7d6:	68fb      	ldr	r3, [r7, #12]
}
 801b7d8:	4618      	mov	r0, r3
 801b7da:	3710      	adds	r7, #16
 801b7dc:	46bd      	mov	sp, r7
 801b7de:	bd80      	pop	{r7, pc}

0801b7e0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801b7e0:	b480      	push	{r7}
 801b7e2:	b085      	sub	sp, #20
 801b7e4:	af00      	add	r7, sp, #0
 801b7e6:	6078      	str	r0, [r7, #4]
 801b7e8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801b7ea:	687b      	ldr	r3, [r7, #4]
 801b7ec:	2b00      	cmp	r3, #0
 801b7ee:	d01e      	beq.n	801b82e <udp_netif_ip_addr_changed+0x4e>
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	681b      	ldr	r3, [r3, #0]
 801b7f4:	2b00      	cmp	r3, #0
 801b7f6:	d01a      	beq.n	801b82e <udp_netif_ip_addr_changed+0x4e>
 801b7f8:	683b      	ldr	r3, [r7, #0]
 801b7fa:	2b00      	cmp	r3, #0
 801b7fc:	d017      	beq.n	801b82e <udp_netif_ip_addr_changed+0x4e>
 801b7fe:	683b      	ldr	r3, [r7, #0]
 801b800:	681b      	ldr	r3, [r3, #0]
 801b802:	2b00      	cmp	r3, #0
 801b804:	d013      	beq.n	801b82e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b806:	4b0d      	ldr	r3, [pc, #52]	; (801b83c <udp_netif_ip_addr_changed+0x5c>)
 801b808:	681b      	ldr	r3, [r3, #0]
 801b80a:	60fb      	str	r3, [r7, #12]
 801b80c:	e00c      	b.n	801b828 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801b80e:	68fb      	ldr	r3, [r7, #12]
 801b810:	681a      	ldr	r2, [r3, #0]
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	681b      	ldr	r3, [r3, #0]
 801b816:	429a      	cmp	r2, r3
 801b818:	d103      	bne.n	801b822 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801b81a:	683b      	ldr	r3, [r7, #0]
 801b81c:	681a      	ldr	r2, [r3, #0]
 801b81e:	68fb      	ldr	r3, [r7, #12]
 801b820:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b822:	68fb      	ldr	r3, [r7, #12]
 801b824:	68db      	ldr	r3, [r3, #12]
 801b826:	60fb      	str	r3, [r7, #12]
 801b828:	68fb      	ldr	r3, [r7, #12]
 801b82a:	2b00      	cmp	r3, #0
 801b82c:	d1ef      	bne.n	801b80e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801b82e:	bf00      	nop
 801b830:	3714      	adds	r7, #20
 801b832:	46bd      	mov	sp, r7
 801b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b838:	4770      	bx	lr
 801b83a:	bf00      	nop
 801b83c:	200123ac 	.word	0x200123ac

0801b840 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801b840:	b580      	push	{r7, lr}
 801b842:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801b844:	4b20      	ldr	r3, [pc, #128]	; (801b8c8 <dhcp_inc_pcb_refcount+0x88>)
 801b846:	781b      	ldrb	r3, [r3, #0]
 801b848:	2b00      	cmp	r3, #0
 801b84a:	d133      	bne.n	801b8b4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801b84c:	4b1f      	ldr	r3, [pc, #124]	; (801b8cc <dhcp_inc_pcb_refcount+0x8c>)
 801b84e:	681b      	ldr	r3, [r3, #0]
 801b850:	2b00      	cmp	r3, #0
 801b852:	d005      	beq.n	801b860 <dhcp_inc_pcb_refcount+0x20>
 801b854:	4b1e      	ldr	r3, [pc, #120]	; (801b8d0 <dhcp_inc_pcb_refcount+0x90>)
 801b856:	22e5      	movs	r2, #229	; 0xe5
 801b858:	491e      	ldr	r1, [pc, #120]	; (801b8d4 <dhcp_inc_pcb_refcount+0x94>)
 801b85a:	481f      	ldr	r0, [pc, #124]	; (801b8d8 <dhcp_inc_pcb_refcount+0x98>)
 801b85c:	f005 ff5c 	bl	8021718 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801b860:	f7ff ff9a 	bl	801b798 <udp_new>
 801b864:	4603      	mov	r3, r0
 801b866:	4a19      	ldr	r2, [pc, #100]	; (801b8cc <dhcp_inc_pcb_refcount+0x8c>)
 801b868:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801b86a:	4b18      	ldr	r3, [pc, #96]	; (801b8cc <dhcp_inc_pcb_refcount+0x8c>)
 801b86c:	681b      	ldr	r3, [r3, #0]
 801b86e:	2b00      	cmp	r3, #0
 801b870:	d102      	bne.n	801b878 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801b872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b876:	e024      	b.n	801b8c2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801b878:	4b14      	ldr	r3, [pc, #80]	; (801b8cc <dhcp_inc_pcb_refcount+0x8c>)
 801b87a:	681b      	ldr	r3, [r3, #0]
 801b87c:	7a5a      	ldrb	r2, [r3, #9]
 801b87e:	4b13      	ldr	r3, [pc, #76]	; (801b8cc <dhcp_inc_pcb_refcount+0x8c>)
 801b880:	681b      	ldr	r3, [r3, #0]
 801b882:	f042 0220 	orr.w	r2, r2, #32
 801b886:	b2d2      	uxtb	r2, r2
 801b888:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801b88a:	4b10      	ldr	r3, [pc, #64]	; (801b8cc <dhcp_inc_pcb_refcount+0x8c>)
 801b88c:	681b      	ldr	r3, [r3, #0]
 801b88e:	2244      	movs	r2, #68	; 0x44
 801b890:	4912      	ldr	r1, [pc, #72]	; (801b8dc <dhcp_inc_pcb_refcount+0x9c>)
 801b892:	4618      	mov	r0, r3
 801b894:	f7ff fe1c 	bl	801b4d0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801b898:	4b0c      	ldr	r3, [pc, #48]	; (801b8cc <dhcp_inc_pcb_refcount+0x8c>)
 801b89a:	681b      	ldr	r3, [r3, #0]
 801b89c:	2243      	movs	r2, #67	; 0x43
 801b89e:	490f      	ldr	r1, [pc, #60]	; (801b8dc <dhcp_inc_pcb_refcount+0x9c>)
 801b8a0:	4618      	mov	r0, r3
 801b8a2:	f7ff fea9 	bl	801b5f8 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801b8a6:	4b09      	ldr	r3, [pc, #36]	; (801b8cc <dhcp_inc_pcb_refcount+0x8c>)
 801b8a8:	681b      	ldr	r3, [r3, #0]
 801b8aa:	2200      	movs	r2, #0
 801b8ac:	490c      	ldr	r1, [pc, #48]	; (801b8e0 <dhcp_inc_pcb_refcount+0xa0>)
 801b8ae:	4618      	mov	r0, r3
 801b8b0:	f7ff ff10 	bl	801b6d4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 801b8b4:	4b04      	ldr	r3, [pc, #16]	; (801b8c8 <dhcp_inc_pcb_refcount+0x88>)
 801b8b6:	781b      	ldrb	r3, [r3, #0]
 801b8b8:	3301      	adds	r3, #1
 801b8ba:	b2da      	uxtb	r2, r3
 801b8bc:	4b02      	ldr	r3, [pc, #8]	; (801b8c8 <dhcp_inc_pcb_refcount+0x88>)
 801b8be:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801b8c0:	2300      	movs	r3, #0
}
 801b8c2:	4618      	mov	r0, r3
 801b8c4:	bd80      	pop	{r7, pc}
 801b8c6:	bf00      	nop
 801b8c8:	200123dc 	.word	0x200123dc
 801b8cc:	200123d8 	.word	0x200123d8
 801b8d0:	0802673c 	.word	0x0802673c
 801b8d4:	08026774 	.word	0x08026774
 801b8d8:	0802679c 	.word	0x0802679c
 801b8dc:	08027400 	.word	0x08027400
 801b8e0:	0801d175 	.word	0x0801d175

0801b8e4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801b8e4:	b580      	push	{r7, lr}
 801b8e6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801b8e8:	4b0e      	ldr	r3, [pc, #56]	; (801b924 <dhcp_dec_pcb_refcount+0x40>)
 801b8ea:	781b      	ldrb	r3, [r3, #0]
 801b8ec:	2b00      	cmp	r3, #0
 801b8ee:	d105      	bne.n	801b8fc <dhcp_dec_pcb_refcount+0x18>
 801b8f0:	4b0d      	ldr	r3, [pc, #52]	; (801b928 <dhcp_dec_pcb_refcount+0x44>)
 801b8f2:	22ff      	movs	r2, #255	; 0xff
 801b8f4:	490d      	ldr	r1, [pc, #52]	; (801b92c <dhcp_dec_pcb_refcount+0x48>)
 801b8f6:	480e      	ldr	r0, [pc, #56]	; (801b930 <dhcp_dec_pcb_refcount+0x4c>)
 801b8f8:	f005 ff0e 	bl	8021718 <iprintf>
  dhcp_pcb_refcount--;
 801b8fc:	4b09      	ldr	r3, [pc, #36]	; (801b924 <dhcp_dec_pcb_refcount+0x40>)
 801b8fe:	781b      	ldrb	r3, [r3, #0]
 801b900:	3b01      	subs	r3, #1
 801b902:	b2da      	uxtb	r2, r3
 801b904:	4b07      	ldr	r3, [pc, #28]	; (801b924 <dhcp_dec_pcb_refcount+0x40>)
 801b906:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801b908:	4b06      	ldr	r3, [pc, #24]	; (801b924 <dhcp_dec_pcb_refcount+0x40>)
 801b90a:	781b      	ldrb	r3, [r3, #0]
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d107      	bne.n	801b920 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801b910:	4b08      	ldr	r3, [pc, #32]	; (801b934 <dhcp_dec_pcb_refcount+0x50>)
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	4618      	mov	r0, r3
 801b916:	f7ff fefd 	bl	801b714 <udp_remove>
    dhcp_pcb = NULL;
 801b91a:	4b06      	ldr	r3, [pc, #24]	; (801b934 <dhcp_dec_pcb_refcount+0x50>)
 801b91c:	2200      	movs	r2, #0
 801b91e:	601a      	str	r2, [r3, #0]
  }
}
 801b920:	bf00      	nop
 801b922:	bd80      	pop	{r7, pc}
 801b924:	200123dc 	.word	0x200123dc
 801b928:	0802673c 	.word	0x0802673c
 801b92c:	080267c4 	.word	0x080267c4
 801b930:	0802679c 	.word	0x0802679c
 801b934:	200123d8 	.word	0x200123d8

0801b938 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801b938:	b580      	push	{r7, lr}
 801b93a:	b084      	sub	sp, #16
 801b93c:	af00      	add	r7, sp, #0
 801b93e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b944:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801b946:	210c      	movs	r1, #12
 801b948:	68f8      	ldr	r0, [r7, #12]
 801b94a:	f001 f855 	bl	801c9f8 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801b94e:	4b06      	ldr	r3, [pc, #24]	; (801b968 <dhcp_handle_nak+0x30>)
 801b950:	4a05      	ldr	r2, [pc, #20]	; (801b968 <dhcp_handle_nak+0x30>)
 801b952:	4905      	ldr	r1, [pc, #20]	; (801b968 <dhcp_handle_nak+0x30>)
 801b954:	6878      	ldr	r0, [r7, #4]
 801b956:	f7f8 f88d 	bl	8013a74 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801b95a:	6878      	ldr	r0, [r7, #4]
 801b95c:	f000 fc48 	bl	801c1f0 <dhcp_discover>
}
 801b960:	bf00      	nop
 801b962:	3710      	adds	r7, #16
 801b964:	46bd      	mov	sp, r7
 801b966:	bd80      	pop	{r7, pc}
 801b968:	08027400 	.word	0x08027400

0801b96c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801b96c:	b580      	push	{r7, lr}
 801b96e:	b084      	sub	sp, #16
 801b970:	af00      	add	r7, sp, #0
 801b972:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b978:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801b97a:	2108      	movs	r1, #8
 801b97c:	68f8      	ldr	r0, [r7, #12]
 801b97e:	f001 f83b 	bl	801c9f8 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801b982:	68fb      	ldr	r3, [r7, #12]
 801b984:	331c      	adds	r3, #28
 801b986:	2200      	movs	r2, #0
 801b988:	4619      	mov	r1, r3
 801b98a:	6878      	ldr	r0, [r7, #4]
 801b98c:	f002 fb3c 	bl	801e008 <etharp_query>
 801b990:	4603      	mov	r3, r0
 801b992:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801b994:	68fb      	ldr	r3, [r7, #12]
 801b996:	799b      	ldrb	r3, [r3, #6]
 801b998:	2bff      	cmp	r3, #255	; 0xff
 801b99a:	d005      	beq.n	801b9a8 <dhcp_check+0x3c>
    dhcp->tries++;
 801b99c:	68fb      	ldr	r3, [r7, #12]
 801b99e:	799b      	ldrb	r3, [r3, #6]
 801b9a0:	3301      	adds	r3, #1
 801b9a2:	b2da      	uxtb	r2, r3
 801b9a4:	68fb      	ldr	r3, [r7, #12]
 801b9a6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801b9a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801b9ac:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801b9ae:	893b      	ldrh	r3, [r7, #8]
 801b9b0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801b9b4:	4a06      	ldr	r2, [pc, #24]	; (801b9d0 <dhcp_check+0x64>)
 801b9b6:	fb82 1203 	smull	r1, r2, r2, r3
 801b9ba:	1152      	asrs	r2, r2, #5
 801b9bc:	17db      	asrs	r3, r3, #31
 801b9be:	1ad3      	subs	r3, r2, r3
 801b9c0:	b29a      	uxth	r2, r3
 801b9c2:	68fb      	ldr	r3, [r7, #12]
 801b9c4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801b9c6:	bf00      	nop
 801b9c8:	3710      	adds	r7, #16
 801b9ca:	46bd      	mov	sp, r7
 801b9cc:	bd80      	pop	{r7, pc}
 801b9ce:	bf00      	nop
 801b9d0:	10624dd3 	.word	0x10624dd3

0801b9d4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801b9d4:	b580      	push	{r7, lr}
 801b9d6:	b084      	sub	sp, #16
 801b9d8:	af00      	add	r7, sp, #0
 801b9da:	6078      	str	r0, [r7, #4]
 801b9dc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b9e2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801b9e4:	4b0c      	ldr	r3, [pc, #48]	; (801ba18 <dhcp_handle_offer+0x44>)
 801b9e6:	789b      	ldrb	r3, [r3, #2]
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d011      	beq.n	801ba10 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801b9ec:	68fb      	ldr	r3, [r7, #12]
 801b9ee:	2200      	movs	r2, #0
 801b9f0:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801b9f2:	4b0a      	ldr	r3, [pc, #40]	; (801ba1c <dhcp_handle_offer+0x48>)
 801b9f4:	689b      	ldr	r3, [r3, #8]
 801b9f6:	4618      	mov	r0, r3
 801b9f8:	f7f7 f961 	bl	8012cbe <lwip_htonl>
 801b9fc:	4602      	mov	r2, r0
 801b9fe:	68fb      	ldr	r3, [r7, #12]
 801ba00:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801ba02:	683b      	ldr	r3, [r7, #0]
 801ba04:	691a      	ldr	r2, [r3, #16]
 801ba06:	68fb      	ldr	r3, [r7, #12]
 801ba08:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801ba0a:	6878      	ldr	r0, [r7, #4]
 801ba0c:	f000 f808 	bl	801ba20 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801ba10:	bf00      	nop
 801ba12:	3710      	adds	r7, #16
 801ba14:	46bd      	mov	sp, r7
 801ba16:	bd80      	pop	{r7, pc}
 801ba18:	200123d0 	.word	0x200123d0
 801ba1c:	200123b0 	.word	0x200123b0

0801ba20 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801ba20:	b5b0      	push	{r4, r5, r7, lr}
 801ba22:	b08a      	sub	sp, #40	; 0x28
 801ba24:	af02      	add	r7, sp, #8
 801ba26:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801ba28:	687b      	ldr	r3, [r7, #4]
 801ba2a:	2b00      	cmp	r3, #0
 801ba2c:	d109      	bne.n	801ba42 <dhcp_select+0x22>
 801ba2e:	4b71      	ldr	r3, [pc, #452]	; (801bbf4 <dhcp_select+0x1d4>)
 801ba30:	f240 1277 	movw	r2, #375	; 0x177
 801ba34:	4970      	ldr	r1, [pc, #448]	; (801bbf8 <dhcp_select+0x1d8>)
 801ba36:	4871      	ldr	r0, [pc, #452]	; (801bbfc <dhcp_select+0x1dc>)
 801ba38:	f005 fe6e 	bl	8021718 <iprintf>
 801ba3c:	f06f 030f 	mvn.w	r3, #15
 801ba40:	e0d3      	b.n	801bbea <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba46:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801ba48:	69bb      	ldr	r3, [r7, #24]
 801ba4a:	2b00      	cmp	r3, #0
 801ba4c:	d109      	bne.n	801ba62 <dhcp_select+0x42>
 801ba4e:	4b69      	ldr	r3, [pc, #420]	; (801bbf4 <dhcp_select+0x1d4>)
 801ba50:	f240 1279 	movw	r2, #377	; 0x179
 801ba54:	496a      	ldr	r1, [pc, #424]	; (801bc00 <dhcp_select+0x1e0>)
 801ba56:	4869      	ldr	r0, [pc, #420]	; (801bbfc <dhcp_select+0x1dc>)
 801ba58:	f005 fe5e 	bl	8021718 <iprintf>
 801ba5c:	f06f 0305 	mvn.w	r3, #5
 801ba60:	e0c3      	b.n	801bbea <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801ba62:	2101      	movs	r1, #1
 801ba64:	69b8      	ldr	r0, [r7, #24]
 801ba66:	f000 ffc7 	bl	801c9f8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801ba6a:	f107 030c 	add.w	r3, r7, #12
 801ba6e:	2203      	movs	r2, #3
 801ba70:	69b9      	ldr	r1, [r7, #24]
 801ba72:	6878      	ldr	r0, [r7, #4]
 801ba74:	f001 fc4c 	bl	801d310 <dhcp_create_msg>
 801ba78:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801ba7a:	697b      	ldr	r3, [r7, #20]
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	f000 8085 	beq.w	801bb8c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801ba82:	697b      	ldr	r3, [r7, #20]
 801ba84:	685b      	ldr	r3, [r3, #4]
 801ba86:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ba88:	89b8      	ldrh	r0, [r7, #12]
 801ba8a:	693b      	ldr	r3, [r7, #16]
 801ba8c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ba90:	2302      	movs	r3, #2
 801ba92:	2239      	movs	r2, #57	; 0x39
 801ba94:	f000 ffca 	bl	801ca2c <dhcp_option>
 801ba98:	4603      	mov	r3, r0
 801ba9a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801ba9c:	89b8      	ldrh	r0, [r7, #12]
 801ba9e:	693b      	ldr	r3, [r7, #16]
 801baa0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801baa4:	687b      	ldr	r3, [r7, #4]
 801baa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801baa8:	461a      	mov	r2, r3
 801baaa:	f001 f819 	bl	801cae0 <dhcp_option_short>
 801baae:	4603      	mov	r3, r0
 801bab0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801bab2:	89b8      	ldrh	r0, [r7, #12]
 801bab4:	693b      	ldr	r3, [r7, #16]
 801bab6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801baba:	2304      	movs	r3, #4
 801babc:	2232      	movs	r2, #50	; 0x32
 801babe:	f000 ffb5 	bl	801ca2c <dhcp_option>
 801bac2:	4603      	mov	r3, r0
 801bac4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801bac6:	89bc      	ldrh	r4, [r7, #12]
 801bac8:	693b      	ldr	r3, [r7, #16]
 801baca:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801bace:	69bb      	ldr	r3, [r7, #24]
 801bad0:	69db      	ldr	r3, [r3, #28]
 801bad2:	4618      	mov	r0, r3
 801bad4:	f7f7 f8f3 	bl	8012cbe <lwip_htonl>
 801bad8:	4603      	mov	r3, r0
 801bada:	461a      	mov	r2, r3
 801badc:	4629      	mov	r1, r5
 801bade:	4620      	mov	r0, r4
 801bae0:	f001 f830 	bl	801cb44 <dhcp_option_long>
 801bae4:	4603      	mov	r3, r0
 801bae6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801bae8:	89b8      	ldrh	r0, [r7, #12]
 801baea:	693b      	ldr	r3, [r7, #16]
 801baec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801baf0:	2304      	movs	r3, #4
 801baf2:	2236      	movs	r2, #54	; 0x36
 801baf4:	f000 ff9a 	bl	801ca2c <dhcp_option>
 801baf8:	4603      	mov	r3, r0
 801bafa:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801bafc:	89bc      	ldrh	r4, [r7, #12]
 801bafe:	693b      	ldr	r3, [r7, #16]
 801bb00:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801bb04:	69bb      	ldr	r3, [r7, #24]
 801bb06:	699b      	ldr	r3, [r3, #24]
 801bb08:	4618      	mov	r0, r3
 801bb0a:	f7f7 f8d8 	bl	8012cbe <lwip_htonl>
 801bb0e:	4603      	mov	r3, r0
 801bb10:	461a      	mov	r2, r3
 801bb12:	4629      	mov	r1, r5
 801bb14:	4620      	mov	r0, r4
 801bb16:	f001 f815 	bl	801cb44 <dhcp_option_long>
 801bb1a:	4603      	mov	r3, r0
 801bb1c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801bb1e:	89b8      	ldrh	r0, [r7, #12]
 801bb20:	693b      	ldr	r3, [r7, #16]
 801bb22:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801bb26:	2303      	movs	r3, #3
 801bb28:	2237      	movs	r2, #55	; 0x37
 801bb2a:	f000 ff7f 	bl	801ca2c <dhcp_option>
 801bb2e:	4603      	mov	r3, r0
 801bb30:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801bb32:	2300      	movs	r3, #0
 801bb34:	77bb      	strb	r3, [r7, #30]
 801bb36:	e00e      	b.n	801bb56 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801bb38:	89b8      	ldrh	r0, [r7, #12]
 801bb3a:	693b      	ldr	r3, [r7, #16]
 801bb3c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801bb40:	7fbb      	ldrb	r3, [r7, #30]
 801bb42:	4a30      	ldr	r2, [pc, #192]	; (801bc04 <dhcp_select+0x1e4>)
 801bb44:	5cd3      	ldrb	r3, [r2, r3]
 801bb46:	461a      	mov	r2, r3
 801bb48:	f000 ffa4 	bl	801ca94 <dhcp_option_byte>
 801bb4c:	4603      	mov	r3, r0
 801bb4e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801bb50:	7fbb      	ldrb	r3, [r7, #30]
 801bb52:	3301      	adds	r3, #1
 801bb54:	77bb      	strb	r3, [r7, #30]
 801bb56:	7fbb      	ldrb	r3, [r7, #30]
 801bb58:	2b02      	cmp	r3, #2
 801bb5a:	d9ed      	bls.n	801bb38 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801bb5c:	89b8      	ldrh	r0, [r7, #12]
 801bb5e:	693b      	ldr	r3, [r7, #16]
 801bb60:	33f0      	adds	r3, #240	; 0xf0
 801bb62:	697a      	ldr	r2, [r7, #20]
 801bb64:	4619      	mov	r1, r3
 801bb66:	f001 fca9 	bl	801d4bc <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801bb6a:	4b27      	ldr	r3, [pc, #156]	; (801bc08 <dhcp_select+0x1e8>)
 801bb6c:	6818      	ldr	r0, [r3, #0]
 801bb6e:	4b27      	ldr	r3, [pc, #156]	; (801bc0c <dhcp_select+0x1ec>)
 801bb70:	9301      	str	r3, [sp, #4]
 801bb72:	687b      	ldr	r3, [r7, #4]
 801bb74:	9300      	str	r3, [sp, #0]
 801bb76:	2343      	movs	r3, #67	; 0x43
 801bb78:	4a25      	ldr	r2, [pc, #148]	; (801bc10 <dhcp_select+0x1f0>)
 801bb7a:	6979      	ldr	r1, [r7, #20]
 801bb7c:	f7ff fbc2 	bl	801b304 <udp_sendto_if_src>
 801bb80:	4603      	mov	r3, r0
 801bb82:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801bb84:	6978      	ldr	r0, [r7, #20]
 801bb86:	f7f8 fc83 	bl	8014490 <pbuf_free>
 801bb8a:	e001      	b.n	801bb90 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801bb8c:	23ff      	movs	r3, #255	; 0xff
 801bb8e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801bb90:	69bb      	ldr	r3, [r7, #24]
 801bb92:	799b      	ldrb	r3, [r3, #6]
 801bb94:	2bff      	cmp	r3, #255	; 0xff
 801bb96:	d005      	beq.n	801bba4 <dhcp_select+0x184>
    dhcp->tries++;
 801bb98:	69bb      	ldr	r3, [r7, #24]
 801bb9a:	799b      	ldrb	r3, [r3, #6]
 801bb9c:	3301      	adds	r3, #1
 801bb9e:	b2da      	uxtb	r2, r3
 801bba0:	69bb      	ldr	r3, [r7, #24]
 801bba2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801bba4:	69bb      	ldr	r3, [r7, #24]
 801bba6:	799b      	ldrb	r3, [r3, #6]
 801bba8:	2b05      	cmp	r3, #5
 801bbaa:	d80d      	bhi.n	801bbc8 <dhcp_select+0x1a8>
 801bbac:	69bb      	ldr	r3, [r7, #24]
 801bbae:	799b      	ldrb	r3, [r3, #6]
 801bbb0:	461a      	mov	r2, r3
 801bbb2:	2301      	movs	r3, #1
 801bbb4:	4093      	lsls	r3, r2
 801bbb6:	b29b      	uxth	r3, r3
 801bbb8:	461a      	mov	r2, r3
 801bbba:	0152      	lsls	r2, r2, #5
 801bbbc:	1ad2      	subs	r2, r2, r3
 801bbbe:	0092      	lsls	r2, r2, #2
 801bbc0:	4413      	add	r3, r2
 801bbc2:	00db      	lsls	r3, r3, #3
 801bbc4:	b29b      	uxth	r3, r3
 801bbc6:	e001      	b.n	801bbcc <dhcp_select+0x1ac>
 801bbc8:	f64e 2360 	movw	r3, #60000	; 0xea60
 801bbcc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801bbce:	89fb      	ldrh	r3, [r7, #14]
 801bbd0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801bbd4:	4a0f      	ldr	r2, [pc, #60]	; (801bc14 <dhcp_select+0x1f4>)
 801bbd6:	fb82 1203 	smull	r1, r2, r2, r3
 801bbda:	1152      	asrs	r2, r2, #5
 801bbdc:	17db      	asrs	r3, r3, #31
 801bbde:	1ad3      	subs	r3, r2, r3
 801bbe0:	b29a      	uxth	r2, r3
 801bbe2:	69bb      	ldr	r3, [r7, #24]
 801bbe4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801bbe6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801bbea:	4618      	mov	r0, r3
 801bbec:	3720      	adds	r7, #32
 801bbee:	46bd      	mov	sp, r7
 801bbf0:	bdb0      	pop	{r4, r5, r7, pc}
 801bbf2:	bf00      	nop
 801bbf4:	0802673c 	.word	0x0802673c
 801bbf8:	080267e8 	.word	0x080267e8
 801bbfc:	0802679c 	.word	0x0802679c
 801bc00:	08026804 	.word	0x08026804
 801bc04:	20000030 	.word	0x20000030
 801bc08:	200123d8 	.word	0x200123d8
 801bc0c:	08027400 	.word	0x08027400
 801bc10:	08027404 	.word	0x08027404
 801bc14:	10624dd3 	.word	0x10624dd3

0801bc18 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801bc18:	b580      	push	{r7, lr}
 801bc1a:	b082      	sub	sp, #8
 801bc1c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801bc1e:	4b27      	ldr	r3, [pc, #156]	; (801bcbc <dhcp_coarse_tmr+0xa4>)
 801bc20:	681b      	ldr	r3, [r3, #0]
 801bc22:	607b      	str	r3, [r7, #4]
 801bc24:	e042      	b.n	801bcac <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc2a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801bc2c:	683b      	ldr	r3, [r7, #0]
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d039      	beq.n	801bca6 <dhcp_coarse_tmr+0x8e>
 801bc32:	683b      	ldr	r3, [r7, #0]
 801bc34:	795b      	ldrb	r3, [r3, #5]
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	d035      	beq.n	801bca6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801bc3a:	683b      	ldr	r3, [r7, #0]
 801bc3c:	8a9b      	ldrh	r3, [r3, #20]
 801bc3e:	2b00      	cmp	r3, #0
 801bc40:	d012      	beq.n	801bc68 <dhcp_coarse_tmr+0x50>
 801bc42:	683b      	ldr	r3, [r7, #0]
 801bc44:	8a5b      	ldrh	r3, [r3, #18]
 801bc46:	3301      	adds	r3, #1
 801bc48:	b29a      	uxth	r2, r3
 801bc4a:	683b      	ldr	r3, [r7, #0]
 801bc4c:	825a      	strh	r2, [r3, #18]
 801bc4e:	683b      	ldr	r3, [r7, #0]
 801bc50:	8a5a      	ldrh	r2, [r3, #18]
 801bc52:	683b      	ldr	r3, [r7, #0]
 801bc54:	8a9b      	ldrh	r3, [r3, #20]
 801bc56:	429a      	cmp	r2, r3
 801bc58:	d106      	bne.n	801bc68 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801bc5a:	6878      	ldr	r0, [r7, #4]
 801bc5c:	f000 fe32 	bl	801c8c4 <dhcp_release_and_stop>
        dhcp_start(netif);
 801bc60:	6878      	ldr	r0, [r7, #4]
 801bc62:	f000 f969 	bl	801bf38 <dhcp_start>
 801bc66:	e01e      	b.n	801bca6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801bc68:	683b      	ldr	r3, [r7, #0]
 801bc6a:	8a1b      	ldrh	r3, [r3, #16]
 801bc6c:	2b00      	cmp	r3, #0
 801bc6e:	d00b      	beq.n	801bc88 <dhcp_coarse_tmr+0x70>
 801bc70:	683b      	ldr	r3, [r7, #0]
 801bc72:	8a1b      	ldrh	r3, [r3, #16]
 801bc74:	1e5a      	subs	r2, r3, #1
 801bc76:	b291      	uxth	r1, r2
 801bc78:	683a      	ldr	r2, [r7, #0]
 801bc7a:	8211      	strh	r1, [r2, #16]
 801bc7c:	2b01      	cmp	r3, #1
 801bc7e:	d103      	bne.n	801bc88 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801bc80:	6878      	ldr	r0, [r7, #4]
 801bc82:	f000 f8c6 	bl	801be12 <dhcp_t2_timeout>
 801bc86:	e00e      	b.n	801bca6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801bc88:	683b      	ldr	r3, [r7, #0]
 801bc8a:	89db      	ldrh	r3, [r3, #14]
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d00a      	beq.n	801bca6 <dhcp_coarse_tmr+0x8e>
 801bc90:	683b      	ldr	r3, [r7, #0]
 801bc92:	89db      	ldrh	r3, [r3, #14]
 801bc94:	1e5a      	subs	r2, r3, #1
 801bc96:	b291      	uxth	r1, r2
 801bc98:	683a      	ldr	r2, [r7, #0]
 801bc9a:	81d1      	strh	r1, [r2, #14]
 801bc9c:	2b01      	cmp	r3, #1
 801bc9e:	d102      	bne.n	801bca6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801bca0:	6878      	ldr	r0, [r7, #4]
 801bca2:	f000 f888 	bl	801bdb6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	681b      	ldr	r3, [r3, #0]
 801bcaa:	607b      	str	r3, [r7, #4]
 801bcac:	687b      	ldr	r3, [r7, #4]
 801bcae:	2b00      	cmp	r3, #0
 801bcb0:	d1b9      	bne.n	801bc26 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801bcb2:	bf00      	nop
 801bcb4:	bf00      	nop
 801bcb6:	3708      	adds	r7, #8
 801bcb8:	46bd      	mov	sp, r7
 801bcba:	bd80      	pop	{r7, pc}
 801bcbc:	20012344 	.word	0x20012344

0801bcc0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801bcc0:	b580      	push	{r7, lr}
 801bcc2:	b082      	sub	sp, #8
 801bcc4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801bcc6:	4b16      	ldr	r3, [pc, #88]	; (801bd20 <dhcp_fine_tmr+0x60>)
 801bcc8:	681b      	ldr	r3, [r3, #0]
 801bcca:	607b      	str	r3, [r7, #4]
 801bccc:	e020      	b.n	801bd10 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bcd2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801bcd4:	683b      	ldr	r3, [r7, #0]
 801bcd6:	2b00      	cmp	r3, #0
 801bcd8:	d017      	beq.n	801bd0a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801bcda:	683b      	ldr	r3, [r7, #0]
 801bcdc:	891b      	ldrh	r3, [r3, #8]
 801bcde:	2b01      	cmp	r3, #1
 801bce0:	d906      	bls.n	801bcf0 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801bce2:	683b      	ldr	r3, [r7, #0]
 801bce4:	891b      	ldrh	r3, [r3, #8]
 801bce6:	3b01      	subs	r3, #1
 801bce8:	b29a      	uxth	r2, r3
 801bcea:	683b      	ldr	r3, [r7, #0]
 801bcec:	811a      	strh	r2, [r3, #8]
 801bcee:	e00c      	b.n	801bd0a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801bcf0:	683b      	ldr	r3, [r7, #0]
 801bcf2:	891b      	ldrh	r3, [r3, #8]
 801bcf4:	2b01      	cmp	r3, #1
 801bcf6:	d108      	bne.n	801bd0a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801bcf8:	683b      	ldr	r3, [r7, #0]
 801bcfa:	891b      	ldrh	r3, [r3, #8]
 801bcfc:	3b01      	subs	r3, #1
 801bcfe:	b29a      	uxth	r2, r3
 801bd00:	683b      	ldr	r3, [r7, #0]
 801bd02:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801bd04:	6878      	ldr	r0, [r7, #4]
 801bd06:	f000 f80d 	bl	801bd24 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	681b      	ldr	r3, [r3, #0]
 801bd0e:	607b      	str	r3, [r7, #4]
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d1db      	bne.n	801bcce <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801bd16:	bf00      	nop
 801bd18:	bf00      	nop
 801bd1a:	3708      	adds	r7, #8
 801bd1c:	46bd      	mov	sp, r7
 801bd1e:	bd80      	pop	{r7, pc}
 801bd20:	20012344 	.word	0x20012344

0801bd24 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801bd24:	b580      	push	{r7, lr}
 801bd26:	b084      	sub	sp, #16
 801bd28:	af00      	add	r7, sp, #0
 801bd2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801bd2c:	687b      	ldr	r3, [r7, #4]
 801bd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd30:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801bd32:	68fb      	ldr	r3, [r7, #12]
 801bd34:	795b      	ldrb	r3, [r3, #5]
 801bd36:	2b0c      	cmp	r3, #12
 801bd38:	d003      	beq.n	801bd42 <dhcp_timeout+0x1e>
 801bd3a:	68fb      	ldr	r3, [r7, #12]
 801bd3c:	795b      	ldrb	r3, [r3, #5]
 801bd3e:	2b06      	cmp	r3, #6
 801bd40:	d103      	bne.n	801bd4a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801bd42:	6878      	ldr	r0, [r7, #4]
 801bd44:	f000 fa54 	bl	801c1f0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801bd48:	e031      	b.n	801bdae <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801bd4a:	68fb      	ldr	r3, [r7, #12]
 801bd4c:	795b      	ldrb	r3, [r3, #5]
 801bd4e:	2b01      	cmp	r3, #1
 801bd50:	d10e      	bne.n	801bd70 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801bd52:	68fb      	ldr	r3, [r7, #12]
 801bd54:	799b      	ldrb	r3, [r3, #6]
 801bd56:	2b05      	cmp	r3, #5
 801bd58:	d803      	bhi.n	801bd62 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801bd5a:	6878      	ldr	r0, [r7, #4]
 801bd5c:	f7ff fe60 	bl	801ba20 <dhcp_select>
}
 801bd60:	e025      	b.n	801bdae <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801bd62:	6878      	ldr	r0, [r7, #4]
 801bd64:	f000 fdae 	bl	801c8c4 <dhcp_release_and_stop>
      dhcp_start(netif);
 801bd68:	6878      	ldr	r0, [r7, #4]
 801bd6a:	f000 f8e5 	bl	801bf38 <dhcp_start>
}
 801bd6e:	e01e      	b.n	801bdae <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801bd70:	68fb      	ldr	r3, [r7, #12]
 801bd72:	795b      	ldrb	r3, [r3, #5]
 801bd74:	2b08      	cmp	r3, #8
 801bd76:	d10b      	bne.n	801bd90 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801bd78:	68fb      	ldr	r3, [r7, #12]
 801bd7a:	799b      	ldrb	r3, [r3, #6]
 801bd7c:	2b01      	cmp	r3, #1
 801bd7e:	d803      	bhi.n	801bd88 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801bd80:	6878      	ldr	r0, [r7, #4]
 801bd82:	f7ff fdf3 	bl	801b96c <dhcp_check>
}
 801bd86:	e012      	b.n	801bdae <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801bd88:	6878      	ldr	r0, [r7, #4]
 801bd8a:	f000 fad3 	bl	801c334 <dhcp_bind>
}
 801bd8e:	e00e      	b.n	801bdae <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801bd90:	68fb      	ldr	r3, [r7, #12]
 801bd92:	795b      	ldrb	r3, [r3, #5]
 801bd94:	2b03      	cmp	r3, #3
 801bd96:	d10a      	bne.n	801bdae <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801bd98:	68fb      	ldr	r3, [r7, #12]
 801bd9a:	799b      	ldrb	r3, [r3, #6]
 801bd9c:	2b01      	cmp	r3, #1
 801bd9e:	d803      	bhi.n	801bda8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801bda0:	6878      	ldr	r0, [r7, #4]
 801bda2:	f000 fcd9 	bl	801c758 <dhcp_reboot>
}
 801bda6:	e002      	b.n	801bdae <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801bda8:	6878      	ldr	r0, [r7, #4]
 801bdaa:	f000 fa21 	bl	801c1f0 <dhcp_discover>
}
 801bdae:	bf00      	nop
 801bdb0:	3710      	adds	r7, #16
 801bdb2:	46bd      	mov	sp, r7
 801bdb4:	bd80      	pop	{r7, pc}

0801bdb6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801bdb6:	b580      	push	{r7, lr}
 801bdb8:	b084      	sub	sp, #16
 801bdba:	af00      	add	r7, sp, #0
 801bdbc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bdc2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801bdc4:	68fb      	ldr	r3, [r7, #12]
 801bdc6:	795b      	ldrb	r3, [r3, #5]
 801bdc8:	2b01      	cmp	r3, #1
 801bdca:	d007      	beq.n	801bddc <dhcp_t1_timeout+0x26>
 801bdcc:	68fb      	ldr	r3, [r7, #12]
 801bdce:	795b      	ldrb	r3, [r3, #5]
 801bdd0:	2b0a      	cmp	r3, #10
 801bdd2:	d003      	beq.n	801bddc <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801bdd4:	68fb      	ldr	r3, [r7, #12]
 801bdd6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801bdd8:	2b05      	cmp	r3, #5
 801bdda:	d116      	bne.n	801be0a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801bddc:	6878      	ldr	r0, [r7, #4]
 801bdde:	f000 fb83 	bl	801c4e8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801bde2:	68fb      	ldr	r3, [r7, #12]
 801bde4:	899b      	ldrh	r3, [r3, #12]
 801bde6:	461a      	mov	r2, r3
 801bde8:	68fb      	ldr	r3, [r7, #12]
 801bdea:	8a5b      	ldrh	r3, [r3, #18]
 801bdec:	1ad3      	subs	r3, r2, r3
 801bdee:	2b01      	cmp	r3, #1
 801bdf0:	dd0b      	ble.n	801be0a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801bdf2:	68fb      	ldr	r3, [r7, #12]
 801bdf4:	899b      	ldrh	r3, [r3, #12]
 801bdf6:	461a      	mov	r2, r3
 801bdf8:	68fb      	ldr	r3, [r7, #12]
 801bdfa:	8a5b      	ldrh	r3, [r3, #18]
 801bdfc:	1ad3      	subs	r3, r2, r3
 801bdfe:	0fda      	lsrs	r2, r3, #31
 801be00:	4413      	add	r3, r2
 801be02:	105b      	asrs	r3, r3, #1
 801be04:	b29a      	uxth	r2, r3
 801be06:	68fb      	ldr	r3, [r7, #12]
 801be08:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801be0a:	bf00      	nop
 801be0c:	3710      	adds	r7, #16
 801be0e:	46bd      	mov	sp, r7
 801be10:	bd80      	pop	{r7, pc}

0801be12 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801be12:	b580      	push	{r7, lr}
 801be14:	b084      	sub	sp, #16
 801be16:	af00      	add	r7, sp, #0
 801be18:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801be1a:	687b      	ldr	r3, [r7, #4]
 801be1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be1e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801be20:	68fb      	ldr	r3, [r7, #12]
 801be22:	795b      	ldrb	r3, [r3, #5]
 801be24:	2b01      	cmp	r3, #1
 801be26:	d00b      	beq.n	801be40 <dhcp_t2_timeout+0x2e>
 801be28:	68fb      	ldr	r3, [r7, #12]
 801be2a:	795b      	ldrb	r3, [r3, #5]
 801be2c:	2b0a      	cmp	r3, #10
 801be2e:	d007      	beq.n	801be40 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801be30:	68fb      	ldr	r3, [r7, #12]
 801be32:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801be34:	2b05      	cmp	r3, #5
 801be36:	d003      	beq.n	801be40 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801be38:	68fb      	ldr	r3, [r7, #12]
 801be3a:	795b      	ldrb	r3, [r3, #5]
 801be3c:	2b04      	cmp	r3, #4
 801be3e:	d116      	bne.n	801be6e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801be40:	6878      	ldr	r0, [r7, #4]
 801be42:	f000 fbed 	bl	801c620 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801be46:	68fb      	ldr	r3, [r7, #12]
 801be48:	8a9b      	ldrh	r3, [r3, #20]
 801be4a:	461a      	mov	r2, r3
 801be4c:	68fb      	ldr	r3, [r7, #12]
 801be4e:	8a5b      	ldrh	r3, [r3, #18]
 801be50:	1ad3      	subs	r3, r2, r3
 801be52:	2b01      	cmp	r3, #1
 801be54:	dd0b      	ble.n	801be6e <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801be56:	68fb      	ldr	r3, [r7, #12]
 801be58:	8a9b      	ldrh	r3, [r3, #20]
 801be5a:	461a      	mov	r2, r3
 801be5c:	68fb      	ldr	r3, [r7, #12]
 801be5e:	8a5b      	ldrh	r3, [r3, #18]
 801be60:	1ad3      	subs	r3, r2, r3
 801be62:	0fda      	lsrs	r2, r3, #31
 801be64:	4413      	add	r3, r2
 801be66:	105b      	asrs	r3, r3, #1
 801be68:	b29a      	uxth	r2, r3
 801be6a:	68fb      	ldr	r3, [r7, #12]
 801be6c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801be6e:	bf00      	nop
 801be70:	3710      	adds	r7, #16
 801be72:	46bd      	mov	sp, r7
 801be74:	bd80      	pop	{r7, pc}
	...

0801be78 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801be78:	b580      	push	{r7, lr}
 801be7a:	b084      	sub	sp, #16
 801be7c:	af00      	add	r7, sp, #0
 801be7e:	6078      	str	r0, [r7, #4]
 801be80:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be86:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801be88:	68fb      	ldr	r3, [r7, #12]
 801be8a:	2200      	movs	r2, #0
 801be8c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801be8e:	68fb      	ldr	r3, [r7, #12]
 801be90:	2200      	movs	r2, #0
 801be92:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801be94:	4b26      	ldr	r3, [pc, #152]	; (801bf30 <dhcp_handle_ack+0xb8>)
 801be96:	78db      	ldrb	r3, [r3, #3]
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d003      	beq.n	801bea4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801be9c:	4b25      	ldr	r3, [pc, #148]	; (801bf34 <dhcp_handle_ack+0xbc>)
 801be9e:	68da      	ldr	r2, [r3, #12]
 801bea0:	68fb      	ldr	r3, [r7, #12]
 801bea2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801bea4:	4b22      	ldr	r3, [pc, #136]	; (801bf30 <dhcp_handle_ack+0xb8>)
 801bea6:	791b      	ldrb	r3, [r3, #4]
 801bea8:	2b00      	cmp	r3, #0
 801beaa:	d004      	beq.n	801beb6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801beac:	4b21      	ldr	r3, [pc, #132]	; (801bf34 <dhcp_handle_ack+0xbc>)
 801beae:	691a      	ldr	r2, [r3, #16]
 801beb0:	68fb      	ldr	r3, [r7, #12]
 801beb2:	62da      	str	r2, [r3, #44]	; 0x2c
 801beb4:	e004      	b.n	801bec0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801beb6:	68fb      	ldr	r3, [r7, #12]
 801beb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801beba:	085a      	lsrs	r2, r3, #1
 801bebc:	68fb      	ldr	r3, [r7, #12]
 801bebe:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801bec0:	4b1b      	ldr	r3, [pc, #108]	; (801bf30 <dhcp_handle_ack+0xb8>)
 801bec2:	795b      	ldrb	r3, [r3, #5]
 801bec4:	2b00      	cmp	r3, #0
 801bec6:	d004      	beq.n	801bed2 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801bec8:	4b1a      	ldr	r3, [pc, #104]	; (801bf34 <dhcp_handle_ack+0xbc>)
 801beca:	695a      	ldr	r2, [r3, #20]
 801becc:	68fb      	ldr	r3, [r7, #12]
 801bece:	631a      	str	r2, [r3, #48]	; 0x30
 801bed0:	e007      	b.n	801bee2 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801bed2:	68fb      	ldr	r3, [r7, #12]
 801bed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801bed6:	4613      	mov	r3, r2
 801bed8:	00db      	lsls	r3, r3, #3
 801beda:	1a9b      	subs	r3, r3, r2
 801bedc:	08da      	lsrs	r2, r3, #3
 801bede:	68fb      	ldr	r3, [r7, #12]
 801bee0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801bee2:	683b      	ldr	r3, [r7, #0]
 801bee4:	691a      	ldr	r2, [r3, #16]
 801bee6:	68fb      	ldr	r3, [r7, #12]
 801bee8:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801beea:	4b11      	ldr	r3, [pc, #68]	; (801bf30 <dhcp_handle_ack+0xb8>)
 801beec:	799b      	ldrb	r3, [r3, #6]
 801beee:	2b00      	cmp	r3, #0
 801bef0:	d00b      	beq.n	801bf0a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801bef2:	4b10      	ldr	r3, [pc, #64]	; (801bf34 <dhcp_handle_ack+0xbc>)
 801bef4:	699b      	ldr	r3, [r3, #24]
 801bef6:	4618      	mov	r0, r3
 801bef8:	f7f6 fee1 	bl	8012cbe <lwip_htonl>
 801befc:	4602      	mov	r2, r0
 801befe:	68fb      	ldr	r3, [r7, #12]
 801bf00:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801bf02:	68fb      	ldr	r3, [r7, #12]
 801bf04:	2201      	movs	r2, #1
 801bf06:	71da      	strb	r2, [r3, #7]
 801bf08:	e002      	b.n	801bf10 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801bf0a:	68fb      	ldr	r3, [r7, #12]
 801bf0c:	2200      	movs	r2, #0
 801bf0e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801bf10:	4b07      	ldr	r3, [pc, #28]	; (801bf30 <dhcp_handle_ack+0xb8>)
 801bf12:	79db      	ldrb	r3, [r3, #7]
 801bf14:	2b00      	cmp	r3, #0
 801bf16:	d007      	beq.n	801bf28 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801bf18:	4b06      	ldr	r3, [pc, #24]	; (801bf34 <dhcp_handle_ack+0xbc>)
 801bf1a:	69db      	ldr	r3, [r3, #28]
 801bf1c:	4618      	mov	r0, r3
 801bf1e:	f7f6 fece 	bl	8012cbe <lwip_htonl>
 801bf22:	4602      	mov	r2, r0
 801bf24:	68fb      	ldr	r3, [r7, #12]
 801bf26:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801bf28:	bf00      	nop
 801bf2a:	3710      	adds	r7, #16
 801bf2c:	46bd      	mov	sp, r7
 801bf2e:	bd80      	pop	{r7, pc}
 801bf30:	200123d0 	.word	0x200123d0
 801bf34:	200123b0 	.word	0x200123b0

0801bf38 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801bf38:	b580      	push	{r7, lr}
 801bf3a:	b084      	sub	sp, #16
 801bf3c:	af00      	add	r7, sp, #0
 801bf3e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801bf40:	687b      	ldr	r3, [r7, #4]
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d109      	bne.n	801bf5a <dhcp_start+0x22>
 801bf46:	4b37      	ldr	r3, [pc, #220]	; (801c024 <dhcp_start+0xec>)
 801bf48:	f240 22e7 	movw	r2, #743	; 0x2e7
 801bf4c:	4936      	ldr	r1, [pc, #216]	; (801c028 <dhcp_start+0xf0>)
 801bf4e:	4837      	ldr	r0, [pc, #220]	; (801c02c <dhcp_start+0xf4>)
 801bf50:	f005 fbe2 	bl	8021718 <iprintf>
 801bf54:	f06f 030f 	mvn.w	r3, #15
 801bf58:	e060      	b.n	801c01c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801bf60:	f003 0301 	and.w	r3, r3, #1
 801bf64:	2b00      	cmp	r3, #0
 801bf66:	d109      	bne.n	801bf7c <dhcp_start+0x44>
 801bf68:	4b2e      	ldr	r3, [pc, #184]	; (801c024 <dhcp_start+0xec>)
 801bf6a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801bf6e:	4930      	ldr	r1, [pc, #192]	; (801c030 <dhcp_start+0xf8>)
 801bf70:	482e      	ldr	r0, [pc, #184]	; (801c02c <dhcp_start+0xf4>)
 801bf72:	f005 fbd1 	bl	8021718 <iprintf>
 801bf76:	f06f 030f 	mvn.w	r3, #15
 801bf7a:	e04f      	b.n	801c01c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf80:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801bf82:	687b      	ldr	r3, [r7, #4]
 801bf84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bf86:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801bf8a:	d202      	bcs.n	801bf92 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801bf8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bf90:	e044      	b.n	801c01c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801bf92:	68fb      	ldr	r3, [r7, #12]
 801bf94:	2b00      	cmp	r3, #0
 801bf96:	d10d      	bne.n	801bfb4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801bf98:	2034      	movs	r0, #52	; 0x34
 801bf9a:	f7f7 f9af 	bl	80132fc <mem_malloc>
 801bf9e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801bfa0:	68fb      	ldr	r3, [r7, #12]
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	d102      	bne.n	801bfac <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801bfa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bfaa:	e037      	b.n	801c01c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	68fa      	ldr	r2, [r7, #12]
 801bfb0:	625a      	str	r2, [r3, #36]	; 0x24
 801bfb2:	e005      	b.n	801bfc0 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801bfb4:	68fb      	ldr	r3, [r7, #12]
 801bfb6:	791b      	ldrb	r3, [r3, #4]
 801bfb8:	2b00      	cmp	r3, #0
 801bfba:	d001      	beq.n	801bfc0 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801bfbc:	f7ff fc92 	bl	801b8e4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801bfc0:	2234      	movs	r2, #52	; 0x34
 801bfc2:	2100      	movs	r1, #0
 801bfc4:	68f8      	ldr	r0, [r7, #12]
 801bfc6:	f005 fdbd 	bl	8021b44 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801bfca:	f7ff fc39 	bl	801b840 <dhcp_inc_pcb_refcount>
 801bfce:	4603      	mov	r3, r0
 801bfd0:	2b00      	cmp	r3, #0
 801bfd2:	d002      	beq.n	801bfda <dhcp_start+0xa2>
    return ERR_MEM;
 801bfd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bfd8:	e020      	b.n	801c01c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801bfda:	68fb      	ldr	r3, [r7, #12]
 801bfdc:	2201      	movs	r2, #1
 801bfde:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801bfe6:	f003 0304 	and.w	r3, r3, #4
 801bfea:	2b00      	cmp	r3, #0
 801bfec:	d105      	bne.n	801bffa <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801bfee:	2102      	movs	r1, #2
 801bff0:	68f8      	ldr	r0, [r7, #12]
 801bff2:	f000 fd01 	bl	801c9f8 <dhcp_set_state>
    return ERR_OK;
 801bff6:	2300      	movs	r3, #0
 801bff8:	e010      	b.n	801c01c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801bffa:	6878      	ldr	r0, [r7, #4]
 801bffc:	f000 f8f8 	bl	801c1f0 <dhcp_discover>
 801c000:	4603      	mov	r3, r0
 801c002:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801c004:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801c008:	2b00      	cmp	r3, #0
 801c00a:	d005      	beq.n	801c018 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801c00c:	6878      	ldr	r0, [r7, #4]
 801c00e:	f000 fc59 	bl	801c8c4 <dhcp_release_and_stop>
    return ERR_MEM;
 801c012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c016:	e001      	b.n	801c01c <dhcp_start+0xe4>
  }
  return result;
 801c018:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801c01c:	4618      	mov	r0, r3
 801c01e:	3710      	adds	r7, #16
 801c020:	46bd      	mov	sp, r7
 801c022:	bd80      	pop	{r7, pc}
 801c024:	0802673c 	.word	0x0802673c
 801c028:	08026820 	.word	0x08026820
 801c02c:	0802679c 	.word	0x0802679c
 801c030:	08026864 	.word	0x08026864

0801c034 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801c034:	b580      	push	{r7, lr}
 801c036:	b084      	sub	sp, #16
 801c038:	af00      	add	r7, sp, #0
 801c03a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c03c:	687b      	ldr	r3, [r7, #4]
 801c03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c040:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801c042:	68fb      	ldr	r3, [r7, #12]
 801c044:	2b00      	cmp	r3, #0
 801c046:	d025      	beq.n	801c094 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801c048:	68fb      	ldr	r3, [r7, #12]
 801c04a:	795b      	ldrb	r3, [r3, #5]
 801c04c:	2b0a      	cmp	r3, #10
 801c04e:	d008      	beq.n	801c062 <dhcp_network_changed+0x2e>
 801c050:	2b0a      	cmp	r3, #10
 801c052:	dc0d      	bgt.n	801c070 <dhcp_network_changed+0x3c>
 801c054:	2b00      	cmp	r3, #0
 801c056:	d01f      	beq.n	801c098 <dhcp_network_changed+0x64>
 801c058:	2b00      	cmp	r3, #0
 801c05a:	db09      	blt.n	801c070 <dhcp_network_changed+0x3c>
 801c05c:	3b03      	subs	r3, #3
 801c05e:	2b02      	cmp	r3, #2
 801c060:	d806      	bhi.n	801c070 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801c062:	68fb      	ldr	r3, [r7, #12]
 801c064:	2200      	movs	r2, #0
 801c066:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801c068:	6878      	ldr	r0, [r7, #4]
 801c06a:	f000 fb75 	bl	801c758 <dhcp_reboot>
      break;
 801c06e:	e014      	b.n	801c09a <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801c070:	68fb      	ldr	r3, [r7, #12]
 801c072:	795b      	ldrb	r3, [r3, #5]
 801c074:	2b0c      	cmp	r3, #12
 801c076:	d906      	bls.n	801c086 <dhcp_network_changed+0x52>
 801c078:	4b09      	ldr	r3, [pc, #36]	; (801c0a0 <dhcp_network_changed+0x6c>)
 801c07a:	f240 326d 	movw	r2, #877	; 0x36d
 801c07e:	4909      	ldr	r1, [pc, #36]	; (801c0a4 <dhcp_network_changed+0x70>)
 801c080:	4809      	ldr	r0, [pc, #36]	; (801c0a8 <dhcp_network_changed+0x74>)
 801c082:	f005 fb49 	bl	8021718 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801c086:	68fb      	ldr	r3, [r7, #12]
 801c088:	2200      	movs	r2, #0
 801c08a:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801c08c:	6878      	ldr	r0, [r7, #4]
 801c08e:	f000 f8af 	bl	801c1f0 <dhcp_discover>
      break;
 801c092:	e002      	b.n	801c09a <dhcp_network_changed+0x66>
    return;
 801c094:	bf00      	nop
 801c096:	e000      	b.n	801c09a <dhcp_network_changed+0x66>
      break;
 801c098:	bf00      	nop
  }
}
 801c09a:	3710      	adds	r7, #16
 801c09c:	46bd      	mov	sp, r7
 801c09e:	bd80      	pop	{r7, pc}
 801c0a0:	0802673c 	.word	0x0802673c
 801c0a4:	08026888 	.word	0x08026888
 801c0a8:	0802679c 	.word	0x0802679c

0801c0ac <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801c0ac:	b580      	push	{r7, lr}
 801c0ae:	b084      	sub	sp, #16
 801c0b0:	af00      	add	r7, sp, #0
 801c0b2:	6078      	str	r0, [r7, #4]
 801c0b4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801c0b6:	687b      	ldr	r3, [r7, #4]
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	d107      	bne.n	801c0cc <dhcp_arp_reply+0x20>
 801c0bc:	4b0e      	ldr	r3, [pc, #56]	; (801c0f8 <dhcp_arp_reply+0x4c>)
 801c0be:	f240 328b 	movw	r2, #907	; 0x38b
 801c0c2:	490e      	ldr	r1, [pc, #56]	; (801c0fc <dhcp_arp_reply+0x50>)
 801c0c4:	480e      	ldr	r0, [pc, #56]	; (801c100 <dhcp_arp_reply+0x54>)
 801c0c6:	f005 fb27 	bl	8021718 <iprintf>
 801c0ca:	e012      	b.n	801c0f2 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801c0cc:	687b      	ldr	r3, [r7, #4]
 801c0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c0d0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801c0d2:	68fb      	ldr	r3, [r7, #12]
 801c0d4:	2b00      	cmp	r3, #0
 801c0d6:	d00c      	beq.n	801c0f2 <dhcp_arp_reply+0x46>
 801c0d8:	68fb      	ldr	r3, [r7, #12]
 801c0da:	795b      	ldrb	r3, [r3, #5]
 801c0dc:	2b08      	cmp	r3, #8
 801c0de:	d108      	bne.n	801c0f2 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801c0e0:	683b      	ldr	r3, [r7, #0]
 801c0e2:	681a      	ldr	r2, [r3, #0]
 801c0e4:	68fb      	ldr	r3, [r7, #12]
 801c0e6:	69db      	ldr	r3, [r3, #28]
 801c0e8:	429a      	cmp	r2, r3
 801c0ea:	d102      	bne.n	801c0f2 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801c0ec:	6878      	ldr	r0, [r7, #4]
 801c0ee:	f000 f809 	bl	801c104 <dhcp_decline>
    }
  }
}
 801c0f2:	3710      	adds	r7, #16
 801c0f4:	46bd      	mov	sp, r7
 801c0f6:	bd80      	pop	{r7, pc}
 801c0f8:	0802673c 	.word	0x0802673c
 801c0fc:	08026820 	.word	0x08026820
 801c100:	0802679c 	.word	0x0802679c

0801c104 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801c104:	b5b0      	push	{r4, r5, r7, lr}
 801c106:	b08a      	sub	sp, #40	; 0x28
 801c108:	af02      	add	r7, sp, #8
 801c10a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c10c:	687b      	ldr	r3, [r7, #4]
 801c10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c110:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801c112:	210c      	movs	r1, #12
 801c114:	69b8      	ldr	r0, [r7, #24]
 801c116:	f000 fc6f 	bl	801c9f8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801c11a:	f107 030c 	add.w	r3, r7, #12
 801c11e:	2204      	movs	r2, #4
 801c120:	69b9      	ldr	r1, [r7, #24]
 801c122:	6878      	ldr	r0, [r7, #4]
 801c124:	f001 f8f4 	bl	801d310 <dhcp_create_msg>
 801c128:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c12a:	697b      	ldr	r3, [r7, #20]
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d035      	beq.n	801c19c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c130:	697b      	ldr	r3, [r7, #20]
 801c132:	685b      	ldr	r3, [r3, #4]
 801c134:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c136:	89b8      	ldrh	r0, [r7, #12]
 801c138:	693b      	ldr	r3, [r7, #16]
 801c13a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c13e:	2304      	movs	r3, #4
 801c140:	2232      	movs	r2, #50	; 0x32
 801c142:	f000 fc73 	bl	801ca2c <dhcp_option>
 801c146:	4603      	mov	r3, r0
 801c148:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c14a:	89bc      	ldrh	r4, [r7, #12]
 801c14c:	693b      	ldr	r3, [r7, #16]
 801c14e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801c152:	69bb      	ldr	r3, [r7, #24]
 801c154:	69db      	ldr	r3, [r3, #28]
 801c156:	4618      	mov	r0, r3
 801c158:	f7f6 fdb1 	bl	8012cbe <lwip_htonl>
 801c15c:	4603      	mov	r3, r0
 801c15e:	461a      	mov	r2, r3
 801c160:	4629      	mov	r1, r5
 801c162:	4620      	mov	r0, r4
 801c164:	f000 fcee 	bl	801cb44 <dhcp_option_long>
 801c168:	4603      	mov	r3, r0
 801c16a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c16c:	89b8      	ldrh	r0, [r7, #12]
 801c16e:	693b      	ldr	r3, [r7, #16]
 801c170:	33f0      	adds	r3, #240	; 0xf0
 801c172:	697a      	ldr	r2, [r7, #20]
 801c174:	4619      	mov	r1, r3
 801c176:	f001 f9a1 	bl	801d4bc <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801c17a:	4b19      	ldr	r3, [pc, #100]	; (801c1e0 <dhcp_decline+0xdc>)
 801c17c:	6818      	ldr	r0, [r3, #0]
 801c17e:	4b19      	ldr	r3, [pc, #100]	; (801c1e4 <dhcp_decline+0xe0>)
 801c180:	9301      	str	r3, [sp, #4]
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	9300      	str	r3, [sp, #0]
 801c186:	2343      	movs	r3, #67	; 0x43
 801c188:	4a17      	ldr	r2, [pc, #92]	; (801c1e8 <dhcp_decline+0xe4>)
 801c18a:	6979      	ldr	r1, [r7, #20]
 801c18c:	f7ff f8ba 	bl	801b304 <udp_sendto_if_src>
 801c190:	4603      	mov	r3, r0
 801c192:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801c194:	6978      	ldr	r0, [r7, #20]
 801c196:	f7f8 f97b 	bl	8014490 <pbuf_free>
 801c19a:	e001      	b.n	801c1a0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801c19c:	23ff      	movs	r3, #255	; 0xff
 801c19e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801c1a0:	69bb      	ldr	r3, [r7, #24]
 801c1a2:	799b      	ldrb	r3, [r3, #6]
 801c1a4:	2bff      	cmp	r3, #255	; 0xff
 801c1a6:	d005      	beq.n	801c1b4 <dhcp_decline+0xb0>
    dhcp->tries++;
 801c1a8:	69bb      	ldr	r3, [r7, #24]
 801c1aa:	799b      	ldrb	r3, [r3, #6]
 801c1ac:	3301      	adds	r3, #1
 801c1ae:	b2da      	uxtb	r2, r3
 801c1b0:	69bb      	ldr	r3, [r7, #24]
 801c1b2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801c1b4:	f242 7310 	movw	r3, #10000	; 0x2710
 801c1b8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c1ba:	89fb      	ldrh	r3, [r7, #14]
 801c1bc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c1c0:	4a0a      	ldr	r2, [pc, #40]	; (801c1ec <dhcp_decline+0xe8>)
 801c1c2:	fb82 1203 	smull	r1, r2, r2, r3
 801c1c6:	1152      	asrs	r2, r2, #5
 801c1c8:	17db      	asrs	r3, r3, #31
 801c1ca:	1ad3      	subs	r3, r2, r3
 801c1cc:	b29a      	uxth	r2, r3
 801c1ce:	69bb      	ldr	r3, [r7, #24]
 801c1d0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c1d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c1d6:	4618      	mov	r0, r3
 801c1d8:	3720      	adds	r7, #32
 801c1da:	46bd      	mov	sp, r7
 801c1dc:	bdb0      	pop	{r4, r5, r7, pc}
 801c1de:	bf00      	nop
 801c1e0:	200123d8 	.word	0x200123d8
 801c1e4:	08027400 	.word	0x08027400
 801c1e8:	08027404 	.word	0x08027404
 801c1ec:	10624dd3 	.word	0x10624dd3

0801c1f0 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801c1f0:	b580      	push	{r7, lr}
 801c1f2:	b08a      	sub	sp, #40	; 0x28
 801c1f4:	af02      	add	r7, sp, #8
 801c1f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c1fc:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801c1fe:	2300      	movs	r3, #0
 801c200:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801c202:	69bb      	ldr	r3, [r7, #24]
 801c204:	2200      	movs	r2, #0
 801c206:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801c208:	2106      	movs	r1, #6
 801c20a:	69b8      	ldr	r0, [r7, #24]
 801c20c:	f000 fbf4 	bl	801c9f8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801c210:	f107 0308 	add.w	r3, r7, #8
 801c214:	2201      	movs	r2, #1
 801c216:	69b9      	ldr	r1, [r7, #24]
 801c218:	6878      	ldr	r0, [r7, #4]
 801c21a:	f001 f879 	bl	801d310 <dhcp_create_msg>
 801c21e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801c220:	693b      	ldr	r3, [r7, #16]
 801c222:	2b00      	cmp	r3, #0
 801c224:	d04b      	beq.n	801c2be <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c226:	693b      	ldr	r3, [r7, #16]
 801c228:	685b      	ldr	r3, [r3, #4]
 801c22a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c22c:	8938      	ldrh	r0, [r7, #8]
 801c22e:	68fb      	ldr	r3, [r7, #12]
 801c230:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c234:	2302      	movs	r3, #2
 801c236:	2239      	movs	r2, #57	; 0x39
 801c238:	f000 fbf8 	bl	801ca2c <dhcp_option>
 801c23c:	4603      	mov	r3, r0
 801c23e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c240:	8938      	ldrh	r0, [r7, #8]
 801c242:	68fb      	ldr	r3, [r7, #12]
 801c244:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c248:	687b      	ldr	r3, [r7, #4]
 801c24a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c24c:	461a      	mov	r2, r3
 801c24e:	f000 fc47 	bl	801cae0 <dhcp_option_short>
 801c252:	4603      	mov	r3, r0
 801c254:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c256:	8938      	ldrh	r0, [r7, #8]
 801c258:	68fb      	ldr	r3, [r7, #12]
 801c25a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c25e:	2303      	movs	r3, #3
 801c260:	2237      	movs	r2, #55	; 0x37
 801c262:	f000 fbe3 	bl	801ca2c <dhcp_option>
 801c266:	4603      	mov	r3, r0
 801c268:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c26a:	2300      	movs	r3, #0
 801c26c:	77fb      	strb	r3, [r7, #31]
 801c26e:	e00e      	b.n	801c28e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c270:	8938      	ldrh	r0, [r7, #8]
 801c272:	68fb      	ldr	r3, [r7, #12]
 801c274:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c278:	7ffb      	ldrb	r3, [r7, #31]
 801c27a:	4a29      	ldr	r2, [pc, #164]	; (801c320 <dhcp_discover+0x130>)
 801c27c:	5cd3      	ldrb	r3, [r2, r3]
 801c27e:	461a      	mov	r2, r3
 801c280:	f000 fc08 	bl	801ca94 <dhcp_option_byte>
 801c284:	4603      	mov	r3, r0
 801c286:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c288:	7ffb      	ldrb	r3, [r7, #31]
 801c28a:	3301      	adds	r3, #1
 801c28c:	77fb      	strb	r3, [r7, #31]
 801c28e:	7ffb      	ldrb	r3, [r7, #31]
 801c290:	2b02      	cmp	r3, #2
 801c292:	d9ed      	bls.n	801c270 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c294:	8938      	ldrh	r0, [r7, #8]
 801c296:	68fb      	ldr	r3, [r7, #12]
 801c298:	33f0      	adds	r3, #240	; 0xf0
 801c29a:	693a      	ldr	r2, [r7, #16]
 801c29c:	4619      	mov	r1, r3
 801c29e:	f001 f90d 	bl	801d4bc <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801c2a2:	4b20      	ldr	r3, [pc, #128]	; (801c324 <dhcp_discover+0x134>)
 801c2a4:	6818      	ldr	r0, [r3, #0]
 801c2a6:	4b20      	ldr	r3, [pc, #128]	; (801c328 <dhcp_discover+0x138>)
 801c2a8:	9301      	str	r3, [sp, #4]
 801c2aa:	687b      	ldr	r3, [r7, #4]
 801c2ac:	9300      	str	r3, [sp, #0]
 801c2ae:	2343      	movs	r3, #67	; 0x43
 801c2b0:	4a1e      	ldr	r2, [pc, #120]	; (801c32c <dhcp_discover+0x13c>)
 801c2b2:	6939      	ldr	r1, [r7, #16]
 801c2b4:	f7ff f826 	bl	801b304 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801c2b8:	6938      	ldr	r0, [r7, #16]
 801c2ba:	f7f8 f8e9 	bl	8014490 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801c2be:	69bb      	ldr	r3, [r7, #24]
 801c2c0:	799b      	ldrb	r3, [r3, #6]
 801c2c2:	2bff      	cmp	r3, #255	; 0xff
 801c2c4:	d005      	beq.n	801c2d2 <dhcp_discover+0xe2>
    dhcp->tries++;
 801c2c6:	69bb      	ldr	r3, [r7, #24]
 801c2c8:	799b      	ldrb	r3, [r3, #6]
 801c2ca:	3301      	adds	r3, #1
 801c2cc:	b2da      	uxtb	r2, r3
 801c2ce:	69bb      	ldr	r3, [r7, #24]
 801c2d0:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801c2d2:	69bb      	ldr	r3, [r7, #24]
 801c2d4:	799b      	ldrb	r3, [r3, #6]
 801c2d6:	2b05      	cmp	r3, #5
 801c2d8:	d80d      	bhi.n	801c2f6 <dhcp_discover+0x106>
 801c2da:	69bb      	ldr	r3, [r7, #24]
 801c2dc:	799b      	ldrb	r3, [r3, #6]
 801c2de:	461a      	mov	r2, r3
 801c2e0:	2301      	movs	r3, #1
 801c2e2:	4093      	lsls	r3, r2
 801c2e4:	b29b      	uxth	r3, r3
 801c2e6:	461a      	mov	r2, r3
 801c2e8:	0152      	lsls	r2, r2, #5
 801c2ea:	1ad2      	subs	r2, r2, r3
 801c2ec:	0092      	lsls	r2, r2, #2
 801c2ee:	4413      	add	r3, r2
 801c2f0:	00db      	lsls	r3, r3, #3
 801c2f2:	b29b      	uxth	r3, r3
 801c2f4:	e001      	b.n	801c2fa <dhcp_discover+0x10a>
 801c2f6:	f64e 2360 	movw	r3, #60000	; 0xea60
 801c2fa:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c2fc:	897b      	ldrh	r3, [r7, #10]
 801c2fe:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c302:	4a0b      	ldr	r2, [pc, #44]	; (801c330 <dhcp_discover+0x140>)
 801c304:	fb82 1203 	smull	r1, r2, r2, r3
 801c308:	1152      	asrs	r2, r2, #5
 801c30a:	17db      	asrs	r3, r3, #31
 801c30c:	1ad3      	subs	r3, r2, r3
 801c30e:	b29a      	uxth	r2, r3
 801c310:	69bb      	ldr	r3, [r7, #24]
 801c312:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c314:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c318:	4618      	mov	r0, r3
 801c31a:	3720      	adds	r7, #32
 801c31c:	46bd      	mov	sp, r7
 801c31e:	bd80      	pop	{r7, pc}
 801c320:	20000030 	.word	0x20000030
 801c324:	200123d8 	.word	0x200123d8
 801c328:	08027400 	.word	0x08027400
 801c32c:	08027404 	.word	0x08027404
 801c330:	10624dd3 	.word	0x10624dd3

0801c334 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801c334:	b580      	push	{r7, lr}
 801c336:	b088      	sub	sp, #32
 801c338:	af00      	add	r7, sp, #0
 801c33a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	2b00      	cmp	r3, #0
 801c340:	d107      	bne.n	801c352 <dhcp_bind+0x1e>
 801c342:	4b64      	ldr	r3, [pc, #400]	; (801c4d4 <dhcp_bind+0x1a0>)
 801c344:	f240 4215 	movw	r2, #1045	; 0x415
 801c348:	4963      	ldr	r1, [pc, #396]	; (801c4d8 <dhcp_bind+0x1a4>)
 801c34a:	4864      	ldr	r0, [pc, #400]	; (801c4dc <dhcp_bind+0x1a8>)
 801c34c:	f005 f9e4 	bl	8021718 <iprintf>
 801c350:	e0bc      	b.n	801c4cc <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c356:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801c358:	69bb      	ldr	r3, [r7, #24]
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d107      	bne.n	801c36e <dhcp_bind+0x3a>
 801c35e:	4b5d      	ldr	r3, [pc, #372]	; (801c4d4 <dhcp_bind+0x1a0>)
 801c360:	f240 4217 	movw	r2, #1047	; 0x417
 801c364:	495e      	ldr	r1, [pc, #376]	; (801c4e0 <dhcp_bind+0x1ac>)
 801c366:	485d      	ldr	r0, [pc, #372]	; (801c4dc <dhcp_bind+0x1a8>)
 801c368:	f005 f9d6 	bl	8021718 <iprintf>
 801c36c:	e0ae      	b.n	801c4cc <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801c36e:	69bb      	ldr	r3, [r7, #24]
 801c370:	2200      	movs	r2, #0
 801c372:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801c374:	69bb      	ldr	r3, [r7, #24]
 801c376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c37c:	d019      	beq.n	801c3b2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c37e:	69bb      	ldr	r3, [r7, #24]
 801c380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c382:	331e      	adds	r3, #30
 801c384:	4a57      	ldr	r2, [pc, #348]	; (801c4e4 <dhcp_bind+0x1b0>)
 801c386:	fba2 2303 	umull	r2, r3, r2, r3
 801c38a:	095b      	lsrs	r3, r3, #5
 801c38c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801c38e:	69fb      	ldr	r3, [r7, #28]
 801c390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c394:	d302      	bcc.n	801c39c <dhcp_bind+0x68>
      timeout = 0xffff;
 801c396:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c39a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801c39c:	69fb      	ldr	r3, [r7, #28]
 801c39e:	b29a      	uxth	r2, r3
 801c3a0:	69bb      	ldr	r3, [r7, #24]
 801c3a2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801c3a4:	69bb      	ldr	r3, [r7, #24]
 801c3a6:	8a9b      	ldrh	r3, [r3, #20]
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	d102      	bne.n	801c3b2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801c3ac:	69bb      	ldr	r3, [r7, #24]
 801c3ae:	2201      	movs	r2, #1
 801c3b0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801c3b2:	69bb      	ldr	r3, [r7, #24]
 801c3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c3ba:	d01d      	beq.n	801c3f8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c3bc:	69bb      	ldr	r3, [r7, #24]
 801c3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3c0:	331e      	adds	r3, #30
 801c3c2:	4a48      	ldr	r2, [pc, #288]	; (801c4e4 <dhcp_bind+0x1b0>)
 801c3c4:	fba2 2303 	umull	r2, r3, r2, r3
 801c3c8:	095b      	lsrs	r3, r3, #5
 801c3ca:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801c3cc:	69fb      	ldr	r3, [r7, #28]
 801c3ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c3d2:	d302      	bcc.n	801c3da <dhcp_bind+0xa6>
      timeout = 0xffff;
 801c3d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c3d8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801c3da:	69fb      	ldr	r3, [r7, #28]
 801c3dc:	b29a      	uxth	r2, r3
 801c3de:	69bb      	ldr	r3, [r7, #24]
 801c3e0:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801c3e2:	69bb      	ldr	r3, [r7, #24]
 801c3e4:	895b      	ldrh	r3, [r3, #10]
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	d102      	bne.n	801c3f0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801c3ea:	69bb      	ldr	r3, [r7, #24]
 801c3ec:	2201      	movs	r2, #1
 801c3ee:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801c3f0:	69bb      	ldr	r3, [r7, #24]
 801c3f2:	895a      	ldrh	r2, [r3, #10]
 801c3f4:	69bb      	ldr	r3, [r7, #24]
 801c3f6:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801c3f8:	69bb      	ldr	r3, [r7, #24]
 801c3fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c3fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c400:	d01d      	beq.n	801c43e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c402:	69bb      	ldr	r3, [r7, #24]
 801c404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c406:	331e      	adds	r3, #30
 801c408:	4a36      	ldr	r2, [pc, #216]	; (801c4e4 <dhcp_bind+0x1b0>)
 801c40a:	fba2 2303 	umull	r2, r3, r2, r3
 801c40e:	095b      	lsrs	r3, r3, #5
 801c410:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801c412:	69fb      	ldr	r3, [r7, #28]
 801c414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c418:	d302      	bcc.n	801c420 <dhcp_bind+0xec>
      timeout = 0xffff;
 801c41a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c41e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801c420:	69fb      	ldr	r3, [r7, #28]
 801c422:	b29a      	uxth	r2, r3
 801c424:	69bb      	ldr	r3, [r7, #24]
 801c426:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801c428:	69bb      	ldr	r3, [r7, #24]
 801c42a:	899b      	ldrh	r3, [r3, #12]
 801c42c:	2b00      	cmp	r3, #0
 801c42e:	d102      	bne.n	801c436 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801c430:	69bb      	ldr	r3, [r7, #24]
 801c432:	2201      	movs	r2, #1
 801c434:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801c436:	69bb      	ldr	r3, [r7, #24]
 801c438:	899a      	ldrh	r2, [r3, #12]
 801c43a:	69bb      	ldr	r3, [r7, #24]
 801c43c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801c43e:	69bb      	ldr	r3, [r7, #24]
 801c440:	895a      	ldrh	r2, [r3, #10]
 801c442:	69bb      	ldr	r3, [r7, #24]
 801c444:	899b      	ldrh	r3, [r3, #12]
 801c446:	429a      	cmp	r2, r3
 801c448:	d306      	bcc.n	801c458 <dhcp_bind+0x124>
 801c44a:	69bb      	ldr	r3, [r7, #24]
 801c44c:	899b      	ldrh	r3, [r3, #12]
 801c44e:	2b00      	cmp	r3, #0
 801c450:	d002      	beq.n	801c458 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801c452:	69bb      	ldr	r3, [r7, #24]
 801c454:	2200      	movs	r2, #0
 801c456:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801c458:	69bb      	ldr	r3, [r7, #24]
 801c45a:	79db      	ldrb	r3, [r3, #7]
 801c45c:	2b00      	cmp	r3, #0
 801c45e:	d003      	beq.n	801c468 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801c460:	69bb      	ldr	r3, [r7, #24]
 801c462:	6a1b      	ldr	r3, [r3, #32]
 801c464:	613b      	str	r3, [r7, #16]
 801c466:	e014      	b.n	801c492 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801c468:	69bb      	ldr	r3, [r7, #24]
 801c46a:	331c      	adds	r3, #28
 801c46c:	781b      	ldrb	r3, [r3, #0]
 801c46e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801c470:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c474:	2b00      	cmp	r3, #0
 801c476:	db02      	blt.n	801c47e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801c478:	23ff      	movs	r3, #255	; 0xff
 801c47a:	613b      	str	r3, [r7, #16]
 801c47c:	e009      	b.n	801c492 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801c47e:	7dfb      	ldrb	r3, [r7, #23]
 801c480:	2bbf      	cmp	r3, #191	; 0xbf
 801c482:	d903      	bls.n	801c48c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801c484:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801c488:	613b      	str	r3, [r7, #16]
 801c48a:	e002      	b.n	801c492 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801c48c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c490:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801c492:	69bb      	ldr	r3, [r7, #24]
 801c494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c496:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801c498:	68fb      	ldr	r3, [r7, #12]
 801c49a:	2b00      	cmp	r3, #0
 801c49c:	d108      	bne.n	801c4b0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801c49e:	69bb      	ldr	r3, [r7, #24]
 801c4a0:	69da      	ldr	r2, [r3, #28]
 801c4a2:	693b      	ldr	r3, [r7, #16]
 801c4a4:	4013      	ands	r3, r2
 801c4a6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801c4a8:	68fb      	ldr	r3, [r7, #12]
 801c4aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c4ae:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801c4b0:	210a      	movs	r1, #10
 801c4b2:	69b8      	ldr	r0, [r7, #24]
 801c4b4:	f000 faa0 	bl	801c9f8 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801c4b8:	69bb      	ldr	r3, [r7, #24]
 801c4ba:	f103 011c 	add.w	r1, r3, #28
 801c4be:	f107 030c 	add.w	r3, r7, #12
 801c4c2:	f107 0210 	add.w	r2, r7, #16
 801c4c6:	6878      	ldr	r0, [r7, #4]
 801c4c8:	f7f7 fad4 	bl	8013a74 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801c4cc:	3720      	adds	r7, #32
 801c4ce:	46bd      	mov	sp, r7
 801c4d0:	bd80      	pop	{r7, pc}
 801c4d2:	bf00      	nop
 801c4d4:	0802673c 	.word	0x0802673c
 801c4d8:	0802689c 	.word	0x0802689c
 801c4dc:	0802679c 	.word	0x0802679c
 801c4e0:	080268b8 	.word	0x080268b8
 801c4e4:	88888889 	.word	0x88888889

0801c4e8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801c4e8:	b580      	push	{r7, lr}
 801c4ea:	b08a      	sub	sp, #40	; 0x28
 801c4ec:	af02      	add	r7, sp, #8
 801c4ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c4f4:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801c4f6:	2105      	movs	r1, #5
 801c4f8:	69b8      	ldr	r0, [r7, #24]
 801c4fa:	f000 fa7d 	bl	801c9f8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c4fe:	f107 030c 	add.w	r3, r7, #12
 801c502:	2203      	movs	r2, #3
 801c504:	69b9      	ldr	r1, [r7, #24]
 801c506:	6878      	ldr	r0, [r7, #4]
 801c508:	f000 ff02 	bl	801d310 <dhcp_create_msg>
 801c50c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c50e:	697b      	ldr	r3, [r7, #20]
 801c510:	2b00      	cmp	r3, #0
 801c512:	d04e      	beq.n	801c5b2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c514:	697b      	ldr	r3, [r7, #20]
 801c516:	685b      	ldr	r3, [r3, #4]
 801c518:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c51a:	89b8      	ldrh	r0, [r7, #12]
 801c51c:	693b      	ldr	r3, [r7, #16]
 801c51e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c522:	2302      	movs	r3, #2
 801c524:	2239      	movs	r2, #57	; 0x39
 801c526:	f000 fa81 	bl	801ca2c <dhcp_option>
 801c52a:	4603      	mov	r3, r0
 801c52c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c52e:	89b8      	ldrh	r0, [r7, #12]
 801c530:	693b      	ldr	r3, [r7, #16]
 801c532:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c536:	687b      	ldr	r3, [r7, #4]
 801c538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c53a:	461a      	mov	r2, r3
 801c53c:	f000 fad0 	bl	801cae0 <dhcp_option_short>
 801c540:	4603      	mov	r3, r0
 801c542:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c544:	89b8      	ldrh	r0, [r7, #12]
 801c546:	693b      	ldr	r3, [r7, #16]
 801c548:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c54c:	2303      	movs	r3, #3
 801c54e:	2237      	movs	r2, #55	; 0x37
 801c550:	f000 fa6c 	bl	801ca2c <dhcp_option>
 801c554:	4603      	mov	r3, r0
 801c556:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c558:	2300      	movs	r3, #0
 801c55a:	77bb      	strb	r3, [r7, #30]
 801c55c:	e00e      	b.n	801c57c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c55e:	89b8      	ldrh	r0, [r7, #12]
 801c560:	693b      	ldr	r3, [r7, #16]
 801c562:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c566:	7fbb      	ldrb	r3, [r7, #30]
 801c568:	4a2a      	ldr	r2, [pc, #168]	; (801c614 <dhcp_renew+0x12c>)
 801c56a:	5cd3      	ldrb	r3, [r2, r3]
 801c56c:	461a      	mov	r2, r3
 801c56e:	f000 fa91 	bl	801ca94 <dhcp_option_byte>
 801c572:	4603      	mov	r3, r0
 801c574:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c576:	7fbb      	ldrb	r3, [r7, #30]
 801c578:	3301      	adds	r3, #1
 801c57a:	77bb      	strb	r3, [r7, #30]
 801c57c:	7fbb      	ldrb	r3, [r7, #30]
 801c57e:	2b02      	cmp	r3, #2
 801c580:	d9ed      	bls.n	801c55e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c582:	89b8      	ldrh	r0, [r7, #12]
 801c584:	693b      	ldr	r3, [r7, #16]
 801c586:	33f0      	adds	r3, #240	; 0xf0
 801c588:	697a      	ldr	r2, [r7, #20]
 801c58a:	4619      	mov	r1, r3
 801c58c:	f000 ff96 	bl	801d4bc <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801c590:	4b21      	ldr	r3, [pc, #132]	; (801c618 <dhcp_renew+0x130>)
 801c592:	6818      	ldr	r0, [r3, #0]
 801c594:	69bb      	ldr	r3, [r7, #24]
 801c596:	f103 0218 	add.w	r2, r3, #24
 801c59a:	687b      	ldr	r3, [r7, #4]
 801c59c:	9300      	str	r3, [sp, #0]
 801c59e:	2343      	movs	r3, #67	; 0x43
 801c5a0:	6979      	ldr	r1, [r7, #20]
 801c5a2:	f7fe fe3b 	bl	801b21c <udp_sendto_if>
 801c5a6:	4603      	mov	r3, r0
 801c5a8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801c5aa:	6978      	ldr	r0, [r7, #20]
 801c5ac:	f7f7 ff70 	bl	8014490 <pbuf_free>
 801c5b0:	e001      	b.n	801c5b6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801c5b2:	23ff      	movs	r3, #255	; 0xff
 801c5b4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801c5b6:	69bb      	ldr	r3, [r7, #24]
 801c5b8:	799b      	ldrb	r3, [r3, #6]
 801c5ba:	2bff      	cmp	r3, #255	; 0xff
 801c5bc:	d005      	beq.n	801c5ca <dhcp_renew+0xe2>
    dhcp->tries++;
 801c5be:	69bb      	ldr	r3, [r7, #24]
 801c5c0:	799b      	ldrb	r3, [r3, #6]
 801c5c2:	3301      	adds	r3, #1
 801c5c4:	b2da      	uxtb	r2, r3
 801c5c6:	69bb      	ldr	r3, [r7, #24]
 801c5c8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801c5ca:	69bb      	ldr	r3, [r7, #24]
 801c5cc:	799b      	ldrb	r3, [r3, #6]
 801c5ce:	2b09      	cmp	r3, #9
 801c5d0:	d80a      	bhi.n	801c5e8 <dhcp_renew+0x100>
 801c5d2:	69bb      	ldr	r3, [r7, #24]
 801c5d4:	799b      	ldrb	r3, [r3, #6]
 801c5d6:	b29b      	uxth	r3, r3
 801c5d8:	461a      	mov	r2, r3
 801c5da:	0152      	lsls	r2, r2, #5
 801c5dc:	1ad2      	subs	r2, r2, r3
 801c5de:	0092      	lsls	r2, r2, #2
 801c5e0:	4413      	add	r3, r2
 801c5e2:	011b      	lsls	r3, r3, #4
 801c5e4:	b29b      	uxth	r3, r3
 801c5e6:	e001      	b.n	801c5ec <dhcp_renew+0x104>
 801c5e8:	f644 6320 	movw	r3, #20000	; 0x4e20
 801c5ec:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c5ee:	89fb      	ldrh	r3, [r7, #14]
 801c5f0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c5f4:	4a09      	ldr	r2, [pc, #36]	; (801c61c <dhcp_renew+0x134>)
 801c5f6:	fb82 1203 	smull	r1, r2, r2, r3
 801c5fa:	1152      	asrs	r2, r2, #5
 801c5fc:	17db      	asrs	r3, r3, #31
 801c5fe:	1ad3      	subs	r3, r2, r3
 801c600:	b29a      	uxth	r2, r3
 801c602:	69bb      	ldr	r3, [r7, #24]
 801c604:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c606:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c60a:	4618      	mov	r0, r3
 801c60c:	3720      	adds	r7, #32
 801c60e:	46bd      	mov	sp, r7
 801c610:	bd80      	pop	{r7, pc}
 801c612:	bf00      	nop
 801c614:	20000030 	.word	0x20000030
 801c618:	200123d8 	.word	0x200123d8
 801c61c:	10624dd3 	.word	0x10624dd3

0801c620 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801c620:	b580      	push	{r7, lr}
 801c622:	b08a      	sub	sp, #40	; 0x28
 801c624:	af02      	add	r7, sp, #8
 801c626:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c628:	687b      	ldr	r3, [r7, #4]
 801c62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c62c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801c62e:	2104      	movs	r1, #4
 801c630:	69b8      	ldr	r0, [r7, #24]
 801c632:	f000 f9e1 	bl	801c9f8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c636:	f107 030c 	add.w	r3, r7, #12
 801c63a:	2203      	movs	r2, #3
 801c63c:	69b9      	ldr	r1, [r7, #24]
 801c63e:	6878      	ldr	r0, [r7, #4]
 801c640:	f000 fe66 	bl	801d310 <dhcp_create_msg>
 801c644:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c646:	697b      	ldr	r3, [r7, #20]
 801c648:	2b00      	cmp	r3, #0
 801c64a:	d04c      	beq.n	801c6e6 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c64c:	697b      	ldr	r3, [r7, #20]
 801c64e:	685b      	ldr	r3, [r3, #4]
 801c650:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c652:	89b8      	ldrh	r0, [r7, #12]
 801c654:	693b      	ldr	r3, [r7, #16]
 801c656:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c65a:	2302      	movs	r3, #2
 801c65c:	2239      	movs	r2, #57	; 0x39
 801c65e:	f000 f9e5 	bl	801ca2c <dhcp_option>
 801c662:	4603      	mov	r3, r0
 801c664:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c666:	89b8      	ldrh	r0, [r7, #12]
 801c668:	693b      	ldr	r3, [r7, #16]
 801c66a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c66e:	687b      	ldr	r3, [r7, #4]
 801c670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c672:	461a      	mov	r2, r3
 801c674:	f000 fa34 	bl	801cae0 <dhcp_option_short>
 801c678:	4603      	mov	r3, r0
 801c67a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c67c:	89b8      	ldrh	r0, [r7, #12]
 801c67e:	693b      	ldr	r3, [r7, #16]
 801c680:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c684:	2303      	movs	r3, #3
 801c686:	2237      	movs	r2, #55	; 0x37
 801c688:	f000 f9d0 	bl	801ca2c <dhcp_option>
 801c68c:	4603      	mov	r3, r0
 801c68e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c690:	2300      	movs	r3, #0
 801c692:	77bb      	strb	r3, [r7, #30]
 801c694:	e00e      	b.n	801c6b4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c696:	89b8      	ldrh	r0, [r7, #12]
 801c698:	693b      	ldr	r3, [r7, #16]
 801c69a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c69e:	7fbb      	ldrb	r3, [r7, #30]
 801c6a0:	4a29      	ldr	r2, [pc, #164]	; (801c748 <dhcp_rebind+0x128>)
 801c6a2:	5cd3      	ldrb	r3, [r2, r3]
 801c6a4:	461a      	mov	r2, r3
 801c6a6:	f000 f9f5 	bl	801ca94 <dhcp_option_byte>
 801c6aa:	4603      	mov	r3, r0
 801c6ac:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c6ae:	7fbb      	ldrb	r3, [r7, #30]
 801c6b0:	3301      	adds	r3, #1
 801c6b2:	77bb      	strb	r3, [r7, #30]
 801c6b4:	7fbb      	ldrb	r3, [r7, #30]
 801c6b6:	2b02      	cmp	r3, #2
 801c6b8:	d9ed      	bls.n	801c696 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c6ba:	89b8      	ldrh	r0, [r7, #12]
 801c6bc:	693b      	ldr	r3, [r7, #16]
 801c6be:	33f0      	adds	r3, #240	; 0xf0
 801c6c0:	697a      	ldr	r2, [r7, #20]
 801c6c2:	4619      	mov	r1, r3
 801c6c4:	f000 fefa 	bl	801d4bc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801c6c8:	4b20      	ldr	r3, [pc, #128]	; (801c74c <dhcp_rebind+0x12c>)
 801c6ca:	6818      	ldr	r0, [r3, #0]
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	9300      	str	r3, [sp, #0]
 801c6d0:	2343      	movs	r3, #67	; 0x43
 801c6d2:	4a1f      	ldr	r2, [pc, #124]	; (801c750 <dhcp_rebind+0x130>)
 801c6d4:	6979      	ldr	r1, [r7, #20]
 801c6d6:	f7fe fda1 	bl	801b21c <udp_sendto_if>
 801c6da:	4603      	mov	r3, r0
 801c6dc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801c6de:	6978      	ldr	r0, [r7, #20]
 801c6e0:	f7f7 fed6 	bl	8014490 <pbuf_free>
 801c6e4:	e001      	b.n	801c6ea <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801c6e6:	23ff      	movs	r3, #255	; 0xff
 801c6e8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801c6ea:	69bb      	ldr	r3, [r7, #24]
 801c6ec:	799b      	ldrb	r3, [r3, #6]
 801c6ee:	2bff      	cmp	r3, #255	; 0xff
 801c6f0:	d005      	beq.n	801c6fe <dhcp_rebind+0xde>
    dhcp->tries++;
 801c6f2:	69bb      	ldr	r3, [r7, #24]
 801c6f4:	799b      	ldrb	r3, [r3, #6]
 801c6f6:	3301      	adds	r3, #1
 801c6f8:	b2da      	uxtb	r2, r3
 801c6fa:	69bb      	ldr	r3, [r7, #24]
 801c6fc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801c6fe:	69bb      	ldr	r3, [r7, #24]
 801c700:	799b      	ldrb	r3, [r3, #6]
 801c702:	2b09      	cmp	r3, #9
 801c704:	d80a      	bhi.n	801c71c <dhcp_rebind+0xfc>
 801c706:	69bb      	ldr	r3, [r7, #24]
 801c708:	799b      	ldrb	r3, [r3, #6]
 801c70a:	b29b      	uxth	r3, r3
 801c70c:	461a      	mov	r2, r3
 801c70e:	0152      	lsls	r2, r2, #5
 801c710:	1ad2      	subs	r2, r2, r3
 801c712:	0092      	lsls	r2, r2, #2
 801c714:	4413      	add	r3, r2
 801c716:	00db      	lsls	r3, r3, #3
 801c718:	b29b      	uxth	r3, r3
 801c71a:	e001      	b.n	801c720 <dhcp_rebind+0x100>
 801c71c:	f242 7310 	movw	r3, #10000	; 0x2710
 801c720:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c722:	89fb      	ldrh	r3, [r7, #14]
 801c724:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c728:	4a0a      	ldr	r2, [pc, #40]	; (801c754 <dhcp_rebind+0x134>)
 801c72a:	fb82 1203 	smull	r1, r2, r2, r3
 801c72e:	1152      	asrs	r2, r2, #5
 801c730:	17db      	asrs	r3, r3, #31
 801c732:	1ad3      	subs	r3, r2, r3
 801c734:	b29a      	uxth	r2, r3
 801c736:	69bb      	ldr	r3, [r7, #24]
 801c738:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c73a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c73e:	4618      	mov	r0, r3
 801c740:	3720      	adds	r7, #32
 801c742:	46bd      	mov	sp, r7
 801c744:	bd80      	pop	{r7, pc}
 801c746:	bf00      	nop
 801c748:	20000030 	.word	0x20000030
 801c74c:	200123d8 	.word	0x200123d8
 801c750:	08027404 	.word	0x08027404
 801c754:	10624dd3 	.word	0x10624dd3

0801c758 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801c758:	b5b0      	push	{r4, r5, r7, lr}
 801c75a:	b08a      	sub	sp, #40	; 0x28
 801c75c:	af02      	add	r7, sp, #8
 801c75e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c760:	687b      	ldr	r3, [r7, #4]
 801c762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c764:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801c766:	2103      	movs	r1, #3
 801c768:	69b8      	ldr	r0, [r7, #24]
 801c76a:	f000 f945 	bl	801c9f8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c76e:	f107 030c 	add.w	r3, r7, #12
 801c772:	2203      	movs	r2, #3
 801c774:	69b9      	ldr	r1, [r7, #24]
 801c776:	6878      	ldr	r0, [r7, #4]
 801c778:	f000 fdca 	bl	801d310 <dhcp_create_msg>
 801c77c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c77e:	697b      	ldr	r3, [r7, #20]
 801c780:	2b00      	cmp	r3, #0
 801c782:	d066      	beq.n	801c852 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c784:	697b      	ldr	r3, [r7, #20]
 801c786:	685b      	ldr	r3, [r3, #4]
 801c788:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c78a:	89b8      	ldrh	r0, [r7, #12]
 801c78c:	693b      	ldr	r3, [r7, #16]
 801c78e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c792:	2302      	movs	r3, #2
 801c794:	2239      	movs	r2, #57	; 0x39
 801c796:	f000 f949 	bl	801ca2c <dhcp_option>
 801c79a:	4603      	mov	r3, r0
 801c79c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801c79e:	89b8      	ldrh	r0, [r7, #12]
 801c7a0:	693b      	ldr	r3, [r7, #16]
 801c7a2:	33f0      	adds	r3, #240	; 0xf0
 801c7a4:	f44f 7210 	mov.w	r2, #576	; 0x240
 801c7a8:	4619      	mov	r1, r3
 801c7aa:	f000 f999 	bl	801cae0 <dhcp_option_short>
 801c7ae:	4603      	mov	r3, r0
 801c7b0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c7b2:	89b8      	ldrh	r0, [r7, #12]
 801c7b4:	693b      	ldr	r3, [r7, #16]
 801c7b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c7ba:	2304      	movs	r3, #4
 801c7bc:	2232      	movs	r2, #50	; 0x32
 801c7be:	f000 f935 	bl	801ca2c <dhcp_option>
 801c7c2:	4603      	mov	r3, r0
 801c7c4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c7c6:	89bc      	ldrh	r4, [r7, #12]
 801c7c8:	693b      	ldr	r3, [r7, #16]
 801c7ca:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801c7ce:	69bb      	ldr	r3, [r7, #24]
 801c7d0:	69db      	ldr	r3, [r3, #28]
 801c7d2:	4618      	mov	r0, r3
 801c7d4:	f7f6 fa73 	bl	8012cbe <lwip_htonl>
 801c7d8:	4603      	mov	r3, r0
 801c7da:	461a      	mov	r2, r3
 801c7dc:	4629      	mov	r1, r5
 801c7de:	4620      	mov	r0, r4
 801c7e0:	f000 f9b0 	bl	801cb44 <dhcp_option_long>
 801c7e4:	4603      	mov	r3, r0
 801c7e6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c7e8:	89b8      	ldrh	r0, [r7, #12]
 801c7ea:	693b      	ldr	r3, [r7, #16]
 801c7ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c7f0:	2303      	movs	r3, #3
 801c7f2:	2237      	movs	r2, #55	; 0x37
 801c7f4:	f000 f91a 	bl	801ca2c <dhcp_option>
 801c7f8:	4603      	mov	r3, r0
 801c7fa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c7fc:	2300      	movs	r3, #0
 801c7fe:	77bb      	strb	r3, [r7, #30]
 801c800:	e00e      	b.n	801c820 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c802:	89b8      	ldrh	r0, [r7, #12]
 801c804:	693b      	ldr	r3, [r7, #16]
 801c806:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c80a:	7fbb      	ldrb	r3, [r7, #30]
 801c80c:	4a29      	ldr	r2, [pc, #164]	; (801c8b4 <dhcp_reboot+0x15c>)
 801c80e:	5cd3      	ldrb	r3, [r2, r3]
 801c810:	461a      	mov	r2, r3
 801c812:	f000 f93f 	bl	801ca94 <dhcp_option_byte>
 801c816:	4603      	mov	r3, r0
 801c818:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c81a:	7fbb      	ldrb	r3, [r7, #30]
 801c81c:	3301      	adds	r3, #1
 801c81e:	77bb      	strb	r3, [r7, #30]
 801c820:	7fbb      	ldrb	r3, [r7, #30]
 801c822:	2b02      	cmp	r3, #2
 801c824:	d9ed      	bls.n	801c802 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c826:	89b8      	ldrh	r0, [r7, #12]
 801c828:	693b      	ldr	r3, [r7, #16]
 801c82a:	33f0      	adds	r3, #240	; 0xf0
 801c82c:	697a      	ldr	r2, [r7, #20]
 801c82e:	4619      	mov	r1, r3
 801c830:	f000 fe44 	bl	801d4bc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801c834:	4b20      	ldr	r3, [pc, #128]	; (801c8b8 <dhcp_reboot+0x160>)
 801c836:	6818      	ldr	r0, [r3, #0]
 801c838:	687b      	ldr	r3, [r7, #4]
 801c83a:	9300      	str	r3, [sp, #0]
 801c83c:	2343      	movs	r3, #67	; 0x43
 801c83e:	4a1f      	ldr	r2, [pc, #124]	; (801c8bc <dhcp_reboot+0x164>)
 801c840:	6979      	ldr	r1, [r7, #20]
 801c842:	f7fe fceb 	bl	801b21c <udp_sendto_if>
 801c846:	4603      	mov	r3, r0
 801c848:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801c84a:	6978      	ldr	r0, [r7, #20]
 801c84c:	f7f7 fe20 	bl	8014490 <pbuf_free>
 801c850:	e001      	b.n	801c856 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801c852:	23ff      	movs	r3, #255	; 0xff
 801c854:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801c856:	69bb      	ldr	r3, [r7, #24]
 801c858:	799b      	ldrb	r3, [r3, #6]
 801c85a:	2bff      	cmp	r3, #255	; 0xff
 801c85c:	d005      	beq.n	801c86a <dhcp_reboot+0x112>
    dhcp->tries++;
 801c85e:	69bb      	ldr	r3, [r7, #24]
 801c860:	799b      	ldrb	r3, [r3, #6]
 801c862:	3301      	adds	r3, #1
 801c864:	b2da      	uxtb	r2, r3
 801c866:	69bb      	ldr	r3, [r7, #24]
 801c868:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801c86a:	69bb      	ldr	r3, [r7, #24]
 801c86c:	799b      	ldrb	r3, [r3, #6]
 801c86e:	2b09      	cmp	r3, #9
 801c870:	d80a      	bhi.n	801c888 <dhcp_reboot+0x130>
 801c872:	69bb      	ldr	r3, [r7, #24]
 801c874:	799b      	ldrb	r3, [r3, #6]
 801c876:	b29b      	uxth	r3, r3
 801c878:	461a      	mov	r2, r3
 801c87a:	0152      	lsls	r2, r2, #5
 801c87c:	1ad2      	subs	r2, r2, r3
 801c87e:	0092      	lsls	r2, r2, #2
 801c880:	4413      	add	r3, r2
 801c882:	00db      	lsls	r3, r3, #3
 801c884:	b29b      	uxth	r3, r3
 801c886:	e001      	b.n	801c88c <dhcp_reboot+0x134>
 801c888:	f242 7310 	movw	r3, #10000	; 0x2710
 801c88c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c88e:	89fb      	ldrh	r3, [r7, #14]
 801c890:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c894:	4a0a      	ldr	r2, [pc, #40]	; (801c8c0 <dhcp_reboot+0x168>)
 801c896:	fb82 1203 	smull	r1, r2, r2, r3
 801c89a:	1152      	asrs	r2, r2, #5
 801c89c:	17db      	asrs	r3, r3, #31
 801c89e:	1ad3      	subs	r3, r2, r3
 801c8a0:	b29a      	uxth	r2, r3
 801c8a2:	69bb      	ldr	r3, [r7, #24]
 801c8a4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c8a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c8aa:	4618      	mov	r0, r3
 801c8ac:	3720      	adds	r7, #32
 801c8ae:	46bd      	mov	sp, r7
 801c8b0:	bdb0      	pop	{r4, r5, r7, pc}
 801c8b2:	bf00      	nop
 801c8b4:	20000030 	.word	0x20000030
 801c8b8:	200123d8 	.word	0x200123d8
 801c8bc:	08027404 	.word	0x08027404
 801c8c0:	10624dd3 	.word	0x10624dd3

0801c8c4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801c8c4:	b5b0      	push	{r4, r5, r7, lr}
 801c8c6:	b08a      	sub	sp, #40	; 0x28
 801c8c8:	af02      	add	r7, sp, #8
 801c8ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c8cc:	687b      	ldr	r3, [r7, #4]
 801c8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c8d0:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801c8d2:	69fb      	ldr	r3, [r7, #28]
 801c8d4:	2b00      	cmp	r3, #0
 801c8d6:	f000 8084 	beq.w	801c9e2 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801c8da:	69fb      	ldr	r3, [r7, #28]
 801c8dc:	795b      	ldrb	r3, [r3, #5]
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	f000 8081 	beq.w	801c9e6 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801c8e4:	69fb      	ldr	r3, [r7, #28]
 801c8e6:	699b      	ldr	r3, [r3, #24]
 801c8e8:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801c8ea:	69fb      	ldr	r3, [r7, #28]
 801c8ec:	2200      	movs	r2, #0
 801c8ee:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801c8f0:	69fb      	ldr	r3, [r7, #28]
 801c8f2:	2200      	movs	r2, #0
 801c8f4:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801c8f6:	69fb      	ldr	r3, [r7, #28]
 801c8f8:	2200      	movs	r2, #0
 801c8fa:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801c8fc:	69fb      	ldr	r3, [r7, #28]
 801c8fe:	2200      	movs	r2, #0
 801c900:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801c902:	69fb      	ldr	r3, [r7, #28]
 801c904:	2200      	movs	r2, #0
 801c906:	631a      	str	r2, [r3, #48]	; 0x30
 801c908:	69fb      	ldr	r3, [r7, #28]
 801c90a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c90c:	69fb      	ldr	r3, [r7, #28]
 801c90e:	62da      	str	r2, [r3, #44]	; 0x2c
 801c910:	69fb      	ldr	r3, [r7, #28]
 801c912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c914:	69fb      	ldr	r3, [r7, #28]
 801c916:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801c918:	69fb      	ldr	r3, [r7, #28]
 801c91a:	2200      	movs	r2, #0
 801c91c:	829a      	strh	r2, [r3, #20]
 801c91e:	69fb      	ldr	r3, [r7, #28]
 801c920:	8a9a      	ldrh	r2, [r3, #20]
 801c922:	69fb      	ldr	r3, [r7, #28]
 801c924:	825a      	strh	r2, [r3, #18]
 801c926:	69fb      	ldr	r3, [r7, #28]
 801c928:	8a5a      	ldrh	r2, [r3, #18]
 801c92a:	69fb      	ldr	r3, [r7, #28]
 801c92c:	821a      	strh	r2, [r3, #16]
 801c92e:	69fb      	ldr	r3, [r7, #28]
 801c930:	8a1a      	ldrh	r2, [r3, #16]
 801c932:	69fb      	ldr	r3, [r7, #28]
 801c934:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801c936:	6878      	ldr	r0, [r7, #4]
 801c938:	f000 fdee 	bl	801d518 <dhcp_supplied_address>
 801c93c:	4603      	mov	r3, r0
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d03b      	beq.n	801c9ba <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801c942:	f107 030e 	add.w	r3, r7, #14
 801c946:	2207      	movs	r2, #7
 801c948:	69f9      	ldr	r1, [r7, #28]
 801c94a:	6878      	ldr	r0, [r7, #4]
 801c94c:	f000 fce0 	bl	801d310 <dhcp_create_msg>
 801c950:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801c952:	69bb      	ldr	r3, [r7, #24]
 801c954:	2b00      	cmp	r3, #0
 801c956:	d030      	beq.n	801c9ba <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c958:	69bb      	ldr	r3, [r7, #24]
 801c95a:	685b      	ldr	r3, [r3, #4]
 801c95c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801c95e:	89f8      	ldrh	r0, [r7, #14]
 801c960:	697b      	ldr	r3, [r7, #20]
 801c962:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c966:	2304      	movs	r3, #4
 801c968:	2236      	movs	r2, #54	; 0x36
 801c96a:	f000 f85f 	bl	801ca2c <dhcp_option>
 801c96e:	4603      	mov	r3, r0
 801c970:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801c972:	89fc      	ldrh	r4, [r7, #14]
 801c974:	697b      	ldr	r3, [r7, #20]
 801c976:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801c97a:	693b      	ldr	r3, [r7, #16]
 801c97c:	4618      	mov	r0, r3
 801c97e:	f7f6 f99e 	bl	8012cbe <lwip_htonl>
 801c982:	4603      	mov	r3, r0
 801c984:	461a      	mov	r2, r3
 801c986:	4629      	mov	r1, r5
 801c988:	4620      	mov	r0, r4
 801c98a:	f000 f8db 	bl	801cb44 <dhcp_option_long>
 801c98e:	4603      	mov	r3, r0
 801c990:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c992:	89f8      	ldrh	r0, [r7, #14]
 801c994:	697b      	ldr	r3, [r7, #20]
 801c996:	33f0      	adds	r3, #240	; 0xf0
 801c998:	69ba      	ldr	r2, [r7, #24]
 801c99a:	4619      	mov	r1, r3
 801c99c:	f000 fd8e 	bl	801d4bc <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801c9a0:	4b13      	ldr	r3, [pc, #76]	; (801c9f0 <dhcp_release_and_stop+0x12c>)
 801c9a2:	6818      	ldr	r0, [r3, #0]
 801c9a4:	f107 0210 	add.w	r2, r7, #16
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	9300      	str	r3, [sp, #0]
 801c9ac:	2343      	movs	r3, #67	; 0x43
 801c9ae:	69b9      	ldr	r1, [r7, #24]
 801c9b0:	f7fe fc34 	bl	801b21c <udp_sendto_if>
      pbuf_free(p_out);
 801c9b4:	69b8      	ldr	r0, [r7, #24]
 801c9b6:	f7f7 fd6b 	bl	8014490 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801c9ba:	4b0e      	ldr	r3, [pc, #56]	; (801c9f4 <dhcp_release_and_stop+0x130>)
 801c9bc:	4a0d      	ldr	r2, [pc, #52]	; (801c9f4 <dhcp_release_and_stop+0x130>)
 801c9be:	490d      	ldr	r1, [pc, #52]	; (801c9f4 <dhcp_release_and_stop+0x130>)
 801c9c0:	6878      	ldr	r0, [r7, #4]
 801c9c2:	f7f7 f857 	bl	8013a74 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801c9c6:	2100      	movs	r1, #0
 801c9c8:	69f8      	ldr	r0, [r7, #28]
 801c9ca:	f000 f815 	bl	801c9f8 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801c9ce:	69fb      	ldr	r3, [r7, #28]
 801c9d0:	791b      	ldrb	r3, [r3, #4]
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	d008      	beq.n	801c9e8 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801c9d6:	f7fe ff85 	bl	801b8e4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801c9da:	69fb      	ldr	r3, [r7, #28]
 801c9dc:	2200      	movs	r2, #0
 801c9de:	711a      	strb	r2, [r3, #4]
 801c9e0:	e002      	b.n	801c9e8 <dhcp_release_and_stop+0x124>
    return;
 801c9e2:	bf00      	nop
 801c9e4:	e000      	b.n	801c9e8 <dhcp_release_and_stop+0x124>
    return;
 801c9e6:	bf00      	nop
  }
}
 801c9e8:	3720      	adds	r7, #32
 801c9ea:	46bd      	mov	sp, r7
 801c9ec:	bdb0      	pop	{r4, r5, r7, pc}
 801c9ee:	bf00      	nop
 801c9f0:	200123d8 	.word	0x200123d8
 801c9f4:	08027400 	.word	0x08027400

0801c9f8 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801c9f8:	b480      	push	{r7}
 801c9fa:	b083      	sub	sp, #12
 801c9fc:	af00      	add	r7, sp, #0
 801c9fe:	6078      	str	r0, [r7, #4]
 801ca00:	460b      	mov	r3, r1
 801ca02:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801ca04:	687b      	ldr	r3, [r7, #4]
 801ca06:	795b      	ldrb	r3, [r3, #5]
 801ca08:	78fa      	ldrb	r2, [r7, #3]
 801ca0a:	429a      	cmp	r2, r3
 801ca0c:	d008      	beq.n	801ca20 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801ca0e:	687b      	ldr	r3, [r7, #4]
 801ca10:	78fa      	ldrb	r2, [r7, #3]
 801ca12:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	2200      	movs	r2, #0
 801ca18:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801ca1a:	687b      	ldr	r3, [r7, #4]
 801ca1c:	2200      	movs	r2, #0
 801ca1e:	811a      	strh	r2, [r3, #8]
  }
}
 801ca20:	bf00      	nop
 801ca22:	370c      	adds	r7, #12
 801ca24:	46bd      	mov	sp, r7
 801ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca2a:	4770      	bx	lr

0801ca2c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801ca2c:	b580      	push	{r7, lr}
 801ca2e:	b082      	sub	sp, #8
 801ca30:	af00      	add	r7, sp, #0
 801ca32:	6039      	str	r1, [r7, #0]
 801ca34:	4611      	mov	r1, r2
 801ca36:	461a      	mov	r2, r3
 801ca38:	4603      	mov	r3, r0
 801ca3a:	80fb      	strh	r3, [r7, #6]
 801ca3c:	460b      	mov	r3, r1
 801ca3e:	717b      	strb	r3, [r7, #5]
 801ca40:	4613      	mov	r3, r2
 801ca42:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801ca44:	88fa      	ldrh	r2, [r7, #6]
 801ca46:	793b      	ldrb	r3, [r7, #4]
 801ca48:	4413      	add	r3, r2
 801ca4a:	3302      	adds	r3, #2
 801ca4c:	2b44      	cmp	r3, #68	; 0x44
 801ca4e:	d906      	bls.n	801ca5e <dhcp_option+0x32>
 801ca50:	4b0d      	ldr	r3, [pc, #52]	; (801ca88 <dhcp_option+0x5c>)
 801ca52:	f240 529a 	movw	r2, #1434	; 0x59a
 801ca56:	490d      	ldr	r1, [pc, #52]	; (801ca8c <dhcp_option+0x60>)
 801ca58:	480d      	ldr	r0, [pc, #52]	; (801ca90 <dhcp_option+0x64>)
 801ca5a:	f004 fe5d 	bl	8021718 <iprintf>
  options[options_out_len++] = option_type;
 801ca5e:	88fb      	ldrh	r3, [r7, #6]
 801ca60:	1c5a      	adds	r2, r3, #1
 801ca62:	80fa      	strh	r2, [r7, #6]
 801ca64:	461a      	mov	r2, r3
 801ca66:	683b      	ldr	r3, [r7, #0]
 801ca68:	4413      	add	r3, r2
 801ca6a:	797a      	ldrb	r2, [r7, #5]
 801ca6c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801ca6e:	88fb      	ldrh	r3, [r7, #6]
 801ca70:	1c5a      	adds	r2, r3, #1
 801ca72:	80fa      	strh	r2, [r7, #6]
 801ca74:	461a      	mov	r2, r3
 801ca76:	683b      	ldr	r3, [r7, #0]
 801ca78:	4413      	add	r3, r2
 801ca7a:	793a      	ldrb	r2, [r7, #4]
 801ca7c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801ca7e:	88fb      	ldrh	r3, [r7, #6]
}
 801ca80:	4618      	mov	r0, r3
 801ca82:	3708      	adds	r7, #8
 801ca84:	46bd      	mov	sp, r7
 801ca86:	bd80      	pop	{r7, pc}
 801ca88:	0802673c 	.word	0x0802673c
 801ca8c:	080268d0 	.word	0x080268d0
 801ca90:	0802679c 	.word	0x0802679c

0801ca94 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801ca94:	b580      	push	{r7, lr}
 801ca96:	b082      	sub	sp, #8
 801ca98:	af00      	add	r7, sp, #0
 801ca9a:	4603      	mov	r3, r0
 801ca9c:	6039      	str	r1, [r7, #0]
 801ca9e:	80fb      	strh	r3, [r7, #6]
 801caa0:	4613      	mov	r3, r2
 801caa2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801caa4:	88fb      	ldrh	r3, [r7, #6]
 801caa6:	2b43      	cmp	r3, #67	; 0x43
 801caa8:	d906      	bls.n	801cab8 <dhcp_option_byte+0x24>
 801caaa:	4b0a      	ldr	r3, [pc, #40]	; (801cad4 <dhcp_option_byte+0x40>)
 801caac:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801cab0:	4909      	ldr	r1, [pc, #36]	; (801cad8 <dhcp_option_byte+0x44>)
 801cab2:	480a      	ldr	r0, [pc, #40]	; (801cadc <dhcp_option_byte+0x48>)
 801cab4:	f004 fe30 	bl	8021718 <iprintf>
  options[options_out_len++] = value;
 801cab8:	88fb      	ldrh	r3, [r7, #6]
 801caba:	1c5a      	adds	r2, r3, #1
 801cabc:	80fa      	strh	r2, [r7, #6]
 801cabe:	461a      	mov	r2, r3
 801cac0:	683b      	ldr	r3, [r7, #0]
 801cac2:	4413      	add	r3, r2
 801cac4:	797a      	ldrb	r2, [r7, #5]
 801cac6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801cac8:	88fb      	ldrh	r3, [r7, #6]
}
 801caca:	4618      	mov	r0, r3
 801cacc:	3708      	adds	r7, #8
 801cace:	46bd      	mov	sp, r7
 801cad0:	bd80      	pop	{r7, pc}
 801cad2:	bf00      	nop
 801cad4:	0802673c 	.word	0x0802673c
 801cad8:	08026914 	.word	0x08026914
 801cadc:	0802679c 	.word	0x0802679c

0801cae0 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801cae0:	b580      	push	{r7, lr}
 801cae2:	b082      	sub	sp, #8
 801cae4:	af00      	add	r7, sp, #0
 801cae6:	4603      	mov	r3, r0
 801cae8:	6039      	str	r1, [r7, #0]
 801caea:	80fb      	strh	r3, [r7, #6]
 801caec:	4613      	mov	r3, r2
 801caee:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801caf0:	88fb      	ldrh	r3, [r7, #6]
 801caf2:	3302      	adds	r3, #2
 801caf4:	2b44      	cmp	r3, #68	; 0x44
 801caf6:	d906      	bls.n	801cb06 <dhcp_option_short+0x26>
 801caf8:	4b0f      	ldr	r3, [pc, #60]	; (801cb38 <dhcp_option_short+0x58>)
 801cafa:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801cafe:	490f      	ldr	r1, [pc, #60]	; (801cb3c <dhcp_option_short+0x5c>)
 801cb00:	480f      	ldr	r0, [pc, #60]	; (801cb40 <dhcp_option_short+0x60>)
 801cb02:	f004 fe09 	bl	8021718 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801cb06:	88bb      	ldrh	r3, [r7, #4]
 801cb08:	0a1b      	lsrs	r3, r3, #8
 801cb0a:	b29a      	uxth	r2, r3
 801cb0c:	88fb      	ldrh	r3, [r7, #6]
 801cb0e:	1c59      	adds	r1, r3, #1
 801cb10:	80f9      	strh	r1, [r7, #6]
 801cb12:	4619      	mov	r1, r3
 801cb14:	683b      	ldr	r3, [r7, #0]
 801cb16:	440b      	add	r3, r1
 801cb18:	b2d2      	uxtb	r2, r2
 801cb1a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801cb1c:	88fb      	ldrh	r3, [r7, #6]
 801cb1e:	1c5a      	adds	r2, r3, #1
 801cb20:	80fa      	strh	r2, [r7, #6]
 801cb22:	461a      	mov	r2, r3
 801cb24:	683b      	ldr	r3, [r7, #0]
 801cb26:	4413      	add	r3, r2
 801cb28:	88ba      	ldrh	r2, [r7, #4]
 801cb2a:	b2d2      	uxtb	r2, r2
 801cb2c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801cb2e:	88fb      	ldrh	r3, [r7, #6]
}
 801cb30:	4618      	mov	r0, r3
 801cb32:	3708      	adds	r7, #8
 801cb34:	46bd      	mov	sp, r7
 801cb36:	bd80      	pop	{r7, pc}
 801cb38:	0802673c 	.word	0x0802673c
 801cb3c:	0802694c 	.word	0x0802694c
 801cb40:	0802679c 	.word	0x0802679c

0801cb44 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801cb44:	b580      	push	{r7, lr}
 801cb46:	b084      	sub	sp, #16
 801cb48:	af00      	add	r7, sp, #0
 801cb4a:	4603      	mov	r3, r0
 801cb4c:	60b9      	str	r1, [r7, #8]
 801cb4e:	607a      	str	r2, [r7, #4]
 801cb50:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801cb52:	89fb      	ldrh	r3, [r7, #14]
 801cb54:	3304      	adds	r3, #4
 801cb56:	2b44      	cmp	r3, #68	; 0x44
 801cb58:	d906      	bls.n	801cb68 <dhcp_option_long+0x24>
 801cb5a:	4b19      	ldr	r3, [pc, #100]	; (801cbc0 <dhcp_option_long+0x7c>)
 801cb5c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801cb60:	4918      	ldr	r1, [pc, #96]	; (801cbc4 <dhcp_option_long+0x80>)
 801cb62:	4819      	ldr	r0, [pc, #100]	; (801cbc8 <dhcp_option_long+0x84>)
 801cb64:	f004 fdd8 	bl	8021718 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	0e1a      	lsrs	r2, r3, #24
 801cb6c:	89fb      	ldrh	r3, [r7, #14]
 801cb6e:	1c59      	adds	r1, r3, #1
 801cb70:	81f9      	strh	r1, [r7, #14]
 801cb72:	4619      	mov	r1, r3
 801cb74:	68bb      	ldr	r3, [r7, #8]
 801cb76:	440b      	add	r3, r1
 801cb78:	b2d2      	uxtb	r2, r2
 801cb7a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	0c1a      	lsrs	r2, r3, #16
 801cb80:	89fb      	ldrh	r3, [r7, #14]
 801cb82:	1c59      	adds	r1, r3, #1
 801cb84:	81f9      	strh	r1, [r7, #14]
 801cb86:	4619      	mov	r1, r3
 801cb88:	68bb      	ldr	r3, [r7, #8]
 801cb8a:	440b      	add	r3, r1
 801cb8c:	b2d2      	uxtb	r2, r2
 801cb8e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801cb90:	687b      	ldr	r3, [r7, #4]
 801cb92:	0a1a      	lsrs	r2, r3, #8
 801cb94:	89fb      	ldrh	r3, [r7, #14]
 801cb96:	1c59      	adds	r1, r3, #1
 801cb98:	81f9      	strh	r1, [r7, #14]
 801cb9a:	4619      	mov	r1, r3
 801cb9c:	68bb      	ldr	r3, [r7, #8]
 801cb9e:	440b      	add	r3, r1
 801cba0:	b2d2      	uxtb	r2, r2
 801cba2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801cba4:	89fb      	ldrh	r3, [r7, #14]
 801cba6:	1c5a      	adds	r2, r3, #1
 801cba8:	81fa      	strh	r2, [r7, #14]
 801cbaa:	461a      	mov	r2, r3
 801cbac:	68bb      	ldr	r3, [r7, #8]
 801cbae:	4413      	add	r3, r2
 801cbb0:	687a      	ldr	r2, [r7, #4]
 801cbb2:	b2d2      	uxtb	r2, r2
 801cbb4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801cbb6:	89fb      	ldrh	r3, [r7, #14]
}
 801cbb8:	4618      	mov	r0, r3
 801cbba:	3710      	adds	r7, #16
 801cbbc:	46bd      	mov	sp, r7
 801cbbe:	bd80      	pop	{r7, pc}
 801cbc0:	0802673c 	.word	0x0802673c
 801cbc4:	08026988 	.word	0x08026988
 801cbc8:	0802679c 	.word	0x0802679c

0801cbcc <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801cbcc:	b580      	push	{r7, lr}
 801cbce:	b090      	sub	sp, #64	; 0x40
 801cbd0:	af00      	add	r7, sp, #0
 801cbd2:	6078      	str	r0, [r7, #4]
 801cbd4:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801cbd6:	2300      	movs	r3, #0
 801cbd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801cbda:	2300      	movs	r3, #0
 801cbdc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801cbde:	2208      	movs	r2, #8
 801cbe0:	2100      	movs	r1, #0
 801cbe2:	48b5      	ldr	r0, [pc, #724]	; (801ceb8 <dhcp_parse_reply+0x2ec>)
 801cbe4:	f004 ffae 	bl	8021b44 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801cbe8:	687b      	ldr	r3, [r7, #4]
 801cbea:	895b      	ldrh	r3, [r3, #10]
 801cbec:	2b2b      	cmp	r3, #43	; 0x2b
 801cbee:	d802      	bhi.n	801cbf6 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801cbf0:	f06f 0301 	mvn.w	r3, #1
 801cbf4:	e2a7      	b.n	801d146 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	685b      	ldr	r3, [r3, #4]
 801cbfa:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801cbfc:	23f0      	movs	r3, #240	; 0xf0
 801cbfe:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801cc00:	687b      	ldr	r3, [r7, #4]
 801cc02:	891b      	ldrh	r3, [r3, #8]
 801cc04:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801cc06:	687b      	ldr	r3, [r7, #4]
 801cc08:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801cc0a:	e00c      	b.n	801cc26 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801cc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc0e:	895b      	ldrh	r3, [r3, #10]
 801cc10:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801cc12:	1ad3      	subs	r3, r2, r3
 801cc14:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801cc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc18:	895b      	ldrh	r3, [r3, #10]
 801cc1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801cc1c:	1ad3      	subs	r3, r2, r3
 801cc1e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801cc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc22:	681b      	ldr	r3, [r3, #0]
 801cc24:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801cc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	d004      	beq.n	801cc36 <dhcp_parse_reply+0x6a>
 801cc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc2e:	895b      	ldrh	r3, [r3, #10]
 801cc30:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801cc32:	429a      	cmp	r2, r3
 801cc34:	d2ea      	bcs.n	801cc0c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801cc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc38:	2b00      	cmp	r3, #0
 801cc3a:	d102      	bne.n	801cc42 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801cc3c:	f06f 0301 	mvn.w	r3, #1
 801cc40:	e281      	b.n	801d146 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801cc42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801cc44:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801cc46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801cc48:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801cc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc4c:	685b      	ldr	r3, [r3, #4]
 801cc4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801cc50:	e239      	b.n	801d0c6 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801cc52:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801cc54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cc56:	4413      	add	r3, r2
 801cc58:	781b      	ldrb	r3, [r3, #0]
 801cc5a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801cc5c:	2300      	movs	r3, #0
 801cc5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801cc62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cc66:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801cc68:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801cc6a:	3302      	adds	r3, #2
 801cc6c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801cc6e:	8bfa      	ldrh	r2, [r7, #30]
 801cc70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801cc72:	429a      	cmp	r2, r3
 801cc74:	d202      	bcs.n	801cc7c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801cc76:	f06f 0301 	mvn.w	r3, #1
 801cc7a:	e264      	b.n	801d146 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801cc7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801cc7e:	3301      	adds	r3, #1
 801cc80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801cc82:	8952      	ldrh	r2, [r2, #10]
 801cc84:	4293      	cmp	r3, r2
 801cc86:	da07      	bge.n	801cc98 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801cc88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801cc8a:	3301      	adds	r3, #1
 801cc8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cc8e:	4413      	add	r3, r2
 801cc90:	781b      	ldrb	r3, [r3, #0]
 801cc92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801cc96:	e00b      	b.n	801ccb0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801cc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc9a:	681b      	ldr	r3, [r3, #0]
 801cc9c:	2b00      	cmp	r3, #0
 801cc9e:	d004      	beq.n	801ccaa <dhcp_parse_reply+0xde>
 801cca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cca2:	681b      	ldr	r3, [r3, #0]
 801cca4:	685b      	ldr	r3, [r3, #4]
 801cca6:	781b      	ldrb	r3, [r3, #0]
 801cca8:	e000      	b.n	801ccac <dhcp_parse_reply+0xe0>
 801ccaa:	2300      	movs	r3, #0
 801ccac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801ccb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ccb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801ccb8:	7dfb      	ldrb	r3, [r7, #23]
 801ccba:	2b3b      	cmp	r3, #59	; 0x3b
 801ccbc:	f200 812c 	bhi.w	801cf18 <dhcp_parse_reply+0x34c>
 801ccc0:	a201      	add	r2, pc, #4	; (adr r2, 801ccc8 <dhcp_parse_reply+0xfc>)
 801ccc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ccc6:	bf00      	nop
 801ccc8:	0801cdb9 	.word	0x0801cdb9
 801cccc:	0801cdc9 	.word	0x0801cdc9
 801ccd0:	0801cf19 	.word	0x0801cf19
 801ccd4:	0801cdeb 	.word	0x0801cdeb
 801ccd8:	0801cf19 	.word	0x0801cf19
 801ccdc:	0801cf19 	.word	0x0801cf19
 801cce0:	0801cf19 	.word	0x0801cf19
 801cce4:	0801cf19 	.word	0x0801cf19
 801cce8:	0801cf19 	.word	0x0801cf19
 801ccec:	0801cf19 	.word	0x0801cf19
 801ccf0:	0801cf19 	.word	0x0801cf19
 801ccf4:	0801cf19 	.word	0x0801cf19
 801ccf8:	0801cf19 	.word	0x0801cf19
 801ccfc:	0801cf19 	.word	0x0801cf19
 801cd00:	0801cf19 	.word	0x0801cf19
 801cd04:	0801cf19 	.word	0x0801cf19
 801cd08:	0801cf19 	.word	0x0801cf19
 801cd0c:	0801cf19 	.word	0x0801cf19
 801cd10:	0801cf19 	.word	0x0801cf19
 801cd14:	0801cf19 	.word	0x0801cf19
 801cd18:	0801cf19 	.word	0x0801cf19
 801cd1c:	0801cf19 	.word	0x0801cf19
 801cd20:	0801cf19 	.word	0x0801cf19
 801cd24:	0801cf19 	.word	0x0801cf19
 801cd28:	0801cf19 	.word	0x0801cf19
 801cd2c:	0801cf19 	.word	0x0801cf19
 801cd30:	0801cf19 	.word	0x0801cf19
 801cd34:	0801cf19 	.word	0x0801cf19
 801cd38:	0801cf19 	.word	0x0801cf19
 801cd3c:	0801cf19 	.word	0x0801cf19
 801cd40:	0801cf19 	.word	0x0801cf19
 801cd44:	0801cf19 	.word	0x0801cf19
 801cd48:	0801cf19 	.word	0x0801cf19
 801cd4c:	0801cf19 	.word	0x0801cf19
 801cd50:	0801cf19 	.word	0x0801cf19
 801cd54:	0801cf19 	.word	0x0801cf19
 801cd58:	0801cf19 	.word	0x0801cf19
 801cd5c:	0801cf19 	.word	0x0801cf19
 801cd60:	0801cf19 	.word	0x0801cf19
 801cd64:	0801cf19 	.word	0x0801cf19
 801cd68:	0801cf19 	.word	0x0801cf19
 801cd6c:	0801cf19 	.word	0x0801cf19
 801cd70:	0801cf19 	.word	0x0801cf19
 801cd74:	0801cf19 	.word	0x0801cf19
 801cd78:	0801cf19 	.word	0x0801cf19
 801cd7c:	0801cf19 	.word	0x0801cf19
 801cd80:	0801cf19 	.word	0x0801cf19
 801cd84:	0801cf19 	.word	0x0801cf19
 801cd88:	0801cf19 	.word	0x0801cf19
 801cd8c:	0801cf19 	.word	0x0801cf19
 801cd90:	0801cf19 	.word	0x0801cf19
 801cd94:	0801ce17 	.word	0x0801ce17
 801cd98:	0801ce39 	.word	0x0801ce39
 801cd9c:	0801ce75 	.word	0x0801ce75
 801cda0:	0801ce97 	.word	0x0801ce97
 801cda4:	0801cf19 	.word	0x0801cf19
 801cda8:	0801cf19 	.word	0x0801cf19
 801cdac:	0801cf19 	.word	0x0801cf19
 801cdb0:	0801ced5 	.word	0x0801ced5
 801cdb4:	0801cef7 	.word	0x0801cef7
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801cdb8:	2300      	movs	r3, #0
 801cdba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801cdbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cdc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801cdc6:	e0ab      	b.n	801cf20 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cdc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cdcc:	2b04      	cmp	r3, #4
 801cdce:	d009      	beq.n	801cde4 <dhcp_parse_reply+0x218>
 801cdd0:	4b3a      	ldr	r3, [pc, #232]	; (801cebc <dhcp_parse_reply+0x2f0>)
 801cdd2:	f240 622e 	movw	r2, #1582	; 0x62e
 801cdd6:	493a      	ldr	r1, [pc, #232]	; (801cec0 <dhcp_parse_reply+0x2f4>)
 801cdd8:	483a      	ldr	r0, [pc, #232]	; (801cec4 <dhcp_parse_reply+0x2f8>)
 801cdda:	f004 fc9d 	bl	8021718 <iprintf>
 801cdde:	f06f 0305 	mvn.w	r3, #5
 801cde2:	e1b0      	b.n	801d146 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801cde4:	2306      	movs	r3, #6
 801cde6:	623b      	str	r3, [r7, #32]
        break;
 801cde8:	e09a      	b.n	801cf20 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801cdea:	2304      	movs	r3, #4
 801cdec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801cdf0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801cdf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cdf8:	429a      	cmp	r2, r3
 801cdfa:	d209      	bcs.n	801ce10 <dhcp_parse_reply+0x244>
 801cdfc:	4b2f      	ldr	r3, [pc, #188]	; (801cebc <dhcp_parse_reply+0x2f0>)
 801cdfe:	f240 6233 	movw	r2, #1587	; 0x633
 801ce02:	4931      	ldr	r1, [pc, #196]	; (801cec8 <dhcp_parse_reply+0x2fc>)
 801ce04:	482f      	ldr	r0, [pc, #188]	; (801cec4 <dhcp_parse_reply+0x2f8>)
 801ce06:	f004 fc87 	bl	8021718 <iprintf>
 801ce0a:	f06f 0305 	mvn.w	r3, #5
 801ce0e:	e19a      	b.n	801d146 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801ce10:	2307      	movs	r3, #7
 801ce12:	623b      	str	r3, [r7, #32]
        break;
 801ce14:	e084      	b.n	801cf20 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ce16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ce1a:	2b04      	cmp	r3, #4
 801ce1c:	d009      	beq.n	801ce32 <dhcp_parse_reply+0x266>
 801ce1e:	4b27      	ldr	r3, [pc, #156]	; (801cebc <dhcp_parse_reply+0x2f0>)
 801ce20:	f240 6241 	movw	r2, #1601	; 0x641
 801ce24:	4926      	ldr	r1, [pc, #152]	; (801cec0 <dhcp_parse_reply+0x2f4>)
 801ce26:	4827      	ldr	r0, [pc, #156]	; (801cec4 <dhcp_parse_reply+0x2f8>)
 801ce28:	f004 fc76 	bl	8021718 <iprintf>
 801ce2c:	f06f 0305 	mvn.w	r3, #5
 801ce30:	e189      	b.n	801d146 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801ce32:	2303      	movs	r3, #3
 801ce34:	623b      	str	r3, [r7, #32]
        break;
 801ce36:	e073      	b.n	801cf20 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801ce38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ce3c:	2b01      	cmp	r3, #1
 801ce3e:	d009      	beq.n	801ce54 <dhcp_parse_reply+0x288>
 801ce40:	4b1e      	ldr	r3, [pc, #120]	; (801cebc <dhcp_parse_reply+0x2f0>)
 801ce42:	f240 624f 	movw	r2, #1615	; 0x64f
 801ce46:	4921      	ldr	r1, [pc, #132]	; (801cecc <dhcp_parse_reply+0x300>)
 801ce48:	481e      	ldr	r0, [pc, #120]	; (801cec4 <dhcp_parse_reply+0x2f8>)
 801ce4a:	f004 fc65 	bl	8021718 <iprintf>
 801ce4e:	f06f 0305 	mvn.w	r3, #5
 801ce52:	e178      	b.n	801d146 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801ce54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801ce56:	2bf0      	cmp	r3, #240	; 0xf0
 801ce58:	d009      	beq.n	801ce6e <dhcp_parse_reply+0x2a2>
 801ce5a:	4b18      	ldr	r3, [pc, #96]	; (801cebc <dhcp_parse_reply+0x2f0>)
 801ce5c:	f240 6251 	movw	r2, #1617	; 0x651
 801ce60:	491b      	ldr	r1, [pc, #108]	; (801ced0 <dhcp_parse_reply+0x304>)
 801ce62:	4818      	ldr	r0, [pc, #96]	; (801cec4 <dhcp_parse_reply+0x2f8>)
 801ce64:	f004 fc58 	bl	8021718 <iprintf>
 801ce68:	f06f 0305 	mvn.w	r3, #5
 801ce6c:	e16b      	b.n	801d146 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801ce6e:	2300      	movs	r3, #0
 801ce70:	623b      	str	r3, [r7, #32]
        break;
 801ce72:	e055      	b.n	801cf20 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801ce74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ce78:	2b01      	cmp	r3, #1
 801ce7a:	d009      	beq.n	801ce90 <dhcp_parse_reply+0x2c4>
 801ce7c:	4b0f      	ldr	r3, [pc, #60]	; (801cebc <dhcp_parse_reply+0x2f0>)
 801ce7e:	f240 6255 	movw	r2, #1621	; 0x655
 801ce82:	4912      	ldr	r1, [pc, #72]	; (801cecc <dhcp_parse_reply+0x300>)
 801ce84:	480f      	ldr	r0, [pc, #60]	; (801cec4 <dhcp_parse_reply+0x2f8>)
 801ce86:	f004 fc47 	bl	8021718 <iprintf>
 801ce8a:	f06f 0305 	mvn.w	r3, #5
 801ce8e:	e15a      	b.n	801d146 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801ce90:	2301      	movs	r3, #1
 801ce92:	623b      	str	r3, [r7, #32]
        break;
 801ce94:	e044      	b.n	801cf20 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ce96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ce9a:	2b04      	cmp	r3, #4
 801ce9c:	d009      	beq.n	801ceb2 <dhcp_parse_reply+0x2e6>
 801ce9e:	4b07      	ldr	r3, [pc, #28]	; (801cebc <dhcp_parse_reply+0x2f0>)
 801cea0:	f240 6259 	movw	r2, #1625	; 0x659
 801cea4:	4906      	ldr	r1, [pc, #24]	; (801cec0 <dhcp_parse_reply+0x2f4>)
 801cea6:	4807      	ldr	r0, [pc, #28]	; (801cec4 <dhcp_parse_reply+0x2f8>)
 801cea8:	f004 fc36 	bl	8021718 <iprintf>
 801ceac:	f06f 0305 	mvn.w	r3, #5
 801ceb0:	e149      	b.n	801d146 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801ceb2:	2302      	movs	r3, #2
 801ceb4:	623b      	str	r3, [r7, #32]
        break;
 801ceb6:	e033      	b.n	801cf20 <dhcp_parse_reply+0x354>
 801ceb8:	200123d0 	.word	0x200123d0
 801cebc:	0802673c 	.word	0x0802673c
 801cec0:	080269c4 	.word	0x080269c4
 801cec4:	0802679c 	.word	0x0802679c
 801cec8:	080269d0 	.word	0x080269d0
 801cecc:	080269e4 	.word	0x080269e4
 801ced0:	080269f0 	.word	0x080269f0
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ced4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ced8:	2b04      	cmp	r3, #4
 801ceda:	d009      	beq.n	801cef0 <dhcp_parse_reply+0x324>
 801cedc:	4b9c      	ldr	r3, [pc, #624]	; (801d150 <dhcp_parse_reply+0x584>)
 801cede:	f240 625d 	movw	r2, #1629	; 0x65d
 801cee2:	499c      	ldr	r1, [pc, #624]	; (801d154 <dhcp_parse_reply+0x588>)
 801cee4:	489c      	ldr	r0, [pc, #624]	; (801d158 <dhcp_parse_reply+0x58c>)
 801cee6:	f004 fc17 	bl	8021718 <iprintf>
 801ceea:	f06f 0305 	mvn.w	r3, #5
 801ceee:	e12a      	b.n	801d146 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 801cef0:	2304      	movs	r3, #4
 801cef2:	623b      	str	r3, [r7, #32]
        break;
 801cef4:	e014      	b.n	801cf20 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cefa:	2b04      	cmp	r3, #4
 801cefc:	d009      	beq.n	801cf12 <dhcp_parse_reply+0x346>
 801cefe:	4b94      	ldr	r3, [pc, #592]	; (801d150 <dhcp_parse_reply+0x584>)
 801cf00:	f240 6261 	movw	r2, #1633	; 0x661
 801cf04:	4993      	ldr	r1, [pc, #588]	; (801d154 <dhcp_parse_reply+0x588>)
 801cf06:	4894      	ldr	r0, [pc, #592]	; (801d158 <dhcp_parse_reply+0x58c>)
 801cf08:	f004 fc06 	bl	8021718 <iprintf>
 801cf0c:	f06f 0305 	mvn.w	r3, #5
 801cf10:	e119      	b.n	801d146 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801cf12:	2305      	movs	r3, #5
 801cf14:	623b      	str	r3, [r7, #32]
        break;
 801cf16:	e003      	b.n	801cf20 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 801cf18:	2300      	movs	r3, #0
 801cf1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801cf1e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801cf20:	7dfb      	ldrb	r3, [r7, #23]
 801cf22:	2b00      	cmp	r3, #0
 801cf24:	d103      	bne.n	801cf2e <dhcp_parse_reply+0x362>
      offset++;
 801cf26:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801cf28:	3301      	adds	r3, #1
 801cf2a:	877b      	strh	r3, [r7, #58]	; 0x3a
 801cf2c:	e0a1      	b.n	801d072 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801cf2e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801cf30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cf34:	4413      	add	r3, r2
 801cf36:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801cf3a:	4293      	cmp	r3, r2
 801cf3c:	dd02      	ble.n	801cf44 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801cf3e:	f06f 0301 	mvn.w	r3, #1
 801cf42:	e100      	b.n	801d146 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 801cf44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cf48:	b29a      	uxth	r2, r3
 801cf4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801cf4c:	4413      	add	r3, r2
 801cf4e:	b29b      	uxth	r3, r3
 801cf50:	3302      	adds	r3, #2
 801cf52:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801cf54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cf58:	2b00      	cmp	r3, #0
 801cf5a:	f000 808a 	beq.w	801d072 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801cf5e:	2300      	movs	r3, #0
 801cf60:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801cf62:	6a3b      	ldr	r3, [r7, #32]
 801cf64:	2b00      	cmp	r3, #0
 801cf66:	db02      	blt.n	801cf6e <dhcp_parse_reply+0x3a2>
 801cf68:	6a3b      	ldr	r3, [r7, #32]
 801cf6a:	2b07      	cmp	r3, #7
 801cf6c:	dd06      	ble.n	801cf7c <dhcp_parse_reply+0x3b0>
 801cf6e:	4b78      	ldr	r3, [pc, #480]	; (801d150 <dhcp_parse_reply+0x584>)
 801cf70:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801cf74:	4979      	ldr	r1, [pc, #484]	; (801d15c <dhcp_parse_reply+0x590>)
 801cf76:	4878      	ldr	r0, [pc, #480]	; (801d158 <dhcp_parse_reply+0x58c>)
 801cf78:	f004 fbce 	bl	8021718 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801cf7c:	4a78      	ldr	r2, [pc, #480]	; (801d160 <dhcp_parse_reply+0x594>)
 801cf7e:	6a3b      	ldr	r3, [r7, #32]
 801cf80:	4413      	add	r3, r2
 801cf82:	781b      	ldrb	r3, [r3, #0]
 801cf84:	2b00      	cmp	r3, #0
 801cf86:	d174      	bne.n	801d072 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 801cf88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cf8c:	2b04      	cmp	r3, #4
 801cf8e:	bf28      	it	cs
 801cf90:	2304      	movcs	r3, #4
 801cf92:	b2db      	uxtb	r3, r3
 801cf94:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801cf96:	8bfb      	ldrh	r3, [r7, #30]
 801cf98:	8aba      	ldrh	r2, [r7, #20]
 801cf9a:	f107 0108 	add.w	r1, r7, #8
 801cf9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801cfa0:	f7f7 fc7c 	bl	801489c <pbuf_copy_partial>
 801cfa4:	4603      	mov	r3, r0
 801cfa6:	461a      	mov	r2, r3
 801cfa8:	8abb      	ldrh	r3, [r7, #20]
 801cfaa:	4293      	cmp	r3, r2
 801cfac:	d002      	beq.n	801cfb4 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801cfae:	f06f 0301 	mvn.w	r3, #1
 801cfb2:	e0c8      	b.n	801d146 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 801cfb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cfb8:	2b04      	cmp	r3, #4
 801cfba:	d933      	bls.n	801d024 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801cfbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cfc0:	f003 0303 	and.w	r3, r3, #3
 801cfc4:	b2db      	uxtb	r3, r3
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	d009      	beq.n	801cfde <dhcp_parse_reply+0x412>
 801cfca:	4b61      	ldr	r3, [pc, #388]	; (801d150 <dhcp_parse_reply+0x584>)
 801cfcc:	f240 6281 	movw	r2, #1665	; 0x681
 801cfd0:	4964      	ldr	r1, [pc, #400]	; (801d164 <dhcp_parse_reply+0x598>)
 801cfd2:	4861      	ldr	r0, [pc, #388]	; (801d158 <dhcp_parse_reply+0x58c>)
 801cfd4:	f004 fba0 	bl	8021718 <iprintf>
 801cfd8:	f06f 0305 	mvn.w	r3, #5
 801cfdc:	e0b3      	b.n	801d146 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801cfde:	4a60      	ldr	r2, [pc, #384]	; (801d160 <dhcp_parse_reply+0x594>)
 801cfe0:	6a3b      	ldr	r3, [r7, #32]
 801cfe2:	4413      	add	r3, r2
 801cfe4:	2201      	movs	r2, #1
 801cfe6:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801cfe8:	68bb      	ldr	r3, [r7, #8]
 801cfea:	4618      	mov	r0, r3
 801cfec:	f7f5 fe67 	bl	8012cbe <lwip_htonl>
 801cff0:	4602      	mov	r2, r0
 801cff2:	495d      	ldr	r1, [pc, #372]	; (801d168 <dhcp_parse_reply+0x59c>)
 801cff4:	6a3b      	ldr	r3, [r7, #32]
 801cff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801cffa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cffe:	3b04      	subs	r3, #4
 801d000:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801d004:	8bfb      	ldrh	r3, [r7, #30]
 801d006:	3304      	adds	r3, #4
 801d008:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801d00a:	8a7a      	ldrh	r2, [r7, #18]
 801d00c:	8bfb      	ldrh	r3, [r7, #30]
 801d00e:	429a      	cmp	r2, r3
 801d010:	d202      	bcs.n	801d018 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801d012:	f06f 0301 	mvn.w	r3, #1
 801d016:	e096      	b.n	801d146 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 801d018:	8a7b      	ldrh	r3, [r7, #18]
 801d01a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801d01c:	6a3b      	ldr	r3, [r7, #32]
 801d01e:	3301      	adds	r3, #1
 801d020:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801d022:	e79e      	b.n	801cf62 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 801d024:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801d028:	2b04      	cmp	r3, #4
 801d02a:	d106      	bne.n	801d03a <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 801d02c:	68bb      	ldr	r3, [r7, #8]
 801d02e:	4618      	mov	r0, r3
 801d030:	f7f5 fe45 	bl	8012cbe <lwip_htonl>
 801d034:	4603      	mov	r3, r0
 801d036:	60bb      	str	r3, [r7, #8]
 801d038:	e011      	b.n	801d05e <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801d03a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801d03e:	2b01      	cmp	r3, #1
 801d040:	d009      	beq.n	801d056 <dhcp_parse_reply+0x48a>
 801d042:	4b43      	ldr	r3, [pc, #268]	; (801d150 <dhcp_parse_reply+0x584>)
 801d044:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801d048:	4948      	ldr	r1, [pc, #288]	; (801d16c <dhcp_parse_reply+0x5a0>)
 801d04a:	4843      	ldr	r0, [pc, #268]	; (801d158 <dhcp_parse_reply+0x58c>)
 801d04c:	f004 fb64 	bl	8021718 <iprintf>
 801d050:	f06f 0305 	mvn.w	r3, #5
 801d054:	e077      	b.n	801d146 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 801d056:	f107 0308 	add.w	r3, r7, #8
 801d05a:	781b      	ldrb	r3, [r3, #0]
 801d05c:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801d05e:	4a40      	ldr	r2, [pc, #256]	; (801d160 <dhcp_parse_reply+0x594>)
 801d060:	6a3b      	ldr	r3, [r7, #32]
 801d062:	4413      	add	r3, r2
 801d064:	2201      	movs	r2, #1
 801d066:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801d068:	68ba      	ldr	r2, [r7, #8]
 801d06a:	493f      	ldr	r1, [pc, #252]	; (801d168 <dhcp_parse_reply+0x59c>)
 801d06c:	6a3b      	ldr	r3, [r7, #32]
 801d06e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801d072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d074:	895b      	ldrh	r3, [r3, #10]
 801d076:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d078:	429a      	cmp	r2, r3
 801d07a:	d324      	bcc.n	801d0c6 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 801d07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d07e:	895b      	ldrh	r3, [r3, #10]
 801d080:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d082:	1ad3      	subs	r3, r2, r3
 801d084:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801d086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d088:	895b      	ldrh	r3, [r3, #10]
 801d08a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801d08c:	1ad3      	subs	r3, r2, r3
 801d08e:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801d090:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d092:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801d094:	429a      	cmp	r2, r3
 801d096:	d213      	bcs.n	801d0c0 <dhcp_parse_reply+0x4f4>
        q = q->next;
 801d098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d09a:	681b      	ldr	r3, [r3, #0]
 801d09c:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801d09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0a0:	2b00      	cmp	r3, #0
 801d0a2:	d109      	bne.n	801d0b8 <dhcp_parse_reply+0x4ec>
 801d0a4:	4b2a      	ldr	r3, [pc, #168]	; (801d150 <dhcp_parse_reply+0x584>)
 801d0a6:	f240 629d 	movw	r2, #1693	; 0x69d
 801d0aa:	4931      	ldr	r1, [pc, #196]	; (801d170 <dhcp_parse_reply+0x5a4>)
 801d0ac:	482a      	ldr	r0, [pc, #168]	; (801d158 <dhcp_parse_reply+0x58c>)
 801d0ae:	f004 fb33 	bl	8021718 <iprintf>
 801d0b2:	f06f 0305 	mvn.w	r3, #5
 801d0b6:	e046      	b.n	801d146 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 801d0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0ba:	685b      	ldr	r3, [r3, #4]
 801d0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d0be:	e002      	b.n	801d0c6 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801d0c0:	f06f 0301 	mvn.w	r3, #1
 801d0c4:	e03f      	b.n	801d146 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801d0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0c8:	2b00      	cmp	r3, #0
 801d0ca:	d00a      	beq.n	801d0e2 <dhcp_parse_reply+0x516>
 801d0cc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d0ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801d0d0:	429a      	cmp	r2, r3
 801d0d2:	d206      	bcs.n	801d0e2 <dhcp_parse_reply+0x516>
 801d0d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d0d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d0d8:	4413      	add	r3, r2
 801d0da:	781b      	ldrb	r3, [r3, #0]
 801d0dc:	2bff      	cmp	r3, #255	; 0xff
 801d0de:	f47f adb8 	bne.w	801cc52 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801d0e2:	4b1f      	ldr	r3, [pc, #124]	; (801d160 <dhcp_parse_reply+0x594>)
 801d0e4:	781b      	ldrb	r3, [r3, #0]
 801d0e6:	2b00      	cmp	r3, #0
 801d0e8:	d018      	beq.n	801d11c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801d0ea:	4b1f      	ldr	r3, [pc, #124]	; (801d168 <dhcp_parse_reply+0x59c>)
 801d0ec:	681b      	ldr	r3, [r3, #0]
 801d0ee:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801d0f0:	4b1b      	ldr	r3, [pc, #108]	; (801d160 <dhcp_parse_reply+0x594>)
 801d0f2:	2200      	movs	r2, #0
 801d0f4:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801d0f6:	68fb      	ldr	r3, [r7, #12]
 801d0f8:	2b01      	cmp	r3, #1
 801d0fa:	d102      	bne.n	801d102 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 801d0fc:	2301      	movs	r3, #1
 801d0fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d100:	e00c      	b.n	801d11c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801d102:	68fb      	ldr	r3, [r7, #12]
 801d104:	2b02      	cmp	r3, #2
 801d106:	d102      	bne.n	801d10e <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 801d108:	2301      	movs	r3, #1
 801d10a:	62bb      	str	r3, [r7, #40]	; 0x28
 801d10c:	e006      	b.n	801d11c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801d10e:	68fb      	ldr	r3, [r7, #12]
 801d110:	2b03      	cmp	r3, #3
 801d112:	d103      	bne.n	801d11c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 801d114:	2301      	movs	r3, #1
 801d116:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801d118:	2301      	movs	r3, #1
 801d11a:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801d11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d11e:	2b00      	cmp	r3, #0
 801d120:	d006      	beq.n	801d130 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801d122:	2300      	movs	r3, #0
 801d124:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801d126:	236c      	movs	r3, #108	; 0x6c
 801d128:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801d12a:	23ec      	movs	r3, #236	; 0xec
 801d12c:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801d12e:	e56a      	b.n	801cc06 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801d130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d132:	2b00      	cmp	r3, #0
 801d134:	d006      	beq.n	801d144 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 801d136:	2300      	movs	r3, #0
 801d138:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801d13a:	232c      	movs	r3, #44	; 0x2c
 801d13c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801d13e:	236c      	movs	r3, #108	; 0x6c
 801d140:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801d142:	e560      	b.n	801cc06 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801d144:	2300      	movs	r3, #0
}
 801d146:	4618      	mov	r0, r3
 801d148:	3740      	adds	r7, #64	; 0x40
 801d14a:	46bd      	mov	sp, r7
 801d14c:	bd80      	pop	{r7, pc}
 801d14e:	bf00      	nop
 801d150:	0802673c 	.word	0x0802673c
 801d154:	080269c4 	.word	0x080269c4
 801d158:	0802679c 	.word	0x0802679c
 801d15c:	08026a08 	.word	0x08026a08
 801d160:	200123d0 	.word	0x200123d0
 801d164:	08026a1c 	.word	0x08026a1c
 801d168:	200123b0 	.word	0x200123b0
 801d16c:	08026a34 	.word	0x08026a34
 801d170:	08026a48 	.word	0x08026a48

0801d174 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801d174:	b580      	push	{r7, lr}
 801d176:	b08a      	sub	sp, #40	; 0x28
 801d178:	af00      	add	r7, sp, #0
 801d17a:	60f8      	str	r0, [r7, #12]
 801d17c:	60b9      	str	r1, [r7, #8]
 801d17e:	607a      	str	r2, [r7, #4]
 801d180:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801d182:	4b60      	ldr	r3, [pc, #384]	; (801d304 <dhcp_recv+0x190>)
 801d184:	685b      	ldr	r3, [r3, #4]
 801d186:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d188:	6a3b      	ldr	r3, [r7, #32]
 801d18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d18c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801d18e:	687b      	ldr	r3, [r7, #4]
 801d190:	685b      	ldr	r3, [r3, #4]
 801d192:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801d194:	69fb      	ldr	r3, [r7, #28]
 801d196:	2b00      	cmp	r3, #0
 801d198:	f000 809d 	beq.w	801d2d6 <dhcp_recv+0x162>
 801d19c:	69fb      	ldr	r3, [r7, #28]
 801d19e:	791b      	ldrb	r3, [r3, #4]
 801d1a0:	2b00      	cmp	r3, #0
 801d1a2:	f000 8098 	beq.w	801d2d6 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	895b      	ldrh	r3, [r3, #10]
 801d1aa:	2b2b      	cmp	r3, #43	; 0x2b
 801d1ac:	f240 8095 	bls.w	801d2da <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801d1b0:	69bb      	ldr	r3, [r7, #24]
 801d1b2:	781b      	ldrb	r3, [r3, #0]
 801d1b4:	2b02      	cmp	r3, #2
 801d1b6:	f040 8092 	bne.w	801d2de <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801d1ba:	2300      	movs	r3, #0
 801d1bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d1c0:	e012      	b.n	801d1e8 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801d1c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d1c6:	6a3a      	ldr	r2, [r7, #32]
 801d1c8:	4413      	add	r3, r2
 801d1ca:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801d1ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d1d2:	69b9      	ldr	r1, [r7, #24]
 801d1d4:	440b      	add	r3, r1
 801d1d6:	7f1b      	ldrb	r3, [r3, #28]
 801d1d8:	429a      	cmp	r2, r3
 801d1da:	f040 8082 	bne.w	801d2e2 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801d1de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d1e2:	3301      	adds	r3, #1
 801d1e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d1e8:	6a3b      	ldr	r3, [r7, #32]
 801d1ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801d1ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801d1f2:	429a      	cmp	r2, r3
 801d1f4:	d203      	bcs.n	801d1fe <dhcp_recv+0x8a>
 801d1f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d1fa:	2b05      	cmp	r3, #5
 801d1fc:	d9e1      	bls.n	801d1c2 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801d1fe:	69bb      	ldr	r3, [r7, #24]
 801d200:	685b      	ldr	r3, [r3, #4]
 801d202:	4618      	mov	r0, r3
 801d204:	f7f5 fd5b 	bl	8012cbe <lwip_htonl>
 801d208:	4602      	mov	r2, r0
 801d20a:	69fb      	ldr	r3, [r7, #28]
 801d20c:	681b      	ldr	r3, [r3, #0]
 801d20e:	429a      	cmp	r2, r3
 801d210:	d169      	bne.n	801d2e6 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801d212:	69f9      	ldr	r1, [r7, #28]
 801d214:	6878      	ldr	r0, [r7, #4]
 801d216:	f7ff fcd9 	bl	801cbcc <dhcp_parse_reply>
 801d21a:	4603      	mov	r3, r0
 801d21c:	2b00      	cmp	r3, #0
 801d21e:	d164      	bne.n	801d2ea <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801d220:	4b39      	ldr	r3, [pc, #228]	; (801d308 <dhcp_recv+0x194>)
 801d222:	785b      	ldrb	r3, [r3, #1]
 801d224:	2b00      	cmp	r3, #0
 801d226:	d062      	beq.n	801d2ee <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801d228:	687b      	ldr	r3, [r7, #4]
 801d22a:	685b      	ldr	r3, [r3, #4]
 801d22c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801d22e:	4b37      	ldr	r3, [pc, #220]	; (801d30c <dhcp_recv+0x198>)
 801d230:	685b      	ldr	r3, [r3, #4]
 801d232:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801d234:	7cfb      	ldrb	r3, [r7, #19]
 801d236:	2b05      	cmp	r3, #5
 801d238:	d12a      	bne.n	801d290 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801d23a:	69fb      	ldr	r3, [r7, #28]
 801d23c:	795b      	ldrb	r3, [r3, #5]
 801d23e:	2b01      	cmp	r3, #1
 801d240:	d112      	bne.n	801d268 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801d242:	6979      	ldr	r1, [r7, #20]
 801d244:	6a38      	ldr	r0, [r7, #32]
 801d246:	f7fe fe17 	bl	801be78 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801d24a:	6a3b      	ldr	r3, [r7, #32]
 801d24c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d250:	f003 0308 	and.w	r3, r3, #8
 801d254:	2b00      	cmp	r3, #0
 801d256:	d003      	beq.n	801d260 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801d258:	6a38      	ldr	r0, [r7, #32]
 801d25a:	f7fe fb87 	bl	801b96c <dhcp_check>
 801d25e:	e049      	b.n	801d2f4 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801d260:	6a38      	ldr	r0, [r7, #32]
 801d262:	f7ff f867 	bl	801c334 <dhcp_bind>
 801d266:	e045      	b.n	801d2f4 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801d268:	69fb      	ldr	r3, [r7, #28]
 801d26a:	795b      	ldrb	r3, [r3, #5]
 801d26c:	2b03      	cmp	r3, #3
 801d26e:	d007      	beq.n	801d280 <dhcp_recv+0x10c>
 801d270:	69fb      	ldr	r3, [r7, #28]
 801d272:	795b      	ldrb	r3, [r3, #5]
 801d274:	2b04      	cmp	r3, #4
 801d276:	d003      	beq.n	801d280 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801d278:	69fb      	ldr	r3, [r7, #28]
 801d27a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801d27c:	2b05      	cmp	r3, #5
 801d27e:	d139      	bne.n	801d2f4 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801d280:	6979      	ldr	r1, [r7, #20]
 801d282:	6a38      	ldr	r0, [r7, #32]
 801d284:	f7fe fdf8 	bl	801be78 <dhcp_handle_ack>
      dhcp_bind(netif);
 801d288:	6a38      	ldr	r0, [r7, #32]
 801d28a:	f7ff f853 	bl	801c334 <dhcp_bind>
 801d28e:	e031      	b.n	801d2f4 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801d290:	7cfb      	ldrb	r3, [r7, #19]
 801d292:	2b06      	cmp	r3, #6
 801d294:	d113      	bne.n	801d2be <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801d296:	69fb      	ldr	r3, [r7, #28]
 801d298:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801d29a:	2b03      	cmp	r3, #3
 801d29c:	d00b      	beq.n	801d2b6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801d29e:	69fb      	ldr	r3, [r7, #28]
 801d2a0:	795b      	ldrb	r3, [r3, #5]
 801d2a2:	2b01      	cmp	r3, #1
 801d2a4:	d007      	beq.n	801d2b6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801d2a6:	69fb      	ldr	r3, [r7, #28]
 801d2a8:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801d2aa:	2b04      	cmp	r3, #4
 801d2ac:	d003      	beq.n	801d2b6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801d2ae:	69fb      	ldr	r3, [r7, #28]
 801d2b0:	795b      	ldrb	r3, [r3, #5]
 801d2b2:	2b05      	cmp	r3, #5
 801d2b4:	d103      	bne.n	801d2be <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801d2b6:	6a38      	ldr	r0, [r7, #32]
 801d2b8:	f7fe fb3e 	bl	801b938 <dhcp_handle_nak>
 801d2bc:	e01a      	b.n	801d2f4 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801d2be:	7cfb      	ldrb	r3, [r7, #19]
 801d2c0:	2b02      	cmp	r3, #2
 801d2c2:	d116      	bne.n	801d2f2 <dhcp_recv+0x17e>
 801d2c4:	69fb      	ldr	r3, [r7, #28]
 801d2c6:	795b      	ldrb	r3, [r3, #5]
 801d2c8:	2b06      	cmp	r3, #6
 801d2ca:	d112      	bne.n	801d2f2 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801d2cc:	6979      	ldr	r1, [r7, #20]
 801d2ce:	6a38      	ldr	r0, [r7, #32]
 801d2d0:	f7fe fb80 	bl	801b9d4 <dhcp_handle_offer>
 801d2d4:	e00e      	b.n	801d2f4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801d2d6:	bf00      	nop
 801d2d8:	e00c      	b.n	801d2f4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801d2da:	bf00      	nop
 801d2dc:	e00a      	b.n	801d2f4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801d2de:	bf00      	nop
 801d2e0:	e008      	b.n	801d2f4 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801d2e2:	bf00      	nop
 801d2e4:	e006      	b.n	801d2f4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801d2e6:	bf00      	nop
 801d2e8:	e004      	b.n	801d2f4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801d2ea:	bf00      	nop
 801d2ec:	e002      	b.n	801d2f4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801d2ee:	bf00      	nop
 801d2f0:	e000      	b.n	801d2f4 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801d2f2:	bf00      	nop
  pbuf_free(p);
 801d2f4:	6878      	ldr	r0, [r7, #4]
 801d2f6:	f7f7 f8cb 	bl	8014490 <pbuf_free>
}
 801d2fa:	bf00      	nop
 801d2fc:	3728      	adds	r7, #40	; 0x28
 801d2fe:	46bd      	mov	sp, r7
 801d300:	bd80      	pop	{r7, pc}
 801d302:	bf00      	nop
 801d304:	2000eba4 	.word	0x2000eba4
 801d308:	200123d0 	.word	0x200123d0
 801d30c:	200123b0 	.word	0x200123b0

0801d310 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801d310:	b580      	push	{r7, lr}
 801d312:	b088      	sub	sp, #32
 801d314:	af00      	add	r7, sp, #0
 801d316:	60f8      	str	r0, [r7, #12]
 801d318:	60b9      	str	r1, [r7, #8]
 801d31a:	603b      	str	r3, [r7, #0]
 801d31c:	4613      	mov	r3, r2
 801d31e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801d320:	68fb      	ldr	r3, [r7, #12]
 801d322:	2b00      	cmp	r3, #0
 801d324:	d108      	bne.n	801d338 <dhcp_create_msg+0x28>
 801d326:	4b5f      	ldr	r3, [pc, #380]	; (801d4a4 <dhcp_create_msg+0x194>)
 801d328:	f240 7269 	movw	r2, #1897	; 0x769
 801d32c:	495e      	ldr	r1, [pc, #376]	; (801d4a8 <dhcp_create_msg+0x198>)
 801d32e:	485f      	ldr	r0, [pc, #380]	; (801d4ac <dhcp_create_msg+0x19c>)
 801d330:	f004 f9f2 	bl	8021718 <iprintf>
 801d334:	2300      	movs	r3, #0
 801d336:	e0b1      	b.n	801d49c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801d338:	68bb      	ldr	r3, [r7, #8]
 801d33a:	2b00      	cmp	r3, #0
 801d33c:	d108      	bne.n	801d350 <dhcp_create_msg+0x40>
 801d33e:	4b59      	ldr	r3, [pc, #356]	; (801d4a4 <dhcp_create_msg+0x194>)
 801d340:	f240 726a 	movw	r2, #1898	; 0x76a
 801d344:	495a      	ldr	r1, [pc, #360]	; (801d4b0 <dhcp_create_msg+0x1a0>)
 801d346:	4859      	ldr	r0, [pc, #356]	; (801d4ac <dhcp_create_msg+0x19c>)
 801d348:	f004 f9e6 	bl	8021718 <iprintf>
 801d34c:	2300      	movs	r3, #0
 801d34e:	e0a5      	b.n	801d49c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801d350:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d354:	f44f 719a 	mov.w	r1, #308	; 0x134
 801d358:	2036      	movs	r0, #54	; 0x36
 801d35a:	f7f6 fdb5 	bl	8013ec8 <pbuf_alloc>
 801d35e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801d360:	69bb      	ldr	r3, [r7, #24]
 801d362:	2b00      	cmp	r3, #0
 801d364:	d101      	bne.n	801d36a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801d366:	2300      	movs	r3, #0
 801d368:	e098      	b.n	801d49c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801d36a:	69bb      	ldr	r3, [r7, #24]
 801d36c:	895b      	ldrh	r3, [r3, #10]
 801d36e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801d372:	d206      	bcs.n	801d382 <dhcp_create_msg+0x72>
 801d374:	4b4b      	ldr	r3, [pc, #300]	; (801d4a4 <dhcp_create_msg+0x194>)
 801d376:	f240 7271 	movw	r2, #1905	; 0x771
 801d37a:	494e      	ldr	r1, [pc, #312]	; (801d4b4 <dhcp_create_msg+0x1a4>)
 801d37c:	484b      	ldr	r0, [pc, #300]	; (801d4ac <dhcp_create_msg+0x19c>)
 801d37e:	f004 f9cb 	bl	8021718 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801d382:	79fb      	ldrb	r3, [r7, #7]
 801d384:	2b03      	cmp	r3, #3
 801d386:	d103      	bne.n	801d390 <dhcp_create_msg+0x80>
 801d388:	68bb      	ldr	r3, [r7, #8]
 801d38a:	795b      	ldrb	r3, [r3, #5]
 801d38c:	2b03      	cmp	r3, #3
 801d38e:	d10d      	bne.n	801d3ac <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801d390:	68bb      	ldr	r3, [r7, #8]
 801d392:	799b      	ldrb	r3, [r3, #6]
 801d394:	2b00      	cmp	r3, #0
 801d396:	d105      	bne.n	801d3a4 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801d398:	f004 f842 	bl	8021420 <rand>
 801d39c:	4603      	mov	r3, r0
 801d39e:	461a      	mov	r2, r3
 801d3a0:	4b45      	ldr	r3, [pc, #276]	; (801d4b8 <dhcp_create_msg+0x1a8>)
 801d3a2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801d3a4:	4b44      	ldr	r3, [pc, #272]	; (801d4b8 <dhcp_create_msg+0x1a8>)
 801d3a6:	681a      	ldr	r2, [r3, #0]
 801d3a8:	68bb      	ldr	r3, [r7, #8]
 801d3aa:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801d3ac:	69bb      	ldr	r3, [r7, #24]
 801d3ae:	685b      	ldr	r3, [r3, #4]
 801d3b0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801d3b2:	f44f 729a 	mov.w	r2, #308	; 0x134
 801d3b6:	2100      	movs	r1, #0
 801d3b8:	6978      	ldr	r0, [r7, #20]
 801d3ba:	f004 fbc3 	bl	8021b44 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801d3be:	697b      	ldr	r3, [r7, #20]
 801d3c0:	2201      	movs	r2, #1
 801d3c2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801d3c4:	697b      	ldr	r3, [r7, #20]
 801d3c6:	2201      	movs	r2, #1
 801d3c8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801d3ca:	68fb      	ldr	r3, [r7, #12]
 801d3cc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801d3d0:	697b      	ldr	r3, [r7, #20]
 801d3d2:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801d3d4:	68bb      	ldr	r3, [r7, #8]
 801d3d6:	681b      	ldr	r3, [r3, #0]
 801d3d8:	4618      	mov	r0, r3
 801d3da:	f7f5 fc70 	bl	8012cbe <lwip_htonl>
 801d3de:	4602      	mov	r2, r0
 801d3e0:	697b      	ldr	r3, [r7, #20]
 801d3e2:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801d3e4:	79fb      	ldrb	r3, [r7, #7]
 801d3e6:	2b08      	cmp	r3, #8
 801d3e8:	d010      	beq.n	801d40c <dhcp_create_msg+0xfc>
 801d3ea:	79fb      	ldrb	r3, [r7, #7]
 801d3ec:	2b04      	cmp	r3, #4
 801d3ee:	d00d      	beq.n	801d40c <dhcp_create_msg+0xfc>
 801d3f0:	79fb      	ldrb	r3, [r7, #7]
 801d3f2:	2b07      	cmp	r3, #7
 801d3f4:	d00a      	beq.n	801d40c <dhcp_create_msg+0xfc>
 801d3f6:	79fb      	ldrb	r3, [r7, #7]
 801d3f8:	2b03      	cmp	r3, #3
 801d3fa:	d10c      	bne.n	801d416 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801d3fc:	68bb      	ldr	r3, [r7, #8]
 801d3fe:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801d400:	2b05      	cmp	r3, #5
 801d402:	d003      	beq.n	801d40c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801d404:	68bb      	ldr	r3, [r7, #8]
 801d406:	795b      	ldrb	r3, [r3, #5]
 801d408:	2b04      	cmp	r3, #4
 801d40a:	d104      	bne.n	801d416 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801d40c:	68fb      	ldr	r3, [r7, #12]
 801d40e:	3304      	adds	r3, #4
 801d410:	681a      	ldr	r2, [r3, #0]
 801d412:	697b      	ldr	r3, [r7, #20]
 801d414:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801d416:	2300      	movs	r3, #0
 801d418:	83fb      	strh	r3, [r7, #30]
 801d41a:	e00c      	b.n	801d436 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801d41c:	8bfa      	ldrh	r2, [r7, #30]
 801d41e:	8bfb      	ldrh	r3, [r7, #30]
 801d420:	68f9      	ldr	r1, [r7, #12]
 801d422:	440a      	add	r2, r1
 801d424:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801d428:	697a      	ldr	r2, [r7, #20]
 801d42a:	4413      	add	r3, r2
 801d42c:	460a      	mov	r2, r1
 801d42e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801d430:	8bfb      	ldrh	r3, [r7, #30]
 801d432:	3301      	adds	r3, #1
 801d434:	83fb      	strh	r3, [r7, #30]
 801d436:	8bfb      	ldrh	r3, [r7, #30]
 801d438:	2b05      	cmp	r3, #5
 801d43a:	d9ef      	bls.n	801d41c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801d43c:	697b      	ldr	r3, [r7, #20]
 801d43e:	2200      	movs	r2, #0
 801d440:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801d444:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801d448:	2200      	movs	r2, #0
 801d44a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801d44e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801d452:	2200      	movs	r2, #0
 801d454:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801d458:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801d45c:	2200      	movs	r2, #0
 801d45e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801d462:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801d466:	697b      	ldr	r3, [r7, #20]
 801d468:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d46c:	2301      	movs	r3, #1
 801d46e:	2235      	movs	r2, #53	; 0x35
 801d470:	2000      	movs	r0, #0
 801d472:	f7ff fadb 	bl	801ca2c <dhcp_option>
 801d476:	4603      	mov	r3, r0
 801d478:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801d47a:	697b      	ldr	r3, [r7, #20]
 801d47c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d480:	79fa      	ldrb	r2, [r7, #7]
 801d482:	8a7b      	ldrh	r3, [r7, #18]
 801d484:	4618      	mov	r0, r3
 801d486:	f7ff fb05 	bl	801ca94 <dhcp_option_byte>
 801d48a:	4603      	mov	r3, r0
 801d48c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801d48e:	683b      	ldr	r3, [r7, #0]
 801d490:	2b00      	cmp	r3, #0
 801d492:	d002      	beq.n	801d49a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801d494:	683b      	ldr	r3, [r7, #0]
 801d496:	8a7a      	ldrh	r2, [r7, #18]
 801d498:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801d49a:	69bb      	ldr	r3, [r7, #24]
}
 801d49c:	4618      	mov	r0, r3
 801d49e:	3720      	adds	r7, #32
 801d4a0:	46bd      	mov	sp, r7
 801d4a2:	bd80      	pop	{r7, pc}
 801d4a4:	0802673c 	.word	0x0802673c
 801d4a8:	08026a5c 	.word	0x08026a5c
 801d4ac:	0802679c 	.word	0x0802679c
 801d4b0:	08026a7c 	.word	0x08026a7c
 801d4b4:	08026a9c 	.word	0x08026a9c
 801d4b8:	200123e0 	.word	0x200123e0

0801d4bc <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801d4bc:	b580      	push	{r7, lr}
 801d4be:	b084      	sub	sp, #16
 801d4c0:	af00      	add	r7, sp, #0
 801d4c2:	4603      	mov	r3, r0
 801d4c4:	60b9      	str	r1, [r7, #8]
 801d4c6:	607a      	str	r2, [r7, #4]
 801d4c8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801d4ca:	89fb      	ldrh	r3, [r7, #14]
 801d4cc:	1c5a      	adds	r2, r3, #1
 801d4ce:	81fa      	strh	r2, [r7, #14]
 801d4d0:	461a      	mov	r2, r3
 801d4d2:	68bb      	ldr	r3, [r7, #8]
 801d4d4:	4413      	add	r3, r2
 801d4d6:	22ff      	movs	r2, #255	; 0xff
 801d4d8:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801d4da:	e007      	b.n	801d4ec <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801d4dc:	89fb      	ldrh	r3, [r7, #14]
 801d4de:	1c5a      	adds	r2, r3, #1
 801d4e0:	81fa      	strh	r2, [r7, #14]
 801d4e2:	461a      	mov	r2, r3
 801d4e4:	68bb      	ldr	r3, [r7, #8]
 801d4e6:	4413      	add	r3, r2
 801d4e8:	2200      	movs	r2, #0
 801d4ea:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801d4ec:	89fb      	ldrh	r3, [r7, #14]
 801d4ee:	2b43      	cmp	r3, #67	; 0x43
 801d4f0:	d904      	bls.n	801d4fc <dhcp_option_trailer+0x40>
 801d4f2:	89fb      	ldrh	r3, [r7, #14]
 801d4f4:	f003 0303 	and.w	r3, r3, #3
 801d4f8:	2b00      	cmp	r3, #0
 801d4fa:	d002      	beq.n	801d502 <dhcp_option_trailer+0x46>
 801d4fc:	89fb      	ldrh	r3, [r7, #14]
 801d4fe:	2b43      	cmp	r3, #67	; 0x43
 801d500:	d9ec      	bls.n	801d4dc <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801d502:	89fb      	ldrh	r3, [r7, #14]
 801d504:	33f0      	adds	r3, #240	; 0xf0
 801d506:	b29b      	uxth	r3, r3
 801d508:	4619      	mov	r1, r3
 801d50a:	6878      	ldr	r0, [r7, #4]
 801d50c:	f7f6 fe3a 	bl	8014184 <pbuf_realloc>
}
 801d510:	bf00      	nop
 801d512:	3710      	adds	r7, #16
 801d514:	46bd      	mov	sp, r7
 801d516:	bd80      	pop	{r7, pc}

0801d518 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801d518:	b480      	push	{r7}
 801d51a:	b085      	sub	sp, #20
 801d51c:	af00      	add	r7, sp, #0
 801d51e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801d520:	687b      	ldr	r3, [r7, #4]
 801d522:	2b00      	cmp	r3, #0
 801d524:	d017      	beq.n	801d556 <dhcp_supplied_address+0x3e>
 801d526:	687b      	ldr	r3, [r7, #4]
 801d528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d52a:	2b00      	cmp	r3, #0
 801d52c:	d013      	beq.n	801d556 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801d52e:	687b      	ldr	r3, [r7, #4]
 801d530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d532:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801d534:	68fb      	ldr	r3, [r7, #12]
 801d536:	795b      	ldrb	r3, [r3, #5]
 801d538:	2b0a      	cmp	r3, #10
 801d53a:	d007      	beq.n	801d54c <dhcp_supplied_address+0x34>
 801d53c:	68fb      	ldr	r3, [r7, #12]
 801d53e:	795b      	ldrb	r3, [r3, #5]
 801d540:	2b05      	cmp	r3, #5
 801d542:	d003      	beq.n	801d54c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801d544:	68fb      	ldr	r3, [r7, #12]
 801d546:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801d548:	2b04      	cmp	r3, #4
 801d54a:	d101      	bne.n	801d550 <dhcp_supplied_address+0x38>
 801d54c:	2301      	movs	r3, #1
 801d54e:	e000      	b.n	801d552 <dhcp_supplied_address+0x3a>
 801d550:	2300      	movs	r3, #0
 801d552:	b2db      	uxtb	r3, r3
 801d554:	e000      	b.n	801d558 <dhcp_supplied_address+0x40>
  }
  return 0;
 801d556:	2300      	movs	r3, #0
}
 801d558:	4618      	mov	r0, r3
 801d55a:	3714      	adds	r7, #20
 801d55c:	46bd      	mov	sp, r7
 801d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d562:	4770      	bx	lr

0801d564 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801d564:	b580      	push	{r7, lr}
 801d566:	b082      	sub	sp, #8
 801d568:	af00      	add	r7, sp, #0
 801d56a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801d56c:	4915      	ldr	r1, [pc, #84]	; (801d5c4 <etharp_free_entry+0x60>)
 801d56e:	687a      	ldr	r2, [r7, #4]
 801d570:	4613      	mov	r3, r2
 801d572:	005b      	lsls	r3, r3, #1
 801d574:	4413      	add	r3, r2
 801d576:	00db      	lsls	r3, r3, #3
 801d578:	440b      	add	r3, r1
 801d57a:	681b      	ldr	r3, [r3, #0]
 801d57c:	2b00      	cmp	r3, #0
 801d57e:	d013      	beq.n	801d5a8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801d580:	4910      	ldr	r1, [pc, #64]	; (801d5c4 <etharp_free_entry+0x60>)
 801d582:	687a      	ldr	r2, [r7, #4]
 801d584:	4613      	mov	r3, r2
 801d586:	005b      	lsls	r3, r3, #1
 801d588:	4413      	add	r3, r2
 801d58a:	00db      	lsls	r3, r3, #3
 801d58c:	440b      	add	r3, r1
 801d58e:	681b      	ldr	r3, [r3, #0]
 801d590:	4618      	mov	r0, r3
 801d592:	f7f6 ff7d 	bl	8014490 <pbuf_free>
    arp_table[i].q = NULL;
 801d596:	490b      	ldr	r1, [pc, #44]	; (801d5c4 <etharp_free_entry+0x60>)
 801d598:	687a      	ldr	r2, [r7, #4]
 801d59a:	4613      	mov	r3, r2
 801d59c:	005b      	lsls	r3, r3, #1
 801d59e:	4413      	add	r3, r2
 801d5a0:	00db      	lsls	r3, r3, #3
 801d5a2:	440b      	add	r3, r1
 801d5a4:	2200      	movs	r2, #0
 801d5a6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801d5a8:	4906      	ldr	r1, [pc, #24]	; (801d5c4 <etharp_free_entry+0x60>)
 801d5aa:	687a      	ldr	r2, [r7, #4]
 801d5ac:	4613      	mov	r3, r2
 801d5ae:	005b      	lsls	r3, r3, #1
 801d5b0:	4413      	add	r3, r2
 801d5b2:	00db      	lsls	r3, r3, #3
 801d5b4:	440b      	add	r3, r1
 801d5b6:	3314      	adds	r3, #20
 801d5b8:	2200      	movs	r2, #0
 801d5ba:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801d5bc:	bf00      	nop
 801d5be:	3708      	adds	r7, #8
 801d5c0:	46bd      	mov	sp, r7
 801d5c2:	bd80      	pop	{r7, pc}
 801d5c4:	200123e4 	.word	0x200123e4

0801d5c8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801d5c8:	b580      	push	{r7, lr}
 801d5ca:	b082      	sub	sp, #8
 801d5cc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d5ce:	2300      	movs	r3, #0
 801d5d0:	607b      	str	r3, [r7, #4]
 801d5d2:	e096      	b.n	801d702 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801d5d4:	494f      	ldr	r1, [pc, #316]	; (801d714 <etharp_tmr+0x14c>)
 801d5d6:	687a      	ldr	r2, [r7, #4]
 801d5d8:	4613      	mov	r3, r2
 801d5da:	005b      	lsls	r3, r3, #1
 801d5dc:	4413      	add	r3, r2
 801d5de:	00db      	lsls	r3, r3, #3
 801d5e0:	440b      	add	r3, r1
 801d5e2:	3314      	adds	r3, #20
 801d5e4:	781b      	ldrb	r3, [r3, #0]
 801d5e6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801d5e8:	78fb      	ldrb	r3, [r7, #3]
 801d5ea:	2b00      	cmp	r3, #0
 801d5ec:	f000 8086 	beq.w	801d6fc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801d5f0:	4948      	ldr	r1, [pc, #288]	; (801d714 <etharp_tmr+0x14c>)
 801d5f2:	687a      	ldr	r2, [r7, #4]
 801d5f4:	4613      	mov	r3, r2
 801d5f6:	005b      	lsls	r3, r3, #1
 801d5f8:	4413      	add	r3, r2
 801d5fa:	00db      	lsls	r3, r3, #3
 801d5fc:	440b      	add	r3, r1
 801d5fe:	3312      	adds	r3, #18
 801d600:	881b      	ldrh	r3, [r3, #0]
 801d602:	3301      	adds	r3, #1
 801d604:	b298      	uxth	r0, r3
 801d606:	4943      	ldr	r1, [pc, #268]	; (801d714 <etharp_tmr+0x14c>)
 801d608:	687a      	ldr	r2, [r7, #4]
 801d60a:	4613      	mov	r3, r2
 801d60c:	005b      	lsls	r3, r3, #1
 801d60e:	4413      	add	r3, r2
 801d610:	00db      	lsls	r3, r3, #3
 801d612:	440b      	add	r3, r1
 801d614:	3312      	adds	r3, #18
 801d616:	4602      	mov	r2, r0
 801d618:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d61a:	493e      	ldr	r1, [pc, #248]	; (801d714 <etharp_tmr+0x14c>)
 801d61c:	687a      	ldr	r2, [r7, #4]
 801d61e:	4613      	mov	r3, r2
 801d620:	005b      	lsls	r3, r3, #1
 801d622:	4413      	add	r3, r2
 801d624:	00db      	lsls	r3, r3, #3
 801d626:	440b      	add	r3, r1
 801d628:	3312      	adds	r3, #18
 801d62a:	881b      	ldrh	r3, [r3, #0]
 801d62c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801d630:	d215      	bcs.n	801d65e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801d632:	4938      	ldr	r1, [pc, #224]	; (801d714 <etharp_tmr+0x14c>)
 801d634:	687a      	ldr	r2, [r7, #4]
 801d636:	4613      	mov	r3, r2
 801d638:	005b      	lsls	r3, r3, #1
 801d63a:	4413      	add	r3, r2
 801d63c:	00db      	lsls	r3, r3, #3
 801d63e:	440b      	add	r3, r1
 801d640:	3314      	adds	r3, #20
 801d642:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d644:	2b01      	cmp	r3, #1
 801d646:	d10e      	bne.n	801d666 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801d648:	4932      	ldr	r1, [pc, #200]	; (801d714 <etharp_tmr+0x14c>)
 801d64a:	687a      	ldr	r2, [r7, #4]
 801d64c:	4613      	mov	r3, r2
 801d64e:	005b      	lsls	r3, r3, #1
 801d650:	4413      	add	r3, r2
 801d652:	00db      	lsls	r3, r3, #3
 801d654:	440b      	add	r3, r1
 801d656:	3312      	adds	r3, #18
 801d658:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801d65a:	2b04      	cmp	r3, #4
 801d65c:	d903      	bls.n	801d666 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801d65e:	6878      	ldr	r0, [r7, #4]
 801d660:	f7ff ff80 	bl	801d564 <etharp_free_entry>
 801d664:	e04a      	b.n	801d6fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801d666:	492b      	ldr	r1, [pc, #172]	; (801d714 <etharp_tmr+0x14c>)
 801d668:	687a      	ldr	r2, [r7, #4]
 801d66a:	4613      	mov	r3, r2
 801d66c:	005b      	lsls	r3, r3, #1
 801d66e:	4413      	add	r3, r2
 801d670:	00db      	lsls	r3, r3, #3
 801d672:	440b      	add	r3, r1
 801d674:	3314      	adds	r3, #20
 801d676:	781b      	ldrb	r3, [r3, #0]
 801d678:	2b03      	cmp	r3, #3
 801d67a:	d10a      	bne.n	801d692 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801d67c:	4925      	ldr	r1, [pc, #148]	; (801d714 <etharp_tmr+0x14c>)
 801d67e:	687a      	ldr	r2, [r7, #4]
 801d680:	4613      	mov	r3, r2
 801d682:	005b      	lsls	r3, r3, #1
 801d684:	4413      	add	r3, r2
 801d686:	00db      	lsls	r3, r3, #3
 801d688:	440b      	add	r3, r1
 801d68a:	3314      	adds	r3, #20
 801d68c:	2204      	movs	r2, #4
 801d68e:	701a      	strb	r2, [r3, #0]
 801d690:	e034      	b.n	801d6fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801d692:	4920      	ldr	r1, [pc, #128]	; (801d714 <etharp_tmr+0x14c>)
 801d694:	687a      	ldr	r2, [r7, #4]
 801d696:	4613      	mov	r3, r2
 801d698:	005b      	lsls	r3, r3, #1
 801d69a:	4413      	add	r3, r2
 801d69c:	00db      	lsls	r3, r3, #3
 801d69e:	440b      	add	r3, r1
 801d6a0:	3314      	adds	r3, #20
 801d6a2:	781b      	ldrb	r3, [r3, #0]
 801d6a4:	2b04      	cmp	r3, #4
 801d6a6:	d10a      	bne.n	801d6be <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801d6a8:	491a      	ldr	r1, [pc, #104]	; (801d714 <etharp_tmr+0x14c>)
 801d6aa:	687a      	ldr	r2, [r7, #4]
 801d6ac:	4613      	mov	r3, r2
 801d6ae:	005b      	lsls	r3, r3, #1
 801d6b0:	4413      	add	r3, r2
 801d6b2:	00db      	lsls	r3, r3, #3
 801d6b4:	440b      	add	r3, r1
 801d6b6:	3314      	adds	r3, #20
 801d6b8:	2202      	movs	r2, #2
 801d6ba:	701a      	strb	r2, [r3, #0]
 801d6bc:	e01e      	b.n	801d6fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801d6be:	4915      	ldr	r1, [pc, #84]	; (801d714 <etharp_tmr+0x14c>)
 801d6c0:	687a      	ldr	r2, [r7, #4]
 801d6c2:	4613      	mov	r3, r2
 801d6c4:	005b      	lsls	r3, r3, #1
 801d6c6:	4413      	add	r3, r2
 801d6c8:	00db      	lsls	r3, r3, #3
 801d6ca:	440b      	add	r3, r1
 801d6cc:	3314      	adds	r3, #20
 801d6ce:	781b      	ldrb	r3, [r3, #0]
 801d6d0:	2b01      	cmp	r3, #1
 801d6d2:	d113      	bne.n	801d6fc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801d6d4:	490f      	ldr	r1, [pc, #60]	; (801d714 <etharp_tmr+0x14c>)
 801d6d6:	687a      	ldr	r2, [r7, #4]
 801d6d8:	4613      	mov	r3, r2
 801d6da:	005b      	lsls	r3, r3, #1
 801d6dc:	4413      	add	r3, r2
 801d6de:	00db      	lsls	r3, r3, #3
 801d6e0:	440b      	add	r3, r1
 801d6e2:	3308      	adds	r3, #8
 801d6e4:	6818      	ldr	r0, [r3, #0]
 801d6e6:	687a      	ldr	r2, [r7, #4]
 801d6e8:	4613      	mov	r3, r2
 801d6ea:	005b      	lsls	r3, r3, #1
 801d6ec:	4413      	add	r3, r2
 801d6ee:	00db      	lsls	r3, r3, #3
 801d6f0:	4a08      	ldr	r2, [pc, #32]	; (801d714 <etharp_tmr+0x14c>)
 801d6f2:	4413      	add	r3, r2
 801d6f4:	3304      	adds	r3, #4
 801d6f6:	4619      	mov	r1, r3
 801d6f8:	f000 fe72 	bl	801e3e0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d6fc:	687b      	ldr	r3, [r7, #4]
 801d6fe:	3301      	adds	r3, #1
 801d700:	607b      	str	r3, [r7, #4]
 801d702:	687b      	ldr	r3, [r7, #4]
 801d704:	2b09      	cmp	r3, #9
 801d706:	f77f af65 	ble.w	801d5d4 <etharp_tmr+0xc>
      }
    }
  }
}
 801d70a:	bf00      	nop
 801d70c:	bf00      	nop
 801d70e:	3708      	adds	r7, #8
 801d710:	46bd      	mov	sp, r7
 801d712:	bd80      	pop	{r7, pc}
 801d714:	200123e4 	.word	0x200123e4

0801d718 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801d718:	b580      	push	{r7, lr}
 801d71a:	b08a      	sub	sp, #40	; 0x28
 801d71c:	af00      	add	r7, sp, #0
 801d71e:	60f8      	str	r0, [r7, #12]
 801d720:	460b      	mov	r3, r1
 801d722:	607a      	str	r2, [r7, #4]
 801d724:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801d726:	230a      	movs	r3, #10
 801d728:	84fb      	strh	r3, [r7, #38]	; 0x26
 801d72a:	230a      	movs	r3, #10
 801d72c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801d72e:	230a      	movs	r3, #10
 801d730:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801d732:	2300      	movs	r3, #0
 801d734:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801d736:	230a      	movs	r3, #10
 801d738:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801d73a:	2300      	movs	r3, #0
 801d73c:	83bb      	strh	r3, [r7, #28]
 801d73e:	2300      	movs	r3, #0
 801d740:	837b      	strh	r3, [r7, #26]
 801d742:	2300      	movs	r3, #0
 801d744:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d746:	2300      	movs	r3, #0
 801d748:	843b      	strh	r3, [r7, #32]
 801d74a:	e0ae      	b.n	801d8aa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801d74c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d750:	49a6      	ldr	r1, [pc, #664]	; (801d9ec <etharp_find_entry+0x2d4>)
 801d752:	4613      	mov	r3, r2
 801d754:	005b      	lsls	r3, r3, #1
 801d756:	4413      	add	r3, r2
 801d758:	00db      	lsls	r3, r3, #3
 801d75a:	440b      	add	r3, r1
 801d75c:	3314      	adds	r3, #20
 801d75e:	781b      	ldrb	r3, [r3, #0]
 801d760:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801d762:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801d766:	2b0a      	cmp	r3, #10
 801d768:	d105      	bne.n	801d776 <etharp_find_entry+0x5e>
 801d76a:	7dfb      	ldrb	r3, [r7, #23]
 801d76c:	2b00      	cmp	r3, #0
 801d76e:	d102      	bne.n	801d776 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801d770:	8c3b      	ldrh	r3, [r7, #32]
 801d772:	847b      	strh	r3, [r7, #34]	; 0x22
 801d774:	e095      	b.n	801d8a2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801d776:	7dfb      	ldrb	r3, [r7, #23]
 801d778:	2b00      	cmp	r3, #0
 801d77a:	f000 8092 	beq.w	801d8a2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801d77e:	7dfb      	ldrb	r3, [r7, #23]
 801d780:	2b01      	cmp	r3, #1
 801d782:	d009      	beq.n	801d798 <etharp_find_entry+0x80>
 801d784:	7dfb      	ldrb	r3, [r7, #23]
 801d786:	2b01      	cmp	r3, #1
 801d788:	d806      	bhi.n	801d798 <etharp_find_entry+0x80>
 801d78a:	4b99      	ldr	r3, [pc, #612]	; (801d9f0 <etharp_find_entry+0x2d8>)
 801d78c:	f240 1223 	movw	r2, #291	; 0x123
 801d790:	4998      	ldr	r1, [pc, #608]	; (801d9f4 <etharp_find_entry+0x2dc>)
 801d792:	4899      	ldr	r0, [pc, #612]	; (801d9f8 <etharp_find_entry+0x2e0>)
 801d794:	f003 ffc0 	bl	8021718 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801d798:	68fb      	ldr	r3, [r7, #12]
 801d79a:	2b00      	cmp	r3, #0
 801d79c:	d020      	beq.n	801d7e0 <etharp_find_entry+0xc8>
 801d79e:	68fb      	ldr	r3, [r7, #12]
 801d7a0:	6819      	ldr	r1, [r3, #0]
 801d7a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d7a6:	4891      	ldr	r0, [pc, #580]	; (801d9ec <etharp_find_entry+0x2d4>)
 801d7a8:	4613      	mov	r3, r2
 801d7aa:	005b      	lsls	r3, r3, #1
 801d7ac:	4413      	add	r3, r2
 801d7ae:	00db      	lsls	r3, r3, #3
 801d7b0:	4403      	add	r3, r0
 801d7b2:	3304      	adds	r3, #4
 801d7b4:	681b      	ldr	r3, [r3, #0]
 801d7b6:	4299      	cmp	r1, r3
 801d7b8:	d112      	bne.n	801d7e0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801d7ba:	687b      	ldr	r3, [r7, #4]
 801d7bc:	2b00      	cmp	r3, #0
 801d7be:	d00c      	beq.n	801d7da <etharp_find_entry+0xc2>
 801d7c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d7c4:	4989      	ldr	r1, [pc, #548]	; (801d9ec <etharp_find_entry+0x2d4>)
 801d7c6:	4613      	mov	r3, r2
 801d7c8:	005b      	lsls	r3, r3, #1
 801d7ca:	4413      	add	r3, r2
 801d7cc:	00db      	lsls	r3, r3, #3
 801d7ce:	440b      	add	r3, r1
 801d7d0:	3308      	adds	r3, #8
 801d7d2:	681b      	ldr	r3, [r3, #0]
 801d7d4:	687a      	ldr	r2, [r7, #4]
 801d7d6:	429a      	cmp	r2, r3
 801d7d8:	d102      	bne.n	801d7e0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801d7da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d7de:	e100      	b.n	801d9e2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801d7e0:	7dfb      	ldrb	r3, [r7, #23]
 801d7e2:	2b01      	cmp	r3, #1
 801d7e4:	d140      	bne.n	801d868 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801d7e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d7ea:	4980      	ldr	r1, [pc, #512]	; (801d9ec <etharp_find_entry+0x2d4>)
 801d7ec:	4613      	mov	r3, r2
 801d7ee:	005b      	lsls	r3, r3, #1
 801d7f0:	4413      	add	r3, r2
 801d7f2:	00db      	lsls	r3, r3, #3
 801d7f4:	440b      	add	r3, r1
 801d7f6:	681b      	ldr	r3, [r3, #0]
 801d7f8:	2b00      	cmp	r3, #0
 801d7fa:	d01a      	beq.n	801d832 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801d7fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d800:	497a      	ldr	r1, [pc, #488]	; (801d9ec <etharp_find_entry+0x2d4>)
 801d802:	4613      	mov	r3, r2
 801d804:	005b      	lsls	r3, r3, #1
 801d806:	4413      	add	r3, r2
 801d808:	00db      	lsls	r3, r3, #3
 801d80a:	440b      	add	r3, r1
 801d80c:	3312      	adds	r3, #18
 801d80e:	881b      	ldrh	r3, [r3, #0]
 801d810:	8bba      	ldrh	r2, [r7, #28]
 801d812:	429a      	cmp	r2, r3
 801d814:	d845      	bhi.n	801d8a2 <etharp_find_entry+0x18a>
            old_queue = i;
 801d816:	8c3b      	ldrh	r3, [r7, #32]
 801d818:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801d81a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d81e:	4973      	ldr	r1, [pc, #460]	; (801d9ec <etharp_find_entry+0x2d4>)
 801d820:	4613      	mov	r3, r2
 801d822:	005b      	lsls	r3, r3, #1
 801d824:	4413      	add	r3, r2
 801d826:	00db      	lsls	r3, r3, #3
 801d828:	440b      	add	r3, r1
 801d82a:	3312      	adds	r3, #18
 801d82c:	881b      	ldrh	r3, [r3, #0]
 801d82e:	83bb      	strh	r3, [r7, #28]
 801d830:	e037      	b.n	801d8a2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801d832:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d836:	496d      	ldr	r1, [pc, #436]	; (801d9ec <etharp_find_entry+0x2d4>)
 801d838:	4613      	mov	r3, r2
 801d83a:	005b      	lsls	r3, r3, #1
 801d83c:	4413      	add	r3, r2
 801d83e:	00db      	lsls	r3, r3, #3
 801d840:	440b      	add	r3, r1
 801d842:	3312      	adds	r3, #18
 801d844:	881b      	ldrh	r3, [r3, #0]
 801d846:	8b7a      	ldrh	r2, [r7, #26]
 801d848:	429a      	cmp	r2, r3
 801d84a:	d82a      	bhi.n	801d8a2 <etharp_find_entry+0x18a>
            old_pending = i;
 801d84c:	8c3b      	ldrh	r3, [r7, #32]
 801d84e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801d850:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d854:	4965      	ldr	r1, [pc, #404]	; (801d9ec <etharp_find_entry+0x2d4>)
 801d856:	4613      	mov	r3, r2
 801d858:	005b      	lsls	r3, r3, #1
 801d85a:	4413      	add	r3, r2
 801d85c:	00db      	lsls	r3, r3, #3
 801d85e:	440b      	add	r3, r1
 801d860:	3312      	adds	r3, #18
 801d862:	881b      	ldrh	r3, [r3, #0]
 801d864:	837b      	strh	r3, [r7, #26]
 801d866:	e01c      	b.n	801d8a2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801d868:	7dfb      	ldrb	r3, [r7, #23]
 801d86a:	2b01      	cmp	r3, #1
 801d86c:	d919      	bls.n	801d8a2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801d86e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d872:	495e      	ldr	r1, [pc, #376]	; (801d9ec <etharp_find_entry+0x2d4>)
 801d874:	4613      	mov	r3, r2
 801d876:	005b      	lsls	r3, r3, #1
 801d878:	4413      	add	r3, r2
 801d87a:	00db      	lsls	r3, r3, #3
 801d87c:	440b      	add	r3, r1
 801d87e:	3312      	adds	r3, #18
 801d880:	881b      	ldrh	r3, [r3, #0]
 801d882:	8b3a      	ldrh	r2, [r7, #24]
 801d884:	429a      	cmp	r2, r3
 801d886:	d80c      	bhi.n	801d8a2 <etharp_find_entry+0x18a>
            old_stable = i;
 801d888:	8c3b      	ldrh	r3, [r7, #32]
 801d88a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801d88c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d890:	4956      	ldr	r1, [pc, #344]	; (801d9ec <etharp_find_entry+0x2d4>)
 801d892:	4613      	mov	r3, r2
 801d894:	005b      	lsls	r3, r3, #1
 801d896:	4413      	add	r3, r2
 801d898:	00db      	lsls	r3, r3, #3
 801d89a:	440b      	add	r3, r1
 801d89c:	3312      	adds	r3, #18
 801d89e:	881b      	ldrh	r3, [r3, #0]
 801d8a0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d8a2:	8c3b      	ldrh	r3, [r7, #32]
 801d8a4:	3301      	adds	r3, #1
 801d8a6:	b29b      	uxth	r3, r3
 801d8a8:	843b      	strh	r3, [r7, #32]
 801d8aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d8ae:	2b09      	cmp	r3, #9
 801d8b0:	f77f af4c 	ble.w	801d74c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801d8b4:	7afb      	ldrb	r3, [r7, #11]
 801d8b6:	f003 0302 	and.w	r3, r3, #2
 801d8ba:	2b00      	cmp	r3, #0
 801d8bc:	d108      	bne.n	801d8d0 <etharp_find_entry+0x1b8>
 801d8be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801d8c2:	2b0a      	cmp	r3, #10
 801d8c4:	d107      	bne.n	801d8d6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801d8c6:	7afb      	ldrb	r3, [r7, #11]
 801d8c8:	f003 0301 	and.w	r3, r3, #1
 801d8cc:	2b00      	cmp	r3, #0
 801d8ce:	d102      	bne.n	801d8d6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801d8d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d8d4:	e085      	b.n	801d9e2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801d8d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801d8da:	2b09      	cmp	r3, #9
 801d8dc:	dc02      	bgt.n	801d8e4 <etharp_find_entry+0x1cc>
    i = empty;
 801d8de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d8e0:	843b      	strh	r3, [r7, #32]
 801d8e2:	e039      	b.n	801d958 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801d8e4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801d8e8:	2b09      	cmp	r3, #9
 801d8ea:	dc14      	bgt.n	801d916 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801d8ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d8ee:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801d8f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d8f4:	493d      	ldr	r1, [pc, #244]	; (801d9ec <etharp_find_entry+0x2d4>)
 801d8f6:	4613      	mov	r3, r2
 801d8f8:	005b      	lsls	r3, r3, #1
 801d8fa:	4413      	add	r3, r2
 801d8fc:	00db      	lsls	r3, r3, #3
 801d8fe:	440b      	add	r3, r1
 801d900:	681b      	ldr	r3, [r3, #0]
 801d902:	2b00      	cmp	r3, #0
 801d904:	d018      	beq.n	801d938 <etharp_find_entry+0x220>
 801d906:	4b3a      	ldr	r3, [pc, #232]	; (801d9f0 <etharp_find_entry+0x2d8>)
 801d908:	f240 126d 	movw	r2, #365	; 0x16d
 801d90c:	493b      	ldr	r1, [pc, #236]	; (801d9fc <etharp_find_entry+0x2e4>)
 801d90e:	483a      	ldr	r0, [pc, #232]	; (801d9f8 <etharp_find_entry+0x2e0>)
 801d910:	f003 ff02 	bl	8021718 <iprintf>
 801d914:	e010      	b.n	801d938 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801d916:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801d91a:	2b09      	cmp	r3, #9
 801d91c:	dc02      	bgt.n	801d924 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801d91e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801d920:	843b      	strh	r3, [r7, #32]
 801d922:	e009      	b.n	801d938 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801d924:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801d928:	2b09      	cmp	r3, #9
 801d92a:	dc02      	bgt.n	801d932 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801d92c:	8bfb      	ldrh	r3, [r7, #30]
 801d92e:	843b      	strh	r3, [r7, #32]
 801d930:	e002      	b.n	801d938 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801d932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d936:	e054      	b.n	801d9e2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801d938:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d93c:	2b09      	cmp	r3, #9
 801d93e:	dd06      	ble.n	801d94e <etharp_find_entry+0x236>
 801d940:	4b2b      	ldr	r3, [pc, #172]	; (801d9f0 <etharp_find_entry+0x2d8>)
 801d942:	f240 127f 	movw	r2, #383	; 0x17f
 801d946:	492e      	ldr	r1, [pc, #184]	; (801da00 <etharp_find_entry+0x2e8>)
 801d948:	482b      	ldr	r0, [pc, #172]	; (801d9f8 <etharp_find_entry+0x2e0>)
 801d94a:	f003 fee5 	bl	8021718 <iprintf>
    etharp_free_entry(i);
 801d94e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d952:	4618      	mov	r0, r3
 801d954:	f7ff fe06 	bl	801d564 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801d958:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d95c:	2b09      	cmp	r3, #9
 801d95e:	dd06      	ble.n	801d96e <etharp_find_entry+0x256>
 801d960:	4b23      	ldr	r3, [pc, #140]	; (801d9f0 <etharp_find_entry+0x2d8>)
 801d962:	f240 1283 	movw	r2, #387	; 0x183
 801d966:	4926      	ldr	r1, [pc, #152]	; (801da00 <etharp_find_entry+0x2e8>)
 801d968:	4823      	ldr	r0, [pc, #140]	; (801d9f8 <etharp_find_entry+0x2e0>)
 801d96a:	f003 fed5 	bl	8021718 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801d96e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d972:	491e      	ldr	r1, [pc, #120]	; (801d9ec <etharp_find_entry+0x2d4>)
 801d974:	4613      	mov	r3, r2
 801d976:	005b      	lsls	r3, r3, #1
 801d978:	4413      	add	r3, r2
 801d97a:	00db      	lsls	r3, r3, #3
 801d97c:	440b      	add	r3, r1
 801d97e:	3314      	adds	r3, #20
 801d980:	781b      	ldrb	r3, [r3, #0]
 801d982:	2b00      	cmp	r3, #0
 801d984:	d006      	beq.n	801d994 <etharp_find_entry+0x27c>
 801d986:	4b1a      	ldr	r3, [pc, #104]	; (801d9f0 <etharp_find_entry+0x2d8>)
 801d988:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801d98c:	491d      	ldr	r1, [pc, #116]	; (801da04 <etharp_find_entry+0x2ec>)
 801d98e:	481a      	ldr	r0, [pc, #104]	; (801d9f8 <etharp_find_entry+0x2e0>)
 801d990:	f003 fec2 	bl	8021718 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801d994:	68fb      	ldr	r3, [r7, #12]
 801d996:	2b00      	cmp	r3, #0
 801d998:	d00b      	beq.n	801d9b2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801d99a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d99e:	68fb      	ldr	r3, [r7, #12]
 801d9a0:	6819      	ldr	r1, [r3, #0]
 801d9a2:	4812      	ldr	r0, [pc, #72]	; (801d9ec <etharp_find_entry+0x2d4>)
 801d9a4:	4613      	mov	r3, r2
 801d9a6:	005b      	lsls	r3, r3, #1
 801d9a8:	4413      	add	r3, r2
 801d9aa:	00db      	lsls	r3, r3, #3
 801d9ac:	4403      	add	r3, r0
 801d9ae:	3304      	adds	r3, #4
 801d9b0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801d9b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d9b6:	490d      	ldr	r1, [pc, #52]	; (801d9ec <etharp_find_entry+0x2d4>)
 801d9b8:	4613      	mov	r3, r2
 801d9ba:	005b      	lsls	r3, r3, #1
 801d9bc:	4413      	add	r3, r2
 801d9be:	00db      	lsls	r3, r3, #3
 801d9c0:	440b      	add	r3, r1
 801d9c2:	3312      	adds	r3, #18
 801d9c4:	2200      	movs	r2, #0
 801d9c6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801d9c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d9cc:	4907      	ldr	r1, [pc, #28]	; (801d9ec <etharp_find_entry+0x2d4>)
 801d9ce:	4613      	mov	r3, r2
 801d9d0:	005b      	lsls	r3, r3, #1
 801d9d2:	4413      	add	r3, r2
 801d9d4:	00db      	lsls	r3, r3, #3
 801d9d6:	440b      	add	r3, r1
 801d9d8:	3308      	adds	r3, #8
 801d9da:	687a      	ldr	r2, [r7, #4]
 801d9dc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801d9de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801d9e2:	4618      	mov	r0, r3
 801d9e4:	3728      	adds	r7, #40	; 0x28
 801d9e6:	46bd      	mov	sp, r7
 801d9e8:	bd80      	pop	{r7, pc}
 801d9ea:	bf00      	nop
 801d9ec:	200123e4 	.word	0x200123e4
 801d9f0:	08026adc 	.word	0x08026adc
 801d9f4:	08026b14 	.word	0x08026b14
 801d9f8:	08026b54 	.word	0x08026b54
 801d9fc:	08026b7c 	.word	0x08026b7c
 801da00:	08026b94 	.word	0x08026b94
 801da04:	08026ba8 	.word	0x08026ba8

0801da08 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801da08:	b580      	push	{r7, lr}
 801da0a:	b088      	sub	sp, #32
 801da0c:	af02      	add	r7, sp, #8
 801da0e:	60f8      	str	r0, [r7, #12]
 801da10:	60b9      	str	r1, [r7, #8]
 801da12:	607a      	str	r2, [r7, #4]
 801da14:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801da16:	68fb      	ldr	r3, [r7, #12]
 801da18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801da1c:	2b06      	cmp	r3, #6
 801da1e:	d006      	beq.n	801da2e <etharp_update_arp_entry+0x26>
 801da20:	4b48      	ldr	r3, [pc, #288]	; (801db44 <etharp_update_arp_entry+0x13c>)
 801da22:	f240 12a9 	movw	r2, #425	; 0x1a9
 801da26:	4948      	ldr	r1, [pc, #288]	; (801db48 <etharp_update_arp_entry+0x140>)
 801da28:	4848      	ldr	r0, [pc, #288]	; (801db4c <etharp_update_arp_entry+0x144>)
 801da2a:	f003 fe75 	bl	8021718 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801da2e:	68bb      	ldr	r3, [r7, #8]
 801da30:	2b00      	cmp	r3, #0
 801da32:	d012      	beq.n	801da5a <etharp_update_arp_entry+0x52>
 801da34:	68bb      	ldr	r3, [r7, #8]
 801da36:	681b      	ldr	r3, [r3, #0]
 801da38:	2b00      	cmp	r3, #0
 801da3a:	d00e      	beq.n	801da5a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801da3c:	68bb      	ldr	r3, [r7, #8]
 801da3e:	681b      	ldr	r3, [r3, #0]
 801da40:	68f9      	ldr	r1, [r7, #12]
 801da42:	4618      	mov	r0, r3
 801da44:	f001 f920 	bl	801ec88 <ip4_addr_isbroadcast_u32>
 801da48:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801da4a:	2b00      	cmp	r3, #0
 801da4c:	d105      	bne.n	801da5a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801da4e:	68bb      	ldr	r3, [r7, #8]
 801da50:	681b      	ldr	r3, [r3, #0]
 801da52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801da56:	2be0      	cmp	r3, #224	; 0xe0
 801da58:	d102      	bne.n	801da60 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801da5a:	f06f 030f 	mvn.w	r3, #15
 801da5e:	e06c      	b.n	801db3a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801da60:	78fb      	ldrb	r3, [r7, #3]
 801da62:	68fa      	ldr	r2, [r7, #12]
 801da64:	4619      	mov	r1, r3
 801da66:	68b8      	ldr	r0, [r7, #8]
 801da68:	f7ff fe56 	bl	801d718 <etharp_find_entry>
 801da6c:	4603      	mov	r3, r0
 801da6e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801da70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801da74:	2b00      	cmp	r3, #0
 801da76:	da02      	bge.n	801da7e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801da78:	8afb      	ldrh	r3, [r7, #22]
 801da7a:	b25b      	sxtb	r3, r3
 801da7c:	e05d      	b.n	801db3a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801da7e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801da82:	4933      	ldr	r1, [pc, #204]	; (801db50 <etharp_update_arp_entry+0x148>)
 801da84:	4613      	mov	r3, r2
 801da86:	005b      	lsls	r3, r3, #1
 801da88:	4413      	add	r3, r2
 801da8a:	00db      	lsls	r3, r3, #3
 801da8c:	440b      	add	r3, r1
 801da8e:	3314      	adds	r3, #20
 801da90:	2202      	movs	r2, #2
 801da92:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801da94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801da98:	492d      	ldr	r1, [pc, #180]	; (801db50 <etharp_update_arp_entry+0x148>)
 801da9a:	4613      	mov	r3, r2
 801da9c:	005b      	lsls	r3, r3, #1
 801da9e:	4413      	add	r3, r2
 801daa0:	00db      	lsls	r3, r3, #3
 801daa2:	440b      	add	r3, r1
 801daa4:	3308      	adds	r3, #8
 801daa6:	68fa      	ldr	r2, [r7, #12]
 801daa8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801daaa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801daae:	4613      	mov	r3, r2
 801dab0:	005b      	lsls	r3, r3, #1
 801dab2:	4413      	add	r3, r2
 801dab4:	00db      	lsls	r3, r3, #3
 801dab6:	3308      	adds	r3, #8
 801dab8:	4a25      	ldr	r2, [pc, #148]	; (801db50 <etharp_update_arp_entry+0x148>)
 801daba:	4413      	add	r3, r2
 801dabc:	3304      	adds	r3, #4
 801dabe:	2206      	movs	r2, #6
 801dac0:	6879      	ldr	r1, [r7, #4]
 801dac2:	4618      	mov	r0, r3
 801dac4:	f004 f94f 	bl	8021d66 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801dac8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801dacc:	4920      	ldr	r1, [pc, #128]	; (801db50 <etharp_update_arp_entry+0x148>)
 801dace:	4613      	mov	r3, r2
 801dad0:	005b      	lsls	r3, r3, #1
 801dad2:	4413      	add	r3, r2
 801dad4:	00db      	lsls	r3, r3, #3
 801dad6:	440b      	add	r3, r1
 801dad8:	3312      	adds	r3, #18
 801dada:	2200      	movs	r2, #0
 801dadc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801dade:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801dae2:	491b      	ldr	r1, [pc, #108]	; (801db50 <etharp_update_arp_entry+0x148>)
 801dae4:	4613      	mov	r3, r2
 801dae6:	005b      	lsls	r3, r3, #1
 801dae8:	4413      	add	r3, r2
 801daea:	00db      	lsls	r3, r3, #3
 801daec:	440b      	add	r3, r1
 801daee:	681b      	ldr	r3, [r3, #0]
 801daf0:	2b00      	cmp	r3, #0
 801daf2:	d021      	beq.n	801db38 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801daf4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801daf8:	4915      	ldr	r1, [pc, #84]	; (801db50 <etharp_update_arp_entry+0x148>)
 801dafa:	4613      	mov	r3, r2
 801dafc:	005b      	lsls	r3, r3, #1
 801dafe:	4413      	add	r3, r2
 801db00:	00db      	lsls	r3, r3, #3
 801db02:	440b      	add	r3, r1
 801db04:	681b      	ldr	r3, [r3, #0]
 801db06:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801db08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801db0c:	4910      	ldr	r1, [pc, #64]	; (801db50 <etharp_update_arp_entry+0x148>)
 801db0e:	4613      	mov	r3, r2
 801db10:	005b      	lsls	r3, r3, #1
 801db12:	4413      	add	r3, r2
 801db14:	00db      	lsls	r3, r3, #3
 801db16:	440b      	add	r3, r1
 801db18:	2200      	movs	r2, #0
 801db1a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801db1c:	68fb      	ldr	r3, [r7, #12]
 801db1e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801db22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801db26:	9300      	str	r3, [sp, #0]
 801db28:	687b      	ldr	r3, [r7, #4]
 801db2a:	6939      	ldr	r1, [r7, #16]
 801db2c:	68f8      	ldr	r0, [r7, #12]
 801db2e:	f002 f849 	bl	801fbc4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801db32:	6938      	ldr	r0, [r7, #16]
 801db34:	f7f6 fcac 	bl	8014490 <pbuf_free>
  }
  return ERR_OK;
 801db38:	2300      	movs	r3, #0
}
 801db3a:	4618      	mov	r0, r3
 801db3c:	3718      	adds	r7, #24
 801db3e:	46bd      	mov	sp, r7
 801db40:	bd80      	pop	{r7, pc}
 801db42:	bf00      	nop
 801db44:	08026adc 	.word	0x08026adc
 801db48:	08026bd4 	.word	0x08026bd4
 801db4c:	08026b54 	.word	0x08026b54
 801db50:	200123e4 	.word	0x200123e4

0801db54 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801db54:	b580      	push	{r7, lr}
 801db56:	b084      	sub	sp, #16
 801db58:	af00      	add	r7, sp, #0
 801db5a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801db5c:	2300      	movs	r3, #0
 801db5e:	60fb      	str	r3, [r7, #12]
 801db60:	e01e      	b.n	801dba0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801db62:	4913      	ldr	r1, [pc, #76]	; (801dbb0 <etharp_cleanup_netif+0x5c>)
 801db64:	68fa      	ldr	r2, [r7, #12]
 801db66:	4613      	mov	r3, r2
 801db68:	005b      	lsls	r3, r3, #1
 801db6a:	4413      	add	r3, r2
 801db6c:	00db      	lsls	r3, r3, #3
 801db6e:	440b      	add	r3, r1
 801db70:	3314      	adds	r3, #20
 801db72:	781b      	ldrb	r3, [r3, #0]
 801db74:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801db76:	7afb      	ldrb	r3, [r7, #11]
 801db78:	2b00      	cmp	r3, #0
 801db7a:	d00e      	beq.n	801db9a <etharp_cleanup_netif+0x46>
 801db7c:	490c      	ldr	r1, [pc, #48]	; (801dbb0 <etharp_cleanup_netif+0x5c>)
 801db7e:	68fa      	ldr	r2, [r7, #12]
 801db80:	4613      	mov	r3, r2
 801db82:	005b      	lsls	r3, r3, #1
 801db84:	4413      	add	r3, r2
 801db86:	00db      	lsls	r3, r3, #3
 801db88:	440b      	add	r3, r1
 801db8a:	3308      	adds	r3, #8
 801db8c:	681b      	ldr	r3, [r3, #0]
 801db8e:	687a      	ldr	r2, [r7, #4]
 801db90:	429a      	cmp	r2, r3
 801db92:	d102      	bne.n	801db9a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801db94:	68f8      	ldr	r0, [r7, #12]
 801db96:	f7ff fce5 	bl	801d564 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801db9a:	68fb      	ldr	r3, [r7, #12]
 801db9c:	3301      	adds	r3, #1
 801db9e:	60fb      	str	r3, [r7, #12]
 801dba0:	68fb      	ldr	r3, [r7, #12]
 801dba2:	2b09      	cmp	r3, #9
 801dba4:	dddd      	ble.n	801db62 <etharp_cleanup_netif+0xe>
    }
  }
}
 801dba6:	bf00      	nop
 801dba8:	bf00      	nop
 801dbaa:	3710      	adds	r7, #16
 801dbac:	46bd      	mov	sp, r7
 801dbae:	bd80      	pop	{r7, pc}
 801dbb0:	200123e4 	.word	0x200123e4

0801dbb4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801dbb4:	b5b0      	push	{r4, r5, r7, lr}
 801dbb6:	b08a      	sub	sp, #40	; 0x28
 801dbb8:	af04      	add	r7, sp, #16
 801dbba:	6078      	str	r0, [r7, #4]
 801dbbc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801dbbe:	683b      	ldr	r3, [r7, #0]
 801dbc0:	2b00      	cmp	r3, #0
 801dbc2:	d107      	bne.n	801dbd4 <etharp_input+0x20>
 801dbc4:	4b3f      	ldr	r3, [pc, #252]	; (801dcc4 <etharp_input+0x110>)
 801dbc6:	f240 228a 	movw	r2, #650	; 0x28a
 801dbca:	493f      	ldr	r1, [pc, #252]	; (801dcc8 <etharp_input+0x114>)
 801dbcc:	483f      	ldr	r0, [pc, #252]	; (801dccc <etharp_input+0x118>)
 801dbce:	f003 fda3 	bl	8021718 <iprintf>
 801dbd2:	e074      	b.n	801dcbe <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801dbd4:	687b      	ldr	r3, [r7, #4]
 801dbd6:	685b      	ldr	r3, [r3, #4]
 801dbd8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801dbda:	693b      	ldr	r3, [r7, #16]
 801dbdc:	881b      	ldrh	r3, [r3, #0]
 801dbde:	b29b      	uxth	r3, r3
 801dbe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801dbe4:	d10c      	bne.n	801dc00 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801dbe6:	693b      	ldr	r3, [r7, #16]
 801dbe8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801dbea:	2b06      	cmp	r3, #6
 801dbec:	d108      	bne.n	801dc00 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801dbee:	693b      	ldr	r3, [r7, #16]
 801dbf0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801dbf2:	2b04      	cmp	r3, #4
 801dbf4:	d104      	bne.n	801dc00 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801dbf6:	693b      	ldr	r3, [r7, #16]
 801dbf8:	885b      	ldrh	r3, [r3, #2]
 801dbfa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801dbfc:	2b08      	cmp	r3, #8
 801dbfe:	d003      	beq.n	801dc08 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801dc00:	6878      	ldr	r0, [r7, #4]
 801dc02:	f7f6 fc45 	bl	8014490 <pbuf_free>
    return;
 801dc06:	e05a      	b.n	801dcbe <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801dc08:	693b      	ldr	r3, [r7, #16]
 801dc0a:	330e      	adds	r3, #14
 801dc0c:	681b      	ldr	r3, [r3, #0]
 801dc0e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801dc10:	693b      	ldr	r3, [r7, #16]
 801dc12:	3318      	adds	r3, #24
 801dc14:	681b      	ldr	r3, [r3, #0]
 801dc16:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801dc18:	683b      	ldr	r3, [r7, #0]
 801dc1a:	3304      	adds	r3, #4
 801dc1c:	681b      	ldr	r3, [r3, #0]
 801dc1e:	2b00      	cmp	r3, #0
 801dc20:	d102      	bne.n	801dc28 <etharp_input+0x74>
    for_us = 0;
 801dc22:	2300      	movs	r3, #0
 801dc24:	75fb      	strb	r3, [r7, #23]
 801dc26:	e009      	b.n	801dc3c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801dc28:	68ba      	ldr	r2, [r7, #8]
 801dc2a:	683b      	ldr	r3, [r7, #0]
 801dc2c:	3304      	adds	r3, #4
 801dc2e:	681b      	ldr	r3, [r3, #0]
 801dc30:	429a      	cmp	r2, r3
 801dc32:	bf0c      	ite	eq
 801dc34:	2301      	moveq	r3, #1
 801dc36:	2300      	movne	r3, #0
 801dc38:	b2db      	uxtb	r3, r3
 801dc3a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801dc3c:	693b      	ldr	r3, [r7, #16]
 801dc3e:	f103 0208 	add.w	r2, r3, #8
 801dc42:	7dfb      	ldrb	r3, [r7, #23]
 801dc44:	2b00      	cmp	r3, #0
 801dc46:	d001      	beq.n	801dc4c <etharp_input+0x98>
 801dc48:	2301      	movs	r3, #1
 801dc4a:	e000      	b.n	801dc4e <etharp_input+0x9a>
 801dc4c:	2302      	movs	r3, #2
 801dc4e:	f107 010c 	add.w	r1, r7, #12
 801dc52:	6838      	ldr	r0, [r7, #0]
 801dc54:	f7ff fed8 	bl	801da08 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801dc58:	693b      	ldr	r3, [r7, #16]
 801dc5a:	88db      	ldrh	r3, [r3, #6]
 801dc5c:	b29b      	uxth	r3, r3
 801dc5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801dc62:	d003      	beq.n	801dc6c <etharp_input+0xb8>
 801dc64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801dc68:	d01e      	beq.n	801dca8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801dc6a:	e025      	b.n	801dcb8 <etharp_input+0x104>
      if (for_us) {
 801dc6c:	7dfb      	ldrb	r3, [r7, #23]
 801dc6e:	2b00      	cmp	r3, #0
 801dc70:	d021      	beq.n	801dcb6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801dc72:	683b      	ldr	r3, [r7, #0]
 801dc74:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801dc78:	693b      	ldr	r3, [r7, #16]
 801dc7a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801dc7e:	683b      	ldr	r3, [r7, #0]
 801dc80:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801dc84:	683b      	ldr	r3, [r7, #0]
 801dc86:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801dc88:	693a      	ldr	r2, [r7, #16]
 801dc8a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801dc8c:	2102      	movs	r1, #2
 801dc8e:	9103      	str	r1, [sp, #12]
 801dc90:	f107 010c 	add.w	r1, r7, #12
 801dc94:	9102      	str	r1, [sp, #8]
 801dc96:	9201      	str	r2, [sp, #4]
 801dc98:	9300      	str	r3, [sp, #0]
 801dc9a:	462b      	mov	r3, r5
 801dc9c:	4622      	mov	r2, r4
 801dc9e:	4601      	mov	r1, r0
 801dca0:	6838      	ldr	r0, [r7, #0]
 801dca2:	f000 faef 	bl	801e284 <etharp_raw>
      break;
 801dca6:	e006      	b.n	801dcb6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801dca8:	f107 030c 	add.w	r3, r7, #12
 801dcac:	4619      	mov	r1, r3
 801dcae:	6838      	ldr	r0, [r7, #0]
 801dcb0:	f7fe f9fc 	bl	801c0ac <dhcp_arp_reply>
      break;
 801dcb4:	e000      	b.n	801dcb8 <etharp_input+0x104>
      break;
 801dcb6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801dcb8:	6878      	ldr	r0, [r7, #4]
 801dcba:	f7f6 fbe9 	bl	8014490 <pbuf_free>
}
 801dcbe:	3718      	adds	r7, #24
 801dcc0:	46bd      	mov	sp, r7
 801dcc2:	bdb0      	pop	{r4, r5, r7, pc}
 801dcc4:	08026adc 	.word	0x08026adc
 801dcc8:	08026c2c 	.word	0x08026c2c
 801dccc:	08026b54 	.word	0x08026b54

0801dcd0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801dcd0:	b580      	push	{r7, lr}
 801dcd2:	b086      	sub	sp, #24
 801dcd4:	af02      	add	r7, sp, #8
 801dcd6:	60f8      	str	r0, [r7, #12]
 801dcd8:	60b9      	str	r1, [r7, #8]
 801dcda:	4613      	mov	r3, r2
 801dcdc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801dcde:	79fa      	ldrb	r2, [r7, #7]
 801dce0:	4944      	ldr	r1, [pc, #272]	; (801ddf4 <etharp_output_to_arp_index+0x124>)
 801dce2:	4613      	mov	r3, r2
 801dce4:	005b      	lsls	r3, r3, #1
 801dce6:	4413      	add	r3, r2
 801dce8:	00db      	lsls	r3, r3, #3
 801dcea:	440b      	add	r3, r1
 801dcec:	3314      	adds	r3, #20
 801dcee:	781b      	ldrb	r3, [r3, #0]
 801dcf0:	2b01      	cmp	r3, #1
 801dcf2:	d806      	bhi.n	801dd02 <etharp_output_to_arp_index+0x32>
 801dcf4:	4b40      	ldr	r3, [pc, #256]	; (801ddf8 <etharp_output_to_arp_index+0x128>)
 801dcf6:	f240 22ee 	movw	r2, #750	; 0x2ee
 801dcfa:	4940      	ldr	r1, [pc, #256]	; (801ddfc <etharp_output_to_arp_index+0x12c>)
 801dcfc:	4840      	ldr	r0, [pc, #256]	; (801de00 <etharp_output_to_arp_index+0x130>)
 801dcfe:	f003 fd0b 	bl	8021718 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801dd02:	79fa      	ldrb	r2, [r7, #7]
 801dd04:	493b      	ldr	r1, [pc, #236]	; (801ddf4 <etharp_output_to_arp_index+0x124>)
 801dd06:	4613      	mov	r3, r2
 801dd08:	005b      	lsls	r3, r3, #1
 801dd0a:	4413      	add	r3, r2
 801dd0c:	00db      	lsls	r3, r3, #3
 801dd0e:	440b      	add	r3, r1
 801dd10:	3314      	adds	r3, #20
 801dd12:	781b      	ldrb	r3, [r3, #0]
 801dd14:	2b02      	cmp	r3, #2
 801dd16:	d153      	bne.n	801ddc0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801dd18:	79fa      	ldrb	r2, [r7, #7]
 801dd1a:	4936      	ldr	r1, [pc, #216]	; (801ddf4 <etharp_output_to_arp_index+0x124>)
 801dd1c:	4613      	mov	r3, r2
 801dd1e:	005b      	lsls	r3, r3, #1
 801dd20:	4413      	add	r3, r2
 801dd22:	00db      	lsls	r3, r3, #3
 801dd24:	440b      	add	r3, r1
 801dd26:	3312      	adds	r3, #18
 801dd28:	881b      	ldrh	r3, [r3, #0]
 801dd2a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801dd2e:	d919      	bls.n	801dd64 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801dd30:	79fa      	ldrb	r2, [r7, #7]
 801dd32:	4613      	mov	r3, r2
 801dd34:	005b      	lsls	r3, r3, #1
 801dd36:	4413      	add	r3, r2
 801dd38:	00db      	lsls	r3, r3, #3
 801dd3a:	4a2e      	ldr	r2, [pc, #184]	; (801ddf4 <etharp_output_to_arp_index+0x124>)
 801dd3c:	4413      	add	r3, r2
 801dd3e:	3304      	adds	r3, #4
 801dd40:	4619      	mov	r1, r3
 801dd42:	68f8      	ldr	r0, [r7, #12]
 801dd44:	f000 fb4c 	bl	801e3e0 <etharp_request>
 801dd48:	4603      	mov	r3, r0
 801dd4a:	2b00      	cmp	r3, #0
 801dd4c:	d138      	bne.n	801ddc0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801dd4e:	79fa      	ldrb	r2, [r7, #7]
 801dd50:	4928      	ldr	r1, [pc, #160]	; (801ddf4 <etharp_output_to_arp_index+0x124>)
 801dd52:	4613      	mov	r3, r2
 801dd54:	005b      	lsls	r3, r3, #1
 801dd56:	4413      	add	r3, r2
 801dd58:	00db      	lsls	r3, r3, #3
 801dd5a:	440b      	add	r3, r1
 801dd5c:	3314      	adds	r3, #20
 801dd5e:	2203      	movs	r2, #3
 801dd60:	701a      	strb	r2, [r3, #0]
 801dd62:	e02d      	b.n	801ddc0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801dd64:	79fa      	ldrb	r2, [r7, #7]
 801dd66:	4923      	ldr	r1, [pc, #140]	; (801ddf4 <etharp_output_to_arp_index+0x124>)
 801dd68:	4613      	mov	r3, r2
 801dd6a:	005b      	lsls	r3, r3, #1
 801dd6c:	4413      	add	r3, r2
 801dd6e:	00db      	lsls	r3, r3, #3
 801dd70:	440b      	add	r3, r1
 801dd72:	3312      	adds	r3, #18
 801dd74:	881b      	ldrh	r3, [r3, #0]
 801dd76:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801dd7a:	d321      	bcc.n	801ddc0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801dd7c:	79fa      	ldrb	r2, [r7, #7]
 801dd7e:	4613      	mov	r3, r2
 801dd80:	005b      	lsls	r3, r3, #1
 801dd82:	4413      	add	r3, r2
 801dd84:	00db      	lsls	r3, r3, #3
 801dd86:	4a1b      	ldr	r2, [pc, #108]	; (801ddf4 <etharp_output_to_arp_index+0x124>)
 801dd88:	4413      	add	r3, r2
 801dd8a:	1d19      	adds	r1, r3, #4
 801dd8c:	79fa      	ldrb	r2, [r7, #7]
 801dd8e:	4613      	mov	r3, r2
 801dd90:	005b      	lsls	r3, r3, #1
 801dd92:	4413      	add	r3, r2
 801dd94:	00db      	lsls	r3, r3, #3
 801dd96:	3308      	adds	r3, #8
 801dd98:	4a16      	ldr	r2, [pc, #88]	; (801ddf4 <etharp_output_to_arp_index+0x124>)
 801dd9a:	4413      	add	r3, r2
 801dd9c:	3304      	adds	r3, #4
 801dd9e:	461a      	mov	r2, r3
 801dda0:	68f8      	ldr	r0, [r7, #12]
 801dda2:	f000 fafb 	bl	801e39c <etharp_request_dst>
 801dda6:	4603      	mov	r3, r0
 801dda8:	2b00      	cmp	r3, #0
 801ddaa:	d109      	bne.n	801ddc0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801ddac:	79fa      	ldrb	r2, [r7, #7]
 801ddae:	4911      	ldr	r1, [pc, #68]	; (801ddf4 <etharp_output_to_arp_index+0x124>)
 801ddb0:	4613      	mov	r3, r2
 801ddb2:	005b      	lsls	r3, r3, #1
 801ddb4:	4413      	add	r3, r2
 801ddb6:	00db      	lsls	r3, r3, #3
 801ddb8:	440b      	add	r3, r1
 801ddba:	3314      	adds	r3, #20
 801ddbc:	2203      	movs	r2, #3
 801ddbe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801ddc0:	68fb      	ldr	r3, [r7, #12]
 801ddc2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801ddc6:	79fa      	ldrb	r2, [r7, #7]
 801ddc8:	4613      	mov	r3, r2
 801ddca:	005b      	lsls	r3, r3, #1
 801ddcc:	4413      	add	r3, r2
 801ddce:	00db      	lsls	r3, r3, #3
 801ddd0:	3308      	adds	r3, #8
 801ddd2:	4a08      	ldr	r2, [pc, #32]	; (801ddf4 <etharp_output_to_arp_index+0x124>)
 801ddd4:	4413      	add	r3, r2
 801ddd6:	3304      	adds	r3, #4
 801ddd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801dddc:	9200      	str	r2, [sp, #0]
 801ddde:	460a      	mov	r2, r1
 801dde0:	68b9      	ldr	r1, [r7, #8]
 801dde2:	68f8      	ldr	r0, [r7, #12]
 801dde4:	f001 feee 	bl	801fbc4 <ethernet_output>
 801dde8:	4603      	mov	r3, r0
}
 801ddea:	4618      	mov	r0, r3
 801ddec:	3710      	adds	r7, #16
 801ddee:	46bd      	mov	sp, r7
 801ddf0:	bd80      	pop	{r7, pc}
 801ddf2:	bf00      	nop
 801ddf4:	200123e4 	.word	0x200123e4
 801ddf8:	08026adc 	.word	0x08026adc
 801ddfc:	08026c4c 	.word	0x08026c4c
 801de00:	08026b54 	.word	0x08026b54

0801de04 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801de04:	b580      	push	{r7, lr}
 801de06:	b08a      	sub	sp, #40	; 0x28
 801de08:	af02      	add	r7, sp, #8
 801de0a:	60f8      	str	r0, [r7, #12]
 801de0c:	60b9      	str	r1, [r7, #8]
 801de0e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801de10:	687b      	ldr	r3, [r7, #4]
 801de12:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801de14:	68fb      	ldr	r3, [r7, #12]
 801de16:	2b00      	cmp	r3, #0
 801de18:	d106      	bne.n	801de28 <etharp_output+0x24>
 801de1a:	4b73      	ldr	r3, [pc, #460]	; (801dfe8 <etharp_output+0x1e4>)
 801de1c:	f240 321e 	movw	r2, #798	; 0x31e
 801de20:	4972      	ldr	r1, [pc, #456]	; (801dfec <etharp_output+0x1e8>)
 801de22:	4873      	ldr	r0, [pc, #460]	; (801dff0 <etharp_output+0x1ec>)
 801de24:	f003 fc78 	bl	8021718 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801de28:	68bb      	ldr	r3, [r7, #8]
 801de2a:	2b00      	cmp	r3, #0
 801de2c:	d106      	bne.n	801de3c <etharp_output+0x38>
 801de2e:	4b6e      	ldr	r3, [pc, #440]	; (801dfe8 <etharp_output+0x1e4>)
 801de30:	f240 321f 	movw	r2, #799	; 0x31f
 801de34:	496f      	ldr	r1, [pc, #444]	; (801dff4 <etharp_output+0x1f0>)
 801de36:	486e      	ldr	r0, [pc, #440]	; (801dff0 <etharp_output+0x1ec>)
 801de38:	f003 fc6e 	bl	8021718 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801de3c:	687b      	ldr	r3, [r7, #4]
 801de3e:	2b00      	cmp	r3, #0
 801de40:	d106      	bne.n	801de50 <etharp_output+0x4c>
 801de42:	4b69      	ldr	r3, [pc, #420]	; (801dfe8 <etharp_output+0x1e4>)
 801de44:	f44f 7248 	mov.w	r2, #800	; 0x320
 801de48:	496b      	ldr	r1, [pc, #428]	; (801dff8 <etharp_output+0x1f4>)
 801de4a:	4869      	ldr	r0, [pc, #420]	; (801dff0 <etharp_output+0x1ec>)
 801de4c:	f003 fc64 	bl	8021718 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801de50:	687b      	ldr	r3, [r7, #4]
 801de52:	681b      	ldr	r3, [r3, #0]
 801de54:	68f9      	ldr	r1, [r7, #12]
 801de56:	4618      	mov	r0, r3
 801de58:	f000 ff16 	bl	801ec88 <ip4_addr_isbroadcast_u32>
 801de5c:	4603      	mov	r3, r0
 801de5e:	2b00      	cmp	r3, #0
 801de60:	d002      	beq.n	801de68 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801de62:	4b66      	ldr	r3, [pc, #408]	; (801dffc <etharp_output+0x1f8>)
 801de64:	61fb      	str	r3, [r7, #28]
 801de66:	e0af      	b.n	801dfc8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801de68:	687b      	ldr	r3, [r7, #4]
 801de6a:	681b      	ldr	r3, [r3, #0]
 801de6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801de70:	2be0      	cmp	r3, #224	; 0xe0
 801de72:	d118      	bne.n	801dea6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801de74:	2301      	movs	r3, #1
 801de76:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801de78:	2300      	movs	r3, #0
 801de7a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801de7c:	235e      	movs	r3, #94	; 0x5e
 801de7e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801de80:	687b      	ldr	r3, [r7, #4]
 801de82:	3301      	adds	r3, #1
 801de84:	781b      	ldrb	r3, [r3, #0]
 801de86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801de8a:	b2db      	uxtb	r3, r3
 801de8c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801de8e:	687b      	ldr	r3, [r7, #4]
 801de90:	3302      	adds	r3, #2
 801de92:	781b      	ldrb	r3, [r3, #0]
 801de94:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801de96:	687b      	ldr	r3, [r7, #4]
 801de98:	3303      	adds	r3, #3
 801de9a:	781b      	ldrb	r3, [r3, #0]
 801de9c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801de9e:	f107 0310 	add.w	r3, r7, #16
 801dea2:	61fb      	str	r3, [r7, #28]
 801dea4:	e090      	b.n	801dfc8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801dea6:	687b      	ldr	r3, [r7, #4]
 801dea8:	681a      	ldr	r2, [r3, #0]
 801deaa:	68fb      	ldr	r3, [r7, #12]
 801deac:	3304      	adds	r3, #4
 801deae:	681b      	ldr	r3, [r3, #0]
 801deb0:	405a      	eors	r2, r3
 801deb2:	68fb      	ldr	r3, [r7, #12]
 801deb4:	3308      	adds	r3, #8
 801deb6:	681b      	ldr	r3, [r3, #0]
 801deb8:	4013      	ands	r3, r2
 801deba:	2b00      	cmp	r3, #0
 801debc:	d012      	beq.n	801dee4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801debe:	687b      	ldr	r3, [r7, #4]
 801dec0:	681b      	ldr	r3, [r3, #0]
 801dec2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801dec4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801dec8:	4293      	cmp	r3, r2
 801deca:	d00b      	beq.n	801dee4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801decc:	68fb      	ldr	r3, [r7, #12]
 801dece:	330c      	adds	r3, #12
 801ded0:	681b      	ldr	r3, [r3, #0]
 801ded2:	2b00      	cmp	r3, #0
 801ded4:	d003      	beq.n	801dede <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801ded6:	68fb      	ldr	r3, [r7, #12]
 801ded8:	330c      	adds	r3, #12
 801deda:	61bb      	str	r3, [r7, #24]
 801dedc:	e002      	b.n	801dee4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801dede:	f06f 0303 	mvn.w	r3, #3
 801dee2:	e07d      	b.n	801dfe0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801dee4:	4b46      	ldr	r3, [pc, #280]	; (801e000 <etharp_output+0x1fc>)
 801dee6:	781b      	ldrb	r3, [r3, #0]
 801dee8:	4619      	mov	r1, r3
 801deea:	4a46      	ldr	r2, [pc, #280]	; (801e004 <etharp_output+0x200>)
 801deec:	460b      	mov	r3, r1
 801deee:	005b      	lsls	r3, r3, #1
 801def0:	440b      	add	r3, r1
 801def2:	00db      	lsls	r3, r3, #3
 801def4:	4413      	add	r3, r2
 801def6:	3314      	adds	r3, #20
 801def8:	781b      	ldrb	r3, [r3, #0]
 801defa:	2b01      	cmp	r3, #1
 801defc:	d925      	bls.n	801df4a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801defe:	4b40      	ldr	r3, [pc, #256]	; (801e000 <etharp_output+0x1fc>)
 801df00:	781b      	ldrb	r3, [r3, #0]
 801df02:	4619      	mov	r1, r3
 801df04:	4a3f      	ldr	r2, [pc, #252]	; (801e004 <etharp_output+0x200>)
 801df06:	460b      	mov	r3, r1
 801df08:	005b      	lsls	r3, r3, #1
 801df0a:	440b      	add	r3, r1
 801df0c:	00db      	lsls	r3, r3, #3
 801df0e:	4413      	add	r3, r2
 801df10:	3308      	adds	r3, #8
 801df12:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801df14:	68fa      	ldr	r2, [r7, #12]
 801df16:	429a      	cmp	r2, r3
 801df18:	d117      	bne.n	801df4a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801df1a:	69bb      	ldr	r3, [r7, #24]
 801df1c:	681a      	ldr	r2, [r3, #0]
 801df1e:	4b38      	ldr	r3, [pc, #224]	; (801e000 <etharp_output+0x1fc>)
 801df20:	781b      	ldrb	r3, [r3, #0]
 801df22:	4618      	mov	r0, r3
 801df24:	4937      	ldr	r1, [pc, #220]	; (801e004 <etharp_output+0x200>)
 801df26:	4603      	mov	r3, r0
 801df28:	005b      	lsls	r3, r3, #1
 801df2a:	4403      	add	r3, r0
 801df2c:	00db      	lsls	r3, r3, #3
 801df2e:	440b      	add	r3, r1
 801df30:	3304      	adds	r3, #4
 801df32:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801df34:	429a      	cmp	r2, r3
 801df36:	d108      	bne.n	801df4a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801df38:	4b31      	ldr	r3, [pc, #196]	; (801e000 <etharp_output+0x1fc>)
 801df3a:	781b      	ldrb	r3, [r3, #0]
 801df3c:	461a      	mov	r2, r3
 801df3e:	68b9      	ldr	r1, [r7, #8]
 801df40:	68f8      	ldr	r0, [r7, #12]
 801df42:	f7ff fec5 	bl	801dcd0 <etharp_output_to_arp_index>
 801df46:	4603      	mov	r3, r0
 801df48:	e04a      	b.n	801dfe0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801df4a:	2300      	movs	r3, #0
 801df4c:	75fb      	strb	r3, [r7, #23]
 801df4e:	e031      	b.n	801dfb4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801df50:	7dfa      	ldrb	r2, [r7, #23]
 801df52:	492c      	ldr	r1, [pc, #176]	; (801e004 <etharp_output+0x200>)
 801df54:	4613      	mov	r3, r2
 801df56:	005b      	lsls	r3, r3, #1
 801df58:	4413      	add	r3, r2
 801df5a:	00db      	lsls	r3, r3, #3
 801df5c:	440b      	add	r3, r1
 801df5e:	3314      	adds	r3, #20
 801df60:	781b      	ldrb	r3, [r3, #0]
 801df62:	2b01      	cmp	r3, #1
 801df64:	d923      	bls.n	801dfae <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801df66:	7dfa      	ldrb	r2, [r7, #23]
 801df68:	4926      	ldr	r1, [pc, #152]	; (801e004 <etharp_output+0x200>)
 801df6a:	4613      	mov	r3, r2
 801df6c:	005b      	lsls	r3, r3, #1
 801df6e:	4413      	add	r3, r2
 801df70:	00db      	lsls	r3, r3, #3
 801df72:	440b      	add	r3, r1
 801df74:	3308      	adds	r3, #8
 801df76:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801df78:	68fa      	ldr	r2, [r7, #12]
 801df7a:	429a      	cmp	r2, r3
 801df7c:	d117      	bne.n	801dfae <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801df7e:	69bb      	ldr	r3, [r7, #24]
 801df80:	6819      	ldr	r1, [r3, #0]
 801df82:	7dfa      	ldrb	r2, [r7, #23]
 801df84:	481f      	ldr	r0, [pc, #124]	; (801e004 <etharp_output+0x200>)
 801df86:	4613      	mov	r3, r2
 801df88:	005b      	lsls	r3, r3, #1
 801df8a:	4413      	add	r3, r2
 801df8c:	00db      	lsls	r3, r3, #3
 801df8e:	4403      	add	r3, r0
 801df90:	3304      	adds	r3, #4
 801df92:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801df94:	4299      	cmp	r1, r3
 801df96:	d10a      	bne.n	801dfae <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801df98:	4a19      	ldr	r2, [pc, #100]	; (801e000 <etharp_output+0x1fc>)
 801df9a:	7dfb      	ldrb	r3, [r7, #23]
 801df9c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801df9e:	7dfb      	ldrb	r3, [r7, #23]
 801dfa0:	461a      	mov	r2, r3
 801dfa2:	68b9      	ldr	r1, [r7, #8]
 801dfa4:	68f8      	ldr	r0, [r7, #12]
 801dfa6:	f7ff fe93 	bl	801dcd0 <etharp_output_to_arp_index>
 801dfaa:	4603      	mov	r3, r0
 801dfac:	e018      	b.n	801dfe0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801dfae:	7dfb      	ldrb	r3, [r7, #23]
 801dfb0:	3301      	adds	r3, #1
 801dfb2:	75fb      	strb	r3, [r7, #23]
 801dfb4:	7dfb      	ldrb	r3, [r7, #23]
 801dfb6:	2b09      	cmp	r3, #9
 801dfb8:	d9ca      	bls.n	801df50 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801dfba:	68ba      	ldr	r2, [r7, #8]
 801dfbc:	69b9      	ldr	r1, [r7, #24]
 801dfbe:	68f8      	ldr	r0, [r7, #12]
 801dfc0:	f000 f822 	bl	801e008 <etharp_query>
 801dfc4:	4603      	mov	r3, r0
 801dfc6:	e00b      	b.n	801dfe0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801dfc8:	68fb      	ldr	r3, [r7, #12]
 801dfca:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801dfce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801dfd2:	9300      	str	r3, [sp, #0]
 801dfd4:	69fb      	ldr	r3, [r7, #28]
 801dfd6:	68b9      	ldr	r1, [r7, #8]
 801dfd8:	68f8      	ldr	r0, [r7, #12]
 801dfda:	f001 fdf3 	bl	801fbc4 <ethernet_output>
 801dfde:	4603      	mov	r3, r0
}
 801dfe0:	4618      	mov	r0, r3
 801dfe2:	3720      	adds	r7, #32
 801dfe4:	46bd      	mov	sp, r7
 801dfe6:	bd80      	pop	{r7, pc}
 801dfe8:	08026adc 	.word	0x08026adc
 801dfec:	08026c2c 	.word	0x08026c2c
 801dff0:	08026b54 	.word	0x08026b54
 801dff4:	08026c7c 	.word	0x08026c7c
 801dff8:	08026c1c 	.word	0x08026c1c
 801dffc:	08027408 	.word	0x08027408
 801e000:	200124d4 	.word	0x200124d4
 801e004:	200123e4 	.word	0x200123e4

0801e008 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801e008:	b580      	push	{r7, lr}
 801e00a:	b08c      	sub	sp, #48	; 0x30
 801e00c:	af02      	add	r7, sp, #8
 801e00e:	60f8      	str	r0, [r7, #12]
 801e010:	60b9      	str	r1, [r7, #8]
 801e012:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801e014:	68fb      	ldr	r3, [r7, #12]
 801e016:	332a      	adds	r3, #42	; 0x2a
 801e018:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801e01a:	23ff      	movs	r3, #255	; 0xff
 801e01c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801e020:	2300      	movs	r3, #0
 801e022:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801e024:	68bb      	ldr	r3, [r7, #8]
 801e026:	681b      	ldr	r3, [r3, #0]
 801e028:	68f9      	ldr	r1, [r7, #12]
 801e02a:	4618      	mov	r0, r3
 801e02c:	f000 fe2c 	bl	801ec88 <ip4_addr_isbroadcast_u32>
 801e030:	4603      	mov	r3, r0
 801e032:	2b00      	cmp	r3, #0
 801e034:	d10c      	bne.n	801e050 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801e036:	68bb      	ldr	r3, [r7, #8]
 801e038:	681b      	ldr	r3, [r3, #0]
 801e03a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801e03e:	2be0      	cmp	r3, #224	; 0xe0
 801e040:	d006      	beq.n	801e050 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801e042:	68bb      	ldr	r3, [r7, #8]
 801e044:	2b00      	cmp	r3, #0
 801e046:	d003      	beq.n	801e050 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801e048:	68bb      	ldr	r3, [r7, #8]
 801e04a:	681b      	ldr	r3, [r3, #0]
 801e04c:	2b00      	cmp	r3, #0
 801e04e:	d102      	bne.n	801e056 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801e050:	f06f 030f 	mvn.w	r3, #15
 801e054:	e101      	b.n	801e25a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801e056:	68fa      	ldr	r2, [r7, #12]
 801e058:	2101      	movs	r1, #1
 801e05a:	68b8      	ldr	r0, [r7, #8]
 801e05c:	f7ff fb5c 	bl	801d718 <etharp_find_entry>
 801e060:	4603      	mov	r3, r0
 801e062:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801e064:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801e068:	2b00      	cmp	r3, #0
 801e06a:	da02      	bge.n	801e072 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801e06c:	8a7b      	ldrh	r3, [r7, #18]
 801e06e:	b25b      	sxtb	r3, r3
 801e070:	e0f3      	b.n	801e25a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801e072:	8a7b      	ldrh	r3, [r7, #18]
 801e074:	2b7e      	cmp	r3, #126	; 0x7e
 801e076:	d906      	bls.n	801e086 <etharp_query+0x7e>
 801e078:	4b7a      	ldr	r3, [pc, #488]	; (801e264 <etharp_query+0x25c>)
 801e07a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801e07e:	497a      	ldr	r1, [pc, #488]	; (801e268 <etharp_query+0x260>)
 801e080:	487a      	ldr	r0, [pc, #488]	; (801e26c <etharp_query+0x264>)
 801e082:	f003 fb49 	bl	8021718 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801e086:	8a7b      	ldrh	r3, [r7, #18]
 801e088:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801e08a:	7c7a      	ldrb	r2, [r7, #17]
 801e08c:	4978      	ldr	r1, [pc, #480]	; (801e270 <etharp_query+0x268>)
 801e08e:	4613      	mov	r3, r2
 801e090:	005b      	lsls	r3, r3, #1
 801e092:	4413      	add	r3, r2
 801e094:	00db      	lsls	r3, r3, #3
 801e096:	440b      	add	r3, r1
 801e098:	3314      	adds	r3, #20
 801e09a:	781b      	ldrb	r3, [r3, #0]
 801e09c:	2b00      	cmp	r3, #0
 801e09e:	d115      	bne.n	801e0cc <etharp_query+0xc4>
    is_new_entry = 1;
 801e0a0:	2301      	movs	r3, #1
 801e0a2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801e0a4:	7c7a      	ldrb	r2, [r7, #17]
 801e0a6:	4972      	ldr	r1, [pc, #456]	; (801e270 <etharp_query+0x268>)
 801e0a8:	4613      	mov	r3, r2
 801e0aa:	005b      	lsls	r3, r3, #1
 801e0ac:	4413      	add	r3, r2
 801e0ae:	00db      	lsls	r3, r3, #3
 801e0b0:	440b      	add	r3, r1
 801e0b2:	3314      	adds	r3, #20
 801e0b4:	2201      	movs	r2, #1
 801e0b6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801e0b8:	7c7a      	ldrb	r2, [r7, #17]
 801e0ba:	496d      	ldr	r1, [pc, #436]	; (801e270 <etharp_query+0x268>)
 801e0bc:	4613      	mov	r3, r2
 801e0be:	005b      	lsls	r3, r3, #1
 801e0c0:	4413      	add	r3, r2
 801e0c2:	00db      	lsls	r3, r3, #3
 801e0c4:	440b      	add	r3, r1
 801e0c6:	3308      	adds	r3, #8
 801e0c8:	68fa      	ldr	r2, [r7, #12]
 801e0ca:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801e0cc:	7c7a      	ldrb	r2, [r7, #17]
 801e0ce:	4968      	ldr	r1, [pc, #416]	; (801e270 <etharp_query+0x268>)
 801e0d0:	4613      	mov	r3, r2
 801e0d2:	005b      	lsls	r3, r3, #1
 801e0d4:	4413      	add	r3, r2
 801e0d6:	00db      	lsls	r3, r3, #3
 801e0d8:	440b      	add	r3, r1
 801e0da:	3314      	adds	r3, #20
 801e0dc:	781b      	ldrb	r3, [r3, #0]
 801e0de:	2b01      	cmp	r3, #1
 801e0e0:	d011      	beq.n	801e106 <etharp_query+0xfe>
 801e0e2:	7c7a      	ldrb	r2, [r7, #17]
 801e0e4:	4962      	ldr	r1, [pc, #392]	; (801e270 <etharp_query+0x268>)
 801e0e6:	4613      	mov	r3, r2
 801e0e8:	005b      	lsls	r3, r3, #1
 801e0ea:	4413      	add	r3, r2
 801e0ec:	00db      	lsls	r3, r3, #3
 801e0ee:	440b      	add	r3, r1
 801e0f0:	3314      	adds	r3, #20
 801e0f2:	781b      	ldrb	r3, [r3, #0]
 801e0f4:	2b01      	cmp	r3, #1
 801e0f6:	d806      	bhi.n	801e106 <etharp_query+0xfe>
 801e0f8:	4b5a      	ldr	r3, [pc, #360]	; (801e264 <etharp_query+0x25c>)
 801e0fa:	f240 32cd 	movw	r2, #973	; 0x3cd
 801e0fe:	495d      	ldr	r1, [pc, #372]	; (801e274 <etharp_query+0x26c>)
 801e100:	485a      	ldr	r0, [pc, #360]	; (801e26c <etharp_query+0x264>)
 801e102:	f003 fb09 	bl	8021718 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801e106:	6a3b      	ldr	r3, [r7, #32]
 801e108:	2b00      	cmp	r3, #0
 801e10a:	d102      	bne.n	801e112 <etharp_query+0x10a>
 801e10c:	687b      	ldr	r3, [r7, #4]
 801e10e:	2b00      	cmp	r3, #0
 801e110:	d10c      	bne.n	801e12c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801e112:	68b9      	ldr	r1, [r7, #8]
 801e114:	68f8      	ldr	r0, [r7, #12]
 801e116:	f000 f963 	bl	801e3e0 <etharp_request>
 801e11a:	4603      	mov	r3, r0
 801e11c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	2b00      	cmp	r3, #0
 801e124:	d102      	bne.n	801e12c <etharp_query+0x124>
      return result;
 801e126:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801e12a:	e096      	b.n	801e25a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801e12c:	687b      	ldr	r3, [r7, #4]
 801e12e:	2b00      	cmp	r3, #0
 801e130:	d106      	bne.n	801e140 <etharp_query+0x138>
 801e132:	4b4c      	ldr	r3, [pc, #304]	; (801e264 <etharp_query+0x25c>)
 801e134:	f240 32e1 	movw	r2, #993	; 0x3e1
 801e138:	494f      	ldr	r1, [pc, #316]	; (801e278 <etharp_query+0x270>)
 801e13a:	484c      	ldr	r0, [pc, #304]	; (801e26c <etharp_query+0x264>)
 801e13c:	f003 faec 	bl	8021718 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801e140:	7c7a      	ldrb	r2, [r7, #17]
 801e142:	494b      	ldr	r1, [pc, #300]	; (801e270 <etharp_query+0x268>)
 801e144:	4613      	mov	r3, r2
 801e146:	005b      	lsls	r3, r3, #1
 801e148:	4413      	add	r3, r2
 801e14a:	00db      	lsls	r3, r3, #3
 801e14c:	440b      	add	r3, r1
 801e14e:	3314      	adds	r3, #20
 801e150:	781b      	ldrb	r3, [r3, #0]
 801e152:	2b01      	cmp	r3, #1
 801e154:	d917      	bls.n	801e186 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801e156:	4a49      	ldr	r2, [pc, #292]	; (801e27c <etharp_query+0x274>)
 801e158:	7c7b      	ldrb	r3, [r7, #17]
 801e15a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801e15c:	7c7a      	ldrb	r2, [r7, #17]
 801e15e:	4613      	mov	r3, r2
 801e160:	005b      	lsls	r3, r3, #1
 801e162:	4413      	add	r3, r2
 801e164:	00db      	lsls	r3, r3, #3
 801e166:	3308      	adds	r3, #8
 801e168:	4a41      	ldr	r2, [pc, #260]	; (801e270 <etharp_query+0x268>)
 801e16a:	4413      	add	r3, r2
 801e16c:	3304      	adds	r3, #4
 801e16e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e172:	9200      	str	r2, [sp, #0]
 801e174:	697a      	ldr	r2, [r7, #20]
 801e176:	6879      	ldr	r1, [r7, #4]
 801e178:	68f8      	ldr	r0, [r7, #12]
 801e17a:	f001 fd23 	bl	801fbc4 <ethernet_output>
 801e17e:	4603      	mov	r3, r0
 801e180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801e184:	e067      	b.n	801e256 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801e186:	7c7a      	ldrb	r2, [r7, #17]
 801e188:	4939      	ldr	r1, [pc, #228]	; (801e270 <etharp_query+0x268>)
 801e18a:	4613      	mov	r3, r2
 801e18c:	005b      	lsls	r3, r3, #1
 801e18e:	4413      	add	r3, r2
 801e190:	00db      	lsls	r3, r3, #3
 801e192:	440b      	add	r3, r1
 801e194:	3314      	adds	r3, #20
 801e196:	781b      	ldrb	r3, [r3, #0]
 801e198:	2b01      	cmp	r3, #1
 801e19a:	d15c      	bne.n	801e256 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801e19c:	2300      	movs	r3, #0
 801e19e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801e1a0:	687b      	ldr	r3, [r7, #4]
 801e1a2:	61fb      	str	r3, [r7, #28]
    while (p) {
 801e1a4:	e01c      	b.n	801e1e0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801e1a6:	69fb      	ldr	r3, [r7, #28]
 801e1a8:	895a      	ldrh	r2, [r3, #10]
 801e1aa:	69fb      	ldr	r3, [r7, #28]
 801e1ac:	891b      	ldrh	r3, [r3, #8]
 801e1ae:	429a      	cmp	r2, r3
 801e1b0:	d10a      	bne.n	801e1c8 <etharp_query+0x1c0>
 801e1b2:	69fb      	ldr	r3, [r7, #28]
 801e1b4:	681b      	ldr	r3, [r3, #0]
 801e1b6:	2b00      	cmp	r3, #0
 801e1b8:	d006      	beq.n	801e1c8 <etharp_query+0x1c0>
 801e1ba:	4b2a      	ldr	r3, [pc, #168]	; (801e264 <etharp_query+0x25c>)
 801e1bc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801e1c0:	492f      	ldr	r1, [pc, #188]	; (801e280 <etharp_query+0x278>)
 801e1c2:	482a      	ldr	r0, [pc, #168]	; (801e26c <etharp_query+0x264>)
 801e1c4:	f003 faa8 	bl	8021718 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801e1c8:	69fb      	ldr	r3, [r7, #28]
 801e1ca:	7b1b      	ldrb	r3, [r3, #12]
 801e1cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e1d0:	2b00      	cmp	r3, #0
 801e1d2:	d002      	beq.n	801e1da <etharp_query+0x1d2>
        copy_needed = 1;
 801e1d4:	2301      	movs	r3, #1
 801e1d6:	61bb      	str	r3, [r7, #24]
        break;
 801e1d8:	e005      	b.n	801e1e6 <etharp_query+0x1de>
      }
      p = p->next;
 801e1da:	69fb      	ldr	r3, [r7, #28]
 801e1dc:	681b      	ldr	r3, [r3, #0]
 801e1de:	61fb      	str	r3, [r7, #28]
    while (p) {
 801e1e0:	69fb      	ldr	r3, [r7, #28]
 801e1e2:	2b00      	cmp	r3, #0
 801e1e4:	d1df      	bne.n	801e1a6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801e1e6:	69bb      	ldr	r3, [r7, #24]
 801e1e8:	2b00      	cmp	r3, #0
 801e1ea:	d007      	beq.n	801e1fc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801e1ec:	687a      	ldr	r2, [r7, #4]
 801e1ee:	f44f 7120 	mov.w	r1, #640	; 0x280
 801e1f2:	200e      	movs	r0, #14
 801e1f4:	f7f6 fbc4 	bl	8014980 <pbuf_clone>
 801e1f8:	61f8      	str	r0, [r7, #28]
 801e1fa:	e004      	b.n	801e206 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801e1fc:	687b      	ldr	r3, [r7, #4]
 801e1fe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801e200:	69f8      	ldr	r0, [r7, #28]
 801e202:	f7f6 f9eb 	bl	80145dc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801e206:	69fb      	ldr	r3, [r7, #28]
 801e208:	2b00      	cmp	r3, #0
 801e20a:	d021      	beq.n	801e250 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801e20c:	7c7a      	ldrb	r2, [r7, #17]
 801e20e:	4918      	ldr	r1, [pc, #96]	; (801e270 <etharp_query+0x268>)
 801e210:	4613      	mov	r3, r2
 801e212:	005b      	lsls	r3, r3, #1
 801e214:	4413      	add	r3, r2
 801e216:	00db      	lsls	r3, r3, #3
 801e218:	440b      	add	r3, r1
 801e21a:	681b      	ldr	r3, [r3, #0]
 801e21c:	2b00      	cmp	r3, #0
 801e21e:	d00a      	beq.n	801e236 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801e220:	7c7a      	ldrb	r2, [r7, #17]
 801e222:	4913      	ldr	r1, [pc, #76]	; (801e270 <etharp_query+0x268>)
 801e224:	4613      	mov	r3, r2
 801e226:	005b      	lsls	r3, r3, #1
 801e228:	4413      	add	r3, r2
 801e22a:	00db      	lsls	r3, r3, #3
 801e22c:	440b      	add	r3, r1
 801e22e:	681b      	ldr	r3, [r3, #0]
 801e230:	4618      	mov	r0, r3
 801e232:	f7f6 f92d 	bl	8014490 <pbuf_free>
      }
      arp_table[i].q = p;
 801e236:	7c7a      	ldrb	r2, [r7, #17]
 801e238:	490d      	ldr	r1, [pc, #52]	; (801e270 <etharp_query+0x268>)
 801e23a:	4613      	mov	r3, r2
 801e23c:	005b      	lsls	r3, r3, #1
 801e23e:	4413      	add	r3, r2
 801e240:	00db      	lsls	r3, r3, #3
 801e242:	440b      	add	r3, r1
 801e244:	69fa      	ldr	r2, [r7, #28]
 801e246:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801e248:	2300      	movs	r3, #0
 801e24a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801e24e:	e002      	b.n	801e256 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801e250:	23ff      	movs	r3, #255	; 0xff
 801e252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801e256:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801e25a:	4618      	mov	r0, r3
 801e25c:	3728      	adds	r7, #40	; 0x28
 801e25e:	46bd      	mov	sp, r7
 801e260:	bd80      	pop	{r7, pc}
 801e262:	bf00      	nop
 801e264:	08026adc 	.word	0x08026adc
 801e268:	08026c88 	.word	0x08026c88
 801e26c:	08026b54 	.word	0x08026b54
 801e270:	200123e4 	.word	0x200123e4
 801e274:	08026c98 	.word	0x08026c98
 801e278:	08026c7c 	.word	0x08026c7c
 801e27c:	200124d4 	.word	0x200124d4
 801e280:	08026cc0 	.word	0x08026cc0

0801e284 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801e284:	b580      	push	{r7, lr}
 801e286:	b08a      	sub	sp, #40	; 0x28
 801e288:	af02      	add	r7, sp, #8
 801e28a:	60f8      	str	r0, [r7, #12]
 801e28c:	60b9      	str	r1, [r7, #8]
 801e28e:	607a      	str	r2, [r7, #4]
 801e290:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801e292:	2300      	movs	r3, #0
 801e294:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801e296:	68fb      	ldr	r3, [r7, #12]
 801e298:	2b00      	cmp	r3, #0
 801e29a:	d106      	bne.n	801e2aa <etharp_raw+0x26>
 801e29c:	4b3a      	ldr	r3, [pc, #232]	; (801e388 <etharp_raw+0x104>)
 801e29e:	f240 4257 	movw	r2, #1111	; 0x457
 801e2a2:	493a      	ldr	r1, [pc, #232]	; (801e38c <etharp_raw+0x108>)
 801e2a4:	483a      	ldr	r0, [pc, #232]	; (801e390 <etharp_raw+0x10c>)
 801e2a6:	f003 fa37 	bl	8021718 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801e2aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e2ae:	211c      	movs	r1, #28
 801e2b0:	200e      	movs	r0, #14
 801e2b2:	f7f5 fe09 	bl	8013ec8 <pbuf_alloc>
 801e2b6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801e2b8:	69bb      	ldr	r3, [r7, #24]
 801e2ba:	2b00      	cmp	r3, #0
 801e2bc:	d102      	bne.n	801e2c4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801e2be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e2c2:	e05d      	b.n	801e380 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801e2c4:	69bb      	ldr	r3, [r7, #24]
 801e2c6:	895b      	ldrh	r3, [r3, #10]
 801e2c8:	2b1b      	cmp	r3, #27
 801e2ca:	d806      	bhi.n	801e2da <etharp_raw+0x56>
 801e2cc:	4b2e      	ldr	r3, [pc, #184]	; (801e388 <etharp_raw+0x104>)
 801e2ce:	f240 4262 	movw	r2, #1122	; 0x462
 801e2d2:	4930      	ldr	r1, [pc, #192]	; (801e394 <etharp_raw+0x110>)
 801e2d4:	482e      	ldr	r0, [pc, #184]	; (801e390 <etharp_raw+0x10c>)
 801e2d6:	f003 fa1f 	bl	8021718 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801e2da:	69bb      	ldr	r3, [r7, #24]
 801e2dc:	685b      	ldr	r3, [r3, #4]
 801e2de:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801e2e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801e2e2:	4618      	mov	r0, r3
 801e2e4:	f7f4 fcd6 	bl	8012c94 <lwip_htons>
 801e2e8:	4603      	mov	r3, r0
 801e2ea:	461a      	mov	r2, r3
 801e2ec:	697b      	ldr	r3, [r7, #20]
 801e2ee:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801e2f0:	68fb      	ldr	r3, [r7, #12]
 801e2f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e2f6:	2b06      	cmp	r3, #6
 801e2f8:	d006      	beq.n	801e308 <etharp_raw+0x84>
 801e2fa:	4b23      	ldr	r3, [pc, #140]	; (801e388 <etharp_raw+0x104>)
 801e2fc:	f240 4269 	movw	r2, #1129	; 0x469
 801e300:	4925      	ldr	r1, [pc, #148]	; (801e398 <etharp_raw+0x114>)
 801e302:	4823      	ldr	r0, [pc, #140]	; (801e390 <etharp_raw+0x10c>)
 801e304:	f003 fa08 	bl	8021718 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801e308:	697b      	ldr	r3, [r7, #20]
 801e30a:	3308      	adds	r3, #8
 801e30c:	2206      	movs	r2, #6
 801e30e:	6839      	ldr	r1, [r7, #0]
 801e310:	4618      	mov	r0, r3
 801e312:	f003 fd28 	bl	8021d66 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801e316:	697b      	ldr	r3, [r7, #20]
 801e318:	3312      	adds	r3, #18
 801e31a:	2206      	movs	r2, #6
 801e31c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e31e:	4618      	mov	r0, r3
 801e320:	f003 fd21 	bl	8021d66 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801e324:	697b      	ldr	r3, [r7, #20]
 801e326:	330e      	adds	r3, #14
 801e328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e32a:	6812      	ldr	r2, [r2, #0]
 801e32c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801e32e:	697b      	ldr	r3, [r7, #20]
 801e330:	3318      	adds	r3, #24
 801e332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e334:	6812      	ldr	r2, [r2, #0]
 801e336:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801e338:	697b      	ldr	r3, [r7, #20]
 801e33a:	2200      	movs	r2, #0
 801e33c:	701a      	strb	r2, [r3, #0]
 801e33e:	2200      	movs	r2, #0
 801e340:	f042 0201 	orr.w	r2, r2, #1
 801e344:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801e346:	697b      	ldr	r3, [r7, #20]
 801e348:	2200      	movs	r2, #0
 801e34a:	f042 0208 	orr.w	r2, r2, #8
 801e34e:	709a      	strb	r2, [r3, #2]
 801e350:	2200      	movs	r2, #0
 801e352:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801e354:	697b      	ldr	r3, [r7, #20]
 801e356:	2206      	movs	r2, #6
 801e358:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801e35a:	697b      	ldr	r3, [r7, #20]
 801e35c:	2204      	movs	r2, #4
 801e35e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801e360:	f640 0306 	movw	r3, #2054	; 0x806
 801e364:	9300      	str	r3, [sp, #0]
 801e366:	687b      	ldr	r3, [r7, #4]
 801e368:	68ba      	ldr	r2, [r7, #8]
 801e36a:	69b9      	ldr	r1, [r7, #24]
 801e36c:	68f8      	ldr	r0, [r7, #12]
 801e36e:	f001 fc29 	bl	801fbc4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801e372:	69b8      	ldr	r0, [r7, #24]
 801e374:	f7f6 f88c 	bl	8014490 <pbuf_free>
  p = NULL;
 801e378:	2300      	movs	r3, #0
 801e37a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801e37c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e380:	4618      	mov	r0, r3
 801e382:	3720      	adds	r7, #32
 801e384:	46bd      	mov	sp, r7
 801e386:	bd80      	pop	{r7, pc}
 801e388:	08026adc 	.word	0x08026adc
 801e38c:	08026c2c 	.word	0x08026c2c
 801e390:	08026b54 	.word	0x08026b54
 801e394:	08026cdc 	.word	0x08026cdc
 801e398:	08026d10 	.word	0x08026d10

0801e39c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801e39c:	b580      	push	{r7, lr}
 801e39e:	b088      	sub	sp, #32
 801e3a0:	af04      	add	r7, sp, #16
 801e3a2:	60f8      	str	r0, [r7, #12]
 801e3a4:	60b9      	str	r1, [r7, #8]
 801e3a6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e3a8:	68fb      	ldr	r3, [r7, #12]
 801e3aa:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801e3ae:	68fb      	ldr	r3, [r7, #12]
 801e3b0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801e3b4:	68fb      	ldr	r3, [r7, #12]
 801e3b6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e3b8:	2201      	movs	r2, #1
 801e3ba:	9203      	str	r2, [sp, #12]
 801e3bc:	68ba      	ldr	r2, [r7, #8]
 801e3be:	9202      	str	r2, [sp, #8]
 801e3c0:	4a06      	ldr	r2, [pc, #24]	; (801e3dc <etharp_request_dst+0x40>)
 801e3c2:	9201      	str	r2, [sp, #4]
 801e3c4:	9300      	str	r3, [sp, #0]
 801e3c6:	4603      	mov	r3, r0
 801e3c8:	687a      	ldr	r2, [r7, #4]
 801e3ca:	68f8      	ldr	r0, [r7, #12]
 801e3cc:	f7ff ff5a 	bl	801e284 <etharp_raw>
 801e3d0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801e3d2:	4618      	mov	r0, r3
 801e3d4:	3710      	adds	r7, #16
 801e3d6:	46bd      	mov	sp, r7
 801e3d8:	bd80      	pop	{r7, pc}
 801e3da:	bf00      	nop
 801e3dc:	08027410 	.word	0x08027410

0801e3e0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801e3e0:	b580      	push	{r7, lr}
 801e3e2:	b082      	sub	sp, #8
 801e3e4:	af00      	add	r7, sp, #0
 801e3e6:	6078      	str	r0, [r7, #4]
 801e3e8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801e3ea:	4a05      	ldr	r2, [pc, #20]	; (801e400 <etharp_request+0x20>)
 801e3ec:	6839      	ldr	r1, [r7, #0]
 801e3ee:	6878      	ldr	r0, [r7, #4]
 801e3f0:	f7ff ffd4 	bl	801e39c <etharp_request_dst>
 801e3f4:	4603      	mov	r3, r0
}
 801e3f6:	4618      	mov	r0, r3
 801e3f8:	3708      	adds	r7, #8
 801e3fa:	46bd      	mov	sp, r7
 801e3fc:	bd80      	pop	{r7, pc}
 801e3fe:	bf00      	nop
 801e400:	08027408 	.word	0x08027408

0801e404 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801e404:	b580      	push	{r7, lr}
 801e406:	b08e      	sub	sp, #56	; 0x38
 801e408:	af04      	add	r7, sp, #16
 801e40a:	6078      	str	r0, [r7, #4]
 801e40c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801e40e:	4b79      	ldr	r3, [pc, #484]	; (801e5f4 <icmp_input+0x1f0>)
 801e410:	689b      	ldr	r3, [r3, #8]
 801e412:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801e414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e416:	781b      	ldrb	r3, [r3, #0]
 801e418:	f003 030f 	and.w	r3, r3, #15
 801e41c:	b2db      	uxtb	r3, r3
 801e41e:	009b      	lsls	r3, r3, #2
 801e420:	b2db      	uxtb	r3, r3
 801e422:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801e424:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e426:	2b13      	cmp	r3, #19
 801e428:	f240 80cd 	bls.w	801e5c6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801e42c:	687b      	ldr	r3, [r7, #4]
 801e42e:	895b      	ldrh	r3, [r3, #10]
 801e430:	2b03      	cmp	r3, #3
 801e432:	f240 80ca 	bls.w	801e5ca <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801e436:	687b      	ldr	r3, [r7, #4]
 801e438:	685b      	ldr	r3, [r3, #4]
 801e43a:	781b      	ldrb	r3, [r3, #0]
 801e43c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801e440:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801e444:	2b00      	cmp	r3, #0
 801e446:	f000 80b7 	beq.w	801e5b8 <icmp_input+0x1b4>
 801e44a:	2b08      	cmp	r3, #8
 801e44c:	f040 80b7 	bne.w	801e5be <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801e450:	4b69      	ldr	r3, [pc, #420]	; (801e5f8 <icmp_input+0x1f4>)
 801e452:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e454:	4b67      	ldr	r3, [pc, #412]	; (801e5f4 <icmp_input+0x1f0>)
 801e456:	695b      	ldr	r3, [r3, #20]
 801e458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801e45c:	2be0      	cmp	r3, #224	; 0xe0
 801e45e:	f000 80bb 	beq.w	801e5d8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801e462:	4b64      	ldr	r3, [pc, #400]	; (801e5f4 <icmp_input+0x1f0>)
 801e464:	695b      	ldr	r3, [r3, #20]
 801e466:	4a63      	ldr	r2, [pc, #396]	; (801e5f4 <icmp_input+0x1f0>)
 801e468:	6812      	ldr	r2, [r2, #0]
 801e46a:	4611      	mov	r1, r2
 801e46c:	4618      	mov	r0, r3
 801e46e:	f000 fc0b 	bl	801ec88 <ip4_addr_isbroadcast_u32>
 801e472:	4603      	mov	r3, r0
 801e474:	2b00      	cmp	r3, #0
 801e476:	f040 80b1 	bne.w	801e5dc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	891b      	ldrh	r3, [r3, #8]
 801e47e:	2b07      	cmp	r3, #7
 801e480:	f240 80a5 	bls.w	801e5ce <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801e484:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e486:	330e      	adds	r3, #14
 801e488:	4619      	mov	r1, r3
 801e48a:	6878      	ldr	r0, [r7, #4]
 801e48c:	f7f5 ff6a 	bl	8014364 <pbuf_add_header>
 801e490:	4603      	mov	r3, r0
 801e492:	2b00      	cmp	r3, #0
 801e494:	d04b      	beq.n	801e52e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801e496:	687b      	ldr	r3, [r7, #4]
 801e498:	891a      	ldrh	r2, [r3, #8]
 801e49a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e49c:	4413      	add	r3, r2
 801e49e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801e4a0:	687b      	ldr	r3, [r7, #4]
 801e4a2:	891b      	ldrh	r3, [r3, #8]
 801e4a4:	8b7a      	ldrh	r2, [r7, #26]
 801e4a6:	429a      	cmp	r2, r3
 801e4a8:	f0c0 809a 	bcc.w	801e5e0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801e4ac:	8b7b      	ldrh	r3, [r7, #26]
 801e4ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e4b2:	4619      	mov	r1, r3
 801e4b4:	200e      	movs	r0, #14
 801e4b6:	f7f5 fd07 	bl	8013ec8 <pbuf_alloc>
 801e4ba:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801e4bc:	697b      	ldr	r3, [r7, #20]
 801e4be:	2b00      	cmp	r3, #0
 801e4c0:	f000 8090 	beq.w	801e5e4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801e4c4:	697b      	ldr	r3, [r7, #20]
 801e4c6:	895b      	ldrh	r3, [r3, #10]
 801e4c8:	461a      	mov	r2, r3
 801e4ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e4cc:	3308      	adds	r3, #8
 801e4ce:	429a      	cmp	r2, r3
 801e4d0:	d203      	bcs.n	801e4da <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801e4d2:	6978      	ldr	r0, [r7, #20]
 801e4d4:	f7f5 ffdc 	bl	8014490 <pbuf_free>
          goto icmperr;
 801e4d8:	e085      	b.n	801e5e6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801e4da:	697b      	ldr	r3, [r7, #20]
 801e4dc:	685b      	ldr	r3, [r3, #4]
 801e4de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801e4e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e4e2:	4618      	mov	r0, r3
 801e4e4:	f003 fc3f 	bl	8021d66 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801e4e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e4ea:	4619      	mov	r1, r3
 801e4ec:	6978      	ldr	r0, [r7, #20]
 801e4ee:	f7f5 ff49 	bl	8014384 <pbuf_remove_header>
 801e4f2:	4603      	mov	r3, r0
 801e4f4:	2b00      	cmp	r3, #0
 801e4f6:	d009      	beq.n	801e50c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801e4f8:	4b40      	ldr	r3, [pc, #256]	; (801e5fc <icmp_input+0x1f8>)
 801e4fa:	22b6      	movs	r2, #182	; 0xb6
 801e4fc:	4940      	ldr	r1, [pc, #256]	; (801e600 <icmp_input+0x1fc>)
 801e4fe:	4841      	ldr	r0, [pc, #260]	; (801e604 <icmp_input+0x200>)
 801e500:	f003 f90a 	bl	8021718 <iprintf>
          pbuf_free(r);
 801e504:	6978      	ldr	r0, [r7, #20]
 801e506:	f7f5 ffc3 	bl	8014490 <pbuf_free>
          goto icmperr;
 801e50a:	e06c      	b.n	801e5e6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801e50c:	6879      	ldr	r1, [r7, #4]
 801e50e:	6978      	ldr	r0, [r7, #20]
 801e510:	f7f6 f8f2 	bl	80146f8 <pbuf_copy>
 801e514:	4603      	mov	r3, r0
 801e516:	2b00      	cmp	r3, #0
 801e518:	d003      	beq.n	801e522 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801e51a:	6978      	ldr	r0, [r7, #20]
 801e51c:	f7f5 ffb8 	bl	8014490 <pbuf_free>
          goto icmperr;
 801e520:	e061      	b.n	801e5e6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801e522:	6878      	ldr	r0, [r7, #4]
 801e524:	f7f5 ffb4 	bl	8014490 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801e528:	697b      	ldr	r3, [r7, #20]
 801e52a:	607b      	str	r3, [r7, #4]
 801e52c:	e00f      	b.n	801e54e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801e52e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e530:	330e      	adds	r3, #14
 801e532:	4619      	mov	r1, r3
 801e534:	6878      	ldr	r0, [r7, #4]
 801e536:	f7f5 ff25 	bl	8014384 <pbuf_remove_header>
 801e53a:	4603      	mov	r3, r0
 801e53c:	2b00      	cmp	r3, #0
 801e53e:	d006      	beq.n	801e54e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801e540:	4b2e      	ldr	r3, [pc, #184]	; (801e5fc <icmp_input+0x1f8>)
 801e542:	22c7      	movs	r2, #199	; 0xc7
 801e544:	4930      	ldr	r1, [pc, #192]	; (801e608 <icmp_input+0x204>)
 801e546:	482f      	ldr	r0, [pc, #188]	; (801e604 <icmp_input+0x200>)
 801e548:	f003 f8e6 	bl	8021718 <iprintf>
          goto icmperr;
 801e54c:	e04b      	b.n	801e5e6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801e54e:	687b      	ldr	r3, [r7, #4]
 801e550:	685b      	ldr	r3, [r3, #4]
 801e552:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801e554:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e556:	4619      	mov	r1, r3
 801e558:	6878      	ldr	r0, [r7, #4]
 801e55a:	f7f5 ff03 	bl	8014364 <pbuf_add_header>
 801e55e:	4603      	mov	r3, r0
 801e560:	2b00      	cmp	r3, #0
 801e562:	d12b      	bne.n	801e5bc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801e564:	687b      	ldr	r3, [r7, #4]
 801e566:	685b      	ldr	r3, [r3, #4]
 801e568:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801e56a:	69fb      	ldr	r3, [r7, #28]
 801e56c:	681a      	ldr	r2, [r3, #0]
 801e56e:	68fb      	ldr	r3, [r7, #12]
 801e570:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801e572:	4b20      	ldr	r3, [pc, #128]	; (801e5f4 <icmp_input+0x1f0>)
 801e574:	691a      	ldr	r2, [r3, #16]
 801e576:	68fb      	ldr	r3, [r7, #12]
 801e578:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801e57a:	693b      	ldr	r3, [r7, #16]
 801e57c:	2200      	movs	r2, #0
 801e57e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801e580:	693b      	ldr	r3, [r7, #16]
 801e582:	2200      	movs	r2, #0
 801e584:	709a      	strb	r2, [r3, #2]
 801e586:	2200      	movs	r2, #0
 801e588:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801e58a:	68fb      	ldr	r3, [r7, #12]
 801e58c:	22ff      	movs	r2, #255	; 0xff
 801e58e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801e590:	68fb      	ldr	r3, [r7, #12]
 801e592:	2200      	movs	r2, #0
 801e594:	729a      	strb	r2, [r3, #10]
 801e596:	2200      	movs	r2, #0
 801e598:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801e59a:	683b      	ldr	r3, [r7, #0]
 801e59c:	9302      	str	r3, [sp, #8]
 801e59e:	2301      	movs	r3, #1
 801e5a0:	9301      	str	r3, [sp, #4]
 801e5a2:	2300      	movs	r3, #0
 801e5a4:	9300      	str	r3, [sp, #0]
 801e5a6:	23ff      	movs	r3, #255	; 0xff
 801e5a8:	2200      	movs	r2, #0
 801e5aa:	69f9      	ldr	r1, [r7, #28]
 801e5ac:	6878      	ldr	r0, [r7, #4]
 801e5ae:	f000 fa93 	bl	801ead8 <ip4_output_if>
 801e5b2:	4603      	mov	r3, r0
 801e5b4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801e5b6:	e001      	b.n	801e5bc <icmp_input+0x1b8>
      break;
 801e5b8:	bf00      	nop
 801e5ba:	e000      	b.n	801e5be <icmp_input+0x1ba>
      break;
 801e5bc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801e5be:	6878      	ldr	r0, [r7, #4]
 801e5c0:	f7f5 ff66 	bl	8014490 <pbuf_free>
  return;
 801e5c4:	e013      	b.n	801e5ee <icmp_input+0x1ea>
    goto lenerr;
 801e5c6:	bf00      	nop
 801e5c8:	e002      	b.n	801e5d0 <icmp_input+0x1cc>
    goto lenerr;
 801e5ca:	bf00      	nop
 801e5cc:	e000      	b.n	801e5d0 <icmp_input+0x1cc>
        goto lenerr;
 801e5ce:	bf00      	nop
lenerr:
  pbuf_free(p);
 801e5d0:	6878      	ldr	r0, [r7, #4]
 801e5d2:	f7f5 ff5d 	bl	8014490 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801e5d6:	e00a      	b.n	801e5ee <icmp_input+0x1ea>
        goto icmperr;
 801e5d8:	bf00      	nop
 801e5da:	e004      	b.n	801e5e6 <icmp_input+0x1e2>
        goto icmperr;
 801e5dc:	bf00      	nop
 801e5de:	e002      	b.n	801e5e6 <icmp_input+0x1e2>
          goto icmperr;
 801e5e0:	bf00      	nop
 801e5e2:	e000      	b.n	801e5e6 <icmp_input+0x1e2>
          goto icmperr;
 801e5e4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801e5e6:	6878      	ldr	r0, [r7, #4]
 801e5e8:	f7f5 ff52 	bl	8014490 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801e5ec:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801e5ee:	3728      	adds	r7, #40	; 0x28
 801e5f0:	46bd      	mov	sp, r7
 801e5f2:	bd80      	pop	{r7, pc}
 801e5f4:	2000eba4 	.word	0x2000eba4
 801e5f8:	2000ebb8 	.word	0x2000ebb8
 801e5fc:	08026d54 	.word	0x08026d54
 801e600:	08026d8c 	.word	0x08026d8c
 801e604:	08026dc4 	.word	0x08026dc4
 801e608:	08026dec 	.word	0x08026dec

0801e60c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801e60c:	b580      	push	{r7, lr}
 801e60e:	b082      	sub	sp, #8
 801e610:	af00      	add	r7, sp, #0
 801e612:	6078      	str	r0, [r7, #4]
 801e614:	460b      	mov	r3, r1
 801e616:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801e618:	78fb      	ldrb	r3, [r7, #3]
 801e61a:	461a      	mov	r2, r3
 801e61c:	2103      	movs	r1, #3
 801e61e:	6878      	ldr	r0, [r7, #4]
 801e620:	f000 f814 	bl	801e64c <icmp_send_response>
}
 801e624:	bf00      	nop
 801e626:	3708      	adds	r7, #8
 801e628:	46bd      	mov	sp, r7
 801e62a:	bd80      	pop	{r7, pc}

0801e62c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801e62c:	b580      	push	{r7, lr}
 801e62e:	b082      	sub	sp, #8
 801e630:	af00      	add	r7, sp, #0
 801e632:	6078      	str	r0, [r7, #4]
 801e634:	460b      	mov	r3, r1
 801e636:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801e638:	78fb      	ldrb	r3, [r7, #3]
 801e63a:	461a      	mov	r2, r3
 801e63c:	210b      	movs	r1, #11
 801e63e:	6878      	ldr	r0, [r7, #4]
 801e640:	f000 f804 	bl	801e64c <icmp_send_response>
}
 801e644:	bf00      	nop
 801e646:	3708      	adds	r7, #8
 801e648:	46bd      	mov	sp, r7
 801e64a:	bd80      	pop	{r7, pc}

0801e64c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801e64c:	b580      	push	{r7, lr}
 801e64e:	b08c      	sub	sp, #48	; 0x30
 801e650:	af04      	add	r7, sp, #16
 801e652:	6078      	str	r0, [r7, #4]
 801e654:	460b      	mov	r3, r1
 801e656:	70fb      	strb	r3, [r7, #3]
 801e658:	4613      	mov	r3, r2
 801e65a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801e65c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e660:	2124      	movs	r1, #36	; 0x24
 801e662:	2022      	movs	r0, #34	; 0x22
 801e664:	f7f5 fc30 	bl	8013ec8 <pbuf_alloc>
 801e668:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801e66a:	69fb      	ldr	r3, [r7, #28]
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	d04c      	beq.n	801e70a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801e670:	69fb      	ldr	r3, [r7, #28]
 801e672:	895b      	ldrh	r3, [r3, #10]
 801e674:	2b23      	cmp	r3, #35	; 0x23
 801e676:	d806      	bhi.n	801e686 <icmp_send_response+0x3a>
 801e678:	4b26      	ldr	r3, [pc, #152]	; (801e714 <icmp_send_response+0xc8>)
 801e67a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801e67e:	4926      	ldr	r1, [pc, #152]	; (801e718 <icmp_send_response+0xcc>)
 801e680:	4826      	ldr	r0, [pc, #152]	; (801e71c <icmp_send_response+0xd0>)
 801e682:	f003 f849 	bl	8021718 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801e686:	687b      	ldr	r3, [r7, #4]
 801e688:	685b      	ldr	r3, [r3, #4]
 801e68a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801e68c:	69fb      	ldr	r3, [r7, #28]
 801e68e:	685b      	ldr	r3, [r3, #4]
 801e690:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801e692:	697b      	ldr	r3, [r7, #20]
 801e694:	78fa      	ldrb	r2, [r7, #3]
 801e696:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801e698:	697b      	ldr	r3, [r7, #20]
 801e69a:	78ba      	ldrb	r2, [r7, #2]
 801e69c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801e69e:	697b      	ldr	r3, [r7, #20]
 801e6a0:	2200      	movs	r2, #0
 801e6a2:	711a      	strb	r2, [r3, #4]
 801e6a4:	2200      	movs	r2, #0
 801e6a6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801e6a8:	697b      	ldr	r3, [r7, #20]
 801e6aa:	2200      	movs	r2, #0
 801e6ac:	719a      	strb	r2, [r3, #6]
 801e6ae:	2200      	movs	r2, #0
 801e6b0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801e6b2:	69fb      	ldr	r3, [r7, #28]
 801e6b4:	685b      	ldr	r3, [r3, #4]
 801e6b6:	f103 0008 	add.w	r0, r3, #8
 801e6ba:	687b      	ldr	r3, [r7, #4]
 801e6bc:	685b      	ldr	r3, [r3, #4]
 801e6be:	221c      	movs	r2, #28
 801e6c0:	4619      	mov	r1, r3
 801e6c2:	f003 fb50 	bl	8021d66 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801e6c6:	69bb      	ldr	r3, [r7, #24]
 801e6c8:	68db      	ldr	r3, [r3, #12]
 801e6ca:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801e6cc:	f107 030c 	add.w	r3, r7, #12
 801e6d0:	4618      	mov	r0, r3
 801e6d2:	f000 f825 	bl	801e720 <ip4_route>
 801e6d6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801e6d8:	693b      	ldr	r3, [r7, #16]
 801e6da:	2b00      	cmp	r3, #0
 801e6dc:	d011      	beq.n	801e702 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801e6de:	697b      	ldr	r3, [r7, #20]
 801e6e0:	2200      	movs	r2, #0
 801e6e2:	709a      	strb	r2, [r3, #2]
 801e6e4:	2200      	movs	r2, #0
 801e6e6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801e6e8:	f107 020c 	add.w	r2, r7, #12
 801e6ec:	693b      	ldr	r3, [r7, #16]
 801e6ee:	9302      	str	r3, [sp, #8]
 801e6f0:	2301      	movs	r3, #1
 801e6f2:	9301      	str	r3, [sp, #4]
 801e6f4:	2300      	movs	r3, #0
 801e6f6:	9300      	str	r3, [sp, #0]
 801e6f8:	23ff      	movs	r3, #255	; 0xff
 801e6fa:	2100      	movs	r1, #0
 801e6fc:	69f8      	ldr	r0, [r7, #28]
 801e6fe:	f000 f9eb 	bl	801ead8 <ip4_output_if>
  }
  pbuf_free(q);
 801e702:	69f8      	ldr	r0, [r7, #28]
 801e704:	f7f5 fec4 	bl	8014490 <pbuf_free>
 801e708:	e000      	b.n	801e70c <icmp_send_response+0xc0>
    return;
 801e70a:	bf00      	nop
}
 801e70c:	3720      	adds	r7, #32
 801e70e:	46bd      	mov	sp, r7
 801e710:	bd80      	pop	{r7, pc}
 801e712:	bf00      	nop
 801e714:	08026d54 	.word	0x08026d54
 801e718:	08026e20 	.word	0x08026e20
 801e71c:	08026dc4 	.word	0x08026dc4

0801e720 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801e720:	b480      	push	{r7}
 801e722:	b085      	sub	sp, #20
 801e724:	af00      	add	r7, sp, #0
 801e726:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801e728:	4b33      	ldr	r3, [pc, #204]	; (801e7f8 <ip4_route+0xd8>)
 801e72a:	681b      	ldr	r3, [r3, #0]
 801e72c:	60fb      	str	r3, [r7, #12]
 801e72e:	e036      	b.n	801e79e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e730:	68fb      	ldr	r3, [r7, #12]
 801e732:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e736:	f003 0301 	and.w	r3, r3, #1
 801e73a:	b2db      	uxtb	r3, r3
 801e73c:	2b00      	cmp	r3, #0
 801e73e:	d02b      	beq.n	801e798 <ip4_route+0x78>
 801e740:	68fb      	ldr	r3, [r7, #12]
 801e742:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e746:	089b      	lsrs	r3, r3, #2
 801e748:	f003 0301 	and.w	r3, r3, #1
 801e74c:	b2db      	uxtb	r3, r3
 801e74e:	2b00      	cmp	r3, #0
 801e750:	d022      	beq.n	801e798 <ip4_route+0x78>
 801e752:	68fb      	ldr	r3, [r7, #12]
 801e754:	3304      	adds	r3, #4
 801e756:	681b      	ldr	r3, [r3, #0]
 801e758:	2b00      	cmp	r3, #0
 801e75a:	d01d      	beq.n	801e798 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801e75c:	687b      	ldr	r3, [r7, #4]
 801e75e:	681a      	ldr	r2, [r3, #0]
 801e760:	68fb      	ldr	r3, [r7, #12]
 801e762:	3304      	adds	r3, #4
 801e764:	681b      	ldr	r3, [r3, #0]
 801e766:	405a      	eors	r2, r3
 801e768:	68fb      	ldr	r3, [r7, #12]
 801e76a:	3308      	adds	r3, #8
 801e76c:	681b      	ldr	r3, [r3, #0]
 801e76e:	4013      	ands	r3, r2
 801e770:	2b00      	cmp	r3, #0
 801e772:	d101      	bne.n	801e778 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801e774:	68fb      	ldr	r3, [r7, #12]
 801e776:	e038      	b.n	801e7ea <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801e778:	68fb      	ldr	r3, [r7, #12]
 801e77a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e77e:	f003 0302 	and.w	r3, r3, #2
 801e782:	2b00      	cmp	r3, #0
 801e784:	d108      	bne.n	801e798 <ip4_route+0x78>
 801e786:	687b      	ldr	r3, [r7, #4]
 801e788:	681a      	ldr	r2, [r3, #0]
 801e78a:	68fb      	ldr	r3, [r7, #12]
 801e78c:	330c      	adds	r3, #12
 801e78e:	681b      	ldr	r3, [r3, #0]
 801e790:	429a      	cmp	r2, r3
 801e792:	d101      	bne.n	801e798 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801e794:	68fb      	ldr	r3, [r7, #12]
 801e796:	e028      	b.n	801e7ea <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801e798:	68fb      	ldr	r3, [r7, #12]
 801e79a:	681b      	ldr	r3, [r3, #0]
 801e79c:	60fb      	str	r3, [r7, #12]
 801e79e:	68fb      	ldr	r3, [r7, #12]
 801e7a0:	2b00      	cmp	r3, #0
 801e7a2:	d1c5      	bne.n	801e730 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801e7a4:	4b15      	ldr	r3, [pc, #84]	; (801e7fc <ip4_route+0xdc>)
 801e7a6:	681b      	ldr	r3, [r3, #0]
 801e7a8:	2b00      	cmp	r3, #0
 801e7aa:	d01a      	beq.n	801e7e2 <ip4_route+0xc2>
 801e7ac:	4b13      	ldr	r3, [pc, #76]	; (801e7fc <ip4_route+0xdc>)
 801e7ae:	681b      	ldr	r3, [r3, #0]
 801e7b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e7b4:	f003 0301 	and.w	r3, r3, #1
 801e7b8:	2b00      	cmp	r3, #0
 801e7ba:	d012      	beq.n	801e7e2 <ip4_route+0xc2>
 801e7bc:	4b0f      	ldr	r3, [pc, #60]	; (801e7fc <ip4_route+0xdc>)
 801e7be:	681b      	ldr	r3, [r3, #0]
 801e7c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e7c4:	f003 0304 	and.w	r3, r3, #4
 801e7c8:	2b00      	cmp	r3, #0
 801e7ca:	d00a      	beq.n	801e7e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801e7cc:	4b0b      	ldr	r3, [pc, #44]	; (801e7fc <ip4_route+0xdc>)
 801e7ce:	681b      	ldr	r3, [r3, #0]
 801e7d0:	3304      	adds	r3, #4
 801e7d2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801e7d4:	2b00      	cmp	r3, #0
 801e7d6:	d004      	beq.n	801e7e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801e7d8:	687b      	ldr	r3, [r7, #4]
 801e7da:	681b      	ldr	r3, [r3, #0]
 801e7dc:	b2db      	uxtb	r3, r3
 801e7de:	2b7f      	cmp	r3, #127	; 0x7f
 801e7e0:	d101      	bne.n	801e7e6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801e7e2:	2300      	movs	r3, #0
 801e7e4:	e001      	b.n	801e7ea <ip4_route+0xca>
  }

  return netif_default;
 801e7e6:	4b05      	ldr	r3, [pc, #20]	; (801e7fc <ip4_route+0xdc>)
 801e7e8:	681b      	ldr	r3, [r3, #0]
}
 801e7ea:	4618      	mov	r0, r3
 801e7ec:	3714      	adds	r7, #20
 801e7ee:	46bd      	mov	sp, r7
 801e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7f4:	4770      	bx	lr
 801e7f6:	bf00      	nop
 801e7f8:	20012344 	.word	0x20012344
 801e7fc:	20012348 	.word	0x20012348

0801e800 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801e800:	b580      	push	{r7, lr}
 801e802:	b082      	sub	sp, #8
 801e804:	af00      	add	r7, sp, #0
 801e806:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801e808:	687b      	ldr	r3, [r7, #4]
 801e80a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e80e:	f003 0301 	and.w	r3, r3, #1
 801e812:	b2db      	uxtb	r3, r3
 801e814:	2b00      	cmp	r3, #0
 801e816:	d016      	beq.n	801e846 <ip4_input_accept+0x46>
 801e818:	687b      	ldr	r3, [r7, #4]
 801e81a:	3304      	adds	r3, #4
 801e81c:	681b      	ldr	r3, [r3, #0]
 801e81e:	2b00      	cmp	r3, #0
 801e820:	d011      	beq.n	801e846 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e822:	4b0b      	ldr	r3, [pc, #44]	; (801e850 <ip4_input_accept+0x50>)
 801e824:	695a      	ldr	r2, [r3, #20]
 801e826:	687b      	ldr	r3, [r7, #4]
 801e828:	3304      	adds	r3, #4
 801e82a:	681b      	ldr	r3, [r3, #0]
 801e82c:	429a      	cmp	r2, r3
 801e82e:	d008      	beq.n	801e842 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801e830:	4b07      	ldr	r3, [pc, #28]	; (801e850 <ip4_input_accept+0x50>)
 801e832:	695b      	ldr	r3, [r3, #20]
 801e834:	6879      	ldr	r1, [r7, #4]
 801e836:	4618      	mov	r0, r3
 801e838:	f000 fa26 	bl	801ec88 <ip4_addr_isbroadcast_u32>
 801e83c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e83e:	2b00      	cmp	r3, #0
 801e840:	d001      	beq.n	801e846 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801e842:	2301      	movs	r3, #1
 801e844:	e000      	b.n	801e848 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801e846:	2300      	movs	r3, #0
}
 801e848:	4618      	mov	r0, r3
 801e84a:	3708      	adds	r7, #8
 801e84c:	46bd      	mov	sp, r7
 801e84e:	bd80      	pop	{r7, pc}
 801e850:	2000eba4 	.word	0x2000eba4

0801e854 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801e854:	b580      	push	{r7, lr}
 801e856:	b088      	sub	sp, #32
 801e858:	af00      	add	r7, sp, #0
 801e85a:	6078      	str	r0, [r7, #4]
 801e85c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801e85e:	2301      	movs	r3, #1
 801e860:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801e862:	687b      	ldr	r3, [r7, #4]
 801e864:	685b      	ldr	r3, [r3, #4]
 801e866:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801e868:	69fb      	ldr	r3, [r7, #28]
 801e86a:	781b      	ldrb	r3, [r3, #0]
 801e86c:	091b      	lsrs	r3, r3, #4
 801e86e:	b2db      	uxtb	r3, r3
 801e870:	2b04      	cmp	r3, #4
 801e872:	d004      	beq.n	801e87e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801e874:	6878      	ldr	r0, [r7, #4]
 801e876:	f7f5 fe0b 	bl	8014490 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801e87a:	2300      	movs	r3, #0
 801e87c:	e123      	b.n	801eac6 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801e87e:	69fb      	ldr	r3, [r7, #28]
 801e880:	781b      	ldrb	r3, [r3, #0]
 801e882:	f003 030f 	and.w	r3, r3, #15
 801e886:	b2db      	uxtb	r3, r3
 801e888:	009b      	lsls	r3, r3, #2
 801e88a:	b2db      	uxtb	r3, r3
 801e88c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801e88e:	69fb      	ldr	r3, [r7, #28]
 801e890:	885b      	ldrh	r3, [r3, #2]
 801e892:	b29b      	uxth	r3, r3
 801e894:	4618      	mov	r0, r3
 801e896:	f7f4 f9fd 	bl	8012c94 <lwip_htons>
 801e89a:	4603      	mov	r3, r0
 801e89c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801e89e:	687b      	ldr	r3, [r7, #4]
 801e8a0:	891b      	ldrh	r3, [r3, #8]
 801e8a2:	8a3a      	ldrh	r2, [r7, #16]
 801e8a4:	429a      	cmp	r2, r3
 801e8a6:	d204      	bcs.n	801e8b2 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801e8a8:	8a3b      	ldrh	r3, [r7, #16]
 801e8aa:	4619      	mov	r1, r3
 801e8ac:	6878      	ldr	r0, [r7, #4]
 801e8ae:	f7f5 fc69 	bl	8014184 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801e8b2:	687b      	ldr	r3, [r7, #4]
 801e8b4:	895b      	ldrh	r3, [r3, #10]
 801e8b6:	8a7a      	ldrh	r2, [r7, #18]
 801e8b8:	429a      	cmp	r2, r3
 801e8ba:	d807      	bhi.n	801e8cc <ip4_input+0x78>
 801e8bc:	687b      	ldr	r3, [r7, #4]
 801e8be:	891b      	ldrh	r3, [r3, #8]
 801e8c0:	8a3a      	ldrh	r2, [r7, #16]
 801e8c2:	429a      	cmp	r2, r3
 801e8c4:	d802      	bhi.n	801e8cc <ip4_input+0x78>
 801e8c6:	8a7b      	ldrh	r3, [r7, #18]
 801e8c8:	2b13      	cmp	r3, #19
 801e8ca:	d804      	bhi.n	801e8d6 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801e8cc:	6878      	ldr	r0, [r7, #4]
 801e8ce:	f7f5 fddf 	bl	8014490 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801e8d2:	2300      	movs	r3, #0
 801e8d4:	e0f7      	b.n	801eac6 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801e8d6:	69fb      	ldr	r3, [r7, #28]
 801e8d8:	691b      	ldr	r3, [r3, #16]
 801e8da:	4a7d      	ldr	r2, [pc, #500]	; (801ead0 <ip4_input+0x27c>)
 801e8dc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801e8de:	69fb      	ldr	r3, [r7, #28]
 801e8e0:	68db      	ldr	r3, [r3, #12]
 801e8e2:	4a7b      	ldr	r2, [pc, #492]	; (801ead0 <ip4_input+0x27c>)
 801e8e4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e8e6:	4b7a      	ldr	r3, [pc, #488]	; (801ead0 <ip4_input+0x27c>)
 801e8e8:	695b      	ldr	r3, [r3, #20]
 801e8ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801e8ee:	2be0      	cmp	r3, #224	; 0xe0
 801e8f0:	d112      	bne.n	801e918 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801e8f2:	683b      	ldr	r3, [r7, #0]
 801e8f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e8f8:	f003 0301 	and.w	r3, r3, #1
 801e8fc:	b2db      	uxtb	r3, r3
 801e8fe:	2b00      	cmp	r3, #0
 801e900:	d007      	beq.n	801e912 <ip4_input+0xbe>
 801e902:	683b      	ldr	r3, [r7, #0]
 801e904:	3304      	adds	r3, #4
 801e906:	681b      	ldr	r3, [r3, #0]
 801e908:	2b00      	cmp	r3, #0
 801e90a:	d002      	beq.n	801e912 <ip4_input+0xbe>
      netif = inp;
 801e90c:	683b      	ldr	r3, [r7, #0]
 801e90e:	61bb      	str	r3, [r7, #24]
 801e910:	e02a      	b.n	801e968 <ip4_input+0x114>
    } else {
      netif = NULL;
 801e912:	2300      	movs	r3, #0
 801e914:	61bb      	str	r3, [r7, #24]
 801e916:	e027      	b.n	801e968 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801e918:	6838      	ldr	r0, [r7, #0]
 801e91a:	f7ff ff71 	bl	801e800 <ip4_input_accept>
 801e91e:	4603      	mov	r3, r0
 801e920:	2b00      	cmp	r3, #0
 801e922:	d002      	beq.n	801e92a <ip4_input+0xd6>
      netif = inp;
 801e924:	683b      	ldr	r3, [r7, #0]
 801e926:	61bb      	str	r3, [r7, #24]
 801e928:	e01e      	b.n	801e968 <ip4_input+0x114>
    } else {
      netif = NULL;
 801e92a:	2300      	movs	r3, #0
 801e92c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801e92e:	4b68      	ldr	r3, [pc, #416]	; (801ead0 <ip4_input+0x27c>)
 801e930:	695b      	ldr	r3, [r3, #20]
 801e932:	b2db      	uxtb	r3, r3
 801e934:	2b7f      	cmp	r3, #127	; 0x7f
 801e936:	d017      	beq.n	801e968 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801e938:	4b66      	ldr	r3, [pc, #408]	; (801ead4 <ip4_input+0x280>)
 801e93a:	681b      	ldr	r3, [r3, #0]
 801e93c:	61bb      	str	r3, [r7, #24]
 801e93e:	e00e      	b.n	801e95e <ip4_input+0x10a>
          if (netif == inp) {
 801e940:	69ba      	ldr	r2, [r7, #24]
 801e942:	683b      	ldr	r3, [r7, #0]
 801e944:	429a      	cmp	r2, r3
 801e946:	d006      	beq.n	801e956 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801e948:	69b8      	ldr	r0, [r7, #24]
 801e94a:	f7ff ff59 	bl	801e800 <ip4_input_accept>
 801e94e:	4603      	mov	r3, r0
 801e950:	2b00      	cmp	r3, #0
 801e952:	d108      	bne.n	801e966 <ip4_input+0x112>
 801e954:	e000      	b.n	801e958 <ip4_input+0x104>
            continue;
 801e956:	bf00      	nop
        NETIF_FOREACH(netif) {
 801e958:	69bb      	ldr	r3, [r7, #24]
 801e95a:	681b      	ldr	r3, [r3, #0]
 801e95c:	61bb      	str	r3, [r7, #24]
 801e95e:	69bb      	ldr	r3, [r7, #24]
 801e960:	2b00      	cmp	r3, #0
 801e962:	d1ed      	bne.n	801e940 <ip4_input+0xec>
 801e964:	e000      	b.n	801e968 <ip4_input+0x114>
            break;
 801e966:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801e968:	69bb      	ldr	r3, [r7, #24]
 801e96a:	2b00      	cmp	r3, #0
 801e96c:	d111      	bne.n	801e992 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801e96e:	69fb      	ldr	r3, [r7, #28]
 801e970:	7a5b      	ldrb	r3, [r3, #9]
 801e972:	2b11      	cmp	r3, #17
 801e974:	d10d      	bne.n	801e992 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801e976:	8a7b      	ldrh	r3, [r7, #18]
 801e978:	69fa      	ldr	r2, [r7, #28]
 801e97a:	4413      	add	r3, r2
 801e97c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801e97e:	68fb      	ldr	r3, [r7, #12]
 801e980:	885b      	ldrh	r3, [r3, #2]
 801e982:	b29b      	uxth	r3, r3
 801e984:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801e988:	d103      	bne.n	801e992 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801e98a:	683b      	ldr	r3, [r7, #0]
 801e98c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801e98e:	2300      	movs	r3, #0
 801e990:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801e992:	697b      	ldr	r3, [r7, #20]
 801e994:	2b00      	cmp	r3, #0
 801e996:	d017      	beq.n	801e9c8 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801e998:	4b4d      	ldr	r3, [pc, #308]	; (801ead0 <ip4_input+0x27c>)
 801e99a:	691b      	ldr	r3, [r3, #16]
 801e99c:	2b00      	cmp	r3, #0
 801e99e:	d013      	beq.n	801e9c8 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801e9a0:	4b4b      	ldr	r3, [pc, #300]	; (801ead0 <ip4_input+0x27c>)
 801e9a2:	691b      	ldr	r3, [r3, #16]
 801e9a4:	6839      	ldr	r1, [r7, #0]
 801e9a6:	4618      	mov	r0, r3
 801e9a8:	f000 f96e 	bl	801ec88 <ip4_addr_isbroadcast_u32>
 801e9ac:	4603      	mov	r3, r0
 801e9ae:	2b00      	cmp	r3, #0
 801e9b0:	d105      	bne.n	801e9be <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801e9b2:	4b47      	ldr	r3, [pc, #284]	; (801ead0 <ip4_input+0x27c>)
 801e9b4:	691b      	ldr	r3, [r3, #16]
 801e9b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801e9ba:	2be0      	cmp	r3, #224	; 0xe0
 801e9bc:	d104      	bne.n	801e9c8 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801e9be:	6878      	ldr	r0, [r7, #4]
 801e9c0:	f7f5 fd66 	bl	8014490 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801e9c4:	2300      	movs	r3, #0
 801e9c6:	e07e      	b.n	801eac6 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801e9c8:	69bb      	ldr	r3, [r7, #24]
 801e9ca:	2b00      	cmp	r3, #0
 801e9cc:	d104      	bne.n	801e9d8 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801e9ce:	6878      	ldr	r0, [r7, #4]
 801e9d0:	f7f5 fd5e 	bl	8014490 <pbuf_free>
    return ERR_OK;
 801e9d4:	2300      	movs	r3, #0
 801e9d6:	e076      	b.n	801eac6 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801e9d8:	69fb      	ldr	r3, [r7, #28]
 801e9da:	88db      	ldrh	r3, [r3, #6]
 801e9dc:	b29b      	uxth	r3, r3
 801e9de:	461a      	mov	r2, r3
 801e9e0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801e9e4:	4013      	ands	r3, r2
 801e9e6:	2b00      	cmp	r3, #0
 801e9e8:	d00b      	beq.n	801ea02 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801e9ea:	6878      	ldr	r0, [r7, #4]
 801e9ec:	f000 fd22 	bl	801f434 <ip4_reass>
 801e9f0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801e9f2:	687b      	ldr	r3, [r7, #4]
 801e9f4:	2b00      	cmp	r3, #0
 801e9f6:	d101      	bne.n	801e9fc <ip4_input+0x1a8>
      return ERR_OK;
 801e9f8:	2300      	movs	r3, #0
 801e9fa:	e064      	b.n	801eac6 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801e9fc:	687b      	ldr	r3, [r7, #4]
 801e9fe:	685b      	ldr	r3, [r3, #4]
 801ea00:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801ea02:	4a33      	ldr	r2, [pc, #204]	; (801ead0 <ip4_input+0x27c>)
 801ea04:	69bb      	ldr	r3, [r7, #24]
 801ea06:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801ea08:	4a31      	ldr	r2, [pc, #196]	; (801ead0 <ip4_input+0x27c>)
 801ea0a:	683b      	ldr	r3, [r7, #0]
 801ea0c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801ea0e:	4a30      	ldr	r2, [pc, #192]	; (801ead0 <ip4_input+0x27c>)
 801ea10:	69fb      	ldr	r3, [r7, #28]
 801ea12:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801ea14:	69fb      	ldr	r3, [r7, #28]
 801ea16:	781b      	ldrb	r3, [r3, #0]
 801ea18:	f003 030f 	and.w	r3, r3, #15
 801ea1c:	b2db      	uxtb	r3, r3
 801ea1e:	009b      	lsls	r3, r3, #2
 801ea20:	b2db      	uxtb	r3, r3
 801ea22:	b29a      	uxth	r2, r3
 801ea24:	4b2a      	ldr	r3, [pc, #168]	; (801ead0 <ip4_input+0x27c>)
 801ea26:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801ea28:	8a7b      	ldrh	r3, [r7, #18]
 801ea2a:	4619      	mov	r1, r3
 801ea2c:	6878      	ldr	r0, [r7, #4]
 801ea2e:	f7f5 fca9 	bl	8014384 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801ea32:	69fb      	ldr	r3, [r7, #28]
 801ea34:	7a5b      	ldrb	r3, [r3, #9]
 801ea36:	2b11      	cmp	r3, #17
 801ea38:	d006      	beq.n	801ea48 <ip4_input+0x1f4>
 801ea3a:	2b11      	cmp	r3, #17
 801ea3c:	dc13      	bgt.n	801ea66 <ip4_input+0x212>
 801ea3e:	2b01      	cmp	r3, #1
 801ea40:	d00c      	beq.n	801ea5c <ip4_input+0x208>
 801ea42:	2b06      	cmp	r3, #6
 801ea44:	d005      	beq.n	801ea52 <ip4_input+0x1fe>
 801ea46:	e00e      	b.n	801ea66 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801ea48:	6839      	ldr	r1, [r7, #0]
 801ea4a:	6878      	ldr	r0, [r7, #4]
 801ea4c:	f7fc fac6 	bl	801afdc <udp_input>
        break;
 801ea50:	e026      	b.n	801eaa0 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801ea52:	6839      	ldr	r1, [r7, #0]
 801ea54:	6878      	ldr	r0, [r7, #4]
 801ea56:	f7f7 fe71 	bl	801673c <tcp_input>
        break;
 801ea5a:	e021      	b.n	801eaa0 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801ea5c:	6839      	ldr	r1, [r7, #0]
 801ea5e:	6878      	ldr	r0, [r7, #4]
 801ea60:	f7ff fcd0 	bl	801e404 <icmp_input>
        break;
 801ea64:	e01c      	b.n	801eaa0 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ea66:	4b1a      	ldr	r3, [pc, #104]	; (801ead0 <ip4_input+0x27c>)
 801ea68:	695b      	ldr	r3, [r3, #20]
 801ea6a:	69b9      	ldr	r1, [r7, #24]
 801ea6c:	4618      	mov	r0, r3
 801ea6e:	f000 f90b 	bl	801ec88 <ip4_addr_isbroadcast_u32>
 801ea72:	4603      	mov	r3, r0
 801ea74:	2b00      	cmp	r3, #0
 801ea76:	d10f      	bne.n	801ea98 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ea78:	4b15      	ldr	r3, [pc, #84]	; (801ead0 <ip4_input+0x27c>)
 801ea7a:	695b      	ldr	r3, [r3, #20]
 801ea7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ea80:	2be0      	cmp	r3, #224	; 0xe0
 801ea82:	d009      	beq.n	801ea98 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801ea84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801ea88:	4619      	mov	r1, r3
 801ea8a:	6878      	ldr	r0, [r7, #4]
 801ea8c:	f7f5 fced 	bl	801446a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801ea90:	2102      	movs	r1, #2
 801ea92:	6878      	ldr	r0, [r7, #4]
 801ea94:	f7ff fdba 	bl	801e60c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801ea98:	6878      	ldr	r0, [r7, #4]
 801ea9a:	f7f5 fcf9 	bl	8014490 <pbuf_free>
        break;
 801ea9e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801eaa0:	4b0b      	ldr	r3, [pc, #44]	; (801ead0 <ip4_input+0x27c>)
 801eaa2:	2200      	movs	r2, #0
 801eaa4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801eaa6:	4b0a      	ldr	r3, [pc, #40]	; (801ead0 <ip4_input+0x27c>)
 801eaa8:	2200      	movs	r2, #0
 801eaaa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801eaac:	4b08      	ldr	r3, [pc, #32]	; (801ead0 <ip4_input+0x27c>)
 801eaae:	2200      	movs	r2, #0
 801eab0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801eab2:	4b07      	ldr	r3, [pc, #28]	; (801ead0 <ip4_input+0x27c>)
 801eab4:	2200      	movs	r2, #0
 801eab6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801eab8:	4b05      	ldr	r3, [pc, #20]	; (801ead0 <ip4_input+0x27c>)
 801eaba:	2200      	movs	r2, #0
 801eabc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801eabe:	4b04      	ldr	r3, [pc, #16]	; (801ead0 <ip4_input+0x27c>)
 801eac0:	2200      	movs	r2, #0
 801eac2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801eac4:	2300      	movs	r3, #0
}
 801eac6:	4618      	mov	r0, r3
 801eac8:	3720      	adds	r7, #32
 801eaca:	46bd      	mov	sp, r7
 801eacc:	bd80      	pop	{r7, pc}
 801eace:	bf00      	nop
 801ead0:	2000eba4 	.word	0x2000eba4
 801ead4:	20012344 	.word	0x20012344

0801ead8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801ead8:	b580      	push	{r7, lr}
 801eada:	b08a      	sub	sp, #40	; 0x28
 801eadc:	af04      	add	r7, sp, #16
 801eade:	60f8      	str	r0, [r7, #12]
 801eae0:	60b9      	str	r1, [r7, #8]
 801eae2:	607a      	str	r2, [r7, #4]
 801eae4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801eae6:	68bb      	ldr	r3, [r7, #8]
 801eae8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801eaea:	687b      	ldr	r3, [r7, #4]
 801eaec:	2b00      	cmp	r3, #0
 801eaee:	d009      	beq.n	801eb04 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801eaf0:	68bb      	ldr	r3, [r7, #8]
 801eaf2:	2b00      	cmp	r3, #0
 801eaf4:	d003      	beq.n	801eafe <ip4_output_if+0x26>
 801eaf6:	68bb      	ldr	r3, [r7, #8]
 801eaf8:	681b      	ldr	r3, [r3, #0]
 801eafa:	2b00      	cmp	r3, #0
 801eafc:	d102      	bne.n	801eb04 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801eafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eb00:	3304      	adds	r3, #4
 801eb02:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801eb04:	78fa      	ldrb	r2, [r7, #3]
 801eb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eb08:	9302      	str	r3, [sp, #8]
 801eb0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801eb0e:	9301      	str	r3, [sp, #4]
 801eb10:	f897 3020 	ldrb.w	r3, [r7, #32]
 801eb14:	9300      	str	r3, [sp, #0]
 801eb16:	4613      	mov	r3, r2
 801eb18:	687a      	ldr	r2, [r7, #4]
 801eb1a:	6979      	ldr	r1, [r7, #20]
 801eb1c:	68f8      	ldr	r0, [r7, #12]
 801eb1e:	f000 f805 	bl	801eb2c <ip4_output_if_src>
 801eb22:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801eb24:	4618      	mov	r0, r3
 801eb26:	3718      	adds	r7, #24
 801eb28:	46bd      	mov	sp, r7
 801eb2a:	bd80      	pop	{r7, pc}

0801eb2c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801eb2c:	b580      	push	{r7, lr}
 801eb2e:	b088      	sub	sp, #32
 801eb30:	af00      	add	r7, sp, #0
 801eb32:	60f8      	str	r0, [r7, #12]
 801eb34:	60b9      	str	r1, [r7, #8]
 801eb36:	607a      	str	r2, [r7, #4]
 801eb38:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801eb3a:	68fb      	ldr	r3, [r7, #12]
 801eb3c:	7b9b      	ldrb	r3, [r3, #14]
 801eb3e:	2b01      	cmp	r3, #1
 801eb40:	d006      	beq.n	801eb50 <ip4_output_if_src+0x24>
 801eb42:	4b4b      	ldr	r3, [pc, #300]	; (801ec70 <ip4_output_if_src+0x144>)
 801eb44:	f44f 7255 	mov.w	r2, #852	; 0x354
 801eb48:	494a      	ldr	r1, [pc, #296]	; (801ec74 <ip4_output_if_src+0x148>)
 801eb4a:	484b      	ldr	r0, [pc, #300]	; (801ec78 <ip4_output_if_src+0x14c>)
 801eb4c:	f002 fde4 	bl	8021718 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801eb50:	687b      	ldr	r3, [r7, #4]
 801eb52:	2b00      	cmp	r3, #0
 801eb54:	d060      	beq.n	801ec18 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801eb56:	2314      	movs	r3, #20
 801eb58:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801eb5a:	2114      	movs	r1, #20
 801eb5c:	68f8      	ldr	r0, [r7, #12]
 801eb5e:	f7f5 fc01 	bl	8014364 <pbuf_add_header>
 801eb62:	4603      	mov	r3, r0
 801eb64:	2b00      	cmp	r3, #0
 801eb66:	d002      	beq.n	801eb6e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801eb68:	f06f 0301 	mvn.w	r3, #1
 801eb6c:	e07c      	b.n	801ec68 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801eb6e:	68fb      	ldr	r3, [r7, #12]
 801eb70:	685b      	ldr	r3, [r3, #4]
 801eb72:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801eb74:	68fb      	ldr	r3, [r7, #12]
 801eb76:	895b      	ldrh	r3, [r3, #10]
 801eb78:	2b13      	cmp	r3, #19
 801eb7a:	d806      	bhi.n	801eb8a <ip4_output_if_src+0x5e>
 801eb7c:	4b3c      	ldr	r3, [pc, #240]	; (801ec70 <ip4_output_if_src+0x144>)
 801eb7e:	f44f 7262 	mov.w	r2, #904	; 0x388
 801eb82:	493e      	ldr	r1, [pc, #248]	; (801ec7c <ip4_output_if_src+0x150>)
 801eb84:	483c      	ldr	r0, [pc, #240]	; (801ec78 <ip4_output_if_src+0x14c>)
 801eb86:	f002 fdc7 	bl	8021718 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801eb8a:	69fb      	ldr	r3, [r7, #28]
 801eb8c:	78fa      	ldrb	r2, [r7, #3]
 801eb8e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801eb90:	69fb      	ldr	r3, [r7, #28]
 801eb92:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801eb96:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801eb98:	687b      	ldr	r3, [r7, #4]
 801eb9a:	681a      	ldr	r2, [r3, #0]
 801eb9c:	69fb      	ldr	r3, [r7, #28]
 801eb9e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801eba0:	8b7b      	ldrh	r3, [r7, #26]
 801eba2:	089b      	lsrs	r3, r3, #2
 801eba4:	b29b      	uxth	r3, r3
 801eba6:	b2db      	uxtb	r3, r3
 801eba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ebac:	b2da      	uxtb	r2, r3
 801ebae:	69fb      	ldr	r3, [r7, #28]
 801ebb0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801ebb2:	69fb      	ldr	r3, [r7, #28]
 801ebb4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801ebb8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801ebba:	68fb      	ldr	r3, [r7, #12]
 801ebbc:	891b      	ldrh	r3, [r3, #8]
 801ebbe:	4618      	mov	r0, r3
 801ebc0:	f7f4 f868 	bl	8012c94 <lwip_htons>
 801ebc4:	4603      	mov	r3, r0
 801ebc6:	461a      	mov	r2, r3
 801ebc8:	69fb      	ldr	r3, [r7, #28]
 801ebca:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801ebcc:	69fb      	ldr	r3, [r7, #28]
 801ebce:	2200      	movs	r2, #0
 801ebd0:	719a      	strb	r2, [r3, #6]
 801ebd2:	2200      	movs	r2, #0
 801ebd4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801ebd6:	4b2a      	ldr	r3, [pc, #168]	; (801ec80 <ip4_output_if_src+0x154>)
 801ebd8:	881b      	ldrh	r3, [r3, #0]
 801ebda:	4618      	mov	r0, r3
 801ebdc:	f7f4 f85a 	bl	8012c94 <lwip_htons>
 801ebe0:	4603      	mov	r3, r0
 801ebe2:	461a      	mov	r2, r3
 801ebe4:	69fb      	ldr	r3, [r7, #28]
 801ebe6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801ebe8:	4b25      	ldr	r3, [pc, #148]	; (801ec80 <ip4_output_if_src+0x154>)
 801ebea:	881b      	ldrh	r3, [r3, #0]
 801ebec:	3301      	adds	r3, #1
 801ebee:	b29a      	uxth	r2, r3
 801ebf0:	4b23      	ldr	r3, [pc, #140]	; (801ec80 <ip4_output_if_src+0x154>)
 801ebf2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801ebf4:	68bb      	ldr	r3, [r7, #8]
 801ebf6:	2b00      	cmp	r3, #0
 801ebf8:	d104      	bne.n	801ec04 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801ebfa:	4b22      	ldr	r3, [pc, #136]	; (801ec84 <ip4_output_if_src+0x158>)
 801ebfc:	681a      	ldr	r2, [r3, #0]
 801ebfe:	69fb      	ldr	r3, [r7, #28]
 801ec00:	60da      	str	r2, [r3, #12]
 801ec02:	e003      	b.n	801ec0c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801ec04:	68bb      	ldr	r3, [r7, #8]
 801ec06:	681a      	ldr	r2, [r3, #0]
 801ec08:	69fb      	ldr	r3, [r7, #28]
 801ec0a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801ec0c:	69fb      	ldr	r3, [r7, #28]
 801ec0e:	2200      	movs	r2, #0
 801ec10:	729a      	strb	r2, [r3, #10]
 801ec12:	2200      	movs	r2, #0
 801ec14:	72da      	strb	r2, [r3, #11]
 801ec16:	e00f      	b.n	801ec38 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801ec18:	68fb      	ldr	r3, [r7, #12]
 801ec1a:	895b      	ldrh	r3, [r3, #10]
 801ec1c:	2b13      	cmp	r3, #19
 801ec1e:	d802      	bhi.n	801ec26 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801ec20:	f06f 0301 	mvn.w	r3, #1
 801ec24:	e020      	b.n	801ec68 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801ec26:	68fb      	ldr	r3, [r7, #12]
 801ec28:	685b      	ldr	r3, [r3, #4]
 801ec2a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801ec2c:	69fb      	ldr	r3, [r7, #28]
 801ec2e:	691b      	ldr	r3, [r3, #16]
 801ec30:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801ec32:	f107 0314 	add.w	r3, r7, #20
 801ec36:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801ec38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ec3c:	2b00      	cmp	r3, #0
 801ec3e:	d00c      	beq.n	801ec5a <ip4_output_if_src+0x12e>
 801ec40:	68fb      	ldr	r3, [r7, #12]
 801ec42:	891a      	ldrh	r2, [r3, #8]
 801ec44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ec48:	429a      	cmp	r2, r3
 801ec4a:	d906      	bls.n	801ec5a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801ec4c:	687a      	ldr	r2, [r7, #4]
 801ec4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ec50:	68f8      	ldr	r0, [r7, #12]
 801ec52:	f000 fde3 	bl	801f81c <ip4_frag>
 801ec56:	4603      	mov	r3, r0
 801ec58:	e006      	b.n	801ec68 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801ec5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec5c:	695b      	ldr	r3, [r3, #20]
 801ec5e:	687a      	ldr	r2, [r7, #4]
 801ec60:	68f9      	ldr	r1, [r7, #12]
 801ec62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ec64:	4798      	blx	r3
 801ec66:	4603      	mov	r3, r0
}
 801ec68:	4618      	mov	r0, r3
 801ec6a:	3720      	adds	r7, #32
 801ec6c:	46bd      	mov	sp, r7
 801ec6e:	bd80      	pop	{r7, pc}
 801ec70:	08026e4c 	.word	0x08026e4c
 801ec74:	08026e80 	.word	0x08026e80
 801ec78:	08026e8c 	.word	0x08026e8c
 801ec7c:	08026eb4 	.word	0x08026eb4
 801ec80:	200124d6 	.word	0x200124d6
 801ec84:	08027400 	.word	0x08027400

0801ec88 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801ec88:	b480      	push	{r7}
 801ec8a:	b085      	sub	sp, #20
 801ec8c:	af00      	add	r7, sp, #0
 801ec8e:	6078      	str	r0, [r7, #4]
 801ec90:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801ec92:	687b      	ldr	r3, [r7, #4]
 801ec94:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801ec96:	687b      	ldr	r3, [r7, #4]
 801ec98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ec9c:	d002      	beq.n	801eca4 <ip4_addr_isbroadcast_u32+0x1c>
 801ec9e:	687b      	ldr	r3, [r7, #4]
 801eca0:	2b00      	cmp	r3, #0
 801eca2:	d101      	bne.n	801eca8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801eca4:	2301      	movs	r3, #1
 801eca6:	e02a      	b.n	801ecfe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801eca8:	683b      	ldr	r3, [r7, #0]
 801ecaa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ecae:	f003 0302 	and.w	r3, r3, #2
 801ecb2:	2b00      	cmp	r3, #0
 801ecb4:	d101      	bne.n	801ecba <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801ecb6:	2300      	movs	r3, #0
 801ecb8:	e021      	b.n	801ecfe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801ecba:	683b      	ldr	r3, [r7, #0]
 801ecbc:	3304      	adds	r3, #4
 801ecbe:	681b      	ldr	r3, [r3, #0]
 801ecc0:	687a      	ldr	r2, [r7, #4]
 801ecc2:	429a      	cmp	r2, r3
 801ecc4:	d101      	bne.n	801ecca <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801ecc6:	2300      	movs	r3, #0
 801ecc8:	e019      	b.n	801ecfe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801ecca:	68fa      	ldr	r2, [r7, #12]
 801eccc:	683b      	ldr	r3, [r7, #0]
 801ecce:	3304      	adds	r3, #4
 801ecd0:	681b      	ldr	r3, [r3, #0]
 801ecd2:	405a      	eors	r2, r3
 801ecd4:	683b      	ldr	r3, [r7, #0]
 801ecd6:	3308      	adds	r3, #8
 801ecd8:	681b      	ldr	r3, [r3, #0]
 801ecda:	4013      	ands	r3, r2
 801ecdc:	2b00      	cmp	r3, #0
 801ecde:	d10d      	bne.n	801ecfc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801ece0:	683b      	ldr	r3, [r7, #0]
 801ece2:	3308      	adds	r3, #8
 801ece4:	681b      	ldr	r3, [r3, #0]
 801ece6:	43da      	mvns	r2, r3
 801ece8:	687b      	ldr	r3, [r7, #4]
 801ecea:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801ecec:	683b      	ldr	r3, [r7, #0]
 801ecee:	3308      	adds	r3, #8
 801ecf0:	681b      	ldr	r3, [r3, #0]
 801ecf2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801ecf4:	429a      	cmp	r2, r3
 801ecf6:	d101      	bne.n	801ecfc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801ecf8:	2301      	movs	r3, #1
 801ecfa:	e000      	b.n	801ecfe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801ecfc:	2300      	movs	r3, #0
  }
}
 801ecfe:	4618      	mov	r0, r3
 801ed00:	3714      	adds	r7, #20
 801ed02:	46bd      	mov	sp, r7
 801ed04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed08:	4770      	bx	lr
	...

0801ed0c <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801ed0c:	b580      	push	{r7, lr}
 801ed0e:	b082      	sub	sp, #8
 801ed10:	af00      	add	r7, sp, #0
 801ed12:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 801ed14:	2210      	movs	r2, #16
 801ed16:	4904      	ldr	r1, [pc, #16]	; (801ed28 <ip4addr_ntoa+0x1c>)
 801ed18:	6878      	ldr	r0, [r7, #4]
 801ed1a:	f000 f807 	bl	801ed2c <ip4addr_ntoa_r>
 801ed1e:	4603      	mov	r3, r0
}
 801ed20:	4618      	mov	r0, r3
 801ed22:	3708      	adds	r7, #8
 801ed24:	46bd      	mov	sp, r7
 801ed26:	bd80      	pop	{r7, pc}
 801ed28:	200124d8 	.word	0x200124d8

0801ed2c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801ed2c:	b480      	push	{r7}
 801ed2e:	b08d      	sub	sp, #52	; 0x34
 801ed30:	af00      	add	r7, sp, #0
 801ed32:	60f8      	str	r0, [r7, #12]
 801ed34:	60b9      	str	r1, [r7, #8]
 801ed36:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801ed38:	2300      	movs	r3, #0
 801ed3a:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801ed3c:	68fb      	ldr	r3, [r7, #12]
 801ed3e:	681b      	ldr	r3, [r3, #0]
 801ed40:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801ed42:	68bb      	ldr	r3, [r7, #8]
 801ed44:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 801ed46:	f107 0318 	add.w	r3, r7, #24
 801ed4a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801ed4c:	2300      	movs	r3, #0
 801ed4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ed52:	e058      	b.n	801ee06 <ip4addr_ntoa_r+0xda>
    i = 0;
 801ed54:	2300      	movs	r3, #0
 801ed56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 801ed5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ed5c:	781a      	ldrb	r2, [r3, #0]
 801ed5e:	4b32      	ldr	r3, [pc, #200]	; (801ee28 <ip4addr_ntoa_r+0xfc>)
 801ed60:	fba3 1302 	umull	r1, r3, r3, r2
 801ed64:	08d9      	lsrs	r1, r3, #3
 801ed66:	460b      	mov	r3, r1
 801ed68:	009b      	lsls	r3, r3, #2
 801ed6a:	440b      	add	r3, r1
 801ed6c:	005b      	lsls	r3, r3, #1
 801ed6e:	1ad3      	subs	r3, r2, r3
 801ed70:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801ed72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ed74:	781b      	ldrb	r3, [r3, #0]
 801ed76:	4a2c      	ldr	r2, [pc, #176]	; (801ee28 <ip4addr_ntoa_r+0xfc>)
 801ed78:	fba2 2303 	umull	r2, r3, r2, r3
 801ed7c:	08db      	lsrs	r3, r3, #3
 801ed7e:	b2da      	uxtb	r2, r3
 801ed80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ed82:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801ed84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ed88:	1c5a      	adds	r2, r3, #1
 801ed8a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801ed8e:	4619      	mov	r1, r3
 801ed90:	7ffb      	ldrb	r3, [r7, #31]
 801ed92:	3330      	adds	r3, #48	; 0x30
 801ed94:	b2da      	uxtb	r2, r3
 801ed96:	f101 0330 	add.w	r3, r1, #48	; 0x30
 801ed9a:	443b      	add	r3, r7
 801ed9c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801eda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eda2:	781b      	ldrb	r3, [r3, #0]
 801eda4:	2b00      	cmp	r3, #0
 801eda6:	d1d8      	bne.n	801ed5a <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801eda8:	e011      	b.n	801edce <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 801edaa:	6a3b      	ldr	r3, [r7, #32]
 801edac:	1c5a      	adds	r2, r3, #1
 801edae:	623a      	str	r2, [r7, #32]
 801edb0:	687a      	ldr	r2, [r7, #4]
 801edb2:	429a      	cmp	r2, r3
 801edb4:	dc01      	bgt.n	801edba <ip4addr_ntoa_r+0x8e>
        return NULL;
 801edb6:	2300      	movs	r3, #0
 801edb8:	e030      	b.n	801ee1c <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 801edba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801edbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801edc0:	1c59      	adds	r1, r3, #1
 801edc2:	62f9      	str	r1, [r7, #44]	; 0x2c
 801edc4:	3230      	adds	r2, #48	; 0x30
 801edc6:	443a      	add	r2, r7
 801edc8:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801edcc:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801edce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801edd2:	1e5a      	subs	r2, r3, #1
 801edd4:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801edd8:	2b00      	cmp	r3, #0
 801edda:	d1e6      	bne.n	801edaa <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801eddc:	6a3b      	ldr	r3, [r7, #32]
 801edde:	1c5a      	adds	r2, r3, #1
 801ede0:	623a      	str	r2, [r7, #32]
 801ede2:	687a      	ldr	r2, [r7, #4]
 801ede4:	429a      	cmp	r2, r3
 801ede6:	dc01      	bgt.n	801edec <ip4addr_ntoa_r+0xc0>
      return NULL;
 801ede8:	2300      	movs	r3, #0
 801edea:	e017      	b.n	801ee1c <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 801edec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801edee:	1c5a      	adds	r2, r3, #1
 801edf0:	62fa      	str	r2, [r7, #44]	; 0x2c
 801edf2:	222e      	movs	r2, #46	; 0x2e
 801edf4:	701a      	strb	r2, [r3, #0]
    ap++;
 801edf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801edf8:	3301      	adds	r3, #1
 801edfa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801edfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ee00:	3301      	adds	r3, #1
 801ee02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ee06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ee0a:	2b03      	cmp	r3, #3
 801ee0c:	d9a2      	bls.n	801ed54 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801ee0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee10:	3b01      	subs	r3, #1
 801ee12:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ee14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee16:	2200      	movs	r2, #0
 801ee18:	701a      	strb	r2, [r3, #0]
  return buf;
 801ee1a:	68bb      	ldr	r3, [r7, #8]
}
 801ee1c:	4618      	mov	r0, r3
 801ee1e:	3734      	adds	r7, #52	; 0x34
 801ee20:	46bd      	mov	sp, r7
 801ee22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee26:	4770      	bx	lr
 801ee28:	cccccccd 	.word	0xcccccccd

0801ee2c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801ee2c:	b580      	push	{r7, lr}
 801ee2e:	b084      	sub	sp, #16
 801ee30:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801ee32:	2300      	movs	r3, #0
 801ee34:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801ee36:	4b12      	ldr	r3, [pc, #72]	; (801ee80 <ip_reass_tmr+0x54>)
 801ee38:	681b      	ldr	r3, [r3, #0]
 801ee3a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801ee3c:	e018      	b.n	801ee70 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801ee3e:	68fb      	ldr	r3, [r7, #12]
 801ee40:	7fdb      	ldrb	r3, [r3, #31]
 801ee42:	2b00      	cmp	r3, #0
 801ee44:	d00b      	beq.n	801ee5e <ip_reass_tmr+0x32>
      r->timer--;
 801ee46:	68fb      	ldr	r3, [r7, #12]
 801ee48:	7fdb      	ldrb	r3, [r3, #31]
 801ee4a:	3b01      	subs	r3, #1
 801ee4c:	b2da      	uxtb	r2, r3
 801ee4e:	68fb      	ldr	r3, [r7, #12]
 801ee50:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801ee52:	68fb      	ldr	r3, [r7, #12]
 801ee54:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801ee56:	68fb      	ldr	r3, [r7, #12]
 801ee58:	681b      	ldr	r3, [r3, #0]
 801ee5a:	60fb      	str	r3, [r7, #12]
 801ee5c:	e008      	b.n	801ee70 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801ee5e:	68fb      	ldr	r3, [r7, #12]
 801ee60:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801ee62:	68fb      	ldr	r3, [r7, #12]
 801ee64:	681b      	ldr	r3, [r3, #0]
 801ee66:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801ee68:	68b9      	ldr	r1, [r7, #8]
 801ee6a:	6878      	ldr	r0, [r7, #4]
 801ee6c:	f000 f80a 	bl	801ee84 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801ee70:	68fb      	ldr	r3, [r7, #12]
 801ee72:	2b00      	cmp	r3, #0
 801ee74:	d1e3      	bne.n	801ee3e <ip_reass_tmr+0x12>
    }
  }
}
 801ee76:	bf00      	nop
 801ee78:	bf00      	nop
 801ee7a:	3710      	adds	r7, #16
 801ee7c:	46bd      	mov	sp, r7
 801ee7e:	bd80      	pop	{r7, pc}
 801ee80:	200124e8 	.word	0x200124e8

0801ee84 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ee84:	b580      	push	{r7, lr}
 801ee86:	b088      	sub	sp, #32
 801ee88:	af00      	add	r7, sp, #0
 801ee8a:	6078      	str	r0, [r7, #4]
 801ee8c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801ee8e:	2300      	movs	r3, #0
 801ee90:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801ee92:	683a      	ldr	r2, [r7, #0]
 801ee94:	687b      	ldr	r3, [r7, #4]
 801ee96:	429a      	cmp	r2, r3
 801ee98:	d105      	bne.n	801eea6 <ip_reass_free_complete_datagram+0x22>
 801ee9a:	4b45      	ldr	r3, [pc, #276]	; (801efb0 <ip_reass_free_complete_datagram+0x12c>)
 801ee9c:	22ab      	movs	r2, #171	; 0xab
 801ee9e:	4945      	ldr	r1, [pc, #276]	; (801efb4 <ip_reass_free_complete_datagram+0x130>)
 801eea0:	4845      	ldr	r0, [pc, #276]	; (801efb8 <ip_reass_free_complete_datagram+0x134>)
 801eea2:	f002 fc39 	bl	8021718 <iprintf>
  if (prev != NULL) {
 801eea6:	683b      	ldr	r3, [r7, #0]
 801eea8:	2b00      	cmp	r3, #0
 801eeaa:	d00a      	beq.n	801eec2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801eeac:	683b      	ldr	r3, [r7, #0]
 801eeae:	681b      	ldr	r3, [r3, #0]
 801eeb0:	687a      	ldr	r2, [r7, #4]
 801eeb2:	429a      	cmp	r2, r3
 801eeb4:	d005      	beq.n	801eec2 <ip_reass_free_complete_datagram+0x3e>
 801eeb6:	4b3e      	ldr	r3, [pc, #248]	; (801efb0 <ip_reass_free_complete_datagram+0x12c>)
 801eeb8:	22ad      	movs	r2, #173	; 0xad
 801eeba:	4940      	ldr	r1, [pc, #256]	; (801efbc <ip_reass_free_complete_datagram+0x138>)
 801eebc:	483e      	ldr	r0, [pc, #248]	; (801efb8 <ip_reass_free_complete_datagram+0x134>)
 801eebe:	f002 fc2b 	bl	8021718 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801eec2:	687b      	ldr	r3, [r7, #4]
 801eec4:	685b      	ldr	r3, [r3, #4]
 801eec6:	685b      	ldr	r3, [r3, #4]
 801eec8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801eeca:	697b      	ldr	r3, [r7, #20]
 801eecc:	889b      	ldrh	r3, [r3, #4]
 801eece:	b29b      	uxth	r3, r3
 801eed0:	2b00      	cmp	r3, #0
 801eed2:	d12a      	bne.n	801ef2a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801eed4:	687b      	ldr	r3, [r7, #4]
 801eed6:	685b      	ldr	r3, [r3, #4]
 801eed8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801eeda:	697b      	ldr	r3, [r7, #20]
 801eedc:	681a      	ldr	r2, [r3, #0]
 801eede:	687b      	ldr	r3, [r7, #4]
 801eee0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801eee2:	69bb      	ldr	r3, [r7, #24]
 801eee4:	6858      	ldr	r0, [r3, #4]
 801eee6:	687b      	ldr	r3, [r7, #4]
 801eee8:	3308      	adds	r3, #8
 801eeea:	2214      	movs	r2, #20
 801eeec:	4619      	mov	r1, r3
 801eeee:	f002 ff3a 	bl	8021d66 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801eef2:	2101      	movs	r1, #1
 801eef4:	69b8      	ldr	r0, [r7, #24]
 801eef6:	f7ff fb99 	bl	801e62c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801eefa:	69b8      	ldr	r0, [r7, #24]
 801eefc:	f7f5 fb56 	bl	80145ac <pbuf_clen>
 801ef00:	4603      	mov	r3, r0
 801ef02:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ef04:	8bfa      	ldrh	r2, [r7, #30]
 801ef06:	8a7b      	ldrh	r3, [r7, #18]
 801ef08:	4413      	add	r3, r2
 801ef0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ef0e:	db05      	blt.n	801ef1c <ip_reass_free_complete_datagram+0x98>
 801ef10:	4b27      	ldr	r3, [pc, #156]	; (801efb0 <ip_reass_free_complete_datagram+0x12c>)
 801ef12:	22bc      	movs	r2, #188	; 0xbc
 801ef14:	492a      	ldr	r1, [pc, #168]	; (801efc0 <ip_reass_free_complete_datagram+0x13c>)
 801ef16:	4828      	ldr	r0, [pc, #160]	; (801efb8 <ip_reass_free_complete_datagram+0x134>)
 801ef18:	f002 fbfe 	bl	8021718 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ef1c:	8bfa      	ldrh	r2, [r7, #30]
 801ef1e:	8a7b      	ldrh	r3, [r7, #18]
 801ef20:	4413      	add	r3, r2
 801ef22:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801ef24:	69b8      	ldr	r0, [r7, #24]
 801ef26:	f7f5 fab3 	bl	8014490 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801ef2a:	687b      	ldr	r3, [r7, #4]
 801ef2c:	685b      	ldr	r3, [r3, #4]
 801ef2e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801ef30:	e01f      	b.n	801ef72 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801ef32:	69bb      	ldr	r3, [r7, #24]
 801ef34:	685b      	ldr	r3, [r3, #4]
 801ef36:	617b      	str	r3, [r7, #20]
    pcur = p;
 801ef38:	69bb      	ldr	r3, [r7, #24]
 801ef3a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801ef3c:	697b      	ldr	r3, [r7, #20]
 801ef3e:	681b      	ldr	r3, [r3, #0]
 801ef40:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801ef42:	68f8      	ldr	r0, [r7, #12]
 801ef44:	f7f5 fb32 	bl	80145ac <pbuf_clen>
 801ef48:	4603      	mov	r3, r0
 801ef4a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ef4c:	8bfa      	ldrh	r2, [r7, #30]
 801ef4e:	8a7b      	ldrh	r3, [r7, #18]
 801ef50:	4413      	add	r3, r2
 801ef52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ef56:	db05      	blt.n	801ef64 <ip_reass_free_complete_datagram+0xe0>
 801ef58:	4b15      	ldr	r3, [pc, #84]	; (801efb0 <ip_reass_free_complete_datagram+0x12c>)
 801ef5a:	22cc      	movs	r2, #204	; 0xcc
 801ef5c:	4918      	ldr	r1, [pc, #96]	; (801efc0 <ip_reass_free_complete_datagram+0x13c>)
 801ef5e:	4816      	ldr	r0, [pc, #88]	; (801efb8 <ip_reass_free_complete_datagram+0x134>)
 801ef60:	f002 fbda 	bl	8021718 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ef64:	8bfa      	ldrh	r2, [r7, #30]
 801ef66:	8a7b      	ldrh	r3, [r7, #18]
 801ef68:	4413      	add	r3, r2
 801ef6a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801ef6c:	68f8      	ldr	r0, [r7, #12]
 801ef6e:	f7f5 fa8f 	bl	8014490 <pbuf_free>
  while (p != NULL) {
 801ef72:	69bb      	ldr	r3, [r7, #24]
 801ef74:	2b00      	cmp	r3, #0
 801ef76:	d1dc      	bne.n	801ef32 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801ef78:	6839      	ldr	r1, [r7, #0]
 801ef7a:	6878      	ldr	r0, [r7, #4]
 801ef7c:	f000 f8c2 	bl	801f104 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801ef80:	4b10      	ldr	r3, [pc, #64]	; (801efc4 <ip_reass_free_complete_datagram+0x140>)
 801ef82:	881b      	ldrh	r3, [r3, #0]
 801ef84:	8bfa      	ldrh	r2, [r7, #30]
 801ef86:	429a      	cmp	r2, r3
 801ef88:	d905      	bls.n	801ef96 <ip_reass_free_complete_datagram+0x112>
 801ef8a:	4b09      	ldr	r3, [pc, #36]	; (801efb0 <ip_reass_free_complete_datagram+0x12c>)
 801ef8c:	22d2      	movs	r2, #210	; 0xd2
 801ef8e:	490e      	ldr	r1, [pc, #56]	; (801efc8 <ip_reass_free_complete_datagram+0x144>)
 801ef90:	4809      	ldr	r0, [pc, #36]	; (801efb8 <ip_reass_free_complete_datagram+0x134>)
 801ef92:	f002 fbc1 	bl	8021718 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801ef96:	4b0b      	ldr	r3, [pc, #44]	; (801efc4 <ip_reass_free_complete_datagram+0x140>)
 801ef98:	881a      	ldrh	r2, [r3, #0]
 801ef9a:	8bfb      	ldrh	r3, [r7, #30]
 801ef9c:	1ad3      	subs	r3, r2, r3
 801ef9e:	b29a      	uxth	r2, r3
 801efa0:	4b08      	ldr	r3, [pc, #32]	; (801efc4 <ip_reass_free_complete_datagram+0x140>)
 801efa2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801efa4:	8bfb      	ldrh	r3, [r7, #30]
}
 801efa6:	4618      	mov	r0, r3
 801efa8:	3720      	adds	r7, #32
 801efaa:	46bd      	mov	sp, r7
 801efac:	bd80      	pop	{r7, pc}
 801efae:	bf00      	nop
 801efb0:	08026ee4 	.word	0x08026ee4
 801efb4:	08026f20 	.word	0x08026f20
 801efb8:	08026f2c 	.word	0x08026f2c
 801efbc:	08026f54 	.word	0x08026f54
 801efc0:	08026f68 	.word	0x08026f68
 801efc4:	200124ec 	.word	0x200124ec
 801efc8:	08026f88 	.word	0x08026f88

0801efcc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801efcc:	b580      	push	{r7, lr}
 801efce:	b08a      	sub	sp, #40	; 0x28
 801efd0:	af00      	add	r7, sp, #0
 801efd2:	6078      	str	r0, [r7, #4]
 801efd4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801efd6:	2300      	movs	r3, #0
 801efd8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801efda:	2300      	movs	r3, #0
 801efdc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801efde:	2300      	movs	r3, #0
 801efe0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801efe2:	2300      	movs	r3, #0
 801efe4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801efe6:	2300      	movs	r3, #0
 801efe8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801efea:	4b28      	ldr	r3, [pc, #160]	; (801f08c <ip_reass_remove_oldest_datagram+0xc0>)
 801efec:	681b      	ldr	r3, [r3, #0]
 801efee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801eff0:	e030      	b.n	801f054 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801eff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eff4:	695a      	ldr	r2, [r3, #20]
 801eff6:	687b      	ldr	r3, [r7, #4]
 801eff8:	68db      	ldr	r3, [r3, #12]
 801effa:	429a      	cmp	r2, r3
 801effc:	d10c      	bne.n	801f018 <ip_reass_remove_oldest_datagram+0x4c>
 801effe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f000:	699a      	ldr	r2, [r3, #24]
 801f002:	687b      	ldr	r3, [r7, #4]
 801f004:	691b      	ldr	r3, [r3, #16]
 801f006:	429a      	cmp	r2, r3
 801f008:	d106      	bne.n	801f018 <ip_reass_remove_oldest_datagram+0x4c>
 801f00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f00c:	899a      	ldrh	r2, [r3, #12]
 801f00e:	687b      	ldr	r3, [r7, #4]
 801f010:	889b      	ldrh	r3, [r3, #4]
 801f012:	b29b      	uxth	r3, r3
 801f014:	429a      	cmp	r2, r3
 801f016:	d014      	beq.n	801f042 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801f018:	693b      	ldr	r3, [r7, #16]
 801f01a:	3301      	adds	r3, #1
 801f01c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801f01e:	6a3b      	ldr	r3, [r7, #32]
 801f020:	2b00      	cmp	r3, #0
 801f022:	d104      	bne.n	801f02e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801f024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f026:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801f028:	69fb      	ldr	r3, [r7, #28]
 801f02a:	61bb      	str	r3, [r7, #24]
 801f02c:	e009      	b.n	801f042 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801f02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f030:	7fda      	ldrb	r2, [r3, #31]
 801f032:	6a3b      	ldr	r3, [r7, #32]
 801f034:	7fdb      	ldrb	r3, [r3, #31]
 801f036:	429a      	cmp	r2, r3
 801f038:	d803      	bhi.n	801f042 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801f03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f03c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801f03e:	69fb      	ldr	r3, [r7, #28]
 801f040:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801f042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f044:	681b      	ldr	r3, [r3, #0]
 801f046:	2b00      	cmp	r3, #0
 801f048:	d001      	beq.n	801f04e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801f04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f04c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801f04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f050:	681b      	ldr	r3, [r3, #0]
 801f052:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801f054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f056:	2b00      	cmp	r3, #0
 801f058:	d1cb      	bne.n	801eff2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801f05a:	6a3b      	ldr	r3, [r7, #32]
 801f05c:	2b00      	cmp	r3, #0
 801f05e:	d008      	beq.n	801f072 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801f060:	69b9      	ldr	r1, [r7, #24]
 801f062:	6a38      	ldr	r0, [r7, #32]
 801f064:	f7ff ff0e 	bl	801ee84 <ip_reass_free_complete_datagram>
 801f068:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801f06a:	697a      	ldr	r2, [r7, #20]
 801f06c:	68fb      	ldr	r3, [r7, #12]
 801f06e:	4413      	add	r3, r2
 801f070:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801f072:	697a      	ldr	r2, [r7, #20]
 801f074:	683b      	ldr	r3, [r7, #0]
 801f076:	429a      	cmp	r2, r3
 801f078:	da02      	bge.n	801f080 <ip_reass_remove_oldest_datagram+0xb4>
 801f07a:	693b      	ldr	r3, [r7, #16]
 801f07c:	2b01      	cmp	r3, #1
 801f07e:	dcac      	bgt.n	801efda <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801f080:	697b      	ldr	r3, [r7, #20]
}
 801f082:	4618      	mov	r0, r3
 801f084:	3728      	adds	r7, #40	; 0x28
 801f086:	46bd      	mov	sp, r7
 801f088:	bd80      	pop	{r7, pc}
 801f08a:	bf00      	nop
 801f08c:	200124e8 	.word	0x200124e8

0801f090 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801f090:	b580      	push	{r7, lr}
 801f092:	b084      	sub	sp, #16
 801f094:	af00      	add	r7, sp, #0
 801f096:	6078      	str	r0, [r7, #4]
 801f098:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801f09a:	2004      	movs	r0, #4
 801f09c:	f7f4 fad2 	bl	8013644 <memp_malloc>
 801f0a0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801f0a2:	68fb      	ldr	r3, [r7, #12]
 801f0a4:	2b00      	cmp	r3, #0
 801f0a6:	d110      	bne.n	801f0ca <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801f0a8:	6839      	ldr	r1, [r7, #0]
 801f0aa:	6878      	ldr	r0, [r7, #4]
 801f0ac:	f7ff ff8e 	bl	801efcc <ip_reass_remove_oldest_datagram>
 801f0b0:	4602      	mov	r2, r0
 801f0b2:	683b      	ldr	r3, [r7, #0]
 801f0b4:	4293      	cmp	r3, r2
 801f0b6:	dc03      	bgt.n	801f0c0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801f0b8:	2004      	movs	r0, #4
 801f0ba:	f7f4 fac3 	bl	8013644 <memp_malloc>
 801f0be:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801f0c0:	68fb      	ldr	r3, [r7, #12]
 801f0c2:	2b00      	cmp	r3, #0
 801f0c4:	d101      	bne.n	801f0ca <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801f0c6:	2300      	movs	r3, #0
 801f0c8:	e016      	b.n	801f0f8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801f0ca:	2220      	movs	r2, #32
 801f0cc:	2100      	movs	r1, #0
 801f0ce:	68f8      	ldr	r0, [r7, #12]
 801f0d0:	f002 fd38 	bl	8021b44 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801f0d4:	68fb      	ldr	r3, [r7, #12]
 801f0d6:	220f      	movs	r2, #15
 801f0d8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801f0da:	4b09      	ldr	r3, [pc, #36]	; (801f100 <ip_reass_enqueue_new_datagram+0x70>)
 801f0dc:	681a      	ldr	r2, [r3, #0]
 801f0de:	68fb      	ldr	r3, [r7, #12]
 801f0e0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801f0e2:	4a07      	ldr	r2, [pc, #28]	; (801f100 <ip_reass_enqueue_new_datagram+0x70>)
 801f0e4:	68fb      	ldr	r3, [r7, #12]
 801f0e6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801f0e8:	68fb      	ldr	r3, [r7, #12]
 801f0ea:	3308      	adds	r3, #8
 801f0ec:	2214      	movs	r2, #20
 801f0ee:	6879      	ldr	r1, [r7, #4]
 801f0f0:	4618      	mov	r0, r3
 801f0f2:	f002 fe38 	bl	8021d66 <memcpy>
  return ipr;
 801f0f6:	68fb      	ldr	r3, [r7, #12]
}
 801f0f8:	4618      	mov	r0, r3
 801f0fa:	3710      	adds	r7, #16
 801f0fc:	46bd      	mov	sp, r7
 801f0fe:	bd80      	pop	{r7, pc}
 801f100:	200124e8 	.word	0x200124e8

0801f104 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801f104:	b580      	push	{r7, lr}
 801f106:	b082      	sub	sp, #8
 801f108:	af00      	add	r7, sp, #0
 801f10a:	6078      	str	r0, [r7, #4]
 801f10c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801f10e:	4b10      	ldr	r3, [pc, #64]	; (801f150 <ip_reass_dequeue_datagram+0x4c>)
 801f110:	681b      	ldr	r3, [r3, #0]
 801f112:	687a      	ldr	r2, [r7, #4]
 801f114:	429a      	cmp	r2, r3
 801f116:	d104      	bne.n	801f122 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801f118:	687b      	ldr	r3, [r7, #4]
 801f11a:	681b      	ldr	r3, [r3, #0]
 801f11c:	4a0c      	ldr	r2, [pc, #48]	; (801f150 <ip_reass_dequeue_datagram+0x4c>)
 801f11e:	6013      	str	r3, [r2, #0]
 801f120:	e00d      	b.n	801f13e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801f122:	683b      	ldr	r3, [r7, #0]
 801f124:	2b00      	cmp	r3, #0
 801f126:	d106      	bne.n	801f136 <ip_reass_dequeue_datagram+0x32>
 801f128:	4b0a      	ldr	r3, [pc, #40]	; (801f154 <ip_reass_dequeue_datagram+0x50>)
 801f12a:	f240 1245 	movw	r2, #325	; 0x145
 801f12e:	490a      	ldr	r1, [pc, #40]	; (801f158 <ip_reass_dequeue_datagram+0x54>)
 801f130:	480a      	ldr	r0, [pc, #40]	; (801f15c <ip_reass_dequeue_datagram+0x58>)
 801f132:	f002 faf1 	bl	8021718 <iprintf>
    prev->next = ipr->next;
 801f136:	687b      	ldr	r3, [r7, #4]
 801f138:	681a      	ldr	r2, [r3, #0]
 801f13a:	683b      	ldr	r3, [r7, #0]
 801f13c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801f13e:	6879      	ldr	r1, [r7, #4]
 801f140:	2004      	movs	r0, #4
 801f142:	f7f4 faf5 	bl	8013730 <memp_free>
}
 801f146:	bf00      	nop
 801f148:	3708      	adds	r7, #8
 801f14a:	46bd      	mov	sp, r7
 801f14c:	bd80      	pop	{r7, pc}
 801f14e:	bf00      	nop
 801f150:	200124e8 	.word	0x200124e8
 801f154:	08026ee4 	.word	0x08026ee4
 801f158:	08026fac 	.word	0x08026fac
 801f15c:	08026f2c 	.word	0x08026f2c

0801f160 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801f160:	b580      	push	{r7, lr}
 801f162:	b08c      	sub	sp, #48	; 0x30
 801f164:	af00      	add	r7, sp, #0
 801f166:	60f8      	str	r0, [r7, #12]
 801f168:	60b9      	str	r1, [r7, #8]
 801f16a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801f16c:	2300      	movs	r3, #0
 801f16e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801f170:	2301      	movs	r3, #1
 801f172:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801f174:	68bb      	ldr	r3, [r7, #8]
 801f176:	685b      	ldr	r3, [r3, #4]
 801f178:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801f17a:	69fb      	ldr	r3, [r7, #28]
 801f17c:	885b      	ldrh	r3, [r3, #2]
 801f17e:	b29b      	uxth	r3, r3
 801f180:	4618      	mov	r0, r3
 801f182:	f7f3 fd87 	bl	8012c94 <lwip_htons>
 801f186:	4603      	mov	r3, r0
 801f188:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801f18a:	69fb      	ldr	r3, [r7, #28]
 801f18c:	781b      	ldrb	r3, [r3, #0]
 801f18e:	f003 030f 	and.w	r3, r3, #15
 801f192:	b2db      	uxtb	r3, r3
 801f194:	009b      	lsls	r3, r3, #2
 801f196:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801f198:	7e7b      	ldrb	r3, [r7, #25]
 801f19a:	b29b      	uxth	r3, r3
 801f19c:	8b7a      	ldrh	r2, [r7, #26]
 801f19e:	429a      	cmp	r2, r3
 801f1a0:	d202      	bcs.n	801f1a8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f1a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f1a6:	e135      	b.n	801f414 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801f1a8:	7e7b      	ldrb	r3, [r7, #25]
 801f1aa:	b29b      	uxth	r3, r3
 801f1ac:	8b7a      	ldrh	r2, [r7, #26]
 801f1ae:	1ad3      	subs	r3, r2, r3
 801f1b0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801f1b2:	69fb      	ldr	r3, [r7, #28]
 801f1b4:	88db      	ldrh	r3, [r3, #6]
 801f1b6:	b29b      	uxth	r3, r3
 801f1b8:	4618      	mov	r0, r3
 801f1ba:	f7f3 fd6b 	bl	8012c94 <lwip_htons>
 801f1be:	4603      	mov	r3, r0
 801f1c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f1c4:	b29b      	uxth	r3, r3
 801f1c6:	00db      	lsls	r3, r3, #3
 801f1c8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801f1ca:	68bb      	ldr	r3, [r7, #8]
 801f1cc:	685b      	ldr	r3, [r3, #4]
 801f1ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801f1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f1d2:	2200      	movs	r2, #0
 801f1d4:	701a      	strb	r2, [r3, #0]
 801f1d6:	2200      	movs	r2, #0
 801f1d8:	705a      	strb	r2, [r3, #1]
 801f1da:	2200      	movs	r2, #0
 801f1dc:	709a      	strb	r2, [r3, #2]
 801f1de:	2200      	movs	r2, #0
 801f1e0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801f1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f1e4:	8afa      	ldrh	r2, [r7, #22]
 801f1e6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801f1e8:	8afa      	ldrh	r2, [r7, #22]
 801f1ea:	8b7b      	ldrh	r3, [r7, #26]
 801f1ec:	4413      	add	r3, r2
 801f1ee:	b29a      	uxth	r2, r3
 801f1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f1f2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801f1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f1f6:	88db      	ldrh	r3, [r3, #6]
 801f1f8:	b29b      	uxth	r3, r3
 801f1fa:	8afa      	ldrh	r2, [r7, #22]
 801f1fc:	429a      	cmp	r2, r3
 801f1fe:	d902      	bls.n	801f206 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f204:	e106      	b.n	801f414 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801f206:	68fb      	ldr	r3, [r7, #12]
 801f208:	685b      	ldr	r3, [r3, #4]
 801f20a:	627b      	str	r3, [r7, #36]	; 0x24
 801f20c:	e068      	b.n	801f2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801f20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f210:	685b      	ldr	r3, [r3, #4]
 801f212:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801f214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f216:	889b      	ldrh	r3, [r3, #4]
 801f218:	b29a      	uxth	r2, r3
 801f21a:	693b      	ldr	r3, [r7, #16]
 801f21c:	889b      	ldrh	r3, [r3, #4]
 801f21e:	b29b      	uxth	r3, r3
 801f220:	429a      	cmp	r2, r3
 801f222:	d235      	bcs.n	801f290 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801f224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f228:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801f22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f22c:	2b00      	cmp	r3, #0
 801f22e:	d020      	beq.n	801f272 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801f230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f232:	889b      	ldrh	r3, [r3, #4]
 801f234:	b29a      	uxth	r2, r3
 801f236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f238:	88db      	ldrh	r3, [r3, #6]
 801f23a:	b29b      	uxth	r3, r3
 801f23c:	429a      	cmp	r2, r3
 801f23e:	d307      	bcc.n	801f250 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801f240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f242:	88db      	ldrh	r3, [r3, #6]
 801f244:	b29a      	uxth	r2, r3
 801f246:	693b      	ldr	r3, [r7, #16]
 801f248:	889b      	ldrh	r3, [r3, #4]
 801f24a:	b29b      	uxth	r3, r3
 801f24c:	429a      	cmp	r2, r3
 801f24e:	d902      	bls.n	801f256 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f254:	e0de      	b.n	801f414 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801f256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f258:	68ba      	ldr	r2, [r7, #8]
 801f25a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801f25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f25e:	88db      	ldrh	r3, [r3, #6]
 801f260:	b29a      	uxth	r2, r3
 801f262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f264:	889b      	ldrh	r3, [r3, #4]
 801f266:	b29b      	uxth	r3, r3
 801f268:	429a      	cmp	r2, r3
 801f26a:	d03d      	beq.n	801f2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801f26c:	2300      	movs	r3, #0
 801f26e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801f270:	e03a      	b.n	801f2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801f272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f274:	88db      	ldrh	r3, [r3, #6]
 801f276:	b29a      	uxth	r2, r3
 801f278:	693b      	ldr	r3, [r7, #16]
 801f27a:	889b      	ldrh	r3, [r3, #4]
 801f27c:	b29b      	uxth	r3, r3
 801f27e:	429a      	cmp	r2, r3
 801f280:	d902      	bls.n	801f288 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f282:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f286:	e0c5      	b.n	801f414 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801f288:	68fb      	ldr	r3, [r7, #12]
 801f28a:	68ba      	ldr	r2, [r7, #8]
 801f28c:	605a      	str	r2, [r3, #4]
      break;
 801f28e:	e02b      	b.n	801f2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801f290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f292:	889b      	ldrh	r3, [r3, #4]
 801f294:	b29a      	uxth	r2, r3
 801f296:	693b      	ldr	r3, [r7, #16]
 801f298:	889b      	ldrh	r3, [r3, #4]
 801f29a:	b29b      	uxth	r3, r3
 801f29c:	429a      	cmp	r2, r3
 801f29e:	d102      	bne.n	801f2a6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f2a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f2a4:	e0b6      	b.n	801f414 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801f2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f2a8:	889b      	ldrh	r3, [r3, #4]
 801f2aa:	b29a      	uxth	r2, r3
 801f2ac:	693b      	ldr	r3, [r7, #16]
 801f2ae:	88db      	ldrh	r3, [r3, #6]
 801f2b0:	b29b      	uxth	r3, r3
 801f2b2:	429a      	cmp	r2, r3
 801f2b4:	d202      	bcs.n	801f2bc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f2b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f2ba:	e0ab      	b.n	801f414 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801f2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f2be:	2b00      	cmp	r3, #0
 801f2c0:	d009      	beq.n	801f2d6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801f2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f2c4:	88db      	ldrh	r3, [r3, #6]
 801f2c6:	b29a      	uxth	r2, r3
 801f2c8:	693b      	ldr	r3, [r7, #16]
 801f2ca:	889b      	ldrh	r3, [r3, #4]
 801f2cc:	b29b      	uxth	r3, r3
 801f2ce:	429a      	cmp	r2, r3
 801f2d0:	d001      	beq.n	801f2d6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801f2d2:	2300      	movs	r3, #0
 801f2d4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801f2d6:	693b      	ldr	r3, [r7, #16]
 801f2d8:	681b      	ldr	r3, [r3, #0]
 801f2da:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801f2dc:	693b      	ldr	r3, [r7, #16]
 801f2de:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801f2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f2e2:	2b00      	cmp	r3, #0
 801f2e4:	d193      	bne.n	801f20e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801f2e6:	e000      	b.n	801f2ea <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801f2e8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801f2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f2ec:	2b00      	cmp	r3, #0
 801f2ee:	d12d      	bne.n	801f34c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801f2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f2f2:	2b00      	cmp	r3, #0
 801f2f4:	d01c      	beq.n	801f330 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801f2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f2f8:	88db      	ldrh	r3, [r3, #6]
 801f2fa:	b29a      	uxth	r2, r3
 801f2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f2fe:	889b      	ldrh	r3, [r3, #4]
 801f300:	b29b      	uxth	r3, r3
 801f302:	429a      	cmp	r2, r3
 801f304:	d906      	bls.n	801f314 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801f306:	4b45      	ldr	r3, [pc, #276]	; (801f41c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f308:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801f30c:	4944      	ldr	r1, [pc, #272]	; (801f420 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801f30e:	4845      	ldr	r0, [pc, #276]	; (801f424 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f310:	f002 fa02 	bl	8021718 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801f314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f316:	68ba      	ldr	r2, [r7, #8]
 801f318:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801f31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f31c:	88db      	ldrh	r3, [r3, #6]
 801f31e:	b29a      	uxth	r2, r3
 801f320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f322:	889b      	ldrh	r3, [r3, #4]
 801f324:	b29b      	uxth	r3, r3
 801f326:	429a      	cmp	r2, r3
 801f328:	d010      	beq.n	801f34c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801f32a:	2300      	movs	r3, #0
 801f32c:	623b      	str	r3, [r7, #32]
 801f32e:	e00d      	b.n	801f34c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801f330:	68fb      	ldr	r3, [r7, #12]
 801f332:	685b      	ldr	r3, [r3, #4]
 801f334:	2b00      	cmp	r3, #0
 801f336:	d006      	beq.n	801f346 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801f338:	4b38      	ldr	r3, [pc, #224]	; (801f41c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f33a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801f33e:	493a      	ldr	r1, [pc, #232]	; (801f428 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801f340:	4838      	ldr	r0, [pc, #224]	; (801f424 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f342:	f002 f9e9 	bl	8021718 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801f346:	68fb      	ldr	r3, [r7, #12]
 801f348:	68ba      	ldr	r2, [r7, #8]
 801f34a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801f34c:	687b      	ldr	r3, [r7, #4]
 801f34e:	2b00      	cmp	r3, #0
 801f350:	d105      	bne.n	801f35e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801f352:	68fb      	ldr	r3, [r7, #12]
 801f354:	7f9b      	ldrb	r3, [r3, #30]
 801f356:	f003 0301 	and.w	r3, r3, #1
 801f35a:	2b00      	cmp	r3, #0
 801f35c:	d059      	beq.n	801f412 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801f35e:	6a3b      	ldr	r3, [r7, #32]
 801f360:	2b00      	cmp	r3, #0
 801f362:	d04f      	beq.n	801f404 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801f364:	68fb      	ldr	r3, [r7, #12]
 801f366:	685b      	ldr	r3, [r3, #4]
 801f368:	2b00      	cmp	r3, #0
 801f36a:	d006      	beq.n	801f37a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801f36c:	68fb      	ldr	r3, [r7, #12]
 801f36e:	685b      	ldr	r3, [r3, #4]
 801f370:	685b      	ldr	r3, [r3, #4]
 801f372:	889b      	ldrh	r3, [r3, #4]
 801f374:	b29b      	uxth	r3, r3
 801f376:	2b00      	cmp	r3, #0
 801f378:	d002      	beq.n	801f380 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801f37a:	2300      	movs	r3, #0
 801f37c:	623b      	str	r3, [r7, #32]
 801f37e:	e041      	b.n	801f404 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801f380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f382:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801f384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f386:	681b      	ldr	r3, [r3, #0]
 801f388:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801f38a:	e012      	b.n	801f3b2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801f38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f38e:	685b      	ldr	r3, [r3, #4]
 801f390:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801f392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f394:	88db      	ldrh	r3, [r3, #6]
 801f396:	b29a      	uxth	r2, r3
 801f398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f39a:	889b      	ldrh	r3, [r3, #4]
 801f39c:	b29b      	uxth	r3, r3
 801f39e:	429a      	cmp	r2, r3
 801f3a0:	d002      	beq.n	801f3a8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801f3a2:	2300      	movs	r3, #0
 801f3a4:	623b      	str	r3, [r7, #32]
            break;
 801f3a6:	e007      	b.n	801f3b8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801f3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f3aa:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801f3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f3ae:	681b      	ldr	r3, [r3, #0]
 801f3b0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801f3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f3b4:	2b00      	cmp	r3, #0
 801f3b6:	d1e9      	bne.n	801f38c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801f3b8:	6a3b      	ldr	r3, [r7, #32]
 801f3ba:	2b00      	cmp	r3, #0
 801f3bc:	d022      	beq.n	801f404 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801f3be:	68fb      	ldr	r3, [r7, #12]
 801f3c0:	685b      	ldr	r3, [r3, #4]
 801f3c2:	2b00      	cmp	r3, #0
 801f3c4:	d106      	bne.n	801f3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801f3c6:	4b15      	ldr	r3, [pc, #84]	; (801f41c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f3c8:	f240 12df 	movw	r2, #479	; 0x1df
 801f3cc:	4917      	ldr	r1, [pc, #92]	; (801f42c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801f3ce:	4815      	ldr	r0, [pc, #84]	; (801f424 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f3d0:	f002 f9a2 	bl	8021718 <iprintf>
          LWIP_ASSERT("sanity check",
 801f3d4:	68fb      	ldr	r3, [r7, #12]
 801f3d6:	685b      	ldr	r3, [r3, #4]
 801f3d8:	685b      	ldr	r3, [r3, #4]
 801f3da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f3dc:	429a      	cmp	r2, r3
 801f3de:	d106      	bne.n	801f3ee <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801f3e0:	4b0e      	ldr	r3, [pc, #56]	; (801f41c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f3e2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801f3e6:	4911      	ldr	r1, [pc, #68]	; (801f42c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801f3e8:	480e      	ldr	r0, [pc, #56]	; (801f424 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f3ea:	f002 f995 	bl	8021718 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801f3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f3f0:	681b      	ldr	r3, [r3, #0]
 801f3f2:	2b00      	cmp	r3, #0
 801f3f4:	d006      	beq.n	801f404 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801f3f6:	4b09      	ldr	r3, [pc, #36]	; (801f41c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f3f8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801f3fc:	490c      	ldr	r1, [pc, #48]	; (801f430 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801f3fe:	4809      	ldr	r0, [pc, #36]	; (801f424 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f400:	f002 f98a 	bl	8021718 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801f404:	6a3b      	ldr	r3, [r7, #32]
 801f406:	2b00      	cmp	r3, #0
 801f408:	bf14      	ite	ne
 801f40a:	2301      	movne	r3, #1
 801f40c:	2300      	moveq	r3, #0
 801f40e:	b2db      	uxtb	r3, r3
 801f410:	e000      	b.n	801f414 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801f412:	2300      	movs	r3, #0
}
 801f414:	4618      	mov	r0, r3
 801f416:	3730      	adds	r7, #48	; 0x30
 801f418:	46bd      	mov	sp, r7
 801f41a:	bd80      	pop	{r7, pc}
 801f41c:	08026ee4 	.word	0x08026ee4
 801f420:	08026fc8 	.word	0x08026fc8
 801f424:	08026f2c 	.word	0x08026f2c
 801f428:	08026fe8 	.word	0x08026fe8
 801f42c:	08027020 	.word	0x08027020
 801f430:	08027030 	.word	0x08027030

0801f434 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801f434:	b580      	push	{r7, lr}
 801f436:	b08e      	sub	sp, #56	; 0x38
 801f438:	af00      	add	r7, sp, #0
 801f43a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801f43c:	687b      	ldr	r3, [r7, #4]
 801f43e:	685b      	ldr	r3, [r3, #4]
 801f440:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801f442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f444:	781b      	ldrb	r3, [r3, #0]
 801f446:	f003 030f 	and.w	r3, r3, #15
 801f44a:	b2db      	uxtb	r3, r3
 801f44c:	009b      	lsls	r3, r3, #2
 801f44e:	b2db      	uxtb	r3, r3
 801f450:	2b14      	cmp	r3, #20
 801f452:	f040 8171 	bne.w	801f738 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801f456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f458:	88db      	ldrh	r3, [r3, #6]
 801f45a:	b29b      	uxth	r3, r3
 801f45c:	4618      	mov	r0, r3
 801f45e:	f7f3 fc19 	bl	8012c94 <lwip_htons>
 801f462:	4603      	mov	r3, r0
 801f464:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f468:	b29b      	uxth	r3, r3
 801f46a:	00db      	lsls	r3, r3, #3
 801f46c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801f46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f470:	885b      	ldrh	r3, [r3, #2]
 801f472:	b29b      	uxth	r3, r3
 801f474:	4618      	mov	r0, r3
 801f476:	f7f3 fc0d 	bl	8012c94 <lwip_htons>
 801f47a:	4603      	mov	r3, r0
 801f47c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801f47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f480:	781b      	ldrb	r3, [r3, #0]
 801f482:	f003 030f 	and.w	r3, r3, #15
 801f486:	b2db      	uxtb	r3, r3
 801f488:	009b      	lsls	r3, r3, #2
 801f48a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801f48e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801f492:	b29b      	uxth	r3, r3
 801f494:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801f496:	429a      	cmp	r2, r3
 801f498:	f0c0 8150 	bcc.w	801f73c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801f49c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801f4a0:	b29b      	uxth	r3, r3
 801f4a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801f4a4:	1ad3      	subs	r3, r2, r3
 801f4a6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801f4a8:	6878      	ldr	r0, [r7, #4]
 801f4aa:	f7f5 f87f 	bl	80145ac <pbuf_clen>
 801f4ae:	4603      	mov	r3, r0
 801f4b0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801f4b2:	4b8c      	ldr	r3, [pc, #560]	; (801f6e4 <ip4_reass+0x2b0>)
 801f4b4:	881b      	ldrh	r3, [r3, #0]
 801f4b6:	461a      	mov	r2, r3
 801f4b8:	8c3b      	ldrh	r3, [r7, #32]
 801f4ba:	4413      	add	r3, r2
 801f4bc:	2b0a      	cmp	r3, #10
 801f4be:	dd10      	ble.n	801f4e2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801f4c0:	8c3b      	ldrh	r3, [r7, #32]
 801f4c2:	4619      	mov	r1, r3
 801f4c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f4c6:	f7ff fd81 	bl	801efcc <ip_reass_remove_oldest_datagram>
 801f4ca:	4603      	mov	r3, r0
 801f4cc:	2b00      	cmp	r3, #0
 801f4ce:	f000 8137 	beq.w	801f740 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801f4d2:	4b84      	ldr	r3, [pc, #528]	; (801f6e4 <ip4_reass+0x2b0>)
 801f4d4:	881b      	ldrh	r3, [r3, #0]
 801f4d6:	461a      	mov	r2, r3
 801f4d8:	8c3b      	ldrh	r3, [r7, #32]
 801f4da:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801f4dc:	2b0a      	cmp	r3, #10
 801f4de:	f300 812f 	bgt.w	801f740 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801f4e2:	4b81      	ldr	r3, [pc, #516]	; (801f6e8 <ip4_reass+0x2b4>)
 801f4e4:	681b      	ldr	r3, [r3, #0]
 801f4e6:	633b      	str	r3, [r7, #48]	; 0x30
 801f4e8:	e015      	b.n	801f516 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801f4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f4ec:	695a      	ldr	r2, [r3, #20]
 801f4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4f0:	68db      	ldr	r3, [r3, #12]
 801f4f2:	429a      	cmp	r2, r3
 801f4f4:	d10c      	bne.n	801f510 <ip4_reass+0xdc>
 801f4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f4f8:	699a      	ldr	r2, [r3, #24]
 801f4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4fc:	691b      	ldr	r3, [r3, #16]
 801f4fe:	429a      	cmp	r2, r3
 801f500:	d106      	bne.n	801f510 <ip4_reass+0xdc>
 801f502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f504:	899a      	ldrh	r2, [r3, #12]
 801f506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f508:	889b      	ldrh	r3, [r3, #4]
 801f50a:	b29b      	uxth	r3, r3
 801f50c:	429a      	cmp	r2, r3
 801f50e:	d006      	beq.n	801f51e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801f510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f512:	681b      	ldr	r3, [r3, #0]
 801f514:	633b      	str	r3, [r7, #48]	; 0x30
 801f516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f518:	2b00      	cmp	r3, #0
 801f51a:	d1e6      	bne.n	801f4ea <ip4_reass+0xb6>
 801f51c:	e000      	b.n	801f520 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801f51e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801f520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f522:	2b00      	cmp	r3, #0
 801f524:	d109      	bne.n	801f53a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801f526:	8c3b      	ldrh	r3, [r7, #32]
 801f528:	4619      	mov	r1, r3
 801f52a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f52c:	f7ff fdb0 	bl	801f090 <ip_reass_enqueue_new_datagram>
 801f530:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801f532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f534:	2b00      	cmp	r3, #0
 801f536:	d11c      	bne.n	801f572 <ip4_reass+0x13e>
      goto nullreturn;
 801f538:	e105      	b.n	801f746 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801f53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f53c:	88db      	ldrh	r3, [r3, #6]
 801f53e:	b29b      	uxth	r3, r3
 801f540:	4618      	mov	r0, r3
 801f542:	f7f3 fba7 	bl	8012c94 <lwip_htons>
 801f546:	4603      	mov	r3, r0
 801f548:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f54c:	2b00      	cmp	r3, #0
 801f54e:	d110      	bne.n	801f572 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801f550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f552:	89db      	ldrh	r3, [r3, #14]
 801f554:	4618      	mov	r0, r3
 801f556:	f7f3 fb9d 	bl	8012c94 <lwip_htons>
 801f55a:	4603      	mov	r3, r0
 801f55c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801f560:	2b00      	cmp	r3, #0
 801f562:	d006      	beq.n	801f572 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801f564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f566:	3308      	adds	r3, #8
 801f568:	2214      	movs	r2, #20
 801f56a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801f56c:	4618      	mov	r0, r3
 801f56e:	f002 fbfa 	bl	8021d66 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801f572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f574:	88db      	ldrh	r3, [r3, #6]
 801f576:	b29b      	uxth	r3, r3
 801f578:	f003 0320 	and.w	r3, r3, #32
 801f57c:	2b00      	cmp	r3, #0
 801f57e:	bf0c      	ite	eq
 801f580:	2301      	moveq	r3, #1
 801f582:	2300      	movne	r3, #0
 801f584:	b2db      	uxtb	r3, r3
 801f586:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801f588:	69fb      	ldr	r3, [r7, #28]
 801f58a:	2b00      	cmp	r3, #0
 801f58c:	d00e      	beq.n	801f5ac <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801f58e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801f590:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f592:	4413      	add	r3, r2
 801f594:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801f596:	8b7a      	ldrh	r2, [r7, #26]
 801f598:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801f59a:	429a      	cmp	r2, r3
 801f59c:	f0c0 80a0 	bcc.w	801f6e0 <ip4_reass+0x2ac>
 801f5a0:	8b7b      	ldrh	r3, [r7, #26]
 801f5a2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801f5a6:	4293      	cmp	r3, r2
 801f5a8:	f200 809a 	bhi.w	801f6e0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801f5ac:	69fa      	ldr	r2, [r7, #28]
 801f5ae:	6879      	ldr	r1, [r7, #4]
 801f5b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f5b2:	f7ff fdd5 	bl	801f160 <ip_reass_chain_frag_into_datagram_and_validate>
 801f5b6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801f5b8:	697b      	ldr	r3, [r7, #20]
 801f5ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f5be:	f000 809b 	beq.w	801f6f8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801f5c2:	4b48      	ldr	r3, [pc, #288]	; (801f6e4 <ip4_reass+0x2b0>)
 801f5c4:	881a      	ldrh	r2, [r3, #0]
 801f5c6:	8c3b      	ldrh	r3, [r7, #32]
 801f5c8:	4413      	add	r3, r2
 801f5ca:	b29a      	uxth	r2, r3
 801f5cc:	4b45      	ldr	r3, [pc, #276]	; (801f6e4 <ip4_reass+0x2b0>)
 801f5ce:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801f5d0:	69fb      	ldr	r3, [r7, #28]
 801f5d2:	2b00      	cmp	r3, #0
 801f5d4:	d00d      	beq.n	801f5f2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801f5d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801f5d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f5da:	4413      	add	r3, r2
 801f5dc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801f5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f5e0:	8a7a      	ldrh	r2, [r7, #18]
 801f5e2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801f5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f5e6:	7f9b      	ldrb	r3, [r3, #30]
 801f5e8:	f043 0301 	orr.w	r3, r3, #1
 801f5ec:	b2da      	uxtb	r2, r3
 801f5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f5f0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801f5f2:	697b      	ldr	r3, [r7, #20]
 801f5f4:	2b01      	cmp	r3, #1
 801f5f6:	d171      	bne.n	801f6dc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801f5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f5fa:	8b9b      	ldrh	r3, [r3, #28]
 801f5fc:	3314      	adds	r3, #20
 801f5fe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801f600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f602:	685b      	ldr	r3, [r3, #4]
 801f604:	685b      	ldr	r3, [r3, #4]
 801f606:	681b      	ldr	r3, [r3, #0]
 801f608:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801f60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f60c:	685b      	ldr	r3, [r3, #4]
 801f60e:	685b      	ldr	r3, [r3, #4]
 801f610:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801f612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f614:	3308      	adds	r3, #8
 801f616:	2214      	movs	r2, #20
 801f618:	4619      	mov	r1, r3
 801f61a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f61c:	f002 fba3 	bl	8021d66 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801f620:	8a3b      	ldrh	r3, [r7, #16]
 801f622:	4618      	mov	r0, r3
 801f624:	f7f3 fb36 	bl	8012c94 <lwip_htons>
 801f628:	4603      	mov	r3, r0
 801f62a:	461a      	mov	r2, r3
 801f62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f62e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801f630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f632:	2200      	movs	r2, #0
 801f634:	719a      	strb	r2, [r3, #6]
 801f636:	2200      	movs	r2, #0
 801f638:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801f63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f63c:	2200      	movs	r2, #0
 801f63e:	729a      	strb	r2, [r3, #10]
 801f640:	2200      	movs	r2, #0
 801f642:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801f644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f646:	685b      	ldr	r3, [r3, #4]
 801f648:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801f64a:	e00d      	b.n	801f668 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801f64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f64e:	685b      	ldr	r3, [r3, #4]
 801f650:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801f652:	2114      	movs	r1, #20
 801f654:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801f656:	f7f4 fe95 	bl	8014384 <pbuf_remove_header>
      pbuf_cat(p, r);
 801f65a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801f65c:	6878      	ldr	r0, [r7, #4]
 801f65e:	f7f4 ffe5 	bl	801462c <pbuf_cat>
      r = iprh->next_pbuf;
 801f662:	68fb      	ldr	r3, [r7, #12]
 801f664:	681b      	ldr	r3, [r3, #0]
 801f666:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801f668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f66a:	2b00      	cmp	r3, #0
 801f66c:	d1ee      	bne.n	801f64c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801f66e:	4b1e      	ldr	r3, [pc, #120]	; (801f6e8 <ip4_reass+0x2b4>)
 801f670:	681b      	ldr	r3, [r3, #0]
 801f672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f674:	429a      	cmp	r2, r3
 801f676:	d102      	bne.n	801f67e <ip4_reass+0x24a>
      ipr_prev = NULL;
 801f678:	2300      	movs	r3, #0
 801f67a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f67c:	e010      	b.n	801f6a0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801f67e:	4b1a      	ldr	r3, [pc, #104]	; (801f6e8 <ip4_reass+0x2b4>)
 801f680:	681b      	ldr	r3, [r3, #0]
 801f682:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f684:	e007      	b.n	801f696 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801f686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f688:	681b      	ldr	r3, [r3, #0]
 801f68a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f68c:	429a      	cmp	r2, r3
 801f68e:	d006      	beq.n	801f69e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801f690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f692:	681b      	ldr	r3, [r3, #0]
 801f694:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f698:	2b00      	cmp	r3, #0
 801f69a:	d1f4      	bne.n	801f686 <ip4_reass+0x252>
 801f69c:	e000      	b.n	801f6a0 <ip4_reass+0x26c>
          break;
 801f69e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801f6a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f6a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f6a4:	f7ff fd2e 	bl	801f104 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801f6a8:	6878      	ldr	r0, [r7, #4]
 801f6aa:	f7f4 ff7f 	bl	80145ac <pbuf_clen>
 801f6ae:	4603      	mov	r3, r0
 801f6b0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801f6b2:	4b0c      	ldr	r3, [pc, #48]	; (801f6e4 <ip4_reass+0x2b0>)
 801f6b4:	881b      	ldrh	r3, [r3, #0]
 801f6b6:	8c3a      	ldrh	r2, [r7, #32]
 801f6b8:	429a      	cmp	r2, r3
 801f6ba:	d906      	bls.n	801f6ca <ip4_reass+0x296>
 801f6bc:	4b0b      	ldr	r3, [pc, #44]	; (801f6ec <ip4_reass+0x2b8>)
 801f6be:	f240 229b 	movw	r2, #667	; 0x29b
 801f6c2:	490b      	ldr	r1, [pc, #44]	; (801f6f0 <ip4_reass+0x2bc>)
 801f6c4:	480b      	ldr	r0, [pc, #44]	; (801f6f4 <ip4_reass+0x2c0>)
 801f6c6:	f002 f827 	bl	8021718 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801f6ca:	4b06      	ldr	r3, [pc, #24]	; (801f6e4 <ip4_reass+0x2b0>)
 801f6cc:	881a      	ldrh	r2, [r3, #0]
 801f6ce:	8c3b      	ldrh	r3, [r7, #32]
 801f6d0:	1ad3      	subs	r3, r2, r3
 801f6d2:	b29a      	uxth	r2, r3
 801f6d4:	4b03      	ldr	r3, [pc, #12]	; (801f6e4 <ip4_reass+0x2b0>)
 801f6d6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801f6d8:	687b      	ldr	r3, [r7, #4]
 801f6da:	e038      	b.n	801f74e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801f6dc:	2300      	movs	r3, #0
 801f6de:	e036      	b.n	801f74e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801f6e0:	bf00      	nop
 801f6e2:	e00a      	b.n	801f6fa <ip4_reass+0x2c6>
 801f6e4:	200124ec 	.word	0x200124ec
 801f6e8:	200124e8 	.word	0x200124e8
 801f6ec:	08026ee4 	.word	0x08026ee4
 801f6f0:	08027054 	.word	0x08027054
 801f6f4:	08026f2c 	.word	0x08026f2c
    goto nullreturn_ipr;
 801f6f8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801f6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f6fc:	2b00      	cmp	r3, #0
 801f6fe:	d106      	bne.n	801f70e <ip4_reass+0x2da>
 801f700:	4b15      	ldr	r3, [pc, #84]	; (801f758 <ip4_reass+0x324>)
 801f702:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801f706:	4915      	ldr	r1, [pc, #84]	; (801f75c <ip4_reass+0x328>)
 801f708:	4815      	ldr	r0, [pc, #84]	; (801f760 <ip4_reass+0x32c>)
 801f70a:	f002 f805 	bl	8021718 <iprintf>
  if (ipr->p == NULL) {
 801f70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f710:	685b      	ldr	r3, [r3, #4]
 801f712:	2b00      	cmp	r3, #0
 801f714:	d116      	bne.n	801f744 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801f716:	4b13      	ldr	r3, [pc, #76]	; (801f764 <ip4_reass+0x330>)
 801f718:	681b      	ldr	r3, [r3, #0]
 801f71a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f71c:	429a      	cmp	r2, r3
 801f71e:	d006      	beq.n	801f72e <ip4_reass+0x2fa>
 801f720:	4b0d      	ldr	r3, [pc, #52]	; (801f758 <ip4_reass+0x324>)
 801f722:	f240 22ab 	movw	r2, #683	; 0x2ab
 801f726:	4910      	ldr	r1, [pc, #64]	; (801f768 <ip4_reass+0x334>)
 801f728:	480d      	ldr	r0, [pc, #52]	; (801f760 <ip4_reass+0x32c>)
 801f72a:	f001 fff5 	bl	8021718 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801f72e:	2100      	movs	r1, #0
 801f730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f732:	f7ff fce7 	bl	801f104 <ip_reass_dequeue_datagram>
 801f736:	e006      	b.n	801f746 <ip4_reass+0x312>
    goto nullreturn;
 801f738:	bf00      	nop
 801f73a:	e004      	b.n	801f746 <ip4_reass+0x312>
    goto nullreturn;
 801f73c:	bf00      	nop
 801f73e:	e002      	b.n	801f746 <ip4_reass+0x312>
      goto nullreturn;
 801f740:	bf00      	nop
 801f742:	e000      	b.n	801f746 <ip4_reass+0x312>
  }

nullreturn:
 801f744:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801f746:	6878      	ldr	r0, [r7, #4]
 801f748:	f7f4 fea2 	bl	8014490 <pbuf_free>
  return NULL;
 801f74c:	2300      	movs	r3, #0
}
 801f74e:	4618      	mov	r0, r3
 801f750:	3738      	adds	r7, #56	; 0x38
 801f752:	46bd      	mov	sp, r7
 801f754:	bd80      	pop	{r7, pc}
 801f756:	bf00      	nop
 801f758:	08026ee4 	.word	0x08026ee4
 801f75c:	08027070 	.word	0x08027070
 801f760:	08026f2c 	.word	0x08026f2c
 801f764:	200124e8 	.word	0x200124e8
 801f768:	0802707c 	.word	0x0802707c

0801f76c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801f76c:	b580      	push	{r7, lr}
 801f76e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801f770:	2005      	movs	r0, #5
 801f772:	f7f3 ff67 	bl	8013644 <memp_malloc>
 801f776:	4603      	mov	r3, r0
}
 801f778:	4618      	mov	r0, r3
 801f77a:	bd80      	pop	{r7, pc}

0801f77c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801f77c:	b580      	push	{r7, lr}
 801f77e:	b082      	sub	sp, #8
 801f780:	af00      	add	r7, sp, #0
 801f782:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801f784:	687b      	ldr	r3, [r7, #4]
 801f786:	2b00      	cmp	r3, #0
 801f788:	d106      	bne.n	801f798 <ip_frag_free_pbuf_custom_ref+0x1c>
 801f78a:	4b07      	ldr	r3, [pc, #28]	; (801f7a8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801f78c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801f790:	4906      	ldr	r1, [pc, #24]	; (801f7ac <ip_frag_free_pbuf_custom_ref+0x30>)
 801f792:	4807      	ldr	r0, [pc, #28]	; (801f7b0 <ip_frag_free_pbuf_custom_ref+0x34>)
 801f794:	f001 ffc0 	bl	8021718 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801f798:	6879      	ldr	r1, [r7, #4]
 801f79a:	2005      	movs	r0, #5
 801f79c:	f7f3 ffc8 	bl	8013730 <memp_free>
}
 801f7a0:	bf00      	nop
 801f7a2:	3708      	adds	r7, #8
 801f7a4:	46bd      	mov	sp, r7
 801f7a6:	bd80      	pop	{r7, pc}
 801f7a8:	08026ee4 	.word	0x08026ee4
 801f7ac:	0802709c 	.word	0x0802709c
 801f7b0:	08026f2c 	.word	0x08026f2c

0801f7b4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801f7b4:	b580      	push	{r7, lr}
 801f7b6:	b084      	sub	sp, #16
 801f7b8:	af00      	add	r7, sp, #0
 801f7ba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801f7bc:	687b      	ldr	r3, [r7, #4]
 801f7be:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801f7c0:	68fb      	ldr	r3, [r7, #12]
 801f7c2:	2b00      	cmp	r3, #0
 801f7c4:	d106      	bne.n	801f7d4 <ipfrag_free_pbuf_custom+0x20>
 801f7c6:	4b11      	ldr	r3, [pc, #68]	; (801f80c <ipfrag_free_pbuf_custom+0x58>)
 801f7c8:	f240 22ce 	movw	r2, #718	; 0x2ce
 801f7cc:	4910      	ldr	r1, [pc, #64]	; (801f810 <ipfrag_free_pbuf_custom+0x5c>)
 801f7ce:	4811      	ldr	r0, [pc, #68]	; (801f814 <ipfrag_free_pbuf_custom+0x60>)
 801f7d0:	f001 ffa2 	bl	8021718 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801f7d4:	68fa      	ldr	r2, [r7, #12]
 801f7d6:	687b      	ldr	r3, [r7, #4]
 801f7d8:	429a      	cmp	r2, r3
 801f7da:	d006      	beq.n	801f7ea <ipfrag_free_pbuf_custom+0x36>
 801f7dc:	4b0b      	ldr	r3, [pc, #44]	; (801f80c <ipfrag_free_pbuf_custom+0x58>)
 801f7de:	f240 22cf 	movw	r2, #719	; 0x2cf
 801f7e2:	490d      	ldr	r1, [pc, #52]	; (801f818 <ipfrag_free_pbuf_custom+0x64>)
 801f7e4:	480b      	ldr	r0, [pc, #44]	; (801f814 <ipfrag_free_pbuf_custom+0x60>)
 801f7e6:	f001 ff97 	bl	8021718 <iprintf>
  if (pcr->original != NULL) {
 801f7ea:	68fb      	ldr	r3, [r7, #12]
 801f7ec:	695b      	ldr	r3, [r3, #20]
 801f7ee:	2b00      	cmp	r3, #0
 801f7f0:	d004      	beq.n	801f7fc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801f7f2:	68fb      	ldr	r3, [r7, #12]
 801f7f4:	695b      	ldr	r3, [r3, #20]
 801f7f6:	4618      	mov	r0, r3
 801f7f8:	f7f4 fe4a 	bl	8014490 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801f7fc:	68f8      	ldr	r0, [r7, #12]
 801f7fe:	f7ff ffbd 	bl	801f77c <ip_frag_free_pbuf_custom_ref>
}
 801f802:	bf00      	nop
 801f804:	3710      	adds	r7, #16
 801f806:	46bd      	mov	sp, r7
 801f808:	bd80      	pop	{r7, pc}
 801f80a:	bf00      	nop
 801f80c:	08026ee4 	.word	0x08026ee4
 801f810:	080270a8 	.word	0x080270a8
 801f814:	08026f2c 	.word	0x08026f2c
 801f818:	080270b4 	.word	0x080270b4

0801f81c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801f81c:	b580      	push	{r7, lr}
 801f81e:	b094      	sub	sp, #80	; 0x50
 801f820:	af02      	add	r7, sp, #8
 801f822:	60f8      	str	r0, [r7, #12]
 801f824:	60b9      	str	r1, [r7, #8]
 801f826:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801f828:	2300      	movs	r3, #0
 801f82a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801f82e:	68bb      	ldr	r3, [r7, #8]
 801f830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801f832:	3b14      	subs	r3, #20
 801f834:	2b00      	cmp	r3, #0
 801f836:	da00      	bge.n	801f83a <ip4_frag+0x1e>
 801f838:	3307      	adds	r3, #7
 801f83a:	10db      	asrs	r3, r3, #3
 801f83c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801f83e:	2314      	movs	r3, #20
 801f840:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801f842:	68fb      	ldr	r3, [r7, #12]
 801f844:	685b      	ldr	r3, [r3, #4]
 801f846:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801f848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f84a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801f84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f84e:	781b      	ldrb	r3, [r3, #0]
 801f850:	f003 030f 	and.w	r3, r3, #15
 801f854:	b2db      	uxtb	r3, r3
 801f856:	009b      	lsls	r3, r3, #2
 801f858:	b2db      	uxtb	r3, r3
 801f85a:	2b14      	cmp	r3, #20
 801f85c:	d002      	beq.n	801f864 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801f85e:	f06f 0305 	mvn.w	r3, #5
 801f862:	e110      	b.n	801fa86 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801f864:	68fb      	ldr	r3, [r7, #12]
 801f866:	895b      	ldrh	r3, [r3, #10]
 801f868:	2b13      	cmp	r3, #19
 801f86a:	d809      	bhi.n	801f880 <ip4_frag+0x64>
 801f86c:	4b88      	ldr	r3, [pc, #544]	; (801fa90 <ip4_frag+0x274>)
 801f86e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801f872:	4988      	ldr	r1, [pc, #544]	; (801fa94 <ip4_frag+0x278>)
 801f874:	4888      	ldr	r0, [pc, #544]	; (801fa98 <ip4_frag+0x27c>)
 801f876:	f001 ff4f 	bl	8021718 <iprintf>
 801f87a:	f06f 0305 	mvn.w	r3, #5
 801f87e:	e102      	b.n	801fa86 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801f880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f882:	88db      	ldrh	r3, [r3, #6]
 801f884:	b29b      	uxth	r3, r3
 801f886:	4618      	mov	r0, r3
 801f888:	f7f3 fa04 	bl	8012c94 <lwip_htons>
 801f88c:	4603      	mov	r3, r0
 801f88e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801f890:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801f892:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f896:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801f89a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801f89c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801f8a0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801f8a2:	68fb      	ldr	r3, [r7, #12]
 801f8a4:	891b      	ldrh	r3, [r3, #8]
 801f8a6:	3b14      	subs	r3, #20
 801f8a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801f8ac:	e0e1      	b.n	801fa72 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801f8ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801f8b0:	00db      	lsls	r3, r3, #3
 801f8b2:	b29b      	uxth	r3, r3
 801f8b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801f8b8:	4293      	cmp	r3, r2
 801f8ba:	bf28      	it	cs
 801f8bc:	4613      	movcs	r3, r2
 801f8be:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801f8c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f8c4:	2114      	movs	r1, #20
 801f8c6:	200e      	movs	r0, #14
 801f8c8:	f7f4 fafe 	bl	8013ec8 <pbuf_alloc>
 801f8cc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801f8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8d0:	2b00      	cmp	r3, #0
 801f8d2:	f000 80d5 	beq.w	801fa80 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801f8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8d8:	895b      	ldrh	r3, [r3, #10]
 801f8da:	2b13      	cmp	r3, #19
 801f8dc:	d806      	bhi.n	801f8ec <ip4_frag+0xd0>
 801f8de:	4b6c      	ldr	r3, [pc, #432]	; (801fa90 <ip4_frag+0x274>)
 801f8e0:	f44f 7249 	mov.w	r2, #804	; 0x324
 801f8e4:	496d      	ldr	r1, [pc, #436]	; (801fa9c <ip4_frag+0x280>)
 801f8e6:	486c      	ldr	r0, [pc, #432]	; (801fa98 <ip4_frag+0x27c>)
 801f8e8:	f001 ff16 	bl	8021718 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801f8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8ee:	685b      	ldr	r3, [r3, #4]
 801f8f0:	2214      	movs	r2, #20
 801f8f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801f8f4:	4618      	mov	r0, r3
 801f8f6:	f002 fa36 	bl	8021d66 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801f8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8fc:	685b      	ldr	r3, [r3, #4]
 801f8fe:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801f900:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801f902:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801f906:	e064      	b.n	801f9d2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801f908:	68fb      	ldr	r3, [r7, #12]
 801f90a:	895a      	ldrh	r2, [r3, #10]
 801f90c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801f90e:	1ad3      	subs	r3, r2, r3
 801f910:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801f912:	68fb      	ldr	r3, [r7, #12]
 801f914:	895b      	ldrh	r3, [r3, #10]
 801f916:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801f918:	429a      	cmp	r2, r3
 801f91a:	d906      	bls.n	801f92a <ip4_frag+0x10e>
 801f91c:	4b5c      	ldr	r3, [pc, #368]	; (801fa90 <ip4_frag+0x274>)
 801f91e:	f240 322d 	movw	r2, #813	; 0x32d
 801f922:	495f      	ldr	r1, [pc, #380]	; (801faa0 <ip4_frag+0x284>)
 801f924:	485c      	ldr	r0, [pc, #368]	; (801fa98 <ip4_frag+0x27c>)
 801f926:	f001 fef7 	bl	8021718 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801f92a:	8bfa      	ldrh	r2, [r7, #30]
 801f92c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801f930:	4293      	cmp	r3, r2
 801f932:	bf28      	it	cs
 801f934:	4613      	movcs	r3, r2
 801f936:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801f93a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801f93e:	2b00      	cmp	r3, #0
 801f940:	d105      	bne.n	801f94e <ip4_frag+0x132>
        poff = 0;
 801f942:	2300      	movs	r3, #0
 801f944:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801f946:	68fb      	ldr	r3, [r7, #12]
 801f948:	681b      	ldr	r3, [r3, #0]
 801f94a:	60fb      	str	r3, [r7, #12]
        continue;
 801f94c:	e041      	b.n	801f9d2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801f94e:	f7ff ff0d 	bl	801f76c <ip_frag_alloc_pbuf_custom_ref>
 801f952:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801f954:	69bb      	ldr	r3, [r7, #24]
 801f956:	2b00      	cmp	r3, #0
 801f958:	d103      	bne.n	801f962 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801f95a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f95c:	f7f4 fd98 	bl	8014490 <pbuf_free>
        goto memerr;
 801f960:	e08f      	b.n	801fa82 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801f962:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801f964:	68fb      	ldr	r3, [r7, #12]
 801f966:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801f968:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801f96a:	4413      	add	r3, r2
 801f96c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801f970:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801f974:	9201      	str	r2, [sp, #4]
 801f976:	9300      	str	r3, [sp, #0]
 801f978:	4603      	mov	r3, r0
 801f97a:	2241      	movs	r2, #65	; 0x41
 801f97c:	2000      	movs	r0, #0
 801f97e:	f7f4 fbcd 	bl	801411c <pbuf_alloced_custom>
 801f982:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801f984:	697b      	ldr	r3, [r7, #20]
 801f986:	2b00      	cmp	r3, #0
 801f988:	d106      	bne.n	801f998 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801f98a:	69b8      	ldr	r0, [r7, #24]
 801f98c:	f7ff fef6 	bl	801f77c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801f990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f992:	f7f4 fd7d 	bl	8014490 <pbuf_free>
        goto memerr;
 801f996:	e074      	b.n	801fa82 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801f998:	68f8      	ldr	r0, [r7, #12]
 801f99a:	f7f4 fe1f 	bl	80145dc <pbuf_ref>
      pcr->original = p;
 801f99e:	69bb      	ldr	r3, [r7, #24]
 801f9a0:	68fa      	ldr	r2, [r7, #12]
 801f9a2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801f9a4:	69bb      	ldr	r3, [r7, #24]
 801f9a6:	4a3f      	ldr	r2, [pc, #252]	; (801faa4 <ip4_frag+0x288>)
 801f9a8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801f9aa:	6979      	ldr	r1, [r7, #20]
 801f9ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f9ae:	f7f4 fe3d 	bl	801462c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801f9b2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801f9b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801f9ba:	1ad3      	subs	r3, r2, r3
 801f9bc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801f9c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801f9c4:	2b00      	cmp	r3, #0
 801f9c6:	d004      	beq.n	801f9d2 <ip4_frag+0x1b6>
        poff = 0;
 801f9c8:	2300      	movs	r3, #0
 801f9ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801f9cc:	68fb      	ldr	r3, [r7, #12]
 801f9ce:	681b      	ldr	r3, [r3, #0]
 801f9d0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801f9d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801f9d6:	2b00      	cmp	r3, #0
 801f9d8:	d196      	bne.n	801f908 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801f9da:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801f9dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801f9e0:	4413      	add	r3, r2
 801f9e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801f9e4:	68bb      	ldr	r3, [r7, #8]
 801f9e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801f9e8:	f1a3 0213 	sub.w	r2, r3, #19
 801f9ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f9f0:	429a      	cmp	r2, r3
 801f9f2:	bfcc      	ite	gt
 801f9f4:	2301      	movgt	r3, #1
 801f9f6:	2300      	movle	r3, #0
 801f9f8:	b2db      	uxtb	r3, r3
 801f9fa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801f9fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801fa00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801fa04:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801fa06:	6a3b      	ldr	r3, [r7, #32]
 801fa08:	2b00      	cmp	r3, #0
 801fa0a:	d002      	beq.n	801fa12 <ip4_frag+0x1f6>
 801fa0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fa0e:	2b00      	cmp	r3, #0
 801fa10:	d003      	beq.n	801fa1a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801fa12:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801fa14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801fa18:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801fa1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801fa1c:	4618      	mov	r0, r3
 801fa1e:	f7f3 f939 	bl	8012c94 <lwip_htons>
 801fa22:	4603      	mov	r3, r0
 801fa24:	461a      	mov	r2, r3
 801fa26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fa28:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801fa2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801fa2c:	3314      	adds	r3, #20
 801fa2e:	b29b      	uxth	r3, r3
 801fa30:	4618      	mov	r0, r3
 801fa32:	f7f3 f92f 	bl	8012c94 <lwip_htons>
 801fa36:	4603      	mov	r3, r0
 801fa38:	461a      	mov	r2, r3
 801fa3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fa3c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801fa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fa40:	2200      	movs	r2, #0
 801fa42:	729a      	strb	r2, [r3, #10]
 801fa44:	2200      	movs	r2, #0
 801fa46:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801fa48:	68bb      	ldr	r3, [r7, #8]
 801fa4a:	695b      	ldr	r3, [r3, #20]
 801fa4c:	687a      	ldr	r2, [r7, #4]
 801fa4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801fa50:	68b8      	ldr	r0, [r7, #8]
 801fa52:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801fa54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801fa56:	f7f4 fd1b 	bl	8014490 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801fa5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801fa5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801fa60:	1ad3      	subs	r3, r2, r3
 801fa62:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801fa66:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801fa6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801fa6c:	4413      	add	r3, r2
 801fa6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801fa72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801fa76:	2b00      	cmp	r3, #0
 801fa78:	f47f af19 	bne.w	801f8ae <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801fa7c:	2300      	movs	r3, #0
 801fa7e:	e002      	b.n	801fa86 <ip4_frag+0x26a>
      goto memerr;
 801fa80:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801fa82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801fa86:	4618      	mov	r0, r3
 801fa88:	3748      	adds	r7, #72	; 0x48
 801fa8a:	46bd      	mov	sp, r7
 801fa8c:	bd80      	pop	{r7, pc}
 801fa8e:	bf00      	nop
 801fa90:	08026ee4 	.word	0x08026ee4
 801fa94:	080270c0 	.word	0x080270c0
 801fa98:	08026f2c 	.word	0x08026f2c
 801fa9c:	080270dc 	.word	0x080270dc
 801faa0:	080270fc 	.word	0x080270fc
 801faa4:	0801f7b5 	.word	0x0801f7b5

0801faa8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801faa8:	b580      	push	{r7, lr}
 801faaa:	b086      	sub	sp, #24
 801faac:	af00      	add	r7, sp, #0
 801faae:	6078      	str	r0, [r7, #4]
 801fab0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801fab2:	230e      	movs	r3, #14
 801fab4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801fab6:	687b      	ldr	r3, [r7, #4]
 801fab8:	895b      	ldrh	r3, [r3, #10]
 801faba:	2b0e      	cmp	r3, #14
 801fabc:	d96e      	bls.n	801fb9c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801fabe:	687b      	ldr	r3, [r7, #4]
 801fac0:	7bdb      	ldrb	r3, [r3, #15]
 801fac2:	2b00      	cmp	r3, #0
 801fac4:	d106      	bne.n	801fad4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801fac6:	683b      	ldr	r3, [r7, #0]
 801fac8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801facc:	3301      	adds	r3, #1
 801face:	b2da      	uxtb	r2, r3
 801fad0:	687b      	ldr	r3, [r7, #4]
 801fad2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801fad4:	687b      	ldr	r3, [r7, #4]
 801fad6:	685b      	ldr	r3, [r3, #4]
 801fad8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801fada:	693b      	ldr	r3, [r7, #16]
 801fadc:	7b1a      	ldrb	r2, [r3, #12]
 801fade:	7b5b      	ldrb	r3, [r3, #13]
 801fae0:	021b      	lsls	r3, r3, #8
 801fae2:	4313      	orrs	r3, r2
 801fae4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801fae6:	693b      	ldr	r3, [r7, #16]
 801fae8:	781b      	ldrb	r3, [r3, #0]
 801faea:	f003 0301 	and.w	r3, r3, #1
 801faee:	2b00      	cmp	r3, #0
 801faf0:	d023      	beq.n	801fb3a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801faf2:	693b      	ldr	r3, [r7, #16]
 801faf4:	781b      	ldrb	r3, [r3, #0]
 801faf6:	2b01      	cmp	r3, #1
 801faf8:	d10f      	bne.n	801fb1a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801fafa:	693b      	ldr	r3, [r7, #16]
 801fafc:	785b      	ldrb	r3, [r3, #1]
 801fafe:	2b00      	cmp	r3, #0
 801fb00:	d11b      	bne.n	801fb3a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801fb02:	693b      	ldr	r3, [r7, #16]
 801fb04:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801fb06:	2b5e      	cmp	r3, #94	; 0x5e
 801fb08:	d117      	bne.n	801fb3a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801fb0a:	687b      	ldr	r3, [r7, #4]
 801fb0c:	7b5b      	ldrb	r3, [r3, #13]
 801fb0e:	f043 0310 	orr.w	r3, r3, #16
 801fb12:	b2da      	uxtb	r2, r3
 801fb14:	687b      	ldr	r3, [r7, #4]
 801fb16:	735a      	strb	r2, [r3, #13]
 801fb18:	e00f      	b.n	801fb3a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801fb1a:	693b      	ldr	r3, [r7, #16]
 801fb1c:	2206      	movs	r2, #6
 801fb1e:	4928      	ldr	r1, [pc, #160]	; (801fbc0 <ethernet_input+0x118>)
 801fb20:	4618      	mov	r0, r3
 801fb22:	f001 ffe5 	bl	8021af0 <memcmp>
 801fb26:	4603      	mov	r3, r0
 801fb28:	2b00      	cmp	r3, #0
 801fb2a:	d106      	bne.n	801fb3a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801fb2c:	687b      	ldr	r3, [r7, #4]
 801fb2e:	7b5b      	ldrb	r3, [r3, #13]
 801fb30:	f043 0308 	orr.w	r3, r3, #8
 801fb34:	b2da      	uxtb	r2, r3
 801fb36:	687b      	ldr	r3, [r7, #4]
 801fb38:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801fb3a:	89fb      	ldrh	r3, [r7, #14]
 801fb3c:	2b08      	cmp	r3, #8
 801fb3e:	d003      	beq.n	801fb48 <ethernet_input+0xa0>
 801fb40:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801fb44:	d014      	beq.n	801fb70 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801fb46:	e032      	b.n	801fbae <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801fb48:	683b      	ldr	r3, [r7, #0]
 801fb4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801fb4e:	f003 0308 	and.w	r3, r3, #8
 801fb52:	2b00      	cmp	r3, #0
 801fb54:	d024      	beq.n	801fba0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801fb56:	8afb      	ldrh	r3, [r7, #22]
 801fb58:	4619      	mov	r1, r3
 801fb5a:	6878      	ldr	r0, [r7, #4]
 801fb5c:	f7f4 fc12 	bl	8014384 <pbuf_remove_header>
 801fb60:	4603      	mov	r3, r0
 801fb62:	2b00      	cmp	r3, #0
 801fb64:	d11e      	bne.n	801fba4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801fb66:	6839      	ldr	r1, [r7, #0]
 801fb68:	6878      	ldr	r0, [r7, #4]
 801fb6a:	f7fe fe73 	bl	801e854 <ip4_input>
      break;
 801fb6e:	e013      	b.n	801fb98 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801fb70:	683b      	ldr	r3, [r7, #0]
 801fb72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801fb76:	f003 0308 	and.w	r3, r3, #8
 801fb7a:	2b00      	cmp	r3, #0
 801fb7c:	d014      	beq.n	801fba8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801fb7e:	8afb      	ldrh	r3, [r7, #22]
 801fb80:	4619      	mov	r1, r3
 801fb82:	6878      	ldr	r0, [r7, #4]
 801fb84:	f7f4 fbfe 	bl	8014384 <pbuf_remove_header>
 801fb88:	4603      	mov	r3, r0
 801fb8a:	2b00      	cmp	r3, #0
 801fb8c:	d10e      	bne.n	801fbac <ethernet_input+0x104>
        etharp_input(p, netif);
 801fb8e:	6839      	ldr	r1, [r7, #0]
 801fb90:	6878      	ldr	r0, [r7, #4]
 801fb92:	f7fe f80f 	bl	801dbb4 <etharp_input>
      break;
 801fb96:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801fb98:	2300      	movs	r3, #0
 801fb9a:	e00c      	b.n	801fbb6 <ethernet_input+0x10e>
    goto free_and_return;
 801fb9c:	bf00      	nop
 801fb9e:	e006      	b.n	801fbae <ethernet_input+0x106>
        goto free_and_return;
 801fba0:	bf00      	nop
 801fba2:	e004      	b.n	801fbae <ethernet_input+0x106>
        goto free_and_return;
 801fba4:	bf00      	nop
 801fba6:	e002      	b.n	801fbae <ethernet_input+0x106>
        goto free_and_return;
 801fba8:	bf00      	nop
 801fbaa:	e000      	b.n	801fbae <ethernet_input+0x106>
        goto free_and_return;
 801fbac:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801fbae:	6878      	ldr	r0, [r7, #4]
 801fbb0:	f7f4 fc6e 	bl	8014490 <pbuf_free>
  return ERR_OK;
 801fbb4:	2300      	movs	r3, #0
}
 801fbb6:	4618      	mov	r0, r3
 801fbb8:	3718      	adds	r7, #24
 801fbba:	46bd      	mov	sp, r7
 801fbbc:	bd80      	pop	{r7, pc}
 801fbbe:	bf00      	nop
 801fbc0:	08027408 	.word	0x08027408

0801fbc4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801fbc4:	b580      	push	{r7, lr}
 801fbc6:	b086      	sub	sp, #24
 801fbc8:	af00      	add	r7, sp, #0
 801fbca:	60f8      	str	r0, [r7, #12]
 801fbcc:	60b9      	str	r1, [r7, #8]
 801fbce:	607a      	str	r2, [r7, #4]
 801fbd0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801fbd2:	8c3b      	ldrh	r3, [r7, #32]
 801fbd4:	4618      	mov	r0, r3
 801fbd6:	f7f3 f85d 	bl	8012c94 <lwip_htons>
 801fbda:	4603      	mov	r3, r0
 801fbdc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801fbde:	210e      	movs	r1, #14
 801fbe0:	68b8      	ldr	r0, [r7, #8]
 801fbe2:	f7f4 fbbf 	bl	8014364 <pbuf_add_header>
 801fbe6:	4603      	mov	r3, r0
 801fbe8:	2b00      	cmp	r3, #0
 801fbea:	d125      	bne.n	801fc38 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801fbec:	68bb      	ldr	r3, [r7, #8]
 801fbee:	685b      	ldr	r3, [r3, #4]
 801fbf0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801fbf2:	693b      	ldr	r3, [r7, #16]
 801fbf4:	8afa      	ldrh	r2, [r7, #22]
 801fbf6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801fbf8:	693b      	ldr	r3, [r7, #16]
 801fbfa:	2206      	movs	r2, #6
 801fbfc:	6839      	ldr	r1, [r7, #0]
 801fbfe:	4618      	mov	r0, r3
 801fc00:	f002 f8b1 	bl	8021d66 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801fc04:	693b      	ldr	r3, [r7, #16]
 801fc06:	3306      	adds	r3, #6
 801fc08:	2206      	movs	r2, #6
 801fc0a:	6879      	ldr	r1, [r7, #4]
 801fc0c:	4618      	mov	r0, r3
 801fc0e:	f002 f8aa 	bl	8021d66 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801fc12:	68fb      	ldr	r3, [r7, #12]
 801fc14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801fc18:	2b06      	cmp	r3, #6
 801fc1a:	d006      	beq.n	801fc2a <ethernet_output+0x66>
 801fc1c:	4b0a      	ldr	r3, [pc, #40]	; (801fc48 <ethernet_output+0x84>)
 801fc1e:	f44f 7299 	mov.w	r2, #306	; 0x132
 801fc22:	490a      	ldr	r1, [pc, #40]	; (801fc4c <ethernet_output+0x88>)
 801fc24:	480a      	ldr	r0, [pc, #40]	; (801fc50 <ethernet_output+0x8c>)
 801fc26:	f001 fd77 	bl	8021718 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801fc2a:	68fb      	ldr	r3, [r7, #12]
 801fc2c:	699b      	ldr	r3, [r3, #24]
 801fc2e:	68b9      	ldr	r1, [r7, #8]
 801fc30:	68f8      	ldr	r0, [r7, #12]
 801fc32:	4798      	blx	r3
 801fc34:	4603      	mov	r3, r0
 801fc36:	e002      	b.n	801fc3e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801fc38:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801fc3a:	f06f 0301 	mvn.w	r3, #1
}
 801fc3e:	4618      	mov	r0, r3
 801fc40:	3718      	adds	r7, #24
 801fc42:	46bd      	mov	sp, r7
 801fc44:	bd80      	pop	{r7, pc}
 801fc46:	bf00      	nop
 801fc48:	0802710c 	.word	0x0802710c
 801fc4c:	08027144 	.word	0x08027144
 801fc50:	08027178 	.word	0x08027178

0801fc54 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801fc54:	b580      	push	{r7, lr}
 801fc56:	b086      	sub	sp, #24
 801fc58:	af00      	add	r7, sp, #0
 801fc5a:	6078      	str	r0, [r7, #4]
 801fc5c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801fc5e:	683b      	ldr	r3, [r7, #0]
 801fc60:	60bb      	str	r3, [r7, #8]
 801fc62:	2304      	movs	r3, #4
 801fc64:	60fb      	str	r3, [r7, #12]
 801fc66:	2300      	movs	r3, #0
 801fc68:	613b      	str	r3, [r7, #16]
 801fc6a:	2300      	movs	r3, #0
 801fc6c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801fc6e:	f107 0308 	add.w	r3, r7, #8
 801fc72:	2100      	movs	r1, #0
 801fc74:	4618      	mov	r0, r3
 801fc76:	f7e7 fbec 	bl	8007452 <osMessageCreate>
 801fc7a:	4602      	mov	r2, r0
 801fc7c:	687b      	ldr	r3, [r7, #4]
 801fc7e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801fc80:	687b      	ldr	r3, [r7, #4]
 801fc82:	681b      	ldr	r3, [r3, #0]
 801fc84:	2b00      	cmp	r3, #0
 801fc86:	d102      	bne.n	801fc8e <sys_mbox_new+0x3a>
    return ERR_MEM;
 801fc88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fc8c:	e000      	b.n	801fc90 <sys_mbox_new+0x3c>

  return ERR_OK;
 801fc8e:	2300      	movs	r3, #0
}
 801fc90:	4618      	mov	r0, r3
 801fc92:	3718      	adds	r7, #24
 801fc94:	46bd      	mov	sp, r7
 801fc96:	bd80      	pop	{r7, pc}

0801fc98 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801fc98:	b580      	push	{r7, lr}
 801fc9a:	b082      	sub	sp, #8
 801fc9c:	af00      	add	r7, sp, #0
 801fc9e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801fca0:	687b      	ldr	r3, [r7, #4]
 801fca2:	681b      	ldr	r3, [r3, #0]
 801fca4:	4618      	mov	r0, r3
 801fca6:	f7e7 fcb1 	bl	800760c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801fcaa:	687b      	ldr	r3, [r7, #4]
 801fcac:	681b      	ldr	r3, [r3, #0]
 801fcae:	4618      	mov	r0, r3
 801fcb0:	f7e7 fcc2 	bl	8007638 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801fcb4:	bf00      	nop
 801fcb6:	3708      	adds	r7, #8
 801fcb8:	46bd      	mov	sp, r7
 801fcba:	bd80      	pop	{r7, pc}

0801fcbc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801fcbc:	b580      	push	{r7, lr}
 801fcbe:	b084      	sub	sp, #16
 801fcc0:	af00      	add	r7, sp, #0
 801fcc2:	6078      	str	r0, [r7, #4]
 801fcc4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801fcc6:	687b      	ldr	r3, [r7, #4]
 801fcc8:	681b      	ldr	r3, [r3, #0]
 801fcca:	6839      	ldr	r1, [r7, #0]
 801fccc:	2200      	movs	r2, #0
 801fcce:	4618      	mov	r0, r3
 801fcd0:	f7e7 fbe8 	bl	80074a4 <osMessagePut>
 801fcd4:	4603      	mov	r3, r0
 801fcd6:	2b00      	cmp	r3, #0
 801fcd8:	d102      	bne.n	801fce0 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801fcda:	2300      	movs	r3, #0
 801fcdc:	73fb      	strb	r3, [r7, #15]
 801fcde:	e001      	b.n	801fce4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801fce0:	23ff      	movs	r3, #255	; 0xff
 801fce2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801fce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801fce8:	4618      	mov	r0, r3
 801fcea:	3710      	adds	r7, #16
 801fcec:	46bd      	mov	sp, r7
 801fcee:	bd80      	pop	{r7, pc}

0801fcf0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801fcf0:	b580      	push	{r7, lr}
 801fcf2:	b08c      	sub	sp, #48	; 0x30
 801fcf4:	af00      	add	r7, sp, #0
 801fcf6:	61f8      	str	r0, [r7, #28]
 801fcf8:	61b9      	str	r1, [r7, #24]
 801fcfa:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801fcfc:	f7e7 f9d4 	bl	80070a8 <osKernelSysTick>
 801fd00:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801fd02:	697b      	ldr	r3, [r7, #20]
 801fd04:	2b00      	cmp	r3, #0
 801fd06:	d017      	beq.n	801fd38 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801fd08:	69fb      	ldr	r3, [r7, #28]
 801fd0a:	6819      	ldr	r1, [r3, #0]
 801fd0c:	f107 0320 	add.w	r3, r7, #32
 801fd10:	697a      	ldr	r2, [r7, #20]
 801fd12:	4618      	mov	r0, r3
 801fd14:	f7e7 fc06 	bl	8007524 <osMessageGet>

    if(event.status == osEventMessage)
 801fd18:	6a3b      	ldr	r3, [r7, #32]
 801fd1a:	2b10      	cmp	r3, #16
 801fd1c:	d109      	bne.n	801fd32 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801fd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd20:	461a      	mov	r2, r3
 801fd22:	69bb      	ldr	r3, [r7, #24]
 801fd24:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801fd26:	f7e7 f9bf 	bl	80070a8 <osKernelSysTick>
 801fd2a:	4602      	mov	r2, r0
 801fd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd2e:	1ad3      	subs	r3, r2, r3
 801fd30:	e019      	b.n	801fd66 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801fd32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fd36:	e016      	b.n	801fd66 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801fd38:	69fb      	ldr	r3, [r7, #28]
 801fd3a:	6819      	ldr	r1, [r3, #0]
 801fd3c:	463b      	mov	r3, r7
 801fd3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801fd42:	4618      	mov	r0, r3
 801fd44:	f7e7 fbee 	bl	8007524 <osMessageGet>
 801fd48:	f107 0320 	add.w	r3, r7, #32
 801fd4c:	463a      	mov	r2, r7
 801fd4e:	ca07      	ldmia	r2, {r0, r1, r2}
 801fd50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801fd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd56:	461a      	mov	r2, r3
 801fd58:	69bb      	ldr	r3, [r7, #24]
 801fd5a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801fd5c:	f7e7 f9a4 	bl	80070a8 <osKernelSysTick>
 801fd60:	4602      	mov	r2, r0
 801fd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd64:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801fd66:	4618      	mov	r0, r3
 801fd68:	3730      	adds	r7, #48	; 0x30
 801fd6a:	46bd      	mov	sp, r7
 801fd6c:	bd80      	pop	{r7, pc}

0801fd6e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801fd6e:	b580      	push	{r7, lr}
 801fd70:	b086      	sub	sp, #24
 801fd72:	af00      	add	r7, sp, #0
 801fd74:	6078      	str	r0, [r7, #4]
 801fd76:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801fd78:	687b      	ldr	r3, [r7, #4]
 801fd7a:	6819      	ldr	r1, [r3, #0]
 801fd7c:	f107 030c 	add.w	r3, r7, #12
 801fd80:	2200      	movs	r2, #0
 801fd82:	4618      	mov	r0, r3
 801fd84:	f7e7 fbce 	bl	8007524 <osMessageGet>

  if(event.status == osEventMessage)
 801fd88:	68fb      	ldr	r3, [r7, #12]
 801fd8a:	2b10      	cmp	r3, #16
 801fd8c:	d105      	bne.n	801fd9a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801fd8e:	693b      	ldr	r3, [r7, #16]
 801fd90:	461a      	mov	r2, r3
 801fd92:	683b      	ldr	r3, [r7, #0]
 801fd94:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801fd96:	2300      	movs	r3, #0
 801fd98:	e001      	b.n	801fd9e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801fd9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 801fd9e:	4618      	mov	r0, r3
 801fda0:	3718      	adds	r7, #24
 801fda2:	46bd      	mov	sp, r7
 801fda4:	bd80      	pop	{r7, pc}

0801fda6 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801fda6:	b480      	push	{r7}
 801fda8:	b083      	sub	sp, #12
 801fdaa:	af00      	add	r7, sp, #0
 801fdac:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801fdae:	687b      	ldr	r3, [r7, #4]
 801fdb0:	681b      	ldr	r3, [r3, #0]
 801fdb2:	2b00      	cmp	r3, #0
 801fdb4:	d101      	bne.n	801fdba <sys_mbox_valid+0x14>
    return 0;
 801fdb6:	2300      	movs	r3, #0
 801fdb8:	e000      	b.n	801fdbc <sys_mbox_valid+0x16>
  else
    return 1;
 801fdba:	2301      	movs	r3, #1
}
 801fdbc:	4618      	mov	r0, r3
 801fdbe:	370c      	adds	r7, #12
 801fdc0:	46bd      	mov	sp, r7
 801fdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdc6:	4770      	bx	lr

0801fdc8 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801fdc8:	b480      	push	{r7}
 801fdca:	b083      	sub	sp, #12
 801fdcc:	af00      	add	r7, sp, #0
 801fdce:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801fdd0:	687b      	ldr	r3, [r7, #4]
 801fdd2:	2200      	movs	r2, #0
 801fdd4:	601a      	str	r2, [r3, #0]
}
 801fdd6:	bf00      	nop
 801fdd8:	370c      	adds	r7, #12
 801fdda:	46bd      	mov	sp, r7
 801fddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fde0:	4770      	bx	lr

0801fde2 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801fde2:	b580      	push	{r7, lr}
 801fde4:	b084      	sub	sp, #16
 801fde6:	af00      	add	r7, sp, #0
 801fde8:	6078      	str	r0, [r7, #4]
 801fdea:	460b      	mov	r3, r1
 801fdec:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801fdee:	2300      	movs	r3, #0
 801fdf0:	60bb      	str	r3, [r7, #8]
 801fdf2:	2300      	movs	r3, #0
 801fdf4:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801fdf6:	f107 0308 	add.w	r3, r7, #8
 801fdfa:	2101      	movs	r1, #1
 801fdfc:	4618      	mov	r0, r3
 801fdfe:	f7e7 fa5f 	bl	80072c0 <osSemaphoreCreate>
 801fe02:	4602      	mov	r2, r0
 801fe04:	687b      	ldr	r3, [r7, #4]
 801fe06:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801fe08:	687b      	ldr	r3, [r7, #4]
 801fe0a:	681b      	ldr	r3, [r3, #0]
 801fe0c:	2b00      	cmp	r3, #0
 801fe0e:	d102      	bne.n	801fe16 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801fe10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fe14:	e009      	b.n	801fe2a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801fe16:	78fb      	ldrb	r3, [r7, #3]
 801fe18:	2b00      	cmp	r3, #0
 801fe1a:	d105      	bne.n	801fe28 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801fe1c:	687b      	ldr	r3, [r7, #4]
 801fe1e:	681b      	ldr	r3, [r3, #0]
 801fe20:	2100      	movs	r1, #0
 801fe22:	4618      	mov	r0, r3
 801fe24:	f7e7 fa7e 	bl	8007324 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801fe28:	2300      	movs	r3, #0
}
 801fe2a:	4618      	mov	r0, r3
 801fe2c:	3710      	adds	r7, #16
 801fe2e:	46bd      	mov	sp, r7
 801fe30:	bd80      	pop	{r7, pc}

0801fe32 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801fe32:	b580      	push	{r7, lr}
 801fe34:	b084      	sub	sp, #16
 801fe36:	af00      	add	r7, sp, #0
 801fe38:	6078      	str	r0, [r7, #4]
 801fe3a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801fe3c:	f7e7 f934 	bl	80070a8 <osKernelSysTick>
 801fe40:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801fe42:	683b      	ldr	r3, [r7, #0]
 801fe44:	2b00      	cmp	r3, #0
 801fe46:	d011      	beq.n	801fe6c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801fe48:	687b      	ldr	r3, [r7, #4]
 801fe4a:	681b      	ldr	r3, [r3, #0]
 801fe4c:	6839      	ldr	r1, [r7, #0]
 801fe4e:	4618      	mov	r0, r3
 801fe50:	f7e7 fa68 	bl	8007324 <osSemaphoreWait>
 801fe54:	4603      	mov	r3, r0
 801fe56:	2b00      	cmp	r3, #0
 801fe58:	d105      	bne.n	801fe66 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801fe5a:	f7e7 f925 	bl	80070a8 <osKernelSysTick>
 801fe5e:	4602      	mov	r2, r0
 801fe60:	68fb      	ldr	r3, [r7, #12]
 801fe62:	1ad3      	subs	r3, r2, r3
 801fe64:	e012      	b.n	801fe8c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801fe66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fe6a:	e00f      	b.n	801fe8c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801fe6c:	bf00      	nop
 801fe6e:	687b      	ldr	r3, [r7, #4]
 801fe70:	681b      	ldr	r3, [r3, #0]
 801fe72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801fe76:	4618      	mov	r0, r3
 801fe78:	f7e7 fa54 	bl	8007324 <osSemaphoreWait>
 801fe7c:	4603      	mov	r3, r0
 801fe7e:	2b00      	cmp	r3, #0
 801fe80:	d1f5      	bne.n	801fe6e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801fe82:	f7e7 f911 	bl	80070a8 <osKernelSysTick>
 801fe86:	4602      	mov	r2, r0
 801fe88:	68fb      	ldr	r3, [r7, #12]
 801fe8a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801fe8c:	4618      	mov	r0, r3
 801fe8e:	3710      	adds	r7, #16
 801fe90:	46bd      	mov	sp, r7
 801fe92:	bd80      	pop	{r7, pc}

0801fe94 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801fe94:	b580      	push	{r7, lr}
 801fe96:	b082      	sub	sp, #8
 801fe98:	af00      	add	r7, sp, #0
 801fe9a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801fe9c:	687b      	ldr	r3, [r7, #4]
 801fe9e:	681b      	ldr	r3, [r3, #0]
 801fea0:	4618      	mov	r0, r3
 801fea2:	f7e7 fa8d 	bl	80073c0 <osSemaphoreRelease>
}
 801fea6:	bf00      	nop
 801fea8:	3708      	adds	r7, #8
 801feaa:	46bd      	mov	sp, r7
 801feac:	bd80      	pop	{r7, pc}

0801feae <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801feae:	b580      	push	{r7, lr}
 801feb0:	b082      	sub	sp, #8
 801feb2:	af00      	add	r7, sp, #0
 801feb4:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801feb6:	687b      	ldr	r3, [r7, #4]
 801feb8:	681b      	ldr	r3, [r3, #0]
 801feba:	4618      	mov	r0, r3
 801febc:	f7e7 fab6 	bl	800742c <osSemaphoreDelete>
}
 801fec0:	bf00      	nop
 801fec2:	3708      	adds	r7, #8
 801fec4:	46bd      	mov	sp, r7
 801fec6:	bd80      	pop	{r7, pc}

0801fec8 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801fec8:	b480      	push	{r7}
 801feca:	b083      	sub	sp, #12
 801fecc:	af00      	add	r7, sp, #0
 801fece:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801fed0:	687b      	ldr	r3, [r7, #4]
 801fed2:	681b      	ldr	r3, [r3, #0]
 801fed4:	2b00      	cmp	r3, #0
 801fed6:	d101      	bne.n	801fedc <sys_sem_valid+0x14>
    return 0;
 801fed8:	2300      	movs	r3, #0
 801feda:	e000      	b.n	801fede <sys_sem_valid+0x16>
  else
    return 1;
 801fedc:	2301      	movs	r3, #1
}
 801fede:	4618      	mov	r0, r3
 801fee0:	370c      	adds	r7, #12
 801fee2:	46bd      	mov	sp, r7
 801fee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fee8:	4770      	bx	lr

0801feea <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801feea:	b480      	push	{r7}
 801feec:	b083      	sub	sp, #12
 801feee:	af00      	add	r7, sp, #0
 801fef0:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801fef2:	687b      	ldr	r3, [r7, #4]
 801fef4:	2200      	movs	r2, #0
 801fef6:	601a      	str	r2, [r3, #0]
}
 801fef8:	bf00      	nop
 801fefa:	370c      	adds	r7, #12
 801fefc:	46bd      	mov	sp, r7
 801fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff02:	4770      	bx	lr

0801ff04 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801ff04:	b580      	push	{r7, lr}
 801ff06:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801ff08:	4803      	ldr	r0, [pc, #12]	; (801ff18 <sys_init+0x14>)
 801ff0a:	f7e7 f93d 	bl	8007188 <osMutexCreate>
 801ff0e:	4603      	mov	r3, r0
 801ff10:	4a02      	ldr	r2, [pc, #8]	; (801ff1c <sys_init+0x18>)
 801ff12:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801ff14:	bf00      	nop
 801ff16:	bd80      	pop	{r7, pc}
 801ff18:	08027418 	.word	0x08027418
 801ff1c:	200124f0 	.word	0x200124f0

0801ff20 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801ff20:	b580      	push	{r7, lr}
 801ff22:	b084      	sub	sp, #16
 801ff24:	af00      	add	r7, sp, #0
 801ff26:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801ff28:	2300      	movs	r3, #0
 801ff2a:	60bb      	str	r3, [r7, #8]
 801ff2c:	2300      	movs	r3, #0
 801ff2e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801ff30:	f107 0308 	add.w	r3, r7, #8
 801ff34:	4618      	mov	r0, r3
 801ff36:	f7e7 f927 	bl	8007188 <osMutexCreate>
 801ff3a:	4602      	mov	r2, r0
 801ff3c:	687b      	ldr	r3, [r7, #4]
 801ff3e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801ff40:	687b      	ldr	r3, [r7, #4]
 801ff42:	681b      	ldr	r3, [r3, #0]
 801ff44:	2b00      	cmp	r3, #0
 801ff46:	d102      	bne.n	801ff4e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801ff48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ff4c:	e000      	b.n	801ff50 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801ff4e:	2300      	movs	r3, #0
}
 801ff50:	4618      	mov	r0, r3
 801ff52:	3710      	adds	r7, #16
 801ff54:	46bd      	mov	sp, r7
 801ff56:	bd80      	pop	{r7, pc}

0801ff58 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801ff58:	b580      	push	{r7, lr}
 801ff5a:	b082      	sub	sp, #8
 801ff5c:	af00      	add	r7, sp, #0
 801ff5e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801ff60:	687b      	ldr	r3, [r7, #4]
 801ff62:	681b      	ldr	r3, [r3, #0]
 801ff64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801ff68:	4618      	mov	r0, r3
 801ff6a:	f7e7 f925 	bl	80071b8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801ff6e:	bf00      	nop
 801ff70:	3708      	adds	r7, #8
 801ff72:	46bd      	mov	sp, r7
 801ff74:	bd80      	pop	{r7, pc}

0801ff76 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801ff76:	b580      	push	{r7, lr}
 801ff78:	b082      	sub	sp, #8
 801ff7a:	af00      	add	r7, sp, #0
 801ff7c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801ff7e:	687b      	ldr	r3, [r7, #4]
 801ff80:	681b      	ldr	r3, [r3, #0]
 801ff82:	4618      	mov	r0, r3
 801ff84:	f7e7 f966 	bl	8007254 <osMutexRelease>
}
 801ff88:	bf00      	nop
 801ff8a:	3708      	adds	r7, #8
 801ff8c:	46bd      	mov	sp, r7
 801ff8e:	bd80      	pop	{r7, pc}

0801ff90 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801ff90:	b580      	push	{r7, lr}
 801ff92:	b08c      	sub	sp, #48	; 0x30
 801ff94:	af00      	add	r7, sp, #0
 801ff96:	60f8      	str	r0, [r7, #12]
 801ff98:	60b9      	str	r1, [r7, #8]
 801ff9a:	607a      	str	r2, [r7, #4]
 801ff9c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801ff9e:	f107 0314 	add.w	r3, r7, #20
 801ffa2:	2200      	movs	r2, #0
 801ffa4:	601a      	str	r2, [r3, #0]
 801ffa6:	605a      	str	r2, [r3, #4]
 801ffa8:	609a      	str	r2, [r3, #8]
 801ffaa:	60da      	str	r2, [r3, #12]
 801ffac:	611a      	str	r2, [r3, #16]
 801ffae:	615a      	str	r2, [r3, #20]
 801ffb0:	619a      	str	r2, [r3, #24]
 801ffb2:	68fb      	ldr	r3, [r7, #12]
 801ffb4:	617b      	str	r3, [r7, #20]
 801ffb6:	68bb      	ldr	r3, [r7, #8]
 801ffb8:	61bb      	str	r3, [r7, #24]
 801ffba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ffbc:	b21b      	sxth	r3, r3
 801ffbe:	83bb      	strh	r3, [r7, #28]
 801ffc0:	683b      	ldr	r3, [r7, #0]
 801ffc2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801ffc4:	f107 0314 	add.w	r3, r7, #20
 801ffc8:	6879      	ldr	r1, [r7, #4]
 801ffca:	4618      	mov	r0, r3
 801ffcc:	f7e7 f87c 	bl	80070c8 <osThreadCreate>
 801ffd0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801ffd2:	4618      	mov	r0, r3
 801ffd4:	3730      	adds	r7, #48	; 0x30
 801ffd6:	46bd      	mov	sp, r7
 801ffd8:	bd80      	pop	{r7, pc}
	...

0801ffdc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801ffdc:	b580      	push	{r7, lr}
 801ffde:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801ffe0:	4b04      	ldr	r3, [pc, #16]	; (801fff4 <sys_arch_protect+0x18>)
 801ffe2:	681b      	ldr	r3, [r3, #0]
 801ffe4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801ffe8:	4618      	mov	r0, r3
 801ffea:	f7e7 f8e5 	bl	80071b8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801ffee:	2301      	movs	r3, #1
}
 801fff0:	4618      	mov	r0, r3
 801fff2:	bd80      	pop	{r7, pc}
 801fff4:	200124f0 	.word	0x200124f0

0801fff8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801fff8:	b580      	push	{r7, lr}
 801fffa:	b082      	sub	sp, #8
 801fffc:	af00      	add	r7, sp, #0
 801fffe:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8020000:	4b04      	ldr	r3, [pc, #16]	; (8020014 <sys_arch_unprotect+0x1c>)
 8020002:	681b      	ldr	r3, [r3, #0]
 8020004:	4618      	mov	r0, r3
 8020006:	f7e7 f925 	bl	8007254 <osMutexRelease>
}
 802000a:	bf00      	nop
 802000c:	3708      	adds	r7, #8
 802000e:	46bd      	mov	sp, r7
 8020010:	bd80      	pop	{r7, pc}
 8020012:	bf00      	nop
 8020014:	200124f0 	.word	0x200124f0

08020018 <CalculaCRCByte>:





uint16_t CalculaCRCByte ( uint16_t crc, uint8_t byte ) {
 8020018:	b480      	push	{r7}
 802001a:	b085      	sub	sp, #20
 802001c:	af00      	add	r7, sp, #0
 802001e:	4603      	mov	r3, r0
 8020020:	460a      	mov	r2, r1
 8020022:	80fb      	strh	r3, [r7, #6]
 8020024:	4613      	mov	r3, r2
 8020026:	717b      	strb	r3, [r7, #5]
  uint8_t i;
  crc = crc^byte;
 8020028:	797b      	ldrb	r3, [r7, #5]
 802002a:	b29a      	uxth	r2, r3
 802002c:	88fb      	ldrh	r3, [r7, #6]
 802002e:	4053      	eors	r3, r2
 8020030:	80fb      	strh	r3, [r7, #6]
  for ( i = 0; i < 8; i++ ) {
 8020032:	2300      	movs	r3, #0
 8020034:	73fb      	strb	r3, [r7, #15]
 8020036:	e011      	b.n	802005c <CalculaCRCByte+0x44>
    if ( ( crc & 1 ) == 1 ) crc = ( crc >> 1 ) ^cPOLINOMIO;
 8020038:	88fb      	ldrh	r3, [r7, #6]
 802003a:	f003 0301 	and.w	r3, r3, #1
 802003e:	2b00      	cmp	r3, #0
 8020040:	d006      	beq.n	8020050 <CalculaCRCByte+0x38>
 8020042:	88fb      	ldrh	r3, [r7, #6]
 8020044:	085b      	lsrs	r3, r3, #1
 8020046:	b29a      	uxth	r2, r3
 8020048:	4b09      	ldr	r3, [pc, #36]	; (8020070 <CalculaCRCByte+0x58>)
 802004a:	4053      	eors	r3, r2
 802004c:	80fb      	strh	r3, [r7, #6]
 802004e:	e002      	b.n	8020056 <CalculaCRCByte+0x3e>
    else crc = crc >> 1;
 8020050:	88fb      	ldrh	r3, [r7, #6]
 8020052:	085b      	lsrs	r3, r3, #1
 8020054:	80fb      	strh	r3, [r7, #6]
  for ( i = 0; i < 8; i++ ) {
 8020056:	7bfb      	ldrb	r3, [r7, #15]
 8020058:	3301      	adds	r3, #1
 802005a:	73fb      	strb	r3, [r7, #15]
 802005c:	7bfb      	ldrb	r3, [r7, #15]
 802005e:	2b07      	cmp	r3, #7
 8020060:	d9ea      	bls.n	8020038 <CalculaCRCByte+0x20>
  }
  return crc;
 8020062:	88fb      	ldrh	r3, [r7, #6]
}
 8020064:	4618      	mov	r0, r3
 8020066:	3714      	adds	r7, #20
 8020068:	46bd      	mov	sp, r7
 802006a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802006e:	4770      	bx	lr
 8020070:	ffffa001 	.word	0xffffa001

08020074 <CalculaCRCStream>:


uint16_t CalculaCRCStream ( uint8_t *str, uint16_t tam ) {
 8020074:	b580      	push	{r7, lr}
 8020076:	b084      	sub	sp, #16
 8020078:	af00      	add	r7, sp, #0
 802007a:	6078      	str	r0, [r7, #4]
 802007c:	460b      	mov	r3, r1
 802007e:	807b      	strh	r3, [r7, #2]
  uint16_t i,crc;
  crc = 0xFFFF;
 8020080:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020084:	81bb      	strh	r3, [r7, #12]
  for( i = 0; i < tam; i++, str++ ) crc = CalculaCRCByte ( crc, *str );
 8020086:	2300      	movs	r3, #0
 8020088:	81fb      	strh	r3, [r7, #14]
 802008a:	e00e      	b.n	80200aa <CalculaCRCStream+0x36>
 802008c:	687b      	ldr	r3, [r7, #4]
 802008e:	781a      	ldrb	r2, [r3, #0]
 8020090:	89bb      	ldrh	r3, [r7, #12]
 8020092:	4611      	mov	r1, r2
 8020094:	4618      	mov	r0, r3
 8020096:	f7ff ffbf 	bl	8020018 <CalculaCRCByte>
 802009a:	4603      	mov	r3, r0
 802009c:	81bb      	strh	r3, [r7, #12]
 802009e:	89fb      	ldrh	r3, [r7, #14]
 80200a0:	3301      	adds	r3, #1
 80200a2:	81fb      	strh	r3, [r7, #14]
 80200a4:	687b      	ldr	r3, [r7, #4]
 80200a6:	3301      	adds	r3, #1
 80200a8:	607b      	str	r3, [r7, #4]
 80200aa:	89fa      	ldrh	r2, [r7, #14]
 80200ac:	887b      	ldrh	r3, [r7, #2]
 80200ae:	429a      	cmp	r2, r3
 80200b0:	d3ec      	bcc.n	802008c <CalculaCRCStream+0x18>
  return crc;
 80200b2:	89bb      	ldrh	r3, [r7, #12]
}
 80200b4:	4618      	mov	r0, r3
 80200b6:	3710      	adds	r7, #16
 80200b8:	46bd      	mov	sp, r7
 80200ba:	bd80      	pop	{r7, pc}

080200bc <ReadCoilRegister>:


uint8_t ReadCoilRegister ( uint8_t *buffer, uint8_t *ptr ) {
 80200bc:	b580      	push	{r7, lr}
 80200be:	b084      	sub	sp, #16
 80200c0:	af00      	add	r7, sp, #0
 80200c2:	6078      	str	r0, [r7, #4]
 80200c4:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = 2 * buffer [ 5 ];
 80200c6:	687b      	ldr	r3, [r7, #4]
 80200c8:	3305      	adds	r3, #5
 80200ca:	781b      	ldrb	r3, [r3, #0]
 80200cc:	005b      	lsls	r3, r3, #1
 80200ce:	73bb      	strb	r3, [r7, #14]
	buffer [ 2 ] = bytecount;
 80200d0:	687b      	ldr	r3, [r7, #4]
 80200d2:	3302      	adds	r3, #2
 80200d4:	7bba      	ldrb	r2, [r7, #14]
 80200d6:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 80200d8:	2300      	movs	r3, #0
 80200da:	73fb      	strb	r3, [r7, #15]
 80200dc:	e015      	b.n	802010a <ReadCoilRegister+0x4e>
		#ifdef LITTLE_ENDIAN
		buffer [ i + 3 ] = *( ptr + i + 1 );
 80200de:	7bfb      	ldrb	r3, [r7, #15]
 80200e0:	3301      	adds	r3, #1
 80200e2:	683a      	ldr	r2, [r7, #0]
 80200e4:	441a      	add	r2, r3
 80200e6:	7bfb      	ldrb	r3, [r7, #15]
 80200e8:	3303      	adds	r3, #3
 80200ea:	6879      	ldr	r1, [r7, #4]
 80200ec:	440b      	add	r3, r1
 80200ee:	7812      	ldrb	r2, [r2, #0]
 80200f0:	701a      	strb	r2, [r3, #0]
		buffer [ i + 3 + 1 ] = *( ptr + i );
 80200f2:	7bfb      	ldrb	r3, [r7, #15]
 80200f4:	683a      	ldr	r2, [r7, #0]
 80200f6:	441a      	add	r2, r3
 80200f8:	7bfb      	ldrb	r3, [r7, #15]
 80200fa:	3304      	adds	r3, #4
 80200fc:	6879      	ldr	r1, [r7, #4]
 80200fe:	440b      	add	r3, r1
 8020100:	7812      	ldrb	r2, [r2, #0]
 8020102:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 8020104:	7bfb      	ldrb	r3, [r7, #15]
 8020106:	3302      	adds	r3, #2
 8020108:	73fb      	strb	r3, [r7, #15]
 802010a:	7bfa      	ldrb	r2, [r7, #15]
 802010c:	7bbb      	ldrb	r3, [r7, #14]
 802010e:	429a      	cmp	r2, r3
 8020110:	d3e5      	bcc.n	80200de <ReadCoilRegister+0x22>
		#ifdef BIG_ENDIAN
		buffer [ i + 3 ] = *( ptr + i );
		buffer [ i + 3 + 1 ] = *( ptr + i + 1 );
		#endif
	}
	crc = CalculaCRCStream ( buffer, bytecount + 3 );
 8020112:	7bbb      	ldrb	r3, [r7, #14]
 8020114:	b29b      	uxth	r3, r3
 8020116:	3303      	adds	r3, #3
 8020118:	b29b      	uxth	r3, r3
 802011a:	4619      	mov	r1, r3
 802011c:	6878      	ldr	r0, [r7, #4]
 802011e:	f7ff ffa9 	bl	8020074 <CalculaCRCStream>
 8020122:	4603      	mov	r3, r0
 8020124:	81bb      	strh	r3, [r7, #12]
	buffer [ bytecount + 3 ] = ( uint8_t ) ( crc & 0x00FF );
 8020126:	7bbb      	ldrb	r3, [r7, #14]
 8020128:	3303      	adds	r3, #3
 802012a:	687a      	ldr	r2, [r7, #4]
 802012c:	4413      	add	r3, r2
 802012e:	89ba      	ldrh	r2, [r7, #12]
 8020130:	b2d2      	uxtb	r2, r2
 8020132:	701a      	strb	r2, [r3, #0]
	buffer [ bytecount + 4 ] = ( uint8_t ) ( crc >> 8);
 8020134:	89bb      	ldrh	r3, [r7, #12]
 8020136:	0a1b      	lsrs	r3, r3, #8
 8020138:	b299      	uxth	r1, r3
 802013a:	7bbb      	ldrb	r3, [r7, #14]
 802013c:	3304      	adds	r3, #4
 802013e:	687a      	ldr	r2, [r7, #4]
 8020140:	4413      	add	r3, r2
 8020142:	b2ca      	uxtb	r2, r1
 8020144:	701a      	strb	r2, [r3, #0]
	return ( bytecount + 5 );
 8020146:	7bbb      	ldrb	r3, [r7, #14]
 8020148:	3305      	adds	r3, #5
 802014a:	b2db      	uxtb	r3, r3
}
 802014c:	4618      	mov	r0, r3
 802014e:	3710      	adds	r7, #16
 8020150:	46bd      	mov	sp, r7
 8020152:	bd80      	pop	{r7, pc}

08020154 <ReadInputRegister>:


uint8_t ReadInputRegister ( uint8_t *buffer, uint8_t *ptr ) {
 8020154:	b580      	push	{r7, lr}
 8020156:	b084      	sub	sp, #16
 8020158:	af00      	add	r7, sp, #0
 802015a:	6078      	str	r0, [r7, #4]
 802015c:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = 2 * buffer [ 5 ];
 802015e:	687b      	ldr	r3, [r7, #4]
 8020160:	3305      	adds	r3, #5
 8020162:	781b      	ldrb	r3, [r3, #0]
 8020164:	005b      	lsls	r3, r3, #1
 8020166:	73bb      	strb	r3, [r7, #14]
	buffer [ 2 ] = bytecount;
 8020168:	687b      	ldr	r3, [r7, #4]
 802016a:	3302      	adds	r3, #2
 802016c:	7bba      	ldrb	r2, [r7, #14]
 802016e:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 8020170:	2300      	movs	r3, #0
 8020172:	73fb      	strb	r3, [r7, #15]
 8020174:	e015      	b.n	80201a2 <ReadInputRegister+0x4e>
		#ifdef LITTLE_ENDIAN
		buffer [ i + 3 ] = *( ptr + i + 1 );
 8020176:	7bfb      	ldrb	r3, [r7, #15]
 8020178:	3301      	adds	r3, #1
 802017a:	683a      	ldr	r2, [r7, #0]
 802017c:	441a      	add	r2, r3
 802017e:	7bfb      	ldrb	r3, [r7, #15]
 8020180:	3303      	adds	r3, #3
 8020182:	6879      	ldr	r1, [r7, #4]
 8020184:	440b      	add	r3, r1
 8020186:	7812      	ldrb	r2, [r2, #0]
 8020188:	701a      	strb	r2, [r3, #0]
		buffer [ i + 3 + 1 ] = *( ptr + i );
 802018a:	7bfb      	ldrb	r3, [r7, #15]
 802018c:	683a      	ldr	r2, [r7, #0]
 802018e:	441a      	add	r2, r3
 8020190:	7bfb      	ldrb	r3, [r7, #15]
 8020192:	3304      	adds	r3, #4
 8020194:	6879      	ldr	r1, [r7, #4]
 8020196:	440b      	add	r3, r1
 8020198:	7812      	ldrb	r2, [r2, #0]
 802019a:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 802019c:	7bfb      	ldrb	r3, [r7, #15]
 802019e:	3302      	adds	r3, #2
 80201a0:	73fb      	strb	r3, [r7, #15]
 80201a2:	7bfa      	ldrb	r2, [r7, #15]
 80201a4:	7bbb      	ldrb	r3, [r7, #14]
 80201a6:	429a      	cmp	r2, r3
 80201a8:	d3e5      	bcc.n	8020176 <ReadInputRegister+0x22>
		#ifdef BIG_ENDIAN
		buffer [ i + 3 ] = *( ptr + i );
		buffer [ i + 3 + 1 ] = *( ptr + i + 1 );
		#endif
	}
	crc = CalculaCRCStream ( buffer, bytecount + 3 );
 80201aa:	7bbb      	ldrb	r3, [r7, #14]
 80201ac:	b29b      	uxth	r3, r3
 80201ae:	3303      	adds	r3, #3
 80201b0:	b29b      	uxth	r3, r3
 80201b2:	4619      	mov	r1, r3
 80201b4:	6878      	ldr	r0, [r7, #4]
 80201b6:	f7ff ff5d 	bl	8020074 <CalculaCRCStream>
 80201ba:	4603      	mov	r3, r0
 80201bc:	81bb      	strh	r3, [r7, #12]
	buffer[ bytecount + 3 ] = ( uint8_t ) ( crc & 0x00FF );
 80201be:	7bbb      	ldrb	r3, [r7, #14]
 80201c0:	3303      	adds	r3, #3
 80201c2:	687a      	ldr	r2, [r7, #4]
 80201c4:	4413      	add	r3, r2
 80201c6:	89ba      	ldrh	r2, [r7, #12]
 80201c8:	b2d2      	uxtb	r2, r2
 80201ca:	701a      	strb	r2, [r3, #0]
	buffer[ bytecount + 4 ] = ( uint8_t ) ( crc >> 8 );
 80201cc:	89bb      	ldrh	r3, [r7, #12]
 80201ce:	0a1b      	lsrs	r3, r3, #8
 80201d0:	b299      	uxth	r1, r3
 80201d2:	7bbb      	ldrb	r3, [r7, #14]
 80201d4:	3304      	adds	r3, #4
 80201d6:	687a      	ldr	r2, [r7, #4]
 80201d8:	4413      	add	r3, r2
 80201da:	b2ca      	uxtb	r2, r1
 80201dc:	701a      	strb	r2, [r3, #0]
	return ( bytecount + 5 );
 80201de:	7bbb      	ldrb	r3, [r7, #14]
 80201e0:	3305      	adds	r3, #5
 80201e2:	b2db      	uxtb	r3, r3
}
 80201e4:	4618      	mov	r0, r3
 80201e6:	3710      	adds	r7, #16
 80201e8:	46bd      	mov	sp, r7
 80201ea:	bd80      	pop	{r7, pc}

080201ec <ReadHoldingRegister>:


uint8_t ReadHoldingRegister ( uint8_t *buffer, uint8_t *ptr ) {
 80201ec:	b580      	push	{r7, lr}
 80201ee:	b084      	sub	sp, #16
 80201f0:	af00      	add	r7, sp, #0
 80201f2:	6078      	str	r0, [r7, #4]
 80201f4:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = 2 * buffer [ 5 ];
 80201f6:	687b      	ldr	r3, [r7, #4]
 80201f8:	3305      	adds	r3, #5
 80201fa:	781b      	ldrb	r3, [r3, #0]
 80201fc:	005b      	lsls	r3, r3, #1
 80201fe:	73bb      	strb	r3, [r7, #14]
	buffer [ 2 ] = bytecount;
 8020200:	687b      	ldr	r3, [r7, #4]
 8020202:	3302      	adds	r3, #2
 8020204:	7bba      	ldrb	r2, [r7, #14]
 8020206:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < bytecount; i += 2) {
 8020208:	2300      	movs	r3, #0
 802020a:	73fb      	strb	r3, [r7, #15]
 802020c:	e015      	b.n	802023a <ReadHoldingRegister+0x4e>
		#ifdef LITTLE_ENDIAN
		buffer [ i + 3 ] = *( ptr + i + 1 );
 802020e:	7bfb      	ldrb	r3, [r7, #15]
 8020210:	3301      	adds	r3, #1
 8020212:	683a      	ldr	r2, [r7, #0]
 8020214:	441a      	add	r2, r3
 8020216:	7bfb      	ldrb	r3, [r7, #15]
 8020218:	3303      	adds	r3, #3
 802021a:	6879      	ldr	r1, [r7, #4]
 802021c:	440b      	add	r3, r1
 802021e:	7812      	ldrb	r2, [r2, #0]
 8020220:	701a      	strb	r2, [r3, #0]
		buffer [ i + 3 + 1 ] = *( ptr + i );
 8020222:	7bfb      	ldrb	r3, [r7, #15]
 8020224:	683a      	ldr	r2, [r7, #0]
 8020226:	441a      	add	r2, r3
 8020228:	7bfb      	ldrb	r3, [r7, #15]
 802022a:	3304      	adds	r3, #4
 802022c:	6879      	ldr	r1, [r7, #4]
 802022e:	440b      	add	r3, r1
 8020230:	7812      	ldrb	r2, [r2, #0]
 8020232:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < bytecount; i += 2) {
 8020234:	7bfb      	ldrb	r3, [r7, #15]
 8020236:	3302      	adds	r3, #2
 8020238:	73fb      	strb	r3, [r7, #15]
 802023a:	7bfa      	ldrb	r2, [r7, #15]
 802023c:	7bbb      	ldrb	r3, [r7, #14]
 802023e:	429a      	cmp	r2, r3
 8020240:	d3e5      	bcc.n	802020e <ReadHoldingRegister+0x22>
		#ifdef BIG_ENDIAN
		buffer [ i + 3 ]   = *( ptr + i );
		buffer [ i + 3 + 1 ] = *( ptr + i + 1 );
		#endif
	}
	crc = CalculaCRCStream(buffer, bytecount + 3 );
 8020242:	7bbb      	ldrb	r3, [r7, #14]
 8020244:	b29b      	uxth	r3, r3
 8020246:	3303      	adds	r3, #3
 8020248:	b29b      	uxth	r3, r3
 802024a:	4619      	mov	r1, r3
 802024c:	6878      	ldr	r0, [r7, #4]
 802024e:	f7ff ff11 	bl	8020074 <CalculaCRCStream>
 8020252:	4603      	mov	r3, r0
 8020254:	81bb      	strh	r3, [r7, #12]
	buffer[ bytecount + 3 ] = ( uint8_t ) ( crc & 0x00FF );
 8020256:	7bbb      	ldrb	r3, [r7, #14]
 8020258:	3303      	adds	r3, #3
 802025a:	687a      	ldr	r2, [r7, #4]
 802025c:	4413      	add	r3, r2
 802025e:	89ba      	ldrh	r2, [r7, #12]
 8020260:	b2d2      	uxtb	r2, r2
 8020262:	701a      	strb	r2, [r3, #0]
	buffer[ bytecount + 4 ] = ( uint8_t ) ( crc >> 8 );
 8020264:	89bb      	ldrh	r3, [r7, #12]
 8020266:	0a1b      	lsrs	r3, r3, #8
 8020268:	b299      	uxth	r1, r3
 802026a:	7bbb      	ldrb	r3, [r7, #14]
 802026c:	3304      	adds	r3, #4
 802026e:	687a      	ldr	r2, [r7, #4]
 8020270:	4413      	add	r3, r2
 8020272:	b2ca      	uxtb	r2, r1
 8020274:	701a      	strb	r2, [r3, #0]
	return ( bytecount + 5 );
 8020276:	7bbb      	ldrb	r3, [r7, #14]
 8020278:	3305      	adds	r3, #5
 802027a:	b2db      	uxtb	r3, r3
}
 802027c:	4618      	mov	r0, r3
 802027e:	3710      	adds	r7, #16
 8020280:	46bd      	mov	sp, r7
 8020282:	bd80      	pop	{r7, pc}

08020284 <PresetSingleRegister>:


uint8_t PresetSingleRegister ( uint8_t *buffer, uint8_t *ptr ) {
 8020284:	b480      	push	{r7}
 8020286:	b083      	sub	sp, #12
 8020288:	af00      	add	r7, sp, #0
 802028a:	6078      	str	r0, [r7, #4]
 802028c:	6039      	str	r1, [r7, #0]
	#ifdef LITTLE_ENDIAN
	*( ptr ) = buffer [ 5 ];
 802028e:	687b      	ldr	r3, [r7, #4]
 8020290:	795a      	ldrb	r2, [r3, #5]
 8020292:	683b      	ldr	r3, [r7, #0]
 8020294:	701a      	strb	r2, [r3, #0]
	*( ptr + 1 ) = buffer [ 4 ];
 8020296:	683b      	ldr	r3, [r7, #0]
 8020298:	3301      	adds	r3, #1
 802029a:	687a      	ldr	r2, [r7, #4]
 802029c:	7912      	ldrb	r2, [r2, #4]
 802029e:	701a      	strb	r2, [r3, #0]
	#endif
	#ifdef BIG_ENDIAN
	*( ptr ) = buffer [ 4 ];
	*( ptr + 1 ) = buffer [ 5 ];
	#endif
	return ( 8 );
 80202a0:	2308      	movs	r3, #8
}
 80202a2:	4618      	mov	r0, r3
 80202a4:	370c      	adds	r7, #12
 80202a6:	46bd      	mov	sp, r7
 80202a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202ac:	4770      	bx	lr

080202ae <PresetMultipleRegisters>:


uint8_t PresetMultipleRegisters ( uint8_t *buffer, uint8_t *ptr ) {
 80202ae:	b580      	push	{r7, lr}
 80202b0:	b084      	sub	sp, #16
 80202b2:	af00      	add	r7, sp, #0
 80202b4:	6078      	str	r0, [r7, #4]
 80202b6:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = buffer [ 6 ];
 80202b8:	687b      	ldr	r3, [r7, #4]
 80202ba:	799b      	ldrb	r3, [r3, #6]
 80202bc:	73bb      	strb	r3, [r7, #14]
	for ( i = 0; i < bytecount; i += 2 ) {
 80202be:	2300      	movs	r3, #0
 80202c0:	73fb      	strb	r3, [r7, #15]
 80202c2:	e016      	b.n	80202f2 <PresetMultipleRegisters+0x44>
		#ifdef LITTLE_ENDIAN
		*( ptr + i ) = buffer [ 7 + i + 1 ];
 80202c4:	7bfb      	ldrb	r3, [r7, #15]
 80202c6:	3308      	adds	r3, #8
 80202c8:	687a      	ldr	r2, [r7, #4]
 80202ca:	441a      	add	r2, r3
 80202cc:	7bfb      	ldrb	r3, [r7, #15]
 80202ce:	6839      	ldr	r1, [r7, #0]
 80202d0:	440b      	add	r3, r1
 80202d2:	7812      	ldrb	r2, [r2, #0]
 80202d4:	701a      	strb	r2, [r3, #0]
		*( ptr + i + 1 ) = buffer [ 7 + i ];
 80202d6:	7bfb      	ldrb	r3, [r7, #15]
 80202d8:	3307      	adds	r3, #7
 80202da:	461a      	mov	r2, r3
 80202dc:	687b      	ldr	r3, [r7, #4]
 80202de:	441a      	add	r2, r3
 80202e0:	7bfb      	ldrb	r3, [r7, #15]
 80202e2:	3301      	adds	r3, #1
 80202e4:	6839      	ldr	r1, [r7, #0]
 80202e6:	440b      	add	r3, r1
 80202e8:	7812      	ldrb	r2, [r2, #0]
 80202ea:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 80202ec:	7bfb      	ldrb	r3, [r7, #15]
 80202ee:	3302      	adds	r3, #2
 80202f0:	73fb      	strb	r3, [r7, #15]
 80202f2:	7bfa      	ldrb	r2, [r7, #15]
 80202f4:	7bbb      	ldrb	r3, [r7, #14]
 80202f6:	429a      	cmp	r2, r3
 80202f8:	d3e4      	bcc.n	80202c4 <PresetMultipleRegisters+0x16>
		#ifdef BIG_ENDIAN
		*( ptr + i ) = buffer [ 7 + i ];
		*( ptr + i + 1 ) = buffer [ 7 + i + 1 ];
		#endif
	}
	crc = CalculaCRCStream ( buffer, 6 );
 80202fa:	2106      	movs	r1, #6
 80202fc:	6878      	ldr	r0, [r7, #4]
 80202fe:	f7ff feb9 	bl	8020074 <CalculaCRCStream>
 8020302:	4603      	mov	r3, r0
 8020304:	81bb      	strh	r3, [r7, #12]
	buffer [ 6 ] = ( uint8_t ) ( crc & 0x00FF );
 8020306:	687b      	ldr	r3, [r7, #4]
 8020308:	3306      	adds	r3, #6
 802030a:	89ba      	ldrh	r2, [r7, #12]
 802030c:	b2d2      	uxtb	r2, r2
 802030e:	701a      	strb	r2, [r3, #0]
	buffer [ 7 ] = ( uint8_t ) ( crc >> 8 );
 8020310:	89bb      	ldrh	r3, [r7, #12]
 8020312:	0a1b      	lsrs	r3, r3, #8
 8020314:	b29a      	uxth	r2, r3
 8020316:	687b      	ldr	r3, [r7, #4]
 8020318:	3307      	adds	r3, #7
 802031a:	b2d2      	uxtb	r2, r2
 802031c:	701a      	strb	r2, [r3, #0]
	return ( 8 );
 802031e:	2308      	movs	r3, #8
}
 8020320:	4618      	mov	r0, r3
 8020322:	3710      	adds	r7, #16
 8020324:	46bd      	mov	sp, r7
 8020326:	bd80      	pop	{r7, pc}

08020328 <InterpreterMODBUS>:


MB modbus;

uint16_t InterpreterMODBUS(uint8_t *msg, uint16_t len)
{
 8020328:	b580      	push	{r7, lr}
 802032a:	b086      	sub	sp, #24
 802032c:	af00      	add	r7, sp, #0
 802032e:	6078      	str	r0, [r7, #4]
 8020330:	460b      	mov	r3, r1
 8020332:	807b      	strh	r3, [r7, #2]
	uint8_t *ptr;
	uint16_t crccal, crcrec, address, totalbytes;

	crccal = 0;
 8020334:	2300      	movs	r3, #0
 8020336:	82bb      	strh	r3, [r7, #20]
	crcrec = 0;
 8020338:	2300      	movs	r3, #0
 802033a:	827b      	strh	r3, [r7, #18]
	address = (msg[2] << 8) | msg[3];
 802033c:	687b      	ldr	r3, [r7, #4]
 802033e:	3302      	adds	r3, #2
 8020340:	781b      	ldrb	r3, [r3, #0]
 8020342:	021b      	lsls	r3, r3, #8
 8020344:	b21a      	sxth	r2, r3
 8020346:	687b      	ldr	r3, [r7, #4]
 8020348:	3303      	adds	r3, #3
 802034a:	781b      	ldrb	r3, [r3, #0]
 802034c:	b21b      	sxth	r3, r3
 802034e:	4313      	orrs	r3, r2
 8020350:	b21b      	sxth	r3, r3
 8020352:	823b      	strh	r3, [r7, #16]
	//bytecount = msg[6];
	crccal = CalculaCRCStream(msg, len - 2);
 8020354:	887b      	ldrh	r3, [r7, #2]
 8020356:	3b02      	subs	r3, #2
 8020358:	b29b      	uxth	r3, r3
 802035a:	4619      	mov	r1, r3
 802035c:	6878      	ldr	r0, [r7, #4]
 802035e:	f7ff fe89 	bl	8020074 <CalculaCRCStream>
 8020362:	4603      	mov	r3, r0
 8020364:	82bb      	strh	r3, [r7, #20]
	crcrec = (msg[len - 1] << 8) | msg[len - 2];
 8020366:	887b      	ldrh	r3, [r7, #2]
 8020368:	3b01      	subs	r3, #1
 802036a:	687a      	ldr	r2, [r7, #4]
 802036c:	4413      	add	r3, r2
 802036e:	781b      	ldrb	r3, [r3, #0]
 8020370:	021b      	lsls	r3, r3, #8
 8020372:	b21a      	sxth	r2, r3
 8020374:	887b      	ldrh	r3, [r7, #2]
 8020376:	3b02      	subs	r3, #2
 8020378:	6879      	ldr	r1, [r7, #4]
 802037a:	440b      	add	r3, r1
 802037c:	781b      	ldrb	r3, [r3, #0]
 802037e:	b21b      	sxth	r3, r3
 8020380:	4313      	orrs	r3, r2
 8020382:	b21b      	sxth	r3, r3
 8020384:	827b      	strh	r3, [r7, #18]

	if (crccal == crcrec)
 8020386:	8aba      	ldrh	r2, [r7, #20]
 8020388:	8a7b      	ldrh	r3, [r7, #18]
 802038a:	429a      	cmp	r2, r3
 802038c:	f040 80ac 	bne.w	80204e8 <InterpreterMODBUS+0x1c0>
	{
		switch (msg[0])
 8020390:	687b      	ldr	r3, [r7, #4]
 8020392:	781b      	ldrb	r3, [r3, #0]
 8020394:	2b01      	cmp	r3, #1
 8020396:	f040 80ab 	bne.w	80204f0 <InterpreterMODBUS+0x1c8>
		{
		case 0x01: // Escravo 1
			switch (msg[1])
 802039a:	687b      	ldr	r3, [r7, #4]
 802039c:	3301      	adds	r3, #1
 802039e:	781b      	ldrb	r3, [r3, #0]
 80203a0:	3b01      	subs	r3, #1
 80203a2:	2b0f      	cmp	r3, #15
 80203a4:	f200 80a3 	bhi.w	80204ee <InterpreterMODBUS+0x1c6>
 80203a8:	a201      	add	r2, pc, #4	; (adr r2, 80203b0 <InterpreterMODBUS+0x88>)
 80203aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80203ae:	bf00      	nop
 80203b0:	080203f1 	.word	0x080203f1
 80203b4:	080204e5 	.word	0x080204e5
 80203b8:	08020409 	.word	0x08020409
 80203bc:	08020421 	.word	0x08020421
 80203c0:	080204e5 	.word	0x080204e5
 80203c4:	08020439 	.word	0x08020439
 80203c8:	080204ef 	.word	0x080204ef
 80203cc:	080204ef 	.word	0x080204ef
 80203d0:	080204ef 	.word	0x080204ef
 80203d4:	080204ef 	.word	0x080204ef
 80203d8:	080204ef 	.word	0x080204ef
 80203dc:	080204ef 	.word	0x080204ef
 80203e0:	080204ef 	.word	0x080204ef
 80203e4:	080204ef 	.word	0x080204ef
 80203e8:	080204e5 	.word	0x080204e5
 80203ec:	0802048f 	.word	0x0802048f
			{
			case 0x01: // Read coil registers

				ptr = GetAddrCoilRegister(address); // Pega o endereco real na memeria do CR
 80203f0:	8a3b      	ldrh	r3, [r7, #16]
 80203f2:	4618      	mov	r0, r3
 80203f4:	f000 f884 	bl	8020500 <GetAddrCoilRegister>
 80203f8:	60f8      	str	r0, [r7, #12]
				totalbytes = ReadCoilRegister(msg, ptr); // Le o valor do IR e monta parte da mensagem
 80203fa:	68f9      	ldr	r1, [r7, #12]
 80203fc:	6878      	ldr	r0, [r7, #4]
 80203fe:	f7ff fe5d 	bl	80200bc <ReadCoilRegister>
 8020402:	4603      	mov	r3, r0
 8020404:	82fb      	strh	r3, [r7, #22]

				break;
 8020406:	e06e      	b.n	80204e6 <InterpreterMODBUS+0x1be>
			case 0x02: // Read input status
				break;
			case 0x03: // Read holding registers
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 8020408:	8a3b      	ldrh	r3, [r7, #16]
 802040a:	4618      	mov	r0, r3
 802040c:	f000 f8c2 	bl	8020594 <GetAddrHoldingRegister>
 8020410:	60f8      	str	r0, [r7, #12]
				totalbytes = ReadHoldingRegister(msg, ptr);	// Le o valor do IR e monta parte da mensagem
 8020412:	68f9      	ldr	r1, [r7, #12]
 8020414:	6878      	ldr	r0, [r7, #4]
 8020416:	f7ff fee9 	bl	80201ec <ReadHoldingRegister>
 802041a:	4603      	mov	r3, r0
 802041c:	82fb      	strh	r3, [r7, #22]
				break;
 802041e:	e062      	b.n	80204e6 <InterpreterMODBUS+0x1be>
			case 0x04: // Read input registers
				ptr = GetAddrInputRegister(address); // Pega o endereco real na memoria do IR
 8020420:	8a3b      	ldrh	r3, [r7, #16]
 8020422:	4618      	mov	r0, r3
 8020424:	f000 f892 	bl	802054c <GetAddrInputRegister>
 8020428:	60f8      	str	r0, [r7, #12]
				totalbytes = ReadInputRegister(msg, ptr); // Le o valor do IR e monta parte da mensagem
 802042a:	68f9      	ldr	r1, [r7, #12]
 802042c:	6878      	ldr	r0, [r7, #4]
 802042e:	f7ff fe91 	bl	8020154 <ReadInputRegister>
 8020432:	4603      	mov	r3, r0
 8020434:	82fb      	strh	r3, [r7, #22]
				break;
 8020436:	e056      	b.n	80204e6 <InterpreterMODBUS+0x1be>
			case 0x05: // Force single coil
				break;
			case 0x06: // Preset single register
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 8020438:	8a3b      	ldrh	r3, [r7, #16]
 802043a:	4618      	mov	r0, r3
 802043c:	f000 f8aa 	bl	8020594 <GetAddrHoldingRegister>
 8020440:	60f8      	str	r0, [r7, #12]
				totalbytes = PresetSingleRegister(msg, ptr); // Grava o valor do HR e monta parte da mensagem
 8020442:	68f9      	ldr	r1, [r7, #12]
 8020444:	6878      	ldr	r0, [r7, #4]
 8020446:	f7ff ff1d 	bl	8020284 <PresetSingleRegister>
 802044a:	4603      	mov	r3, r0
 802044c:	82fb      	strh	r3, [r7, #22]


				//eeprom_write_char ( address, *( ptr ) );
				//eeprom_write_char ( address + 1, *( ptr + 1 ) );

				if (totalbytes)
 802044e:	8afb      	ldrh	r3, [r7, #22]
 8020450:	2b00      	cmp	r3, #0
 8020452:	d016      	beq.n	8020482 <InterpreterMODBUS+0x15a>
				{ //Implementado para possibilitar a gravacao do Tipo de Hardware (Input Register) via CfgHorus

					if ((modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW] != 0) && (modbus.INPUTREGISTERS[ADD_TIPO_HARDW] != modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW]))
 8020454:	4b29      	ldr	r3, [pc, #164]	; (80204fc <InterpreterMODBUS+0x1d4>)
 8020456:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 802045a:	2b00      	cmp	r3, #0
 802045c:	d011      	beq.n	8020482 <InterpreterMODBUS+0x15a>
 802045e:	4b27      	ldr	r3, [pc, #156]	; (80204fc <InterpreterMODBUS+0x1d4>)
 8020460:	f8b3 23d4 	ldrh.w	r2, [r3, #980]	; 0x3d4
 8020464:	4b25      	ldr	r3, [pc, #148]	; (80204fc <InterpreterMODBUS+0x1d4>)
 8020466:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 802046a:	429a      	cmp	r2, r3
 802046c:	d009      	beq.n	8020482 <InterpreterMODBUS+0x15a>
					{
						//if((modbusMapa.COPIA_TIPO_HARDW != 0) && (modbusMapa.TIPO_HARDW != modbusMapa.COPIA_TIPO_HARDW)){

						modbus.INPUTREGISTERS[ADD_TIPO_HARDW] =modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW];
 802046e:	4b23      	ldr	r3, [pc, #140]	; (80204fc <InterpreterMODBUS+0x1d4>)
 8020470:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8020474:	4b21      	ldr	r3, [pc, #132]	; (80204fc <InterpreterMODBUS+0x1d4>)
 8020476:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4

						//modbusMapa.TIPO_HARDW = modbusMapa.COPIA_TIPO_HARDW;

						ptr = (uint8_t*) GetAddrInputRegister(ADD_TIPO_HARDW);
 802047a:	206f      	movs	r0, #111	; 0x6f
 802047c:	f000 f866 	bl	802054c <GetAddrInputRegister>
 8020480:	60f8      	str	r0, [r7, #12]
				}
#ifdef WATCHDOG
        fWatchDogReset();
#endif
				//Carrega conte�do gravado para RAM para comparacao no CfgHorus
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 8020482:	8a3b      	ldrh	r3, [r7, #16]
 8020484:	4618      	mov	r0, r3
 8020486:	f000 f885 	bl	8020594 <GetAddrHoldingRegister>
 802048a:	60f8      	str	r0, [r7, #12]

				//eeprom_read_stream(ptr, bytecount, (address * 2));
				break;
 802048c:	e02b      	b.n	80204e6 <InterpreterMODBUS+0x1be>
			case 0x0F: // Preset multiple coils
				break;
			case 0x10: // Preset multiple resgisters
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memeria do HR
 802048e:	8a3b      	ldrh	r3, [r7, #16]
 8020490:	4618      	mov	r0, r3
 8020492:	f000 f87f 	bl	8020594 <GetAddrHoldingRegister>
 8020496:	60f8      	str	r0, [r7, #12]

				totalbytes = PresetMultipleRegisters(msg, ptr); // Grava o valor do HR e monta parte da mensagem
 8020498:	68f9      	ldr	r1, [r7, #12]
 802049a:	6878      	ldr	r0, [r7, #4]
 802049c:	f7ff ff07 	bl	80202ae <PresetMultipleRegisters>
 80204a0:	4603      	mov	r3, r0
 80204a2:	82fb      	strh	r3, [r7, #22]

				//eeprom_write_stream((address * 2), bytecount, ptr);

				if (totalbytes)
 80204a4:	8afb      	ldrh	r3, [r7, #22]
 80204a6:	2b00      	cmp	r3, #0
 80204a8:	d016      	beq.n	80204d8 <InterpreterMODBUS+0x1b0>
				{ //Implementado para possibilitar a gravacao do Tipo de Hardware (Input Register) via CfgHorus

					if ((modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW] != 0) && (modbus.INPUTREGISTERS[ADD_TIPO_HARDW] != modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW]))
 80204aa:	4b14      	ldr	r3, [pc, #80]	; (80204fc <InterpreterMODBUS+0x1d4>)
 80204ac:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80204b0:	2b00      	cmp	r3, #0
 80204b2:	d011      	beq.n	80204d8 <InterpreterMODBUS+0x1b0>
 80204b4:	4b11      	ldr	r3, [pc, #68]	; (80204fc <InterpreterMODBUS+0x1d4>)
 80204b6:	f8b3 23d4 	ldrh.w	r2, [r3, #980]	; 0x3d4
 80204ba:	4b10      	ldr	r3, [pc, #64]	; (80204fc <InterpreterMODBUS+0x1d4>)
 80204bc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80204c0:	429a      	cmp	r2, r3
 80204c2:	d009      	beq.n	80204d8 <InterpreterMODBUS+0x1b0>
					{
						modbus.INPUTREGISTERS[ADD_TIPO_HARDW] = modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW];
 80204c4:	4b0d      	ldr	r3, [pc, #52]	; (80204fc <InterpreterMODBUS+0x1d4>)
 80204c6:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 80204ca:	4b0c      	ldr	r3, [pc, #48]	; (80204fc <InterpreterMODBUS+0x1d4>)
 80204cc:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4

						ptr = (uint8_t*) GetAddrInputRegister(ADD_TIPO_HARDW);
 80204d0:	206f      	movs	r0, #111	; 0x6f
 80204d2:	f000 f83b 	bl	802054c <GetAddrInputRegister>
 80204d6:	60f8      	str	r0, [r7, #12]
				}
#ifdef WATCHDOG
        fWatchDogReset();
#endif
				//Carrega conte�do gravado para RAM para comparacao no CfgHorus
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 80204d8:	8a3b      	ldrh	r3, [r7, #16]
 80204da:	4618      	mov	r0, r3
 80204dc:	f000 f85a 	bl	8020594 <GetAddrHoldingRegister>
 80204e0:	60f8      	str	r0, [r7, #12]
				// eeprom_read_stream(ptr, bytecount, (address * 2));
				break;
 80204e2:	e000      	b.n	80204e6 <InterpreterMODBUS+0x1be>
				break;
 80204e4:	bf00      	nop
			}
			break;
 80204e6:	e002      	b.n	80204ee <InterpreterMODBUS+0x1c6>
		}
	}
	else
	{

		totalbytes = 0;
 80204e8:	2300      	movs	r3, #0
 80204ea:	82fb      	strh	r3, [r7, #22]
 80204ec:	e000      	b.n	80204f0 <InterpreterMODBUS+0x1c8>
			break;
 80204ee:	bf00      	nop
	}

	return totalbytes;
 80204f0:	8afb      	ldrh	r3, [r7, #22]
}
 80204f2:	4618      	mov	r0, r3
 80204f4:	3718      	adds	r7, #24
 80204f6:	46bd      	mov	sp, r7
 80204f8:	bd80      	pop	{r7, pc}
 80204fa:	bf00      	nop
 80204fc:	200124f4 	.word	0x200124f4

08020500 <GetAddrCoilRegister>:

uint8_t* GetAddrCoilRegister(uint16_t address)
{
 8020500:	b480      	push	{r7}
 8020502:	b085      	sub	sp, #20
 8020504:	af00      	add	r7, sp, #0
 8020506:	4603      	mov	r3, r0
 8020508:	80fb      	strh	r3, [r7, #6]

	uint8_t *ptr;

	switch (address)
 802050a:	88fb      	ldrh	r3, [r7, #6]
 802050c:	2b02      	cmp	r3, #2
 802050e:	d00c      	beq.n	802052a <GetAddrCoilRegister+0x2a>
 8020510:	2b02      	cmp	r3, #2
 8020512:	dc0d      	bgt.n	8020530 <GetAddrCoilRegister+0x30>
 8020514:	2b00      	cmp	r3, #0
 8020516:	d002      	beq.n	802051e <GetAddrCoilRegister+0x1e>
 8020518:	2b01      	cmp	r3, #1
 802051a:	d003      	beq.n	8020524 <GetAddrCoilRegister+0x24>
 802051c:	e008      	b.n	8020530 <GetAddrCoilRegister+0x30>
	{

	case ADD_IN_1:
		ptr = (uint8_t*) &modbus.COILS[ADD_IN_1];
 802051e:	4b08      	ldr	r3, [pc, #32]	; (8020540 <GetAddrCoilRegister+0x40>)
 8020520:	60fb      	str	r3, [r7, #12]
		break;
 8020522:	e005      	b.n	8020530 <GetAddrCoilRegister+0x30>
	case ADD_IN_2:
		ptr = (uint8_t*) &modbus.COILS[ADD_IN_2];
 8020524:	4b07      	ldr	r3, [pc, #28]	; (8020544 <GetAddrCoilRegister+0x44>)
 8020526:	60fb      	str	r3, [r7, #12]
		break;
 8020528:	e002      	b.n	8020530 <GetAddrCoilRegister+0x30>
	case ADD_OUT_1:
		ptr = (uint8_t*) &modbus.COILS[ADD_OUT_1];
 802052a:	4b07      	ldr	r3, [pc, #28]	; (8020548 <GetAddrCoilRegister+0x48>)
 802052c:	60fb      	str	r3, [r7, #12]
		break;
 802052e:	bf00      	nop
	}
	return ptr;
 8020530:	68fb      	ldr	r3, [r7, #12]
}
 8020532:	4618      	mov	r0, r3
 8020534:	3714      	adds	r7, #20
 8020536:	46bd      	mov	sp, r7
 8020538:	f85d 7b04 	ldr.w	r7, [sp], #4
 802053c:	4770      	bx	lr
 802053e:	bf00      	nop
 8020540:	200124f4 	.word	0x200124f4
 8020544:	200124f6 	.word	0x200124f6
 8020548:	200124f8 	.word	0x200124f8

0802054c <GetAddrInputRegister>:

uint8_t* GetAddrInputRegister(uint16_t address)
{
 802054c:	b480      	push	{r7}
 802054e:	b085      	sub	sp, #20
 8020550:	af00      	add	r7, sp, #0
 8020552:	4603      	mov	r3, r0
 8020554:	80fb      	strh	r3, [r7, #6]

	uint8_t *ptr;

	if (address < 256)
 8020556:	88fb      	ldrh	r3, [r7, #6]
 8020558:	2bff      	cmp	r3, #255	; 0xff
 802055a:	d808      	bhi.n	802056e <GetAddrInputRegister+0x22>

		ptr = (uint8_t*) &modbus.INPUTREGISTERS[ADD_IMEI_1 + (address)];
 802055c:	88fb      	ldrh	r3, [r7, #6]
 802055e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8020562:	005b      	lsls	r3, r3, #1
 8020564:	4a0a      	ldr	r2, [pc, #40]	; (8020590 <GetAddrInputRegister+0x44>)
 8020566:	4413      	add	r3, r2
 8020568:	3306      	adds	r3, #6
 802056a:	60fb      	str	r3, [r7, #12]
 802056c:	e009      	b.n	8020582 <GetAddrInputRegister+0x36>
	else
		ptr = (uint8_t*) &modbus.ESPELHO[ADD_IMEI_1 + ((address - 256))];
 802056e:	88fb      	ldrh	r3, [r7, #6]
 8020570:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8020574:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8020578:	005b      	lsls	r3, r3, #1
 802057a:	4a05      	ldr	r2, [pc, #20]	; (8020590 <GetAddrInputRegister+0x44>)
 802057c:	4413      	add	r3, r2
 802057e:	3304      	adds	r3, #4
 8020580:	60fb      	str	r3, [r7, #12]
	return ptr;
 8020582:	68fb      	ldr	r3, [r7, #12]
}
 8020584:	4618      	mov	r0, r3
 8020586:	3714      	adds	r7, #20
 8020588:	46bd      	mov	sp, r7
 802058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802058e:	4770      	bx	lr
 8020590:	200124f4 	.word	0x200124f4

08020594 <GetAddrHoldingRegister>:

uint8_t* GetAddrHoldingRegister(uint16_t address)
{
 8020594:	b480      	push	{r7}
 8020596:	b085      	sub	sp, #20
 8020598:	af00      	add	r7, sp, #0
 802059a:	4603      	mov	r3, r0
 802059c:	80fb      	strh	r3, [r7, #6]

	uint8_t *ptr;

	if (address < 500)
 802059e:	88fb      	ldrh	r3, [r7, #6]
 80205a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80205a4:	d206      	bcs.n	80205b4 <GetAddrHoldingRegister+0x20>

		ptr = (uint8_t*) &modbus.HOLDINGREGISTERS[ADD_TEMVALCONGPR + (address)];
 80205a6:	88fb      	ldrh	r3, [r7, #6]
 80205a8:	005b      	lsls	r3, r3, #1
 80205aa:	4a09      	ldr	r2, [pc, #36]	; (80205d0 <GetAddrHoldingRegister+0x3c>)
 80205ac:	4413      	add	r3, r2
 80205ae:	3306      	adds	r3, #6
 80205b0:	60fb      	str	r3, [r7, #12]
 80205b2:	e006      	b.n	80205c2 <GetAddrHoldingRegister+0x2e>
	//ptr = (uint8_t*) &modbusMapa.TEMVALCONGPR + (address * 2);
	else
		ptr = (uint8_t*) &modbus.HOLDINGREGISTERS[(ADD_NUMSER_1 - 130)
				+ (address - 500)];
 80205b4:	88fb      	ldrh	r3, [r7, #6]
 80205b6:	3b82      	subs	r3, #130	; 0x82
		ptr = (uint8_t*) &modbus.HOLDINGREGISTERS[(ADD_NUMSER_1 - 130)
 80205b8:	005b      	lsls	r3, r3, #1
 80205ba:	4a05      	ldr	r2, [pc, #20]	; (80205d0 <GetAddrHoldingRegister+0x3c>)
 80205bc:	4413      	add	r3, r2
 80205be:	3306      	adds	r3, #6
 80205c0:	60fb      	str	r3, [r7, #12]
	//ptr = (uint8_t*) &modbusMapa.NUMSER_1 + ((address - 500) * 2);
	return ptr;
 80205c2:	68fb      	ldr	r3, [r7, #12]
}
 80205c4:	4618      	mov	r0, r3
 80205c6:	3714      	adds	r7, #20
 80205c8:	46bd      	mov	sp, r7
 80205ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205ce:	4770      	bx	lr
 80205d0:	200124f4 	.word	0x200124f4

080205d4 <LoadMapFromFile>:




void LoadMapFromFile ()
{
 80205d4:	b580      	push	{r7, lr}
 80205d6:	af00      	add	r7, sp, #0
	load_mb_from_file(&modbus);
 80205d8:	4802      	ldr	r0, [pc, #8]	; (80205e4 <LoadMapFromFile+0x10>)
 80205da:	f7e0 fb77 	bl	8000ccc <load_mb_from_file>

}
 80205de:	bf00      	nop
 80205e0:	bd80      	pop	{r7, pc}
 80205e2:	bf00      	nop
 80205e4:	200124f4 	.word	0x200124f4

080205e8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80205e8:	b480      	push	{r7}
 80205ea:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80205ec:	bf00      	nop
 80205ee:	46bd      	mov	sp, r7
 80205f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205f4:	4770      	bx	lr
	...

080205f8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80205f8:	b580      	push	{r7, lr}
 80205fa:	b086      	sub	sp, #24
 80205fc:	af04      	add	r7, sp, #16
 80205fe:	4603      	mov	r3, r0
 8020600:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8020602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020606:	9302      	str	r3, [sp, #8]
 8020608:	2301      	movs	r3, #1
 802060a:	9301      	str	r3, [sp, #4]
 802060c:	1dfb      	adds	r3, r7, #7
 802060e:	9300      	str	r3, [sp, #0]
 8020610:	2301      	movs	r3, #1
 8020612:	2200      	movs	r2, #0
 8020614:	2178      	movs	r1, #120	; 0x78
 8020616:	4803      	ldr	r0, [pc, #12]	; (8020624 <ssd1306_WriteCommand+0x2c>)
 8020618:	f7e3 fcd2 	bl	8003fc0 <HAL_I2C_Mem_Write>
}
 802061c:	bf00      	nop
 802061e:	3708      	adds	r7, #8
 8020620:	46bd      	mov	sp, r7
 8020622:	bd80      	pop	{r7, pc}
 8020624:	200009ec 	.word	0x200009ec

08020628 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8020628:	b580      	push	{r7, lr}
 802062a:	b086      	sub	sp, #24
 802062c:	af04      	add	r7, sp, #16
 802062e:	6078      	str	r0, [r7, #4]
 8020630:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8020632:	683b      	ldr	r3, [r7, #0]
 8020634:	b29b      	uxth	r3, r3
 8020636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802063a:	9202      	str	r2, [sp, #8]
 802063c:	9301      	str	r3, [sp, #4]
 802063e:	687b      	ldr	r3, [r7, #4]
 8020640:	9300      	str	r3, [sp, #0]
 8020642:	2301      	movs	r3, #1
 8020644:	2240      	movs	r2, #64	; 0x40
 8020646:	2178      	movs	r1, #120	; 0x78
 8020648:	4803      	ldr	r0, [pc, #12]	; (8020658 <ssd1306_WriteData+0x30>)
 802064a:	f7e3 fcb9 	bl	8003fc0 <HAL_I2C_Mem_Write>
}
 802064e:	bf00      	nop
 8020650:	3708      	adds	r7, #8
 8020652:	46bd      	mov	sp, r7
 8020654:	bd80      	pop	{r7, pc}
 8020656:	bf00      	nop
 8020658:	200009ec 	.word	0x200009ec

0802065c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 802065c:	b580      	push	{r7, lr}
 802065e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8020660:	f7ff ffc2 	bl	80205e8 <ssd1306_Reset>

    // Wait for the screen to boot
    //HAL_Delay(100);

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8020664:	2000      	movs	r0, #0
 8020666:	f000 f9cf 	bl	8020a08 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 802066a:	2020      	movs	r0, #32
 802066c:	f7ff ffc4 	bl	80205f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8020670:	2000      	movs	r0, #0
 8020672:	f7ff ffc1 	bl	80205f8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8020676:	20b0      	movs	r0, #176	; 0xb0
 8020678:	f7ff ffbe 	bl	80205f8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 802067c:	20c8      	movs	r0, #200	; 0xc8
 802067e:	f7ff ffbb 	bl	80205f8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8020682:	2000      	movs	r0, #0
 8020684:	f7ff ffb8 	bl	80205f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8020688:	2010      	movs	r0, #16
 802068a:	f7ff ffb5 	bl	80205f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 802068e:	2040      	movs	r0, #64	; 0x40
 8020690:	f7ff ffb2 	bl	80205f8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8020694:	20ff      	movs	r0, #255	; 0xff
 8020696:	f000 f9a3 	bl	80209e0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 802069a:	20a1      	movs	r0, #161	; 0xa1
 802069c:	f7ff ffac 	bl	80205f8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80206a0:	20a6      	movs	r0, #166	; 0xa6
 80206a2:	f7ff ffa9 	bl	80205f8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80206a6:	20a8      	movs	r0, #168	; 0xa8
 80206a8:	f7ff ffa6 	bl	80205f8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 80206ac:	201f      	movs	r0, #31
 80206ae:	f7ff ffa3 	bl	80205f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80206b2:	20a4      	movs	r0, #164	; 0xa4
 80206b4:	f7ff ffa0 	bl	80205f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80206b8:	20d3      	movs	r0, #211	; 0xd3
 80206ba:	f7ff ff9d 	bl	80205f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80206be:	2000      	movs	r0, #0
 80206c0:	f7ff ff9a 	bl	80205f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80206c4:	20d5      	movs	r0, #213	; 0xd5
 80206c6:	f7ff ff97 	bl	80205f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80206ca:	20f0      	movs	r0, #240	; 0xf0
 80206cc:	f7ff ff94 	bl	80205f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80206d0:	20d9      	movs	r0, #217	; 0xd9
 80206d2:	f7ff ff91 	bl	80205f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80206d6:	2022      	movs	r0, #34	; 0x22
 80206d8:	f7ff ff8e 	bl	80205f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80206dc:	20da      	movs	r0, #218	; 0xda
 80206de:	f7ff ff8b 	bl	80205f8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80206e2:	2002      	movs	r0, #2
 80206e4:	f7ff ff88 	bl	80205f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80206e8:	20db      	movs	r0, #219	; 0xdb
 80206ea:	f7ff ff85 	bl	80205f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80206ee:	2020      	movs	r0, #32
 80206f0:	f7ff ff82 	bl	80205f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80206f4:	208d      	movs	r0, #141	; 0x8d
 80206f6:	f7ff ff7f 	bl	80205f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80206fa:	2014      	movs	r0, #20
 80206fc:	f7ff ff7c 	bl	80205f8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8020700:	2001      	movs	r0, #1
 8020702:	f000 f981 	bl	8020a08 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8020706:	2000      	movs	r0, #0
 8020708:	f000 f810 	bl	802072c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 802070c:	f000 f826 	bl	802075c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8020710:	4b05      	ldr	r3, [pc, #20]	; (8020728 <ssd1306_Init+0xcc>)
 8020712:	2200      	movs	r2, #0
 8020714:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8020716:	4b04      	ldr	r3, [pc, #16]	; (8020728 <ssd1306_Init+0xcc>)
 8020718:	2200      	movs	r2, #0
 802071a:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 802071c:	4b02      	ldr	r3, [pc, #8]	; (8020728 <ssd1306_Init+0xcc>)
 802071e:	2201      	movs	r2, #1
 8020720:	711a      	strb	r2, [r3, #4]
}
 8020722:	bf00      	nop
 8020724:	bd80      	pop	{r7, pc}
 8020726:	bf00      	nop
 8020728:	20012b70 	.word	0x20012b70

0802072c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 802072c:	b580      	push	{r7, lr}
 802072e:	b082      	sub	sp, #8
 8020730:	af00      	add	r7, sp, #0
 8020732:	4603      	mov	r3, r0
 8020734:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8020736:	79fb      	ldrb	r3, [r7, #7]
 8020738:	2b00      	cmp	r3, #0
 802073a:	d101      	bne.n	8020740 <ssd1306_Fill+0x14>
 802073c:	2300      	movs	r3, #0
 802073e:	e000      	b.n	8020742 <ssd1306_Fill+0x16>
 8020740:	23ff      	movs	r3, #255	; 0xff
 8020742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020746:	4619      	mov	r1, r3
 8020748:	4803      	ldr	r0, [pc, #12]	; (8020758 <ssd1306_Fill+0x2c>)
 802074a:	f001 f9fb 	bl	8021b44 <memset>
}
 802074e:	bf00      	nop
 8020750:	3708      	adds	r7, #8
 8020752:	46bd      	mov	sp, r7
 8020754:	bd80      	pop	{r7, pc}
 8020756:	bf00      	nop
 8020758:	20012970 	.word	0x20012970

0802075c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 802075c:	b580      	push	{r7, lr}
 802075e:	b082      	sub	sp, #8
 8020760:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8020762:	2300      	movs	r3, #0
 8020764:	71fb      	strb	r3, [r7, #7]
 8020766:	e016      	b.n	8020796 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8020768:	79fb      	ldrb	r3, [r7, #7]
 802076a:	3b50      	subs	r3, #80	; 0x50
 802076c:	b2db      	uxtb	r3, r3
 802076e:	4618      	mov	r0, r3
 8020770:	f7ff ff42 	bl	80205f8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8020774:	2000      	movs	r0, #0
 8020776:	f7ff ff3f 	bl	80205f8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 802077a:	2010      	movs	r0, #16
 802077c:	f7ff ff3c 	bl	80205f8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8020780:	79fb      	ldrb	r3, [r7, #7]
 8020782:	01db      	lsls	r3, r3, #7
 8020784:	4a08      	ldr	r2, [pc, #32]	; (80207a8 <ssd1306_UpdateScreen+0x4c>)
 8020786:	4413      	add	r3, r2
 8020788:	2180      	movs	r1, #128	; 0x80
 802078a:	4618      	mov	r0, r3
 802078c:	f7ff ff4c 	bl	8020628 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8020790:	79fb      	ldrb	r3, [r7, #7]
 8020792:	3301      	adds	r3, #1
 8020794:	71fb      	strb	r3, [r7, #7]
 8020796:	79fb      	ldrb	r3, [r7, #7]
 8020798:	2b03      	cmp	r3, #3
 802079a:	d9e5      	bls.n	8020768 <ssd1306_UpdateScreen+0xc>
    }
}
 802079c:	bf00      	nop
 802079e:	bf00      	nop
 80207a0:	3708      	adds	r7, #8
 80207a2:	46bd      	mov	sp, r7
 80207a4:	bd80      	pop	{r7, pc}
 80207a6:	bf00      	nop
 80207a8:	20012970 	.word	0x20012970

080207ac <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80207ac:	b480      	push	{r7}
 80207ae:	b083      	sub	sp, #12
 80207b0:	af00      	add	r7, sp, #0
 80207b2:	4603      	mov	r3, r0
 80207b4:	71fb      	strb	r3, [r7, #7]
 80207b6:	460b      	mov	r3, r1
 80207b8:	71bb      	strb	r3, [r7, #6]
 80207ba:	4613      	mov	r3, r2
 80207bc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80207be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80207c2:	2b00      	cmp	r3, #0
 80207c4:	db3d      	blt.n	8020842 <ssd1306_DrawPixel+0x96>
 80207c6:	79bb      	ldrb	r3, [r7, #6]
 80207c8:	2b1f      	cmp	r3, #31
 80207ca:	d83a      	bhi.n	8020842 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80207cc:	797b      	ldrb	r3, [r7, #5]
 80207ce:	2b01      	cmp	r3, #1
 80207d0:	d11a      	bne.n	8020808 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80207d2:	79fa      	ldrb	r2, [r7, #7]
 80207d4:	79bb      	ldrb	r3, [r7, #6]
 80207d6:	08db      	lsrs	r3, r3, #3
 80207d8:	b2d8      	uxtb	r0, r3
 80207da:	4603      	mov	r3, r0
 80207dc:	01db      	lsls	r3, r3, #7
 80207de:	4413      	add	r3, r2
 80207e0:	4a1b      	ldr	r2, [pc, #108]	; (8020850 <ssd1306_DrawPixel+0xa4>)
 80207e2:	5cd3      	ldrb	r3, [r2, r3]
 80207e4:	b25a      	sxtb	r2, r3
 80207e6:	79bb      	ldrb	r3, [r7, #6]
 80207e8:	f003 0307 	and.w	r3, r3, #7
 80207ec:	2101      	movs	r1, #1
 80207ee:	fa01 f303 	lsl.w	r3, r1, r3
 80207f2:	b25b      	sxtb	r3, r3
 80207f4:	4313      	orrs	r3, r2
 80207f6:	b259      	sxtb	r1, r3
 80207f8:	79fa      	ldrb	r2, [r7, #7]
 80207fa:	4603      	mov	r3, r0
 80207fc:	01db      	lsls	r3, r3, #7
 80207fe:	4413      	add	r3, r2
 8020800:	b2c9      	uxtb	r1, r1
 8020802:	4a13      	ldr	r2, [pc, #76]	; (8020850 <ssd1306_DrawPixel+0xa4>)
 8020804:	54d1      	strb	r1, [r2, r3]
 8020806:	e01d      	b.n	8020844 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8020808:	79fa      	ldrb	r2, [r7, #7]
 802080a:	79bb      	ldrb	r3, [r7, #6]
 802080c:	08db      	lsrs	r3, r3, #3
 802080e:	b2d8      	uxtb	r0, r3
 8020810:	4603      	mov	r3, r0
 8020812:	01db      	lsls	r3, r3, #7
 8020814:	4413      	add	r3, r2
 8020816:	4a0e      	ldr	r2, [pc, #56]	; (8020850 <ssd1306_DrawPixel+0xa4>)
 8020818:	5cd3      	ldrb	r3, [r2, r3]
 802081a:	b25a      	sxtb	r2, r3
 802081c:	79bb      	ldrb	r3, [r7, #6]
 802081e:	f003 0307 	and.w	r3, r3, #7
 8020822:	2101      	movs	r1, #1
 8020824:	fa01 f303 	lsl.w	r3, r1, r3
 8020828:	b25b      	sxtb	r3, r3
 802082a:	43db      	mvns	r3, r3
 802082c:	b25b      	sxtb	r3, r3
 802082e:	4013      	ands	r3, r2
 8020830:	b259      	sxtb	r1, r3
 8020832:	79fa      	ldrb	r2, [r7, #7]
 8020834:	4603      	mov	r3, r0
 8020836:	01db      	lsls	r3, r3, #7
 8020838:	4413      	add	r3, r2
 802083a:	b2c9      	uxtb	r1, r1
 802083c:	4a04      	ldr	r2, [pc, #16]	; (8020850 <ssd1306_DrawPixel+0xa4>)
 802083e:	54d1      	strb	r1, [r2, r3]
 8020840:	e000      	b.n	8020844 <ssd1306_DrawPixel+0x98>
        return;
 8020842:	bf00      	nop
    }
}
 8020844:	370c      	adds	r7, #12
 8020846:	46bd      	mov	sp, r7
 8020848:	f85d 7b04 	ldr.w	r7, [sp], #4
 802084c:	4770      	bx	lr
 802084e:	bf00      	nop
 8020850:	20012970 	.word	0x20012970

08020854 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8020854:	b590      	push	{r4, r7, lr}
 8020856:	b089      	sub	sp, #36	; 0x24
 8020858:	af00      	add	r7, sp, #0
 802085a:	4604      	mov	r4, r0
 802085c:	1d38      	adds	r0, r7, #4
 802085e:	e880 0006 	stmia.w	r0, {r1, r2}
 8020862:	461a      	mov	r2, r3
 8020864:	4623      	mov	r3, r4
 8020866:	73fb      	strb	r3, [r7, #15]
 8020868:	4613      	mov	r3, r2
 802086a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 802086c:	7bfb      	ldrb	r3, [r7, #15]
 802086e:	2b1f      	cmp	r3, #31
 8020870:	d902      	bls.n	8020878 <ssd1306_WriteChar+0x24>
 8020872:	7bfb      	ldrb	r3, [r7, #15]
 8020874:	2b7e      	cmp	r3, #126	; 0x7e
 8020876:	d901      	bls.n	802087c <ssd1306_WriteChar+0x28>
        return 0;
 8020878:	2300      	movs	r3, #0
 802087a:	e06d      	b.n	8020958 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 802087c:	4b38      	ldr	r3, [pc, #224]	; (8020960 <ssd1306_WriteChar+0x10c>)
 802087e:	881b      	ldrh	r3, [r3, #0]
 8020880:	461a      	mov	r2, r3
 8020882:	793b      	ldrb	r3, [r7, #4]
 8020884:	4413      	add	r3, r2
 8020886:	2b80      	cmp	r3, #128	; 0x80
 8020888:	dc06      	bgt.n	8020898 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 802088a:	4b35      	ldr	r3, [pc, #212]	; (8020960 <ssd1306_WriteChar+0x10c>)
 802088c:	885b      	ldrh	r3, [r3, #2]
 802088e:	461a      	mov	r2, r3
 8020890:	797b      	ldrb	r3, [r7, #5]
 8020892:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8020894:	2b20      	cmp	r3, #32
 8020896:	dd01      	ble.n	802089c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8020898:	2300      	movs	r3, #0
 802089a:	e05d      	b.n	8020958 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 802089c:	2300      	movs	r3, #0
 802089e:	61fb      	str	r3, [r7, #28]
 80208a0:	e04c      	b.n	802093c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80208a2:	68ba      	ldr	r2, [r7, #8]
 80208a4:	7bfb      	ldrb	r3, [r7, #15]
 80208a6:	3b20      	subs	r3, #32
 80208a8:	7979      	ldrb	r1, [r7, #5]
 80208aa:	fb01 f303 	mul.w	r3, r1, r3
 80208ae:	4619      	mov	r1, r3
 80208b0:	69fb      	ldr	r3, [r7, #28]
 80208b2:	440b      	add	r3, r1
 80208b4:	005b      	lsls	r3, r3, #1
 80208b6:	4413      	add	r3, r2
 80208b8:	881b      	ldrh	r3, [r3, #0]
 80208ba:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80208bc:	2300      	movs	r3, #0
 80208be:	61bb      	str	r3, [r7, #24]
 80208c0:	e034      	b.n	802092c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80208c2:	697a      	ldr	r2, [r7, #20]
 80208c4:	69bb      	ldr	r3, [r7, #24]
 80208c6:	fa02 f303 	lsl.w	r3, r2, r3
 80208ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80208ce:	2b00      	cmp	r3, #0
 80208d0:	d012      	beq.n	80208f8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80208d2:	4b23      	ldr	r3, [pc, #140]	; (8020960 <ssd1306_WriteChar+0x10c>)
 80208d4:	881b      	ldrh	r3, [r3, #0]
 80208d6:	b2da      	uxtb	r2, r3
 80208d8:	69bb      	ldr	r3, [r7, #24]
 80208da:	b2db      	uxtb	r3, r3
 80208dc:	4413      	add	r3, r2
 80208de:	b2d8      	uxtb	r0, r3
 80208e0:	4b1f      	ldr	r3, [pc, #124]	; (8020960 <ssd1306_WriteChar+0x10c>)
 80208e2:	885b      	ldrh	r3, [r3, #2]
 80208e4:	b2da      	uxtb	r2, r3
 80208e6:	69fb      	ldr	r3, [r7, #28]
 80208e8:	b2db      	uxtb	r3, r3
 80208ea:	4413      	add	r3, r2
 80208ec:	b2db      	uxtb	r3, r3
 80208ee:	7bba      	ldrb	r2, [r7, #14]
 80208f0:	4619      	mov	r1, r3
 80208f2:	f7ff ff5b 	bl	80207ac <ssd1306_DrawPixel>
 80208f6:	e016      	b.n	8020926 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80208f8:	4b19      	ldr	r3, [pc, #100]	; (8020960 <ssd1306_WriteChar+0x10c>)
 80208fa:	881b      	ldrh	r3, [r3, #0]
 80208fc:	b2da      	uxtb	r2, r3
 80208fe:	69bb      	ldr	r3, [r7, #24]
 8020900:	b2db      	uxtb	r3, r3
 8020902:	4413      	add	r3, r2
 8020904:	b2d8      	uxtb	r0, r3
 8020906:	4b16      	ldr	r3, [pc, #88]	; (8020960 <ssd1306_WriteChar+0x10c>)
 8020908:	885b      	ldrh	r3, [r3, #2]
 802090a:	b2da      	uxtb	r2, r3
 802090c:	69fb      	ldr	r3, [r7, #28]
 802090e:	b2db      	uxtb	r3, r3
 8020910:	4413      	add	r3, r2
 8020912:	b2d9      	uxtb	r1, r3
 8020914:	7bbb      	ldrb	r3, [r7, #14]
 8020916:	2b00      	cmp	r3, #0
 8020918:	bf0c      	ite	eq
 802091a:	2301      	moveq	r3, #1
 802091c:	2300      	movne	r3, #0
 802091e:	b2db      	uxtb	r3, r3
 8020920:	461a      	mov	r2, r3
 8020922:	f7ff ff43 	bl	80207ac <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8020926:	69bb      	ldr	r3, [r7, #24]
 8020928:	3301      	adds	r3, #1
 802092a:	61bb      	str	r3, [r7, #24]
 802092c:	793b      	ldrb	r3, [r7, #4]
 802092e:	461a      	mov	r2, r3
 8020930:	69bb      	ldr	r3, [r7, #24]
 8020932:	4293      	cmp	r3, r2
 8020934:	d3c5      	bcc.n	80208c2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8020936:	69fb      	ldr	r3, [r7, #28]
 8020938:	3301      	adds	r3, #1
 802093a:	61fb      	str	r3, [r7, #28]
 802093c:	797b      	ldrb	r3, [r7, #5]
 802093e:	461a      	mov	r2, r3
 8020940:	69fb      	ldr	r3, [r7, #28]
 8020942:	4293      	cmp	r3, r2
 8020944:	d3ad      	bcc.n	80208a2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8020946:	4b06      	ldr	r3, [pc, #24]	; (8020960 <ssd1306_WriteChar+0x10c>)
 8020948:	881a      	ldrh	r2, [r3, #0]
 802094a:	793b      	ldrb	r3, [r7, #4]
 802094c:	b29b      	uxth	r3, r3
 802094e:	4413      	add	r3, r2
 8020950:	b29a      	uxth	r2, r3
 8020952:	4b03      	ldr	r3, [pc, #12]	; (8020960 <ssd1306_WriteChar+0x10c>)
 8020954:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8020956:	7bfb      	ldrb	r3, [r7, #15]
}
 8020958:	4618      	mov	r0, r3
 802095a:	3724      	adds	r7, #36	; 0x24
 802095c:	46bd      	mov	sp, r7
 802095e:	bd90      	pop	{r4, r7, pc}
 8020960:	20012b70 	.word	0x20012b70

08020964 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8020964:	b580      	push	{r7, lr}
 8020966:	b084      	sub	sp, #16
 8020968:	af00      	add	r7, sp, #0
 802096a:	60f8      	str	r0, [r7, #12]
 802096c:	1d38      	adds	r0, r7, #4
 802096e:	e880 0006 	stmia.w	r0, {r1, r2}
 8020972:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8020974:	e012      	b.n	802099c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8020976:	68fb      	ldr	r3, [r7, #12]
 8020978:	7818      	ldrb	r0, [r3, #0]
 802097a:	78fb      	ldrb	r3, [r7, #3]
 802097c:	1d3a      	adds	r2, r7, #4
 802097e:	ca06      	ldmia	r2, {r1, r2}
 8020980:	f7ff ff68 	bl	8020854 <ssd1306_WriteChar>
 8020984:	4603      	mov	r3, r0
 8020986:	461a      	mov	r2, r3
 8020988:	68fb      	ldr	r3, [r7, #12]
 802098a:	781b      	ldrb	r3, [r3, #0]
 802098c:	429a      	cmp	r2, r3
 802098e:	d002      	beq.n	8020996 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8020990:	68fb      	ldr	r3, [r7, #12]
 8020992:	781b      	ldrb	r3, [r3, #0]
 8020994:	e008      	b.n	80209a8 <ssd1306_WriteString+0x44>
        }
        str++;
 8020996:	68fb      	ldr	r3, [r7, #12]
 8020998:	3301      	adds	r3, #1
 802099a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 802099c:	68fb      	ldr	r3, [r7, #12]
 802099e:	781b      	ldrb	r3, [r3, #0]
 80209a0:	2b00      	cmp	r3, #0
 80209a2:	d1e8      	bne.n	8020976 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80209a4:	68fb      	ldr	r3, [r7, #12]
 80209a6:	781b      	ldrb	r3, [r3, #0]
}
 80209a8:	4618      	mov	r0, r3
 80209aa:	3710      	adds	r7, #16
 80209ac:	46bd      	mov	sp, r7
 80209ae:	bd80      	pop	{r7, pc}

080209b0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80209b0:	b480      	push	{r7}
 80209b2:	b083      	sub	sp, #12
 80209b4:	af00      	add	r7, sp, #0
 80209b6:	4603      	mov	r3, r0
 80209b8:	460a      	mov	r2, r1
 80209ba:	71fb      	strb	r3, [r7, #7]
 80209bc:	4613      	mov	r3, r2
 80209be:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80209c0:	79fb      	ldrb	r3, [r7, #7]
 80209c2:	b29a      	uxth	r2, r3
 80209c4:	4b05      	ldr	r3, [pc, #20]	; (80209dc <ssd1306_SetCursor+0x2c>)
 80209c6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80209c8:	79bb      	ldrb	r3, [r7, #6]
 80209ca:	b29a      	uxth	r2, r3
 80209cc:	4b03      	ldr	r3, [pc, #12]	; (80209dc <ssd1306_SetCursor+0x2c>)
 80209ce:	805a      	strh	r2, [r3, #2]
}
 80209d0:	bf00      	nop
 80209d2:	370c      	adds	r7, #12
 80209d4:	46bd      	mov	sp, r7
 80209d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209da:	4770      	bx	lr
 80209dc:	20012b70 	.word	0x20012b70

080209e0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80209e0:	b580      	push	{r7, lr}
 80209e2:	b084      	sub	sp, #16
 80209e4:	af00      	add	r7, sp, #0
 80209e6:	4603      	mov	r3, r0
 80209e8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80209ea:	2381      	movs	r3, #129	; 0x81
 80209ec:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80209ee:	7bfb      	ldrb	r3, [r7, #15]
 80209f0:	4618      	mov	r0, r3
 80209f2:	f7ff fe01 	bl	80205f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80209f6:	79fb      	ldrb	r3, [r7, #7]
 80209f8:	4618      	mov	r0, r3
 80209fa:	f7ff fdfd 	bl	80205f8 <ssd1306_WriteCommand>
}
 80209fe:	bf00      	nop
 8020a00:	3710      	adds	r7, #16
 8020a02:	46bd      	mov	sp, r7
 8020a04:	bd80      	pop	{r7, pc}
	...

08020a08 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8020a08:	b580      	push	{r7, lr}
 8020a0a:	b084      	sub	sp, #16
 8020a0c:	af00      	add	r7, sp, #0
 8020a0e:	4603      	mov	r3, r0
 8020a10:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8020a12:	79fb      	ldrb	r3, [r7, #7]
 8020a14:	2b00      	cmp	r3, #0
 8020a16:	d005      	beq.n	8020a24 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8020a18:	23af      	movs	r3, #175	; 0xaf
 8020a1a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8020a1c:	4b08      	ldr	r3, [pc, #32]	; (8020a40 <ssd1306_SetDisplayOn+0x38>)
 8020a1e:	2201      	movs	r2, #1
 8020a20:	715a      	strb	r2, [r3, #5]
 8020a22:	e004      	b.n	8020a2e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8020a24:	23ae      	movs	r3, #174	; 0xae
 8020a26:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8020a28:	4b05      	ldr	r3, [pc, #20]	; (8020a40 <ssd1306_SetDisplayOn+0x38>)
 8020a2a:	2200      	movs	r2, #0
 8020a2c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8020a2e:	7bfb      	ldrb	r3, [r7, #15]
 8020a30:	4618      	mov	r0, r3
 8020a32:	f7ff fde1 	bl	80205f8 <ssd1306_WriteCommand>
}
 8020a36:	bf00      	nop
 8020a38:	3710      	adds	r7, #16
 8020a3a:	46bd      	mov	sp, r7
 8020a3c:	bd80      	pop	{r7, pc}
 8020a3e:	bf00      	nop
 8020a40:	20012b70 	.word	0x20012b70

08020a44 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8020a44:	b580      	push	{r7, lr}
 8020a46:	b086      	sub	sp, #24
 8020a48:	af02      	add	r7, sp, #8
 8020a4a:	4603      	mov	r3, r0
 8020a4c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

 HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8020a4e:	f107 020f 	add.w	r2, r7, #15
 8020a52:	1df9      	adds	r1, r7, #7
 8020a54:	2364      	movs	r3, #100	; 0x64
 8020a56:	9300      	str	r3, [sp, #0]
 8020a58:	2301      	movs	r3, #1
 8020a5a:	4804      	ldr	r0, [pc, #16]	; (8020a6c <W25qxx_Spi+0x28>)
 8020a5c:	f7e4 fd88 	bl	8005570 <HAL_SPI_TransmitReceive>


	return ret;
 8020a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8020a62:	4618      	mov	r0, r3
 8020a64:	3710      	adds	r7, #16
 8020a66:	46bd      	mov	sp, r7
 8020a68:	bd80      	pop	{r7, pc}
 8020a6a:	bf00      	nop
 8020a6c:	20000a9c 	.word	0x20000a9c

08020a70 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8020a70:	b580      	push	{r7, lr}
 8020a72:	b084      	sub	sp, #16
 8020a74:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8020a76:	2300      	movs	r3, #0
 8020a78:	60fb      	str	r3, [r7, #12]
 8020a7a:	2300      	movs	r3, #0
 8020a7c:	60bb      	str	r3, [r7, #8]
 8020a7e:	2300      	movs	r3, #0
 8020a80:	607b      	str	r3, [r7, #4]
 8020a82:	2300      	movs	r3, #0
 8020a84:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8020a86:	2200      	movs	r2, #0
 8020a88:	2108      	movs	r1, #8
 8020a8a:	4813      	ldr	r0, [pc, #76]	; (8020ad8 <W25qxx_ReadID+0x68>)
 8020a8c:	f7e3 f920 	bl	8003cd0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8020a90:	209f      	movs	r0, #159	; 0x9f
 8020a92:	f7ff ffd7 	bl	8020a44 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8020a96:	20a5      	movs	r0, #165	; 0xa5
 8020a98:	f7ff ffd4 	bl	8020a44 <W25qxx_Spi>
 8020a9c:	4603      	mov	r3, r0
 8020a9e:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8020aa0:	20a5      	movs	r0, #165	; 0xa5
 8020aa2:	f7ff ffcf 	bl	8020a44 <W25qxx_Spi>
 8020aa6:	4603      	mov	r3, r0
 8020aa8:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8020aaa:	20a5      	movs	r0, #165	; 0xa5
 8020aac:	f7ff ffca 	bl	8020a44 <W25qxx_Spi>
 8020ab0:	4603      	mov	r3, r0
 8020ab2:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8020ab4:	2201      	movs	r2, #1
 8020ab6:	2108      	movs	r1, #8
 8020ab8:	4807      	ldr	r0, [pc, #28]	; (8020ad8 <W25qxx_ReadID+0x68>)
 8020aba:	f7e3 f909 	bl	8003cd0 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8020abe:	68bb      	ldr	r3, [r7, #8]
 8020ac0:	041a      	lsls	r2, r3, #16
 8020ac2:	687b      	ldr	r3, [r7, #4]
 8020ac4:	021b      	lsls	r3, r3, #8
 8020ac6:	4313      	orrs	r3, r2
 8020ac8:	683a      	ldr	r2, [r7, #0]
 8020aca:	4313      	orrs	r3, r2
 8020acc:	60fb      	str	r3, [r7, #12]
	return Temp;
 8020ace:	68fb      	ldr	r3, [r7, #12]
}
 8020ad0:	4618      	mov	r0, r3
 8020ad2:	3710      	adds	r7, #16
 8020ad4:	46bd      	mov	sp, r7
 8020ad6:	bd80      	pop	{r7, pc}
 8020ad8:	40021000 	.word	0x40021000

08020adc <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8020adc:	b590      	push	{r4, r7, lr}
 8020ade:	b083      	sub	sp, #12
 8020ae0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8020ae2:	2200      	movs	r2, #0
 8020ae4:	2108      	movs	r1, #8
 8020ae6:	4816      	ldr	r0, [pc, #88]	; (8020b40 <W25qxx_ReadUniqID+0x64>)
 8020ae8:	f7e3 f8f2 	bl	8003cd0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8020aec:	204b      	movs	r0, #75	; 0x4b
 8020aee:	f7ff ffa9 	bl	8020a44 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8020af2:	2300      	movs	r3, #0
 8020af4:	71fb      	strb	r3, [r7, #7]
 8020af6:	e005      	b.n	8020b04 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8020af8:	20a5      	movs	r0, #165	; 0xa5
 8020afa:	f7ff ffa3 	bl	8020a44 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8020afe:	79fb      	ldrb	r3, [r7, #7]
 8020b00:	3301      	adds	r3, #1
 8020b02:	71fb      	strb	r3, [r7, #7]
 8020b04:	79fb      	ldrb	r3, [r7, #7]
 8020b06:	2b03      	cmp	r3, #3
 8020b08:	d9f6      	bls.n	8020af8 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8020b0a:	2300      	movs	r3, #0
 8020b0c:	71bb      	strb	r3, [r7, #6]
 8020b0e:	e00b      	b.n	8020b28 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8020b10:	79bc      	ldrb	r4, [r7, #6]
 8020b12:	20a5      	movs	r0, #165	; 0xa5
 8020b14:	f7ff ff96 	bl	8020a44 <W25qxx_Spi>
 8020b18:	4603      	mov	r3, r0
 8020b1a:	461a      	mov	r2, r3
 8020b1c:	4b09      	ldr	r3, [pc, #36]	; (8020b44 <W25qxx_ReadUniqID+0x68>)
 8020b1e:	4423      	add	r3, r4
 8020b20:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8020b22:	79bb      	ldrb	r3, [r7, #6]
 8020b24:	3301      	adds	r3, #1
 8020b26:	71bb      	strb	r3, [r7, #6]
 8020b28:	79bb      	ldrb	r3, [r7, #6]
 8020b2a:	2b07      	cmp	r3, #7
 8020b2c:	d9f0      	bls.n	8020b10 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8020b2e:	2201      	movs	r2, #1
 8020b30:	2108      	movs	r1, #8
 8020b32:	4803      	ldr	r0, [pc, #12]	; (8020b40 <W25qxx_ReadUniqID+0x64>)
 8020b34:	f7e3 f8cc 	bl	8003cd0 <HAL_GPIO_WritePin>
}
 8020b38:	bf00      	nop
 8020b3a:	370c      	adds	r7, #12
 8020b3c:	46bd      	mov	sp, r7
 8020b3e:	bd90      	pop	{r4, r7, pc}
 8020b40:	40021000 	.word	0x40021000
 8020b44:	20012b78 	.word	0x20012b78

08020b48 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8020b48:	b580      	push	{r7, lr}
 8020b4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8020b4c:	2200      	movs	r2, #0
 8020b4e:	2108      	movs	r1, #8
 8020b50:	4807      	ldr	r0, [pc, #28]	; (8020b70 <W25qxx_WriteEnable+0x28>)
 8020b52:	f7e3 f8bd 	bl	8003cd0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8020b56:	2006      	movs	r0, #6
 8020b58:	f7ff ff74 	bl	8020a44 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8020b5c:	2201      	movs	r2, #1
 8020b5e:	2108      	movs	r1, #8
 8020b60:	4803      	ldr	r0, [pc, #12]	; (8020b70 <W25qxx_WriteEnable+0x28>)
 8020b62:	f7e3 f8b5 	bl	8003cd0 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8020b66:	2001      	movs	r0, #1
 8020b68:	f7e1 fb9c 	bl	80022a4 <HAL_Delay>
}
 8020b6c:	bf00      	nop
 8020b6e:	bd80      	pop	{r7, pc}
 8020b70:	40021000 	.word	0x40021000

08020b74 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8020b74:	b580      	push	{r7, lr}
 8020b76:	b084      	sub	sp, #16
 8020b78:	af00      	add	r7, sp, #0
 8020b7a:	4603      	mov	r3, r0
 8020b7c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8020b7e:	2300      	movs	r3, #0
 8020b80:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8020b82:	2200      	movs	r2, #0
 8020b84:	2108      	movs	r1, #8
 8020b86:	481c      	ldr	r0, [pc, #112]	; (8020bf8 <W25qxx_ReadStatusRegister+0x84>)
 8020b88:	f7e3 f8a2 	bl	8003cd0 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8020b8c:	79fb      	ldrb	r3, [r7, #7]
 8020b8e:	2b01      	cmp	r3, #1
 8020b90:	d10c      	bne.n	8020bac <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8020b92:	2005      	movs	r0, #5
 8020b94:	f7ff ff56 	bl	8020a44 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8020b98:	20a5      	movs	r0, #165	; 0xa5
 8020b9a:	f7ff ff53 	bl	8020a44 <W25qxx_Spi>
 8020b9e:	4603      	mov	r3, r0
 8020ba0:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8020ba2:	4a16      	ldr	r2, [pc, #88]	; (8020bfc <W25qxx_ReadStatusRegister+0x88>)
 8020ba4:	7bfb      	ldrb	r3, [r7, #15]
 8020ba6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8020baa:	e01b      	b.n	8020be4 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8020bac:	79fb      	ldrb	r3, [r7, #7]
 8020bae:	2b02      	cmp	r3, #2
 8020bb0:	d10c      	bne.n	8020bcc <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8020bb2:	2035      	movs	r0, #53	; 0x35
 8020bb4:	f7ff ff46 	bl	8020a44 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8020bb8:	20a5      	movs	r0, #165	; 0xa5
 8020bba:	f7ff ff43 	bl	8020a44 <W25qxx_Spi>
 8020bbe:	4603      	mov	r3, r0
 8020bc0:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8020bc2:	4a0e      	ldr	r2, [pc, #56]	; (8020bfc <W25qxx_ReadStatusRegister+0x88>)
 8020bc4:	7bfb      	ldrb	r3, [r7, #15]
 8020bc6:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8020bca:	e00b      	b.n	8020be4 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8020bcc:	2015      	movs	r0, #21
 8020bce:	f7ff ff39 	bl	8020a44 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8020bd2:	20a5      	movs	r0, #165	; 0xa5
 8020bd4:	f7ff ff36 	bl	8020a44 <W25qxx_Spi>
 8020bd8:	4603      	mov	r3, r0
 8020bda:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8020bdc:	4a07      	ldr	r2, [pc, #28]	; (8020bfc <W25qxx_ReadStatusRegister+0x88>)
 8020bde:	7bfb      	ldrb	r3, [r7, #15]
 8020be0:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8020be4:	2201      	movs	r2, #1
 8020be6:	2108      	movs	r1, #8
 8020be8:	4803      	ldr	r0, [pc, #12]	; (8020bf8 <W25qxx_ReadStatusRegister+0x84>)
 8020bea:	f7e3 f871 	bl	8003cd0 <HAL_GPIO_WritePin>
	return status;
 8020bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8020bf0:	4618      	mov	r0, r3
 8020bf2:	3710      	adds	r7, #16
 8020bf4:	46bd      	mov	sp, r7
 8020bf6:	bd80      	pop	{r7, pc}
 8020bf8:	40021000 	.word	0x40021000
 8020bfc:	20012b78 	.word	0x20012b78

08020c00 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8020c00:	b580      	push	{r7, lr}
 8020c02:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8020c04:	2001      	movs	r0, #1
 8020c06:	f7e1 fb4d 	bl	80022a4 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8020c0a:	2200      	movs	r2, #0
 8020c0c:	2108      	movs	r1, #8
 8020c0e:	480f      	ldr	r0, [pc, #60]	; (8020c4c <W25qxx_WaitForWriteEnd+0x4c>)
 8020c10:	f7e3 f85e 	bl	8003cd0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8020c14:	2005      	movs	r0, #5
 8020c16:	f7ff ff15 	bl	8020a44 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8020c1a:	20a5      	movs	r0, #165	; 0xa5
 8020c1c:	f7ff ff12 	bl	8020a44 <W25qxx_Spi>
 8020c20:	4603      	mov	r3, r0
 8020c22:	461a      	mov	r2, r3
 8020c24:	4b0a      	ldr	r3, [pc, #40]	; (8020c50 <W25qxx_WaitForWriteEnd+0x50>)
 8020c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8020c2a:	2001      	movs	r0, #1
 8020c2c:	f7e1 fb3a 	bl	80022a4 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8020c30:	4b07      	ldr	r3, [pc, #28]	; (8020c50 <W25qxx_WaitForWriteEnd+0x50>)
 8020c32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8020c36:	f003 0301 	and.w	r3, r3, #1
 8020c3a:	2b00      	cmp	r3, #0
 8020c3c:	d1ed      	bne.n	8020c1a <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8020c3e:	2201      	movs	r2, #1
 8020c40:	2108      	movs	r1, #8
 8020c42:	4802      	ldr	r0, [pc, #8]	; (8020c4c <W25qxx_WaitForWriteEnd+0x4c>)
 8020c44:	f7e3 f844 	bl	8003cd0 <HAL_GPIO_WritePin>
}
 8020c48:	bf00      	nop
 8020c4a:	bd80      	pop	{r7, pc}
 8020c4c:	40021000 	.word	0x40021000
 8020c50:	20012b78 	.word	0x20012b78

08020c54 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8020c54:	b580      	push	{r7, lr}
 8020c56:	b082      	sub	sp, #8
 8020c58:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8020c5a:	4b65      	ldr	r3, [pc, #404]	; (8020df0 <W25qxx_Init+0x19c>)
 8020c5c:	2201      	movs	r2, #1
 8020c5e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8020c62:	e002      	b.n	8020c6a <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8020c64:	2001      	movs	r0, #1
 8020c66:	f7e1 fb1d 	bl	80022a4 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8020c6a:	f7e1 fb0f 	bl	800228c <HAL_GetTick>
 8020c6e:	4603      	mov	r3, r0
 8020c70:	2b63      	cmp	r3, #99	; 0x63
 8020c72:	d9f7      	bls.n	8020c64 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8020c74:	2201      	movs	r2, #1
 8020c76:	2108      	movs	r1, #8
 8020c78:	485e      	ldr	r0, [pc, #376]	; (8020df4 <W25qxx_Init+0x1a0>)
 8020c7a:	f7e3 f829 	bl	8003cd0 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8020c7e:	2064      	movs	r0, #100	; 0x64
 8020c80:	f7e1 fb10 	bl	80022a4 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8020c84:	f7ff fef4 	bl	8020a70 <W25qxx_ReadID>
 8020c88:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8020c8a:	687b      	ldr	r3, [r7, #4]
 8020c8c:	b2db      	uxtb	r3, r3
 8020c8e:	3b11      	subs	r3, #17
 8020c90:	2b0f      	cmp	r3, #15
 8020c92:	d86c      	bhi.n	8020d6e <W25qxx_Init+0x11a>
 8020c94:	a201      	add	r2, pc, #4	; (adr r2, 8020c9c <W25qxx_Init+0x48>)
 8020c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020c9a:	bf00      	nop
 8020c9c:	08020d61 	.word	0x08020d61
 8020ca0:	08020d53 	.word	0x08020d53
 8020ca4:	08020d45 	.word	0x08020d45
 8020ca8:	08020d37 	.word	0x08020d37
 8020cac:	08020d29 	.word	0x08020d29
 8020cb0:	08020d1b 	.word	0x08020d1b
 8020cb4:	08020d0d 	.word	0x08020d0d
 8020cb8:	08020cfd 	.word	0x08020cfd
 8020cbc:	08020ced 	.word	0x08020ced
 8020cc0:	08020d6f 	.word	0x08020d6f
 8020cc4:	08020d6f 	.word	0x08020d6f
 8020cc8:	08020d6f 	.word	0x08020d6f
 8020ccc:	08020d6f 	.word	0x08020d6f
 8020cd0:	08020d6f 	.word	0x08020d6f
 8020cd4:	08020d6f 	.word	0x08020d6f
 8020cd8:	08020cdd 	.word	0x08020cdd
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8020cdc:	4b44      	ldr	r3, [pc, #272]	; (8020df0 <W25qxx_Init+0x19c>)
 8020cde:	220a      	movs	r2, #10
 8020ce0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8020ce2:	4b43      	ldr	r3, [pc, #268]	; (8020df0 <W25qxx_Init+0x19c>)
 8020ce4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8020ce8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8020cea:	e046      	b.n	8020d7a <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8020cec:	4b40      	ldr	r3, [pc, #256]	; (8020df0 <W25qxx_Init+0x19c>)
 8020cee:	2209      	movs	r2, #9
 8020cf0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8020cf2:	4b3f      	ldr	r3, [pc, #252]	; (8020df0 <W25qxx_Init+0x19c>)
 8020cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020cf8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8020cfa:	e03e      	b.n	8020d7a <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8020cfc:	4b3c      	ldr	r3, [pc, #240]	; (8020df0 <W25qxx_Init+0x19c>)
 8020cfe:	2208      	movs	r2, #8
 8020d00:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8020d02:	4b3b      	ldr	r3, [pc, #236]	; (8020df0 <W25qxx_Init+0x19c>)
 8020d04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8020d08:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8020d0a:	e036      	b.n	8020d7a <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8020d0c:	4b38      	ldr	r3, [pc, #224]	; (8020df0 <W25qxx_Init+0x19c>)
 8020d0e:	2207      	movs	r2, #7
 8020d10:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8020d12:	4b37      	ldr	r3, [pc, #220]	; (8020df0 <W25qxx_Init+0x19c>)
 8020d14:	2280      	movs	r2, #128	; 0x80
 8020d16:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8020d18:	e02f      	b.n	8020d7a <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8020d1a:	4b35      	ldr	r3, [pc, #212]	; (8020df0 <W25qxx_Init+0x19c>)
 8020d1c:	2206      	movs	r2, #6
 8020d1e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8020d20:	4b33      	ldr	r3, [pc, #204]	; (8020df0 <W25qxx_Init+0x19c>)
 8020d22:	2240      	movs	r2, #64	; 0x40
 8020d24:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8020d26:	e028      	b.n	8020d7a <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8020d28:	4b31      	ldr	r3, [pc, #196]	; (8020df0 <W25qxx_Init+0x19c>)
 8020d2a:	2205      	movs	r2, #5
 8020d2c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8020d2e:	4b30      	ldr	r3, [pc, #192]	; (8020df0 <W25qxx_Init+0x19c>)
 8020d30:	2220      	movs	r2, #32
 8020d32:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8020d34:	e021      	b.n	8020d7a <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8020d36:	4b2e      	ldr	r3, [pc, #184]	; (8020df0 <W25qxx_Init+0x19c>)
 8020d38:	2204      	movs	r2, #4
 8020d3a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8020d3c:	4b2c      	ldr	r3, [pc, #176]	; (8020df0 <W25qxx_Init+0x19c>)
 8020d3e:	2210      	movs	r2, #16
 8020d40:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8020d42:	e01a      	b.n	8020d7a <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8020d44:	4b2a      	ldr	r3, [pc, #168]	; (8020df0 <W25qxx_Init+0x19c>)
 8020d46:	2203      	movs	r2, #3
 8020d48:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8020d4a:	4b29      	ldr	r3, [pc, #164]	; (8020df0 <W25qxx_Init+0x19c>)
 8020d4c:	2208      	movs	r2, #8
 8020d4e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8020d50:	e013      	b.n	8020d7a <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8020d52:	4b27      	ldr	r3, [pc, #156]	; (8020df0 <W25qxx_Init+0x19c>)
 8020d54:	2202      	movs	r2, #2
 8020d56:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8020d58:	4b25      	ldr	r3, [pc, #148]	; (8020df0 <W25qxx_Init+0x19c>)
 8020d5a:	2204      	movs	r2, #4
 8020d5c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8020d5e:	e00c      	b.n	8020d7a <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8020d60:	4b23      	ldr	r3, [pc, #140]	; (8020df0 <W25qxx_Init+0x19c>)
 8020d62:	2201      	movs	r2, #1
 8020d64:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8020d66:	4b22      	ldr	r3, [pc, #136]	; (8020df0 <W25qxx_Init+0x19c>)
 8020d68:	2202      	movs	r2, #2
 8020d6a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8020d6c:	e005      	b.n	8020d7a <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8020d6e:	4b20      	ldr	r3, [pc, #128]	; (8020df0 <W25qxx_Init+0x19c>)
 8020d70:	2200      	movs	r2, #0
 8020d72:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8020d76:	2300      	movs	r3, #0
 8020d78:	e036      	b.n	8020de8 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8020d7a:	4b1d      	ldr	r3, [pc, #116]	; (8020df0 <W25qxx_Init+0x19c>)
 8020d7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8020d80:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8020d82:	4b1b      	ldr	r3, [pc, #108]	; (8020df0 <W25qxx_Init+0x19c>)
 8020d84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8020d88:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8020d8a:	4b19      	ldr	r3, [pc, #100]	; (8020df0 <W25qxx_Init+0x19c>)
 8020d8c:	69db      	ldr	r3, [r3, #28]
 8020d8e:	011b      	lsls	r3, r3, #4
 8020d90:	4a17      	ldr	r2, [pc, #92]	; (8020df0 <W25qxx_Init+0x19c>)
 8020d92:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8020d94:	4b16      	ldr	r3, [pc, #88]	; (8020df0 <W25qxx_Init+0x19c>)
 8020d96:	695b      	ldr	r3, [r3, #20]
 8020d98:	4a15      	ldr	r2, [pc, #84]	; (8020df0 <W25qxx_Init+0x19c>)
 8020d9a:	6912      	ldr	r2, [r2, #16]
 8020d9c:	fb02 f303 	mul.w	r3, r2, r3
 8020da0:	4a13      	ldr	r2, [pc, #76]	; (8020df0 <W25qxx_Init+0x19c>)
 8020da2:	8952      	ldrh	r2, [r2, #10]
 8020da4:	fbb3 f3f2 	udiv	r3, r3, r2
 8020da8:	4a11      	ldr	r2, [pc, #68]	; (8020df0 <W25qxx_Init+0x19c>)
 8020daa:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8020dac:	4b10      	ldr	r3, [pc, #64]	; (8020df0 <W25qxx_Init+0x19c>)
 8020dae:	691b      	ldr	r3, [r3, #16]
 8020db0:	011b      	lsls	r3, r3, #4
 8020db2:	4a0f      	ldr	r2, [pc, #60]	; (8020df0 <W25qxx_Init+0x19c>)
 8020db4:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8020db6:	4b0e      	ldr	r3, [pc, #56]	; (8020df0 <W25qxx_Init+0x19c>)
 8020db8:	695b      	ldr	r3, [r3, #20]
 8020dba:	4a0d      	ldr	r2, [pc, #52]	; (8020df0 <W25qxx_Init+0x19c>)
 8020dbc:	6912      	ldr	r2, [r2, #16]
 8020dbe:	fb02 f303 	mul.w	r3, r2, r3
 8020dc2:	0a9b      	lsrs	r3, r3, #10
 8020dc4:	4a0a      	ldr	r2, [pc, #40]	; (8020df0 <W25qxx_Init+0x19c>)
 8020dc6:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8020dc8:	f7ff fe88 	bl	8020adc <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8020dcc:	2001      	movs	r0, #1
 8020dce:	f7ff fed1 	bl	8020b74 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8020dd2:	2002      	movs	r0, #2
 8020dd4:	f7ff fece 	bl	8020b74 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8020dd8:	2003      	movs	r0, #3
 8020dda:	f7ff fecb 	bl	8020b74 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8020dde:	4b04      	ldr	r3, [pc, #16]	; (8020df0 <W25qxx_Init+0x19c>)
 8020de0:	2200      	movs	r2, #0
 8020de2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8020de6:	2301      	movs	r3, #1
}
 8020de8:	4618      	mov	r0, r3
 8020dea:	3708      	adds	r7, #8
 8020dec:	46bd      	mov	sp, r7
 8020dee:	bd80      	pop	{r7, pc}
 8020df0:	20012b78 	.word	0x20012b78
 8020df4:	40021000 	.word	0x40021000

08020df8 <W25qxx_EraseSector>:
#endif
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
uint8_t W25qxx_EraseSector(uint32_t SectorAddr) {
 8020df8:	b580      	push	{r7, lr}
 8020dfa:	b082      	sub	sp, #8
 8020dfc:	af00      	add	r7, sp, #0
 8020dfe:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8020e00:	e002      	b.n	8020e08 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8020e02:	2001      	movs	r0, #1
 8020e04:	f7e1 fa4e 	bl	80022a4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8020e08:	4b26      	ldr	r3, [pc, #152]	; (8020ea4 <W25qxx_EraseSector+0xac>)
 8020e0a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8020e0e:	2b01      	cmp	r3, #1
 8020e10:	d0f7      	beq.n	8020e02 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8020e12:	4b24      	ldr	r3, [pc, #144]	; (8020ea4 <W25qxx_EraseSector+0xac>)
 8020e14:	2201      	movs	r2, #1
 8020e16:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8020e1a:	f7ff fef1 	bl	8020c00 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8020e1e:	4b21      	ldr	r3, [pc, #132]	; (8020ea4 <W25qxx_EraseSector+0xac>)
 8020e20:	691a      	ldr	r2, [r3, #16]
 8020e22:	687b      	ldr	r3, [r7, #4]
 8020e24:	fb02 f303 	mul.w	r3, r2, r3
 8020e28:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8020e2a:	f7ff fe8d 	bl	8020b48 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8020e2e:	2200      	movs	r2, #0
 8020e30:	2108      	movs	r1, #8
 8020e32:	481d      	ldr	r0, [pc, #116]	; (8020ea8 <W25qxx_EraseSector+0xb0>)
 8020e34:	f7e2 ff4c 	bl	8003cd0 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256) {
 8020e38:	4b1a      	ldr	r3, [pc, #104]	; (8020ea4 <W25qxx_EraseSector+0xac>)
 8020e3a:	781b      	ldrb	r3, [r3, #0]
 8020e3c:	2b08      	cmp	r3, #8
 8020e3e:	d909      	bls.n	8020e54 <W25qxx_EraseSector+0x5c>
		W25qxx_Spi(0x21);
 8020e40:	2021      	movs	r0, #33	; 0x21
 8020e42:	f7ff fdff 	bl	8020a44 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8020e46:	687b      	ldr	r3, [r7, #4]
 8020e48:	0e1b      	lsrs	r3, r3, #24
 8020e4a:	b2db      	uxtb	r3, r3
 8020e4c:	4618      	mov	r0, r3
 8020e4e:	f7ff fdf9 	bl	8020a44 <W25qxx_Spi>
 8020e52:	e002      	b.n	8020e5a <W25qxx_EraseSector+0x62>
	} else {
		W25qxx_Spi(0x20);
 8020e54:	2020      	movs	r0, #32
 8020e56:	f7ff fdf5 	bl	8020a44 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8020e5a:	687b      	ldr	r3, [r7, #4]
 8020e5c:	0c1b      	lsrs	r3, r3, #16
 8020e5e:	b2db      	uxtb	r3, r3
 8020e60:	4618      	mov	r0, r3
 8020e62:	f7ff fdef 	bl	8020a44 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8020e66:	687b      	ldr	r3, [r7, #4]
 8020e68:	0a1b      	lsrs	r3, r3, #8
 8020e6a:	b2db      	uxtb	r3, r3
 8020e6c:	4618      	mov	r0, r3
 8020e6e:	f7ff fde9 	bl	8020a44 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8020e72:	687b      	ldr	r3, [r7, #4]
 8020e74:	b2db      	uxtb	r3, r3
 8020e76:	4618      	mov	r0, r3
 8020e78:	f7ff fde4 	bl	8020a44 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8020e7c:	2201      	movs	r2, #1
 8020e7e:	2108      	movs	r1, #8
 8020e80:	4809      	ldr	r0, [pc, #36]	; (8020ea8 <W25qxx_EraseSector+0xb0>)
 8020e82:	f7e2 ff25 	bl	8003cd0 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 8020e86:	f7ff febb 	bl	8020c00 <W25qxx_WaitForWriteEnd>

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8020e8a:	2001      	movs	r0, #1
 8020e8c:	f7e1 fa0a 	bl	80022a4 <HAL_Delay>
	w25qxx.Lock = 0;
 8020e90:	4b04      	ldr	r3, [pc, #16]	; (8020ea4 <W25qxx_EraseSector+0xac>)
 8020e92:	2200      	movs	r2, #0
 8020e94:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

}
 8020e98:	bf00      	nop
 8020e9a:	4618      	mov	r0, r3
 8020e9c:	3708      	adds	r7, #8
 8020e9e:	46bd      	mov	sp, r7
 8020ea0:	bd80      	pop	{r7, pc}
 8020ea2:	bf00      	nop
 8020ea4:	20012b78 	.word	0x20012b78
 8020ea8:	40021000 	.word	0x40021000

08020eac <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8020eac:	b480      	push	{r7}
 8020eae:	b083      	sub	sp, #12
 8020eb0:	af00      	add	r7, sp, #0
 8020eb2:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8020eb4:	4b07      	ldr	r3, [pc, #28]	; (8020ed4 <W25qxx_SectorToPage+0x28>)
 8020eb6:	691b      	ldr	r3, [r3, #16]
 8020eb8:	687a      	ldr	r2, [r7, #4]
 8020eba:	fb02 f303 	mul.w	r3, r2, r3
 8020ebe:	4a05      	ldr	r2, [pc, #20]	; (8020ed4 <W25qxx_SectorToPage+0x28>)
 8020ec0:	8952      	ldrh	r2, [r2, #10]
 8020ec2:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8020ec6:	4618      	mov	r0, r3
 8020ec8:	370c      	adds	r7, #12
 8020eca:	46bd      	mov	sp, r7
 8020ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ed0:	4770      	bx	lr
 8020ed2:	bf00      	nop
 8020ed4:	20012b78 	.word	0x20012b78

08020ed8 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8020ed8:	b580      	push	{r7, lr}
 8020eda:	b084      	sub	sp, #16
 8020edc:	af00      	add	r7, sp, #0
 8020ede:	60f8      	str	r0, [r7, #12]
 8020ee0:	60b9      	str	r1, [r7, #8]
 8020ee2:	607a      	str	r2, [r7, #4]
 8020ee4:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8020ee6:	e002      	b.n	8020eee <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8020ee8:	2001      	movs	r0, #1
 8020eea:	f7e1 f9db 	bl	80022a4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8020eee:	4b39      	ldr	r3, [pc, #228]	; (8020fd4 <W25qxx_WritePage+0xfc>)
 8020ef0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8020ef4:	2b01      	cmp	r3, #1
 8020ef6:	d0f7      	beq.n	8020ee8 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8020ef8:	4b36      	ldr	r3, [pc, #216]	; (8020fd4 <W25qxx_WritePage+0xfc>)
 8020efa:	2201      	movs	r2, #1
 8020efc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8020f00:	683a      	ldr	r2, [r7, #0]
 8020f02:	687b      	ldr	r3, [r7, #4]
 8020f04:	4413      	add	r3, r2
 8020f06:	4a33      	ldr	r2, [pc, #204]	; (8020fd4 <W25qxx_WritePage+0xfc>)
 8020f08:	8952      	ldrh	r2, [r2, #10]
 8020f0a:	4293      	cmp	r3, r2
 8020f0c:	d802      	bhi.n	8020f14 <W25qxx_WritePage+0x3c>
 8020f0e:	683b      	ldr	r3, [r7, #0]
 8020f10:	2b00      	cmp	r3, #0
 8020f12:	d105      	bne.n	8020f20 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8020f14:	4b2f      	ldr	r3, [pc, #188]	; (8020fd4 <W25qxx_WritePage+0xfc>)
 8020f16:	895b      	ldrh	r3, [r3, #10]
 8020f18:	461a      	mov	r2, r3
 8020f1a:	687b      	ldr	r3, [r7, #4]
 8020f1c:	1ad3      	subs	r3, r2, r3
 8020f1e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8020f20:	687a      	ldr	r2, [r7, #4]
 8020f22:	683b      	ldr	r3, [r7, #0]
 8020f24:	4413      	add	r3, r2
 8020f26:	4a2b      	ldr	r2, [pc, #172]	; (8020fd4 <W25qxx_WritePage+0xfc>)
 8020f28:	8952      	ldrh	r2, [r2, #10]
 8020f2a:	4293      	cmp	r3, r2
 8020f2c:	d905      	bls.n	8020f3a <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8020f2e:	4b29      	ldr	r3, [pc, #164]	; (8020fd4 <W25qxx_WritePage+0xfc>)
 8020f30:	895b      	ldrh	r3, [r3, #10]
 8020f32:	461a      	mov	r2, r3
 8020f34:	687b      	ldr	r3, [r7, #4]
 8020f36:	1ad3      	subs	r3, r2, r3
 8020f38:	603b      	str	r3, [r7, #0]

	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	uint32_t StartTime = HAL_GetTick();
#endif

	W25qxx_WaitForWriteEnd();
 8020f3a:	f7ff fe61 	bl	8020c00 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8020f3e:	f7ff fe03 	bl	8020b48 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8020f42:	2200      	movs	r2, #0
 8020f44:	2108      	movs	r1, #8
 8020f46:	4824      	ldr	r0, [pc, #144]	; (8020fd8 <W25qxx_WritePage+0x100>)
 8020f48:	f7e2 fec2 	bl	8003cd0 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8020f4c:	4b21      	ldr	r3, [pc, #132]	; (8020fd4 <W25qxx_WritePage+0xfc>)
 8020f4e:	895b      	ldrh	r3, [r3, #10]
 8020f50:	461a      	mov	r2, r3
 8020f52:	68bb      	ldr	r3, [r7, #8]
 8020f54:	fb02 f303 	mul.w	r3, r2, r3
 8020f58:	687a      	ldr	r2, [r7, #4]
 8020f5a:	4413      	add	r3, r2
 8020f5c:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8020f5e:	4b1d      	ldr	r3, [pc, #116]	; (8020fd4 <W25qxx_WritePage+0xfc>)
 8020f60:	781b      	ldrb	r3, [r3, #0]
 8020f62:	2b08      	cmp	r3, #8
 8020f64:	d909      	bls.n	8020f7a <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8020f66:	2012      	movs	r0, #18
 8020f68:	f7ff fd6c 	bl	8020a44 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8020f6c:	68bb      	ldr	r3, [r7, #8]
 8020f6e:	0e1b      	lsrs	r3, r3, #24
 8020f70:	b2db      	uxtb	r3, r3
 8020f72:	4618      	mov	r0, r3
 8020f74:	f7ff fd66 	bl	8020a44 <W25qxx_Spi>
 8020f78:	e002      	b.n	8020f80 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8020f7a:	2002      	movs	r0, #2
 8020f7c:	f7ff fd62 	bl	8020a44 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8020f80:	68bb      	ldr	r3, [r7, #8]
 8020f82:	0c1b      	lsrs	r3, r3, #16
 8020f84:	b2db      	uxtb	r3, r3
 8020f86:	4618      	mov	r0, r3
 8020f88:	f7ff fd5c 	bl	8020a44 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8020f8c:	68bb      	ldr	r3, [r7, #8]
 8020f8e:	0a1b      	lsrs	r3, r3, #8
 8020f90:	b2db      	uxtb	r3, r3
 8020f92:	4618      	mov	r0, r3
 8020f94:	f7ff fd56 	bl	8020a44 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8020f98:	68bb      	ldr	r3, [r7, #8]
 8020f9a:	b2db      	uxtb	r3, r3
 8020f9c:	4618      	mov	r0, r3
 8020f9e:	f7ff fd51 	bl	8020a44 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8020fa2:	683b      	ldr	r3, [r7, #0]
 8020fa4:	b29a      	uxth	r2, r3
 8020fa6:	2364      	movs	r3, #100	; 0x64
 8020fa8:	68f9      	ldr	r1, [r7, #12]
 8020faa:	480c      	ldr	r0, [pc, #48]	; (8020fdc <W25qxx_WritePage+0x104>)
 8020fac:	f7e4 f885 	bl	80050ba <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8020fb0:	2201      	movs	r2, #1
 8020fb2:	2108      	movs	r1, #8
 8020fb4:	4808      	ldr	r0, [pc, #32]	; (8020fd8 <W25qxx_WritePage+0x100>)
 8020fb6:	f7e2 fe8b 	bl	8003cd0 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8020fba:	f7ff fe21 	bl	8020c00 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8020fbe:	2001      	movs	r0, #1
 8020fc0:	f7e1 f970 	bl	80022a4 <HAL_Delay>
	w25qxx.Lock = 0;
 8020fc4:	4b03      	ldr	r3, [pc, #12]	; (8020fd4 <W25qxx_WritePage+0xfc>)
 8020fc6:	2200      	movs	r2, #0
 8020fc8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8020fcc:	bf00      	nop
 8020fce:	3710      	adds	r7, #16
 8020fd0:	46bd      	mov	sp, r7
 8020fd2:	bd80      	pop	{r7, pc}
 8020fd4:	20012b78 	.word	0x20012b78
 8020fd8:	40021000 	.word	0x40021000
 8020fdc:	20000a9c 	.word	0x20000a9c

08020fe0 <W25qxx_WriteSector>:
//###################################################################################################################
uint8_t W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8020fe0:	b580      	push	{r7, lr}
 8020fe2:	b088      	sub	sp, #32
 8020fe4:	af00      	add	r7, sp, #0
 8020fe6:	60f8      	str	r0, [r7, #12]
 8020fe8:	60b9      	str	r1, [r7, #8]
 8020fea:	607a      	str	r2, [r7, #4]
 8020fec:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8020fee:	4b2d      	ldr	r3, [pc, #180]	; (80210a4 <W25qxx_WriteSector+0xc4>)
 8020ff0:	691b      	ldr	r3, [r3, #16]
 8020ff2:	683a      	ldr	r2, [r7, #0]
 8020ff4:	429a      	cmp	r2, r3
 8020ff6:	d802      	bhi.n	8020ffe <W25qxx_WriteSector+0x1e>
 8020ff8:	683b      	ldr	r3, [r7, #0]
 8020ffa:	2b00      	cmp	r3, #0
 8020ffc:	d102      	bne.n	8021004 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8020ffe:	4b29      	ldr	r3, [pc, #164]	; (80210a4 <W25qxx_WriteSector+0xc4>)
 8021000:	691b      	ldr	r3, [r3, #16]
 8021002:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8021004:	4b27      	ldr	r3, [pc, #156]	; (80210a4 <W25qxx_WriteSector+0xc4>)
 8021006:	691b      	ldr	r3, [r3, #16]
 8021008:	687a      	ldr	r2, [r7, #4]
 802100a:	429a      	cmp	r2, r3
 802100c:	d301      	bcc.n	8021012 <W25qxx_WriteSector+0x32>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
		W25qxx_Delay(100);
#endif
		return 0;
 802100e:	2300      	movs	r3, #0
 8021010:	e043      	b.n	802109a <W25qxx_WriteSector+0xba>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8021012:	687a      	ldr	r2, [r7, #4]
 8021014:	683b      	ldr	r3, [r7, #0]
 8021016:	441a      	add	r2, r3
 8021018:	4b22      	ldr	r3, [pc, #136]	; (80210a4 <W25qxx_WriteSector+0xc4>)
 802101a:	691b      	ldr	r3, [r3, #16]
 802101c:	429a      	cmp	r2, r3
 802101e:	d905      	bls.n	802102c <W25qxx_WriteSector+0x4c>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8021020:	4b20      	ldr	r3, [pc, #128]	; (80210a4 <W25qxx_WriteSector+0xc4>)
 8021022:	691a      	ldr	r2, [r3, #16]
 8021024:	687b      	ldr	r3, [r7, #4]
 8021026:	1ad3      	subs	r3, r2, r3
 8021028:	61bb      	str	r3, [r7, #24]
 802102a:	e001      	b.n	8021030 <W25qxx_WriteSector+0x50>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 802102c:	683b      	ldr	r3, [r7, #0]
 802102e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8021030:	68b8      	ldr	r0, [r7, #8]
 8021032:	f7ff ff3b 	bl	8020eac <W25qxx_SectorToPage>
 8021036:	4602      	mov	r2, r0
 8021038:	4b1a      	ldr	r3, [pc, #104]	; (80210a4 <W25qxx_WriteSector+0xc4>)
 802103a:	895b      	ldrh	r3, [r3, #10]
 802103c:	4619      	mov	r1, r3
 802103e:	687b      	ldr	r3, [r7, #4]
 8021040:	fbb3 f3f1 	udiv	r3, r3, r1
 8021044:	4413      	add	r3, r2
 8021046:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8021048:	4b16      	ldr	r3, [pc, #88]	; (80210a4 <W25qxx_WriteSector+0xc4>)
 802104a:	895b      	ldrh	r3, [r3, #10]
 802104c:	461a      	mov	r2, r3
 802104e:	687b      	ldr	r3, [r7, #4]
 8021050:	fbb3 f1f2 	udiv	r1, r3, r2
 8021054:	fb01 f202 	mul.w	r2, r1, r2
 8021058:	1a9b      	subs	r3, r3, r2
 802105a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 802105c:	69bb      	ldr	r3, [r7, #24]
 802105e:	697a      	ldr	r2, [r7, #20]
 8021060:	69f9      	ldr	r1, [r7, #28]
 8021062:	68f8      	ldr	r0, [r7, #12]
 8021064:	f7ff ff38 	bl	8020ed8 <W25qxx_WritePage>
		StartPage++;
 8021068:	69fb      	ldr	r3, [r7, #28]
 802106a:	3301      	adds	r3, #1
 802106c:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 802106e:	4b0d      	ldr	r3, [pc, #52]	; (80210a4 <W25qxx_WriteSector+0xc4>)
 8021070:	895b      	ldrh	r3, [r3, #10]
 8021072:	461a      	mov	r2, r3
 8021074:	697b      	ldr	r3, [r7, #20]
 8021076:	1a9a      	subs	r2, r3, r2
 8021078:	69bb      	ldr	r3, [r7, #24]
 802107a:	4413      	add	r3, r2
 802107c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 802107e:	4b09      	ldr	r3, [pc, #36]	; (80210a4 <W25qxx_WriteSector+0xc4>)
 8021080:	895b      	ldrh	r3, [r3, #10]
 8021082:	461a      	mov	r2, r3
 8021084:	697b      	ldr	r3, [r7, #20]
 8021086:	1ad3      	subs	r3, r2, r3
 8021088:	68fa      	ldr	r2, [r7, #12]
 802108a:	4413      	add	r3, r2
 802108c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 802108e:	2300      	movs	r3, #0
 8021090:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8021092:	69bb      	ldr	r3, [r7, #24]
 8021094:	2b00      	cmp	r3, #0
 8021096:	dce1      	bgt.n	802105c <W25qxx_WriteSector+0x7c>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif

	return 1;
 8021098:	2301      	movs	r3, #1

}
 802109a:	4618      	mov	r0, r3
 802109c:	3720      	adds	r7, #32
 802109e:	46bd      	mov	sp, r7
 80210a0:	bd80      	pop	{r7, pc}
 80210a2:	bf00      	nop
 80210a4:	20012b78 	.word	0x20012b78

080210a8 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80210a8:	b580      	push	{r7, lr}
 80210aa:	b084      	sub	sp, #16
 80210ac:	af00      	add	r7, sp, #0
 80210ae:	60f8      	str	r0, [r7, #12]
 80210b0:	60b9      	str	r1, [r7, #8]
 80210b2:	607a      	str	r2, [r7, #4]
 80210b4:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80210b6:	e002      	b.n	80210be <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80210b8:	2001      	movs	r0, #1
 80210ba:	f7e1 f8f3 	bl	80022a4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80210be:	4b36      	ldr	r3, [pc, #216]	; (8021198 <W25qxx_ReadPage+0xf0>)
 80210c0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80210c4:	2b01      	cmp	r3, #1
 80210c6:	d0f7      	beq.n	80210b8 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80210c8:	4b33      	ldr	r3, [pc, #204]	; (8021198 <W25qxx_ReadPage+0xf0>)
 80210ca:	2201      	movs	r2, #1
 80210cc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80210d0:	4b31      	ldr	r3, [pc, #196]	; (8021198 <W25qxx_ReadPage+0xf0>)
 80210d2:	895b      	ldrh	r3, [r3, #10]
 80210d4:	461a      	mov	r2, r3
 80210d6:	683b      	ldr	r3, [r7, #0]
 80210d8:	4293      	cmp	r3, r2
 80210da:	d802      	bhi.n	80210e2 <W25qxx_ReadPage+0x3a>
 80210dc:	683b      	ldr	r3, [r7, #0]
 80210de:	2b00      	cmp	r3, #0
 80210e0:	d102      	bne.n	80210e8 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80210e2:	4b2d      	ldr	r3, [pc, #180]	; (8021198 <W25qxx_ReadPage+0xf0>)
 80210e4:	895b      	ldrh	r3, [r3, #10]
 80210e6:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80210e8:	687a      	ldr	r2, [r7, #4]
 80210ea:	683b      	ldr	r3, [r7, #0]
 80210ec:	4413      	add	r3, r2
 80210ee:	4a2a      	ldr	r2, [pc, #168]	; (8021198 <W25qxx_ReadPage+0xf0>)
 80210f0:	8952      	ldrh	r2, [r2, #10]
 80210f2:	4293      	cmp	r3, r2
 80210f4:	d905      	bls.n	8021102 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80210f6:	4b28      	ldr	r3, [pc, #160]	; (8021198 <W25qxx_ReadPage+0xf0>)
 80210f8:	895b      	ldrh	r3, [r3, #10]
 80210fa:	461a      	mov	r2, r3
 80210fc:	687b      	ldr	r3, [r7, #4]
 80210fe:	1ad3      	subs	r3, r2, r3
 8021100:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG_1 == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	uint32_t StartTime = HAL_GetTick();

#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8021102:	4b25      	ldr	r3, [pc, #148]	; (8021198 <W25qxx_ReadPage+0xf0>)
 8021104:	895b      	ldrh	r3, [r3, #10]
 8021106:	461a      	mov	r2, r3
 8021108:	68bb      	ldr	r3, [r7, #8]
 802110a:	fb02 f303 	mul.w	r3, r2, r3
 802110e:	687a      	ldr	r2, [r7, #4]
 8021110:	4413      	add	r3, r2
 8021112:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8021114:	2200      	movs	r2, #0
 8021116:	2108      	movs	r1, #8
 8021118:	4820      	ldr	r0, [pc, #128]	; (802119c <W25qxx_ReadPage+0xf4>)
 802111a:	f7e2 fdd9 	bl	8003cd0 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 802111e:	4b1e      	ldr	r3, [pc, #120]	; (8021198 <W25qxx_ReadPage+0xf0>)
 8021120:	781b      	ldrb	r3, [r3, #0]
 8021122:	2b08      	cmp	r3, #8
 8021124:	d909      	bls.n	802113a <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8021126:	200c      	movs	r0, #12
 8021128:	f7ff fc8c 	bl	8020a44 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 802112c:	68bb      	ldr	r3, [r7, #8]
 802112e:	0e1b      	lsrs	r3, r3, #24
 8021130:	b2db      	uxtb	r3, r3
 8021132:	4618      	mov	r0, r3
 8021134:	f7ff fc86 	bl	8020a44 <W25qxx_Spi>
 8021138:	e002      	b.n	8021140 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 802113a:	200b      	movs	r0, #11
 802113c:	f7ff fc82 	bl	8020a44 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8021140:	68bb      	ldr	r3, [r7, #8]
 8021142:	0c1b      	lsrs	r3, r3, #16
 8021144:	b2db      	uxtb	r3, r3
 8021146:	4618      	mov	r0, r3
 8021148:	f7ff fc7c 	bl	8020a44 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 802114c:	68bb      	ldr	r3, [r7, #8]
 802114e:	0a1b      	lsrs	r3, r3, #8
 8021150:	b2db      	uxtb	r3, r3
 8021152:	4618      	mov	r0, r3
 8021154:	f7ff fc76 	bl	8020a44 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8021158:	68bb      	ldr	r3, [r7, #8]
 802115a:	b2db      	uxtb	r3, r3
 802115c:	4618      	mov	r0, r3
 802115e:	f7ff fc71 	bl	8020a44 <W25qxx_Spi>
	W25qxx_Spi(0);
 8021162:	2000      	movs	r0, #0
 8021164:	f7ff fc6e 	bl	8020a44 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8021168:	683b      	ldr	r3, [r7, #0]
 802116a:	b29a      	uxth	r2, r3
 802116c:	2364      	movs	r3, #100	; 0x64
 802116e:	68f9      	ldr	r1, [r7, #12]
 8021170:	480b      	ldr	r0, [pc, #44]	; (80211a0 <W25qxx_ReadPage+0xf8>)
 8021172:	f7e4 f8e5 	bl	8005340 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8021176:	2201      	movs	r2, #1
 8021178:	2108      	movs	r1, #8
 802117a:	4808      	ldr	r0, [pc, #32]	; (802119c <W25qxx_ReadPage+0xf4>)
 802117c:	f7e2 fda8 	bl	8003cd0 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8021180:	2001      	movs	r0, #1
 8021182:	f7e1 f88f 	bl	80022a4 <HAL_Delay>
	w25qxx.Lock = 0;
 8021186:	4b04      	ldr	r3, [pc, #16]	; (8021198 <W25qxx_ReadPage+0xf0>)
 8021188:	2200      	movs	r2, #0
 802118a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 802118e:	bf00      	nop
 8021190:	3710      	adds	r7, #16
 8021192:	46bd      	mov	sp, r7
 8021194:	bd80      	pop	{r7, pc}
 8021196:	bf00      	nop
 8021198:	20012b78 	.word	0x20012b78
 802119c:	40021000 	.word	0x40021000
 80211a0:	20000a9c 	.word	0x20000a9c

080211a4 <W25qxx_ReadSector>:
//###################################################################################################################
uint8_t W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80211a4:	b580      	push	{r7, lr}
 80211a6:	b088      	sub	sp, #32
 80211a8:	af00      	add	r7, sp, #0
 80211aa:	60f8      	str	r0, [r7, #12]
 80211ac:	60b9      	str	r1, [r7, #8]
 80211ae:	607a      	str	r2, [r7, #4]
 80211b0:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 80211b2:	4b2d      	ldr	r3, [pc, #180]	; (8021268 <W25qxx_ReadSector+0xc4>)
 80211b4:	691b      	ldr	r3, [r3, #16]
 80211b6:	683a      	ldr	r2, [r7, #0]
 80211b8:	429a      	cmp	r2, r3
 80211ba:	d802      	bhi.n	80211c2 <W25qxx_ReadSector+0x1e>
 80211bc:	683b      	ldr	r3, [r7, #0]
 80211be:	2b00      	cmp	r3, #0
 80211c0:	d102      	bne.n	80211c8 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80211c2:	4b29      	ldr	r3, [pc, #164]	; (8021268 <W25qxx_ReadSector+0xc4>)
 80211c4:	691b      	ldr	r3, [r3, #16]
 80211c6:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80211c8:	4b27      	ldr	r3, [pc, #156]	; (8021268 <W25qxx_ReadSector+0xc4>)
 80211ca:	691b      	ldr	r3, [r3, #16]
 80211cc:	687a      	ldr	r2, [r7, #4]
 80211ce:	429a      	cmp	r2, r3
 80211d0:	d301      	bcc.n	80211d6 <W25qxx_ReadSector+0x32>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
		W25qxx_Delay(100);
#endif
		return 0;
 80211d2:	2300      	movs	r3, #0
 80211d4:	e043      	b.n	802125e <W25qxx_ReadSector+0xba>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80211d6:	687a      	ldr	r2, [r7, #4]
 80211d8:	683b      	ldr	r3, [r7, #0]
 80211da:	441a      	add	r2, r3
 80211dc:	4b22      	ldr	r3, [pc, #136]	; (8021268 <W25qxx_ReadSector+0xc4>)
 80211de:	691b      	ldr	r3, [r3, #16]
 80211e0:	429a      	cmp	r2, r3
 80211e2:	d905      	bls.n	80211f0 <W25qxx_ReadSector+0x4c>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80211e4:	4b20      	ldr	r3, [pc, #128]	; (8021268 <W25qxx_ReadSector+0xc4>)
 80211e6:	691a      	ldr	r2, [r3, #16]
 80211e8:	687b      	ldr	r3, [r7, #4]
 80211ea:	1ad3      	subs	r3, r2, r3
 80211ec:	61bb      	str	r3, [r7, #24]
 80211ee:	e001      	b.n	80211f4 <W25qxx_ReadSector+0x50>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80211f0:	683b      	ldr	r3, [r7, #0]
 80211f2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80211f4:	68b8      	ldr	r0, [r7, #8]
 80211f6:	f7ff fe59 	bl	8020eac <W25qxx_SectorToPage>
 80211fa:	4602      	mov	r2, r0
 80211fc:	4b1a      	ldr	r3, [pc, #104]	; (8021268 <W25qxx_ReadSector+0xc4>)
 80211fe:	895b      	ldrh	r3, [r3, #10]
 8021200:	4619      	mov	r1, r3
 8021202:	687b      	ldr	r3, [r7, #4]
 8021204:	fbb3 f3f1 	udiv	r3, r3, r1
 8021208:	4413      	add	r3, r2
 802120a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 802120c:	4b16      	ldr	r3, [pc, #88]	; (8021268 <W25qxx_ReadSector+0xc4>)
 802120e:	895b      	ldrh	r3, [r3, #10]
 8021210:	461a      	mov	r2, r3
 8021212:	687b      	ldr	r3, [r7, #4]
 8021214:	fbb3 f1f2 	udiv	r1, r3, r2
 8021218:	fb01 f202 	mul.w	r2, r1, r2
 802121c:	1a9b      	subs	r3, r3, r2
 802121e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8021220:	69bb      	ldr	r3, [r7, #24]
 8021222:	697a      	ldr	r2, [r7, #20]
 8021224:	69f9      	ldr	r1, [r7, #28]
 8021226:	68f8      	ldr	r0, [r7, #12]
 8021228:	f7ff ff3e 	bl	80210a8 <W25qxx_ReadPage>
		StartPage++;
 802122c:	69fb      	ldr	r3, [r7, #28]
 802122e:	3301      	adds	r3, #1
 8021230:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8021232:	4b0d      	ldr	r3, [pc, #52]	; (8021268 <W25qxx_ReadSector+0xc4>)
 8021234:	895b      	ldrh	r3, [r3, #10]
 8021236:	461a      	mov	r2, r3
 8021238:	697b      	ldr	r3, [r7, #20]
 802123a:	1a9a      	subs	r2, r3, r2
 802123c:	69bb      	ldr	r3, [r7, #24]
 802123e:	4413      	add	r3, r2
 8021240:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8021242:	4b09      	ldr	r3, [pc, #36]	; (8021268 <W25qxx_ReadSector+0xc4>)
 8021244:	895b      	ldrh	r3, [r3, #10]
 8021246:	461a      	mov	r2, r3
 8021248:	697b      	ldr	r3, [r7, #20]
 802124a:	1ad3      	subs	r3, r2, r3
 802124c:	68fa      	ldr	r2, [r7, #12]
 802124e:	4413      	add	r3, r2
 8021250:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8021252:	2300      	movs	r3, #0
 8021254:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8021256:	69bb      	ldr	r3, [r7, #24]
 8021258:	2b00      	cmp	r3, #0
 802125a:	dce1      	bgt.n	8021220 <W25qxx_ReadSector+0x7c>
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif


	return 1;
 802125c:	2301      	movs	r3, #1
}
 802125e:	4618      	mov	r0, r3
 8021260:	3720      	adds	r7, #32
 8021262:	46bd      	mov	sp, r7
 8021264:	bd80      	pop	{r7, pc}
 8021266:	bf00      	nop
 8021268:	20012b78 	.word	0x20012b78

0802126c <__assert_func>:
 802126c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802126e:	4614      	mov	r4, r2
 8021270:	461a      	mov	r2, r3
 8021272:	4b09      	ldr	r3, [pc, #36]	; (8021298 <__assert_func+0x2c>)
 8021274:	681b      	ldr	r3, [r3, #0]
 8021276:	4605      	mov	r5, r0
 8021278:	68d8      	ldr	r0, [r3, #12]
 802127a:	b14c      	cbz	r4, 8021290 <__assert_func+0x24>
 802127c:	4b07      	ldr	r3, [pc, #28]	; (802129c <__assert_func+0x30>)
 802127e:	9100      	str	r1, [sp, #0]
 8021280:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021284:	4906      	ldr	r1, [pc, #24]	; (80212a0 <__assert_func+0x34>)
 8021286:	462b      	mov	r3, r5
 8021288:	f000 f9ac 	bl	80215e4 <fiprintf>
 802128c:	f000 fd79 	bl	8021d82 <abort>
 8021290:	4b04      	ldr	r3, [pc, #16]	; (80212a4 <__assert_func+0x38>)
 8021292:	461c      	mov	r4, r3
 8021294:	e7f3      	b.n	802127e <__assert_func+0x12>
 8021296:	bf00      	nop
 8021298:	20000094 	.word	0x20000094
 802129c:	08027a10 	.word	0x08027a10
 80212a0:	08027a1d 	.word	0x08027a1d
 80212a4:	08027a4b 	.word	0x08027a4b

080212a8 <malloc>:
 80212a8:	4b02      	ldr	r3, [pc, #8]	; (80212b4 <malloc+0xc>)
 80212aa:	4601      	mov	r1, r0
 80212ac:	6818      	ldr	r0, [r3, #0]
 80212ae:	f000 b82b 	b.w	8021308 <_malloc_r>
 80212b2:	bf00      	nop
 80212b4:	20000094 	.word	0x20000094

080212b8 <free>:
 80212b8:	4b02      	ldr	r3, [pc, #8]	; (80212c4 <free+0xc>)
 80212ba:	4601      	mov	r1, r0
 80212bc:	6818      	ldr	r0, [r3, #0]
 80212be:	f000 bd67 	b.w	8021d90 <_free_r>
 80212c2:	bf00      	nop
 80212c4:	20000094 	.word	0x20000094

080212c8 <sbrk_aligned>:
 80212c8:	b570      	push	{r4, r5, r6, lr}
 80212ca:	4e0e      	ldr	r6, [pc, #56]	; (8021304 <sbrk_aligned+0x3c>)
 80212cc:	460c      	mov	r4, r1
 80212ce:	6831      	ldr	r1, [r6, #0]
 80212d0:	4605      	mov	r5, r0
 80212d2:	b911      	cbnz	r1, 80212da <sbrk_aligned+0x12>
 80212d4:	f000 fcf6 	bl	8021cc4 <_sbrk_r>
 80212d8:	6030      	str	r0, [r6, #0]
 80212da:	4621      	mov	r1, r4
 80212dc:	4628      	mov	r0, r5
 80212de:	f000 fcf1 	bl	8021cc4 <_sbrk_r>
 80212e2:	1c43      	adds	r3, r0, #1
 80212e4:	d00a      	beq.n	80212fc <sbrk_aligned+0x34>
 80212e6:	1cc4      	adds	r4, r0, #3
 80212e8:	f024 0403 	bic.w	r4, r4, #3
 80212ec:	42a0      	cmp	r0, r4
 80212ee:	d007      	beq.n	8021300 <sbrk_aligned+0x38>
 80212f0:	1a21      	subs	r1, r4, r0
 80212f2:	4628      	mov	r0, r5
 80212f4:	f000 fce6 	bl	8021cc4 <_sbrk_r>
 80212f8:	3001      	adds	r0, #1
 80212fa:	d101      	bne.n	8021300 <sbrk_aligned+0x38>
 80212fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8021300:	4620      	mov	r0, r4
 8021302:	bd70      	pop	{r4, r5, r6, pc}
 8021304:	20012ba4 	.word	0x20012ba4

08021308 <_malloc_r>:
 8021308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802130c:	1ccd      	adds	r5, r1, #3
 802130e:	f025 0503 	bic.w	r5, r5, #3
 8021312:	3508      	adds	r5, #8
 8021314:	2d0c      	cmp	r5, #12
 8021316:	bf38      	it	cc
 8021318:	250c      	movcc	r5, #12
 802131a:	2d00      	cmp	r5, #0
 802131c:	4607      	mov	r7, r0
 802131e:	db01      	blt.n	8021324 <_malloc_r+0x1c>
 8021320:	42a9      	cmp	r1, r5
 8021322:	d905      	bls.n	8021330 <_malloc_r+0x28>
 8021324:	230c      	movs	r3, #12
 8021326:	603b      	str	r3, [r7, #0]
 8021328:	2600      	movs	r6, #0
 802132a:	4630      	mov	r0, r6
 802132c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021330:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8021404 <_malloc_r+0xfc>
 8021334:	f000 f868 	bl	8021408 <__malloc_lock>
 8021338:	f8d8 3000 	ldr.w	r3, [r8]
 802133c:	461c      	mov	r4, r3
 802133e:	bb5c      	cbnz	r4, 8021398 <_malloc_r+0x90>
 8021340:	4629      	mov	r1, r5
 8021342:	4638      	mov	r0, r7
 8021344:	f7ff ffc0 	bl	80212c8 <sbrk_aligned>
 8021348:	1c43      	adds	r3, r0, #1
 802134a:	4604      	mov	r4, r0
 802134c:	d155      	bne.n	80213fa <_malloc_r+0xf2>
 802134e:	f8d8 4000 	ldr.w	r4, [r8]
 8021352:	4626      	mov	r6, r4
 8021354:	2e00      	cmp	r6, #0
 8021356:	d145      	bne.n	80213e4 <_malloc_r+0xdc>
 8021358:	2c00      	cmp	r4, #0
 802135a:	d048      	beq.n	80213ee <_malloc_r+0xe6>
 802135c:	6823      	ldr	r3, [r4, #0]
 802135e:	4631      	mov	r1, r6
 8021360:	4638      	mov	r0, r7
 8021362:	eb04 0903 	add.w	r9, r4, r3
 8021366:	f000 fcad 	bl	8021cc4 <_sbrk_r>
 802136a:	4581      	cmp	r9, r0
 802136c:	d13f      	bne.n	80213ee <_malloc_r+0xe6>
 802136e:	6821      	ldr	r1, [r4, #0]
 8021370:	1a6d      	subs	r5, r5, r1
 8021372:	4629      	mov	r1, r5
 8021374:	4638      	mov	r0, r7
 8021376:	f7ff ffa7 	bl	80212c8 <sbrk_aligned>
 802137a:	3001      	adds	r0, #1
 802137c:	d037      	beq.n	80213ee <_malloc_r+0xe6>
 802137e:	6823      	ldr	r3, [r4, #0]
 8021380:	442b      	add	r3, r5
 8021382:	6023      	str	r3, [r4, #0]
 8021384:	f8d8 3000 	ldr.w	r3, [r8]
 8021388:	2b00      	cmp	r3, #0
 802138a:	d038      	beq.n	80213fe <_malloc_r+0xf6>
 802138c:	685a      	ldr	r2, [r3, #4]
 802138e:	42a2      	cmp	r2, r4
 8021390:	d12b      	bne.n	80213ea <_malloc_r+0xe2>
 8021392:	2200      	movs	r2, #0
 8021394:	605a      	str	r2, [r3, #4]
 8021396:	e00f      	b.n	80213b8 <_malloc_r+0xb0>
 8021398:	6822      	ldr	r2, [r4, #0]
 802139a:	1b52      	subs	r2, r2, r5
 802139c:	d41f      	bmi.n	80213de <_malloc_r+0xd6>
 802139e:	2a0b      	cmp	r2, #11
 80213a0:	d917      	bls.n	80213d2 <_malloc_r+0xca>
 80213a2:	1961      	adds	r1, r4, r5
 80213a4:	42a3      	cmp	r3, r4
 80213a6:	6025      	str	r5, [r4, #0]
 80213a8:	bf18      	it	ne
 80213aa:	6059      	strne	r1, [r3, #4]
 80213ac:	6863      	ldr	r3, [r4, #4]
 80213ae:	bf08      	it	eq
 80213b0:	f8c8 1000 	streq.w	r1, [r8]
 80213b4:	5162      	str	r2, [r4, r5]
 80213b6:	604b      	str	r3, [r1, #4]
 80213b8:	4638      	mov	r0, r7
 80213ba:	f104 060b 	add.w	r6, r4, #11
 80213be:	f000 f829 	bl	8021414 <__malloc_unlock>
 80213c2:	f026 0607 	bic.w	r6, r6, #7
 80213c6:	1d23      	adds	r3, r4, #4
 80213c8:	1af2      	subs	r2, r6, r3
 80213ca:	d0ae      	beq.n	802132a <_malloc_r+0x22>
 80213cc:	1b9b      	subs	r3, r3, r6
 80213ce:	50a3      	str	r3, [r4, r2]
 80213d0:	e7ab      	b.n	802132a <_malloc_r+0x22>
 80213d2:	42a3      	cmp	r3, r4
 80213d4:	6862      	ldr	r2, [r4, #4]
 80213d6:	d1dd      	bne.n	8021394 <_malloc_r+0x8c>
 80213d8:	f8c8 2000 	str.w	r2, [r8]
 80213dc:	e7ec      	b.n	80213b8 <_malloc_r+0xb0>
 80213de:	4623      	mov	r3, r4
 80213e0:	6864      	ldr	r4, [r4, #4]
 80213e2:	e7ac      	b.n	802133e <_malloc_r+0x36>
 80213e4:	4634      	mov	r4, r6
 80213e6:	6876      	ldr	r6, [r6, #4]
 80213e8:	e7b4      	b.n	8021354 <_malloc_r+0x4c>
 80213ea:	4613      	mov	r3, r2
 80213ec:	e7cc      	b.n	8021388 <_malloc_r+0x80>
 80213ee:	230c      	movs	r3, #12
 80213f0:	603b      	str	r3, [r7, #0]
 80213f2:	4638      	mov	r0, r7
 80213f4:	f000 f80e 	bl	8021414 <__malloc_unlock>
 80213f8:	e797      	b.n	802132a <_malloc_r+0x22>
 80213fa:	6025      	str	r5, [r4, #0]
 80213fc:	e7dc      	b.n	80213b8 <_malloc_r+0xb0>
 80213fe:	605b      	str	r3, [r3, #4]
 8021400:	deff      	udf	#255	; 0xff
 8021402:	bf00      	nop
 8021404:	20012ba0 	.word	0x20012ba0

08021408 <__malloc_lock>:
 8021408:	4801      	ldr	r0, [pc, #4]	; (8021410 <__malloc_lock+0x8>)
 802140a:	f000 bca2 	b.w	8021d52 <__retarget_lock_acquire_recursive>
 802140e:	bf00      	nop
 8021410:	20012ce8 	.word	0x20012ce8

08021414 <__malloc_unlock>:
 8021414:	4801      	ldr	r0, [pc, #4]	; (802141c <__malloc_unlock+0x8>)
 8021416:	f000 bc9d 	b.w	8021d54 <__retarget_lock_release_recursive>
 802141a:	bf00      	nop
 802141c:	20012ce8 	.word	0x20012ce8

08021420 <rand>:
 8021420:	4b16      	ldr	r3, [pc, #88]	; (802147c <rand+0x5c>)
 8021422:	b510      	push	{r4, lr}
 8021424:	681c      	ldr	r4, [r3, #0]
 8021426:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8021428:	b9b3      	cbnz	r3, 8021458 <rand+0x38>
 802142a:	2018      	movs	r0, #24
 802142c:	f7ff ff3c 	bl	80212a8 <malloc>
 8021430:	4602      	mov	r2, r0
 8021432:	6320      	str	r0, [r4, #48]	; 0x30
 8021434:	b920      	cbnz	r0, 8021440 <rand+0x20>
 8021436:	4b12      	ldr	r3, [pc, #72]	; (8021480 <rand+0x60>)
 8021438:	4812      	ldr	r0, [pc, #72]	; (8021484 <rand+0x64>)
 802143a:	2152      	movs	r1, #82	; 0x52
 802143c:	f7ff ff16 	bl	802126c <__assert_func>
 8021440:	4911      	ldr	r1, [pc, #68]	; (8021488 <rand+0x68>)
 8021442:	4b12      	ldr	r3, [pc, #72]	; (802148c <rand+0x6c>)
 8021444:	e9c0 1300 	strd	r1, r3, [r0]
 8021448:	4b11      	ldr	r3, [pc, #68]	; (8021490 <rand+0x70>)
 802144a:	6083      	str	r3, [r0, #8]
 802144c:	230b      	movs	r3, #11
 802144e:	8183      	strh	r3, [r0, #12]
 8021450:	2100      	movs	r1, #0
 8021452:	2001      	movs	r0, #1
 8021454:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021458:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802145a:	480e      	ldr	r0, [pc, #56]	; (8021494 <rand+0x74>)
 802145c:	690b      	ldr	r3, [r1, #16]
 802145e:	694c      	ldr	r4, [r1, #20]
 8021460:	4a0d      	ldr	r2, [pc, #52]	; (8021498 <rand+0x78>)
 8021462:	4358      	muls	r0, r3
 8021464:	fb02 0004 	mla	r0, r2, r4, r0
 8021468:	fba3 3202 	umull	r3, r2, r3, r2
 802146c:	3301      	adds	r3, #1
 802146e:	eb40 0002 	adc.w	r0, r0, r2
 8021472:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8021476:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802147a:	bd10      	pop	{r4, pc}
 802147c:	20000094 	.word	0x20000094
 8021480:	08027a4c 	.word	0x08027a4c
 8021484:	08027a63 	.word	0x08027a63
 8021488:	abcd330e 	.word	0xabcd330e
 802148c:	e66d1234 	.word	0xe66d1234
 8021490:	0005deec 	.word	0x0005deec
 8021494:	5851f42d 	.word	0x5851f42d
 8021498:	4c957f2d 	.word	0x4c957f2d

0802149c <std>:
 802149c:	2300      	movs	r3, #0
 802149e:	b510      	push	{r4, lr}
 80214a0:	4604      	mov	r4, r0
 80214a2:	e9c0 3300 	strd	r3, r3, [r0]
 80214a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80214aa:	6083      	str	r3, [r0, #8]
 80214ac:	8181      	strh	r1, [r0, #12]
 80214ae:	6643      	str	r3, [r0, #100]	; 0x64
 80214b0:	81c2      	strh	r2, [r0, #14]
 80214b2:	6183      	str	r3, [r0, #24]
 80214b4:	4619      	mov	r1, r3
 80214b6:	2208      	movs	r2, #8
 80214b8:	305c      	adds	r0, #92	; 0x5c
 80214ba:	f000 fb43 	bl	8021b44 <memset>
 80214be:	4b0d      	ldr	r3, [pc, #52]	; (80214f4 <std+0x58>)
 80214c0:	6263      	str	r3, [r4, #36]	; 0x24
 80214c2:	4b0d      	ldr	r3, [pc, #52]	; (80214f8 <std+0x5c>)
 80214c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80214c6:	4b0d      	ldr	r3, [pc, #52]	; (80214fc <std+0x60>)
 80214c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80214ca:	4b0d      	ldr	r3, [pc, #52]	; (8021500 <std+0x64>)
 80214cc:	6323      	str	r3, [r4, #48]	; 0x30
 80214ce:	4b0d      	ldr	r3, [pc, #52]	; (8021504 <std+0x68>)
 80214d0:	6224      	str	r4, [r4, #32]
 80214d2:	429c      	cmp	r4, r3
 80214d4:	d006      	beq.n	80214e4 <std+0x48>
 80214d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80214da:	4294      	cmp	r4, r2
 80214dc:	d002      	beq.n	80214e4 <std+0x48>
 80214de:	33d0      	adds	r3, #208	; 0xd0
 80214e0:	429c      	cmp	r4, r3
 80214e2:	d105      	bne.n	80214f0 <std+0x54>
 80214e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80214e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80214ec:	f000 bc30 	b.w	8021d50 <__retarget_lock_init_recursive>
 80214f0:	bd10      	pop	{r4, pc}
 80214f2:	bf00      	nop
 80214f4:	08021941 	.word	0x08021941
 80214f8:	08021963 	.word	0x08021963
 80214fc:	0802199b 	.word	0x0802199b
 8021500:	080219bf 	.word	0x080219bf
 8021504:	20012ba8 	.word	0x20012ba8

08021508 <stdio_exit_handler>:
 8021508:	4a02      	ldr	r2, [pc, #8]	; (8021514 <stdio_exit_handler+0xc>)
 802150a:	4903      	ldr	r1, [pc, #12]	; (8021518 <stdio_exit_handler+0x10>)
 802150c:	4803      	ldr	r0, [pc, #12]	; (802151c <stdio_exit_handler+0x14>)
 802150e:	f000 b8e5 	b.w	80216dc <_fwalk_sglue>
 8021512:	bf00      	nop
 8021514:	2000003c 	.word	0x2000003c
 8021518:	0802278d 	.word	0x0802278d
 802151c:	20000048 	.word	0x20000048

08021520 <cleanup_stdio>:
 8021520:	6841      	ldr	r1, [r0, #4]
 8021522:	4b0c      	ldr	r3, [pc, #48]	; (8021554 <cleanup_stdio+0x34>)
 8021524:	4299      	cmp	r1, r3
 8021526:	b510      	push	{r4, lr}
 8021528:	4604      	mov	r4, r0
 802152a:	d001      	beq.n	8021530 <cleanup_stdio+0x10>
 802152c:	f001 f92e 	bl	802278c <_fflush_r>
 8021530:	68a1      	ldr	r1, [r4, #8]
 8021532:	4b09      	ldr	r3, [pc, #36]	; (8021558 <cleanup_stdio+0x38>)
 8021534:	4299      	cmp	r1, r3
 8021536:	d002      	beq.n	802153e <cleanup_stdio+0x1e>
 8021538:	4620      	mov	r0, r4
 802153a:	f001 f927 	bl	802278c <_fflush_r>
 802153e:	68e1      	ldr	r1, [r4, #12]
 8021540:	4b06      	ldr	r3, [pc, #24]	; (802155c <cleanup_stdio+0x3c>)
 8021542:	4299      	cmp	r1, r3
 8021544:	d004      	beq.n	8021550 <cleanup_stdio+0x30>
 8021546:	4620      	mov	r0, r4
 8021548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802154c:	f001 b91e 	b.w	802278c <_fflush_r>
 8021550:	bd10      	pop	{r4, pc}
 8021552:	bf00      	nop
 8021554:	20012ba8 	.word	0x20012ba8
 8021558:	20012c10 	.word	0x20012c10
 802155c:	20012c78 	.word	0x20012c78

08021560 <global_stdio_init.part.0>:
 8021560:	b510      	push	{r4, lr}
 8021562:	4b0b      	ldr	r3, [pc, #44]	; (8021590 <global_stdio_init.part.0+0x30>)
 8021564:	4c0b      	ldr	r4, [pc, #44]	; (8021594 <global_stdio_init.part.0+0x34>)
 8021566:	4a0c      	ldr	r2, [pc, #48]	; (8021598 <global_stdio_init.part.0+0x38>)
 8021568:	601a      	str	r2, [r3, #0]
 802156a:	4620      	mov	r0, r4
 802156c:	2200      	movs	r2, #0
 802156e:	2104      	movs	r1, #4
 8021570:	f7ff ff94 	bl	802149c <std>
 8021574:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8021578:	2201      	movs	r2, #1
 802157a:	2109      	movs	r1, #9
 802157c:	f7ff ff8e 	bl	802149c <std>
 8021580:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8021584:	2202      	movs	r2, #2
 8021586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802158a:	2112      	movs	r1, #18
 802158c:	f7ff bf86 	b.w	802149c <std>
 8021590:	20012ce0 	.word	0x20012ce0
 8021594:	20012ba8 	.word	0x20012ba8
 8021598:	08021509 	.word	0x08021509

0802159c <__sfp_lock_acquire>:
 802159c:	4801      	ldr	r0, [pc, #4]	; (80215a4 <__sfp_lock_acquire+0x8>)
 802159e:	f000 bbd8 	b.w	8021d52 <__retarget_lock_acquire_recursive>
 80215a2:	bf00      	nop
 80215a4:	20012ce9 	.word	0x20012ce9

080215a8 <__sfp_lock_release>:
 80215a8:	4801      	ldr	r0, [pc, #4]	; (80215b0 <__sfp_lock_release+0x8>)
 80215aa:	f000 bbd3 	b.w	8021d54 <__retarget_lock_release_recursive>
 80215ae:	bf00      	nop
 80215b0:	20012ce9 	.word	0x20012ce9

080215b4 <__sinit>:
 80215b4:	b510      	push	{r4, lr}
 80215b6:	4604      	mov	r4, r0
 80215b8:	f7ff fff0 	bl	802159c <__sfp_lock_acquire>
 80215bc:	6a23      	ldr	r3, [r4, #32]
 80215be:	b11b      	cbz	r3, 80215c8 <__sinit+0x14>
 80215c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80215c4:	f7ff bff0 	b.w	80215a8 <__sfp_lock_release>
 80215c8:	4b04      	ldr	r3, [pc, #16]	; (80215dc <__sinit+0x28>)
 80215ca:	6223      	str	r3, [r4, #32]
 80215cc:	4b04      	ldr	r3, [pc, #16]	; (80215e0 <__sinit+0x2c>)
 80215ce:	681b      	ldr	r3, [r3, #0]
 80215d0:	2b00      	cmp	r3, #0
 80215d2:	d1f5      	bne.n	80215c0 <__sinit+0xc>
 80215d4:	f7ff ffc4 	bl	8021560 <global_stdio_init.part.0>
 80215d8:	e7f2      	b.n	80215c0 <__sinit+0xc>
 80215da:	bf00      	nop
 80215dc:	08021521 	.word	0x08021521
 80215e0:	20012ce0 	.word	0x20012ce0

080215e4 <fiprintf>:
 80215e4:	b40e      	push	{r1, r2, r3}
 80215e6:	b503      	push	{r0, r1, lr}
 80215e8:	4601      	mov	r1, r0
 80215ea:	ab03      	add	r3, sp, #12
 80215ec:	4805      	ldr	r0, [pc, #20]	; (8021604 <fiprintf+0x20>)
 80215ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80215f2:	6800      	ldr	r0, [r0, #0]
 80215f4:	9301      	str	r3, [sp, #4]
 80215f6:	f000 fd99 	bl	802212c <_vfiprintf_r>
 80215fa:	b002      	add	sp, #8
 80215fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8021600:	b003      	add	sp, #12
 8021602:	4770      	bx	lr
 8021604:	20000094 	.word	0x20000094

08021608 <_fread_r>:
 8021608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802160c:	461e      	mov	r6, r3
 802160e:	4613      	mov	r3, r2
 8021610:	4373      	muls	r3, r6
 8021612:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021614:	4682      	mov	sl, r0
 8021616:	4688      	mov	r8, r1
 8021618:	4691      	mov	r9, r2
 802161a:	469b      	mov	fp, r3
 802161c:	d04e      	beq.n	80216bc <_fread_r+0xb4>
 802161e:	b118      	cbz	r0, 8021628 <_fread_r+0x20>
 8021620:	6a03      	ldr	r3, [r0, #32]
 8021622:	b90b      	cbnz	r3, 8021628 <_fread_r+0x20>
 8021624:	f7ff ffc6 	bl	80215b4 <__sinit>
 8021628:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802162a:	07df      	lsls	r7, r3, #31
 802162c:	d405      	bmi.n	802163a <_fread_r+0x32>
 802162e:	89a3      	ldrh	r3, [r4, #12]
 8021630:	059d      	lsls	r5, r3, #22
 8021632:	d402      	bmi.n	802163a <_fread_r+0x32>
 8021634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021636:	f000 fb8c 	bl	8021d52 <__retarget_lock_acquire_recursive>
 802163a:	6863      	ldr	r3, [r4, #4]
 802163c:	2b00      	cmp	r3, #0
 802163e:	da01      	bge.n	8021644 <_fread_r+0x3c>
 8021640:	2300      	movs	r3, #0
 8021642:	6063      	str	r3, [r4, #4]
 8021644:	465f      	mov	r7, fp
 8021646:	e9d4 1500 	ldrd	r1, r5, [r4]
 802164a:	42bd      	cmp	r5, r7
 802164c:	d313      	bcc.n	8021676 <_fread_r+0x6e>
 802164e:	463a      	mov	r2, r7
 8021650:	4640      	mov	r0, r8
 8021652:	f000 fb88 	bl	8021d66 <memcpy>
 8021656:	6862      	ldr	r2, [r4, #4]
 8021658:	6821      	ldr	r1, [r4, #0]
 802165a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802165c:	1bd2      	subs	r2, r2, r7
 802165e:	6062      	str	r2, [r4, #4]
 8021660:	4439      	add	r1, r7
 8021662:	07da      	lsls	r2, r3, #31
 8021664:	6021      	str	r1, [r4, #0]
 8021666:	d423      	bmi.n	80216b0 <_fread_r+0xa8>
 8021668:	89a3      	ldrh	r3, [r4, #12]
 802166a:	059b      	lsls	r3, r3, #22
 802166c:	d420      	bmi.n	80216b0 <_fread_r+0xa8>
 802166e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021670:	f000 fb70 	bl	8021d54 <__retarget_lock_release_recursive>
 8021674:	e01c      	b.n	80216b0 <_fread_r+0xa8>
 8021676:	462a      	mov	r2, r5
 8021678:	4640      	mov	r0, r8
 802167a:	f000 fb74 	bl	8021d66 <memcpy>
 802167e:	6823      	ldr	r3, [r4, #0]
 8021680:	442b      	add	r3, r5
 8021682:	6023      	str	r3, [r4, #0]
 8021684:	4621      	mov	r1, r4
 8021686:	1b7b      	subs	r3, r7, r5
 8021688:	4650      	mov	r0, sl
 802168a:	9301      	str	r3, [sp, #4]
 802168c:	f000 f8c0 	bl	8021810 <__srefill_r>
 8021690:	44a8      	add	r8, r5
 8021692:	9b01      	ldr	r3, [sp, #4]
 8021694:	b180      	cbz	r0, 80216b8 <_fread_r+0xb0>
 8021696:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021698:	07d8      	lsls	r0, r3, #31
 802169a:	d405      	bmi.n	80216a8 <_fread_r+0xa0>
 802169c:	89a3      	ldrh	r3, [r4, #12]
 802169e:	0599      	lsls	r1, r3, #22
 80216a0:	d402      	bmi.n	80216a8 <_fread_r+0xa0>
 80216a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80216a4:	f000 fb56 	bl	8021d54 <__retarget_lock_release_recursive>
 80216a8:	445d      	add	r5, fp
 80216aa:	1beb      	subs	r3, r5, r7
 80216ac:	fbb3 f6f9 	udiv	r6, r3, r9
 80216b0:	4630      	mov	r0, r6
 80216b2:	b003      	add	sp, #12
 80216b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80216b8:	461f      	mov	r7, r3
 80216ba:	e7c4      	b.n	8021646 <_fread_r+0x3e>
 80216bc:	461e      	mov	r6, r3
 80216be:	e7f7      	b.n	80216b0 <_fread_r+0xa8>

080216c0 <fread>:
 80216c0:	b507      	push	{r0, r1, r2, lr}
 80216c2:	9300      	str	r3, [sp, #0]
 80216c4:	4613      	mov	r3, r2
 80216c6:	460a      	mov	r2, r1
 80216c8:	4601      	mov	r1, r0
 80216ca:	4803      	ldr	r0, [pc, #12]	; (80216d8 <fread+0x18>)
 80216cc:	6800      	ldr	r0, [r0, #0]
 80216ce:	f7ff ff9b 	bl	8021608 <_fread_r>
 80216d2:	b003      	add	sp, #12
 80216d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80216d8:	20000094 	.word	0x20000094

080216dc <_fwalk_sglue>:
 80216dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80216e0:	4607      	mov	r7, r0
 80216e2:	4688      	mov	r8, r1
 80216e4:	4614      	mov	r4, r2
 80216e6:	2600      	movs	r6, #0
 80216e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80216ec:	f1b9 0901 	subs.w	r9, r9, #1
 80216f0:	d505      	bpl.n	80216fe <_fwalk_sglue+0x22>
 80216f2:	6824      	ldr	r4, [r4, #0]
 80216f4:	2c00      	cmp	r4, #0
 80216f6:	d1f7      	bne.n	80216e8 <_fwalk_sglue+0xc>
 80216f8:	4630      	mov	r0, r6
 80216fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80216fe:	89ab      	ldrh	r3, [r5, #12]
 8021700:	2b01      	cmp	r3, #1
 8021702:	d907      	bls.n	8021714 <_fwalk_sglue+0x38>
 8021704:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021708:	3301      	adds	r3, #1
 802170a:	d003      	beq.n	8021714 <_fwalk_sglue+0x38>
 802170c:	4629      	mov	r1, r5
 802170e:	4638      	mov	r0, r7
 8021710:	47c0      	blx	r8
 8021712:	4306      	orrs	r6, r0
 8021714:	3568      	adds	r5, #104	; 0x68
 8021716:	e7e9      	b.n	80216ec <_fwalk_sglue+0x10>

08021718 <iprintf>:
 8021718:	b40f      	push	{r0, r1, r2, r3}
 802171a:	b507      	push	{r0, r1, r2, lr}
 802171c:	4906      	ldr	r1, [pc, #24]	; (8021738 <iprintf+0x20>)
 802171e:	ab04      	add	r3, sp, #16
 8021720:	6808      	ldr	r0, [r1, #0]
 8021722:	f853 2b04 	ldr.w	r2, [r3], #4
 8021726:	6881      	ldr	r1, [r0, #8]
 8021728:	9301      	str	r3, [sp, #4]
 802172a:	f000 fcff 	bl	802212c <_vfiprintf_r>
 802172e:	b003      	add	sp, #12
 8021730:	f85d eb04 	ldr.w	lr, [sp], #4
 8021734:	b004      	add	sp, #16
 8021736:	4770      	bx	lr
 8021738:	20000094 	.word	0x20000094

0802173c <_puts_r>:
 802173c:	6a03      	ldr	r3, [r0, #32]
 802173e:	b570      	push	{r4, r5, r6, lr}
 8021740:	6884      	ldr	r4, [r0, #8]
 8021742:	4605      	mov	r5, r0
 8021744:	460e      	mov	r6, r1
 8021746:	b90b      	cbnz	r3, 802174c <_puts_r+0x10>
 8021748:	f7ff ff34 	bl	80215b4 <__sinit>
 802174c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802174e:	07db      	lsls	r3, r3, #31
 8021750:	d405      	bmi.n	802175e <_puts_r+0x22>
 8021752:	89a3      	ldrh	r3, [r4, #12]
 8021754:	0598      	lsls	r0, r3, #22
 8021756:	d402      	bmi.n	802175e <_puts_r+0x22>
 8021758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802175a:	f000 fafa 	bl	8021d52 <__retarget_lock_acquire_recursive>
 802175e:	89a3      	ldrh	r3, [r4, #12]
 8021760:	0719      	lsls	r1, r3, #28
 8021762:	d513      	bpl.n	802178c <_puts_r+0x50>
 8021764:	6923      	ldr	r3, [r4, #16]
 8021766:	b18b      	cbz	r3, 802178c <_puts_r+0x50>
 8021768:	3e01      	subs	r6, #1
 802176a:	68a3      	ldr	r3, [r4, #8]
 802176c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8021770:	3b01      	subs	r3, #1
 8021772:	60a3      	str	r3, [r4, #8]
 8021774:	b9e9      	cbnz	r1, 80217b2 <_puts_r+0x76>
 8021776:	2b00      	cmp	r3, #0
 8021778:	da2e      	bge.n	80217d8 <_puts_r+0x9c>
 802177a:	4622      	mov	r2, r4
 802177c:	210a      	movs	r1, #10
 802177e:	4628      	mov	r0, r5
 8021780:	f000 f921 	bl	80219c6 <__swbuf_r>
 8021784:	3001      	adds	r0, #1
 8021786:	d007      	beq.n	8021798 <_puts_r+0x5c>
 8021788:	250a      	movs	r5, #10
 802178a:	e007      	b.n	802179c <_puts_r+0x60>
 802178c:	4621      	mov	r1, r4
 802178e:	4628      	mov	r0, r5
 8021790:	f000 f956 	bl	8021a40 <__swsetup_r>
 8021794:	2800      	cmp	r0, #0
 8021796:	d0e7      	beq.n	8021768 <_puts_r+0x2c>
 8021798:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 802179c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802179e:	07da      	lsls	r2, r3, #31
 80217a0:	d405      	bmi.n	80217ae <_puts_r+0x72>
 80217a2:	89a3      	ldrh	r3, [r4, #12]
 80217a4:	059b      	lsls	r3, r3, #22
 80217a6:	d402      	bmi.n	80217ae <_puts_r+0x72>
 80217a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80217aa:	f000 fad3 	bl	8021d54 <__retarget_lock_release_recursive>
 80217ae:	4628      	mov	r0, r5
 80217b0:	bd70      	pop	{r4, r5, r6, pc}
 80217b2:	2b00      	cmp	r3, #0
 80217b4:	da04      	bge.n	80217c0 <_puts_r+0x84>
 80217b6:	69a2      	ldr	r2, [r4, #24]
 80217b8:	429a      	cmp	r2, r3
 80217ba:	dc06      	bgt.n	80217ca <_puts_r+0x8e>
 80217bc:	290a      	cmp	r1, #10
 80217be:	d004      	beq.n	80217ca <_puts_r+0x8e>
 80217c0:	6823      	ldr	r3, [r4, #0]
 80217c2:	1c5a      	adds	r2, r3, #1
 80217c4:	6022      	str	r2, [r4, #0]
 80217c6:	7019      	strb	r1, [r3, #0]
 80217c8:	e7cf      	b.n	802176a <_puts_r+0x2e>
 80217ca:	4622      	mov	r2, r4
 80217cc:	4628      	mov	r0, r5
 80217ce:	f000 f8fa 	bl	80219c6 <__swbuf_r>
 80217d2:	3001      	adds	r0, #1
 80217d4:	d1c9      	bne.n	802176a <_puts_r+0x2e>
 80217d6:	e7df      	b.n	8021798 <_puts_r+0x5c>
 80217d8:	6823      	ldr	r3, [r4, #0]
 80217da:	250a      	movs	r5, #10
 80217dc:	1c5a      	adds	r2, r3, #1
 80217de:	6022      	str	r2, [r4, #0]
 80217e0:	701d      	strb	r5, [r3, #0]
 80217e2:	e7db      	b.n	802179c <_puts_r+0x60>

080217e4 <puts>:
 80217e4:	4b02      	ldr	r3, [pc, #8]	; (80217f0 <puts+0xc>)
 80217e6:	4601      	mov	r1, r0
 80217e8:	6818      	ldr	r0, [r3, #0]
 80217ea:	f7ff bfa7 	b.w	802173c <_puts_r>
 80217ee:	bf00      	nop
 80217f0:	20000094 	.word	0x20000094

080217f4 <lflush>:
 80217f4:	898b      	ldrh	r3, [r1, #12]
 80217f6:	f003 0309 	and.w	r3, r3, #9
 80217fa:	2b09      	cmp	r3, #9
 80217fc:	d103      	bne.n	8021806 <lflush+0x12>
 80217fe:	4b03      	ldr	r3, [pc, #12]	; (802180c <lflush+0x18>)
 8021800:	6818      	ldr	r0, [r3, #0]
 8021802:	f000 bfc3 	b.w	802278c <_fflush_r>
 8021806:	2000      	movs	r0, #0
 8021808:	4770      	bx	lr
 802180a:	bf00      	nop
 802180c:	20000094 	.word	0x20000094

08021810 <__srefill_r>:
 8021810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021812:	460c      	mov	r4, r1
 8021814:	4605      	mov	r5, r0
 8021816:	b118      	cbz	r0, 8021820 <__srefill_r+0x10>
 8021818:	6a03      	ldr	r3, [r0, #32]
 802181a:	b90b      	cbnz	r3, 8021820 <__srefill_r+0x10>
 802181c:	f7ff feca 	bl	80215b4 <__sinit>
 8021820:	2300      	movs	r3, #0
 8021822:	6063      	str	r3, [r4, #4]
 8021824:	89a3      	ldrh	r3, [r4, #12]
 8021826:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802182a:	069e      	lsls	r6, r3, #26
 802182c:	d502      	bpl.n	8021834 <__srefill_r+0x24>
 802182e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021832:	e05c      	b.n	80218ee <__srefill_r+0xde>
 8021834:	0758      	lsls	r0, r3, #29
 8021836:	d448      	bmi.n	80218ca <__srefill_r+0xba>
 8021838:	06d9      	lsls	r1, r3, #27
 802183a:	d405      	bmi.n	8021848 <__srefill_r+0x38>
 802183c:	2309      	movs	r3, #9
 802183e:	602b      	str	r3, [r5, #0]
 8021840:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021844:	81a3      	strh	r3, [r4, #12]
 8021846:	e7f2      	b.n	802182e <__srefill_r+0x1e>
 8021848:	071a      	lsls	r2, r3, #28
 802184a:	d50b      	bpl.n	8021864 <__srefill_r+0x54>
 802184c:	4621      	mov	r1, r4
 802184e:	4628      	mov	r0, r5
 8021850:	f000 ff9c 	bl	802278c <_fflush_r>
 8021854:	2800      	cmp	r0, #0
 8021856:	d1ea      	bne.n	802182e <__srefill_r+0x1e>
 8021858:	89a3      	ldrh	r3, [r4, #12]
 802185a:	60a0      	str	r0, [r4, #8]
 802185c:	f023 0308 	bic.w	r3, r3, #8
 8021860:	81a3      	strh	r3, [r4, #12]
 8021862:	61a0      	str	r0, [r4, #24]
 8021864:	89a3      	ldrh	r3, [r4, #12]
 8021866:	f043 0304 	orr.w	r3, r3, #4
 802186a:	81a3      	strh	r3, [r4, #12]
 802186c:	6923      	ldr	r3, [r4, #16]
 802186e:	b91b      	cbnz	r3, 8021878 <__srefill_r+0x68>
 8021870:	4621      	mov	r1, r4
 8021872:	4628      	mov	r0, r5
 8021874:	f000 ffd8 	bl	8022828 <__smakebuf_r>
 8021878:	89a6      	ldrh	r6, [r4, #12]
 802187a:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 802187e:	07b3      	lsls	r3, r6, #30
 8021880:	d00f      	beq.n	80218a2 <__srefill_r+0x92>
 8021882:	2301      	movs	r3, #1
 8021884:	4a1b      	ldr	r2, [pc, #108]	; (80218f4 <__srefill_r+0xe4>)
 8021886:	491c      	ldr	r1, [pc, #112]	; (80218f8 <__srefill_r+0xe8>)
 8021888:	481c      	ldr	r0, [pc, #112]	; (80218fc <__srefill_r+0xec>)
 802188a:	81a3      	strh	r3, [r4, #12]
 802188c:	f006 0609 	and.w	r6, r6, #9
 8021890:	f7ff ff24 	bl	80216dc <_fwalk_sglue>
 8021894:	2e09      	cmp	r6, #9
 8021896:	81a7      	strh	r7, [r4, #12]
 8021898:	d103      	bne.n	80218a2 <__srefill_r+0x92>
 802189a:	4621      	mov	r1, r4
 802189c:	4628      	mov	r0, r5
 802189e:	f000 feef 	bl	8022680 <__sflush_r>
 80218a2:	6922      	ldr	r2, [r4, #16]
 80218a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80218a6:	6963      	ldr	r3, [r4, #20]
 80218a8:	6a21      	ldr	r1, [r4, #32]
 80218aa:	6022      	str	r2, [r4, #0]
 80218ac:	4628      	mov	r0, r5
 80218ae:	47b0      	blx	r6
 80218b0:	2800      	cmp	r0, #0
 80218b2:	6060      	str	r0, [r4, #4]
 80218b4:	dc1c      	bgt.n	80218f0 <__srefill_r+0xe0>
 80218b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80218ba:	bf17      	itett	ne
 80218bc:	2200      	movne	r2, #0
 80218be:	f043 0320 	orreq.w	r3, r3, #32
 80218c2:	6062      	strne	r2, [r4, #4]
 80218c4:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80218c8:	e7bc      	b.n	8021844 <__srefill_r+0x34>
 80218ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80218cc:	2900      	cmp	r1, #0
 80218ce:	d0cd      	beq.n	802186c <__srefill_r+0x5c>
 80218d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80218d4:	4299      	cmp	r1, r3
 80218d6:	d002      	beq.n	80218de <__srefill_r+0xce>
 80218d8:	4628      	mov	r0, r5
 80218da:	f000 fa59 	bl	8021d90 <_free_r>
 80218de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80218e0:	6063      	str	r3, [r4, #4]
 80218e2:	2000      	movs	r0, #0
 80218e4:	6360      	str	r0, [r4, #52]	; 0x34
 80218e6:	2b00      	cmp	r3, #0
 80218e8:	d0c0      	beq.n	802186c <__srefill_r+0x5c>
 80218ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80218ec:	6023      	str	r3, [r4, #0]
 80218ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80218f0:	2000      	movs	r0, #0
 80218f2:	e7fc      	b.n	80218ee <__srefill_r+0xde>
 80218f4:	2000003c 	.word	0x2000003c
 80218f8:	080217f5 	.word	0x080217f5
 80218fc:	20000048 	.word	0x20000048

08021900 <siprintf>:
 8021900:	b40e      	push	{r1, r2, r3}
 8021902:	b500      	push	{lr}
 8021904:	b09c      	sub	sp, #112	; 0x70
 8021906:	ab1d      	add	r3, sp, #116	; 0x74
 8021908:	9002      	str	r0, [sp, #8]
 802190a:	9006      	str	r0, [sp, #24]
 802190c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021910:	4809      	ldr	r0, [pc, #36]	; (8021938 <siprintf+0x38>)
 8021912:	9107      	str	r1, [sp, #28]
 8021914:	9104      	str	r1, [sp, #16]
 8021916:	4909      	ldr	r1, [pc, #36]	; (802193c <siprintf+0x3c>)
 8021918:	f853 2b04 	ldr.w	r2, [r3], #4
 802191c:	9105      	str	r1, [sp, #20]
 802191e:	6800      	ldr	r0, [r0, #0]
 8021920:	9301      	str	r3, [sp, #4]
 8021922:	a902      	add	r1, sp, #8
 8021924:	f000 fada 	bl	8021edc <_svfiprintf_r>
 8021928:	9b02      	ldr	r3, [sp, #8]
 802192a:	2200      	movs	r2, #0
 802192c:	701a      	strb	r2, [r3, #0]
 802192e:	b01c      	add	sp, #112	; 0x70
 8021930:	f85d eb04 	ldr.w	lr, [sp], #4
 8021934:	b003      	add	sp, #12
 8021936:	4770      	bx	lr
 8021938:	20000094 	.word	0x20000094
 802193c:	ffff0208 	.word	0xffff0208

08021940 <__sread>:
 8021940:	b510      	push	{r4, lr}
 8021942:	460c      	mov	r4, r1
 8021944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021948:	f000 f9aa 	bl	8021ca0 <_read_r>
 802194c:	2800      	cmp	r0, #0
 802194e:	bfab      	itete	ge
 8021950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8021952:	89a3      	ldrhlt	r3, [r4, #12]
 8021954:	181b      	addge	r3, r3, r0
 8021956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802195a:	bfac      	ite	ge
 802195c:	6563      	strge	r3, [r4, #84]	; 0x54
 802195e:	81a3      	strhlt	r3, [r4, #12]
 8021960:	bd10      	pop	{r4, pc}

08021962 <__swrite>:
 8021962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021966:	461f      	mov	r7, r3
 8021968:	898b      	ldrh	r3, [r1, #12]
 802196a:	05db      	lsls	r3, r3, #23
 802196c:	4605      	mov	r5, r0
 802196e:	460c      	mov	r4, r1
 8021970:	4616      	mov	r6, r2
 8021972:	d505      	bpl.n	8021980 <__swrite+0x1e>
 8021974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021978:	2302      	movs	r3, #2
 802197a:	2200      	movs	r2, #0
 802197c:	f000 f97e 	bl	8021c7c <_lseek_r>
 8021980:	89a3      	ldrh	r3, [r4, #12]
 8021982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802198a:	81a3      	strh	r3, [r4, #12]
 802198c:	4632      	mov	r2, r6
 802198e:	463b      	mov	r3, r7
 8021990:	4628      	mov	r0, r5
 8021992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021996:	f000 b9a5 	b.w	8021ce4 <_write_r>

0802199a <__sseek>:
 802199a:	b510      	push	{r4, lr}
 802199c:	460c      	mov	r4, r1
 802199e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80219a2:	f000 f96b 	bl	8021c7c <_lseek_r>
 80219a6:	1c43      	adds	r3, r0, #1
 80219a8:	89a3      	ldrh	r3, [r4, #12]
 80219aa:	bf15      	itete	ne
 80219ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80219ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80219b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80219b6:	81a3      	strheq	r3, [r4, #12]
 80219b8:	bf18      	it	ne
 80219ba:	81a3      	strhne	r3, [r4, #12]
 80219bc:	bd10      	pop	{r4, pc}

080219be <__sclose>:
 80219be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80219c2:	f000 b8f5 	b.w	8021bb0 <_close_r>

080219c6 <__swbuf_r>:
 80219c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80219c8:	460e      	mov	r6, r1
 80219ca:	4614      	mov	r4, r2
 80219cc:	4605      	mov	r5, r0
 80219ce:	b118      	cbz	r0, 80219d8 <__swbuf_r+0x12>
 80219d0:	6a03      	ldr	r3, [r0, #32]
 80219d2:	b90b      	cbnz	r3, 80219d8 <__swbuf_r+0x12>
 80219d4:	f7ff fdee 	bl	80215b4 <__sinit>
 80219d8:	69a3      	ldr	r3, [r4, #24]
 80219da:	60a3      	str	r3, [r4, #8]
 80219dc:	89a3      	ldrh	r3, [r4, #12]
 80219de:	071a      	lsls	r2, r3, #28
 80219e0:	d525      	bpl.n	8021a2e <__swbuf_r+0x68>
 80219e2:	6923      	ldr	r3, [r4, #16]
 80219e4:	b31b      	cbz	r3, 8021a2e <__swbuf_r+0x68>
 80219e6:	6823      	ldr	r3, [r4, #0]
 80219e8:	6922      	ldr	r2, [r4, #16]
 80219ea:	1a98      	subs	r0, r3, r2
 80219ec:	6963      	ldr	r3, [r4, #20]
 80219ee:	b2f6      	uxtb	r6, r6
 80219f0:	4283      	cmp	r3, r0
 80219f2:	4637      	mov	r7, r6
 80219f4:	dc04      	bgt.n	8021a00 <__swbuf_r+0x3a>
 80219f6:	4621      	mov	r1, r4
 80219f8:	4628      	mov	r0, r5
 80219fa:	f000 fec7 	bl	802278c <_fflush_r>
 80219fe:	b9e0      	cbnz	r0, 8021a3a <__swbuf_r+0x74>
 8021a00:	68a3      	ldr	r3, [r4, #8]
 8021a02:	3b01      	subs	r3, #1
 8021a04:	60a3      	str	r3, [r4, #8]
 8021a06:	6823      	ldr	r3, [r4, #0]
 8021a08:	1c5a      	adds	r2, r3, #1
 8021a0a:	6022      	str	r2, [r4, #0]
 8021a0c:	701e      	strb	r6, [r3, #0]
 8021a0e:	6962      	ldr	r2, [r4, #20]
 8021a10:	1c43      	adds	r3, r0, #1
 8021a12:	429a      	cmp	r2, r3
 8021a14:	d004      	beq.n	8021a20 <__swbuf_r+0x5a>
 8021a16:	89a3      	ldrh	r3, [r4, #12]
 8021a18:	07db      	lsls	r3, r3, #31
 8021a1a:	d506      	bpl.n	8021a2a <__swbuf_r+0x64>
 8021a1c:	2e0a      	cmp	r6, #10
 8021a1e:	d104      	bne.n	8021a2a <__swbuf_r+0x64>
 8021a20:	4621      	mov	r1, r4
 8021a22:	4628      	mov	r0, r5
 8021a24:	f000 feb2 	bl	802278c <_fflush_r>
 8021a28:	b938      	cbnz	r0, 8021a3a <__swbuf_r+0x74>
 8021a2a:	4638      	mov	r0, r7
 8021a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021a2e:	4621      	mov	r1, r4
 8021a30:	4628      	mov	r0, r5
 8021a32:	f000 f805 	bl	8021a40 <__swsetup_r>
 8021a36:	2800      	cmp	r0, #0
 8021a38:	d0d5      	beq.n	80219e6 <__swbuf_r+0x20>
 8021a3a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8021a3e:	e7f4      	b.n	8021a2a <__swbuf_r+0x64>

08021a40 <__swsetup_r>:
 8021a40:	b538      	push	{r3, r4, r5, lr}
 8021a42:	4b2a      	ldr	r3, [pc, #168]	; (8021aec <__swsetup_r+0xac>)
 8021a44:	4605      	mov	r5, r0
 8021a46:	6818      	ldr	r0, [r3, #0]
 8021a48:	460c      	mov	r4, r1
 8021a4a:	b118      	cbz	r0, 8021a54 <__swsetup_r+0x14>
 8021a4c:	6a03      	ldr	r3, [r0, #32]
 8021a4e:	b90b      	cbnz	r3, 8021a54 <__swsetup_r+0x14>
 8021a50:	f7ff fdb0 	bl	80215b4 <__sinit>
 8021a54:	89a3      	ldrh	r3, [r4, #12]
 8021a56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021a5a:	0718      	lsls	r0, r3, #28
 8021a5c:	d422      	bmi.n	8021aa4 <__swsetup_r+0x64>
 8021a5e:	06d9      	lsls	r1, r3, #27
 8021a60:	d407      	bmi.n	8021a72 <__swsetup_r+0x32>
 8021a62:	2309      	movs	r3, #9
 8021a64:	602b      	str	r3, [r5, #0]
 8021a66:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021a6a:	81a3      	strh	r3, [r4, #12]
 8021a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021a70:	e034      	b.n	8021adc <__swsetup_r+0x9c>
 8021a72:	0758      	lsls	r0, r3, #29
 8021a74:	d512      	bpl.n	8021a9c <__swsetup_r+0x5c>
 8021a76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021a78:	b141      	cbz	r1, 8021a8c <__swsetup_r+0x4c>
 8021a7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021a7e:	4299      	cmp	r1, r3
 8021a80:	d002      	beq.n	8021a88 <__swsetup_r+0x48>
 8021a82:	4628      	mov	r0, r5
 8021a84:	f000 f984 	bl	8021d90 <_free_r>
 8021a88:	2300      	movs	r3, #0
 8021a8a:	6363      	str	r3, [r4, #52]	; 0x34
 8021a8c:	89a3      	ldrh	r3, [r4, #12]
 8021a8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021a92:	81a3      	strh	r3, [r4, #12]
 8021a94:	2300      	movs	r3, #0
 8021a96:	6063      	str	r3, [r4, #4]
 8021a98:	6923      	ldr	r3, [r4, #16]
 8021a9a:	6023      	str	r3, [r4, #0]
 8021a9c:	89a3      	ldrh	r3, [r4, #12]
 8021a9e:	f043 0308 	orr.w	r3, r3, #8
 8021aa2:	81a3      	strh	r3, [r4, #12]
 8021aa4:	6923      	ldr	r3, [r4, #16]
 8021aa6:	b94b      	cbnz	r3, 8021abc <__swsetup_r+0x7c>
 8021aa8:	89a3      	ldrh	r3, [r4, #12]
 8021aaa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021ab2:	d003      	beq.n	8021abc <__swsetup_r+0x7c>
 8021ab4:	4621      	mov	r1, r4
 8021ab6:	4628      	mov	r0, r5
 8021ab8:	f000 feb6 	bl	8022828 <__smakebuf_r>
 8021abc:	89a0      	ldrh	r0, [r4, #12]
 8021abe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021ac2:	f010 0301 	ands.w	r3, r0, #1
 8021ac6:	d00a      	beq.n	8021ade <__swsetup_r+0x9e>
 8021ac8:	2300      	movs	r3, #0
 8021aca:	60a3      	str	r3, [r4, #8]
 8021acc:	6963      	ldr	r3, [r4, #20]
 8021ace:	425b      	negs	r3, r3
 8021ad0:	61a3      	str	r3, [r4, #24]
 8021ad2:	6923      	ldr	r3, [r4, #16]
 8021ad4:	b943      	cbnz	r3, 8021ae8 <__swsetup_r+0xa8>
 8021ad6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021ada:	d1c4      	bne.n	8021a66 <__swsetup_r+0x26>
 8021adc:	bd38      	pop	{r3, r4, r5, pc}
 8021ade:	0781      	lsls	r1, r0, #30
 8021ae0:	bf58      	it	pl
 8021ae2:	6963      	ldrpl	r3, [r4, #20]
 8021ae4:	60a3      	str	r3, [r4, #8]
 8021ae6:	e7f4      	b.n	8021ad2 <__swsetup_r+0x92>
 8021ae8:	2000      	movs	r0, #0
 8021aea:	e7f7      	b.n	8021adc <__swsetup_r+0x9c>
 8021aec:	20000094 	.word	0x20000094

08021af0 <memcmp>:
 8021af0:	b510      	push	{r4, lr}
 8021af2:	3901      	subs	r1, #1
 8021af4:	4402      	add	r2, r0
 8021af6:	4290      	cmp	r0, r2
 8021af8:	d101      	bne.n	8021afe <memcmp+0xe>
 8021afa:	2000      	movs	r0, #0
 8021afc:	e005      	b.n	8021b0a <memcmp+0x1a>
 8021afe:	7803      	ldrb	r3, [r0, #0]
 8021b00:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021b04:	42a3      	cmp	r3, r4
 8021b06:	d001      	beq.n	8021b0c <memcmp+0x1c>
 8021b08:	1b18      	subs	r0, r3, r4
 8021b0a:	bd10      	pop	{r4, pc}
 8021b0c:	3001      	adds	r0, #1
 8021b0e:	e7f2      	b.n	8021af6 <memcmp+0x6>

08021b10 <memmove>:
 8021b10:	4288      	cmp	r0, r1
 8021b12:	b510      	push	{r4, lr}
 8021b14:	eb01 0402 	add.w	r4, r1, r2
 8021b18:	d902      	bls.n	8021b20 <memmove+0x10>
 8021b1a:	4284      	cmp	r4, r0
 8021b1c:	4623      	mov	r3, r4
 8021b1e:	d807      	bhi.n	8021b30 <memmove+0x20>
 8021b20:	1e43      	subs	r3, r0, #1
 8021b22:	42a1      	cmp	r1, r4
 8021b24:	d008      	beq.n	8021b38 <memmove+0x28>
 8021b26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021b2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021b2e:	e7f8      	b.n	8021b22 <memmove+0x12>
 8021b30:	4402      	add	r2, r0
 8021b32:	4601      	mov	r1, r0
 8021b34:	428a      	cmp	r2, r1
 8021b36:	d100      	bne.n	8021b3a <memmove+0x2a>
 8021b38:	bd10      	pop	{r4, pc}
 8021b3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021b3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021b42:	e7f7      	b.n	8021b34 <memmove+0x24>

08021b44 <memset>:
 8021b44:	4402      	add	r2, r0
 8021b46:	4603      	mov	r3, r0
 8021b48:	4293      	cmp	r3, r2
 8021b4a:	d100      	bne.n	8021b4e <memset+0xa>
 8021b4c:	4770      	bx	lr
 8021b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8021b52:	e7f9      	b.n	8021b48 <memset+0x4>

08021b54 <strchr>:
 8021b54:	b2c9      	uxtb	r1, r1
 8021b56:	4603      	mov	r3, r0
 8021b58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021b5c:	b11a      	cbz	r2, 8021b66 <strchr+0x12>
 8021b5e:	428a      	cmp	r2, r1
 8021b60:	d1f9      	bne.n	8021b56 <strchr+0x2>
 8021b62:	4618      	mov	r0, r3
 8021b64:	4770      	bx	lr
 8021b66:	2900      	cmp	r1, #0
 8021b68:	bf18      	it	ne
 8021b6a:	2300      	movne	r3, #0
 8021b6c:	e7f9      	b.n	8021b62 <strchr+0xe>

08021b6e <strcspn>:
 8021b6e:	b570      	push	{r4, r5, r6, lr}
 8021b70:	4603      	mov	r3, r0
 8021b72:	461e      	mov	r6, r3
 8021b74:	f813 4b01 	ldrb.w	r4, [r3], #1
 8021b78:	b144      	cbz	r4, 8021b8c <strcspn+0x1e>
 8021b7a:	1e4a      	subs	r2, r1, #1
 8021b7c:	e001      	b.n	8021b82 <strcspn+0x14>
 8021b7e:	42a5      	cmp	r5, r4
 8021b80:	d004      	beq.n	8021b8c <strcspn+0x1e>
 8021b82:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8021b86:	2d00      	cmp	r5, #0
 8021b88:	d1f9      	bne.n	8021b7e <strcspn+0x10>
 8021b8a:	e7f2      	b.n	8021b72 <strcspn+0x4>
 8021b8c:	1a30      	subs	r0, r6, r0
 8021b8e:	bd70      	pop	{r4, r5, r6, pc}

08021b90 <strspn>:
 8021b90:	b570      	push	{r4, r5, r6, lr}
 8021b92:	4603      	mov	r3, r0
 8021b94:	461e      	mov	r6, r3
 8021b96:	f813 4b01 	ldrb.w	r4, [r3], #1
 8021b9a:	b13c      	cbz	r4, 8021bac <strspn+0x1c>
 8021b9c:	1e4a      	subs	r2, r1, #1
 8021b9e:	e001      	b.n	8021ba4 <strspn+0x14>
 8021ba0:	42a5      	cmp	r5, r4
 8021ba2:	d0f7      	beq.n	8021b94 <strspn+0x4>
 8021ba4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8021ba8:	2d00      	cmp	r5, #0
 8021baa:	d1f9      	bne.n	8021ba0 <strspn+0x10>
 8021bac:	1a30      	subs	r0, r6, r0
 8021bae:	bd70      	pop	{r4, r5, r6, pc}

08021bb0 <_close_r>:
 8021bb0:	b538      	push	{r3, r4, r5, lr}
 8021bb2:	4d06      	ldr	r5, [pc, #24]	; (8021bcc <_close_r+0x1c>)
 8021bb4:	2300      	movs	r3, #0
 8021bb6:	4604      	mov	r4, r0
 8021bb8:	4608      	mov	r0, r1
 8021bba:	602b      	str	r3, [r5, #0]
 8021bbc:	f7e0 f8b5 	bl	8001d2a <_close>
 8021bc0:	1c43      	adds	r3, r0, #1
 8021bc2:	d102      	bne.n	8021bca <_close_r+0x1a>
 8021bc4:	682b      	ldr	r3, [r5, #0]
 8021bc6:	b103      	cbz	r3, 8021bca <_close_r+0x1a>
 8021bc8:	6023      	str	r3, [r4, #0]
 8021bca:	bd38      	pop	{r3, r4, r5, pc}
 8021bcc:	20012ce4 	.word	0x20012ce4

08021bd0 <_reclaim_reent>:
 8021bd0:	4b29      	ldr	r3, [pc, #164]	; (8021c78 <_reclaim_reent+0xa8>)
 8021bd2:	681b      	ldr	r3, [r3, #0]
 8021bd4:	4283      	cmp	r3, r0
 8021bd6:	b570      	push	{r4, r5, r6, lr}
 8021bd8:	4604      	mov	r4, r0
 8021bda:	d04b      	beq.n	8021c74 <_reclaim_reent+0xa4>
 8021bdc:	69c3      	ldr	r3, [r0, #28]
 8021bde:	b143      	cbz	r3, 8021bf2 <_reclaim_reent+0x22>
 8021be0:	68db      	ldr	r3, [r3, #12]
 8021be2:	2b00      	cmp	r3, #0
 8021be4:	d144      	bne.n	8021c70 <_reclaim_reent+0xa0>
 8021be6:	69e3      	ldr	r3, [r4, #28]
 8021be8:	6819      	ldr	r1, [r3, #0]
 8021bea:	b111      	cbz	r1, 8021bf2 <_reclaim_reent+0x22>
 8021bec:	4620      	mov	r0, r4
 8021bee:	f000 f8cf 	bl	8021d90 <_free_r>
 8021bf2:	6961      	ldr	r1, [r4, #20]
 8021bf4:	b111      	cbz	r1, 8021bfc <_reclaim_reent+0x2c>
 8021bf6:	4620      	mov	r0, r4
 8021bf8:	f000 f8ca 	bl	8021d90 <_free_r>
 8021bfc:	69e1      	ldr	r1, [r4, #28]
 8021bfe:	b111      	cbz	r1, 8021c06 <_reclaim_reent+0x36>
 8021c00:	4620      	mov	r0, r4
 8021c02:	f000 f8c5 	bl	8021d90 <_free_r>
 8021c06:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8021c08:	b111      	cbz	r1, 8021c10 <_reclaim_reent+0x40>
 8021c0a:	4620      	mov	r0, r4
 8021c0c:	f000 f8c0 	bl	8021d90 <_free_r>
 8021c10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021c12:	b111      	cbz	r1, 8021c1a <_reclaim_reent+0x4a>
 8021c14:	4620      	mov	r0, r4
 8021c16:	f000 f8bb 	bl	8021d90 <_free_r>
 8021c1a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8021c1c:	b111      	cbz	r1, 8021c24 <_reclaim_reent+0x54>
 8021c1e:	4620      	mov	r0, r4
 8021c20:	f000 f8b6 	bl	8021d90 <_free_r>
 8021c24:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8021c26:	b111      	cbz	r1, 8021c2e <_reclaim_reent+0x5e>
 8021c28:	4620      	mov	r0, r4
 8021c2a:	f000 f8b1 	bl	8021d90 <_free_r>
 8021c2e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8021c30:	b111      	cbz	r1, 8021c38 <_reclaim_reent+0x68>
 8021c32:	4620      	mov	r0, r4
 8021c34:	f000 f8ac 	bl	8021d90 <_free_r>
 8021c38:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8021c3a:	b111      	cbz	r1, 8021c42 <_reclaim_reent+0x72>
 8021c3c:	4620      	mov	r0, r4
 8021c3e:	f000 f8a7 	bl	8021d90 <_free_r>
 8021c42:	6a23      	ldr	r3, [r4, #32]
 8021c44:	b1b3      	cbz	r3, 8021c74 <_reclaim_reent+0xa4>
 8021c46:	4620      	mov	r0, r4
 8021c48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021c4c:	4718      	bx	r3
 8021c4e:	5949      	ldr	r1, [r1, r5]
 8021c50:	b941      	cbnz	r1, 8021c64 <_reclaim_reent+0x94>
 8021c52:	3504      	adds	r5, #4
 8021c54:	69e3      	ldr	r3, [r4, #28]
 8021c56:	2d80      	cmp	r5, #128	; 0x80
 8021c58:	68d9      	ldr	r1, [r3, #12]
 8021c5a:	d1f8      	bne.n	8021c4e <_reclaim_reent+0x7e>
 8021c5c:	4620      	mov	r0, r4
 8021c5e:	f000 f897 	bl	8021d90 <_free_r>
 8021c62:	e7c0      	b.n	8021be6 <_reclaim_reent+0x16>
 8021c64:	680e      	ldr	r6, [r1, #0]
 8021c66:	4620      	mov	r0, r4
 8021c68:	f000 f892 	bl	8021d90 <_free_r>
 8021c6c:	4631      	mov	r1, r6
 8021c6e:	e7ef      	b.n	8021c50 <_reclaim_reent+0x80>
 8021c70:	2500      	movs	r5, #0
 8021c72:	e7ef      	b.n	8021c54 <_reclaim_reent+0x84>
 8021c74:	bd70      	pop	{r4, r5, r6, pc}
 8021c76:	bf00      	nop
 8021c78:	20000094 	.word	0x20000094

08021c7c <_lseek_r>:
 8021c7c:	b538      	push	{r3, r4, r5, lr}
 8021c7e:	4d07      	ldr	r5, [pc, #28]	; (8021c9c <_lseek_r+0x20>)
 8021c80:	4604      	mov	r4, r0
 8021c82:	4608      	mov	r0, r1
 8021c84:	4611      	mov	r1, r2
 8021c86:	2200      	movs	r2, #0
 8021c88:	602a      	str	r2, [r5, #0]
 8021c8a:	461a      	mov	r2, r3
 8021c8c:	f7e0 f874 	bl	8001d78 <_lseek>
 8021c90:	1c43      	adds	r3, r0, #1
 8021c92:	d102      	bne.n	8021c9a <_lseek_r+0x1e>
 8021c94:	682b      	ldr	r3, [r5, #0]
 8021c96:	b103      	cbz	r3, 8021c9a <_lseek_r+0x1e>
 8021c98:	6023      	str	r3, [r4, #0]
 8021c9a:	bd38      	pop	{r3, r4, r5, pc}
 8021c9c:	20012ce4 	.word	0x20012ce4

08021ca0 <_read_r>:
 8021ca0:	b538      	push	{r3, r4, r5, lr}
 8021ca2:	4d07      	ldr	r5, [pc, #28]	; (8021cc0 <_read_r+0x20>)
 8021ca4:	4604      	mov	r4, r0
 8021ca6:	4608      	mov	r0, r1
 8021ca8:	4611      	mov	r1, r2
 8021caa:	2200      	movs	r2, #0
 8021cac:	602a      	str	r2, [r5, #0]
 8021cae:	461a      	mov	r2, r3
 8021cb0:	f7e0 f802 	bl	8001cb8 <_read>
 8021cb4:	1c43      	adds	r3, r0, #1
 8021cb6:	d102      	bne.n	8021cbe <_read_r+0x1e>
 8021cb8:	682b      	ldr	r3, [r5, #0]
 8021cba:	b103      	cbz	r3, 8021cbe <_read_r+0x1e>
 8021cbc:	6023      	str	r3, [r4, #0]
 8021cbe:	bd38      	pop	{r3, r4, r5, pc}
 8021cc0:	20012ce4 	.word	0x20012ce4

08021cc4 <_sbrk_r>:
 8021cc4:	b538      	push	{r3, r4, r5, lr}
 8021cc6:	4d06      	ldr	r5, [pc, #24]	; (8021ce0 <_sbrk_r+0x1c>)
 8021cc8:	2300      	movs	r3, #0
 8021cca:	4604      	mov	r4, r0
 8021ccc:	4608      	mov	r0, r1
 8021cce:	602b      	str	r3, [r5, #0]
 8021cd0:	f7e0 f860 	bl	8001d94 <_sbrk>
 8021cd4:	1c43      	adds	r3, r0, #1
 8021cd6:	d102      	bne.n	8021cde <_sbrk_r+0x1a>
 8021cd8:	682b      	ldr	r3, [r5, #0]
 8021cda:	b103      	cbz	r3, 8021cde <_sbrk_r+0x1a>
 8021cdc:	6023      	str	r3, [r4, #0]
 8021cde:	bd38      	pop	{r3, r4, r5, pc}
 8021ce0:	20012ce4 	.word	0x20012ce4

08021ce4 <_write_r>:
 8021ce4:	b538      	push	{r3, r4, r5, lr}
 8021ce6:	4d07      	ldr	r5, [pc, #28]	; (8021d04 <_write_r+0x20>)
 8021ce8:	4604      	mov	r4, r0
 8021cea:	4608      	mov	r0, r1
 8021cec:	4611      	mov	r1, r2
 8021cee:	2200      	movs	r2, #0
 8021cf0:	602a      	str	r2, [r5, #0]
 8021cf2:	461a      	mov	r2, r3
 8021cf4:	f7df fffd 	bl	8001cf2 <_write>
 8021cf8:	1c43      	adds	r3, r0, #1
 8021cfa:	d102      	bne.n	8021d02 <_write_r+0x1e>
 8021cfc:	682b      	ldr	r3, [r5, #0]
 8021cfe:	b103      	cbz	r3, 8021d02 <_write_r+0x1e>
 8021d00:	6023      	str	r3, [r4, #0]
 8021d02:	bd38      	pop	{r3, r4, r5, pc}
 8021d04:	20012ce4 	.word	0x20012ce4

08021d08 <__libc_init_array>:
 8021d08:	b570      	push	{r4, r5, r6, lr}
 8021d0a:	4d0d      	ldr	r5, [pc, #52]	; (8021d40 <__libc_init_array+0x38>)
 8021d0c:	4c0d      	ldr	r4, [pc, #52]	; (8021d44 <__libc_init_array+0x3c>)
 8021d0e:	1b64      	subs	r4, r4, r5
 8021d10:	10a4      	asrs	r4, r4, #2
 8021d12:	2600      	movs	r6, #0
 8021d14:	42a6      	cmp	r6, r4
 8021d16:	d109      	bne.n	8021d2c <__libc_init_array+0x24>
 8021d18:	4d0b      	ldr	r5, [pc, #44]	; (8021d48 <__libc_init_array+0x40>)
 8021d1a:	4c0c      	ldr	r4, [pc, #48]	; (8021d4c <__libc_init_array+0x44>)
 8021d1c:	f000 fe5e 	bl	80229dc <_init>
 8021d20:	1b64      	subs	r4, r4, r5
 8021d22:	10a4      	asrs	r4, r4, #2
 8021d24:	2600      	movs	r6, #0
 8021d26:	42a6      	cmp	r6, r4
 8021d28:	d105      	bne.n	8021d36 <__libc_init_array+0x2e>
 8021d2a:	bd70      	pop	{r4, r5, r6, pc}
 8021d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8021d30:	4798      	blx	r3
 8021d32:	3601      	adds	r6, #1
 8021d34:	e7ee      	b.n	8021d14 <__libc_init_array+0xc>
 8021d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8021d3a:	4798      	blx	r3
 8021d3c:	3601      	adds	r6, #1
 8021d3e:	e7f2      	b.n	8021d26 <__libc_init_array+0x1e>
 8021d40:	08027af8 	.word	0x08027af8
 8021d44:	08027af8 	.word	0x08027af8
 8021d48:	08027af8 	.word	0x08027af8
 8021d4c:	08027afc 	.word	0x08027afc

08021d50 <__retarget_lock_init_recursive>:
 8021d50:	4770      	bx	lr

08021d52 <__retarget_lock_acquire_recursive>:
 8021d52:	4770      	bx	lr

08021d54 <__retarget_lock_release_recursive>:
 8021d54:	4770      	bx	lr

08021d56 <strcpy>:
 8021d56:	4603      	mov	r3, r0
 8021d58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021d5c:	f803 2b01 	strb.w	r2, [r3], #1
 8021d60:	2a00      	cmp	r2, #0
 8021d62:	d1f9      	bne.n	8021d58 <strcpy+0x2>
 8021d64:	4770      	bx	lr

08021d66 <memcpy>:
 8021d66:	440a      	add	r2, r1
 8021d68:	4291      	cmp	r1, r2
 8021d6a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8021d6e:	d100      	bne.n	8021d72 <memcpy+0xc>
 8021d70:	4770      	bx	lr
 8021d72:	b510      	push	{r4, lr}
 8021d74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021d78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021d7c:	4291      	cmp	r1, r2
 8021d7e:	d1f9      	bne.n	8021d74 <memcpy+0xe>
 8021d80:	bd10      	pop	{r4, pc}

08021d82 <abort>:
 8021d82:	b508      	push	{r3, lr}
 8021d84:	2006      	movs	r0, #6
 8021d86:	f000 fdb3 	bl	80228f0 <raise>
 8021d8a:	2001      	movs	r0, #1
 8021d8c:	f7df ff8a 	bl	8001ca4 <_exit>

08021d90 <_free_r>:
 8021d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021d92:	2900      	cmp	r1, #0
 8021d94:	d044      	beq.n	8021e20 <_free_r+0x90>
 8021d96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021d9a:	9001      	str	r0, [sp, #4]
 8021d9c:	2b00      	cmp	r3, #0
 8021d9e:	f1a1 0404 	sub.w	r4, r1, #4
 8021da2:	bfb8      	it	lt
 8021da4:	18e4      	addlt	r4, r4, r3
 8021da6:	f7ff fb2f 	bl	8021408 <__malloc_lock>
 8021daa:	4a1e      	ldr	r2, [pc, #120]	; (8021e24 <_free_r+0x94>)
 8021dac:	9801      	ldr	r0, [sp, #4]
 8021dae:	6813      	ldr	r3, [r2, #0]
 8021db0:	b933      	cbnz	r3, 8021dc0 <_free_r+0x30>
 8021db2:	6063      	str	r3, [r4, #4]
 8021db4:	6014      	str	r4, [r2, #0]
 8021db6:	b003      	add	sp, #12
 8021db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021dbc:	f7ff bb2a 	b.w	8021414 <__malloc_unlock>
 8021dc0:	42a3      	cmp	r3, r4
 8021dc2:	d908      	bls.n	8021dd6 <_free_r+0x46>
 8021dc4:	6825      	ldr	r5, [r4, #0]
 8021dc6:	1961      	adds	r1, r4, r5
 8021dc8:	428b      	cmp	r3, r1
 8021dca:	bf01      	itttt	eq
 8021dcc:	6819      	ldreq	r1, [r3, #0]
 8021dce:	685b      	ldreq	r3, [r3, #4]
 8021dd0:	1949      	addeq	r1, r1, r5
 8021dd2:	6021      	streq	r1, [r4, #0]
 8021dd4:	e7ed      	b.n	8021db2 <_free_r+0x22>
 8021dd6:	461a      	mov	r2, r3
 8021dd8:	685b      	ldr	r3, [r3, #4]
 8021dda:	b10b      	cbz	r3, 8021de0 <_free_r+0x50>
 8021ddc:	42a3      	cmp	r3, r4
 8021dde:	d9fa      	bls.n	8021dd6 <_free_r+0x46>
 8021de0:	6811      	ldr	r1, [r2, #0]
 8021de2:	1855      	adds	r5, r2, r1
 8021de4:	42a5      	cmp	r5, r4
 8021de6:	d10b      	bne.n	8021e00 <_free_r+0x70>
 8021de8:	6824      	ldr	r4, [r4, #0]
 8021dea:	4421      	add	r1, r4
 8021dec:	1854      	adds	r4, r2, r1
 8021dee:	42a3      	cmp	r3, r4
 8021df0:	6011      	str	r1, [r2, #0]
 8021df2:	d1e0      	bne.n	8021db6 <_free_r+0x26>
 8021df4:	681c      	ldr	r4, [r3, #0]
 8021df6:	685b      	ldr	r3, [r3, #4]
 8021df8:	6053      	str	r3, [r2, #4]
 8021dfa:	440c      	add	r4, r1
 8021dfc:	6014      	str	r4, [r2, #0]
 8021dfe:	e7da      	b.n	8021db6 <_free_r+0x26>
 8021e00:	d902      	bls.n	8021e08 <_free_r+0x78>
 8021e02:	230c      	movs	r3, #12
 8021e04:	6003      	str	r3, [r0, #0]
 8021e06:	e7d6      	b.n	8021db6 <_free_r+0x26>
 8021e08:	6825      	ldr	r5, [r4, #0]
 8021e0a:	1961      	adds	r1, r4, r5
 8021e0c:	428b      	cmp	r3, r1
 8021e0e:	bf04      	itt	eq
 8021e10:	6819      	ldreq	r1, [r3, #0]
 8021e12:	685b      	ldreq	r3, [r3, #4]
 8021e14:	6063      	str	r3, [r4, #4]
 8021e16:	bf04      	itt	eq
 8021e18:	1949      	addeq	r1, r1, r5
 8021e1a:	6021      	streq	r1, [r4, #0]
 8021e1c:	6054      	str	r4, [r2, #4]
 8021e1e:	e7ca      	b.n	8021db6 <_free_r+0x26>
 8021e20:	b003      	add	sp, #12
 8021e22:	bd30      	pop	{r4, r5, pc}
 8021e24:	20012ba0 	.word	0x20012ba0

08021e28 <__ssputs_r>:
 8021e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e2c:	688e      	ldr	r6, [r1, #8]
 8021e2e:	461f      	mov	r7, r3
 8021e30:	42be      	cmp	r6, r7
 8021e32:	680b      	ldr	r3, [r1, #0]
 8021e34:	4682      	mov	sl, r0
 8021e36:	460c      	mov	r4, r1
 8021e38:	4690      	mov	r8, r2
 8021e3a:	d82c      	bhi.n	8021e96 <__ssputs_r+0x6e>
 8021e3c:	898a      	ldrh	r2, [r1, #12]
 8021e3e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8021e42:	d026      	beq.n	8021e92 <__ssputs_r+0x6a>
 8021e44:	6965      	ldr	r5, [r4, #20]
 8021e46:	6909      	ldr	r1, [r1, #16]
 8021e48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021e4c:	eba3 0901 	sub.w	r9, r3, r1
 8021e50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021e54:	1c7b      	adds	r3, r7, #1
 8021e56:	444b      	add	r3, r9
 8021e58:	106d      	asrs	r5, r5, #1
 8021e5a:	429d      	cmp	r5, r3
 8021e5c:	bf38      	it	cc
 8021e5e:	461d      	movcc	r5, r3
 8021e60:	0553      	lsls	r3, r2, #21
 8021e62:	d527      	bpl.n	8021eb4 <__ssputs_r+0x8c>
 8021e64:	4629      	mov	r1, r5
 8021e66:	f7ff fa4f 	bl	8021308 <_malloc_r>
 8021e6a:	4606      	mov	r6, r0
 8021e6c:	b360      	cbz	r0, 8021ec8 <__ssputs_r+0xa0>
 8021e6e:	6921      	ldr	r1, [r4, #16]
 8021e70:	464a      	mov	r2, r9
 8021e72:	f7ff ff78 	bl	8021d66 <memcpy>
 8021e76:	89a3      	ldrh	r3, [r4, #12]
 8021e78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8021e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021e80:	81a3      	strh	r3, [r4, #12]
 8021e82:	6126      	str	r6, [r4, #16]
 8021e84:	6165      	str	r5, [r4, #20]
 8021e86:	444e      	add	r6, r9
 8021e88:	eba5 0509 	sub.w	r5, r5, r9
 8021e8c:	6026      	str	r6, [r4, #0]
 8021e8e:	60a5      	str	r5, [r4, #8]
 8021e90:	463e      	mov	r6, r7
 8021e92:	42be      	cmp	r6, r7
 8021e94:	d900      	bls.n	8021e98 <__ssputs_r+0x70>
 8021e96:	463e      	mov	r6, r7
 8021e98:	6820      	ldr	r0, [r4, #0]
 8021e9a:	4632      	mov	r2, r6
 8021e9c:	4641      	mov	r1, r8
 8021e9e:	f7ff fe37 	bl	8021b10 <memmove>
 8021ea2:	68a3      	ldr	r3, [r4, #8]
 8021ea4:	1b9b      	subs	r3, r3, r6
 8021ea6:	60a3      	str	r3, [r4, #8]
 8021ea8:	6823      	ldr	r3, [r4, #0]
 8021eaa:	4433      	add	r3, r6
 8021eac:	6023      	str	r3, [r4, #0]
 8021eae:	2000      	movs	r0, #0
 8021eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021eb4:	462a      	mov	r2, r5
 8021eb6:	f000 fd59 	bl	802296c <_realloc_r>
 8021eba:	4606      	mov	r6, r0
 8021ebc:	2800      	cmp	r0, #0
 8021ebe:	d1e0      	bne.n	8021e82 <__ssputs_r+0x5a>
 8021ec0:	6921      	ldr	r1, [r4, #16]
 8021ec2:	4650      	mov	r0, sl
 8021ec4:	f7ff ff64 	bl	8021d90 <_free_r>
 8021ec8:	230c      	movs	r3, #12
 8021eca:	f8ca 3000 	str.w	r3, [sl]
 8021ece:	89a3      	ldrh	r3, [r4, #12]
 8021ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021ed4:	81a3      	strh	r3, [r4, #12]
 8021ed6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021eda:	e7e9      	b.n	8021eb0 <__ssputs_r+0x88>

08021edc <_svfiprintf_r>:
 8021edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ee0:	4698      	mov	r8, r3
 8021ee2:	898b      	ldrh	r3, [r1, #12]
 8021ee4:	061b      	lsls	r3, r3, #24
 8021ee6:	b09d      	sub	sp, #116	; 0x74
 8021ee8:	4607      	mov	r7, r0
 8021eea:	460d      	mov	r5, r1
 8021eec:	4614      	mov	r4, r2
 8021eee:	d50e      	bpl.n	8021f0e <_svfiprintf_r+0x32>
 8021ef0:	690b      	ldr	r3, [r1, #16]
 8021ef2:	b963      	cbnz	r3, 8021f0e <_svfiprintf_r+0x32>
 8021ef4:	2140      	movs	r1, #64	; 0x40
 8021ef6:	f7ff fa07 	bl	8021308 <_malloc_r>
 8021efa:	6028      	str	r0, [r5, #0]
 8021efc:	6128      	str	r0, [r5, #16]
 8021efe:	b920      	cbnz	r0, 8021f0a <_svfiprintf_r+0x2e>
 8021f00:	230c      	movs	r3, #12
 8021f02:	603b      	str	r3, [r7, #0]
 8021f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021f08:	e0d0      	b.n	80220ac <_svfiprintf_r+0x1d0>
 8021f0a:	2340      	movs	r3, #64	; 0x40
 8021f0c:	616b      	str	r3, [r5, #20]
 8021f0e:	2300      	movs	r3, #0
 8021f10:	9309      	str	r3, [sp, #36]	; 0x24
 8021f12:	2320      	movs	r3, #32
 8021f14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021f18:	f8cd 800c 	str.w	r8, [sp, #12]
 8021f1c:	2330      	movs	r3, #48	; 0x30
 8021f1e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80220c4 <_svfiprintf_r+0x1e8>
 8021f22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021f26:	f04f 0901 	mov.w	r9, #1
 8021f2a:	4623      	mov	r3, r4
 8021f2c:	469a      	mov	sl, r3
 8021f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021f32:	b10a      	cbz	r2, 8021f38 <_svfiprintf_r+0x5c>
 8021f34:	2a25      	cmp	r2, #37	; 0x25
 8021f36:	d1f9      	bne.n	8021f2c <_svfiprintf_r+0x50>
 8021f38:	ebba 0b04 	subs.w	fp, sl, r4
 8021f3c:	d00b      	beq.n	8021f56 <_svfiprintf_r+0x7a>
 8021f3e:	465b      	mov	r3, fp
 8021f40:	4622      	mov	r2, r4
 8021f42:	4629      	mov	r1, r5
 8021f44:	4638      	mov	r0, r7
 8021f46:	f7ff ff6f 	bl	8021e28 <__ssputs_r>
 8021f4a:	3001      	adds	r0, #1
 8021f4c:	f000 80a9 	beq.w	80220a2 <_svfiprintf_r+0x1c6>
 8021f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021f52:	445a      	add	r2, fp
 8021f54:	9209      	str	r2, [sp, #36]	; 0x24
 8021f56:	f89a 3000 	ldrb.w	r3, [sl]
 8021f5a:	2b00      	cmp	r3, #0
 8021f5c:	f000 80a1 	beq.w	80220a2 <_svfiprintf_r+0x1c6>
 8021f60:	2300      	movs	r3, #0
 8021f62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021f66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021f6a:	f10a 0a01 	add.w	sl, sl, #1
 8021f6e:	9304      	str	r3, [sp, #16]
 8021f70:	9307      	str	r3, [sp, #28]
 8021f72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021f76:	931a      	str	r3, [sp, #104]	; 0x68
 8021f78:	4654      	mov	r4, sl
 8021f7a:	2205      	movs	r2, #5
 8021f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021f80:	4850      	ldr	r0, [pc, #320]	; (80220c4 <_svfiprintf_r+0x1e8>)
 8021f82:	f7de f93d 	bl	8000200 <memchr>
 8021f86:	9a04      	ldr	r2, [sp, #16]
 8021f88:	b9d8      	cbnz	r0, 8021fc2 <_svfiprintf_r+0xe6>
 8021f8a:	06d0      	lsls	r0, r2, #27
 8021f8c:	bf44      	itt	mi
 8021f8e:	2320      	movmi	r3, #32
 8021f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021f94:	0711      	lsls	r1, r2, #28
 8021f96:	bf44      	itt	mi
 8021f98:	232b      	movmi	r3, #43	; 0x2b
 8021f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8021fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8021fa4:	d015      	beq.n	8021fd2 <_svfiprintf_r+0xf6>
 8021fa6:	9a07      	ldr	r2, [sp, #28]
 8021fa8:	4654      	mov	r4, sl
 8021faa:	2000      	movs	r0, #0
 8021fac:	f04f 0c0a 	mov.w	ip, #10
 8021fb0:	4621      	mov	r1, r4
 8021fb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021fb6:	3b30      	subs	r3, #48	; 0x30
 8021fb8:	2b09      	cmp	r3, #9
 8021fba:	d94d      	bls.n	8022058 <_svfiprintf_r+0x17c>
 8021fbc:	b1b0      	cbz	r0, 8021fec <_svfiprintf_r+0x110>
 8021fbe:	9207      	str	r2, [sp, #28]
 8021fc0:	e014      	b.n	8021fec <_svfiprintf_r+0x110>
 8021fc2:	eba0 0308 	sub.w	r3, r0, r8
 8021fc6:	fa09 f303 	lsl.w	r3, r9, r3
 8021fca:	4313      	orrs	r3, r2
 8021fcc:	9304      	str	r3, [sp, #16]
 8021fce:	46a2      	mov	sl, r4
 8021fd0:	e7d2      	b.n	8021f78 <_svfiprintf_r+0x9c>
 8021fd2:	9b03      	ldr	r3, [sp, #12]
 8021fd4:	1d19      	adds	r1, r3, #4
 8021fd6:	681b      	ldr	r3, [r3, #0]
 8021fd8:	9103      	str	r1, [sp, #12]
 8021fda:	2b00      	cmp	r3, #0
 8021fdc:	bfbb      	ittet	lt
 8021fde:	425b      	neglt	r3, r3
 8021fe0:	f042 0202 	orrlt.w	r2, r2, #2
 8021fe4:	9307      	strge	r3, [sp, #28]
 8021fe6:	9307      	strlt	r3, [sp, #28]
 8021fe8:	bfb8      	it	lt
 8021fea:	9204      	strlt	r2, [sp, #16]
 8021fec:	7823      	ldrb	r3, [r4, #0]
 8021fee:	2b2e      	cmp	r3, #46	; 0x2e
 8021ff0:	d10c      	bne.n	802200c <_svfiprintf_r+0x130>
 8021ff2:	7863      	ldrb	r3, [r4, #1]
 8021ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8021ff6:	d134      	bne.n	8022062 <_svfiprintf_r+0x186>
 8021ff8:	9b03      	ldr	r3, [sp, #12]
 8021ffa:	1d1a      	adds	r2, r3, #4
 8021ffc:	681b      	ldr	r3, [r3, #0]
 8021ffe:	9203      	str	r2, [sp, #12]
 8022000:	2b00      	cmp	r3, #0
 8022002:	bfb8      	it	lt
 8022004:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8022008:	3402      	adds	r4, #2
 802200a:	9305      	str	r3, [sp, #20]
 802200c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80220d4 <_svfiprintf_r+0x1f8>
 8022010:	7821      	ldrb	r1, [r4, #0]
 8022012:	2203      	movs	r2, #3
 8022014:	4650      	mov	r0, sl
 8022016:	f7de f8f3 	bl	8000200 <memchr>
 802201a:	b138      	cbz	r0, 802202c <_svfiprintf_r+0x150>
 802201c:	9b04      	ldr	r3, [sp, #16]
 802201e:	eba0 000a 	sub.w	r0, r0, sl
 8022022:	2240      	movs	r2, #64	; 0x40
 8022024:	4082      	lsls	r2, r0
 8022026:	4313      	orrs	r3, r2
 8022028:	3401      	adds	r4, #1
 802202a:	9304      	str	r3, [sp, #16]
 802202c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022030:	4825      	ldr	r0, [pc, #148]	; (80220c8 <_svfiprintf_r+0x1ec>)
 8022032:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022036:	2206      	movs	r2, #6
 8022038:	f7de f8e2 	bl	8000200 <memchr>
 802203c:	2800      	cmp	r0, #0
 802203e:	d038      	beq.n	80220b2 <_svfiprintf_r+0x1d6>
 8022040:	4b22      	ldr	r3, [pc, #136]	; (80220cc <_svfiprintf_r+0x1f0>)
 8022042:	bb1b      	cbnz	r3, 802208c <_svfiprintf_r+0x1b0>
 8022044:	9b03      	ldr	r3, [sp, #12]
 8022046:	3307      	adds	r3, #7
 8022048:	f023 0307 	bic.w	r3, r3, #7
 802204c:	3308      	adds	r3, #8
 802204e:	9303      	str	r3, [sp, #12]
 8022050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022052:	4433      	add	r3, r6
 8022054:	9309      	str	r3, [sp, #36]	; 0x24
 8022056:	e768      	b.n	8021f2a <_svfiprintf_r+0x4e>
 8022058:	fb0c 3202 	mla	r2, ip, r2, r3
 802205c:	460c      	mov	r4, r1
 802205e:	2001      	movs	r0, #1
 8022060:	e7a6      	b.n	8021fb0 <_svfiprintf_r+0xd4>
 8022062:	2300      	movs	r3, #0
 8022064:	3401      	adds	r4, #1
 8022066:	9305      	str	r3, [sp, #20]
 8022068:	4619      	mov	r1, r3
 802206a:	f04f 0c0a 	mov.w	ip, #10
 802206e:	4620      	mov	r0, r4
 8022070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022074:	3a30      	subs	r2, #48	; 0x30
 8022076:	2a09      	cmp	r2, #9
 8022078:	d903      	bls.n	8022082 <_svfiprintf_r+0x1a6>
 802207a:	2b00      	cmp	r3, #0
 802207c:	d0c6      	beq.n	802200c <_svfiprintf_r+0x130>
 802207e:	9105      	str	r1, [sp, #20]
 8022080:	e7c4      	b.n	802200c <_svfiprintf_r+0x130>
 8022082:	fb0c 2101 	mla	r1, ip, r1, r2
 8022086:	4604      	mov	r4, r0
 8022088:	2301      	movs	r3, #1
 802208a:	e7f0      	b.n	802206e <_svfiprintf_r+0x192>
 802208c:	ab03      	add	r3, sp, #12
 802208e:	9300      	str	r3, [sp, #0]
 8022090:	462a      	mov	r2, r5
 8022092:	4b0f      	ldr	r3, [pc, #60]	; (80220d0 <_svfiprintf_r+0x1f4>)
 8022094:	a904      	add	r1, sp, #16
 8022096:	4638      	mov	r0, r7
 8022098:	f3af 8000 	nop.w
 802209c:	1c42      	adds	r2, r0, #1
 802209e:	4606      	mov	r6, r0
 80220a0:	d1d6      	bne.n	8022050 <_svfiprintf_r+0x174>
 80220a2:	89ab      	ldrh	r3, [r5, #12]
 80220a4:	065b      	lsls	r3, r3, #25
 80220a6:	f53f af2d 	bmi.w	8021f04 <_svfiprintf_r+0x28>
 80220aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80220ac:	b01d      	add	sp, #116	; 0x74
 80220ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220b2:	ab03      	add	r3, sp, #12
 80220b4:	9300      	str	r3, [sp, #0]
 80220b6:	462a      	mov	r2, r5
 80220b8:	4b05      	ldr	r3, [pc, #20]	; (80220d0 <_svfiprintf_r+0x1f4>)
 80220ba:	a904      	add	r1, sp, #16
 80220bc:	4638      	mov	r0, r7
 80220be:	f000 f9bd 	bl	802243c <_printf_i>
 80220c2:	e7eb      	b.n	802209c <_svfiprintf_r+0x1c0>
 80220c4:	08027abb 	.word	0x08027abb
 80220c8:	08027ac5 	.word	0x08027ac5
 80220cc:	00000000 	.word	0x00000000
 80220d0:	08021e29 	.word	0x08021e29
 80220d4:	08027ac1 	.word	0x08027ac1

080220d8 <__sfputc_r>:
 80220d8:	6893      	ldr	r3, [r2, #8]
 80220da:	3b01      	subs	r3, #1
 80220dc:	2b00      	cmp	r3, #0
 80220de:	b410      	push	{r4}
 80220e0:	6093      	str	r3, [r2, #8]
 80220e2:	da08      	bge.n	80220f6 <__sfputc_r+0x1e>
 80220e4:	6994      	ldr	r4, [r2, #24]
 80220e6:	42a3      	cmp	r3, r4
 80220e8:	db01      	blt.n	80220ee <__sfputc_r+0x16>
 80220ea:	290a      	cmp	r1, #10
 80220ec:	d103      	bne.n	80220f6 <__sfputc_r+0x1e>
 80220ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80220f2:	f7ff bc68 	b.w	80219c6 <__swbuf_r>
 80220f6:	6813      	ldr	r3, [r2, #0]
 80220f8:	1c58      	adds	r0, r3, #1
 80220fa:	6010      	str	r0, [r2, #0]
 80220fc:	7019      	strb	r1, [r3, #0]
 80220fe:	4608      	mov	r0, r1
 8022100:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022104:	4770      	bx	lr

08022106 <__sfputs_r>:
 8022106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022108:	4606      	mov	r6, r0
 802210a:	460f      	mov	r7, r1
 802210c:	4614      	mov	r4, r2
 802210e:	18d5      	adds	r5, r2, r3
 8022110:	42ac      	cmp	r4, r5
 8022112:	d101      	bne.n	8022118 <__sfputs_r+0x12>
 8022114:	2000      	movs	r0, #0
 8022116:	e007      	b.n	8022128 <__sfputs_r+0x22>
 8022118:	f814 1b01 	ldrb.w	r1, [r4], #1
 802211c:	463a      	mov	r2, r7
 802211e:	4630      	mov	r0, r6
 8022120:	f7ff ffda 	bl	80220d8 <__sfputc_r>
 8022124:	1c43      	adds	r3, r0, #1
 8022126:	d1f3      	bne.n	8022110 <__sfputs_r+0xa>
 8022128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802212c <_vfiprintf_r>:
 802212c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022130:	460d      	mov	r5, r1
 8022132:	b09d      	sub	sp, #116	; 0x74
 8022134:	4614      	mov	r4, r2
 8022136:	4698      	mov	r8, r3
 8022138:	4606      	mov	r6, r0
 802213a:	b118      	cbz	r0, 8022144 <_vfiprintf_r+0x18>
 802213c:	6a03      	ldr	r3, [r0, #32]
 802213e:	b90b      	cbnz	r3, 8022144 <_vfiprintf_r+0x18>
 8022140:	f7ff fa38 	bl	80215b4 <__sinit>
 8022144:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022146:	07d9      	lsls	r1, r3, #31
 8022148:	d405      	bmi.n	8022156 <_vfiprintf_r+0x2a>
 802214a:	89ab      	ldrh	r3, [r5, #12]
 802214c:	059a      	lsls	r2, r3, #22
 802214e:	d402      	bmi.n	8022156 <_vfiprintf_r+0x2a>
 8022150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022152:	f7ff fdfe 	bl	8021d52 <__retarget_lock_acquire_recursive>
 8022156:	89ab      	ldrh	r3, [r5, #12]
 8022158:	071b      	lsls	r3, r3, #28
 802215a:	d501      	bpl.n	8022160 <_vfiprintf_r+0x34>
 802215c:	692b      	ldr	r3, [r5, #16]
 802215e:	b99b      	cbnz	r3, 8022188 <_vfiprintf_r+0x5c>
 8022160:	4629      	mov	r1, r5
 8022162:	4630      	mov	r0, r6
 8022164:	f7ff fc6c 	bl	8021a40 <__swsetup_r>
 8022168:	b170      	cbz	r0, 8022188 <_vfiprintf_r+0x5c>
 802216a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802216c:	07dc      	lsls	r4, r3, #31
 802216e:	d504      	bpl.n	802217a <_vfiprintf_r+0x4e>
 8022170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022174:	b01d      	add	sp, #116	; 0x74
 8022176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802217a:	89ab      	ldrh	r3, [r5, #12]
 802217c:	0598      	lsls	r0, r3, #22
 802217e:	d4f7      	bmi.n	8022170 <_vfiprintf_r+0x44>
 8022180:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022182:	f7ff fde7 	bl	8021d54 <__retarget_lock_release_recursive>
 8022186:	e7f3      	b.n	8022170 <_vfiprintf_r+0x44>
 8022188:	2300      	movs	r3, #0
 802218a:	9309      	str	r3, [sp, #36]	; 0x24
 802218c:	2320      	movs	r3, #32
 802218e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022192:	f8cd 800c 	str.w	r8, [sp, #12]
 8022196:	2330      	movs	r3, #48	; 0x30
 8022198:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 802234c <_vfiprintf_r+0x220>
 802219c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80221a0:	f04f 0901 	mov.w	r9, #1
 80221a4:	4623      	mov	r3, r4
 80221a6:	469a      	mov	sl, r3
 80221a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80221ac:	b10a      	cbz	r2, 80221b2 <_vfiprintf_r+0x86>
 80221ae:	2a25      	cmp	r2, #37	; 0x25
 80221b0:	d1f9      	bne.n	80221a6 <_vfiprintf_r+0x7a>
 80221b2:	ebba 0b04 	subs.w	fp, sl, r4
 80221b6:	d00b      	beq.n	80221d0 <_vfiprintf_r+0xa4>
 80221b8:	465b      	mov	r3, fp
 80221ba:	4622      	mov	r2, r4
 80221bc:	4629      	mov	r1, r5
 80221be:	4630      	mov	r0, r6
 80221c0:	f7ff ffa1 	bl	8022106 <__sfputs_r>
 80221c4:	3001      	adds	r0, #1
 80221c6:	f000 80a9 	beq.w	802231c <_vfiprintf_r+0x1f0>
 80221ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80221cc:	445a      	add	r2, fp
 80221ce:	9209      	str	r2, [sp, #36]	; 0x24
 80221d0:	f89a 3000 	ldrb.w	r3, [sl]
 80221d4:	2b00      	cmp	r3, #0
 80221d6:	f000 80a1 	beq.w	802231c <_vfiprintf_r+0x1f0>
 80221da:	2300      	movs	r3, #0
 80221dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80221e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80221e4:	f10a 0a01 	add.w	sl, sl, #1
 80221e8:	9304      	str	r3, [sp, #16]
 80221ea:	9307      	str	r3, [sp, #28]
 80221ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80221f0:	931a      	str	r3, [sp, #104]	; 0x68
 80221f2:	4654      	mov	r4, sl
 80221f4:	2205      	movs	r2, #5
 80221f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80221fa:	4854      	ldr	r0, [pc, #336]	; (802234c <_vfiprintf_r+0x220>)
 80221fc:	f7de f800 	bl	8000200 <memchr>
 8022200:	9a04      	ldr	r2, [sp, #16]
 8022202:	b9d8      	cbnz	r0, 802223c <_vfiprintf_r+0x110>
 8022204:	06d1      	lsls	r1, r2, #27
 8022206:	bf44      	itt	mi
 8022208:	2320      	movmi	r3, #32
 802220a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802220e:	0713      	lsls	r3, r2, #28
 8022210:	bf44      	itt	mi
 8022212:	232b      	movmi	r3, #43	; 0x2b
 8022214:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022218:	f89a 3000 	ldrb.w	r3, [sl]
 802221c:	2b2a      	cmp	r3, #42	; 0x2a
 802221e:	d015      	beq.n	802224c <_vfiprintf_r+0x120>
 8022220:	9a07      	ldr	r2, [sp, #28]
 8022222:	4654      	mov	r4, sl
 8022224:	2000      	movs	r0, #0
 8022226:	f04f 0c0a 	mov.w	ip, #10
 802222a:	4621      	mov	r1, r4
 802222c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022230:	3b30      	subs	r3, #48	; 0x30
 8022232:	2b09      	cmp	r3, #9
 8022234:	d94d      	bls.n	80222d2 <_vfiprintf_r+0x1a6>
 8022236:	b1b0      	cbz	r0, 8022266 <_vfiprintf_r+0x13a>
 8022238:	9207      	str	r2, [sp, #28]
 802223a:	e014      	b.n	8022266 <_vfiprintf_r+0x13a>
 802223c:	eba0 0308 	sub.w	r3, r0, r8
 8022240:	fa09 f303 	lsl.w	r3, r9, r3
 8022244:	4313      	orrs	r3, r2
 8022246:	9304      	str	r3, [sp, #16]
 8022248:	46a2      	mov	sl, r4
 802224a:	e7d2      	b.n	80221f2 <_vfiprintf_r+0xc6>
 802224c:	9b03      	ldr	r3, [sp, #12]
 802224e:	1d19      	adds	r1, r3, #4
 8022250:	681b      	ldr	r3, [r3, #0]
 8022252:	9103      	str	r1, [sp, #12]
 8022254:	2b00      	cmp	r3, #0
 8022256:	bfbb      	ittet	lt
 8022258:	425b      	neglt	r3, r3
 802225a:	f042 0202 	orrlt.w	r2, r2, #2
 802225e:	9307      	strge	r3, [sp, #28]
 8022260:	9307      	strlt	r3, [sp, #28]
 8022262:	bfb8      	it	lt
 8022264:	9204      	strlt	r2, [sp, #16]
 8022266:	7823      	ldrb	r3, [r4, #0]
 8022268:	2b2e      	cmp	r3, #46	; 0x2e
 802226a:	d10c      	bne.n	8022286 <_vfiprintf_r+0x15a>
 802226c:	7863      	ldrb	r3, [r4, #1]
 802226e:	2b2a      	cmp	r3, #42	; 0x2a
 8022270:	d134      	bne.n	80222dc <_vfiprintf_r+0x1b0>
 8022272:	9b03      	ldr	r3, [sp, #12]
 8022274:	1d1a      	adds	r2, r3, #4
 8022276:	681b      	ldr	r3, [r3, #0]
 8022278:	9203      	str	r2, [sp, #12]
 802227a:	2b00      	cmp	r3, #0
 802227c:	bfb8      	it	lt
 802227e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8022282:	3402      	adds	r4, #2
 8022284:	9305      	str	r3, [sp, #20]
 8022286:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 802235c <_vfiprintf_r+0x230>
 802228a:	7821      	ldrb	r1, [r4, #0]
 802228c:	2203      	movs	r2, #3
 802228e:	4650      	mov	r0, sl
 8022290:	f7dd ffb6 	bl	8000200 <memchr>
 8022294:	b138      	cbz	r0, 80222a6 <_vfiprintf_r+0x17a>
 8022296:	9b04      	ldr	r3, [sp, #16]
 8022298:	eba0 000a 	sub.w	r0, r0, sl
 802229c:	2240      	movs	r2, #64	; 0x40
 802229e:	4082      	lsls	r2, r0
 80222a0:	4313      	orrs	r3, r2
 80222a2:	3401      	adds	r4, #1
 80222a4:	9304      	str	r3, [sp, #16]
 80222a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80222aa:	4829      	ldr	r0, [pc, #164]	; (8022350 <_vfiprintf_r+0x224>)
 80222ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80222b0:	2206      	movs	r2, #6
 80222b2:	f7dd ffa5 	bl	8000200 <memchr>
 80222b6:	2800      	cmp	r0, #0
 80222b8:	d03f      	beq.n	802233a <_vfiprintf_r+0x20e>
 80222ba:	4b26      	ldr	r3, [pc, #152]	; (8022354 <_vfiprintf_r+0x228>)
 80222bc:	bb1b      	cbnz	r3, 8022306 <_vfiprintf_r+0x1da>
 80222be:	9b03      	ldr	r3, [sp, #12]
 80222c0:	3307      	adds	r3, #7
 80222c2:	f023 0307 	bic.w	r3, r3, #7
 80222c6:	3308      	adds	r3, #8
 80222c8:	9303      	str	r3, [sp, #12]
 80222ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80222cc:	443b      	add	r3, r7
 80222ce:	9309      	str	r3, [sp, #36]	; 0x24
 80222d0:	e768      	b.n	80221a4 <_vfiprintf_r+0x78>
 80222d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80222d6:	460c      	mov	r4, r1
 80222d8:	2001      	movs	r0, #1
 80222da:	e7a6      	b.n	802222a <_vfiprintf_r+0xfe>
 80222dc:	2300      	movs	r3, #0
 80222de:	3401      	adds	r4, #1
 80222e0:	9305      	str	r3, [sp, #20]
 80222e2:	4619      	mov	r1, r3
 80222e4:	f04f 0c0a 	mov.w	ip, #10
 80222e8:	4620      	mov	r0, r4
 80222ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80222ee:	3a30      	subs	r2, #48	; 0x30
 80222f0:	2a09      	cmp	r2, #9
 80222f2:	d903      	bls.n	80222fc <_vfiprintf_r+0x1d0>
 80222f4:	2b00      	cmp	r3, #0
 80222f6:	d0c6      	beq.n	8022286 <_vfiprintf_r+0x15a>
 80222f8:	9105      	str	r1, [sp, #20]
 80222fa:	e7c4      	b.n	8022286 <_vfiprintf_r+0x15a>
 80222fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8022300:	4604      	mov	r4, r0
 8022302:	2301      	movs	r3, #1
 8022304:	e7f0      	b.n	80222e8 <_vfiprintf_r+0x1bc>
 8022306:	ab03      	add	r3, sp, #12
 8022308:	9300      	str	r3, [sp, #0]
 802230a:	462a      	mov	r2, r5
 802230c:	4b12      	ldr	r3, [pc, #72]	; (8022358 <_vfiprintf_r+0x22c>)
 802230e:	a904      	add	r1, sp, #16
 8022310:	4630      	mov	r0, r6
 8022312:	f3af 8000 	nop.w
 8022316:	4607      	mov	r7, r0
 8022318:	1c78      	adds	r0, r7, #1
 802231a:	d1d6      	bne.n	80222ca <_vfiprintf_r+0x19e>
 802231c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802231e:	07d9      	lsls	r1, r3, #31
 8022320:	d405      	bmi.n	802232e <_vfiprintf_r+0x202>
 8022322:	89ab      	ldrh	r3, [r5, #12]
 8022324:	059a      	lsls	r2, r3, #22
 8022326:	d402      	bmi.n	802232e <_vfiprintf_r+0x202>
 8022328:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802232a:	f7ff fd13 	bl	8021d54 <__retarget_lock_release_recursive>
 802232e:	89ab      	ldrh	r3, [r5, #12]
 8022330:	065b      	lsls	r3, r3, #25
 8022332:	f53f af1d 	bmi.w	8022170 <_vfiprintf_r+0x44>
 8022336:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022338:	e71c      	b.n	8022174 <_vfiprintf_r+0x48>
 802233a:	ab03      	add	r3, sp, #12
 802233c:	9300      	str	r3, [sp, #0]
 802233e:	462a      	mov	r2, r5
 8022340:	4b05      	ldr	r3, [pc, #20]	; (8022358 <_vfiprintf_r+0x22c>)
 8022342:	a904      	add	r1, sp, #16
 8022344:	4630      	mov	r0, r6
 8022346:	f000 f879 	bl	802243c <_printf_i>
 802234a:	e7e4      	b.n	8022316 <_vfiprintf_r+0x1ea>
 802234c:	08027abb 	.word	0x08027abb
 8022350:	08027ac5 	.word	0x08027ac5
 8022354:	00000000 	.word	0x00000000
 8022358:	08022107 	.word	0x08022107
 802235c:	08027ac1 	.word	0x08027ac1

08022360 <_printf_common>:
 8022360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022364:	4616      	mov	r6, r2
 8022366:	4699      	mov	r9, r3
 8022368:	688a      	ldr	r2, [r1, #8]
 802236a:	690b      	ldr	r3, [r1, #16]
 802236c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022370:	4293      	cmp	r3, r2
 8022372:	bfb8      	it	lt
 8022374:	4613      	movlt	r3, r2
 8022376:	6033      	str	r3, [r6, #0]
 8022378:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802237c:	4607      	mov	r7, r0
 802237e:	460c      	mov	r4, r1
 8022380:	b10a      	cbz	r2, 8022386 <_printf_common+0x26>
 8022382:	3301      	adds	r3, #1
 8022384:	6033      	str	r3, [r6, #0]
 8022386:	6823      	ldr	r3, [r4, #0]
 8022388:	0699      	lsls	r1, r3, #26
 802238a:	bf42      	ittt	mi
 802238c:	6833      	ldrmi	r3, [r6, #0]
 802238e:	3302      	addmi	r3, #2
 8022390:	6033      	strmi	r3, [r6, #0]
 8022392:	6825      	ldr	r5, [r4, #0]
 8022394:	f015 0506 	ands.w	r5, r5, #6
 8022398:	d106      	bne.n	80223a8 <_printf_common+0x48>
 802239a:	f104 0a19 	add.w	sl, r4, #25
 802239e:	68e3      	ldr	r3, [r4, #12]
 80223a0:	6832      	ldr	r2, [r6, #0]
 80223a2:	1a9b      	subs	r3, r3, r2
 80223a4:	42ab      	cmp	r3, r5
 80223a6:	dc26      	bgt.n	80223f6 <_printf_common+0x96>
 80223a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80223ac:	1e13      	subs	r3, r2, #0
 80223ae:	6822      	ldr	r2, [r4, #0]
 80223b0:	bf18      	it	ne
 80223b2:	2301      	movne	r3, #1
 80223b4:	0692      	lsls	r2, r2, #26
 80223b6:	d42b      	bmi.n	8022410 <_printf_common+0xb0>
 80223b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80223bc:	4649      	mov	r1, r9
 80223be:	4638      	mov	r0, r7
 80223c0:	47c0      	blx	r8
 80223c2:	3001      	adds	r0, #1
 80223c4:	d01e      	beq.n	8022404 <_printf_common+0xa4>
 80223c6:	6823      	ldr	r3, [r4, #0]
 80223c8:	6922      	ldr	r2, [r4, #16]
 80223ca:	f003 0306 	and.w	r3, r3, #6
 80223ce:	2b04      	cmp	r3, #4
 80223d0:	bf02      	ittt	eq
 80223d2:	68e5      	ldreq	r5, [r4, #12]
 80223d4:	6833      	ldreq	r3, [r6, #0]
 80223d6:	1aed      	subeq	r5, r5, r3
 80223d8:	68a3      	ldr	r3, [r4, #8]
 80223da:	bf0c      	ite	eq
 80223dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80223e0:	2500      	movne	r5, #0
 80223e2:	4293      	cmp	r3, r2
 80223e4:	bfc4      	itt	gt
 80223e6:	1a9b      	subgt	r3, r3, r2
 80223e8:	18ed      	addgt	r5, r5, r3
 80223ea:	2600      	movs	r6, #0
 80223ec:	341a      	adds	r4, #26
 80223ee:	42b5      	cmp	r5, r6
 80223f0:	d11a      	bne.n	8022428 <_printf_common+0xc8>
 80223f2:	2000      	movs	r0, #0
 80223f4:	e008      	b.n	8022408 <_printf_common+0xa8>
 80223f6:	2301      	movs	r3, #1
 80223f8:	4652      	mov	r2, sl
 80223fa:	4649      	mov	r1, r9
 80223fc:	4638      	mov	r0, r7
 80223fe:	47c0      	blx	r8
 8022400:	3001      	adds	r0, #1
 8022402:	d103      	bne.n	802240c <_printf_common+0xac>
 8022404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802240c:	3501      	adds	r5, #1
 802240e:	e7c6      	b.n	802239e <_printf_common+0x3e>
 8022410:	18e1      	adds	r1, r4, r3
 8022412:	1c5a      	adds	r2, r3, #1
 8022414:	2030      	movs	r0, #48	; 0x30
 8022416:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802241a:	4422      	add	r2, r4
 802241c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022420:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022424:	3302      	adds	r3, #2
 8022426:	e7c7      	b.n	80223b8 <_printf_common+0x58>
 8022428:	2301      	movs	r3, #1
 802242a:	4622      	mov	r2, r4
 802242c:	4649      	mov	r1, r9
 802242e:	4638      	mov	r0, r7
 8022430:	47c0      	blx	r8
 8022432:	3001      	adds	r0, #1
 8022434:	d0e6      	beq.n	8022404 <_printf_common+0xa4>
 8022436:	3601      	adds	r6, #1
 8022438:	e7d9      	b.n	80223ee <_printf_common+0x8e>
	...

0802243c <_printf_i>:
 802243c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022440:	7e0f      	ldrb	r7, [r1, #24]
 8022442:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022444:	2f78      	cmp	r7, #120	; 0x78
 8022446:	4691      	mov	r9, r2
 8022448:	4680      	mov	r8, r0
 802244a:	460c      	mov	r4, r1
 802244c:	469a      	mov	sl, r3
 802244e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8022452:	d807      	bhi.n	8022464 <_printf_i+0x28>
 8022454:	2f62      	cmp	r7, #98	; 0x62
 8022456:	d80a      	bhi.n	802246e <_printf_i+0x32>
 8022458:	2f00      	cmp	r7, #0
 802245a:	f000 80d4 	beq.w	8022606 <_printf_i+0x1ca>
 802245e:	2f58      	cmp	r7, #88	; 0x58
 8022460:	f000 80c0 	beq.w	80225e4 <_printf_i+0x1a8>
 8022464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022468:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802246c:	e03a      	b.n	80224e4 <_printf_i+0xa8>
 802246e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8022472:	2b15      	cmp	r3, #21
 8022474:	d8f6      	bhi.n	8022464 <_printf_i+0x28>
 8022476:	a101      	add	r1, pc, #4	; (adr r1, 802247c <_printf_i+0x40>)
 8022478:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802247c:	080224d5 	.word	0x080224d5
 8022480:	080224e9 	.word	0x080224e9
 8022484:	08022465 	.word	0x08022465
 8022488:	08022465 	.word	0x08022465
 802248c:	08022465 	.word	0x08022465
 8022490:	08022465 	.word	0x08022465
 8022494:	080224e9 	.word	0x080224e9
 8022498:	08022465 	.word	0x08022465
 802249c:	08022465 	.word	0x08022465
 80224a0:	08022465 	.word	0x08022465
 80224a4:	08022465 	.word	0x08022465
 80224a8:	080225ed 	.word	0x080225ed
 80224ac:	08022515 	.word	0x08022515
 80224b0:	080225a7 	.word	0x080225a7
 80224b4:	08022465 	.word	0x08022465
 80224b8:	08022465 	.word	0x08022465
 80224bc:	0802260f 	.word	0x0802260f
 80224c0:	08022465 	.word	0x08022465
 80224c4:	08022515 	.word	0x08022515
 80224c8:	08022465 	.word	0x08022465
 80224cc:	08022465 	.word	0x08022465
 80224d0:	080225af 	.word	0x080225af
 80224d4:	682b      	ldr	r3, [r5, #0]
 80224d6:	1d1a      	adds	r2, r3, #4
 80224d8:	681b      	ldr	r3, [r3, #0]
 80224da:	602a      	str	r2, [r5, #0]
 80224dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80224e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80224e4:	2301      	movs	r3, #1
 80224e6:	e09f      	b.n	8022628 <_printf_i+0x1ec>
 80224e8:	6820      	ldr	r0, [r4, #0]
 80224ea:	682b      	ldr	r3, [r5, #0]
 80224ec:	0607      	lsls	r7, r0, #24
 80224ee:	f103 0104 	add.w	r1, r3, #4
 80224f2:	6029      	str	r1, [r5, #0]
 80224f4:	d501      	bpl.n	80224fa <_printf_i+0xbe>
 80224f6:	681e      	ldr	r6, [r3, #0]
 80224f8:	e003      	b.n	8022502 <_printf_i+0xc6>
 80224fa:	0646      	lsls	r6, r0, #25
 80224fc:	d5fb      	bpl.n	80224f6 <_printf_i+0xba>
 80224fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8022502:	2e00      	cmp	r6, #0
 8022504:	da03      	bge.n	802250e <_printf_i+0xd2>
 8022506:	232d      	movs	r3, #45	; 0x2d
 8022508:	4276      	negs	r6, r6
 802250a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802250e:	485a      	ldr	r0, [pc, #360]	; (8022678 <_printf_i+0x23c>)
 8022510:	230a      	movs	r3, #10
 8022512:	e012      	b.n	802253a <_printf_i+0xfe>
 8022514:	682b      	ldr	r3, [r5, #0]
 8022516:	6820      	ldr	r0, [r4, #0]
 8022518:	1d19      	adds	r1, r3, #4
 802251a:	6029      	str	r1, [r5, #0]
 802251c:	0605      	lsls	r5, r0, #24
 802251e:	d501      	bpl.n	8022524 <_printf_i+0xe8>
 8022520:	681e      	ldr	r6, [r3, #0]
 8022522:	e002      	b.n	802252a <_printf_i+0xee>
 8022524:	0641      	lsls	r1, r0, #25
 8022526:	d5fb      	bpl.n	8022520 <_printf_i+0xe4>
 8022528:	881e      	ldrh	r6, [r3, #0]
 802252a:	4853      	ldr	r0, [pc, #332]	; (8022678 <_printf_i+0x23c>)
 802252c:	2f6f      	cmp	r7, #111	; 0x6f
 802252e:	bf0c      	ite	eq
 8022530:	2308      	moveq	r3, #8
 8022532:	230a      	movne	r3, #10
 8022534:	2100      	movs	r1, #0
 8022536:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802253a:	6865      	ldr	r5, [r4, #4]
 802253c:	60a5      	str	r5, [r4, #8]
 802253e:	2d00      	cmp	r5, #0
 8022540:	bfa2      	ittt	ge
 8022542:	6821      	ldrge	r1, [r4, #0]
 8022544:	f021 0104 	bicge.w	r1, r1, #4
 8022548:	6021      	strge	r1, [r4, #0]
 802254a:	b90e      	cbnz	r6, 8022550 <_printf_i+0x114>
 802254c:	2d00      	cmp	r5, #0
 802254e:	d04b      	beq.n	80225e8 <_printf_i+0x1ac>
 8022550:	4615      	mov	r5, r2
 8022552:	fbb6 f1f3 	udiv	r1, r6, r3
 8022556:	fb03 6711 	mls	r7, r3, r1, r6
 802255a:	5dc7      	ldrb	r7, [r0, r7]
 802255c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8022560:	4637      	mov	r7, r6
 8022562:	42bb      	cmp	r3, r7
 8022564:	460e      	mov	r6, r1
 8022566:	d9f4      	bls.n	8022552 <_printf_i+0x116>
 8022568:	2b08      	cmp	r3, #8
 802256a:	d10b      	bne.n	8022584 <_printf_i+0x148>
 802256c:	6823      	ldr	r3, [r4, #0]
 802256e:	07de      	lsls	r6, r3, #31
 8022570:	d508      	bpl.n	8022584 <_printf_i+0x148>
 8022572:	6923      	ldr	r3, [r4, #16]
 8022574:	6861      	ldr	r1, [r4, #4]
 8022576:	4299      	cmp	r1, r3
 8022578:	bfde      	ittt	le
 802257a:	2330      	movle	r3, #48	; 0x30
 802257c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8022580:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8022584:	1b52      	subs	r2, r2, r5
 8022586:	6122      	str	r2, [r4, #16]
 8022588:	f8cd a000 	str.w	sl, [sp]
 802258c:	464b      	mov	r3, r9
 802258e:	aa03      	add	r2, sp, #12
 8022590:	4621      	mov	r1, r4
 8022592:	4640      	mov	r0, r8
 8022594:	f7ff fee4 	bl	8022360 <_printf_common>
 8022598:	3001      	adds	r0, #1
 802259a:	d14a      	bne.n	8022632 <_printf_i+0x1f6>
 802259c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80225a0:	b004      	add	sp, #16
 80225a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80225a6:	6823      	ldr	r3, [r4, #0]
 80225a8:	f043 0320 	orr.w	r3, r3, #32
 80225ac:	6023      	str	r3, [r4, #0]
 80225ae:	4833      	ldr	r0, [pc, #204]	; (802267c <_printf_i+0x240>)
 80225b0:	2778      	movs	r7, #120	; 0x78
 80225b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80225b6:	6823      	ldr	r3, [r4, #0]
 80225b8:	6829      	ldr	r1, [r5, #0]
 80225ba:	061f      	lsls	r7, r3, #24
 80225bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80225c0:	d402      	bmi.n	80225c8 <_printf_i+0x18c>
 80225c2:	065f      	lsls	r7, r3, #25
 80225c4:	bf48      	it	mi
 80225c6:	b2b6      	uxthmi	r6, r6
 80225c8:	07df      	lsls	r7, r3, #31
 80225ca:	bf48      	it	mi
 80225cc:	f043 0320 	orrmi.w	r3, r3, #32
 80225d0:	6029      	str	r1, [r5, #0]
 80225d2:	bf48      	it	mi
 80225d4:	6023      	strmi	r3, [r4, #0]
 80225d6:	b91e      	cbnz	r6, 80225e0 <_printf_i+0x1a4>
 80225d8:	6823      	ldr	r3, [r4, #0]
 80225da:	f023 0320 	bic.w	r3, r3, #32
 80225de:	6023      	str	r3, [r4, #0]
 80225e0:	2310      	movs	r3, #16
 80225e2:	e7a7      	b.n	8022534 <_printf_i+0xf8>
 80225e4:	4824      	ldr	r0, [pc, #144]	; (8022678 <_printf_i+0x23c>)
 80225e6:	e7e4      	b.n	80225b2 <_printf_i+0x176>
 80225e8:	4615      	mov	r5, r2
 80225ea:	e7bd      	b.n	8022568 <_printf_i+0x12c>
 80225ec:	682b      	ldr	r3, [r5, #0]
 80225ee:	6826      	ldr	r6, [r4, #0]
 80225f0:	6961      	ldr	r1, [r4, #20]
 80225f2:	1d18      	adds	r0, r3, #4
 80225f4:	6028      	str	r0, [r5, #0]
 80225f6:	0635      	lsls	r5, r6, #24
 80225f8:	681b      	ldr	r3, [r3, #0]
 80225fa:	d501      	bpl.n	8022600 <_printf_i+0x1c4>
 80225fc:	6019      	str	r1, [r3, #0]
 80225fe:	e002      	b.n	8022606 <_printf_i+0x1ca>
 8022600:	0670      	lsls	r0, r6, #25
 8022602:	d5fb      	bpl.n	80225fc <_printf_i+0x1c0>
 8022604:	8019      	strh	r1, [r3, #0]
 8022606:	2300      	movs	r3, #0
 8022608:	6123      	str	r3, [r4, #16]
 802260a:	4615      	mov	r5, r2
 802260c:	e7bc      	b.n	8022588 <_printf_i+0x14c>
 802260e:	682b      	ldr	r3, [r5, #0]
 8022610:	1d1a      	adds	r2, r3, #4
 8022612:	602a      	str	r2, [r5, #0]
 8022614:	681d      	ldr	r5, [r3, #0]
 8022616:	6862      	ldr	r2, [r4, #4]
 8022618:	2100      	movs	r1, #0
 802261a:	4628      	mov	r0, r5
 802261c:	f7dd fdf0 	bl	8000200 <memchr>
 8022620:	b108      	cbz	r0, 8022626 <_printf_i+0x1ea>
 8022622:	1b40      	subs	r0, r0, r5
 8022624:	6060      	str	r0, [r4, #4]
 8022626:	6863      	ldr	r3, [r4, #4]
 8022628:	6123      	str	r3, [r4, #16]
 802262a:	2300      	movs	r3, #0
 802262c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022630:	e7aa      	b.n	8022588 <_printf_i+0x14c>
 8022632:	6923      	ldr	r3, [r4, #16]
 8022634:	462a      	mov	r2, r5
 8022636:	4649      	mov	r1, r9
 8022638:	4640      	mov	r0, r8
 802263a:	47d0      	blx	sl
 802263c:	3001      	adds	r0, #1
 802263e:	d0ad      	beq.n	802259c <_printf_i+0x160>
 8022640:	6823      	ldr	r3, [r4, #0]
 8022642:	079b      	lsls	r3, r3, #30
 8022644:	d413      	bmi.n	802266e <_printf_i+0x232>
 8022646:	68e0      	ldr	r0, [r4, #12]
 8022648:	9b03      	ldr	r3, [sp, #12]
 802264a:	4298      	cmp	r0, r3
 802264c:	bfb8      	it	lt
 802264e:	4618      	movlt	r0, r3
 8022650:	e7a6      	b.n	80225a0 <_printf_i+0x164>
 8022652:	2301      	movs	r3, #1
 8022654:	4632      	mov	r2, r6
 8022656:	4649      	mov	r1, r9
 8022658:	4640      	mov	r0, r8
 802265a:	47d0      	blx	sl
 802265c:	3001      	adds	r0, #1
 802265e:	d09d      	beq.n	802259c <_printf_i+0x160>
 8022660:	3501      	adds	r5, #1
 8022662:	68e3      	ldr	r3, [r4, #12]
 8022664:	9903      	ldr	r1, [sp, #12]
 8022666:	1a5b      	subs	r3, r3, r1
 8022668:	42ab      	cmp	r3, r5
 802266a:	dcf2      	bgt.n	8022652 <_printf_i+0x216>
 802266c:	e7eb      	b.n	8022646 <_printf_i+0x20a>
 802266e:	2500      	movs	r5, #0
 8022670:	f104 0619 	add.w	r6, r4, #25
 8022674:	e7f5      	b.n	8022662 <_printf_i+0x226>
 8022676:	bf00      	nop
 8022678:	08027acc 	.word	0x08027acc
 802267c:	08027add 	.word	0x08027add

08022680 <__sflush_r>:
 8022680:	898a      	ldrh	r2, [r1, #12]
 8022682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022686:	4605      	mov	r5, r0
 8022688:	0710      	lsls	r0, r2, #28
 802268a:	460c      	mov	r4, r1
 802268c:	d458      	bmi.n	8022740 <__sflush_r+0xc0>
 802268e:	684b      	ldr	r3, [r1, #4]
 8022690:	2b00      	cmp	r3, #0
 8022692:	dc05      	bgt.n	80226a0 <__sflush_r+0x20>
 8022694:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022696:	2b00      	cmp	r3, #0
 8022698:	dc02      	bgt.n	80226a0 <__sflush_r+0x20>
 802269a:	2000      	movs	r0, #0
 802269c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80226a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80226a2:	2e00      	cmp	r6, #0
 80226a4:	d0f9      	beq.n	802269a <__sflush_r+0x1a>
 80226a6:	2300      	movs	r3, #0
 80226a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80226ac:	682f      	ldr	r7, [r5, #0]
 80226ae:	6a21      	ldr	r1, [r4, #32]
 80226b0:	602b      	str	r3, [r5, #0]
 80226b2:	d032      	beq.n	802271a <__sflush_r+0x9a>
 80226b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80226b6:	89a3      	ldrh	r3, [r4, #12]
 80226b8:	075a      	lsls	r2, r3, #29
 80226ba:	d505      	bpl.n	80226c8 <__sflush_r+0x48>
 80226bc:	6863      	ldr	r3, [r4, #4]
 80226be:	1ac0      	subs	r0, r0, r3
 80226c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80226c2:	b10b      	cbz	r3, 80226c8 <__sflush_r+0x48>
 80226c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80226c6:	1ac0      	subs	r0, r0, r3
 80226c8:	2300      	movs	r3, #0
 80226ca:	4602      	mov	r2, r0
 80226cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80226ce:	6a21      	ldr	r1, [r4, #32]
 80226d0:	4628      	mov	r0, r5
 80226d2:	47b0      	blx	r6
 80226d4:	1c43      	adds	r3, r0, #1
 80226d6:	89a3      	ldrh	r3, [r4, #12]
 80226d8:	d106      	bne.n	80226e8 <__sflush_r+0x68>
 80226da:	6829      	ldr	r1, [r5, #0]
 80226dc:	291d      	cmp	r1, #29
 80226de:	d82b      	bhi.n	8022738 <__sflush_r+0xb8>
 80226e0:	4a29      	ldr	r2, [pc, #164]	; (8022788 <__sflush_r+0x108>)
 80226e2:	410a      	asrs	r2, r1
 80226e4:	07d6      	lsls	r6, r2, #31
 80226e6:	d427      	bmi.n	8022738 <__sflush_r+0xb8>
 80226e8:	2200      	movs	r2, #0
 80226ea:	6062      	str	r2, [r4, #4]
 80226ec:	04d9      	lsls	r1, r3, #19
 80226ee:	6922      	ldr	r2, [r4, #16]
 80226f0:	6022      	str	r2, [r4, #0]
 80226f2:	d504      	bpl.n	80226fe <__sflush_r+0x7e>
 80226f4:	1c42      	adds	r2, r0, #1
 80226f6:	d101      	bne.n	80226fc <__sflush_r+0x7c>
 80226f8:	682b      	ldr	r3, [r5, #0]
 80226fa:	b903      	cbnz	r3, 80226fe <__sflush_r+0x7e>
 80226fc:	6560      	str	r0, [r4, #84]	; 0x54
 80226fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022700:	602f      	str	r7, [r5, #0]
 8022702:	2900      	cmp	r1, #0
 8022704:	d0c9      	beq.n	802269a <__sflush_r+0x1a>
 8022706:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802270a:	4299      	cmp	r1, r3
 802270c:	d002      	beq.n	8022714 <__sflush_r+0x94>
 802270e:	4628      	mov	r0, r5
 8022710:	f7ff fb3e 	bl	8021d90 <_free_r>
 8022714:	2000      	movs	r0, #0
 8022716:	6360      	str	r0, [r4, #52]	; 0x34
 8022718:	e7c0      	b.n	802269c <__sflush_r+0x1c>
 802271a:	2301      	movs	r3, #1
 802271c:	4628      	mov	r0, r5
 802271e:	47b0      	blx	r6
 8022720:	1c41      	adds	r1, r0, #1
 8022722:	d1c8      	bne.n	80226b6 <__sflush_r+0x36>
 8022724:	682b      	ldr	r3, [r5, #0]
 8022726:	2b00      	cmp	r3, #0
 8022728:	d0c5      	beq.n	80226b6 <__sflush_r+0x36>
 802272a:	2b1d      	cmp	r3, #29
 802272c:	d001      	beq.n	8022732 <__sflush_r+0xb2>
 802272e:	2b16      	cmp	r3, #22
 8022730:	d101      	bne.n	8022736 <__sflush_r+0xb6>
 8022732:	602f      	str	r7, [r5, #0]
 8022734:	e7b1      	b.n	802269a <__sflush_r+0x1a>
 8022736:	89a3      	ldrh	r3, [r4, #12]
 8022738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802273c:	81a3      	strh	r3, [r4, #12]
 802273e:	e7ad      	b.n	802269c <__sflush_r+0x1c>
 8022740:	690f      	ldr	r7, [r1, #16]
 8022742:	2f00      	cmp	r7, #0
 8022744:	d0a9      	beq.n	802269a <__sflush_r+0x1a>
 8022746:	0793      	lsls	r3, r2, #30
 8022748:	680e      	ldr	r6, [r1, #0]
 802274a:	bf08      	it	eq
 802274c:	694b      	ldreq	r3, [r1, #20]
 802274e:	600f      	str	r7, [r1, #0]
 8022750:	bf18      	it	ne
 8022752:	2300      	movne	r3, #0
 8022754:	eba6 0807 	sub.w	r8, r6, r7
 8022758:	608b      	str	r3, [r1, #8]
 802275a:	f1b8 0f00 	cmp.w	r8, #0
 802275e:	dd9c      	ble.n	802269a <__sflush_r+0x1a>
 8022760:	6a21      	ldr	r1, [r4, #32]
 8022762:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022764:	4643      	mov	r3, r8
 8022766:	463a      	mov	r2, r7
 8022768:	4628      	mov	r0, r5
 802276a:	47b0      	blx	r6
 802276c:	2800      	cmp	r0, #0
 802276e:	dc06      	bgt.n	802277e <__sflush_r+0xfe>
 8022770:	89a3      	ldrh	r3, [r4, #12]
 8022772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022776:	81a3      	strh	r3, [r4, #12]
 8022778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802277c:	e78e      	b.n	802269c <__sflush_r+0x1c>
 802277e:	4407      	add	r7, r0
 8022780:	eba8 0800 	sub.w	r8, r8, r0
 8022784:	e7e9      	b.n	802275a <__sflush_r+0xda>
 8022786:	bf00      	nop
 8022788:	dfbffffe 	.word	0xdfbffffe

0802278c <_fflush_r>:
 802278c:	b538      	push	{r3, r4, r5, lr}
 802278e:	690b      	ldr	r3, [r1, #16]
 8022790:	4605      	mov	r5, r0
 8022792:	460c      	mov	r4, r1
 8022794:	b913      	cbnz	r3, 802279c <_fflush_r+0x10>
 8022796:	2500      	movs	r5, #0
 8022798:	4628      	mov	r0, r5
 802279a:	bd38      	pop	{r3, r4, r5, pc}
 802279c:	b118      	cbz	r0, 80227a6 <_fflush_r+0x1a>
 802279e:	6a03      	ldr	r3, [r0, #32]
 80227a0:	b90b      	cbnz	r3, 80227a6 <_fflush_r+0x1a>
 80227a2:	f7fe ff07 	bl	80215b4 <__sinit>
 80227a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80227aa:	2b00      	cmp	r3, #0
 80227ac:	d0f3      	beq.n	8022796 <_fflush_r+0xa>
 80227ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80227b0:	07d0      	lsls	r0, r2, #31
 80227b2:	d404      	bmi.n	80227be <_fflush_r+0x32>
 80227b4:	0599      	lsls	r1, r3, #22
 80227b6:	d402      	bmi.n	80227be <_fflush_r+0x32>
 80227b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80227ba:	f7ff faca 	bl	8021d52 <__retarget_lock_acquire_recursive>
 80227be:	4628      	mov	r0, r5
 80227c0:	4621      	mov	r1, r4
 80227c2:	f7ff ff5d 	bl	8022680 <__sflush_r>
 80227c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80227c8:	07da      	lsls	r2, r3, #31
 80227ca:	4605      	mov	r5, r0
 80227cc:	d4e4      	bmi.n	8022798 <_fflush_r+0xc>
 80227ce:	89a3      	ldrh	r3, [r4, #12]
 80227d0:	059b      	lsls	r3, r3, #22
 80227d2:	d4e1      	bmi.n	8022798 <_fflush_r+0xc>
 80227d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80227d6:	f7ff fabd 	bl	8021d54 <__retarget_lock_release_recursive>
 80227da:	e7dd      	b.n	8022798 <_fflush_r+0xc>

080227dc <__swhatbuf_r>:
 80227dc:	b570      	push	{r4, r5, r6, lr}
 80227de:	460c      	mov	r4, r1
 80227e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80227e4:	2900      	cmp	r1, #0
 80227e6:	b096      	sub	sp, #88	; 0x58
 80227e8:	4615      	mov	r5, r2
 80227ea:	461e      	mov	r6, r3
 80227ec:	da0d      	bge.n	802280a <__swhatbuf_r+0x2e>
 80227ee:	89a3      	ldrh	r3, [r4, #12]
 80227f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80227f4:	f04f 0100 	mov.w	r1, #0
 80227f8:	bf0c      	ite	eq
 80227fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80227fe:	2340      	movne	r3, #64	; 0x40
 8022800:	2000      	movs	r0, #0
 8022802:	6031      	str	r1, [r6, #0]
 8022804:	602b      	str	r3, [r5, #0]
 8022806:	b016      	add	sp, #88	; 0x58
 8022808:	bd70      	pop	{r4, r5, r6, pc}
 802280a:	466a      	mov	r2, sp
 802280c:	f000 f878 	bl	8022900 <_fstat_r>
 8022810:	2800      	cmp	r0, #0
 8022812:	dbec      	blt.n	80227ee <__swhatbuf_r+0x12>
 8022814:	9901      	ldr	r1, [sp, #4]
 8022816:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802281a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 802281e:	4259      	negs	r1, r3
 8022820:	4159      	adcs	r1, r3
 8022822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022826:	e7eb      	b.n	8022800 <__swhatbuf_r+0x24>

08022828 <__smakebuf_r>:
 8022828:	898b      	ldrh	r3, [r1, #12]
 802282a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802282c:	079d      	lsls	r5, r3, #30
 802282e:	4606      	mov	r6, r0
 8022830:	460c      	mov	r4, r1
 8022832:	d507      	bpl.n	8022844 <__smakebuf_r+0x1c>
 8022834:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022838:	6023      	str	r3, [r4, #0]
 802283a:	6123      	str	r3, [r4, #16]
 802283c:	2301      	movs	r3, #1
 802283e:	6163      	str	r3, [r4, #20]
 8022840:	b002      	add	sp, #8
 8022842:	bd70      	pop	{r4, r5, r6, pc}
 8022844:	ab01      	add	r3, sp, #4
 8022846:	466a      	mov	r2, sp
 8022848:	f7ff ffc8 	bl	80227dc <__swhatbuf_r>
 802284c:	9900      	ldr	r1, [sp, #0]
 802284e:	4605      	mov	r5, r0
 8022850:	4630      	mov	r0, r6
 8022852:	f7fe fd59 	bl	8021308 <_malloc_r>
 8022856:	b948      	cbnz	r0, 802286c <__smakebuf_r+0x44>
 8022858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802285c:	059a      	lsls	r2, r3, #22
 802285e:	d4ef      	bmi.n	8022840 <__smakebuf_r+0x18>
 8022860:	f023 0303 	bic.w	r3, r3, #3
 8022864:	f043 0302 	orr.w	r3, r3, #2
 8022868:	81a3      	strh	r3, [r4, #12]
 802286a:	e7e3      	b.n	8022834 <__smakebuf_r+0xc>
 802286c:	89a3      	ldrh	r3, [r4, #12]
 802286e:	6020      	str	r0, [r4, #0]
 8022870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022874:	81a3      	strh	r3, [r4, #12]
 8022876:	9b00      	ldr	r3, [sp, #0]
 8022878:	6163      	str	r3, [r4, #20]
 802287a:	9b01      	ldr	r3, [sp, #4]
 802287c:	6120      	str	r0, [r4, #16]
 802287e:	b15b      	cbz	r3, 8022898 <__smakebuf_r+0x70>
 8022880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022884:	4630      	mov	r0, r6
 8022886:	f000 f84d 	bl	8022924 <_isatty_r>
 802288a:	b128      	cbz	r0, 8022898 <__smakebuf_r+0x70>
 802288c:	89a3      	ldrh	r3, [r4, #12]
 802288e:	f023 0303 	bic.w	r3, r3, #3
 8022892:	f043 0301 	orr.w	r3, r3, #1
 8022896:	81a3      	strh	r3, [r4, #12]
 8022898:	89a3      	ldrh	r3, [r4, #12]
 802289a:	431d      	orrs	r5, r3
 802289c:	81a5      	strh	r5, [r4, #12]
 802289e:	e7cf      	b.n	8022840 <__smakebuf_r+0x18>

080228a0 <_raise_r>:
 80228a0:	291f      	cmp	r1, #31
 80228a2:	b538      	push	{r3, r4, r5, lr}
 80228a4:	4604      	mov	r4, r0
 80228a6:	460d      	mov	r5, r1
 80228a8:	d904      	bls.n	80228b4 <_raise_r+0x14>
 80228aa:	2316      	movs	r3, #22
 80228ac:	6003      	str	r3, [r0, #0]
 80228ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80228b2:	bd38      	pop	{r3, r4, r5, pc}
 80228b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80228b6:	b112      	cbz	r2, 80228be <_raise_r+0x1e>
 80228b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80228bc:	b94b      	cbnz	r3, 80228d2 <_raise_r+0x32>
 80228be:	4620      	mov	r0, r4
 80228c0:	f000 f852 	bl	8022968 <_getpid_r>
 80228c4:	462a      	mov	r2, r5
 80228c6:	4601      	mov	r1, r0
 80228c8:	4620      	mov	r0, r4
 80228ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80228ce:	f000 b839 	b.w	8022944 <_kill_r>
 80228d2:	2b01      	cmp	r3, #1
 80228d4:	d00a      	beq.n	80228ec <_raise_r+0x4c>
 80228d6:	1c59      	adds	r1, r3, #1
 80228d8:	d103      	bne.n	80228e2 <_raise_r+0x42>
 80228da:	2316      	movs	r3, #22
 80228dc:	6003      	str	r3, [r0, #0]
 80228de:	2001      	movs	r0, #1
 80228e0:	e7e7      	b.n	80228b2 <_raise_r+0x12>
 80228e2:	2400      	movs	r4, #0
 80228e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80228e8:	4628      	mov	r0, r5
 80228ea:	4798      	blx	r3
 80228ec:	2000      	movs	r0, #0
 80228ee:	e7e0      	b.n	80228b2 <_raise_r+0x12>

080228f0 <raise>:
 80228f0:	4b02      	ldr	r3, [pc, #8]	; (80228fc <raise+0xc>)
 80228f2:	4601      	mov	r1, r0
 80228f4:	6818      	ldr	r0, [r3, #0]
 80228f6:	f7ff bfd3 	b.w	80228a0 <_raise_r>
 80228fa:	bf00      	nop
 80228fc:	20000094 	.word	0x20000094

08022900 <_fstat_r>:
 8022900:	b538      	push	{r3, r4, r5, lr}
 8022902:	4d07      	ldr	r5, [pc, #28]	; (8022920 <_fstat_r+0x20>)
 8022904:	2300      	movs	r3, #0
 8022906:	4604      	mov	r4, r0
 8022908:	4608      	mov	r0, r1
 802290a:	4611      	mov	r1, r2
 802290c:	602b      	str	r3, [r5, #0]
 802290e:	f7df fa18 	bl	8001d42 <_fstat>
 8022912:	1c43      	adds	r3, r0, #1
 8022914:	d102      	bne.n	802291c <_fstat_r+0x1c>
 8022916:	682b      	ldr	r3, [r5, #0]
 8022918:	b103      	cbz	r3, 802291c <_fstat_r+0x1c>
 802291a:	6023      	str	r3, [r4, #0]
 802291c:	bd38      	pop	{r3, r4, r5, pc}
 802291e:	bf00      	nop
 8022920:	20012ce4 	.word	0x20012ce4

08022924 <_isatty_r>:
 8022924:	b538      	push	{r3, r4, r5, lr}
 8022926:	4d06      	ldr	r5, [pc, #24]	; (8022940 <_isatty_r+0x1c>)
 8022928:	2300      	movs	r3, #0
 802292a:	4604      	mov	r4, r0
 802292c:	4608      	mov	r0, r1
 802292e:	602b      	str	r3, [r5, #0]
 8022930:	f7df fa17 	bl	8001d62 <_isatty>
 8022934:	1c43      	adds	r3, r0, #1
 8022936:	d102      	bne.n	802293e <_isatty_r+0x1a>
 8022938:	682b      	ldr	r3, [r5, #0]
 802293a:	b103      	cbz	r3, 802293e <_isatty_r+0x1a>
 802293c:	6023      	str	r3, [r4, #0]
 802293e:	bd38      	pop	{r3, r4, r5, pc}
 8022940:	20012ce4 	.word	0x20012ce4

08022944 <_kill_r>:
 8022944:	b538      	push	{r3, r4, r5, lr}
 8022946:	4d07      	ldr	r5, [pc, #28]	; (8022964 <_kill_r+0x20>)
 8022948:	2300      	movs	r3, #0
 802294a:	4604      	mov	r4, r0
 802294c:	4608      	mov	r0, r1
 802294e:	4611      	mov	r1, r2
 8022950:	602b      	str	r3, [r5, #0]
 8022952:	f7df f995 	bl	8001c80 <_kill>
 8022956:	1c43      	adds	r3, r0, #1
 8022958:	d102      	bne.n	8022960 <_kill_r+0x1c>
 802295a:	682b      	ldr	r3, [r5, #0]
 802295c:	b103      	cbz	r3, 8022960 <_kill_r+0x1c>
 802295e:	6023      	str	r3, [r4, #0]
 8022960:	bd38      	pop	{r3, r4, r5, pc}
 8022962:	bf00      	nop
 8022964:	20012ce4 	.word	0x20012ce4

08022968 <_getpid_r>:
 8022968:	f7df b982 	b.w	8001c70 <_getpid>

0802296c <_realloc_r>:
 802296c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022970:	4680      	mov	r8, r0
 8022972:	4614      	mov	r4, r2
 8022974:	460e      	mov	r6, r1
 8022976:	b921      	cbnz	r1, 8022982 <_realloc_r+0x16>
 8022978:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802297c:	4611      	mov	r1, r2
 802297e:	f7fe bcc3 	b.w	8021308 <_malloc_r>
 8022982:	b92a      	cbnz	r2, 8022990 <_realloc_r+0x24>
 8022984:	f7ff fa04 	bl	8021d90 <_free_r>
 8022988:	4625      	mov	r5, r4
 802298a:	4628      	mov	r0, r5
 802298c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022990:	f000 f81b 	bl	80229ca <_malloc_usable_size_r>
 8022994:	4284      	cmp	r4, r0
 8022996:	4607      	mov	r7, r0
 8022998:	d802      	bhi.n	80229a0 <_realloc_r+0x34>
 802299a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802299e:	d812      	bhi.n	80229c6 <_realloc_r+0x5a>
 80229a0:	4621      	mov	r1, r4
 80229a2:	4640      	mov	r0, r8
 80229a4:	f7fe fcb0 	bl	8021308 <_malloc_r>
 80229a8:	4605      	mov	r5, r0
 80229aa:	2800      	cmp	r0, #0
 80229ac:	d0ed      	beq.n	802298a <_realloc_r+0x1e>
 80229ae:	42bc      	cmp	r4, r7
 80229b0:	4622      	mov	r2, r4
 80229b2:	4631      	mov	r1, r6
 80229b4:	bf28      	it	cs
 80229b6:	463a      	movcs	r2, r7
 80229b8:	f7ff f9d5 	bl	8021d66 <memcpy>
 80229bc:	4631      	mov	r1, r6
 80229be:	4640      	mov	r0, r8
 80229c0:	f7ff f9e6 	bl	8021d90 <_free_r>
 80229c4:	e7e1      	b.n	802298a <_realloc_r+0x1e>
 80229c6:	4635      	mov	r5, r6
 80229c8:	e7df      	b.n	802298a <_realloc_r+0x1e>

080229ca <_malloc_usable_size_r>:
 80229ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80229ce:	1f18      	subs	r0, r3, #4
 80229d0:	2b00      	cmp	r3, #0
 80229d2:	bfbc      	itt	lt
 80229d4:	580b      	ldrlt	r3, [r1, r0]
 80229d6:	18c0      	addlt	r0, r0, r3
 80229d8:	4770      	bx	lr
	...

080229dc <_init>:
 80229dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80229de:	bf00      	nop
 80229e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80229e2:	bc08      	pop	{r3}
 80229e4:	469e      	mov	lr, r3
 80229e6:	4770      	bx	lr

080229e8 <_fini>:
 80229e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80229ea:	bf00      	nop
 80229ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80229ee:	bc08      	pop	{r3}
 80229f0:	469e      	mov	lr, r3
 80229f2:	4770      	bx	lr
